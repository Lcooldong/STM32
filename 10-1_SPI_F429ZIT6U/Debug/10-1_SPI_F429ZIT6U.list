
10-1_SPI_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e18  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08005fc4  08005fc4  00015fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ffc  08005ffc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005ffc  08005ffc  00015ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006004  08006004  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006004  08006004  00016004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006008  08006008  00016008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800600c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000003e4  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003f0  200003f0  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6ca  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036ad  00000000  00000000  0003a706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000014b8  00000000  00000000  0003ddb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001358  00000000  00000000  0003f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027451  00000000  00000000  000405c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b774  00000000  00000000  00067a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec7c1  00000000  00000000  0008318d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016f94e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000055ec  00000000  00000000  0016f9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005fac 	.word	0x08005fac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005fac 	.word	0x08005fac

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <VS1003_SPI_Init>:
uint8_t vs1003ram[5] = {0, 0, 0, 0, 250};

SPI_HandleTypeDef hspi2;

void VS1003_SPI_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    __HAL_RCC_SPI2_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
 80004ee:	4b20      	ldr	r3, [pc, #128]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004f2:	4a1f      	ldr	r2, [pc, #124]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80004f8:	6413      	str	r3, [r2, #64]	; 0x40
 80004fa:	4b1d      	ldr	r3, [pc, #116]	; (8000570 <VS1003_SPI_Init+0x8c>)
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000502:	607b      	str	r3, [r7, #4]
 8000504:	687b      	ldr	r3, [r7, #4]

    hspi2.Instance = SPI2;
 8000506:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000508:	4a1b      	ldr	r2, [pc, #108]	; (8000578 <VS1003_SPI_Init+0x94>)
 800050a:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 800050c:	4b19      	ldr	r3, [pc, #100]	; (8000574 <VS1003_SPI_Init+0x90>)
 800050e:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000512:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000514:	4b17      	ldr	r3, [pc, #92]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000516:	2200      	movs	r2, #0
 8000518:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800051a:	4b16      	ldr	r3, [pc, #88]	; (8000574 <VS1003_SPI_Init+0x90>)
 800051c:	2200      	movs	r2, #0
 800051e:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000520:	4b14      	ldr	r3, [pc, #80]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000522:	2202      	movs	r2, #2
 8000524:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000526:	4b13      	ldr	r3, [pc, #76]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000528:	2201      	movs	r2, #1
 800052a:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <VS1003_SPI_Init+0x90>)
 800052e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000532:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000536:	2210      	movs	r2, #16
 8000538:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <VS1003_SPI_Init+0x90>)
 800053c:	2200      	movs	r2, #0
 800053e:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000540:	4b0c      	ldr	r3, [pc, #48]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000542:	2200      	movs	r2, #0
 8000544:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000546:	4b0b      	ldr	r3, [pc, #44]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000548:	2200      	movs	r2, #0
 800054a:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 0;
 800054c:	4b09      	ldr	r3, [pc, #36]	; (8000574 <VS1003_SPI_Init+0x90>)
 800054e:	2200      	movs	r2, #0
 8000550:	62da      	str	r2, [r3, #44]	; 0x2c

    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000552:	4808      	ldr	r0, [pc, #32]	; (8000574 <VS1003_SPI_Init+0x90>)
 8000554:	f003 fcba 	bl	8003ecc <HAL_SPI_Init>
 8000558:	4603      	mov	r3, r0
 800055a:	2b00      	cmp	r3, #0
 800055c:	d003      	beq.n	8000566 <VS1003_SPI_Init+0x82>
    {
    	Error_Handler(__FILE__, __LINE__);
 800055e:	211b      	movs	r1, #27
 8000560:	4806      	ldr	r0, [pc, #24]	; (800057c <VS1003_SPI_Init+0x98>)
 8000562:	f000 fe6b 	bl	800123c <Error_Handler>
    }
}
 8000566:	bf00      	nop
 8000568:	3708      	adds	r7, #8
 800056a:	46bd      	mov	sp, r7
 800056c:	bd80      	pop	{r7, pc}
 800056e:	bf00      	nop
 8000570:	40023800 	.word	0x40023800
 8000574:	2000003c 	.word	0x2000003c
 8000578:	40003800 	.word	0x40003800
 800057c:	08005fc4 	.word	0x08005fc4

08000580 <VS1003_Init>:


void VS1003_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b088      	sub	sp, #32
 8000584:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	60bb      	str	r3, [r7, #8]
 800058a:	4b40      	ldr	r3, [pc, #256]	; (800068c <VS1003_Init+0x10c>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058e:	4a3f      	ldr	r2, [pc, #252]	; (800068c <VS1003_Init+0x10c>)
 8000590:	f043 0301 	orr.w	r3, r3, #1
 8000594:	6313      	str	r3, [r2, #48]	; 0x30
 8000596:	4b3d      	ldr	r3, [pc, #244]	; (800068c <VS1003_Init+0x10c>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059a:	f003 0301 	and.w	r3, r3, #1
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	607b      	str	r3, [r7, #4]
 80005a6:	4b39      	ldr	r3, [pc, #228]	; (800068c <VS1003_Init+0x10c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a38      	ldr	r2, [pc, #224]	; (800068c <VS1003_Init+0x10c>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b36      	ldr	r3, [pc, #216]	; (800068c <VS1003_Init+0x10c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	603b      	str	r3, [r7, #0]
 80005c2:	4b32      	ldr	r3, [pc, #200]	; (800068c <VS1003_Init+0x10c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a31      	ldr	r2, [pc, #196]	; (800068c <VS1003_Init+0x10c>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b2f      	ldr	r3, [pc, #188]	; (800068c <VS1003_Init+0x10c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	603b      	str	r3, [r7, #0]
 80005d8:	683b      	ldr	r3, [r7, #0]

    /* /CS */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005de:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005e8:	2303      	movs	r3, #3
 80005ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	4619      	mov	r1, r3
 80005f2:	4827      	ldr	r0, [pc, #156]	; (8000690 <VS1003_Init+0x110>)
 80005f4:	f002 fbe4 	bl	8002dc0 <HAL_GPIO_Init>


    /* XDCS */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005f8:	2310      	movs	r3, #16
 80005fa:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 030c 	add.w	r3, r7, #12
 8000600:	4619      	mov	r1, r3
 8000602:	4824      	ldr	r0, [pc, #144]	; (8000694 <VS1003_Init+0x114>)
 8000604:	f002 fbdc 	bl	8002dc0 <HAL_GPIO_Init>

    /* XRESET */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	4619      	mov	r1, r3
 8000612:	4820      	ldr	r0, [pc, #128]	; (8000694 <VS1003_Init+0x114>)
 8000614:	f002 fbd4 	bl	8002dc0 <HAL_GPIO_Init>

    /* DREQ */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000618:	2380      	movs	r3, #128	; 0x80
 800061a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800061c:	2300      	movs	r3, #0
 800061e:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	481c      	ldr	r0, [pc, #112]	; (8000698 <VS1003_Init+0x118>)
 8000628:	f002 fbca 	bl	8002dc0 <HAL_GPIO_Init>
    PB10  ----> SPI2_SCK
    PB14  ----> SPI2_MISO
    PB15  ----> SPI2_MOSI
    */

    GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
 800062c:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8000630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000632:	2302      	movs	r3, #2
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000636:	2300      	movs	r3, #0
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800063e:	2305      	movs	r3, #5
 8000640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000642:	f107 030c 	add.w	r3, r7, #12
 8000646:	4619      	mov	r1, r3
 8000648:	4811      	ldr	r0, [pc, #68]	; (8000690 <VS1003_Init+0x110>)
 800064a:	f002 fbb9 	bl	8002dc0 <HAL_GPIO_Init>

    MP3_RESET(0);
 800064e:	2200      	movs	r2, #0
 8000650:	2140      	movs	r1, #64	; 0x40
 8000652:	4810      	ldr	r0, [pc, #64]	; (8000694 <VS1003_Init+0x114>)
 8000654:	f002 fd78 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 8000658:	2001      	movs	r0, #1
 800065a:	f001 fc1d 	bl	8001e98 <HAL_Delay>
    MP3_RESET(1);
 800065e:	2201      	movs	r2, #1
 8000660:	2140      	movs	r1, #64	; 0x40
 8000662:	480c      	ldr	r0, [pc, #48]	; (8000694 <VS1003_Init+0x114>)
 8000664:	f002 fd70 	bl	8003148 <HAL_GPIO_WritePin>

    MP3_DCS(1);
 8000668:	2201      	movs	r2, #1
 800066a:	2110      	movs	r1, #16
 800066c:	4809      	ldr	r0, [pc, #36]	; (8000694 <VS1003_Init+0x114>)
 800066e:	f002 fd6b 	bl	8003148 <HAL_GPIO_WritePin>
    MP3_CCS(1);
 8000672:	2201      	movs	r2, #1
 8000674:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000678:	4805      	ldr	r0, [pc, #20]	; (8000690 <VS1003_Init+0x110>)
 800067a:	f002 fd65 	bl	8003148 <HAL_GPIO_WritePin>

    VS1003_SPI_Init();
 800067e:	f7ff ff31 	bl	80004e4 <VS1003_SPI_Init>
}
 8000682:	bf00      	nop
 8000684:	3720      	adds	r7, #32
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	40023800 	.word	0x40023800
 8000690:	40020400 	.word	0x40020400
 8000694:	40020000 	.word	0x40020000
 8000698:	40020800 	.word	0x40020800

0800069c <VS1003_SPI_SetSpeed>:


static void VS1003_SPI_SetSpeed(uint8_t SpeedSet)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	4603      	mov	r3, r0
 80006a4:	71fb      	strb	r3, [r7, #7]
    hspi2.Instance = SPI2;
 80006a6:	4b1d      	ldr	r3, [pc, #116]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006a8:	4a1d      	ldr	r2, [pc, #116]	; (8000720 <VS1003_SPI_SetSpeed+0x84>)
 80006aa:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ac:	4b1b      	ldr	r3, [pc, #108]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006ae:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006b2:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006bc:	2200      	movs	r2, #0
 80006be:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006c2:	2202      	movs	r2, #2
 80006c4:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80006cc:	4b13      	ldr	r3, [pc, #76]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006d2:	619a      	str	r2, [r3, #24]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006dc:	2200      	movs	r2, #0
 80006de:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e0:	4b0e      	ldr	r3, [pc, #56]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 0;
 80006e6:	4b0d      	ldr	r3, [pc, #52]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	62da      	str	r2, [r3, #44]	; 0x2c

    if (SpeedSet == SPI_SPEED_LOW)
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d103      	bne.n	80006fa <VS1003_SPI_SetSpeed+0x5e>
    {
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80006f2:	4b0a      	ldr	r3, [pc, #40]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006f4:	2218      	movs	r2, #24
 80006f6:	61da      	str	r2, [r3, #28]
 80006f8:	e002      	b.n	8000700 <VS1003_SPI_SetSpeed+0x64>
    }
    else
    {
        hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 80006fc:	2210      	movs	r2, #16
 80006fe:	61da      	str	r2, [r3, #28]
    }

    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000700:	4806      	ldr	r0, [pc, #24]	; (800071c <VS1003_SPI_SetSpeed+0x80>)
 8000702:	f003 fbe3 	bl	8003ecc <HAL_SPI_Init>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d003      	beq.n	8000714 <VS1003_SPI_SetSpeed+0x78>
    {
    	Error_Handler(__FILE__, __LINE__);
 800070c:	216f      	movs	r1, #111	; 0x6f
 800070e:	4805      	ldr	r0, [pc, #20]	; (8000724 <VS1003_SPI_SetSpeed+0x88>)
 8000710:	f000 fd94 	bl	800123c <Error_Handler>
    }
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}
 800071c:	2000003c 	.word	0x2000003c
 8000720:	40003800 	.word	0x40003800
 8000724:	08005fc4 	.word	0x08005fc4

08000728 <VS1003_SPI_ReadWriteByte>:


static uint16_t VS1003_SPI_ReadWriteByte(uint16_t TxData)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af02      	add	r7, sp, #8
 800072e:	4603      	mov	r3, r0
 8000730:	80fb      	strh	r3, [r7, #6]
    uint8_t RxData;
    HAL_SPI_TransmitReceive(&hspi2, (uint8_t*)&TxData, &RxData, 1, 10);
 8000732:	f107 020f 	add.w	r2, r7, #15
 8000736:	1db9      	adds	r1, r7, #6
 8000738:	230a      	movs	r3, #10
 800073a:	9300      	str	r3, [sp, #0]
 800073c:	2301      	movs	r3, #1
 800073e:	4804      	ldr	r0, [pc, #16]	; (8000750 <VS1003_SPI_ReadWriteByte+0x28>)
 8000740:	f003 fc4d 	bl	8003fde <HAL_SPI_TransmitReceive>
    return RxData;
 8000744:	7bfb      	ldrb	r3, [r7, #15]
 8000746:	b29b      	uxth	r3, r3
}
 8000748:	4618      	mov	r0, r3
 800074a:	3710      	adds	r7, #16
 800074c:	46bd      	mov	sp, r7
 800074e:	bd80      	pop	{r7, pc}
 8000750:	2000003c 	.word	0x2000003c

08000754 <VS1003_WriteReg>:

void VS1003_WriteReg(uint8_t reg, uint16_t value)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	4603      	mov	r3, r0
 800075c:	460a      	mov	r2, r1
 800075e:	71fb      	strb	r3, [r7, #7]
 8000760:	4613      	mov	r3, r2
 8000762:	80bb      	strh	r3, [r7, #4]
    while(MP3_DREQ == 0);
 8000764:	bf00      	nop
 8000766:	2180      	movs	r1, #128	; 0x80
 8000768:	4819      	ldr	r0, [pc, #100]	; (80007d0 <VS1003_WriteReg+0x7c>)
 800076a:	f002 fcd5 	bl	8003118 <HAL_GPIO_ReadPin>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d0f8      	beq.n	8000766 <VS1003_WriteReg+0x12>

    VS1003_SPI_SetSpeed(SPI_SPEED_LOW);
 8000774:	2000      	movs	r0, #0
 8000776:	f7ff ff91 	bl	800069c <VS1003_SPI_SetSpeed>
    MP3_DCS(1);
 800077a:	2201      	movs	r2, #1
 800077c:	2110      	movs	r1, #16
 800077e:	4815      	ldr	r0, [pc, #84]	; (80007d4 <VS1003_WriteReg+0x80>)
 8000780:	f002 fce2 	bl	8003148 <HAL_GPIO_WritePin>
    MP3_CCS(0);
 8000784:	2200      	movs	r2, #0
 8000786:	f44f 7100 	mov.w	r1, #512	; 0x200
 800078a:	4813      	ldr	r0, [pc, #76]	; (80007d8 <VS1003_WriteReg+0x84>)
 800078c:	f002 fcdc 	bl	8003148 <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(VS1003_WRITE_COMMAND);
 8000790:	2002      	movs	r0, #2
 8000792:	f7ff ffc9 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(reg);
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	b29b      	uxth	r3, r3
 800079a:	4618      	mov	r0, r3
 800079c:	f7ff ffc4 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(value >> 8);
 80007a0:	88bb      	ldrh	r3, [r7, #4]
 80007a2:	0a1b      	lsrs	r3, r3, #8
 80007a4:	b29b      	uxth	r3, r3
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffbe 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(value);
 80007ac:	88bb      	ldrh	r3, [r7, #4]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ffba 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    MP3_CCS(1);
 80007b4:	2201      	movs	r2, #1
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	4807      	ldr	r0, [pc, #28]	; (80007d8 <VS1003_WriteReg+0x84>)
 80007bc:	f002 fcc4 	bl	8003148 <HAL_GPIO_WritePin>
    VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 80007c0:	2001      	movs	r0, #1
 80007c2:	f7ff ff6b 	bl	800069c <VS1003_SPI_SetSpeed>
}
 80007c6:	bf00      	nop
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40020800 	.word	0x40020800
 80007d4:	40020000 	.word	0x40020000
 80007d8:	40020400 	.word	0x40020400

080007dc <VS1003_ReadReg>:


uint16_t VS1003_ReadReg(uint8_t reg)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b084      	sub	sp, #16
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	4603      	mov	r3, r0
 80007e4:	71fb      	strb	r3, [r7, #7]
    uint16_t value;

    while(MP3_DREQ == 0);
 80007e6:	bf00      	nop
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	481d      	ldr	r0, [pc, #116]	; (8000860 <VS1003_ReadReg+0x84>)
 80007ec:	f002 fc94 	bl	8003118 <HAL_GPIO_ReadPin>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f8      	beq.n	80007e8 <VS1003_ReadReg+0xc>

    VS1003_SPI_SetSpeed(SPI_SPEED_LOW);
 80007f6:	2000      	movs	r0, #0
 80007f8:	f7ff ff50 	bl	800069c <VS1003_SPI_SetSpeed>
    MP3_DCS(1);
 80007fc:	2201      	movs	r2, #1
 80007fe:	2110      	movs	r1, #16
 8000800:	4818      	ldr	r0, [pc, #96]	; (8000864 <VS1003_ReadReg+0x88>)
 8000802:	f002 fca1 	bl	8003148 <HAL_GPIO_WritePin>
    MP3_CCS(0);
 8000806:	2200      	movs	r2, #0
 8000808:	f44f 7100 	mov.w	r1, #512	; 0x200
 800080c:	4816      	ldr	r0, [pc, #88]	; (8000868 <VS1003_ReadReg+0x8c>)
 800080e:	f002 fc9b 	bl	8003148 <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(VS1003_READ_COMMAND);
 8000812:	2003      	movs	r0, #3
 8000814:	f7ff ff88 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(reg);
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	b29b      	uxth	r3, r3
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ff83 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    value = VS1003_SPI_ReadWriteByte(0xff);
 8000822:	20ff      	movs	r0, #255	; 0xff
 8000824:	f7ff ff80 	bl	8000728 <VS1003_SPI_ReadWriteByte>
 8000828:	4603      	mov	r3, r0
 800082a:	81fb      	strh	r3, [r7, #14]
    value = value << 8;
 800082c:	89fb      	ldrh	r3, [r7, #14]
 800082e:	021b      	lsls	r3, r3, #8
 8000830:	81fb      	strh	r3, [r7, #14]
    value |= VS1003_SPI_ReadWriteByte(0xff);
 8000832:	20ff      	movs	r0, #255	; 0xff
 8000834:	f7ff ff78 	bl	8000728 <VS1003_SPI_ReadWriteByte>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	89fb      	ldrh	r3, [r7, #14]
 800083e:	4313      	orrs	r3, r2
 8000840:	81fb      	strh	r3, [r7, #14]
    MP3_CCS(1);
 8000842:	2201      	movs	r2, #1
 8000844:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000848:	4807      	ldr	r0, [pc, #28]	; (8000868 <VS1003_ReadReg+0x8c>)
 800084a:	f002 fc7d 	bl	8003148 <HAL_GPIO_WritePin>
    VS1003_SPI_SetSpeed(SPI_SPEED_HIGH);
 800084e:	2001      	movs	r0, #1
 8000850:	f7ff ff24 	bl	800069c <VS1003_SPI_SetSpeed>
    return value;
 8000854:	89fb      	ldrh	r3, [r7, #14]
}
 8000856:	4618      	mov	r0, r3
 8000858:	3710      	adds	r7, #16
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40020800 	.word	0x40020800
 8000864:	40020000 	.word	0x40020000
 8000868:	40020400 	.word	0x40020400

0800086c <VS1003_ResetDecodeTime>:

void VS1003_ResetDecodeTime(void)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	af00      	add	r7, sp, #0
    VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8000870:	2100      	movs	r1, #0
 8000872:	2004      	movs	r0, #4
 8000874:	f7ff ff6e 	bl	8000754 <VS1003_WriteReg>
    VS1003_WriteReg(SPI_DECODE_TIME, 0x0000);
 8000878:	2100      	movs	r1, #0
 800087a:	2004      	movs	r0, #4
 800087c:	f7ff ff6a 	bl	8000754 <VS1003_WriteReg>
}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}

08000884 <VS1003_SoftReset>:
}


// 구동시키기 위해 제일 먼저 초기화
void VS1003_SoftReset(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
    uint8_t retry;

    while(MP3_DREQ == 0);
 800088a:	bf00      	nop
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	483e      	ldr	r0, [pc, #248]	; (8000988 <VS1003_SoftReset+0x104>)
 8000890:	f002 fc42 	bl	8003118 <HAL_GPIO_ReadPin>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f8      	beq.n	800088c <VS1003_SoftReset+0x8>
    VS1003_SPI_ReadWriteByte(0xff);
 800089a:	20ff      	movs	r0, #255	; 0xff
 800089c:	f7ff ff44 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    retry = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 80008a4:	e00c      	b.n	80008c0 <VS1003_SoftReset+0x3c>
    {
        VS1003_WriteReg(SPI_MODE, 0x0804);
 80008a6:	f640 0104 	movw	r1, #2052	; 0x804
 80008aa:	2000      	movs	r0, #0
 80008ac:	f7ff ff52 	bl	8000754 <VS1003_WriteReg>
        HAL_Delay(2);
 80008b0:	2002      	movs	r0, #2
 80008b2:	f001 faf1 	bl	8001e98 <HAL_Delay>
        if(retry++ > 100)
 80008b6:	79fb      	ldrb	r3, [r7, #7]
 80008b8:	1c5a      	adds	r2, r3, #1
 80008ba:	71fa      	strb	r2, [r7, #7]
 80008bc:	2b64      	cmp	r3, #100	; 0x64
 80008be:	d809      	bhi.n	80008d4 <VS1003_SoftReset+0x50>
    while(VS1003_ReadReg(SPI_MODE) != 0x0804)
 80008c0:	2000      	movs	r0, #0
 80008c2:	f7ff ff8b 	bl	80007dc <VS1003_ReadReg>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	f640 0304 	movw	r3, #2052	; 0x804
 80008ce:	429a      	cmp	r2, r3
 80008d0:	d1e9      	bne.n	80008a6 <VS1003_SoftReset+0x22>
 80008d2:	e000      	b.n	80008d6 <VS1003_SoftReset+0x52>
        {
            break;
 80008d4:	bf00      	nop
        }
    }

    while(MP3_DREQ == 0);
 80008d6:	bf00      	nop
 80008d8:	2180      	movs	r1, #128	; 0x80
 80008da:	482b      	ldr	r0, [pc, #172]	; (8000988 <VS1003_SoftReset+0x104>)
 80008dc:	f002 fc1c 	bl	8003118 <HAL_GPIO_ReadPin>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d0f8      	beq.n	80008d8 <VS1003_SoftReset+0x54>
    retry = 0;
 80008e6:	2300      	movs	r3, #0
 80008e8:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 80008ea:	e009      	b.n	8000900 <VS1003_SoftReset+0x7c>
    {
        VS1003_WriteReg(SPI_CLOCKF, 0x9800);
 80008ec:	f44f 4118 	mov.w	r1, #38912	; 0x9800
 80008f0:	2003      	movs	r0, #3
 80008f2:	f7ff ff2f 	bl	8000754 <VS1003_WriteReg>
        if( retry++ > 100)
 80008f6:	79fb      	ldrb	r3, [r7, #7]
 80008f8:	1c5a      	adds	r2, r3, #1
 80008fa:	71fa      	strb	r2, [r7, #7]
 80008fc:	2b64      	cmp	r3, #100	; 0x64
 80008fe:	d807      	bhi.n	8000910 <VS1003_SoftReset+0x8c>
    while(VS1003_ReadReg(SPI_CLOCKF) != 0x9800)
 8000900:	2003      	movs	r0, #3
 8000902:	f7ff ff6b 	bl	80007dc <VS1003_ReadReg>
 8000906:	4603      	mov	r3, r0
 8000908:	f5b3 4f18 	cmp.w	r3, #38912	; 0x9800
 800090c:	d1ee      	bne.n	80008ec <VS1003_SoftReset+0x68>
 800090e:	e000      	b.n	8000912 <VS1003_SoftReset+0x8e>
        {
            break;
 8000910:	bf00      	nop
        }
    }

    retry = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	71fb      	strb	r3, [r7, #7]
    while(VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 8000916:	e009      	b.n	800092c <VS1003_SoftReset+0xa8>
    {
        VS1003_WriteReg(SPI_AUDATA, 0xBB81);
 8000918:	f64b 3181 	movw	r1, #48001	; 0xbb81
 800091c:	2005      	movs	r0, #5
 800091e:	f7ff ff19 	bl	8000754 <VS1003_WriteReg>
        if(retry++ > 100)
 8000922:	79fb      	ldrb	r3, [r7, #7]
 8000924:	1c5a      	adds	r2, r3, #1
 8000926:	71fa      	strb	r2, [r7, #7]
 8000928:	2b64      	cmp	r3, #100	; 0x64
 800092a:	d809      	bhi.n	8000940 <VS1003_SoftReset+0xbc>
    while(VS1003_ReadReg(SPI_AUDATA) != 0xBB81)
 800092c:	2005      	movs	r0, #5
 800092e:	f7ff ff55 	bl	80007dc <VS1003_ReadReg>
 8000932:	4603      	mov	r3, r0
 8000934:	461a      	mov	r2, r3
 8000936:	f64b 3381 	movw	r3, #48001	; 0xbb81
 800093a:	429a      	cmp	r2, r3
 800093c:	d1ec      	bne.n	8000918 <VS1003_SoftReset+0x94>
 800093e:	e000      	b.n	8000942 <VS1003_SoftReset+0xbe>
        {
            break;
 8000940:	bf00      	nop
        }
    }

    VS1003_WriteReg(SPI_VOL, 0x0000);
 8000942:	2100      	movs	r1, #0
 8000944:	200b      	movs	r0, #11
 8000946:	f7ff ff05 	bl	8000754 <VS1003_WriteReg>
    VS1003_ResetDecodeTime();
 800094a:	f7ff ff8f 	bl	800086c <VS1003_ResetDecodeTime>

    MP3_DCS(0);
 800094e:	2200      	movs	r2, #0
 8000950:	2110      	movs	r1, #16
 8000952:	480e      	ldr	r0, [pc, #56]	; (800098c <VS1003_SoftReset+0x108>)
 8000954:	f002 fbf8 	bl	8003148 <HAL_GPIO_WritePin>
    VS1003_SPI_ReadWriteByte(0xFF);
 8000958:	20ff      	movs	r0, #255	; 0xff
 800095a:	f7ff fee5 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 800095e:	20ff      	movs	r0, #255	; 0xff
 8000960:	f7ff fee2 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 8000964:	20ff      	movs	r0, #255	; 0xff
 8000966:	f7ff fedf 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    VS1003_SPI_ReadWriteByte(0xFF);
 800096a:	20ff      	movs	r0, #255	; 0xff
 800096c:	f7ff fedc 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    MP3_DCS(1);
 8000970:	2201      	movs	r2, #1
 8000972:	2110      	movs	r1, #16
 8000974:	4805      	ldr	r0, [pc, #20]	; (800098c <VS1003_SoftReset+0x108>)
 8000976:	f002 fbe7 	bl	8003148 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800097a:	2014      	movs	r0, #20
 800097c:	f001 fa8c 	bl	8001e98 <HAL_Delay>
}
 8000980:	bf00      	nop
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40020800 	.word	0x40020800
 800098c:	40020000 	.word	0x40020000

08000990 <VS1003_WriteData>:
    VS1003_WriteReg(SPI_VOL, vol);
}


void VS1003_WriteData(uint8_t* buf)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b084      	sub	sp, #16
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    uint8_t count = 32;
 8000998:	2320      	movs	r3, #32
 800099a:	73fb      	strb	r3, [r7, #15]

    MP3_DCS(0);
 800099c:	2200      	movs	r2, #0
 800099e:	2110      	movs	r1, #16
 80009a0:	480f      	ldr	r0, [pc, #60]	; (80009e0 <VS1003_WriteData+0x50>)
 80009a2:	f002 fbd1 	bl	8003148 <HAL_GPIO_WritePin>
    while(count--)
 80009a6:	e007      	b.n	80009b8 <VS1003_WriteData+0x28>
    {
        VS1003_SPI_ReadWriteByte(*buf++);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff feb8 	bl	8000728 <VS1003_SPI_ReadWriteByte>
    while(count--)
 80009b8:	7bfb      	ldrb	r3, [r7, #15]
 80009ba:	1e5a      	subs	r2, r3, #1
 80009bc:	73fa      	strb	r2, [r7, #15]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d1f2      	bne.n	80009a8 <VS1003_WriteData+0x18>
    }
    MP3_DCS(1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2110      	movs	r1, #16
 80009c6:	4806      	ldr	r0, [pc, #24]	; (80009e0 <VS1003_WriteData+0x50>)
 80009c8:	f002 fbbe 	bl	8003148 <HAL_GPIO_WritePin>
    MP3_CCS(1);
 80009cc:	2201      	movs	r2, #1
 80009ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009d2:	4804      	ldr	r0, [pc, #16]	; (80009e4 <VS1003_WriteData+0x54>)
 80009d4:	f002 fbb8 	bl	8003148 <HAL_GPIO_WritePin>
}
 80009d8:	bf00      	nop
 80009da:	3710      	adds	r7, #16
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	40020000 	.word	0x40020000
 80009e4:	40020400 	.word	0x40020400

080009e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80009ee:	463b      	mov	r3, r7
 80009f0:	2200      	movs	r2, #0
 80009f2:	601a      	str	r2, [r3, #0]
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	609a      	str	r2, [r3, #8]
 80009f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80009fa:	4b36      	ldr	r3, [pc, #216]	; (8000ad4 <MX_ADC1_Init+0xec>)
 80009fc:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <MX_ADC1_Init+0xf0>)
 80009fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a00:	4b34      	ldr	r3, [pc, #208]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a06:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a08:	4b32      	ldr	r3, [pc, #200]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a0e:	4b31      	ldr	r3, [pc, #196]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a14:	4b2f      	ldr	r3, [pc, #188]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a1a:	4b2e      	ldr	r3, [pc, #184]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a22:	4b2c      	ldr	r3, [pc, #176]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a2a:	4a2c      	ldr	r2, [pc, #176]	; (8000adc <MX_ADC1_Init+0xf4>)
 8000a2c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a2e:	4b29      	ldr	r3, [pc, #164]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000a34:	4b27      	ldr	r3, [pc, #156]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a36:	2204      	movs	r2, #4
 8000a38:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000a3a:	4b26      	ldr	r3, [pc, #152]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a42:	4b24      	ldr	r3, [pc, #144]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a48:	4822      	ldr	r0, [pc, #136]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a4a:	f001 fa49 	bl	8001ee0 <HAL_ADC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000a54:	f000 fbf2 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000a58:	230a      	movs	r3, #10
 8000a5a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000a60:	2304      	movs	r3, #4
 8000a62:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	4619      	mov	r1, r3
 8000a68:	481a      	ldr	r0, [pc, #104]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a6a:	f001 fa7d 	bl	8001f68 <HAL_ADC_ConfigChannel>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a74:	f000 fbe2 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000a78:	230c      	movs	r3, #12
 8000a7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a80:	463b      	mov	r3, r7
 8000a82:	4619      	mov	r1, r3
 8000a84:	4813      	ldr	r0, [pc, #76]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000a86:	f001 fa6f 	bl	8001f68 <HAL_ADC_ConfigChannel>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a90:	f000 fbd4 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000a94:	230d      	movs	r3, #13
 8000a96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9c:	463b      	mov	r3, r7
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480c      	ldr	r0, [pc, #48]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000aa2:	f001 fa61 	bl	8001f68 <HAL_ADC_ConfigChannel>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000aac:	f000 fbc6 	bl	800123c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000ab0:	2309      	movs	r3, #9
 8000ab2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000ab4:	2304      	movs	r3, #4
 8000ab6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ab8:	463b      	mov	r3, r7
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_ADC1_Init+0xec>)
 8000abe:	f001 fa53 	bl	8001f68 <HAL_ADC_ConfigChannel>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000ac8:	f000 fbb8 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3710      	adds	r7, #16
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	20000094 	.word	0x20000094
 8000ad8:	40012000 	.word	0x40012000
 8000adc:	0f000001 	.word	0x0f000001

08000ae0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08a      	sub	sp, #40	; 0x28
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae8:	f107 0314 	add.w	r3, r7, #20
 8000aec:	2200      	movs	r2, #0
 8000aee:	601a      	str	r2, [r3, #0]
 8000af0:	605a      	str	r2, [r3, #4]
 8000af2:	609a      	str	r2, [r3, #8]
 8000af4:	60da      	str	r2, [r3, #12]
 8000af6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a3c      	ldr	r2, [pc, #240]	; (8000bf0 <HAL_ADC_MspInit+0x110>)
 8000afe:	4293      	cmp	r3, r2
 8000b00:	d171      	bne.n	8000be6 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b02:	2300      	movs	r3, #0
 8000b04:	613b      	str	r3, [r7, #16]
 8000b06:	4b3b      	ldr	r3, [pc, #236]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0a:	4a3a      	ldr	r2, [pc, #232]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b10:	6453      	str	r3, [r2, #68]	; 0x44
 8000b12:	4b38      	ldr	r3, [pc, #224]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b1a:	613b      	str	r3, [r7, #16]
 8000b1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b1e:	2300      	movs	r3, #0
 8000b20:	60fb      	str	r3, [r7, #12]
 8000b22:	4b34      	ldr	r3, [pc, #208]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a33      	ldr	r2, [pc, #204]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b28:	f043 0304 	orr.w	r3, r3, #4
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b31      	ldr	r3, [pc, #196]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0304 	and.w	r3, r3, #4
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	4b2d      	ldr	r3, [pc, #180]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b42:	4a2c      	ldr	r2, [pc, #176]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b44:	f043 0302 	orr.w	r3, r3, #2
 8000b48:	6313      	str	r3, [r2, #48]	; 0x30
 8000b4a:	4b2a      	ldr	r3, [pc, #168]	; (8000bf4 <HAL_ADC_MspInit+0x114>)
 8000b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4e:	f003 0302 	and.w	r3, r3, #2
 8000b52:	60bb      	str	r3, [r7, #8]
 8000b54:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000b56:	230d      	movs	r3, #13
 8000b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	4823      	ldr	r0, [pc, #140]	; (8000bf8 <HAL_ADC_MspInit+0x118>)
 8000b6a:	f002 f929 	bl	8002dc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000b6e:	2302      	movs	r3, #2
 8000b70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b72:	2303      	movs	r3, #3
 8000b74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	481e      	ldr	r0, [pc, #120]	; (8000bfc <HAL_ADC_MspInit+0x11c>)
 8000b82:	f002 f91d 	bl	8002dc0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b86:	4b1e      	ldr	r3, [pc, #120]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000b88:	4a1e      	ldr	r2, [pc, #120]	; (8000c04 <HAL_ADC_MspInit+0x124>)
 8000b8a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b92:	4b1b      	ldr	r3, [pc, #108]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000ba0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ba4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000ba8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000bac:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000bae:	4b14      	ldr	r3, [pc, #80]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bb0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000bb4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000bb6:	4b12      	ldr	r3, [pc, #72]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bb8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000bbc:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000bbe:	4b10      	ldr	r3, [pc, #64]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bc4:	4b0e      	ldr	r3, [pc, #56]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bcc:	f001 fd7c 	bl	80026c8 <HAL_DMA_Init>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000bd6:	f000 fb31 	bl	800123c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000bde:	639a      	str	r2, [r3, #56]	; 0x38
 8000be0:	4a07      	ldr	r2, [pc, #28]	; (8000c00 <HAL_ADC_MspInit+0x120>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000be6:	bf00      	nop
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40012000 	.word	0x40012000
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020800 	.word	0x40020800
 8000bfc:	40020400 	.word	0x40020400
 8000c00:	200000dc 	.word	0x200000dc
 8000c04:	40026410 	.word	0x40026410

08000c08 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000c0e:	463b      	mov	r3, r7
 8000c10:	2200      	movs	r2, #0
 8000c12:	601a      	str	r2, [r3, #0]
 8000c14:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000c16:	4b0f      	ldr	r3, [pc, #60]	; (8000c54 <MX_DAC_Init+0x4c>)
 8000c18:	4a0f      	ldr	r2, [pc, #60]	; (8000c58 <MX_DAC_Init+0x50>)
 8000c1a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000c1c:	480d      	ldr	r0, [pc, #52]	; (8000c54 <MX_DAC_Init+0x4c>)
 8000c1e:	f001 fce2 	bl	80025e6 <HAL_DAC_Init>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000c28:	f000 fb08 	bl	800123c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000c30:	2300      	movs	r3, #0
 8000c32:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000c34:	463b      	mov	r3, r7
 8000c36:	2200      	movs	r2, #0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4806      	ldr	r0, [pc, #24]	; (8000c54 <MX_DAC_Init+0x4c>)
 8000c3c:	f001 fcf5 	bl	800262a <HAL_DAC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000c46:	f000 faf9 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	2000013c 	.word	0x2000013c
 8000c58:	40007400 	.word	0x40007400

08000c5c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b08a      	sub	sp, #40	; 0x28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c64:	f107 0314 	add.w	r3, r7, #20
 8000c68:	2200      	movs	r2, #0
 8000c6a:	601a      	str	r2, [r3, #0]
 8000c6c:	605a      	str	r2, [r3, #4]
 8000c6e:	609a      	str	r2, [r3, #8]
 8000c70:	60da      	str	r2, [r3, #12]
 8000c72:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <HAL_DAC_MspInit+0x7c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d127      	bne.n	8000cce <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000c88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c8e:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c96:	613b      	str	r3, [r7, #16]
 8000c98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60fb      	str	r3, [r7, #12]
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a0e      	ldr	r2, [pc, #56]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000ca4:	f043 0301 	orr.w	r3, r3, #1
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <HAL_DAC_MspInit+0x80>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0301 	and.w	r3, r3, #1
 8000cb2:	60fb      	str	r3, [r7, #12]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cb6:	2310      	movs	r3, #16
 8000cb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cba:	2303      	movs	r3, #3
 8000cbc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc2:	f107 0314 	add.w	r3, r7, #20
 8000cc6:	4619      	mov	r1, r3
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <HAL_DAC_MspInit+0x84>)
 8000cca:	f002 f879 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000cce:	bf00      	nop
 8000cd0:	3728      	adds	r7, #40	; 0x28
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40007400 	.word	0x40007400
 8000cdc:	40023800 	.word	0x40023800
 8000ce0:	40020000 	.word	0x40020000

08000ce4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a0b      	ldr	r2, [pc, #44]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cf4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <MX_DMA_Init+0x3c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2100      	movs	r1, #0
 8000d0a:	2038      	movs	r0, #56	; 0x38
 8000d0c:	f001 fc35 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000d10:	2038      	movs	r0, #56	; 0x38
 8000d12:	f001 fc4e 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 8000d16:	bf00      	nop
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40023800 	.word	0x40023800

08000d24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b08c      	sub	sp, #48	; 0x30
 8000d28:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2a:	f107 031c 	add.w	r3, r7, #28
 8000d2e:	2200      	movs	r2, #0
 8000d30:	601a      	str	r2, [r3, #0]
 8000d32:	605a      	str	r2, [r3, #4]
 8000d34:	609a      	str	r2, [r3, #8]
 8000d36:	60da      	str	r2, [r3, #12]
 8000d38:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	61bb      	str	r3, [r7, #24]
 8000d3e:	4b61      	ldr	r3, [pc, #388]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d42:	4a60      	ldr	r2, [pc, #384]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d44:	f043 0310 	orr.w	r3, r3, #16
 8000d48:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4a:	4b5e      	ldr	r3, [pc, #376]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4e:	f003 0310 	and.w	r3, r3, #16
 8000d52:	61bb      	str	r3, [r7, #24]
 8000d54:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
 8000d5a:	4b5a      	ldr	r3, [pc, #360]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	4a59      	ldr	r2, [pc, #356]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d60:	f043 0320 	orr.w	r3, r3, #32
 8000d64:	6313      	str	r3, [r2, #48]	; 0x30
 8000d66:	4b57      	ldr	r3, [pc, #348]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	f003 0320 	and.w	r3, r3, #32
 8000d6e:	617b      	str	r3, [r7, #20]
 8000d70:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
 8000d76:	4b53      	ldr	r3, [pc, #332]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	4a52      	ldr	r2, [pc, #328]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d80:	6313      	str	r3, [r2, #48]	; 0x30
 8000d82:	4b50      	ldr	r3, [pc, #320]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	60fb      	str	r3, [r7, #12]
 8000d92:	4b4c      	ldr	r3, [pc, #304]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a4b      	ldr	r2, [pc, #300]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000d98:	f043 0304 	orr.w	r3, r3, #4
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b49      	ldr	r3, [pc, #292]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0304 	and.w	r3, r3, #4
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	4b45      	ldr	r3, [pc, #276]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	4a44      	ldr	r2, [pc, #272]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dba:	4b42      	ldr	r3, [pc, #264]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbe:	f003 0301 	and.w	r3, r3, #1
 8000dc2:	60bb      	str	r3, [r7, #8]
 8000dc4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	4b3e      	ldr	r3, [pc, #248]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	4a3d      	ldr	r2, [pc, #244]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000dd0:	f043 0302 	orr.w	r3, r3, #2
 8000dd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000dd6:	4b3b      	ldr	r3, [pc, #236]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dda:	f003 0302 	and.w	r3, r3, #2
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000de2:	2300      	movs	r3, #0
 8000de4:	603b      	str	r3, [r7, #0]
 8000de6:	4b37      	ldr	r3, [pc, #220]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	4a36      	ldr	r2, [pc, #216]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000dec:	f043 0308 	orr.w	r3, r3, #8
 8000df0:	6313      	str	r3, [r2, #48]	; 0x30
 8000df2:	4b34      	ldr	r3, [pc, #208]	; (8000ec4 <MX_GPIO_Init+0x1a0>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	f003 0308 	and.w	r3, r3, #8
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	21c0      	movs	r1, #192	; 0xc0
 8000e02:	4831      	ldr	r0, [pc, #196]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000e04:	f002 f9a0 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f640 0181 	movw	r1, #2177	; 0x881
 8000e0e:	482f      	ldr	r0, [pc, #188]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000e10:	f002 f99a 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e14:	2308      	movs	r3, #8
 8000e16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e18:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e22:	f107 031c 	add.w	r3, r7, #28
 8000e26:	4619      	mov	r1, r3
 8000e28:	4829      	ldr	r0, [pc, #164]	; (8000ed0 <MX_GPIO_Init+0x1ac>)
 8000e2a:	f001 ffc9 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e2e:	23c0      	movs	r3, #192	; 0xc0
 8000e30:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e32:	2301      	movs	r3, #1
 8000e34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 031c 	add.w	r3, r7, #28
 8000e42:	4619      	mov	r1, r3
 8000e44:	4820      	ldr	r0, [pc, #128]	; (8000ec8 <MX_GPIO_Init+0x1a4>)
 8000e46:	f001 ffbb 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB11 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_11|GPIO_PIN_7;
 8000e4a:	f640 0381 	movw	r3, #2177	; 0x881
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	481a      	ldr	r0, [pc, #104]	; (8000ecc <MX_GPIO_Init+0x1a8>)
 8000e64:	f001 ffac 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e6c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e6e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000e74:	2302      	movs	r3, #2
 8000e76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4815      	ldr	r0, [pc, #84]	; (8000ed4 <MX_GPIO_Init+0x1b0>)
 8000e80:	f001 ff9e 	bl	8002dc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000e84:	2380      	movs	r3, #128	; 0x80
 8000e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e90:	f107 031c 	add.w	r3, r7, #28
 8000e94:	4619      	mov	r1, r3
 8000e96:	4810      	ldr	r0, [pc, #64]	; (8000ed8 <MX_GPIO_Init+0x1b4>)
 8000e98:	f001 ff92 	bl	8002dc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	2100      	movs	r1, #0
 8000ea0:	2009      	movs	r0, #9
 8000ea2:	f001 fb6a 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000ea6:	2009      	movs	r0, #9
 8000ea8:	f001 fb83 	bl	80025b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000eac:	2200      	movs	r2, #0
 8000eae:	2100      	movs	r1, #0
 8000eb0:	2028      	movs	r0, #40	; 0x28
 8000eb2:	f001 fb62 	bl	800257a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eb6:	2028      	movs	r0, #40	; 0x28
 8000eb8:	f001 fb7b 	bl	80025b2 <HAL_NVIC_EnableIRQ>

}
 8000ebc:	bf00      	nop
 8000ebe:	3730      	adds	r7, #48	; 0x30
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	40020400 	.word	0x40020400
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40020c00 	.word	0x40020c00
 8000ed8:	40020800 	.word	0x40020800

08000edc <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee2:	4a1c      	ldr	r2, [pc, #112]	; (8000f54 <MX_I2C1_Init+0x78>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_I2C1_Init+0x7c>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b10      	ldr	r3, [pc, #64]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	480d      	ldr	r0, [pc, #52]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f1a:	f002 f953 	bl	80031c4 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 f98a 	bl	800123c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f28:	2100      	movs	r1, #0
 8000f2a:	4809      	ldr	r0, [pc, #36]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f2c:	f002 fa8e 	bl	800344c <HAL_I2CEx_ConfigAnalogFilter>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d001      	beq.n	8000f3a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000f36:	f000 f981 	bl	800123c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f3a:	2100      	movs	r1, #0
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <MX_I2C1_Init+0x74>)
 8000f3e:	f002 fac1 	bl	80034c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f978 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000150 	.word	0x20000150
 8000f54:	40005400 	.word	0x40005400
 8000f58:	00061a80 	.word	0x00061a80

08000f5c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f60:	4b1b      	ldr	r3, [pc, #108]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f62:	4a1c      	ldr	r2, [pc, #112]	; (8000fd4 <MX_I2C2_Init+0x78>)
 8000f64:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000f66:	4b1a      	ldr	r3, [pc, #104]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f68:	4a1b      	ldr	r2, [pc, #108]	; (8000fd8 <MX_I2C2_Init+0x7c>)
 8000f6a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f6c:	4b18      	ldr	r3, [pc, #96]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000f72:	4b17      	ldr	r3, [pc, #92]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f78:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f7a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f7e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f80:	4b13      	ldr	r3, [pc, #76]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000f86:	4b12      	ldr	r3, [pc, #72]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f8c:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f92:	4b0f      	ldr	r3, [pc, #60]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000f98:	480d      	ldr	r0, [pc, #52]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000f9a:	f002 f913 	bl	80031c4 <HAL_I2C_Init>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000fa4:	f000 f94a 	bl	800123c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4809      	ldr	r0, [pc, #36]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000fac:	f002 fa4e 	bl	800344c <HAL_I2CEx_ConfigAnalogFilter>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000fb6:	f000 f941 	bl	800123c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fba:	2100      	movs	r1, #0
 8000fbc:	4804      	ldr	r0, [pc, #16]	; (8000fd0 <MX_I2C2_Init+0x74>)
 8000fbe:	f002 fa81 	bl	80034c4 <HAL_I2CEx_ConfigDigitalFilter>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000fc8:	f000 f938 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	200001a4 	.word	0x200001a4
 8000fd4:	40005800 	.word	0x40005800
 8000fd8:	000186a0 	.word	0x000186a0

08000fdc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08c      	sub	sp, #48	; 0x30
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a32      	ldr	r2, [pc, #200]	; (80010c4 <HAL_I2C_MspInit+0xe8>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d12d      	bne.n	800105a <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	61bb      	str	r3, [r7, #24]
 8001002:	4b31      	ldr	r3, [pc, #196]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	4a30      	ldr	r2, [pc, #192]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	; 0x30
 800100e:	4b2e      	ldr	r3, [pc, #184]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	61bb      	str	r3, [r7, #24]
 8001018:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800101a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800101e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001020:	2312      	movs	r3, #18
 8001022:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001028:	2303      	movs	r3, #3
 800102a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800102c:	2304      	movs	r3, #4
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4825      	ldr	r0, [pc, #148]	; (80010cc <HAL_I2C_MspInit+0xf0>)
 8001038:	f001 fec2 	bl	8002dc0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800103c:	2300      	movs	r3, #0
 800103e:	617b      	str	r3, [r7, #20]
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001046:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800104a:	6413      	str	r3, [r2, #64]	; 0x40
 800104c:	4b1e      	ldr	r3, [pc, #120]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 800104e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001054:	617b      	str	r3, [r7, #20]
 8001056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8001058:	e030      	b.n	80010bc <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a1c      	ldr	r2, [pc, #112]	; (80010d0 <HAL_I2C_MspInit+0xf4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d12b      	bne.n	80010bc <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	613b      	str	r3, [r7, #16]
 8001068:	4b17      	ldr	r3, [pc, #92]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	4a16      	ldr	r2, [pc, #88]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 800106e:	f043 0320 	orr.w	r3, r3, #32
 8001072:	6313      	str	r3, [r2, #48]	; 0x30
 8001074:	4b14      	ldr	r3, [pc, #80]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 8001076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001078:	f003 0320 	and.w	r3, r3, #32
 800107c:	613b      	str	r3, [r7, #16]
 800107e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001080:	2303      	movs	r3, #3
 8001082:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001084:	2312      	movs	r3, #18
 8001086:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001090:	2304      	movs	r3, #4
 8001092:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	4619      	mov	r1, r3
 800109a:	480e      	ldr	r0, [pc, #56]	; (80010d4 <HAL_I2C_MspInit+0xf8>)
 800109c:	f001 fe90 	bl	8002dc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 80010a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a8:	4a07      	ldr	r2, [pc, #28]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 80010aa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ae:	6413      	str	r3, [r2, #64]	; 0x40
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <HAL_I2C_MspInit+0xec>)
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	3730      	adds	r7, #48	; 0x30
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40005400 	.word	0x40005400
 80010c8:	40023800 	.word	0x40023800
 80010cc:	40020400 	.word	0x40020400
 80010d0:	40005800 	.word	0x40005800
 80010d4:	40021400 	.word	0x40021400

080010d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010de:	f000 fe69 	bl	8001db4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010e2:	f000 f83b 	bl	800115c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010e6:	f7ff fe1d 	bl	8000d24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80010ea:	f000 fdbf 	bl	8001c6c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80010ee:	f7ff fef5 	bl	8000edc <MX_I2C1_Init>
  MX_TIM7_Init();
 80010f2:	f000 fbc5 	bl	8001880 <MX_TIM7_Init>
  MX_TIM3_Init();
 80010f6:	f000 fa37 	bl	8001568 <MX_TIM3_Init>
  MX_TIM4_Init();
 80010fa:	f000 faab 	bl	8001654 <MX_TIM4_Init>
  MX_TIM10_Init();
 80010fe:	f000 fbf5 	bl	80018ec <MX_TIM10_Init>
  MX_TIM2_Init();
 8001102:	f000 f9bb 	bl	800147c <MX_TIM2_Init>
  MX_DMA_Init();
 8001106:	f7ff fded 	bl	8000ce4 <MX_DMA_Init>
  MX_ADC1_Init();
 800110a:	f7ff fc6d 	bl	80009e8 <MX_ADC1_Init>
  MX_TIM5_Init();
 800110e:	f000 fb35 	bl	800177c <MX_TIM5_Init>
  MX_DAC_Init();
 8001112:	f7ff fd79 	bl	8000c08 <MX_DAC_Init>
  MX_I2C2_Init();
 8001116:	f7ff ff21 	bl	8000f5c <MX_I2C2_Init>
  MX_SPI2_Init();
 800111a:	f000 f895 	bl	8001248 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  VS1003_Init();
 800111e:	f7ff fa2f 	bl	8000580 <VS1003_Init>
  VS1003_SoftReset();
 8001122:	f7ff fbaf 	bl	8000884 <VS1003_SoftReset>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int i = 0;
 8001126:	2300      	movs	r3, #0
 8001128:	607b      	str	r3, [r7, #4]
  while (1)
  {
	  if(MP3_DREQ == 1)
 800112a:	2180      	movs	r1, #128	; 0x80
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <main+0x7c>)
 800112e:	f001 fff3 	bl	8003118 <HAL_GPIO_ReadPin>
 8001132:	4603      	mov	r3, r0
 8001134:	2b01      	cmp	r3, #1
 8001136:	d1f8      	bne.n	800112a <main+0x52>
	  {
		  if(sizeof(MP3_DATA) > i)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	2b10      	cmp	r3, #16
 800113c:	d8f5      	bhi.n	800112a <main+0x52>
		  {
			  VS1003_WriteData(&MP3_DATA[i]);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a05      	ldr	r2, [pc, #20]	; (8001158 <main+0x80>)
 8001142:	4413      	add	r3, r2
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fc23 	bl	8000990 <VS1003_WriteData>
			  i += 32;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	3320      	adds	r3, #32
 800114e:	607b      	str	r3, [r7, #4]
	  if(MP3_DREQ == 1)
 8001150:	e7eb      	b.n	800112a <main+0x52>
 8001152:	bf00      	nop
 8001154:	40020800 	.word	0x40020800
 8001158:	20000028 	.word	0x20000028

0800115c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b094      	sub	sp, #80	; 0x50
 8001160:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001162:	f107 0320 	add.w	r3, r7, #32
 8001166:	2230      	movs	r2, #48	; 0x30
 8001168:	2100      	movs	r1, #0
 800116a:	4618      	mov	r0, r3
 800116c:	f004 ff16 	bl	8005f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001170:	f107 030c 	add.w	r3, r7, #12
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001180:	2300      	movs	r3, #0
 8001182:	60bb      	str	r3, [r7, #8]
 8001184:	4b2b      	ldr	r3, [pc, #172]	; (8001234 <SystemClock_Config+0xd8>)
 8001186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001188:	4a2a      	ldr	r2, [pc, #168]	; (8001234 <SystemClock_Config+0xd8>)
 800118a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118e:	6413      	str	r3, [r2, #64]	; 0x40
 8001190:	4b28      	ldr	r3, [pc, #160]	; (8001234 <SystemClock_Config+0xd8>)
 8001192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001194:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001198:	60bb      	str	r3, [r7, #8]
 800119a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800119c:	2300      	movs	r3, #0
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	4b25      	ldr	r3, [pc, #148]	; (8001238 <SystemClock_Config+0xdc>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a24      	ldr	r2, [pc, #144]	; (8001238 <SystemClock_Config+0xdc>)
 80011a6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011aa:	6013      	str	r3, [r2, #0]
 80011ac:	4b22      	ldr	r3, [pc, #136]	; (8001238 <SystemClock_Config+0xdc>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80011b8:	2301      	movs	r3, #1
 80011ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80011bc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c2:	2302      	movs	r3, #2
 80011c4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011c6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80011cc:	2304      	movs	r3, #4
 80011ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80011d0:	23b4      	movs	r3, #180	; 0xb4
 80011d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011d4:	2302      	movs	r3, #2
 80011d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d8:	2304      	movs	r3, #4
 80011da:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011dc:	f107 0320 	add.w	r3, r7, #32
 80011e0:	4618      	mov	r0, r3
 80011e2:	f002 f9ff 	bl	80035e4 <HAL_RCC_OscConfig>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011ec:	f000 f826 	bl	800123c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80011f0:	f002 f9a8 	bl	8003544 <HAL_PWREx_EnableOverDrive>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80011fa:	f000 f81f 	bl	800123c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011fe:	230f      	movs	r3, #15
 8001200:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	2302      	movs	r3, #2
 8001204:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001206:	2300      	movs	r3, #0
 8001208:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800120a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800120e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001210:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001214:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2105      	movs	r1, #5
 800121c:	4618      	mov	r0, r3
 800121e:	f002 fc59 	bl	8003ad4 <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001228:	f000 f808 	bl	800123c <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3750      	adds	r7, #80	; 0x50
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001240:	b672      	cpsid	i
}
 8001242:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001244:	e7fe      	b.n	8001244 <Error_Handler+0x8>
	...

08001248 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800124c:	4b17      	ldr	r3, [pc, #92]	; (80012ac <MX_SPI2_Init+0x64>)
 800124e:	4a18      	ldr	r2, [pc, #96]	; (80012b0 <MX_SPI2_Init+0x68>)
 8001250:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001252:	4b16      	ldr	r3, [pc, #88]	; (80012ac <MX_SPI2_Init+0x64>)
 8001254:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001258:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800125a:	4b14      	ldr	r3, [pc, #80]	; (80012ac <MX_SPI2_Init+0x64>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <MX_SPI2_Init+0x64>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8001266:	4b11      	ldr	r3, [pc, #68]	; (80012ac <MX_SPI2_Init+0x64>)
 8001268:	2202      	movs	r2, #2
 800126a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 800126c:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <MX_SPI2_Init+0x64>)
 800126e:	2201      	movs	r2, #1
 8001270:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001272:	4b0e      	ldr	r3, [pc, #56]	; (80012ac <MX_SPI2_Init+0x64>)
 8001274:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001278:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800127a:	4b0c      	ldr	r3, [pc, #48]	; (80012ac <MX_SPI2_Init+0x64>)
 800127c:	2210      	movs	r2, #16
 800127e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001280:	4b0a      	ldr	r3, [pc, #40]	; (80012ac <MX_SPI2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001286:	4b09      	ldr	r3, [pc, #36]	; (80012ac <MX_SPI2_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800128c:	4b07      	ldr	r3, [pc, #28]	; (80012ac <MX_SPI2_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001292:	4b06      	ldr	r3, [pc, #24]	; (80012ac <MX_SPI2_Init+0x64>)
 8001294:	220a      	movs	r2, #10
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001298:	4804      	ldr	r0, [pc, #16]	; (80012ac <MX_SPI2_Init+0x64>)
 800129a:	f002 fe17 	bl	8003ecc <HAL_SPI_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012a4:	f7ff ffca 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	2000003c 	.word	0x2000003c
 80012b0:	40003800 	.word	0x40003800

080012b4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a19      	ldr	r2, [pc, #100]	; (8001338 <HAL_SPI_MspInit+0x84>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d12c      	bne.n	8001330 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b18      	ldr	r3, [pc, #96]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	4a17      	ldr	r2, [pc, #92]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012e4:	6413      	str	r3, [r2, #64]	; 0x40
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a10      	ldr	r2, [pc, #64]	; (800133c <HAL_SPI_MspInit+0x88>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <HAL_SPI_MspInit+0x88>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800130e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001312:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001320:	2305      	movs	r3, #5
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001324:	f107 0314 	add.w	r3, r7, #20
 8001328:	4619      	mov	r1, r3
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <HAL_SPI_MspInit+0x8c>)
 800132c:	f001 fd48 	bl	8002dc0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001330:	bf00      	nop
 8001332:	3728      	adds	r7, #40	; 0x28
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	40003800 	.word	0x40003800
 800133c:	40023800 	.word	0x40023800
 8001340:	40020400 	.word	0x40020400

08001344 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <HAL_MspInit+0x4c>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001352:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <HAL_MspInit+0x4c>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001358:	6453      	str	r3, [r2, #68]	; 0x44
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <HAL_MspInit+0x4c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001362:	607b      	str	r3, [r7, #4]
 8001364:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001366:	2300      	movs	r3, #0
 8001368:	603b      	str	r3, [r7, #0]
 800136a:	4b09      	ldr	r3, [pc, #36]	; (8001390 <HAL_MspInit+0x4c>)
 800136c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136e:	4a08      	ldr	r2, [pc, #32]	; (8001390 <HAL_MspInit+0x4c>)
 8001370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001374:	6413      	str	r3, [r2, #64]	; 0x40
 8001376:	4b06      	ldr	r3, [pc, #24]	; (8001390 <HAL_MspInit+0x4c>)
 8001378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800137e:	603b      	str	r3, [r7, #0]
 8001380:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001382:	bf00      	nop
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800

08001394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001398:	e7fe      	b.n	8001398 <NMI_Handler+0x4>

0800139a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800139a:	b480      	push	{r7}
 800139c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800139e:	e7fe      	b.n	800139e <HardFault_Handler+0x4>

080013a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013a4:	e7fe      	b.n	80013a4 <MemManage_Handler+0x4>

080013a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013aa:	e7fe      	b.n	80013aa <BusFault_Handler+0x4>

080013ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013b0:	e7fe      	b.n	80013b0 <UsageFault_Handler+0x4>

080013b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013b2:	b480      	push	{r7}
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013b6:	bf00      	nop
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013c4:	bf00      	nop
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr

080013ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ce:	b480      	push	{r7}
 80013d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013d2:	bf00      	nop
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013e0:	f000 fd3a 	bl	8001e58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013e4:	bf00      	nop
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80013ec:	2008      	movs	r0, #8
 80013ee:	f001 fec5 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013f2:	bf00      	nop
 80013f4:	bd80      	pop	{r7, pc}
	...

080013f8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80013fc:	4802      	ldr	r0, [pc, #8]	; (8001408 <TIM4_IRQHandler+0x10>)
 80013fe:	f003 f903 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	200001f8 	.word	0x200001f8

0800140c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001410:	4802      	ldr	r0, [pc, #8]	; (800141c <USART3_IRQHandler+0x10>)
 8001412:	f003 ff85 	bl	8005320 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	200003a8 	.word	0x200003a8

08001420 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001424:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001428:	f001 fea8 	bl	800317c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <TIM7_IRQHandler+0x10>)
 8001436:	f003 f8e7 	bl	8004608 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	20000360 	.word	0x20000360

08001444 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001448:	4802      	ldr	r0, [pc, #8]	; (8001454 <DMA2_Stream0_IRQHandler+0x10>)
 800144a:	f001 fa7d 	bl	8002948 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	200000dc 	.word	0x200000dc

08001458 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800145c:	4b06      	ldr	r3, [pc, #24]	; (8001478 <SystemInit+0x20>)
 800145e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001462:	4a05      	ldr	r2, [pc, #20]	; (8001478 <SystemInit+0x20>)
 8001464:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001468:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800146c:	bf00      	nop
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	e000ed00 	.word	0xe000ed00

0800147c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08e      	sub	sp, #56	; 0x38
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
 800148c:	609a      	str	r2, [r3, #8]
 800148e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001490:	f107 0320 	add.w	r3, r7, #32
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800149a:	1d3b      	adds	r3, r7, #4
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	605a      	str	r2, [r3, #4]
 80014a2:	609a      	str	r2, [r3, #8]
 80014a4:	60da      	str	r2, [r3, #12]
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	615a      	str	r2, [r3, #20]
 80014aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ac:	4b2d      	ldr	r3, [pc, #180]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80014b4:	4b2b      	ldr	r3, [pc, #172]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014b6:	22b3      	movs	r2, #179	; 0xb3
 80014b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ba:	4b2a      	ldr	r3, [pc, #168]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014bc:	2200      	movs	r2, #0
 80014be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80014c0:	4b28      	ldr	r3, [pc, #160]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014c2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c8:	4b26      	ldr	r3, [pc, #152]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ce:	4b25      	ldr	r3, [pc, #148]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014d6:	f002 ffef 	bl	80044b8 <HAL_TIM_Base_Init>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80014e0:	f7ff feac 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ee:	4619      	mov	r1, r3
 80014f0:	481c      	ldr	r0, [pc, #112]	; (8001564 <MX_TIM2_Init+0xe8>)
 80014f2:	f003 fa53 	bl	800499c <HAL_TIM_ConfigClockSource>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80014fc:	f7ff fe9e 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001500:	4818      	ldr	r0, [pc, #96]	; (8001564 <MX_TIM2_Init+0xe8>)
 8001502:	f003 f828 	bl	8004556 <HAL_TIM_PWM_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d001      	beq.n	8001510 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800150c:	f7ff fe96 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001514:	2300      	movs	r3, #0
 8001516:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001518:	f107 0320 	add.w	r3, r7, #32
 800151c:	4619      	mov	r1, r3
 800151e:	4811      	ldr	r0, [pc, #68]	; (8001564 <MX_TIM2_Init+0xe8>)
 8001520:	f003 fe20 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800152a:	f7ff fe87 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800152e:	2360      	movs	r3, #96	; 0x60
 8001530:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001532:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001536:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	4619      	mov	r1, r3
 8001546:	4807      	ldr	r0, [pc, #28]	; (8001564 <MX_TIM2_Init+0xe8>)
 8001548:	f003 f966 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001552:	f7ff fe73 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001556:	4803      	ldr	r0, [pc, #12]	; (8001564 <MX_TIM2_Init+0xe8>)
 8001558:	f000 fab2 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000318 	.word	0x20000318

08001568 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b08e      	sub	sp, #56	; 0x38
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800156e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001572:	2200      	movs	r2, #0
 8001574:	601a      	str	r2, [r3, #0]
 8001576:	605a      	str	r2, [r3, #4]
 8001578:	609a      	str	r2, [r3, #8]
 800157a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800157c:	f107 0320 	add.w	r3, r7, #32
 8001580:	2200      	movs	r2, #0
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001586:	1d3b      	adds	r3, r7, #4
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
 8001594:	615a      	str	r2, [r3, #20]
 8001596:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001598:	4b2c      	ldr	r3, [pc, #176]	; (800164c <MX_TIM3_Init+0xe4>)
 800159a:	4a2d      	ldr	r2, [pc, #180]	; (8001650 <MX_TIM3_Init+0xe8>)
 800159c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <MX_TIM3_Init+0xe4>)
 80015a0:	2208      	movs	r2, #8
 80015a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a4:	4b29      	ldr	r3, [pc, #164]	; (800164c <MX_TIM3_Init+0xe4>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80015aa:	4b28      	ldr	r3, [pc, #160]	; (800164c <MX_TIM3_Init+0xe4>)
 80015ac:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015b2:	4b26      	ldr	r3, [pc, #152]	; (800164c <MX_TIM3_Init+0xe4>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b8:	4b24      	ldr	r3, [pc, #144]	; (800164c <MX_TIM3_Init+0xe4>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015be:	4823      	ldr	r0, [pc, #140]	; (800164c <MX_TIM3_Init+0xe4>)
 80015c0:	f002 ff7a 	bl	80044b8 <HAL_TIM_Base_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015ca:	f7ff fe37 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015d8:	4619      	mov	r1, r3
 80015da:	481c      	ldr	r0, [pc, #112]	; (800164c <MX_TIM3_Init+0xe4>)
 80015dc:	f003 f9de 	bl	800499c <HAL_TIM_ConfigClockSource>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015e6:	f7ff fe29 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015ea:	4818      	ldr	r0, [pc, #96]	; (800164c <MX_TIM3_Init+0xe4>)
 80015ec:	f002 ffb3 	bl	8004556 <HAL_TIM_PWM_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015f6:	f7ff fe21 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015fa:	2300      	movs	r3, #0
 80015fc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015fe:	2300      	movs	r3, #0
 8001600:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001602:	f107 0320 	add.w	r3, r7, #32
 8001606:	4619      	mov	r1, r3
 8001608:	4810      	ldr	r0, [pc, #64]	; (800164c <MX_TIM3_Init+0xe4>)
 800160a:	f003 fdab 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001614:	f7ff fe12 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001618:	2360      	movs	r3, #96	; 0x60
 800161a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001620:	2300      	movs	r3, #0
 8001622:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001628:	1d3b      	adds	r3, r7, #4
 800162a:	2200      	movs	r2, #0
 800162c:	4619      	mov	r1, r3
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <MX_TIM3_Init+0xe4>)
 8001630:	f003 f8f2 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800163a:	f7ff fdff 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800163e:	4803      	ldr	r0, [pc, #12]	; (800164c <MX_TIM3_Init+0xe4>)
 8001640:	f000 fa3e 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001644:	bf00      	nop
 8001646:	3738      	adds	r7, #56	; 0x38
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	200002d0 	.word	0x200002d0
 8001650:	40000400 	.word	0x40000400

08001654 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b08e      	sub	sp, #56	; 0x38
 8001658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800165a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800165e:	2200      	movs	r2, #0
 8001660:	601a      	str	r2, [r3, #0]
 8001662:	605a      	str	r2, [r3, #4]
 8001664:	609a      	str	r2, [r3, #8]
 8001666:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]
 800167e:	611a      	str	r2, [r3, #16]
 8001680:	615a      	str	r2, [r3, #20]
 8001682:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001684:	4b3b      	ldr	r3, [pc, #236]	; (8001774 <MX_TIM4_Init+0x120>)
 8001686:	4a3c      	ldr	r2, [pc, #240]	; (8001778 <MX_TIM4_Init+0x124>)
 8001688:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 800168a:	4b3a      	ldr	r3, [pc, #232]	; (8001774 <MX_TIM4_Init+0x120>)
 800168c:	2211      	movs	r2, #17
 800168e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001690:	4b38      	ldr	r3, [pc, #224]	; (8001774 <MX_TIM4_Init+0x120>)
 8001692:	2200      	movs	r2, #0
 8001694:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8001696:	4b37      	ldr	r3, [pc, #220]	; (8001774 <MX_TIM4_Init+0x120>)
 8001698:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800169c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169e:	4b35      	ldr	r3, [pc, #212]	; (8001774 <MX_TIM4_Init+0x120>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016a4:	4b33      	ldr	r3, [pc, #204]	; (8001774 <MX_TIM4_Init+0x120>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016aa:	4832      	ldr	r0, [pc, #200]	; (8001774 <MX_TIM4_Init+0x120>)
 80016ac:	f002 ff04 	bl	80044b8 <HAL_TIM_Base_Init>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016b6:	f7ff fdc1 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c4:	4619      	mov	r1, r3
 80016c6:	482b      	ldr	r0, [pc, #172]	; (8001774 <MX_TIM4_Init+0x120>)
 80016c8:	f003 f968 	bl	800499c <HAL_TIM_ConfigClockSource>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016d2:	f7ff fdb3 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016d6:	4827      	ldr	r0, [pc, #156]	; (8001774 <MX_TIM4_Init+0x120>)
 80016d8:	f002 ff3d 	bl	8004556 <HAL_TIM_PWM_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80016e2:	f7ff fdab 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016e6:	2300      	movs	r3, #0
 80016e8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016ee:	f107 0320 	add.w	r3, r7, #32
 80016f2:	4619      	mov	r1, r3
 80016f4:	481f      	ldr	r0, [pc, #124]	; (8001774 <MX_TIM4_Init+0x120>)
 80016f6:	f003 fd35 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001700:	f7ff fd9c 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001704:	2360      	movs	r3, #96	; 0x60
 8001706:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001708:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800170c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800170e:	2300      	movs	r3, #0
 8001710:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001716:	1d3b      	adds	r3, r7, #4
 8001718:	2200      	movs	r2, #0
 800171a:	4619      	mov	r1, r3
 800171c:	4815      	ldr	r0, [pc, #84]	; (8001774 <MX_TIM4_Init+0x120>)
 800171e:	f003 f87b 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001728:	f7ff fd88 	bl	800123c <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800172c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001730:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001732:	1d3b      	adds	r3, r7, #4
 8001734:	2204      	movs	r2, #4
 8001736:	4619      	mov	r1, r3
 8001738:	480e      	ldr	r0, [pc, #56]	; (8001774 <MX_TIM4_Init+0x120>)
 800173a:	f003 f86d 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001744:	f7ff fd7a 	bl	800123c <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001748:	f641 4351 	movw	r3, #7249	; 0x1c51
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800174e:	1d3b      	adds	r3, r7, #4
 8001750:	2208      	movs	r2, #8
 8001752:	4619      	mov	r1, r3
 8001754:	4807      	ldr	r0, [pc, #28]	; (8001774 <MX_TIM4_Init+0x120>)
 8001756:	f003 f85f 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001760:	f7ff fd6c 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001764:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM4_Init+0x120>)
 8001766:	f000 f9ab 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 800176a:	bf00      	nop
 800176c:	3738      	adds	r7, #56	; 0x38
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200001f8 	.word	0x200001f8
 8001778:	40000800 	.word	0x40000800

0800177c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08e      	sub	sp, #56	; 0x38
 8001780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001782:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001790:	f107 0320 	add.w	r3, r7, #32
 8001794:	2200      	movs	r2, #0
 8001796:	601a      	str	r2, [r3, #0]
 8001798:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800179a:	1d3b      	adds	r3, r7, #4
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
 80017a8:	615a      	str	r2, [r3, #20]
 80017aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017ac:	4b31      	ldr	r3, [pc, #196]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017ae:	4a32      	ldr	r2, [pc, #200]	; (8001878 <MX_TIM5_Init+0xfc>)
 80017b0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80017b2:	4b30      	ldr	r3, [pc, #192]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017b4:	2209      	movs	r2, #9
 80017b6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017b8:	4b2e      	ldr	r3, [pc, #184]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017ba:	2200      	movs	r2, #0
 80017bc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80017be:	4b2d      	ldr	r3, [pc, #180]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017c0:	4a2e      	ldr	r2, [pc, #184]	; (800187c <MX_TIM5_Init+0x100>)
 80017c2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017c4:	4b2b      	ldr	r3, [pc, #172]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ca:	4b2a      	ldr	r3, [pc, #168]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80017d0:	4828      	ldr	r0, [pc, #160]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017d2:	f002 fe71 	bl	80044b8 <HAL_TIM_Base_Init>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80017dc:	f7ff fd2e 	bl	800123c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80017e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017ea:	4619      	mov	r1, r3
 80017ec:	4821      	ldr	r0, [pc, #132]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017ee:	f003 f8d5 	bl	800499c <HAL_TIM_ConfigClockSource>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 80017f8:	f7ff fd20 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017fc:	481d      	ldr	r0, [pc, #116]	; (8001874 <MX_TIM5_Init+0xf8>)
 80017fe:	f002 feaa 	bl	8004556 <HAL_TIM_PWM_Init>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d001      	beq.n	800180c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001808:	f7ff fd18 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001814:	f107 0320 	add.w	r3, r7, #32
 8001818:	4619      	mov	r1, r3
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <MX_TIM5_Init+0xf8>)
 800181c:	f003 fca2 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001826:	f7ff fd09 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182a:	2360      	movs	r3, #96	; 0x60
 800182c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800182e:	2300      	movs	r3, #0
 8001830:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183a:	1d3b      	adds	r3, r7, #4
 800183c:	2200      	movs	r2, #0
 800183e:	4619      	mov	r1, r3
 8001840:	480c      	ldr	r0, [pc, #48]	; (8001874 <MX_TIM5_Init+0xf8>)
 8001842:	f002 ffe9 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800184c:	f7ff fcf6 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001850:	1d3b      	adds	r3, r7, #4
 8001852:	220c      	movs	r2, #12
 8001854:	4619      	mov	r1, r3
 8001856:	4807      	ldr	r0, [pc, #28]	; (8001874 <MX_TIM5_Init+0xf8>)
 8001858:	f002 ffde 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001862:	f7ff fceb 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001866:	4803      	ldr	r0, [pc, #12]	; (8001874 <MX_TIM5_Init+0xf8>)
 8001868:	f000 f92a 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 800186c:	bf00      	nop
 800186e:	3738      	adds	r7, #56	; 0x38
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000288 	.word	0x20000288
 8001878:	40000c00 	.word	0x40000c00
 800187c:	0001869f 	.word	0x0001869f

08001880 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001886:	463b      	mov	r3, r7
 8001888:	2200      	movs	r2, #0
 800188a:	601a      	str	r2, [r3, #0]
 800188c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800188e:	4b15      	ldr	r3, [pc, #84]	; (80018e4 <MX_TIM7_Init+0x64>)
 8001890:	4a15      	ldr	r2, [pc, #84]	; (80018e8 <MX_TIM7_Init+0x68>)
 8001892:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <MX_TIM7_Init+0x64>)
 8001896:	2208      	movs	r2, #8
 8001898:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800189a:	4b12      	ldr	r3, [pc, #72]	; (80018e4 <MX_TIM7_Init+0x64>)
 800189c:	2200      	movs	r2, #0
 800189e:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80018a0:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018a2:	f242 720f 	movw	r2, #9999	; 0x270f
 80018a6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80018a8:	4b0e      	ldr	r3, [pc, #56]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018aa:	2280      	movs	r2, #128	; 0x80
 80018ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80018ae:	480d      	ldr	r0, [pc, #52]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018b0:	f002 fe02 	bl	80044b8 <HAL_TIM_Base_Init>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80018ba:	f7ff fcbf 	bl	800123c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018be:	2300      	movs	r3, #0
 80018c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	4619      	mov	r1, r3
 80018ca:	4806      	ldr	r0, [pc, #24]	; (80018e4 <MX_TIM7_Init+0x64>)
 80018cc:	f003 fc4a 	bl	8005164 <HAL_TIMEx_MasterConfigSynchronization>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80018d6:	f7ff fcb1 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	3708      	adds	r7, #8
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	20000360 	.word	0x20000360
 80018e8:	40001400 	.word	0x40001400

080018ec <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b088      	sub	sp, #32
 80018f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80018f2:	1d3b      	adds	r3, r7, #4
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
 8001900:	615a      	str	r2, [r3, #20]
 8001902:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001904:	4b1e      	ldr	r3, [pc, #120]	; (8001980 <MX_TIM10_Init+0x94>)
 8001906:	4a1f      	ldr	r2, [pc, #124]	; (8001984 <MX_TIM10_Init+0x98>)
 8001908:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800190a:	4b1d      	ldr	r3, [pc, #116]	; (8001980 <MX_TIM10_Init+0x94>)
 800190c:	2247      	movs	r2, #71	; 0x47
 800190e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001910:	4b1b      	ldr	r3, [pc, #108]	; (8001980 <MX_TIM10_Init+0x94>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001916:	4b1a      	ldr	r3, [pc, #104]	; (8001980 <MX_TIM10_Init+0x94>)
 8001918:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800191c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <MX_TIM10_Init+0x94>)
 8001920:	2200      	movs	r2, #0
 8001922:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001924:	4b16      	ldr	r3, [pc, #88]	; (8001980 <MX_TIM10_Init+0x94>)
 8001926:	2200      	movs	r2, #0
 8001928:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800192a:	4815      	ldr	r0, [pc, #84]	; (8001980 <MX_TIM10_Init+0x94>)
 800192c:	f002 fdc4 	bl	80044b8 <HAL_TIM_Base_Init>
 8001930:	4603      	mov	r3, r0
 8001932:	2b00      	cmp	r3, #0
 8001934:	d001      	beq.n	800193a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001936:	f7ff fc81 	bl	800123c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800193a:	4811      	ldr	r0, [pc, #68]	; (8001980 <MX_TIM10_Init+0x94>)
 800193c:	f002 fe0b 	bl	8004556 <HAL_TIM_PWM_Init>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001946:	f7ff fc79 	bl	800123c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	; 0x60
 800194c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800194e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001952:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001954:	2300      	movs	r3, #0
 8001956:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	2200      	movs	r2, #0
 8001960:	4619      	mov	r1, r3
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <MX_TIM10_Init+0x94>)
 8001964:	f002 ff58 	bl	8004818 <HAL_TIM_PWM_ConfigChannel>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800196e:	f7ff fc65 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001972:	4803      	ldr	r0, [pc, #12]	; (8001980 <MX_TIM10_Init+0x94>)
 8001974:	f000 f8a4 	bl	8001ac0 <HAL_TIM_MspPostInit>

}
 8001978:	bf00      	nop
 800197a:	3720      	adds	r7, #32
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000240 	.word	0x20000240
 8001984:	40014400 	.word	0x40014400

08001988 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001998:	d10e      	bne.n	80019b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	61fb      	str	r3, [r7, #28]
 800199e:	4b42      	ldr	r3, [pc, #264]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a2:	4a41      	ldr	r2, [pc, #260]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019a4:	f043 0301 	orr.w	r3, r3, #1
 80019a8:	6413      	str	r3, [r2, #64]	; 0x40
 80019aa:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	61fb      	str	r3, [r7, #28]
 80019b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80019b6:	e072      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a3b      	ldr	r2, [pc, #236]	; (8001aac <HAL_TIM_Base_MspInit+0x124>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10e      	bne.n	80019e0 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	61bb      	str	r3, [r7, #24]
 80019c6:	4b38      	ldr	r3, [pc, #224]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	4a37      	ldr	r2, [pc, #220]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	6413      	str	r3, [r2, #64]	; 0x40
 80019d2:	4b35      	ldr	r3, [pc, #212]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	69bb      	ldr	r3, [r7, #24]
}
 80019de:	e05e      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a32      	ldr	r2, [pc, #200]	; (8001ab0 <HAL_TIM_Base_MspInit+0x128>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d116      	bne.n	8001a18 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
 80019ee:	4b2e      	ldr	r3, [pc, #184]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a2d      	ldr	r2, [pc, #180]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019f4:	f043 0304 	orr.w	r3, r3, #4
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 0304 	and.w	r3, r3, #4
 8001a02:	617b      	str	r3, [r7, #20]
 8001a04:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	201e      	movs	r0, #30
 8001a0c:	f000 fdb5 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a10:	201e      	movs	r0, #30
 8001a12:	f000 fdce 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8001a16:	e042      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <HAL_TIM_Base_MspInit+0x12c>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d10e      	bne.n	8001a40 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a1f      	ldr	r2, [pc, #124]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a2c:	f043 0308 	orr.w	r3, r3, #8
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b1d      	ldr	r3, [pc, #116]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 0308 	and.w	r3, r3, #8
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
}
 8001a3e:	e02e      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a1c      	ldr	r2, [pc, #112]	; (8001ab8 <HAL_TIM_Base_MspInit+0x130>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d116      	bne.n	8001a78 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b16      	ldr	r3, [pc, #88]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a52:	4a15      	ldr	r2, [pc, #84]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a54:	f043 0320 	orr.w	r3, r3, #32
 8001a58:	6413      	str	r3, [r2, #64]	; 0x40
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f003 0320 	and.w	r3, r3, #32
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	2037      	movs	r0, #55	; 0x37
 8001a6c:	f000 fd85 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001a70:	2037      	movs	r0, #55	; 0x37
 8001a72:	f000 fd9e 	bl	80025b2 <HAL_NVIC_EnableIRQ>
}
 8001a76:	e012      	b.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a0f      	ldr	r2, [pc, #60]	; (8001abc <HAL_TIM_Base_MspInit+0x134>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d10d      	bne.n	8001a9e <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a82:	2300      	movs	r3, #0
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	4b08      	ldr	r3, [pc, #32]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	4a07      	ldr	r2, [pc, #28]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a90:	6453      	str	r3, [r2, #68]	; 0x44
 8001a92:	4b05      	ldr	r3, [pc, #20]	; (8001aa8 <HAL_TIM_Base_MspInit+0x120>)
 8001a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	68bb      	ldr	r3, [r7, #8]
}
 8001a9e:	bf00      	nop
 8001aa0:	3720      	adds	r7, #32
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40000400 	.word	0x40000400
 8001ab0:	40000800 	.word	0x40000800
 8001ab4:	40000c00 	.word	0x40000c00
 8001ab8:	40001400 	.word	0x40001400
 8001abc:	40014400 	.word	0x40014400

08001ac0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b08c      	sub	sp, #48	; 0x30
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	605a      	str	r2, [r3, #4]
 8001ad2:	609a      	str	r2, [r3, #8]
 8001ad4:	60da      	str	r2, [r3, #12]
 8001ad6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ae0:	d11e      	bne.n	8001b20 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	61bb      	str	r3, [r7, #24]
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aea:	4a57      	ldr	r2, [pc, #348]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001aec:	f043 0301 	orr.w	r3, r3, #1
 8001af0:	6313      	str	r3, [r2, #48]	; 0x30
 8001af2:	4b55      	ldr	r3, [pc, #340]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	61bb      	str	r3, [r7, #24]
 8001afc:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001afe:	2320      	movs	r3, #32
 8001b00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b02:	2302      	movs	r3, #2
 8001b04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b12:	f107 031c 	add.w	r3, r7, #28
 8001b16:	4619      	mov	r1, r3
 8001b18:	484c      	ldr	r0, [pc, #304]	; (8001c4c <HAL_TIM_MspPostInit+0x18c>)
 8001b1a:	f001 f951 	bl	8002dc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001b1e:	e08f      	b.n	8001c40 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_TIM_MspPostInit+0x190>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d11e      	bne.n	8001b68 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	4b46      	ldr	r3, [pc, #280]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b32:	4a45      	ldr	r2, [pc, #276]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b34:	f043 0304 	orr.w	r3, r3, #4
 8001b38:	6313      	str	r3, [r2, #48]	; 0x30
 8001b3a:	4b43      	ldr	r3, [pc, #268]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	617b      	str	r3, [r7, #20]
 8001b44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b46:	2340      	movs	r3, #64	; 0x40
 8001b48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4a:	2302      	movs	r3, #2
 8001b4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b52:	2300      	movs	r3, #0
 8001b54:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b56:	2302      	movs	r3, #2
 8001b58:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b5a:	f107 031c 	add.w	r3, r7, #28
 8001b5e:	4619      	mov	r1, r3
 8001b60:	483c      	ldr	r0, [pc, #240]	; (8001c54 <HAL_TIM_MspPostInit+0x194>)
 8001b62:	f001 f92d 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001b66:	e06b      	b.n	8001c40 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a3a      	ldr	r2, [pc, #232]	; (8001c58 <HAL_TIM_MspPostInit+0x198>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d11f      	bne.n	8001bb2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
 8001b76:	4b34      	ldr	r3, [pc, #208]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7a:	4a33      	ldr	r2, [pc, #204]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b7c:	f043 0308 	orr.w	r3, r3, #8
 8001b80:	6313      	str	r3, [r2, #48]	; 0x30
 8001b82:	4b31      	ldr	r3, [pc, #196]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	613b      	str	r3, [r7, #16]
 8001b8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001b8e:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001b92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba4:	f107 031c 	add.w	r3, r7, #28
 8001ba8:	4619      	mov	r1, r3
 8001baa:	482c      	ldr	r0, [pc, #176]	; (8001c5c <HAL_TIM_MspPostInit+0x19c>)
 8001bac:	f001 f908 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001bb0:	e046      	b.n	8001c40 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a2a      	ldr	r2, [pc, #168]	; (8001c60 <HAL_TIM_MspPostInit+0x1a0>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d11e      	bne.n	8001bfa <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60fb      	str	r3, [r7, #12]
 8001bc0:	4b21      	ldr	r3, [pc, #132]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001bc6:	f043 0301 	orr.w	r3, r3, #1
 8001bca:	6313      	str	r3, [r2, #48]	; 0x30
 8001bcc:	4b1e      	ldr	r3, [pc, #120]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	60fb      	str	r3, [r7, #12]
 8001bd6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001bd8:	2309      	movs	r3, #9
 8001bda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be4:	2300      	movs	r3, #0
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001be8:	2302      	movs	r3, #2
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bec:	f107 031c 	add.w	r3, r7, #28
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4816      	ldr	r0, [pc, #88]	; (8001c4c <HAL_TIM_MspPostInit+0x18c>)
 8001bf4:	f001 f8e4 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001bf8:	e022      	b.n	8001c40 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a19      	ldr	r2, [pc, #100]	; (8001c64 <HAL_TIM_MspPostInit+0x1a4>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d11d      	bne.n	8001c40 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c04:	2300      	movs	r3, #0
 8001c06:	60bb      	str	r3, [r7, #8]
 8001c08:	4b0f      	ldr	r3, [pc, #60]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0c:	4a0e      	ldr	r2, [pc, #56]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001c0e:	f043 0320 	orr.w	r3, r3, #32
 8001c12:	6313      	str	r3, [r2, #48]	; 0x30
 8001c14:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <HAL_TIM_MspPostInit+0x188>)
 8001c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c18:	f003 0320 	and.w	r3, r3, #32
 8001c1c:	60bb      	str	r3, [r7, #8]
 8001c1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c20:	2340      	movs	r3, #64	; 0x40
 8001c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c24:	2302      	movs	r3, #2
 8001c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c30:	2303      	movs	r3, #3
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c34:	f107 031c 	add.w	r3, r7, #28
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480b      	ldr	r0, [pc, #44]	; (8001c68 <HAL_TIM_MspPostInit+0x1a8>)
 8001c3c:	f001 f8c0 	bl	8002dc0 <HAL_GPIO_Init>
}
 8001c40:	bf00      	nop
 8001c42:	3730      	adds	r7, #48	; 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40020000 	.word	0x40020000
 8001c50:	40000400 	.word	0x40000400
 8001c54:	40020800 	.word	0x40020800
 8001c58:	40000800 	.word	0x40000800
 8001c5c:	40020c00 	.word	0x40020c00
 8001c60:	40000c00 	.word	0x40000c00
 8001c64:	40014400 	.word	0x40014400
 8001c68:	40021400 	.word	0x40021400

08001c6c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c70:	4b11      	ldr	r3, [pc, #68]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c72:	4a12      	ldr	r2, [pc, #72]	; (8001cbc <MX_USART3_UART_Init+0x50>)
 8001c74:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c76:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c7c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c7e:	4b0e      	ldr	r3, [pc, #56]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c84:	4b0c      	ldr	r3, [pc, #48]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c8a:	4b0b      	ldr	r3, [pc, #44]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c92:	220c      	movs	r2, #12
 8001c94:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c96:	4b08      	ldr	r3, [pc, #32]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <MX_USART3_UART_Init+0x4c>)
 8001ca4:	f003 faee 	bl	8005284 <HAL_UART_Init>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001cae:	f7ff fac5 	bl	800123c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200003a8 	.word	0x200003a8
 8001cbc:	40004800 	.word	0x40004800

08001cc0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cc8:	f107 0314 	add.w	r3, r7, #20
 8001ccc:	2200      	movs	r2, #0
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	605a      	str	r2, [r3, #4]
 8001cd2:	609a      	str	r2, [r3, #8]
 8001cd4:	60da      	str	r2, [r3, #12]
 8001cd6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a1d      	ldr	r2, [pc, #116]	; (8001d54 <HAL_UART_MspInit+0x94>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d134      	bne.n	8001d4c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b1c      	ldr	r3, [pc, #112]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cea:	4a1b      	ldr	r2, [pc, #108]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cf2:	4b19      	ldr	r3, [pc, #100]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b15      	ldr	r3, [pc, #84]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d06:	4a14      	ldr	r2, [pc, #80]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001d08:	f043 0308 	orr.w	r3, r3, #8
 8001d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0e:	4b12      	ldr	r3, [pc, #72]	; (8001d58 <HAL_UART_MspInit+0x98>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d2c:	2307      	movs	r3, #7
 8001d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d30:	f107 0314 	add.w	r3, r7, #20
 8001d34:	4619      	mov	r1, r3
 8001d36:	4809      	ldr	r0, [pc, #36]	; (8001d5c <HAL_UART_MspInit+0x9c>)
 8001d38:	f001 f842 	bl	8002dc0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	2100      	movs	r1, #0
 8001d40:	2027      	movs	r0, #39	; 0x27
 8001d42:	f000 fc1a 	bl	800257a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d46:	2027      	movs	r0, #39	; 0x27
 8001d48:	f000 fc33 	bl	80025b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d4c:	bf00      	nop
 8001d4e:	3728      	adds	r7, #40	; 0x28
 8001d50:	46bd      	mov	sp, r7
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40004800 	.word	0x40004800
 8001d58:	40023800 	.word	0x40023800
 8001d5c:	40020c00 	.word	0x40020c00

08001d60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d98 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d64:	480d      	ldr	r0, [pc, #52]	; (8001d9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d66:	490e      	ldr	r1, [pc, #56]	; (8001da0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d68:	4a0e      	ldr	r2, [pc, #56]	; (8001da4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d6c:	e002      	b.n	8001d74 <LoopCopyDataInit>

08001d6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d72:	3304      	adds	r3, #4

08001d74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d78:	d3f9      	bcc.n	8001d6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d7a:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d7c:	4c0b      	ldr	r4, [pc, #44]	; (8001dac <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d80:	e001      	b.n	8001d86 <LoopFillZerobss>

08001d82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d84:	3204      	adds	r2, #4

08001d86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d88:	d3fb      	bcc.n	8001d82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d8a:	f7ff fb65 	bl	8001458 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d8e:	f004 f8e1 	bl	8005f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d92:	f7ff f9a1 	bl	80010d8 <main>
  bx  lr    
 8001d96:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d98:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001da0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001da4:	0800600c 	.word	0x0800600c
  ldr r2, =_sbss
 8001da8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001dac:	200003f0 	.word	0x200003f0

08001db0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001db0:	e7fe      	b.n	8001db0 <ADC_IRQHandler>
	...

08001db4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001db8:	4b0e      	ldr	r3, [pc, #56]	; (8001df4 <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a0d      	ldr	r2, [pc, #52]	; (8001df4 <HAL_Init+0x40>)
 8001dbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dc4:	4b0b      	ldr	r3, [pc, #44]	; (8001df4 <HAL_Init+0x40>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	4a0a      	ldr	r2, [pc, #40]	; (8001df4 <HAL_Init+0x40>)
 8001dca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001dce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dd0:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_Init+0x40>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a07      	ldr	r2, [pc, #28]	; (8001df4 <HAL_Init+0x40>)
 8001dd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ddc:	2003      	movs	r0, #3
 8001dde:	f000 fbc1 	bl	8002564 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001de2:	200f      	movs	r0, #15
 8001de4:	f000 f808 	bl	8001df8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001de8:	f7ff faac 	bl	8001344 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dec:	2300      	movs	r3, #0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	40023c00 	.word	0x40023c00

08001df8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e00:	4b12      	ldr	r3, [pc, #72]	; (8001e4c <HAL_InitTick+0x54>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <HAL_InitTick+0x58>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	4619      	mov	r1, r3
 8001e0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 fbd9 	bl	80025ce <HAL_SYSTICK_Config>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e00e      	b.n	8001e44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2b0f      	cmp	r3, #15
 8001e2a:	d80a      	bhi.n	8001e42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	6879      	ldr	r1, [r7, #4]
 8001e30:	f04f 30ff 	mov.w	r0, #4294967295
 8001e34:	f000 fba1 	bl	800257a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e38:	4a06      	ldr	r2, [pc, #24]	; (8001e54 <HAL_InitTick+0x5c>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	e000      	b.n	8001e44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3708      	adds	r7, #8
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}
 8001e4c:	20000000 	.word	0x20000000
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000004 	.word	0x20000004

08001e58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e5c:	4b06      	ldr	r3, [pc, #24]	; (8001e78 <HAL_IncTick+0x20>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	461a      	mov	r2, r3
 8001e62:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <HAL_IncTick+0x24>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4413      	add	r3, r2
 8001e68:	4a04      	ldr	r2, [pc, #16]	; (8001e7c <HAL_IncTick+0x24>)
 8001e6a:	6013      	str	r3, [r2, #0]
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	200003ec 	.word	0x200003ec

08001e80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	af00      	add	r7, sp, #0
  return uwTick;
 8001e84:	4b03      	ldr	r3, [pc, #12]	; (8001e94 <HAL_GetTick+0x14>)
 8001e86:	681b      	ldr	r3, [r3, #0]
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	200003ec 	.word	0x200003ec

08001e98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b084      	sub	sp, #16
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7ff ffee 	bl	8001e80 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb0:	d005      	beq.n	8001ebe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001eb2:	4b0a      	ldr	r3, [pc, #40]	; (8001edc <HAL_Delay+0x44>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	461a      	mov	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4413      	add	r3, r2
 8001ebc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ebe:	bf00      	nop
 8001ec0:	f7ff ffde 	bl	8001e80 <HAL_GetTick>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d8f7      	bhi.n	8001ec0 <HAL_Delay+0x28>
  {
  }
}
 8001ed0:	bf00      	nop
 8001ed2:	bf00      	nop
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	20000008 	.word	0x20000008

08001ee0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e033      	b.n	8001f5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d109      	bne.n	8001f12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7fe fdee 	bl	8000ae0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f16:	f003 0310 	and.w	r3, r3, #16
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d118      	bne.n	8001f50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f26:	f023 0302 	bic.w	r3, r3, #2
 8001f2a:	f043 0202 	orr.w	r2, r3, #2
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f94a 	bl	80021cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	f023 0303 	bic.w	r3, r3, #3
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	641a      	str	r2, [r3, #64]	; 0x40
 8001f4e:	e001      	b.n	8001f54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2200      	movs	r2, #0
 8001f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f7c:	2b01      	cmp	r3, #1
 8001f7e:	d101      	bne.n	8001f84 <HAL_ADC_ConfigChannel+0x1c>
 8001f80:	2302      	movs	r3, #2
 8001f82:	e113      	b.n	80021ac <HAL_ADC_ConfigChannel+0x244>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2b09      	cmp	r3, #9
 8001f92:	d925      	bls.n	8001fe0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68d9      	ldr	r1, [r3, #12]
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4613      	mov	r3, r2
 8001fa4:	005b      	lsls	r3, r3, #1
 8001fa6:	4413      	add	r3, r2
 8001fa8:	3b1e      	subs	r3, #30
 8001faa:	2207      	movs	r2, #7
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43da      	mvns	r2, r3
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	68d9      	ldr	r1, [r3, #12]
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	4603      	mov	r3, r0
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	4403      	add	r3, r0
 8001fd2:	3b1e      	subs	r3, #30
 8001fd4:	409a      	lsls	r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	60da      	str	r2, [r3, #12]
 8001fde:	e022      	b.n	8002026 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6919      	ldr	r1, [r3, #16]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	461a      	mov	r2, r3
 8001fee:	4613      	mov	r3, r2
 8001ff0:	005b      	lsls	r3, r3, #1
 8001ff2:	4413      	add	r3, r2
 8001ff4:	2207      	movs	r2, #7
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	400a      	ands	r2, r1
 8002002:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6919      	ldr	r1, [r3, #16]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	b29b      	uxth	r3, r3
 8002014:	4618      	mov	r0, r3
 8002016:	4603      	mov	r3, r0
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	4403      	add	r3, r0
 800201c:	409a      	lsls	r2, r3
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b06      	cmp	r3, #6
 800202c:	d824      	bhi.n	8002078 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685a      	ldr	r2, [r3, #4]
 8002038:	4613      	mov	r3, r2
 800203a:	009b      	lsls	r3, r3, #2
 800203c:	4413      	add	r3, r2
 800203e:	3b05      	subs	r3, #5
 8002040:	221f      	movs	r2, #31
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43da      	mvns	r2, r3
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	400a      	ands	r2, r1
 800204e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	4618      	mov	r0, r3
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685a      	ldr	r2, [r3, #4]
 8002062:	4613      	mov	r3, r2
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4413      	add	r3, r2
 8002068:	3b05      	subs	r3, #5
 800206a:	fa00 f203 	lsl.w	r2, r0, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	430a      	orrs	r2, r1
 8002074:	635a      	str	r2, [r3, #52]	; 0x34
 8002076:	e04c      	b.n	8002112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b0c      	cmp	r3, #12
 800207e:	d824      	bhi.n	80020ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685a      	ldr	r2, [r3, #4]
 800208a:	4613      	mov	r3, r2
 800208c:	009b      	lsls	r3, r3, #2
 800208e:	4413      	add	r3, r2
 8002090:	3b23      	subs	r3, #35	; 0x23
 8002092:	221f      	movs	r2, #31
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	43da      	mvns	r2, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	400a      	ands	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4618      	mov	r0, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685a      	ldr	r2, [r3, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4413      	add	r3, r2
 80020ba:	3b23      	subs	r3, #35	; 0x23
 80020bc:	fa00 f203 	lsl.w	r2, r0, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	631a      	str	r2, [r3, #48]	; 0x30
 80020c8:	e023      	b.n	8002112 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	4413      	add	r3, r2
 80020da:	3b41      	subs	r3, #65	; 0x41
 80020dc:	221f      	movs	r2, #31
 80020de:	fa02 f303 	lsl.w	r3, r2, r3
 80020e2:	43da      	mvns	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	400a      	ands	r2, r1
 80020ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4618      	mov	r0, r3
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685a      	ldr	r2, [r3, #4]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	3b41      	subs	r3, #65	; 0x41
 8002106:	fa00 f203 	lsl.w	r2, r0, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	430a      	orrs	r2, r1
 8002110:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002112:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <HAL_ADC_ConfigChannel+0x250>)
 8002114:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a28      	ldr	r2, [pc, #160]	; (80021bc <HAL_ADC_ConfigChannel+0x254>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d10f      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1d8>
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	2b12      	cmp	r3, #18
 8002126:	d10b      	bne.n	8002140 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_ADC_ConfigChannel+0x254>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d12b      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x23a>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	4a1c      	ldr	r2, [pc, #112]	; (80021c0 <HAL_ADC_ConfigChannel+0x258>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <HAL_ADC_ConfigChannel+0x1f4>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2b11      	cmp	r3, #17
 800215a:	d122      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a11      	ldr	r2, [pc, #68]	; (80021c0 <HAL_ADC_ConfigChannel+0x258>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d111      	bne.n	80021a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800217e:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <HAL_ADC_ConfigChannel+0x25c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a11      	ldr	r2, [pc, #68]	; (80021c8 <HAL_ADC_ConfigChannel+0x260>)
 8002184:	fba2 2303 	umull	r2, r3, r2, r3
 8002188:	0c9a      	lsrs	r2, r3, #18
 800218a:	4613      	mov	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	4413      	add	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002194:	e002      	b.n	800219c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	3b01      	subs	r3, #1
 800219a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f9      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr
 80021b8:	40012300 	.word	0x40012300
 80021bc:	40012000 	.word	0x40012000
 80021c0:	10000012 	.word	0x10000012
 80021c4:	20000000 	.word	0x20000000
 80021c8:	431bde83 	.word	0x431bde83

080021cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b085      	sub	sp, #20
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021d4:	4b79      	ldr	r3, [pc, #484]	; (80023bc <ADC_Init+0x1f0>)
 80021d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	431a      	orrs	r2, r3
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	685a      	ldr	r2, [r3, #4]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002200:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6859      	ldr	r1, [r3, #4]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	021a      	lsls	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	430a      	orrs	r2, r1
 8002214:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002224:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6859      	ldr	r1, [r3, #4]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	430a      	orrs	r2, r1
 8002236:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002246:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	6899      	ldr	r1, [r3, #8]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	430a      	orrs	r2, r1
 8002258:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	4a58      	ldr	r2, [pc, #352]	; (80023c0 <ADC_Init+0x1f4>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d022      	beq.n	80022aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689a      	ldr	r2, [r3, #8]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002272:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6899      	ldr	r1, [r3, #8]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	430a      	orrs	r2, r1
 8002284:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689a      	ldr	r2, [r3, #8]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002294:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	6899      	ldr	r1, [r3, #8]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	430a      	orrs	r2, r1
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	e00f      	b.n	80022ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689a      	ldr	r2, [r3, #8]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689a      	ldr	r2, [r3, #8]
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f022 0202 	bic.w	r2, r2, #2
 80022d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	6899      	ldr	r1, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	7e1b      	ldrb	r3, [r3, #24]
 80022e4:	005a      	lsls	r2, r3, #1
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	430a      	orrs	r2, r1
 80022ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d01b      	beq.n	8002330 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	685a      	ldr	r2, [r3, #4]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002306:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	685a      	ldr	r2, [r3, #4]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002316:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	6859      	ldr	r1, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	3b01      	subs	r3, #1
 8002324:	035a      	lsls	r2, r3, #13
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	e007      	b.n	8002340 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	685a      	ldr	r2, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800233e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800234e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	3b01      	subs	r3, #1
 800235c:	051a      	lsls	r2, r3, #20
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	430a      	orrs	r2, r1
 8002364:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	689a      	ldr	r2, [r3, #8]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002374:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002382:	025a      	lsls	r2, r3, #9
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800239a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	029a      	lsls	r2, r3, #10
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	609a      	str	r2, [r3, #8]
}
 80023b0:	bf00      	nop
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr
 80023bc:	40012300 	.word	0x40012300
 80023c0:	0f000001 	.word	0x0f000001

080023c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b085      	sub	sp, #20
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	f003 0307 	and.w	r3, r3, #7
 80023d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023d6:	68db      	ldr	r3, [r3, #12]
 80023d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023da:	68ba      	ldr	r2, [r7, #8]
 80023dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023e0:	4013      	ands	r3, r2
 80023e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023e8:	68bb      	ldr	r3, [r7, #8]
 80023ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023f6:	4a04      	ldr	r2, [pc, #16]	; (8002408 <__NVIC_SetPriorityGrouping+0x44>)
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	60d3      	str	r3, [r2, #12]
}
 80023fc:	bf00      	nop
 80023fe:	3714      	adds	r7, #20
 8002400:	46bd      	mov	sp, r7
 8002402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002406:	4770      	bx	lr
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002410:	4b04      	ldr	r3, [pc, #16]	; (8002424 <__NVIC_GetPriorityGrouping+0x18>)
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	0a1b      	lsrs	r3, r3, #8
 8002416:	f003 0307 	and.w	r3, r3, #7
}
 800241a:	4618      	mov	r0, r3
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr
 8002424:	e000ed00 	.word	0xe000ed00

08002428 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	4603      	mov	r3, r0
 8002430:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	2b00      	cmp	r3, #0
 8002438:	db0b      	blt.n	8002452 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800243a:	79fb      	ldrb	r3, [r7, #7]
 800243c:	f003 021f 	and.w	r2, r3, #31
 8002440:	4907      	ldr	r1, [pc, #28]	; (8002460 <__NVIC_EnableIRQ+0x38>)
 8002442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002446:	095b      	lsrs	r3, r3, #5
 8002448:	2001      	movs	r0, #1
 800244a:	fa00 f202 	lsl.w	r2, r0, r2
 800244e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	e000e100 	.word	0xe000e100

08002464 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	6039      	str	r1, [r7, #0]
 800246e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	2b00      	cmp	r3, #0
 8002476:	db0a      	blt.n	800248e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	b2da      	uxtb	r2, r3
 800247c:	490c      	ldr	r1, [pc, #48]	; (80024b0 <__NVIC_SetPriority+0x4c>)
 800247e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002482:	0112      	lsls	r2, r2, #4
 8002484:	b2d2      	uxtb	r2, r2
 8002486:	440b      	add	r3, r1
 8002488:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800248c:	e00a      	b.n	80024a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	b2da      	uxtb	r2, r3
 8002492:	4908      	ldr	r1, [pc, #32]	; (80024b4 <__NVIC_SetPriority+0x50>)
 8002494:	79fb      	ldrb	r3, [r7, #7]
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	3b04      	subs	r3, #4
 800249c:	0112      	lsls	r2, r2, #4
 800249e:	b2d2      	uxtb	r2, r2
 80024a0:	440b      	add	r3, r1
 80024a2:	761a      	strb	r2, [r3, #24]
}
 80024a4:	bf00      	nop
 80024a6:	370c      	adds	r7, #12
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	e000e100 	.word	0xe000e100
 80024b4:	e000ed00 	.word	0xe000ed00

080024b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024b8:	b480      	push	{r7}
 80024ba:	b089      	sub	sp, #36	; 0x24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f1c3 0307 	rsb	r3, r3, #7
 80024d2:	2b04      	cmp	r3, #4
 80024d4:	bf28      	it	cs
 80024d6:	2304      	movcs	r3, #4
 80024d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3304      	adds	r3, #4
 80024de:	2b06      	cmp	r3, #6
 80024e0:	d902      	bls.n	80024e8 <NVIC_EncodePriority+0x30>
 80024e2:	69fb      	ldr	r3, [r7, #28]
 80024e4:	3b03      	subs	r3, #3
 80024e6:	e000      	b.n	80024ea <NVIC_EncodePriority+0x32>
 80024e8:	2300      	movs	r3, #0
 80024ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ec:	f04f 32ff 	mov.w	r2, #4294967295
 80024f0:	69bb      	ldr	r3, [r7, #24]
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43da      	mvns	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	401a      	ands	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002500:	f04f 31ff 	mov.w	r1, #4294967295
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	fa01 f303 	lsl.w	r3, r1, r3
 800250a:	43d9      	mvns	r1, r3
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002510:	4313      	orrs	r3, r2
         );
}
 8002512:	4618      	mov	r0, r3
 8002514:	3724      	adds	r7, #36	; 0x24
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
	...

08002520 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002530:	d301      	bcc.n	8002536 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002532:	2301      	movs	r3, #1
 8002534:	e00f      	b.n	8002556 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002536:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <SysTick_Config+0x40>)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	3b01      	subs	r3, #1
 800253c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800253e:	210f      	movs	r1, #15
 8002540:	f04f 30ff 	mov.w	r0, #4294967295
 8002544:	f7ff ff8e 	bl	8002464 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002548:	4b05      	ldr	r3, [pc, #20]	; (8002560 <SysTick_Config+0x40>)
 800254a:	2200      	movs	r2, #0
 800254c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800254e:	4b04      	ldr	r3, [pc, #16]	; (8002560 <SysTick_Config+0x40>)
 8002550:	2207      	movs	r2, #7
 8002552:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3708      	adds	r7, #8
 800255a:	46bd      	mov	sp, r7
 800255c:	bd80      	pop	{r7, pc}
 800255e:	bf00      	nop
 8002560:	e000e010 	.word	0xe000e010

08002564 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800256c:	6878      	ldr	r0, [r7, #4]
 800256e:	f7ff ff29 	bl	80023c4 <__NVIC_SetPriorityGrouping>
}
 8002572:	bf00      	nop
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800257a:	b580      	push	{r7, lr}
 800257c:	b086      	sub	sp, #24
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	60b9      	str	r1, [r7, #8]
 8002584:	607a      	str	r2, [r7, #4]
 8002586:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002588:	2300      	movs	r3, #0
 800258a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800258c:	f7ff ff3e 	bl	800240c <__NVIC_GetPriorityGrouping>
 8002590:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	68b9      	ldr	r1, [r7, #8]
 8002596:	6978      	ldr	r0, [r7, #20]
 8002598:	f7ff ff8e 	bl	80024b8 <NVIC_EncodePriority>
 800259c:	4602      	mov	r2, r0
 800259e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025a2:	4611      	mov	r1, r2
 80025a4:	4618      	mov	r0, r3
 80025a6:	f7ff ff5d 	bl	8002464 <__NVIC_SetPriority>
}
 80025aa:	bf00      	nop
 80025ac:	3718      	adds	r7, #24
 80025ae:	46bd      	mov	sp, r7
 80025b0:	bd80      	pop	{r7, pc}

080025b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025b2:	b580      	push	{r7, lr}
 80025b4:	b082      	sub	sp, #8
 80025b6:	af00      	add	r7, sp, #0
 80025b8:	4603      	mov	r3, r0
 80025ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7ff ff31 	bl	8002428 <__NVIC_EnableIRQ>
}
 80025c6:	bf00      	nop
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f7ff ffa2 	bl	8002520 <SysTick_Config>
 80025dc:	4603      	mov	r3, r0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d101      	bne.n	80025f8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e014      	b.n	8002622 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d105      	bne.n	800260e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002608:	6878      	ldr	r0, [r7, #4]
 800260a:	f7fe fb27 	bl	8000c5c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2200      	movs	r2, #0
 8002618:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2201      	movs	r2, #1
 800261e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002620:	2300      	movs	r3, #0
}
 8002622:	4618      	mov	r0, r3
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800262a:	b480      	push	{r7}
 800262c:	b087      	sub	sp, #28
 800262e:	af00      	add	r7, sp, #0
 8002630:	60f8      	str	r0, [r7, #12]
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	795b      	ldrb	r3, [r3, #5]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_DAC_ConfigChannel+0x18>
 800263e:	2302      	movs	r3, #2
 8002640:	e03c      	b.n	80026bc <HAL_DAC_ConfigChannel+0x92>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	2201      	movs	r2, #1
 8002646:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2202      	movs	r2, #2
 800264c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	f003 0310 	and.w	r3, r3, #16
 800265c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	43db      	mvns	r3, r3
 8002666:	697a      	ldr	r2, [r7, #20]
 8002668:	4013      	ands	r3, r2
 800266a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	4313      	orrs	r3, r2
 8002676:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	f003 0310 	and.w	r3, r3, #16
 800267e:	693a      	ldr	r2, [r7, #16]
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	4313      	orrs	r3, r2
 8002688:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	697a      	ldr	r2, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6819      	ldr	r1, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	f003 0310 	and.w	r3, r3, #16
 800269e:	22c0      	movs	r2, #192	; 0xc0
 80026a0:	fa02 f303 	lsl.w	r3, r2, r3
 80026a4:	43da      	mvns	r2, r3
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	400a      	ands	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2201      	movs	r2, #1
 80026b2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2200      	movs	r2, #0
 80026b8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	371c      	adds	r7, #28
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7ff fbd4 	bl	8001e80 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e099      	b.n	8002818 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2202      	movs	r2, #2
 80026e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f022 0201 	bic.w	r2, r2, #1
 8002702:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002704:	e00f      	b.n	8002726 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002706:	f7ff fbbb 	bl	8001e80 <HAL_GetTick>
 800270a:	4602      	mov	r2, r0
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	1ad3      	subs	r3, r2, r3
 8002710:	2b05      	cmp	r3, #5
 8002712:	d908      	bls.n	8002726 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	2220      	movs	r2, #32
 8002718:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2203      	movs	r2, #3
 800271e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e078      	b.n	8002818 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0301 	and.w	r3, r3, #1
 8002730:	2b00      	cmp	r3, #0
 8002732:	d1e8      	bne.n	8002706 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	4b38      	ldr	r3, [pc, #224]	; (8002820 <HAL_DMA_Init+0x158>)
 8002740:	4013      	ands	r3, r2
 8002742:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800275e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800276a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b04      	cmp	r3, #4
 800277e:	d107      	bne.n	8002790 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002788:	4313      	orrs	r3, r2
 800278a:	697a      	ldr	r2, [r7, #20]
 800278c:	4313      	orrs	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	f023 0307 	bic.w	r3, r3, #7
 80027a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ac:	697a      	ldr	r2, [r7, #20]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b6:	2b04      	cmp	r3, #4
 80027b8:	d117      	bne.n	80027ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00e      	beq.n	80027ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fa7b 	bl	8002cc8 <DMA_CheckFifoParam>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d008      	beq.n	80027ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027e6:	2301      	movs	r3, #1
 80027e8:	e016      	b.n	8002818 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	697a      	ldr	r2, [r7, #20]
 80027f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f000 fa32 	bl	8002c5c <DMA_CalcBaseAndBitshift>
 80027f8:	4603      	mov	r3, r0
 80027fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2201      	movs	r2, #1
 8002812:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002816:	2300      	movs	r3, #0
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}
 8002820:	f010803f 	.word	0xf010803f

08002824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002830:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002832:	f7ff fb25 	bl	8001e80 <HAL_GetTick>
 8002836:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d008      	beq.n	8002856 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2200      	movs	r2, #0
 800284e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e052      	b.n	80028fc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f022 0216 	bic.w	r2, r2, #22
 8002864:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695a      	ldr	r2, [r3, #20]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002874:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d103      	bne.n	8002886 <HAL_DMA_Abort+0x62>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002882:	2b00      	cmp	r3, #0
 8002884:	d007      	beq.n	8002896 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f022 0208 	bic.w	r2, r2, #8
 8002894:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f022 0201 	bic.w	r2, r2, #1
 80028a4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a6:	e013      	b.n	80028d0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a8:	f7ff faea 	bl	8001e80 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b05      	cmp	r3, #5
 80028b4:	d90c      	bls.n	80028d0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2220      	movs	r2, #32
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2203      	movs	r2, #3
 80028c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2200      	movs	r2, #0
 80028c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028cc:	2303      	movs	r3, #3
 80028ce:	e015      	b.n	80028fc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e4      	bne.n	80028a8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e2:	223f      	movs	r2, #63	; 0x3f
 80028e4:	409a      	lsls	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028fa:	2300      	movs	r3, #0
}
 80028fc:	4618      	mov	r0, r3
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b02      	cmp	r3, #2
 8002916:	d004      	beq.n	8002922 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2280      	movs	r2, #128	; 0x80
 800291c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800291e:	2301      	movs	r3, #1
 8002920:	e00c      	b.n	800293c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2205      	movs	r2, #5
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f022 0201 	bic.w	r2, r2, #1
 8002938:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002950:	2300      	movs	r3, #0
 8002952:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002954:	4b92      	ldr	r3, [pc, #584]	; (8002ba0 <HAL_DMA_IRQHandler+0x258>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a92      	ldr	r2, [pc, #584]	; (8002ba4 <HAL_DMA_IRQHandler+0x25c>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0a9b      	lsrs	r3, r3, #10
 8002960:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002966:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002972:	2208      	movs	r2, #8
 8002974:	409a      	lsls	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01a      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d013      	beq.n	80029b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0204 	bic.w	r2, r2, #4
 800299a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	2208      	movs	r2, #8
 80029a2:	409a      	lsls	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0201 	orr.w	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	2201      	movs	r2, #1
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d012      	beq.n	80029ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d00b      	beq.n	80029ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2201      	movs	r2, #1
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e2:	f043 0202 	orr.w	r2, r3, #2
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2204      	movs	r2, #4
 80029f0:	409a      	lsls	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d012      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0302 	and.w	r3, r3, #2
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00b      	beq.n	8002a20 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	2204      	movs	r2, #4
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a18:	f043 0204 	orr.w	r2, r3, #4
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a24:	2210      	movs	r2, #16
 8002a26:	409a      	lsls	r2, r3
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d043      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0308 	and.w	r3, r3, #8
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d03c      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a42:	2210      	movs	r2, #16
 8002a44:	409a      	lsls	r2, r3
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d108      	bne.n	8002a78 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d024      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	4798      	blx	r3
 8002a76:	e01f      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	4798      	blx	r3
 8002a88:	e016      	b.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d107      	bne.n	8002aa8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0208 	bic.w	r2, r2, #8
 8002aa6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d003      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	2220      	movs	r2, #32
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 808e 	beq.w	8002be6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0310 	and.w	r3, r3, #16
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	f000 8086 	beq.w	8002be6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ade:	2220      	movs	r2, #32
 8002ae0:	409a      	lsls	r2, r3
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002aec:	b2db      	uxtb	r3, r3
 8002aee:	2b05      	cmp	r3, #5
 8002af0:	d136      	bne.n	8002b60 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f022 0216 	bic.w	r2, r2, #22
 8002b00:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	695a      	ldr	r2, [r3, #20]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b10:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d103      	bne.n	8002b22 <HAL_DMA_IRQHandler+0x1da>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d007      	beq.n	8002b32 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f022 0208 	bic.w	r2, r2, #8
 8002b30:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	223f      	movs	r2, #63	; 0x3f
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d07d      	beq.n	8002c52 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	4798      	blx	r3
        }
        return;
 8002b5e:	e078      	b.n	8002c52 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01c      	beq.n	8002ba8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d108      	bne.n	8002b8e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d030      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	4798      	blx	r3
 8002b8c:	e02b      	b.n	8002be6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d027      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	4798      	blx	r3
 8002b9e:	e022      	b.n	8002be6 <HAL_DMA_IRQHandler+0x29e>
 8002ba0:	20000000 	.word	0x20000000
 8002ba4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10f      	bne.n	8002bd6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f022 0210 	bic.w	r2, r2, #16
 8002bc4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d003      	beq.n	8002be6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d032      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf2:	f003 0301 	and.w	r3, r3, #1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d022      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2205      	movs	r2, #5
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	3301      	adds	r3, #1
 8002c16:	60bb      	str	r3, [r7, #8]
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d307      	bcc.n	8002c2e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0301 	and.w	r3, r3, #1
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f2      	bne.n	8002c12 <HAL_DMA_IRQHandler+0x2ca>
 8002c2c:	e000      	b.n	8002c30 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c2e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2201      	movs	r2, #1
 8002c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	4798      	blx	r3
 8002c50:	e000      	b.n	8002c54 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002c52:	bf00      	nop
    }
  }
}
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop

08002c5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	b085      	sub	sp, #20
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	3b10      	subs	r3, #16
 8002c6c:	4a14      	ldr	r2, [pc, #80]	; (8002cc0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c72:	091b      	lsrs	r3, r3, #4
 8002c74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c76:	4a13      	ldr	r2, [pc, #76]	; (8002cc4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d909      	bls.n	8002c9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c92:	f023 0303 	bic.w	r3, r3, #3
 8002c96:	1d1a      	adds	r2, r3, #4
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c9c:	e007      	b.n	8002cae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ca6:	f023 0303 	bic.w	r3, r3, #3
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3714      	adds	r7, #20
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cbc:	4770      	bx	lr
 8002cbe:	bf00      	nop
 8002cc0:	aaaaaaab 	.word	0xaaaaaaab
 8002cc4:	08005ff4 	.word	0x08005ff4

08002cc8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cd8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	699b      	ldr	r3, [r3, #24]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d11f      	bne.n	8002d22 <DMA_CheckFifoParam+0x5a>
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d856      	bhi.n	8002d96 <DMA_CheckFifoParam+0xce>
 8002ce8:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <DMA_CheckFifoParam+0x28>)
 8002cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cee:	bf00      	nop
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d13 	.word	0x08002d13
 8002cf8:	08002d01 	.word	0x08002d01
 8002cfc:	08002d97 	.word	0x08002d97
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d046      	beq.n	8002d9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d10:	e043      	b.n	8002d9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d16:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d1a:	d140      	bne.n	8002d9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d20:	e03d      	b.n	8002d9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d2a:	d121      	bne.n	8002d70 <DMA_CheckFifoParam+0xa8>
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	2b03      	cmp	r3, #3
 8002d30:	d837      	bhi.n	8002da2 <DMA_CheckFifoParam+0xda>
 8002d32:	a201      	add	r2, pc, #4	; (adr r2, 8002d38 <DMA_CheckFifoParam+0x70>)
 8002d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d38:	08002d49 	.word	0x08002d49
 8002d3c:	08002d4f 	.word	0x08002d4f
 8002d40:	08002d49 	.word	0x08002d49
 8002d44:	08002d61 	.word	0x08002d61
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d4c:	e030      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d025      	beq.n	8002da6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5e:	e022      	b.n	8002da6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d64:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d68:	d11f      	bne.n	8002daa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d6e:	e01c      	b.n	8002daa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2b02      	cmp	r3, #2
 8002d74:	d903      	bls.n	8002d7e <DMA_CheckFifoParam+0xb6>
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d003      	beq.n	8002d84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d7c:	e018      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	73fb      	strb	r3, [r7, #15]
      break;
 8002d82:	e015      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d00e      	beq.n	8002dae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
      break;
 8002d94:	e00b      	b.n	8002dae <DMA_CheckFifoParam+0xe6>
      break;
 8002d96:	bf00      	nop
 8002d98:	e00a      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e008      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9e:	bf00      	nop
 8002da0:	e006      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
 8002da4:	e004      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e002      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;   
 8002daa:	bf00      	nop
 8002dac:	e000      	b.n	8002db0 <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
    }
  } 
  
  return status; 
 8002db0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr
 8002dbe:	bf00      	nop

08002dc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b089      	sub	sp, #36	; 0x24
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
 8002dda:	e177      	b.n	80030cc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ddc:	2201      	movs	r2, #1
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	4013      	ands	r3, r2
 8002dee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	429a      	cmp	r2, r3
 8002df6:	f040 8166 	bne.w	80030c6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d005      	beq.n	8002e12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d130      	bne.n	8002e74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	2203      	movs	r2, #3
 8002e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e22:	43db      	mvns	r3, r3
 8002e24:	69ba      	ldr	r2, [r7, #24]
 8002e26:	4013      	ands	r3, r2
 8002e28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68da      	ldr	r2, [r3, #12]
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	fa02 f303 	lsl.w	r3, r2, r3
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	69ba      	ldr	r2, [r7, #24]
 8002e40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	685b      	ldr	r3, [r3, #4]
 8002e46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e48:	2201      	movs	r2, #1
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e50:	43db      	mvns	r3, r3
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4013      	ands	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	091b      	lsrs	r3, r3, #4
 8002e5e:	f003 0201 	and.w	r2, r3, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	69ba      	ldr	r2, [r7, #24]
 8002e72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	f003 0303 	and.w	r3, r3, #3
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d017      	beq.n	8002eb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	005b      	lsls	r3, r3, #1
 8002e8a:	2203      	movs	r2, #3
 8002e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f003 0303 	and.w	r3, r3, #3
 8002eb8:	2b02      	cmp	r3, #2
 8002eba:	d123      	bne.n	8002f04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	08da      	lsrs	r2, r3, #3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	3208      	adds	r2, #8
 8002ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	220f      	movs	r2, #15
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	43db      	mvns	r3, r3
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	4013      	ands	r3, r2
 8002ede:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	691a      	ldr	r2, [r3, #16]
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ef6:	69fb      	ldr	r3, [r7, #28]
 8002ef8:	08da      	lsrs	r2, r3, #3
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	3208      	adds	r2, #8
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f003 0203 	and.w	r2, r3, #3
 8002f24:	69fb      	ldr	r3, [r7, #28]
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	f000 80c0 	beq.w	80030c6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f46:	2300      	movs	r3, #0
 8002f48:	60fb      	str	r3, [r7, #12]
 8002f4a:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <HAL_GPIO_Init+0x324>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	4a65      	ldr	r2, [pc, #404]	; (80030e4 <HAL_GPIO_Init+0x324>)
 8002f50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f54:	6453      	str	r3, [r2, #68]	; 0x44
 8002f56:	4b63      	ldr	r3, [pc, #396]	; (80030e4 <HAL_GPIO_Init+0x324>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f5e:	60fb      	str	r3, [r7, #12]
 8002f60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f62:	4a61      	ldr	r2, [pc, #388]	; (80030e8 <HAL_GPIO_Init+0x328>)
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	089b      	lsrs	r3, r3, #2
 8002f68:	3302      	adds	r3, #2
 8002f6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	f003 0303 	and.w	r3, r3, #3
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	220f      	movs	r2, #15
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	; (80030ec <HAL_GPIO_Init+0x32c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d037      	beq.n	8002ffe <HAL_GPIO_Init+0x23e>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a57      	ldr	r2, [pc, #348]	; (80030f0 <HAL_GPIO_Init+0x330>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d031      	beq.n	8002ffa <HAL_GPIO_Init+0x23a>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a56      	ldr	r2, [pc, #344]	; (80030f4 <HAL_GPIO_Init+0x334>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02b      	beq.n	8002ff6 <HAL_GPIO_Init+0x236>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a55      	ldr	r2, [pc, #340]	; (80030f8 <HAL_GPIO_Init+0x338>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d025      	beq.n	8002ff2 <HAL_GPIO_Init+0x232>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a54      	ldr	r2, [pc, #336]	; (80030fc <HAL_GPIO_Init+0x33c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <HAL_GPIO_Init+0x22e>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a53      	ldr	r2, [pc, #332]	; (8003100 <HAL_GPIO_Init+0x340>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d019      	beq.n	8002fea <HAL_GPIO_Init+0x22a>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	; (8003104 <HAL_GPIO_Init+0x344>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d013      	beq.n	8002fe6 <HAL_GPIO_Init+0x226>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a51      	ldr	r2, [pc, #324]	; (8003108 <HAL_GPIO_Init+0x348>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00d      	beq.n	8002fe2 <HAL_GPIO_Init+0x222>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a50      	ldr	r2, [pc, #320]	; (800310c <HAL_GPIO_Init+0x34c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d007      	beq.n	8002fde <HAL_GPIO_Init+0x21e>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a4f      	ldr	r2, [pc, #316]	; (8003110 <HAL_GPIO_Init+0x350>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d101      	bne.n	8002fda <HAL_GPIO_Init+0x21a>
 8002fd6:	2309      	movs	r3, #9
 8002fd8:	e012      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fda:	230a      	movs	r3, #10
 8002fdc:	e010      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fde:	2308      	movs	r3, #8
 8002fe0:	e00e      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fe2:	2307      	movs	r3, #7
 8002fe4:	e00c      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fe6:	2306      	movs	r3, #6
 8002fe8:	e00a      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fea:	2305      	movs	r3, #5
 8002fec:	e008      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002fee:	2304      	movs	r3, #4
 8002ff0:	e006      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e004      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	e002      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	e000      	b.n	8003000 <HAL_GPIO_Init+0x240>
 8002ffe:	2300      	movs	r3, #0
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	f002 0203 	and.w	r2, r2, #3
 8003006:	0092      	lsls	r2, r2, #2
 8003008:	4093      	lsls	r3, r2
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003010:	4935      	ldr	r1, [pc, #212]	; (80030e8 <HAL_GPIO_Init+0x328>)
 8003012:	69fb      	ldr	r3, [r7, #28]
 8003014:	089b      	lsrs	r3, r3, #2
 8003016:	3302      	adds	r3, #2
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800301e:	4b3d      	ldr	r3, [pc, #244]	; (8003114 <HAL_GPIO_Init+0x354>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003024:	693b      	ldr	r3, [r7, #16]
 8003026:	43db      	mvns	r3, r3
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	4013      	ands	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	4313      	orrs	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003042:	4a34      	ldr	r2, [pc, #208]	; (8003114 <HAL_GPIO_Init+0x354>)
 8003044:	69bb      	ldr	r3, [r7, #24]
 8003046:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003048:	4b32      	ldr	r3, [pc, #200]	; (8003114 <HAL_GPIO_Init+0x354>)
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d003      	beq.n	800306c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800306c:	4a29      	ldr	r2, [pc, #164]	; (8003114 <HAL_GPIO_Init+0x354>)
 800306e:	69bb      	ldr	r3, [r7, #24]
 8003070:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003072:	4b28      	ldr	r3, [pc, #160]	; (8003114 <HAL_GPIO_Init+0x354>)
 8003074:	689b      	ldr	r3, [r3, #8]
 8003076:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	43db      	mvns	r3, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4013      	ands	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d003      	beq.n	8003096 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	4313      	orrs	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003096:	4a1f      	ldr	r2, [pc, #124]	; (8003114 <HAL_GPIO_Init+0x354>)
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800309c:	4b1d      	ldr	r3, [pc, #116]	; (8003114 <HAL_GPIO_Init+0x354>)
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	43db      	mvns	r3, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4013      	ands	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d003      	beq.n	80030c0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	4313      	orrs	r3, r2
 80030be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c0:	4a14      	ldr	r2, [pc, #80]	; (8003114 <HAL_GPIO_Init+0x354>)
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	3301      	adds	r3, #1
 80030ca:	61fb      	str	r3, [r7, #28]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	2b0f      	cmp	r3, #15
 80030d0:	f67f ae84 	bls.w	8002ddc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop
 80030d8:	3724      	adds	r7, #36	; 0x24
 80030da:	46bd      	mov	sp, r7
 80030dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	40023800 	.word	0x40023800
 80030e8:	40013800 	.word	0x40013800
 80030ec:	40020000 	.word	0x40020000
 80030f0:	40020400 	.word	0x40020400
 80030f4:	40020800 	.word	0x40020800
 80030f8:	40020c00 	.word	0x40020c00
 80030fc:	40021000 	.word	0x40021000
 8003100:	40021400 	.word	0x40021400
 8003104:	40021800 	.word	0x40021800
 8003108:	40021c00 	.word	0x40021c00
 800310c:	40022000 	.word	0x40022000
 8003110:	40022400 	.word	0x40022400
 8003114:	40013c00 	.word	0x40013c00

08003118 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	460b      	mov	r3, r1
 8003122:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	691a      	ldr	r2, [r3, #16]
 8003128:	887b      	ldrh	r3, [r7, #2]
 800312a:	4013      	ands	r3, r2
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
 8003134:	e001      	b.n	800313a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	4603      	mov	r3, r0
 8003184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003186:	4b08      	ldr	r3, [pc, #32]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003188:	695a      	ldr	r2, [r3, #20]
 800318a:	88fb      	ldrh	r3, [r7, #6]
 800318c:	4013      	ands	r3, r2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003192:	4a05      	ldr	r2, [pc, #20]	; (80031a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003194:	88fb      	ldrh	r3, [r7, #6]
 8003196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003198:	88fb      	ldrh	r3, [r7, #6]
 800319a:	4618      	mov	r0, r3
 800319c:	f000 f806 	bl	80031ac <HAL_GPIO_EXTI_Callback>
  }
}
 80031a0:	bf00      	nop
 80031a2:	3708      	adds	r7, #8
 80031a4:	46bd      	mov	sp, r7
 80031a6:	bd80      	pop	{r7, pc}
 80031a8:	40013c00 	.word	0x40013c00

080031ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	4603      	mov	r3, r0
 80031b4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031b6:	bf00      	nop
 80031b8:	370c      	adds	r7, #12
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d101      	bne.n	80031d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e12b      	b.n	800342e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d106      	bne.n	80031f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f7fd fef6 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2224      	movs	r2, #36	; 0x24
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003216:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003226:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003228:	f000 fe28 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 800322c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4a81      	ldr	r2, [pc, #516]	; (8003438 <HAL_I2C_Init+0x274>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d807      	bhi.n	8003248 <HAL_I2C_Init+0x84>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a80      	ldr	r2, [pc, #512]	; (800343c <HAL_I2C_Init+0x278>)
 800323c:	4293      	cmp	r3, r2
 800323e:	bf94      	ite	ls
 8003240:	2301      	movls	r3, #1
 8003242:	2300      	movhi	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e006      	b.n	8003256 <HAL_I2C_Init+0x92>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4a7d      	ldr	r2, [pc, #500]	; (8003440 <HAL_I2C_Init+0x27c>)
 800324c:	4293      	cmp	r3, r2
 800324e:	bf94      	ite	ls
 8003250:	2301      	movls	r3, #1
 8003252:	2300      	movhi	r3, #0
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b00      	cmp	r3, #0
 8003258:	d001      	beq.n	800325e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e0e7      	b.n	800342e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	4a78      	ldr	r2, [pc, #480]	; (8003444 <HAL_I2C_Init+0x280>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	0c9b      	lsrs	r3, r3, #18
 8003268:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	68ba      	ldr	r2, [r7, #8]
 800327a:	430a      	orrs	r2, r1
 800327c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	6a1b      	ldr	r3, [r3, #32]
 8003284:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_I2C_Init+0x274>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d802      	bhi.n	8003298 <HAL_I2C_Init+0xd4>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	3301      	adds	r3, #1
 8003296:	e009      	b.n	80032ac <HAL_I2C_Init+0xe8>
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800329e:	fb02 f303 	mul.w	r3, r2, r3
 80032a2:	4a69      	ldr	r2, [pc, #420]	; (8003448 <HAL_I2C_Init+0x284>)
 80032a4:	fba2 2303 	umull	r2, r3, r2, r3
 80032a8:	099b      	lsrs	r3, r3, #6
 80032aa:	3301      	adds	r3, #1
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	6812      	ldr	r2, [r2, #0]
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	495c      	ldr	r1, [pc, #368]	; (8003438 <HAL_I2C_Init+0x274>)
 80032c8:	428b      	cmp	r3, r1
 80032ca:	d819      	bhi.n	8003300 <HAL_I2C_Init+0x13c>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e59      	subs	r1, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80032da:	1c59      	adds	r1, r3, #1
 80032dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032e0:	400b      	ands	r3, r1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00a      	beq.n	80032fc <HAL_I2C_Init+0x138>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	1e59      	subs	r1, r3, #1
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f4:	3301      	adds	r3, #1
 80032f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032fa:	e051      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 80032fc:	2304      	movs	r3, #4
 80032fe:	e04f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_I2C_Init+0x168>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	1e58      	subs	r0, r3, #1
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	440b      	add	r3, r1
 8003316:	fbb0 f3f3 	udiv	r3, r0, r3
 800331a:	3301      	adds	r3, #1
 800331c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003320:	2b00      	cmp	r3, #0
 8003322:	bf0c      	ite	eq
 8003324:	2301      	moveq	r3, #1
 8003326:	2300      	movne	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e012      	b.n	8003352 <HAL_I2C_Init+0x18e>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	1e58      	subs	r0, r3, #1
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6859      	ldr	r1, [r3, #4]
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	0099      	lsls	r1, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003342:	3301      	adds	r3, #1
 8003344:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003348:	2b00      	cmp	r3, #0
 800334a:	bf0c      	ite	eq
 800334c:	2301      	moveq	r3, #1
 800334e:	2300      	movne	r3, #0
 8003350:	b2db      	uxtb	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_I2C_Init+0x196>
 8003356:	2301      	movs	r3, #1
 8003358:	e022      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10e      	bne.n	8003380 <HAL_I2C_Init+0x1bc>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	1e58      	subs	r0, r3, #1
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6859      	ldr	r1, [r3, #4]
 800336a:	460b      	mov	r3, r1
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	440b      	add	r3, r1
 8003370:	fbb0 f3f3 	udiv	r3, r0, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	e00f      	b.n	80033a0 <HAL_I2C_Init+0x1dc>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	1e58      	subs	r0, r3, #1
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6859      	ldr	r1, [r3, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	440b      	add	r3, r1
 800338e:	0099      	lsls	r1, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	fbb0 f3f3 	udiv	r3, r0, r3
 8003396:	3301      	adds	r3, #1
 8003398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800339c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033a0:	6879      	ldr	r1, [r7, #4]
 80033a2:	6809      	ldr	r1, [r1, #0]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80033ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80033d2:	687a      	ldr	r2, [r7, #4]
 80033d4:	6911      	ldr	r1, [r2, #16]
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	68d2      	ldr	r2, [r2, #12]
 80033da:	4311      	orrs	r1, r2
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	6812      	ldr	r2, [r2, #0]
 80033e0:	430b      	orrs	r3, r1
 80033e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68db      	ldr	r3, [r3, #12]
 80033ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	431a      	orrs	r2, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f042 0201 	orr.w	r2, r2, #1
 800340e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	3710      	adds	r7, #16
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	000186a0 	.word	0x000186a0
 800343c:	001e847f 	.word	0x001e847f
 8003440:	003d08ff 	.word	0x003d08ff
 8003444:	431bde83 	.word	0x431bde83
 8003448:	10624dd3 	.word	0x10624dd3

0800344c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b20      	cmp	r3, #32
 8003460:	d129      	bne.n	80034b6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2224      	movs	r2, #36	; 0x24
 8003466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 0201 	bic.w	r2, r2, #1
 8003478:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f022 0210 	bic.w	r2, r2, #16
 8003488:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	430a      	orrs	r2, r1
 8003498:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 0201 	orr.w	r2, r2, #1
 80034a8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2220      	movs	r2, #32
 80034ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	e000      	b.n	80034b8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80034b6:	2302      	movs	r3, #2
  }
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	370c      	adds	r7, #12
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
 80034cc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80034ce:	2300      	movs	r3, #0
 80034d0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b20      	cmp	r3, #32
 80034dc:	d12a      	bne.n	8003534 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2224      	movs	r2, #36	; 0x24
 80034e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 0201 	bic.w	r2, r2, #1
 80034f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80034fe:	89fb      	ldrh	r3, [r7, #14]
 8003500:	f023 030f 	bic.w	r3, r3, #15
 8003504:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	b29a      	uxth	r2, r3
 800350a:	89fb      	ldrh	r3, [r7, #14]
 800350c:	4313      	orrs	r3, r2
 800350e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	89fa      	ldrh	r2, [r7, #14]
 8003516:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003530:	2300      	movs	r3, #0
 8003532:	e000      	b.n	8003536 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003534:	2302      	movs	r3, #2
  }
}
 8003536:	4618      	mov	r0, r3
 8003538:	3714      	adds	r7, #20
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr
	...

08003544 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b082      	sub	sp, #8
 8003548:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800354e:	2300      	movs	r3, #0
 8003550:	603b      	str	r3, [r7, #0]
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	4a1f      	ldr	r2, [pc, #124]	; (80035d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003558:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355c:	6413      	str	r3, [r2, #64]	; 0x40
 800355e:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003562:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003566:	603b      	str	r3, [r7, #0]
 8003568:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800356a:	4b1b      	ldr	r3, [pc, #108]	; (80035d8 <HAL_PWREx_EnableOverDrive+0x94>)
 800356c:	2201      	movs	r2, #1
 800356e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003570:	f7fe fc86 	bl	8001e80 <HAL_GetTick>
 8003574:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003576:	e009      	b.n	800358c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003578:	f7fe fc82 	bl	8001e80 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003586:	d901      	bls.n	800358c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e01f      	b.n	80035cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800358c:	4b13      	ldr	r3, [pc, #76]	; (80035dc <HAL_PWREx_EnableOverDrive+0x98>)
 800358e:	685b      	ldr	r3, [r3, #4]
 8003590:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003598:	d1ee      	bne.n	8003578 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800359a:	4b11      	ldr	r3, [pc, #68]	; (80035e0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800359c:	2201      	movs	r2, #1
 800359e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035a0:	f7fe fc6e 	bl	8001e80 <HAL_GetTick>
 80035a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035a6:	e009      	b.n	80035bc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035a8:	f7fe fc6a 	bl	8001e80 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80035b6:	d901      	bls.n	80035bc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e007      	b.n	80035cc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80035bc:	4b07      	ldr	r3, [pc, #28]	; (80035dc <HAL_PWREx_EnableOverDrive+0x98>)
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80035c8:	d1ee      	bne.n	80035a8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	4618      	mov	r0, r3
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	420e0040 	.word	0x420e0040
 80035dc:	40007000 	.word	0x40007000
 80035e0:	420e0044 	.word	0x420e0044

080035e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b086      	sub	sp, #24
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e264      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d075      	beq.n	80036ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	4ba3      	ldr	r3, [pc, #652]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	f003 030c 	and.w	r3, r3, #12
 800360a:	2b04      	cmp	r3, #4
 800360c:	d00c      	beq.n	8003628 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360e:	4ba0      	ldr	r3, [pc, #640]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003616:	2b08      	cmp	r3, #8
 8003618:	d112      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800361a:	4b9d      	ldr	r3, [pc, #628]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003622:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003626:	d10b      	bne.n	8003640 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003628:	4b99      	ldr	r3, [pc, #612]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d05b      	beq.n	80036ec <HAL_RCC_OscConfig+0x108>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d157      	bne.n	80036ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e23f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003648:	d106      	bne.n	8003658 <HAL_RCC_OscConfig+0x74>
 800364a:	4b91      	ldr	r3, [pc, #580]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a90      	ldr	r2, [pc, #576]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e01d      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003660:	d10c      	bne.n	800367c <HAL_RCC_OscConfig+0x98>
 8003662:	4b8b      	ldr	r3, [pc, #556]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a8a      	ldr	r2, [pc, #552]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003668:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800366c:	6013      	str	r3, [r2, #0]
 800366e:	4b88      	ldr	r3, [pc, #544]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a87      	ldr	r2, [pc, #540]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003678:	6013      	str	r3, [r2, #0]
 800367a:	e00b      	b.n	8003694 <HAL_RCC_OscConfig+0xb0>
 800367c:	4b84      	ldr	r3, [pc, #528]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a83      	ldr	r2, [pc, #524]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003682:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003686:	6013      	str	r3, [r2, #0]
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a80      	ldr	r2, [pc, #512]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 800368e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d013      	beq.n	80036c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7fe fbf0 	bl	8001e80 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a4:	f7fe fbec 	bl	8001e80 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	; 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e204      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b76      	ldr	r3, [pc, #472]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d0f0      	beq.n	80036a4 <HAL_RCC_OscConfig+0xc0>
 80036c2:	e014      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c4:	f7fe fbdc 	bl	8001e80 <HAL_GetTick>
 80036c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	e008      	b.n	80036de <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036cc:	f7fe fbd8 	bl	8001e80 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	2b64      	cmp	r3, #100	; 0x64
 80036d8:	d901      	bls.n	80036de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e1f0      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036de:	4b6c      	ldr	r3, [pc, #432]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f0      	bne.n	80036cc <HAL_RCC_OscConfig+0xe8>
 80036ea:	e000      	b.n	80036ee <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f003 0302 	and.w	r3, r3, #2
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	4b65      	ldr	r3, [pc, #404]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	f003 030c 	and.w	r3, r3, #12
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00b      	beq.n	800371e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003706:	4b62      	ldr	r3, [pc, #392]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370e:	2b08      	cmp	r3, #8
 8003710:	d11c      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003712:	4b5f      	ldr	r3, [pc, #380]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800371a:	2b00      	cmp	r3, #0
 800371c:	d116      	bne.n	800374c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371e:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 0302 	and.w	r3, r3, #2
 8003726:	2b00      	cmp	r3, #0
 8003728:	d005      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d001      	beq.n	8003736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e1c4      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003736:	4b56      	ldr	r3, [pc, #344]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	4952      	ldr	r1, [pc, #328]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003746:	4313      	orrs	r3, r2
 8003748:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800374a:	e03a      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d020      	beq.n	8003796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003754:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <HAL_RCC_OscConfig+0x2b0>)
 8003756:	2201      	movs	r2, #1
 8003758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800375a:	f7fe fb91 	bl	8001e80 <HAL_GetTick>
 800375e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	e008      	b.n	8003774 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003762:	f7fe fb8d 	bl	8001e80 <HAL_GetTick>
 8003766:	4602      	mov	r2, r0
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	1ad3      	subs	r3, r2, r3
 800376c:	2b02      	cmp	r3, #2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e1a5      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003774:	4b46      	ldr	r3, [pc, #280]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d0f0      	beq.n	8003762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003780:	4b43      	ldr	r3, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	691b      	ldr	r3, [r3, #16]
 800378c:	00db      	lsls	r3, r3, #3
 800378e:	4940      	ldr	r1, [pc, #256]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003790:	4313      	orrs	r3, r2
 8003792:	600b      	str	r3, [r1, #0]
 8003794:	e015      	b.n	80037c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003796:	4b3f      	ldr	r3, [pc, #252]	; (8003894 <HAL_RCC_OscConfig+0x2b0>)
 8003798:	2200      	movs	r2, #0
 800379a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800379c:	f7fe fb70 	bl	8001e80 <HAL_GetTick>
 80037a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	e008      	b.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a4:	f7fe fb6c 	bl	8001e80 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d901      	bls.n	80037b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037b2:	2303      	movs	r3, #3
 80037b4:	e184      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b6:	4b36      	ldr	r3, [pc, #216]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0302 	and.w	r3, r3, #2
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1f0      	bne.n	80037a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0308 	and.w	r3, r3, #8
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d030      	beq.n	8003830 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	695b      	ldr	r3, [r3, #20]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d016      	beq.n	8003804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	4b30      	ldr	r3, [pc, #192]	; (8003898 <HAL_RCC_OscConfig+0x2b4>)
 80037d8:	2201      	movs	r2, #1
 80037da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037dc:	f7fe fb50 	bl	8001e80 <HAL_GetTick>
 80037e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	e008      	b.n	80037f6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e4:	f7fe fb4c 	bl	8001e80 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d901      	bls.n	80037f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e164      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f6:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 80037f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037fa:	f003 0302 	and.w	r3, r3, #2
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d0f0      	beq.n	80037e4 <HAL_RCC_OscConfig+0x200>
 8003802:	e015      	b.n	8003830 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x2b4>)
 8003806:	2200      	movs	r2, #0
 8003808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800380a:	f7fe fb39 	bl	8001e80 <HAL_GetTick>
 800380e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003810:	e008      	b.n	8003824 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003812:	f7fe fb35 	bl	8001e80 <HAL_GetTick>
 8003816:	4602      	mov	r2, r0
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	1ad3      	subs	r3, r2, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d901      	bls.n	8003824 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e14d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003826:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003828:	f003 0302 	and.w	r3, r3, #2
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1f0      	bne.n	8003812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0304 	and.w	r3, r3, #4
 8003838:	2b00      	cmp	r3, #0
 800383a:	f000 80a0 	beq.w	800397e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800383e:	2300      	movs	r3, #0
 8003840:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003842:	4b13      	ldr	r3, [pc, #76]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d10f      	bne.n	800386e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
 8003852:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003856:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003858:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800385c:	6413      	str	r3, [r2, #64]	; 0x40
 800385e:	4b0c      	ldr	r3, [pc, #48]	; (8003890 <HAL_RCC_OscConfig+0x2ac>)
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800386e:	4b0b      	ldr	r3, [pc, #44]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003876:	2b00      	cmp	r3, #0
 8003878:	d121      	bne.n	80038be <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387a:	4b08      	ldr	r3, [pc, #32]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a07      	ldr	r2, [pc, #28]	; (800389c <HAL_RCC_OscConfig+0x2b8>)
 8003880:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003884:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003886:	f7fe fafb 	bl	8001e80 <HAL_GetTick>
 800388a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388c:	e011      	b.n	80038b2 <HAL_RCC_OscConfig+0x2ce>
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	42470000 	.word	0x42470000
 8003898:	42470e80 	.word	0x42470e80
 800389c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038a0:	f7fe faee 	bl	8001e80 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d901      	bls.n	80038b2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	e106      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b2:	4b85      	ldr	r3, [pc, #532]	; (8003ac8 <HAL_RCC_OscConfig+0x4e4>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d0f0      	beq.n	80038a0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d106      	bne.n	80038d4 <HAL_RCC_OscConfig+0x2f0>
 80038c6:	4b81      	ldr	r3, [pc, #516]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ca:	4a80      	ldr	r2, [pc, #512]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038cc:	f043 0301 	orr.w	r3, r3, #1
 80038d0:	6713      	str	r3, [r2, #112]	; 0x70
 80038d2:	e01c      	b.n	800390e <HAL_RCC_OscConfig+0x32a>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	2b05      	cmp	r3, #5
 80038da:	d10c      	bne.n	80038f6 <HAL_RCC_OscConfig+0x312>
 80038dc:	4b7b      	ldr	r3, [pc, #492]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a7a      	ldr	r2, [pc, #488]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b78      	ldr	r3, [pc, #480]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a77      	ldr	r2, [pc, #476]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038ee:	f043 0301 	orr.w	r3, r3, #1
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
 80038f4:	e00b      	b.n	800390e <HAL_RCC_OscConfig+0x32a>
 80038f6:	4b75      	ldr	r3, [pc, #468]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fa:	4a74      	ldr	r2, [pc, #464]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80038fc:	f023 0301 	bic.w	r3, r3, #1
 8003900:	6713      	str	r3, [r2, #112]	; 0x70
 8003902:	4b72      	ldr	r3, [pc, #456]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003906:	4a71      	ldr	r2, [pc, #452]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003908:	f023 0304 	bic.w	r3, r3, #4
 800390c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d015      	beq.n	8003942 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003916:	f7fe fab3 	bl	8001e80 <HAL_GetTick>
 800391a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391c:	e00a      	b.n	8003934 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391e:	f7fe faaf 	bl	8001e80 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	f241 3288 	movw	r2, #5000	; 0x1388
 800392c:	4293      	cmp	r3, r2
 800392e:	d901      	bls.n	8003934 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003930:	2303      	movs	r3, #3
 8003932:	e0c5      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003934:	4b65      	ldr	r3, [pc, #404]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003936:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003938:	f003 0302 	and.w	r3, r3, #2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d0ee      	beq.n	800391e <HAL_RCC_OscConfig+0x33a>
 8003940:	e014      	b.n	800396c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003942:	f7fe fa9d 	bl	8001e80 <HAL_GetTick>
 8003946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003948:	e00a      	b.n	8003960 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800394a:	f7fe fa99 	bl	8001e80 <HAL_GetTick>
 800394e:	4602      	mov	r2, r0
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	1ad3      	subs	r3, r2, r3
 8003954:	f241 3288 	movw	r2, #5000	; 0x1388
 8003958:	4293      	cmp	r3, r2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e0af      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003960:	4b5a      	ldr	r3, [pc, #360]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003962:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003964:	f003 0302 	and.w	r3, r3, #2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d1ee      	bne.n	800394a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800396c:	7dfb      	ldrb	r3, [r7, #23]
 800396e:	2b01      	cmp	r3, #1
 8003970:	d105      	bne.n	800397e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003972:	4b56      	ldr	r3, [pc, #344]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	4a55      	ldr	r2, [pc, #340]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003978:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800397c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	f000 809b 	beq.w	8003abe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003988:	4b50      	ldr	r3, [pc, #320]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 030c 	and.w	r3, r3, #12
 8003990:	2b08      	cmp	r3, #8
 8003992:	d05c      	beq.n	8003a4e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	699b      	ldr	r3, [r3, #24]
 8003998:	2b02      	cmp	r3, #2
 800399a:	d141      	bne.n	8003a20 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800399c:	4b4c      	ldr	r3, [pc, #304]	; (8003ad0 <HAL_RCC_OscConfig+0x4ec>)
 800399e:	2200      	movs	r2, #0
 80039a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039a2:	f7fe fa6d 	bl	8001e80 <HAL_GetTick>
 80039a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a8:	e008      	b.n	80039bc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039aa:	f7fe fa69 	bl	8001e80 <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	2b02      	cmp	r3, #2
 80039b6:	d901      	bls.n	80039bc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e081      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039bc:	4b43      	ldr	r3, [pc, #268]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1f0      	bne.n	80039aa <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	69da      	ldr	r2, [r3, #28]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a1b      	ldr	r3, [r3, #32]
 80039d0:	431a      	orrs	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	019b      	lsls	r3, r3, #6
 80039d8:	431a      	orrs	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039de:	085b      	lsrs	r3, r3, #1
 80039e0:	3b01      	subs	r3, #1
 80039e2:	041b      	lsls	r3, r3, #16
 80039e4:	431a      	orrs	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	061b      	lsls	r3, r3, #24
 80039ec:	4937      	ldr	r1, [pc, #220]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <HAL_RCC_OscConfig+0x4ec>)
 80039f4:	2201      	movs	r2, #1
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7fe fa42 	bl	8001e80 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7fe fa3e 	bl	8001e80 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e056      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a12:	4b2e      	ldr	r3, [pc, #184]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d0f0      	beq.n	8003a00 <HAL_RCC_OscConfig+0x41c>
 8003a1e:	e04e      	b.n	8003abe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a20:	4b2b      	ldr	r3, [pc, #172]	; (8003ad0 <HAL_RCC_OscConfig+0x4ec>)
 8003a22:	2200      	movs	r2, #0
 8003a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a26:	f7fe fa2b 	bl	8001e80 <HAL_GetTick>
 8003a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a2c:	e008      	b.n	8003a40 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a2e:	f7fe fa27 	bl	8001e80 <HAL_GetTick>
 8003a32:	4602      	mov	r2, r0
 8003a34:	693b      	ldr	r3, [r7, #16]
 8003a36:	1ad3      	subs	r3, r2, r3
 8003a38:	2b02      	cmp	r3, #2
 8003a3a:	d901      	bls.n	8003a40 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e03f      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a40:	4b22      	ldr	r3, [pc, #136]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d1f0      	bne.n	8003a2e <HAL_RCC_OscConfig+0x44a>
 8003a4c:	e037      	b.n	8003abe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	699b      	ldr	r3, [r3, #24]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003a56:	2301      	movs	r3, #1
 8003a58:	e032      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a5a:	4b1c      	ldr	r3, [pc, #112]	; (8003acc <HAL_RCC_OscConfig+0x4e8>)
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d028      	beq.n	8003aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d121      	bne.n	8003aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a80:	429a      	cmp	r2, r3
 8003a82:	d11a      	bne.n	8003aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a84:	68fa      	ldr	r2, [r7, #12]
 8003a86:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a90:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d111      	bne.n	8003aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	3b01      	subs	r3, #1
 8003aa4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d001      	beq.n	8003abe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e000      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003abe:	2300      	movs	r3, #0
}
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}
 8003ac8:	40007000 	.word	0x40007000
 8003acc:	40023800 	.word	0x40023800
 8003ad0:	42470060 	.word	0x42470060

08003ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d101      	bne.n	8003ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0cc      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae8:	4b68      	ldr	r3, [pc, #416]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 030f 	and.w	r3, r3, #15
 8003af0:	683a      	ldr	r2, [r7, #0]
 8003af2:	429a      	cmp	r2, r3
 8003af4:	d90c      	bls.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af6:	4b65      	ldr	r3, [pc, #404]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003af8:	683a      	ldr	r2, [r7, #0]
 8003afa:	b2d2      	uxtb	r2, r2
 8003afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afe:	4b63      	ldr	r3, [pc, #396]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d001      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b8      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d020      	beq.n	8003b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d005      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b28:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4a58      	ldr	r2, [pc, #352]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0308 	and.w	r3, r3, #8
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d005      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b40:	4b53      	ldr	r3, [pc, #332]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	4a52      	ldr	r2, [pc, #328]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b4c:	4b50      	ldr	r3, [pc, #320]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	494d      	ldr	r1, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d044      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d107      	bne.n	8003b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b72:	4b47      	ldr	r3, [pc, #284]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d119      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7e:	2301      	movs	r3, #1
 8003b80:	e07f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	2b02      	cmp	r3, #2
 8003b88:	d003      	beq.n	8003b92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d107      	bne.n	8003ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b92:	4b3f      	ldr	r3, [pc, #252]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e06f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ba2:	4b3b      	ldr	r3, [pc, #236]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d101      	bne.n	8003bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e067      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bb2:	4b37      	ldr	r3, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0203 	bic.w	r2, r3, #3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	4934      	ldr	r1, [pc, #208]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe f95c 	bl	8001e80 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bca:	e00a      	b.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bcc:	f7fe f958 	bl	8001e80 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d901      	bls.n	8003be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bde:	2303      	movs	r3, #3
 8003be0:	e04f      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003be2:	4b2b      	ldr	r3, [pc, #172]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	f003 020c 	and.w	r2, r3, #12
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d1eb      	bne.n	8003bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 030f 	and.w	r3, r3, #15
 8003bfc:	683a      	ldr	r2, [r7, #0]
 8003bfe:	429a      	cmp	r2, r3
 8003c00:	d20c      	bcs.n	8003c1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c02:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c04:	683a      	ldr	r2, [r7, #0]
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c0a:	4b20      	ldr	r3, [pc, #128]	; (8003c8c <HAL_RCC_ClockConfig+0x1b8>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 030f 	and.w	r3, r3, #15
 8003c12:	683a      	ldr	r2, [r7, #0]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d001      	beq.n	8003c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c18:	2301      	movs	r3, #1
 8003c1a:	e032      	b.n	8003c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f003 0304 	and.w	r3, r3, #4
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d008      	beq.n	8003c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c28:	4b19      	ldr	r3, [pc, #100]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	4916      	ldr	r1, [pc, #88]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c36:	4313      	orrs	r3, r2
 8003c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d009      	beq.n	8003c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c46:	4b12      	ldr	r3, [pc, #72]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	691b      	ldr	r3, [r3, #16]
 8003c52:	00db      	lsls	r3, r3, #3
 8003c54:	490e      	ldr	r1, [pc, #56]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c5a:	f000 f821 	bl	8003ca0 <HAL_RCC_GetSysClockFreq>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	4b0b      	ldr	r3, [pc, #44]	; (8003c90 <HAL_RCC_ClockConfig+0x1bc>)
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	091b      	lsrs	r3, r3, #4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	490a      	ldr	r1, [pc, #40]	; (8003c94 <HAL_RCC_ClockConfig+0x1c0>)
 8003c6c:	5ccb      	ldrb	r3, [r1, r3]
 8003c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003c72:	4a09      	ldr	r2, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c4>)
 8003c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <HAL_RCC_ClockConfig+0x1c8>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fe f8bc 	bl	8001df8 <HAL_InitTick>

  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3710      	adds	r7, #16
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bd80      	pop	{r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023c00 	.word	0x40023c00
 8003c90:	40023800 	.word	0x40023800
 8003c94:	08005fdc 	.word	0x08005fdc
 8003c98:	20000000 	.word	0x20000000
 8003c9c:	20000004 	.word	0x20000004

08003ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ca4:	b084      	sub	sp, #16
 8003ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	607b      	str	r3, [r7, #4]
 8003cac:	2300      	movs	r3, #0
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb8:	4b67      	ldr	r3, [pc, #412]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 030c 	and.w	r3, r3, #12
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	d00d      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	f200 80bd 	bhi.w	8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d002      	beq.n	8003cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003cce:	2b04      	cmp	r3, #4
 8003cd0:	d003      	beq.n	8003cda <HAL_RCC_GetSysClockFreq+0x3a>
 8003cd2:	e0b7      	b.n	8003e44 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b61      	ldr	r3, [pc, #388]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003cd6:	60bb      	str	r3, [r7, #8]
       break;
 8003cd8:	e0b7      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cda:	4b61      	ldr	r3, [pc, #388]	; (8003e60 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003cdc:	60bb      	str	r3, [r7, #8]
      break;
 8003cde:	e0b4      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ce0:	4b5d      	ldr	r3, [pc, #372]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cea:	4b5b      	ldr	r3, [pc, #364]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04d      	beq.n	8003d92 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf6:	4b58      	ldr	r3, [pc, #352]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	099b      	lsrs	r3, r3, #6
 8003cfc:	461a      	mov	r2, r3
 8003cfe:	f04f 0300 	mov.w	r3, #0
 8003d02:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003d06:	f04f 0100 	mov.w	r1, #0
 8003d0a:	ea02 0800 	and.w	r8, r2, r0
 8003d0e:	ea03 0901 	and.w	r9, r3, r1
 8003d12:	4640      	mov	r0, r8
 8003d14:	4649      	mov	r1, r9
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	014b      	lsls	r3, r1, #5
 8003d20:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003d24:	0142      	lsls	r2, r0, #5
 8003d26:	4610      	mov	r0, r2
 8003d28:	4619      	mov	r1, r3
 8003d2a:	ebb0 0008 	subs.w	r0, r0, r8
 8003d2e:	eb61 0109 	sbc.w	r1, r1, r9
 8003d32:	f04f 0200 	mov.w	r2, #0
 8003d36:	f04f 0300 	mov.w	r3, #0
 8003d3a:	018b      	lsls	r3, r1, #6
 8003d3c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003d40:	0182      	lsls	r2, r0, #6
 8003d42:	1a12      	subs	r2, r2, r0
 8003d44:	eb63 0301 	sbc.w	r3, r3, r1
 8003d48:	f04f 0000 	mov.w	r0, #0
 8003d4c:	f04f 0100 	mov.w	r1, #0
 8003d50:	00d9      	lsls	r1, r3, #3
 8003d52:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d56:	00d0      	lsls	r0, r2, #3
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	eb12 0208 	adds.w	r2, r2, r8
 8003d60:	eb43 0309 	adc.w	r3, r3, r9
 8003d64:	f04f 0000 	mov.w	r0, #0
 8003d68:	f04f 0100 	mov.w	r1, #0
 8003d6c:	0259      	lsls	r1, r3, #9
 8003d6e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003d72:	0250      	lsls	r0, r2, #9
 8003d74:	4602      	mov	r2, r0
 8003d76:	460b      	mov	r3, r1
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	461a      	mov	r2, r3
 8003d80:	f04f 0300 	mov.w	r3, #0
 8003d84:	f7fc fa32 	bl	80001ec <__aeabi_uldivmod>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]
 8003d90:	e04a      	b.n	8003e28 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	099b      	lsrs	r3, r3, #6
 8003d98:	461a      	mov	r2, r3
 8003d9a:	f04f 0300 	mov.w	r3, #0
 8003d9e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003da2:	f04f 0100 	mov.w	r1, #0
 8003da6:	ea02 0400 	and.w	r4, r2, r0
 8003daa:	ea03 0501 	and.w	r5, r3, r1
 8003dae:	4620      	mov	r0, r4
 8003db0:	4629      	mov	r1, r5
 8003db2:	f04f 0200 	mov.w	r2, #0
 8003db6:	f04f 0300 	mov.w	r3, #0
 8003dba:	014b      	lsls	r3, r1, #5
 8003dbc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003dc0:	0142      	lsls	r2, r0, #5
 8003dc2:	4610      	mov	r0, r2
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	1b00      	subs	r0, r0, r4
 8003dc8:	eb61 0105 	sbc.w	r1, r1, r5
 8003dcc:	f04f 0200 	mov.w	r2, #0
 8003dd0:	f04f 0300 	mov.w	r3, #0
 8003dd4:	018b      	lsls	r3, r1, #6
 8003dd6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003dda:	0182      	lsls	r2, r0, #6
 8003ddc:	1a12      	subs	r2, r2, r0
 8003dde:	eb63 0301 	sbc.w	r3, r3, r1
 8003de2:	f04f 0000 	mov.w	r0, #0
 8003de6:	f04f 0100 	mov.w	r1, #0
 8003dea:	00d9      	lsls	r1, r3, #3
 8003dec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003df0:	00d0      	lsls	r0, r2, #3
 8003df2:	4602      	mov	r2, r0
 8003df4:	460b      	mov	r3, r1
 8003df6:	1912      	adds	r2, r2, r4
 8003df8:	eb45 0303 	adc.w	r3, r5, r3
 8003dfc:	f04f 0000 	mov.w	r0, #0
 8003e00:	f04f 0100 	mov.w	r1, #0
 8003e04:	0299      	lsls	r1, r3, #10
 8003e06:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003e0a:	0290      	lsls	r0, r2, #10
 8003e0c:	4602      	mov	r2, r0
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	461a      	mov	r2, r3
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	f7fc f9e6 	bl	80001ec <__aeabi_uldivmod>
 8003e20:	4602      	mov	r2, r0
 8003e22:	460b      	mov	r3, r1
 8003e24:	4613      	mov	r3, r2
 8003e26:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e28:	4b0b      	ldr	r3, [pc, #44]	; (8003e58 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	0c1b      	lsrs	r3, r3, #16
 8003e2e:	f003 0303 	and.w	r3, r3, #3
 8003e32:	3301      	adds	r3, #1
 8003e34:	005b      	lsls	r3, r3, #1
 8003e36:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003e38:	68fa      	ldr	r2, [r7, #12]
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e40:	60bb      	str	r3, [r7, #8]
      break;
 8003e42:	e002      	b.n	8003e4a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e44:	4b05      	ldr	r3, [pc, #20]	; (8003e5c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003e46:	60bb      	str	r3, [r7, #8]
      break;
 8003e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4a:	68bb      	ldr	r3, [r7, #8]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3710      	adds	r7, #16
 8003e50:	46bd      	mov	sp, r7
 8003e52:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e56:	bf00      	nop
 8003e58:	40023800 	.word	0x40023800
 8003e5c:	00f42400 	.word	0x00f42400
 8003e60:	007a1200 	.word	0x007a1200

08003e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e68:	4b03      	ldr	r3, [pc, #12]	; (8003e78 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	20000000 	.word	0x20000000

08003e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e80:	f7ff fff0 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003e84:	4602      	mov	r2, r0
 8003e86:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	0a9b      	lsrs	r3, r3, #10
 8003e8c:	f003 0307 	and.w	r3, r3, #7
 8003e90:	4903      	ldr	r1, [pc, #12]	; (8003ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e92:	5ccb      	ldrb	r3, [r1, r3]
 8003e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e98:	4618      	mov	r0, r3
 8003e9a:	bd80      	pop	{r7, pc}
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	08005fec 	.word	0x08005fec

08003ea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ea8:	f7ff ffdc 	bl	8003e64 <HAL_RCC_GetHCLKFreq>
 8003eac:	4602      	mov	r2, r0
 8003eae:	4b05      	ldr	r3, [pc, #20]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	0b5b      	lsrs	r3, r3, #13
 8003eb4:	f003 0307 	and.w	r3, r3, #7
 8003eb8:	4903      	ldr	r1, [pc, #12]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eba:	5ccb      	ldrb	r3, [r1, r3]
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	40023800 	.word	0x40023800
 8003ec8:	08005fec 	.word	0x08005fec

08003ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e07b      	b.n	8003fd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d108      	bne.n	8003ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003eee:	d009      	beq.n	8003f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	61da      	str	r2, [r3, #28]
 8003ef6:	e005      	b.n	8003f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d106      	bne.n	8003f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f7fd f9c8 	bl	80012b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2202      	movs	r2, #2
 8003f28:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f4c:	431a      	orrs	r2, r3
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f56:	431a      	orrs	r2, r3
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	431a      	orrs	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	431a      	orrs	r2, r3
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	699b      	ldr	r3, [r3, #24]
 8003f70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69db      	ldr	r3, [r3, #28]
 8003f7a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f88:	ea42 0103 	orr.w	r1, r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f90:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	f003 0104 	and.w	r1, r3, #4
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003faa:	f003 0210 	and.w	r2, r3, #16
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	430a      	orrs	r2, r1
 8003fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	69da      	ldr	r2, [r3, #28]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3708      	adds	r7, #8
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}

08003fde <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fde:	b580      	push	{r7, lr}
 8003fe0:	b08c      	sub	sp, #48	; 0x30
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	60f8      	str	r0, [r7, #12]
 8003fe6:	60b9      	str	r1, [r7, #8]
 8003fe8:	607a      	str	r2, [r7, #4]
 8003fea:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fec:	2301      	movs	r3, #1
 8003fee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d101      	bne.n	8004004 <HAL_SPI_TransmitReceive+0x26>
 8004000:	2302      	movs	r3, #2
 8004002:	e18a      	b.n	800431a <HAL_SPI_TransmitReceive+0x33c>
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2201      	movs	r2, #1
 8004008:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800400c:	f7fd ff38 	bl	8001e80 <HAL_GetTick>
 8004010:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004018:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004022:	887b      	ldrh	r3, [r7, #2]
 8004024:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b01      	cmp	r3, #1
 800402c:	d00f      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004034:	d107      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d103      	bne.n	8004046 <HAL_SPI_TransmitReceive+0x68>
 800403e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004042:	2b04      	cmp	r3, #4
 8004044:	d003      	beq.n	800404e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004046:	2302      	movs	r3, #2
 8004048:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800404c:	e15b      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d002      	beq.n	8004060 <HAL_SPI_TransmitReceive+0x82>
 800405a:	887b      	ldrh	r3, [r7, #2]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d103      	bne.n	8004068 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004066:	e14e      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800406e:	b2db      	uxtb	r3, r3
 8004070:	2b04      	cmp	r3, #4
 8004072:	d003      	beq.n	800407c <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	2205      	movs	r2, #5
 8004078:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	887a      	ldrh	r2, [r7, #2]
 8004092:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	68ba      	ldr	r2, [r7, #8]
 8004098:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	887a      	ldrh	r2, [r7, #2]
 800409e:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	887a      	ldrh	r2, [r7, #2]
 80040a4:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	2200      	movs	r2, #0
 80040aa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040bc:	2b40      	cmp	r3, #64	; 0x40
 80040be:	d007      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d8:	d178      	bne.n	80041cc <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_SPI_TransmitReceive+0x10a>
 80040e2:	8b7b      	ldrh	r3, [r7, #26]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d166      	bne.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	881a      	ldrh	r2, [r3, #0]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f8:	1c9a      	adds	r2, r3, #2
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004102:	b29b      	uxth	r3, r3
 8004104:	3b01      	subs	r3, #1
 8004106:	b29a      	uxth	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800410c:	e053      	b.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b02      	cmp	r3, #2
 800411a:	d11b      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004120:	b29b      	uxth	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_SPI_TransmitReceive+0x176>
 8004126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004128:	2b01      	cmp	r3, #1
 800412a:	d113      	bne.n	8004154 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	881a      	ldrh	r2, [r3, #0]
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413c:	1c9a      	adds	r2, r3, #2
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b29a      	uxth	r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004150:	2300      	movs	r3, #0
 8004152:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	f003 0301 	and.w	r3, r3, #1
 800415e:	2b01      	cmp	r3, #1
 8004160:	d119      	bne.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004166:	b29b      	uxth	r3, r3
 8004168:	2b00      	cmp	r3, #0
 800416a:	d014      	beq.n	8004196 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68da      	ldr	r2, [r3, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004176:	b292      	uxth	r2, r2
 8004178:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800417e:	1c9a      	adds	r2, r3, #2
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004188:	b29b      	uxth	r3, r3
 800418a:	3b01      	subs	r3, #1
 800418c:	b29a      	uxth	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004192:	2301      	movs	r3, #1
 8004194:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004196:	f7fd fe73 	bl	8001e80 <HAL_GetTick>
 800419a:	4602      	mov	r2, r0
 800419c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800419e:	1ad3      	subs	r3, r2, r3
 80041a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d807      	bhi.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041ac:	d003      	beq.n	80041b6 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80041b4:	e0a7      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d1a6      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d1a1      	bne.n	800410e <HAL_SPI_TransmitReceive+0x130>
 80041ca:	e07c      	b.n	80042c6 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_SPI_TransmitReceive+0x1fc>
 80041d4:	8b7b      	ldrh	r3, [r7, #26]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d16b      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	330c      	adds	r3, #12
 80041e4:	7812      	ldrb	r2, [r2, #0]
 80041e6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ec:	1c5a      	adds	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041f6:	b29b      	uxth	r3, r3
 80041f8:	3b01      	subs	r3, #1
 80041fa:	b29a      	uxth	r2, r3
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004200:	e057      	b.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b02      	cmp	r3, #2
 800420e:	d11c      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004214:	b29b      	uxth	r3, r3
 8004216:	2b00      	cmp	r3, #0
 8004218:	d017      	beq.n	800424a <HAL_SPI_TransmitReceive+0x26c>
 800421a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800421c:	2b01      	cmp	r3, #1
 800421e:	d114      	bne.n	800424a <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	7812      	ldrb	r2, [r2, #0]
 800422c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004232:	1c5a      	adds	r2, r3, #1
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800423c:	b29b      	uxth	r3, r3
 800423e:	3b01      	subs	r3, #1
 8004240:	b29a      	uxth	r2, r3
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004246:	2300      	movs	r3, #0
 8004248:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	689b      	ldr	r3, [r3, #8]
 8004250:	f003 0301 	and.w	r3, r3, #1
 8004254:	2b01      	cmp	r3, #1
 8004256:	d119      	bne.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800425c:	b29b      	uxth	r3, r3
 800425e:	2b00      	cmp	r3, #0
 8004260:	d014      	beq.n	800428c <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68da      	ldr	r2, [r3, #12]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800426c:	b2d2      	uxtb	r2, r2
 800426e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004274:	1c5a      	adds	r2, r3, #1
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800427e:	b29b      	uxth	r3, r3
 8004280:	3b01      	subs	r3, #1
 8004282:	b29a      	uxth	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004288:	2301      	movs	r3, #1
 800428a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800428c:	f7fd fdf8 	bl	8001e80 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004298:	429a      	cmp	r2, r3
 800429a:	d803      	bhi.n	80042a4 <HAL_SPI_TransmitReceive+0x2c6>
 800429c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800429e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a2:	d102      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x2cc>
 80042a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d103      	bne.n	80042b2 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80042b0:	e029      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1a2      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d19d      	bne.n	8004202 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8b2 	bl	8004434 <SPI_EndRxTxTransaction>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	2220      	movs	r2, #32
 80042e0:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042e2:	e010      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042ec:	2300      	movs	r3, #0
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68db      	ldr	r3, [r3, #12]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	e000      	b.n	8004306 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004304:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004316:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800431a:	4618      	mov	r0, r3
 800431c:	3730      	adds	r7, #48	; 0x30
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b088      	sub	sp, #32
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	60b9      	str	r1, [r7, #8]
 800432e:	603b      	str	r3, [r7, #0]
 8004330:	4613      	mov	r3, r2
 8004332:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004334:	f7fd fda4 	bl	8001e80 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433c:	1a9b      	subs	r3, r3, r2
 800433e:	683a      	ldr	r2, [r7, #0]
 8004340:	4413      	add	r3, r2
 8004342:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004344:	f7fd fd9c 	bl	8001e80 <HAL_GetTick>
 8004348:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800434a:	4b39      	ldr	r3, [pc, #228]	; (8004430 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	015b      	lsls	r3, r3, #5
 8004350:	0d1b      	lsrs	r3, r3, #20
 8004352:	69fa      	ldr	r2, [r7, #28]
 8004354:	fb02 f303 	mul.w	r3, r2, r3
 8004358:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800435a:	e054      	b.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004362:	d050      	beq.n	8004406 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004364:	f7fd fd8c 	bl	8001e80 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	429a      	cmp	r2, r3
 8004372:	d902      	bls.n	800437a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004374:	69fb      	ldr	r3, [r7, #28]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d13d      	bne.n	80043f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004388:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	685b      	ldr	r3, [r3, #4]
 800438e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004392:	d111      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800439c:	d004      	beq.n	80043a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	689b      	ldr	r3, [r3, #8]
 80043a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043a6:	d107      	bne.n	80043b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043c0:	d10f      	bne.n	80043e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043d0:	601a      	str	r2, [r3, #0]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2201      	movs	r2, #1
 80043e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e017      	b.n	8004426 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d101      	bne.n	8004400 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	3b01      	subs	r3, #1
 8004404:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	4013      	ands	r3, r2
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	429a      	cmp	r2, r3
 8004414:	bf0c      	ite	eq
 8004416:	2301      	moveq	r3, #1
 8004418:	2300      	movne	r3, #0
 800441a:	b2db      	uxtb	r3, r3
 800441c:	461a      	mov	r2, r3
 800441e:	79fb      	ldrb	r3, [r7, #7]
 8004420:	429a      	cmp	r2, r3
 8004422:	d19b      	bne.n	800435c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004424:	2300      	movs	r3, #0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3720      	adds	r7, #32
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	20000000 	.word	0x20000000

08004434 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b088      	sub	sp, #32
 8004438:	af02      	add	r7, sp, #8
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <SPI_EndRxTxTransaction+0x7c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a1b      	ldr	r2, [pc, #108]	; (80044b4 <SPI_EndRxTxTransaction+0x80>)
 8004446:	fba2 2303 	umull	r2, r3, r2, r3
 800444a:	0d5b      	lsrs	r3, r3, #21
 800444c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004450:	fb02 f303 	mul.w	r3, r2, r3
 8004454:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800445e:	d112      	bne.n	8004486 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	9300      	str	r3, [sp, #0]
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2200      	movs	r2, #0
 8004468:	2180      	movs	r1, #128	; 0x80
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f7ff ff5a 	bl	8004324 <SPI_WaitFlagStateUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d016      	beq.n	80044a4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800447a:	f043 0220 	orr.w	r2, r3, #32
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e00f      	b.n	80044a6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	3b01      	subs	r3, #1
 8004490:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449c:	2b80      	cmp	r3, #128	; 0x80
 800449e:	d0f2      	beq.n	8004486 <SPI_EndRxTxTransaction+0x52>
 80044a0:	e000      	b.n	80044a4 <SPI_EndRxTxTransaction+0x70>
        break;
 80044a2:	bf00      	nop
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3718      	adds	r7, #24
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}
 80044ae:	bf00      	nop
 80044b0:	20000000 	.word	0x20000000
 80044b4:	165e9f81 	.word	0x165e9f81

080044b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d101      	bne.n	80044ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	e041      	b.n	800454e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d106      	bne.n	80044e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f7fd fa52 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	3304      	adds	r3, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4610      	mov	r0, r2
 80044f8:	f000 fb4a 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2201      	movs	r2, #1
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2201      	movs	r2, #1
 8004510:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2201      	movs	r2, #1
 8004518:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800454c:	2300      	movs	r3, #0
}
 800454e:	4618      	mov	r0, r3
 8004550:	3708      	adds	r7, #8
 8004552:	46bd      	mov	sp, r7
 8004554:	bd80      	pop	{r7, pc}

08004556 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004556:	b580      	push	{r7, lr}
 8004558:	b082      	sub	sp, #8
 800455a:	af00      	add	r7, sp, #0
 800455c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d101      	bne.n	8004568 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e041      	b.n	80045ec <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800456e:	b2db      	uxtb	r3, r3
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f000 f839 	bl	80045f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2202      	movs	r2, #2
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	3304      	adds	r3, #4
 8004592:	4619      	mov	r1, r3
 8004594:	4610      	mov	r0, r2
 8004596:	f000 fafb 	bl	8004b90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2201      	movs	r2, #1
 80045b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2201      	movs	r2, #1
 80045be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2201      	movs	r2, #1
 80045c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2201      	movs	r2, #1
 80045ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2201      	movs	r2, #1
 80045d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ea:	2300      	movs	r3, #0
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	3708      	adds	r7, #8
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b082      	sub	sp, #8
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	691b      	ldr	r3, [r3, #16]
 8004616:	f003 0302 	and.w	r3, r3, #2
 800461a:	2b02      	cmp	r3, #2
 800461c:	d122      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	68db      	ldr	r3, [r3, #12]
 8004624:	f003 0302 	and.w	r3, r3, #2
 8004628:	2b02      	cmp	r3, #2
 800462a:	d11b      	bne.n	8004664 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f06f 0202 	mvn.w	r2, #2
 8004634:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f003 0303 	and.w	r3, r3, #3
 8004646:	2b00      	cmp	r3, #0
 8004648:	d003      	beq.n	8004652 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 fa81 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 8004650:	e005      	b.n	800465e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 fa73 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004658:	6878      	ldr	r0, [r7, #4]
 800465a:	f000 fa84 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0304 	and.w	r3, r3, #4
 800466e:	2b04      	cmp	r3, #4
 8004670:	d122      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b04      	cmp	r3, #4
 800467e:	d11b      	bne.n	80046b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f06f 0204 	mvn.w	r2, #4
 8004688:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2202      	movs	r2, #2
 800468e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	699b      	ldr	r3, [r3, #24]
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	2b00      	cmp	r3, #0
 800469c:	d003      	beq.n	80046a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 fa57 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 80046a4:	e005      	b.n	80046b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f000 fa49 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	f000 fa5a 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2200      	movs	r2, #0
 80046b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	f003 0308 	and.w	r3, r3, #8
 80046c2:	2b08      	cmp	r3, #8
 80046c4:	d122      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f003 0308 	and.w	r3, r3, #8
 80046d0:	2b08      	cmp	r3, #8
 80046d2:	d11b      	bne.n	800470c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f06f 0208 	mvn.w	r2, #8
 80046dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2204      	movs	r2, #4
 80046e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	69db      	ldr	r3, [r3, #28]
 80046ea:	f003 0303 	and.w	r3, r3, #3
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d003      	beq.n	80046fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046f2:	6878      	ldr	r0, [r7, #4]
 80046f4:	f000 fa2d 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 80046f8:	e005      	b.n	8004706 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fa1f 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fa30 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2200      	movs	r2, #0
 800470a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	f003 0310 	and.w	r3, r3, #16
 8004716:	2b10      	cmp	r3, #16
 8004718:	d122      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	f003 0310 	and.w	r3, r3, #16
 8004724:	2b10      	cmp	r3, #16
 8004726:	d11b      	bne.n	8004760 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0210 	mvn.w	r2, #16
 8004730:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2208      	movs	r2, #8
 8004736:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	69db      	ldr	r3, [r3, #28]
 800473e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fa03 	bl	8004b52 <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f9f5 	bl	8004b3e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fa06 	bl	8004b66 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b01      	cmp	r3, #1
 800476c:	d10e      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	f003 0301 	and.w	r3, r3, #1
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f06f 0201 	mvn.w	r2, #1
 8004784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f000 f9cf 	bl	8004b2a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	691b      	ldr	r3, [r3, #16]
 8004792:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004796:	2b80      	cmp	r3, #128	; 0x80
 8004798:	d10e      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68db      	ldr	r3, [r3, #12]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	2b80      	cmp	r3, #128	; 0x80
 80047a6:	d107      	bne.n	80047b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80047b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fd5c 	bl	8005270 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	691b      	ldr	r3, [r3, #16]
 80047be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047c2:	2b40      	cmp	r3, #64	; 0x40
 80047c4:	d10e      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047d0:	2b40      	cmp	r3, #64	; 0x40
 80047d2:	d107      	bne.n	80047e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f9cb 	bl	8004b7a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	f003 0320 	and.w	r3, r3, #32
 80047ee:	2b20      	cmp	r3, #32
 80047f0:	d10e      	bne.n	8004810 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	68db      	ldr	r3, [r3, #12]
 80047f8:	f003 0320 	and.w	r3, r3, #32
 80047fc:	2b20      	cmp	r3, #32
 80047fe:	d107      	bne.n	8004810 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f06f 0220 	mvn.w	r2, #32
 8004808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fd26 	bl	800525c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004810:	bf00      	nop
 8004812:	3708      	adds	r7, #8
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b086      	sub	sp, #24
 800481c:	af00      	add	r7, sp, #0
 800481e:	60f8      	str	r0, [r7, #12]
 8004820:	60b9      	str	r1, [r7, #8]
 8004822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004824:	2300      	movs	r3, #0
 8004826:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004832:	2302      	movs	r3, #2
 8004834:	e0ae      	b.n	8004994 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b0c      	cmp	r3, #12
 8004842:	f200 809f 	bhi.w	8004984 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004881 	.word	0x08004881
 8004850:	08004985 	.word	0x08004985
 8004854:	08004985 	.word	0x08004985
 8004858:	08004985 	.word	0x08004985
 800485c:	080048c1 	.word	0x080048c1
 8004860:	08004985 	.word	0x08004985
 8004864:	08004985 	.word	0x08004985
 8004868:	08004985 	.word	0x08004985
 800486c:	08004903 	.word	0x08004903
 8004870:	08004985 	.word	0x08004985
 8004874:	08004985 	.word	0x08004985
 8004878:	08004985 	.word	0x08004985
 800487c:	08004943 	.word	0x08004943
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68b9      	ldr	r1, [r7, #8]
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fa22 	bl	8004cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699a      	ldr	r2, [r3, #24]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	f042 0208 	orr.w	r2, r2, #8
 800489a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	699a      	ldr	r2, [r3, #24]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f022 0204 	bic.w	r2, r2, #4
 80048aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	6999      	ldr	r1, [r3, #24]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	691a      	ldr	r2, [r3, #16]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	430a      	orrs	r2, r1
 80048bc:	619a      	str	r2, [r3, #24]
      break;
 80048be:	e064      	b.n	800498a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68b9      	ldr	r1, [r7, #8]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fa72 	bl	8004db0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699a      	ldr	r2, [r3, #24]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699a      	ldr	r2, [r3, #24]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	6999      	ldr	r1, [r3, #24]
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	691b      	ldr	r3, [r3, #16]
 80048f6:	021a      	lsls	r2, r3, #8
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	430a      	orrs	r2, r1
 80048fe:	619a      	str	r2, [r3, #24]
      break;
 8004900:	e043      	b.n	800498a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fac7 	bl	8004e9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	69da      	ldr	r2, [r3, #28]
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f042 0208 	orr.w	r2, r2, #8
 800491c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	69da      	ldr	r2, [r3, #28]
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f022 0204 	bic.w	r2, r2, #4
 800492c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69d9      	ldr	r1, [r3, #28]
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	61da      	str	r2, [r3, #28]
      break;
 8004940:	e023      	b.n	800498a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	68b9      	ldr	r1, [r7, #8]
 8004948:	4618      	mov	r0, r3
 800494a:	f000 fb1b 	bl	8004f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800495c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	69da      	ldr	r2, [r3, #28]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800496c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	69d9      	ldr	r1, [r3, #28]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	021a      	lsls	r2, r3, #8
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	61da      	str	r2, [r3, #28]
      break;
 8004982:	e002      	b.n	800498a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004984:	2301      	movs	r3, #1
 8004986:	75fb      	strb	r3, [r7, #23]
      break;
 8004988:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004992:	7dfb      	ldrb	r3, [r7, #23]
}
 8004994:	4618      	mov	r0, r3
 8004996:	3718      	adds	r7, #24
 8004998:	46bd      	mov	sp, r7
 800499a:	bd80      	pop	{r7, pc}

0800499c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
 80049a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049b0:	2b01      	cmp	r3, #1
 80049b2:	d101      	bne.n	80049b8 <HAL_TIM_ConfigClockSource+0x1c>
 80049b4:	2302      	movs	r3, #2
 80049b6:	e0b4      	b.n	8004b22 <HAL_TIM_ConfigClockSource+0x186>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68ba      	ldr	r2, [r7, #8]
 80049e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f0:	d03e      	beq.n	8004a70 <HAL_TIM_ConfigClockSource+0xd4>
 80049f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049f6:	f200 8087 	bhi.w	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 80049fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049fe:	f000 8086 	beq.w	8004b0e <HAL_TIM_ConfigClockSource+0x172>
 8004a02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a06:	d87f      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a08:	2b70      	cmp	r3, #112	; 0x70
 8004a0a:	d01a      	beq.n	8004a42 <HAL_TIM_ConfigClockSource+0xa6>
 8004a0c:	2b70      	cmp	r3, #112	; 0x70
 8004a0e:	d87b      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a10:	2b60      	cmp	r3, #96	; 0x60
 8004a12:	d050      	beq.n	8004ab6 <HAL_TIM_ConfigClockSource+0x11a>
 8004a14:	2b60      	cmp	r3, #96	; 0x60
 8004a16:	d877      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a18:	2b50      	cmp	r3, #80	; 0x50
 8004a1a:	d03c      	beq.n	8004a96 <HAL_TIM_ConfigClockSource+0xfa>
 8004a1c:	2b50      	cmp	r3, #80	; 0x50
 8004a1e:	d873      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d058      	beq.n	8004ad6 <HAL_TIM_ConfigClockSource+0x13a>
 8004a24:	2b40      	cmp	r3, #64	; 0x40
 8004a26:	d86f      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a28:	2b30      	cmp	r3, #48	; 0x30
 8004a2a:	d064      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a2c:	2b30      	cmp	r3, #48	; 0x30
 8004a2e:	d86b      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d060      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a34:	2b20      	cmp	r3, #32
 8004a36:	d867      	bhi.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d05c      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a3c:	2b10      	cmp	r3, #16
 8004a3e:	d05a      	beq.n	8004af6 <HAL_TIM_ConfigClockSource+0x15a>
 8004a40:	e062      	b.n	8004b08 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6818      	ldr	r0, [r3, #0]
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	6899      	ldr	r1, [r3, #8]
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685a      	ldr	r2, [r3, #4]
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	68db      	ldr	r3, [r3, #12]
 8004a52:	f000 fb67 	bl	8005124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a64:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	609a      	str	r2, [r3, #8]
      break;
 8004a6e:	e04f      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6818      	ldr	r0, [r3, #0]
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	6899      	ldr	r1, [r3, #8]
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685a      	ldr	r2, [r3, #4]
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f000 fb50 	bl	8005124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a92:	609a      	str	r2, [r3, #8]
      break;
 8004a94:	e03c      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6818      	ldr	r0, [r3, #0]
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	6859      	ldr	r1, [r3, #4]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	461a      	mov	r2, r3
 8004aa4:	f000 fac4 	bl	8005030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2150      	movs	r1, #80	; 0x50
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f000 fb1d 	bl	80050ee <TIM_ITRx_SetConfig>
      break;
 8004ab4:	e02c      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6818      	ldr	r0, [r3, #0]
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	6859      	ldr	r1, [r3, #4]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	68db      	ldr	r3, [r3, #12]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	f000 fae3 	bl	800508e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2160      	movs	r1, #96	; 0x60
 8004ace:	4618      	mov	r0, r3
 8004ad0:	f000 fb0d 	bl	80050ee <TIM_ITRx_SetConfig>
      break;
 8004ad4:	e01c      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6818      	ldr	r0, [r3, #0]
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6859      	ldr	r1, [r3, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f000 faa4 	bl	8005030 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2140      	movs	r1, #64	; 0x40
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fafd 	bl	80050ee <TIM_ITRx_SetConfig>
      break;
 8004af4:	e00c      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4619      	mov	r1, r3
 8004b00:	4610      	mov	r0, r2
 8004b02:	f000 faf4 	bl	80050ee <TIM_ITRx_SetConfig>
      break;
 8004b06:	e003      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	73fb      	strb	r3, [r7, #15]
      break;
 8004b0c:	e000      	b.n	8004b10 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004b0e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b20:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b32:	bf00      	nop
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b46:	bf00      	nop
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr

08004b52 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b52:	b480      	push	{r7}
 8004b54:	b083      	sub	sp, #12
 8004b56:	af00      	add	r7, sp, #0
 8004b58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b5a:	bf00      	nop
 8004b5c:	370c      	adds	r7, #12
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b083      	sub	sp, #12
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b6e:	bf00      	nop
 8004b70:	370c      	adds	r7, #12
 8004b72:	46bd      	mov	sp, r7
 8004b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b78:	4770      	bx	lr

08004b7a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	b083      	sub	sp, #12
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b82:	bf00      	nop
 8004b84:	370c      	adds	r7, #12
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
	...

08004b90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	4a40      	ldr	r2, [pc, #256]	; (8004ca4 <TIM_Base_SetConfig+0x114>)
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d013      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bae:	d00f      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	4a3d      	ldr	r2, [pc, #244]	; (8004ca8 <TIM_Base_SetConfig+0x118>)
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	d00b      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	4a3c      	ldr	r2, [pc, #240]	; (8004cac <TIM_Base_SetConfig+0x11c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d007      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	4a3b      	ldr	r2, [pc, #236]	; (8004cb0 <TIM_Base_SetConfig+0x120>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d003      	beq.n	8004bd0 <TIM_Base_SetConfig+0x40>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	4a3a      	ldr	r2, [pc, #232]	; (8004cb4 <TIM_Base_SetConfig+0x124>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d108      	bne.n	8004be2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	4313      	orrs	r3, r2
 8004be0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	4a2f      	ldr	r2, [pc, #188]	; (8004ca4 <TIM_Base_SetConfig+0x114>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d02b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bf0:	d027      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	4a2c      	ldr	r2, [pc, #176]	; (8004ca8 <TIM_Base_SetConfig+0x118>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d023      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	4a2b      	ldr	r2, [pc, #172]	; (8004cac <TIM_Base_SetConfig+0x11c>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d01f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	4a2a      	ldr	r2, [pc, #168]	; (8004cb0 <TIM_Base_SetConfig+0x120>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d01b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4a29      	ldr	r2, [pc, #164]	; (8004cb4 <TIM_Base_SetConfig+0x124>)
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	d017      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a28      	ldr	r2, [pc, #160]	; (8004cb8 <TIM_Base_SetConfig+0x128>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d013      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	4a27      	ldr	r2, [pc, #156]	; (8004cbc <TIM_Base_SetConfig+0x12c>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d00f      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <TIM_Base_SetConfig+0x130>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00b      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	4a25      	ldr	r2, [pc, #148]	; (8004cc4 <TIM_Base_SetConfig+0x134>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d007      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a24      	ldr	r2, [pc, #144]	; (8004cc8 <TIM_Base_SetConfig+0x138>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_Base_SetConfig+0xb2>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a23      	ldr	r2, [pc, #140]	; (8004ccc <TIM_Base_SetConfig+0x13c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d108      	bne.n	8004c54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4313      	orrs	r3, r2
 8004c52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	689a      	ldr	r2, [r3, #8]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ca4 <TIM_Base_SetConfig+0x114>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0xf8>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a0c      	ldr	r2, [pc, #48]	; (8004cb4 <TIM_Base_SetConfig+0x124>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d103      	bne.n	8004c90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	691a      	ldr	r2, [r3, #16]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2201      	movs	r2, #1
 8004c94:	615a      	str	r2, [r3, #20]
}
 8004c96:	bf00      	nop
 8004c98:	3714      	adds	r7, #20
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010000 	.word	0x40010000
 8004ca8:	40000400 	.word	0x40000400
 8004cac:	40000800 	.word	0x40000800
 8004cb0:	40000c00 	.word	0x40000c00
 8004cb4:	40010400 	.word	0x40010400
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800
 8004cc4:	40001800 	.word	0x40001800
 8004cc8:	40001c00 	.word	0x40001c00
 8004ccc:	40002000 	.word	0x40002000

08004cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	f023 0201 	bic.w	r2, r3, #1
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6a1b      	ldr	r3, [r3, #32]
 8004cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	699b      	ldr	r3, [r3, #24]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cfe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f023 0303 	bic.w	r3, r3, #3
 8004d06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	f023 0302 	bic.w	r3, r3, #2
 8004d18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a20      	ldr	r2, [pc, #128]	; (8004da8 <TIM_OC1_SetConfig+0xd8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d003      	beq.n	8004d34 <TIM_OC1_SetConfig+0x64>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	4a1f      	ldr	r2, [pc, #124]	; (8004dac <TIM_OC1_SetConfig+0xdc>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d10c      	bne.n	8004d4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f023 0308 	bic.w	r3, r3, #8
 8004d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	697a      	ldr	r2, [r7, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f023 0304 	bic.w	r3, r3, #4
 8004d4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a15      	ldr	r2, [pc, #84]	; (8004da8 <TIM_OC1_SetConfig+0xd8>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d003      	beq.n	8004d5e <TIM_OC1_SetConfig+0x8e>
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	4a14      	ldr	r2, [pc, #80]	; (8004dac <TIM_OC1_SetConfig+0xdc>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d111      	bne.n	8004d82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	695b      	ldr	r3, [r3, #20]
 8004d72:	693a      	ldr	r2, [r7, #16]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685a      	ldr	r2, [r3, #4]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	697a      	ldr	r2, [r7, #20]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr
 8004da8:	40010000 	.word	0x40010000
 8004dac:	40010400 	.word	0x40010400

08004db0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b087      	sub	sp, #28
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a1b      	ldr	r3, [r3, #32]
 8004dbe:	f023 0210 	bic.w	r2, r3, #16
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004de6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	021b      	lsls	r3, r3, #8
 8004dee:	68fa      	ldr	r2, [r7, #12]
 8004df0:	4313      	orrs	r3, r2
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	f023 0320 	bic.w	r3, r3, #32
 8004dfa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	689b      	ldr	r3, [r3, #8]
 8004e00:	011b      	lsls	r3, r3, #4
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4313      	orrs	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	; (8004e94 <TIM_OC2_SetConfig+0xe4>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d003      	beq.n	8004e18 <TIM_OC2_SetConfig+0x68>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4a21      	ldr	r2, [pc, #132]	; (8004e98 <TIM_OC2_SetConfig+0xe8>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d10d      	bne.n	8004e34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	011b      	lsls	r3, r3, #4
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	4a17      	ldr	r2, [pc, #92]	; (8004e94 <TIM_OC2_SetConfig+0xe4>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d003      	beq.n	8004e44 <TIM_OC2_SetConfig+0x94>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	4a16      	ldr	r2, [pc, #88]	; (8004e98 <TIM_OC2_SetConfig+0xe8>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d113      	bne.n	8004e6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	695b      	ldr	r3, [r3, #20]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	009b      	lsls	r3, r3, #2
 8004e66:	693a      	ldr	r2, [r7, #16]
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68fa      	ldr	r2, [r7, #12]
 8004e76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	685a      	ldr	r2, [r3, #4]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	697a      	ldr	r2, [r7, #20]
 8004e84:	621a      	str	r2, [r3, #32]
}
 8004e86:	bf00      	nop
 8004e88:	371c      	adds	r7, #28
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40010400 	.word	0x40010400

08004e9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a1b      	ldr	r3, [r3, #32]
 8004eaa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
 8004eb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69db      	ldr	r3, [r3, #28]
 8004ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f023 0303 	bic.w	r3, r3, #3
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ed4:	683b      	ldr	r3, [r7, #0]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	021b      	lsls	r3, r3, #8
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <TIM_OC3_SetConfig+0xe0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_OC3_SetConfig+0x66>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <TIM_OC3_SetConfig+0xe4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d10d      	bne.n	8004f1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	021b      	lsls	r3, r3, #8
 8004f10:	697a      	ldr	r2, [r7, #20]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a16      	ldr	r2, [pc, #88]	; (8004f7c <TIM_OC3_SetConfig+0xe0>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d003      	beq.n	8004f2e <TIM_OC3_SetConfig+0x92>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a15      	ldr	r2, [pc, #84]	; (8004f80 <TIM_OC3_SetConfig+0xe4>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d113      	bne.n	8004f56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	695b      	ldr	r3, [r3, #20]
 8004f42:	011b      	lsls	r3, r3, #4
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	699b      	ldr	r3, [r3, #24]
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4313      	orrs	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	693a      	ldr	r2, [r7, #16]
 8004f5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685a      	ldr	r2, [r3, #4]
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	697a      	ldr	r2, [r7, #20]
 8004f6e:	621a      	str	r2, [r3, #32]
}
 8004f70:	bf00      	nop
 8004f72:	371c      	adds	r7, #28
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	40010000 	.word	0x40010000
 8004f80:	40010400 	.word	0x40010400

08004f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b087      	sub	sp, #28
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
 8004f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	69db      	ldr	r3, [r3, #28]
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	021b      	lsls	r3, r3, #8
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	031b      	lsls	r3, r3, #12
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a12      	ldr	r2, [pc, #72]	; (8005028 <TIM_OC4_SetConfig+0xa4>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC4_SetConfig+0x68>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a11      	ldr	r2, [pc, #68]	; (800502c <TIM_OC4_SetConfig+0xa8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d109      	bne.n	8005000 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ff2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	695b      	ldr	r3, [r3, #20]
 8004ff8:	019b      	lsls	r3, r3, #6
 8004ffa:	697a      	ldr	r2, [r7, #20]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	693a      	ldr	r2, [r7, #16]
 8005018:	621a      	str	r2, [r3, #32]
}
 800501a:	bf00      	nop
 800501c:	371c      	adds	r7, #28
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr
 8005026:	bf00      	nop
 8005028:	40010000 	.word	0x40010000
 800502c:	40010400 	.word	0x40010400

08005030 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005030:	b480      	push	{r7}
 8005032:	b087      	sub	sp, #28
 8005034:	af00      	add	r7, sp, #0
 8005036:	60f8      	str	r0, [r7, #12]
 8005038:	60b9      	str	r1, [r7, #8]
 800503a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	6a1b      	ldr	r3, [r3, #32]
 8005040:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6a1b      	ldr	r3, [r3, #32]
 8005046:	f023 0201 	bic.w	r2, r3, #1
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800505a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	011b      	lsls	r3, r3, #4
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f023 030a 	bic.w	r3, r3, #10
 800506c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	697a      	ldr	r2, [r7, #20]
 8005080:	621a      	str	r2, [r3, #32]
}
 8005082:	bf00      	nop
 8005084:	371c      	adds	r7, #28
 8005086:	46bd      	mov	sp, r7
 8005088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508c:	4770      	bx	lr

0800508e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508e:	b480      	push	{r7}
 8005090:	b087      	sub	sp, #28
 8005092:	af00      	add	r7, sp, #0
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	6a1b      	ldr	r3, [r3, #32]
 800509e:	f023 0210 	bic.w	r2, r3, #16
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	6a1b      	ldr	r3, [r3, #32]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80050b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	031b      	lsls	r3, r3, #12
 80050be:	697a      	ldr	r2, [r7, #20]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	011b      	lsls	r3, r3, #4
 80050d0:	693a      	ldr	r2, [r7, #16]
 80050d2:	4313      	orrs	r3, r2
 80050d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	621a      	str	r2, [r3, #32]
}
 80050e2:	bf00      	nop
 80050e4:	371c      	adds	r7, #28
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b085      	sub	sp, #20
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
 80050f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005106:	683a      	ldr	r2, [r7, #0]
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	4313      	orrs	r3, r2
 800510c:	f043 0307 	orr.w	r3, r3, #7
 8005110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	68fa      	ldr	r2, [r7, #12]
 8005116:	609a      	str	r2, [r3, #8]
}
 8005118:	bf00      	nop
 800511a:	3714      	adds	r7, #20
 800511c:	46bd      	mov	sp, r7
 800511e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005122:	4770      	bx	lr

08005124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005124:	b480      	push	{r7}
 8005126:	b087      	sub	sp, #28
 8005128:	af00      	add	r7, sp, #0
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
 8005130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800513e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	021a      	lsls	r2, r3, #8
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	431a      	orrs	r2, r3
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	4313      	orrs	r3, r2
 800514c:	697a      	ldr	r2, [r7, #20]
 800514e:	4313      	orrs	r3, r2
 8005150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	697a      	ldr	r2, [r7, #20]
 8005156:	609a      	str	r2, [r3, #8]
}
 8005158:	bf00      	nop
 800515a:	371c      	adds	r7, #28
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005164:	b480      	push	{r7}
 8005166:	b085      	sub	sp, #20
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e05a      	b.n	8005232 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2202      	movs	r2, #2
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	68fa      	ldr	r2, [r7, #12]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a21      	ldr	r2, [pc, #132]	; (8005240 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d022      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051c8:	d01d      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a1d      	ldr	r2, [pc, #116]	; (8005244 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d018      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a1b      	ldr	r2, [pc, #108]	; (8005248 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d013      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1a      	ldr	r2, [pc, #104]	; (800524c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d00e      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a18      	ldr	r2, [pc, #96]	; (8005250 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d009      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a15      	ldr	r2, [pc, #84]	; (8005258 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005202:	4293      	cmp	r3, r2
 8005204:	d10c      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800520c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4313      	orrs	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	68ba      	ldr	r2, [r7, #8]
 800521e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3714      	adds	r7, #20
 8005236:	46bd      	mov	sp, r7
 8005238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800523c:	4770      	bx	lr
 800523e:	bf00      	nop
 8005240:	40010000 	.word	0x40010000
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800
 800524c:	40000c00 	.word	0x40000c00
 8005250:	40010400 	.word	0x40010400
 8005254:	40014000 	.word	0x40014000
 8005258:	40001800 	.word	0x40001800

0800525c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b082      	sub	sp, #8
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d101      	bne.n	8005296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005292:	2301      	movs	r3, #1
 8005294:	e03f      	b.n	8005316 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fd08 	bl	8001cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	68da      	ldr	r2, [r3, #12]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fc7b 	bl	8005bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	695a      	ldr	r2, [r3, #20]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2200      	movs	r2, #0
 8005302:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2220      	movs	r2, #32
 8005308:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2220      	movs	r2, #32
 8005310:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005314:	2300      	movs	r3, #0
}
 8005316:	4618      	mov	r0, r3
 8005318:	3708      	adds	r7, #8
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}
	...

08005320 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b0ba      	sub	sp, #232	; 0xe8
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005346:	2300      	movs	r3, #0
 8005348:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800534c:	2300      	movs	r3, #0
 800534e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005356:	f003 030f 	and.w	r3, r3, #15
 800535a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800535e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10f      	bne.n	8005386 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
 8005372:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005376:	f003 0320 	and.w	r3, r3, #32
 800537a:	2b00      	cmp	r3, #0
 800537c:	d003      	beq.n	8005386 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 fb65 	bl	8005a4e <UART_Receive_IT>
      return;
 8005384:	e256      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005386:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800538a:	2b00      	cmp	r3, #0
 800538c:	f000 80de 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
 8005390:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005394:	f003 0301 	and.w	r3, r3, #1
 8005398:	2b00      	cmp	r3, #0
 800539a:	d106      	bne.n	80053aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800539c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	f000 80d1 	beq.w	800554c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80053aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00b      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
 80053b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f043 0201 	orr.w	r2, r3, #1
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d2:	f003 0304 	and.w	r3, r3, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
 80053da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d005      	beq.n	80053f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ea:	f043 0202 	orr.w	r2, r3, #2
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80053f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053f6:	f003 0302 	and.w	r3, r3, #2
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00b      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
 80053fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005402:	f003 0301 	and.w	r3, r3, #1
 8005406:	2b00      	cmp	r3, #0
 8005408:	d005      	beq.n	8005416 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	f043 0204 	orr.w	r2, r3, #4
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0308 	and.w	r3, r3, #8
 800541e:	2b00      	cmp	r3, #0
 8005420:	d011      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f003 0320 	and.w	r3, r3, #32
 800542a:	2b00      	cmp	r3, #0
 800542c:	d105      	bne.n	800543a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800542e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005432:	f003 0301 	and.w	r3, r3, #1
 8005436:	2b00      	cmp	r3, #0
 8005438:	d005      	beq.n	8005446 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543e:	f043 0208 	orr.w	r2, r3, #8
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	2b00      	cmp	r3, #0
 800544c:	f000 81ed 	beq.w	800582a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005450:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d008      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005460:	f003 0320 	and.w	r3, r3, #32
 8005464:	2b00      	cmp	r3, #0
 8005466:	d002      	beq.n	800546e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 faf0 	bl	8005a4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005478:	2b40      	cmp	r3, #64	; 0x40
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 0308 	and.w	r3, r3, #8
 800548e:	2b00      	cmp	r3, #0
 8005490:	d103      	bne.n	800549a <HAL_UART_IRQHandler+0x17a>
 8005492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005496:	2b00      	cmp	r3, #0
 8005498:	d04f      	beq.n	800553a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f9f8 	bl	8005890 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054aa:	2b40      	cmp	r3, #64	; 0x40
 80054ac:	d141      	bne.n	8005532 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3314      	adds	r3, #20
 80054b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80054c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80054c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	3314      	adds	r3, #20
 80054d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80054da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80054de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80054e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80054ea:	e841 2300 	strex	r3, r2, [r1]
 80054ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80054f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d1d9      	bne.n	80054ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d013      	beq.n	800552a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	4a7d      	ldr	r2, [pc, #500]	; (80056fc <HAL_UART_IRQHandler+0x3dc>)
 8005508:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	4618      	mov	r0, r3
 8005510:	f7fd f9f8 	bl	8002904 <HAL_DMA_Abort_IT>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d016      	beq.n	8005548 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800551e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005524:	4610      	mov	r0, r2
 8005526:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005528:	e00e      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f99a 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005530:	e00a      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f996 	bl	8005864 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005538:	e006      	b.n	8005548 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800553a:	6878      	ldr	r0, [r7, #4]
 800553c:	f000 f992 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005546:	e170      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005548:	bf00      	nop
    return;
 800554a:	e16e      	b.n	800582a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005550:	2b01      	cmp	r3, #1
 8005552:	f040 814a 	bne.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005556:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555a:	f003 0310 	and.w	r3, r3, #16
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 8143 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0310 	and.w	r3, r3, #16
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 813c 	beq.w	80057ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005572:	2300      	movs	r3, #0
 8005574:	60bb      	str	r3, [r7, #8]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60bb      	str	r3, [r7, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	60bb      	str	r3, [r7, #8]
 8005586:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	695b      	ldr	r3, [r3, #20]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	f040 80b4 	bne.w	8005700 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80055a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	f000 8140 	beq.w	800582e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055b6:	429a      	cmp	r2, r3
 80055b8:	f080 8139 	bcs.w	800582e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80055c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055ce:	f000 8088 	beq.w	80056e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	330c      	adds	r3, #12
 80055d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055e0:	e853 3f00 	ldrex	r3, [r3]
 80055e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80055e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80055ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80055f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	330c      	adds	r3, #12
 80055fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80055fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800560a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800560e:	e841 2300 	strex	r3, r2, [r1]
 8005612:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005616:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d1d9      	bne.n	80055d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	3314      	adds	r3, #20
 8005624:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005628:	e853 3f00 	ldrex	r3, [r3]
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800562e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	3314      	adds	r3, #20
 800563e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005642:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005646:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005648:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800564a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800564e:	e841 2300 	strex	r3, r2, [r1]
 8005652:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005654:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1e1      	bne.n	800561e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	3314      	adds	r3, #20
 8005660:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005662:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005664:	e853 3f00 	ldrex	r3, [r3]
 8005668:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800566a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800566c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005670:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3314      	adds	r3, #20
 800567a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800567e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005680:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005682:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005684:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005686:	e841 2300 	strex	r3, r2, [r1]
 800568a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800568c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800568e:	2b00      	cmp	r3, #0
 8005690:	d1e3      	bne.n	800565a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2220      	movs	r2, #32
 8005696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2200      	movs	r2, #0
 800569e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	330c      	adds	r3, #12
 80056a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056aa:	e853 3f00 	ldrex	r3, [r3]
 80056ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80056b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056b2:	f023 0310 	bic.w	r3, r3, #16
 80056b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	330c      	adds	r3, #12
 80056c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80056c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80056c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80056ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80056cc:	e841 2300 	strex	r3, r2, [r1]
 80056d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80056d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d1e3      	bne.n	80056a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fd f8a1 	bl	8002824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056ea:	b29b      	uxth	r3, r3
 80056ec:	1ad3      	subs	r3, r2, r3
 80056ee:	b29b      	uxth	r3, r3
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f8c0 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80056f8:	e099      	b.n	800582e <HAL_UART_IRQHandler+0x50e>
 80056fa:	bf00      	nop
 80056fc:	08005957 	.word	0x08005957
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005708:	b29b      	uxth	r3, r3
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005714:	b29b      	uxth	r3, r3
 8005716:	2b00      	cmp	r3, #0
 8005718:	f000 808b 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800571c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005720:	2b00      	cmp	r3, #0
 8005722:	f000 8086 	beq.w	8005832 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005736:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005738:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800573c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	330c      	adds	r3, #12
 8005746:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800574a:	647a      	str	r2, [r7, #68]	; 0x44
 800574c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800574e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005750:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005752:	e841 2300 	strex	r3, r2, [r1]
 8005756:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005758:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e3      	bne.n	8005726 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3314      	adds	r3, #20
 8005764:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005768:	e853 3f00 	ldrex	r3, [r3]
 800576c:	623b      	str	r3, [r7, #32]
   return(result);
 800576e:	6a3b      	ldr	r3, [r7, #32]
 8005770:	f023 0301 	bic.w	r3, r3, #1
 8005774:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3314      	adds	r3, #20
 800577e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005782:	633a      	str	r2, [r7, #48]	; 0x30
 8005784:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005788:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800578a:	e841 2300 	strex	r3, r2, [r1]
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d1e3      	bne.n	800575e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2220      	movs	r2, #32
 800579a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2200      	movs	r2, #0
 80057a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	330c      	adds	r3, #12
 80057aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ac:	693b      	ldr	r3, [r7, #16]
 80057ae:	e853 3f00 	ldrex	r3, [r3]
 80057b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f023 0310 	bic.w	r3, r3, #16
 80057ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	330c      	adds	r3, #12
 80057c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80057c8:	61fa      	str	r2, [r7, #28]
 80057ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057cc:	69b9      	ldr	r1, [r7, #24]
 80057ce:	69fa      	ldr	r2, [r7, #28]
 80057d0:	e841 2300 	strex	r3, r2, [r1]
 80057d4:	617b      	str	r3, [r7, #20]
   return(result);
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d1e3      	bne.n	80057a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f848 	bl	8005878 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80057e8:	e023      	b.n	8005832 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80057ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d009      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
 80057f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d003      	beq.n	800580a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8bb 	bl	800597e <UART_Transmit_IT>
    return;
 8005808:	e014      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800580a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800580e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005812:	2b00      	cmp	r3, #0
 8005814:	d00e      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
 8005816:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800581a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f000 f8fb 	bl	8005a1e <UART_EndTransmit_IT>
    return;
 8005828:	e004      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
    return;
 800582a:	bf00      	nop
 800582c:	e002      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 800582e:	bf00      	nop
 8005830:	e000      	b.n	8005834 <HAL_UART_IRQHandler+0x514>
      return;
 8005832:	bf00      	nop
  }
}
 8005834:	37e8      	adds	r7, #232	; 0xe8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop

0800583c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005844:	bf00      	nop
 8005846:	370c      	adds	r7, #12
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005850:	b480      	push	{r7}
 8005852:	b083      	sub	sp, #12
 8005854:	af00      	add	r7, sp, #0
 8005856:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005858:	bf00      	nop
 800585a:	370c      	adds	r7, #12
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800586c:	bf00      	nop
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005876:	4770      	bx	lr

08005878 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	460b      	mov	r3, r1
 8005882:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005884:	bf00      	nop
 8005886:	370c      	adds	r7, #12
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b095      	sub	sp, #84	; 0x54
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058a2:	e853 3f00 	ldrex	r3, [r3]
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80058ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	330c      	adds	r3, #12
 80058b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80058b8:	643a      	str	r2, [r7, #64]	; 0x40
 80058ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80058be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80058c0:	e841 2300 	strex	r3, r2, [r1]
 80058c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d1e5      	bne.n	8005898 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	3314      	adds	r3, #20
 80058d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	e853 3f00 	ldrex	r3, [r3]
 80058da:	61fb      	str	r3, [r7, #28]
   return(result);
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	f023 0301 	bic.w	r3, r3, #1
 80058e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80058ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80058ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80058f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80058fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e5      	bne.n	80058cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005904:	2b01      	cmp	r3, #1
 8005906:	d119      	bne.n	800593c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	330c      	adds	r3, #12
 800590e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	e853 3f00 	ldrex	r3, [r3]
 8005916:	60bb      	str	r3, [r7, #8]
   return(result);
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	f023 0310 	bic.w	r3, r3, #16
 800591e:	647b      	str	r3, [r7, #68]	; 0x44
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	330c      	adds	r3, #12
 8005926:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005928:	61ba      	str	r2, [r7, #24]
 800592a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800592c:	6979      	ldr	r1, [r7, #20]
 800592e:	69ba      	ldr	r2, [r7, #24]
 8005930:	e841 2300 	strex	r3, r2, [r1]
 8005934:	613b      	str	r3, [r7, #16]
   return(result);
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d1e5      	bne.n	8005908 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2220      	movs	r2, #32
 8005940:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	631a      	str	r2, [r3, #48]	; 0x30
}
 800594a:	bf00      	nop
 800594c:	3754      	adds	r7, #84	; 0x54
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005956:	b580      	push	{r7, lr}
 8005958:	b084      	sub	sp, #16
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005962:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2200      	movs	r2, #0
 8005968:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2200      	movs	r2, #0
 800596e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff ff77 	bl	8005864 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800597e:	b480      	push	{r7}
 8005980:	b085      	sub	sp, #20
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b21      	cmp	r3, #33	; 0x21
 8005990:	d13e      	bne.n	8005a10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	689b      	ldr	r3, [r3, #8]
 8005996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599a:	d114      	bne.n	80059c6 <UART_Transmit_IT+0x48>
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	691b      	ldr	r3, [r3, #16]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d110      	bne.n	80059c6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6a1b      	ldr	r3, [r3, #32]
 80059a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	1c9a      	adds	r2, r3, #2
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	621a      	str	r2, [r3, #32]
 80059c4:	e008      	b.n	80059d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	1c59      	adds	r1, r3, #1
 80059cc:	687a      	ldr	r2, [r7, #4]
 80059ce:	6211      	str	r1, [r2, #32]
 80059d0:	781a      	ldrb	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059dc:	b29b      	uxth	r3, r3
 80059de:	3b01      	subs	r3, #1
 80059e0:	b29b      	uxth	r3, r3
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	4619      	mov	r1, r3
 80059e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d10f      	bne.n	8005a0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68da      	ldr	r2, [r3, #12]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	68da      	ldr	r2, [r3, #12]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005a0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	e000      	b.n	8005a12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a10:	2302      	movs	r3, #2
  }
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3714      	adds	r7, #20
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr

08005a1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68da      	ldr	r2, [r3, #12]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2220      	movs	r2, #32
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f7ff fefc 	bl	800583c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b08c      	sub	sp, #48	; 0x30
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b22      	cmp	r3, #34	; 0x22
 8005a60:	f040 80ab 	bne.w	8005bba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a6c:	d117      	bne.n	8005a9e <UART_Receive_IT+0x50>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d113      	bne.n	8005a9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005a76:	2300      	movs	r3, #0
 8005a78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	685b      	ldr	r3, [r3, #4]
 8005a86:	b29b      	uxth	r3, r3
 8005a88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a8c:	b29a      	uxth	r2, r3
 8005a8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a96:	1c9a      	adds	r2, r3, #2
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a9c:	e026      	b.n	8005aec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689b      	ldr	r3, [r3, #8]
 8005aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ab0:	d007      	beq.n	8005ac2 <UART_Receive_IT+0x74>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <UART_Receive_IT+0x82>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	691b      	ldr	r3, [r3, #16]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	685b      	ldr	r3, [r3, #4]
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005acc:	701a      	strb	r2, [r3, #0]
 8005ace:	e008      	b.n	8005ae2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005adc:	b2da      	uxtb	r2, r3
 8005ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ae6:	1c5a      	adds	r2, r3, #1
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	3b01      	subs	r3, #1
 8005af4:	b29b      	uxth	r3, r3
 8005af6:	687a      	ldr	r2, [r7, #4]
 8005af8:	4619      	mov	r1, r3
 8005afa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d15a      	bne.n	8005bb6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f022 0220 	bic.w	r2, r2, #32
 8005b0e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	68da      	ldr	r2, [r3, #12]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	695a      	ldr	r2, [r3, #20]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f022 0201 	bic.w	r2, r2, #1
 8005b2e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2220      	movs	r2, #32
 8005b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d135      	bne.n	8005bac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	2200      	movs	r2, #0
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	330c      	adds	r3, #12
 8005b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	e853 3f00 	ldrex	r3, [r3]
 8005b54:	613b      	str	r3, [r7, #16]
   return(result);
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	f023 0310 	bic.w	r3, r3, #16
 8005b5c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	330c      	adds	r3, #12
 8005b64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b66:	623a      	str	r2, [r7, #32]
 8005b68:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b6a:	69f9      	ldr	r1, [r7, #28]
 8005b6c:	6a3a      	ldr	r2, [r7, #32]
 8005b6e:	e841 2300 	strex	r3, r2, [r1]
 8005b72:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1e5      	bne.n	8005b46 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0310 	and.w	r3, r3, #16
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d10a      	bne.n	8005b9e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b88:	2300      	movs	r3, #0
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	60fb      	str	r3, [r7, #12]
 8005b9c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f7ff fe67 	bl	8005878 <HAL_UARTEx_RxEventCallback>
 8005baa:	e002      	b.n	8005bb2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	f7ff fe4f 	bl	8005850 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	e002      	b.n	8005bbc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	e000      	b.n	8005bbc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005bba:	2302      	movs	r3, #2
  }
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3730      	adds	r7, #48	; 0x30
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}

08005bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc8:	b09f      	sub	sp, #124	; 0x7c
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	691b      	ldr	r3, [r3, #16]
 8005bd4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bda:	68d9      	ldr	r1, [r3, #12]
 8005bdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	ea40 0301 	orr.w	r3, r0, r1
 8005be4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005be8:	689a      	ldr	r2, [r3, #8]
 8005bea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	431a      	orrs	r2, r3
 8005bf0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bf8:	69db      	ldr	r3, [r3, #28]
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005bfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	68db      	ldr	r3, [r3, #12]
 8005c04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005c08:	f021 010c 	bic.w	r1, r1, #12
 8005c0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c12:	430b      	orrs	r3, r1
 8005c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	695b      	ldr	r3, [r3, #20]
 8005c1c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c22:	6999      	ldr	r1, [r3, #24]
 8005c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c26:	681a      	ldr	r2, [r3, #0]
 8005c28:	ea40 0301 	orr.w	r3, r0, r1
 8005c2c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	4bc5      	ldr	r3, [pc, #788]	; (8005f48 <UART_SetConfig+0x384>)
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d004      	beq.n	8005c42 <UART_SetConfig+0x7e>
 8005c38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c3a:	681a      	ldr	r2, [r3, #0]
 8005c3c:	4bc3      	ldr	r3, [pc, #780]	; (8005f4c <UART_SetConfig+0x388>)
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d103      	bne.n	8005c4a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c42:	f7fe f92f 	bl	8003ea4 <HAL_RCC_GetPCLK2Freq>
 8005c46:	6778      	str	r0, [r7, #116]	; 0x74
 8005c48:	e002      	b.n	8005c50 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c4a:	f7fe f917 	bl	8003e7c <HAL_RCC_GetPCLK1Freq>
 8005c4e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c58:	f040 80b6 	bne.w	8005dc8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c5e:	461c      	mov	r4, r3
 8005c60:	f04f 0500 	mov.w	r5, #0
 8005c64:	4622      	mov	r2, r4
 8005c66:	462b      	mov	r3, r5
 8005c68:	1891      	adds	r1, r2, r2
 8005c6a:	6439      	str	r1, [r7, #64]	; 0x40
 8005c6c:	415b      	adcs	r3, r3
 8005c6e:	647b      	str	r3, [r7, #68]	; 0x44
 8005c70:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005c74:	1912      	adds	r2, r2, r4
 8005c76:	eb45 0303 	adc.w	r3, r5, r3
 8005c7a:	f04f 0000 	mov.w	r0, #0
 8005c7e:	f04f 0100 	mov.w	r1, #0
 8005c82:	00d9      	lsls	r1, r3, #3
 8005c84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c88:	00d0      	lsls	r0, r2, #3
 8005c8a:	4602      	mov	r2, r0
 8005c8c:	460b      	mov	r3, r1
 8005c8e:	1911      	adds	r1, r2, r4
 8005c90:	6639      	str	r1, [r7, #96]	; 0x60
 8005c92:	416b      	adcs	r3, r5
 8005c94:	667b      	str	r3, [r7, #100]	; 0x64
 8005c96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	f04f 0300 	mov.w	r3, #0
 8005ca0:	1891      	adds	r1, r2, r2
 8005ca2:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ca4:	415b      	adcs	r3, r3
 8005ca6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005cac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005cb0:	f7fa fa9c 	bl	80001ec <__aeabi_uldivmod>
 8005cb4:	4602      	mov	r2, r0
 8005cb6:	460b      	mov	r3, r1
 8005cb8:	4ba5      	ldr	r3, [pc, #660]	; (8005f50 <UART_SetConfig+0x38c>)
 8005cba:	fba3 2302 	umull	r2, r3, r3, r2
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	011e      	lsls	r6, r3, #4
 8005cc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cc4:	461c      	mov	r4, r3
 8005cc6:	f04f 0500 	mov.w	r5, #0
 8005cca:	4622      	mov	r2, r4
 8005ccc:	462b      	mov	r3, r5
 8005cce:	1891      	adds	r1, r2, r2
 8005cd0:	6339      	str	r1, [r7, #48]	; 0x30
 8005cd2:	415b      	adcs	r3, r3
 8005cd4:	637b      	str	r3, [r7, #52]	; 0x34
 8005cd6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005cda:	1912      	adds	r2, r2, r4
 8005cdc:	eb45 0303 	adc.w	r3, r5, r3
 8005ce0:	f04f 0000 	mov.w	r0, #0
 8005ce4:	f04f 0100 	mov.w	r1, #0
 8005ce8:	00d9      	lsls	r1, r3, #3
 8005cea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005cee:	00d0      	lsls	r0, r2, #3
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	1911      	adds	r1, r2, r4
 8005cf6:	65b9      	str	r1, [r7, #88]	; 0x58
 8005cf8:	416b      	adcs	r3, r5
 8005cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	461a      	mov	r2, r3
 8005d02:	f04f 0300 	mov.w	r3, #0
 8005d06:	1891      	adds	r1, r2, r2
 8005d08:	62b9      	str	r1, [r7, #40]	; 0x28
 8005d0a:	415b      	adcs	r3, r3
 8005d0c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d0e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005d12:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005d16:	f7fa fa69 	bl	80001ec <__aeabi_uldivmod>
 8005d1a:	4602      	mov	r2, r0
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	4b8c      	ldr	r3, [pc, #560]	; (8005f50 <UART_SetConfig+0x38c>)
 8005d20:	fba3 1302 	umull	r1, r3, r3, r2
 8005d24:	095b      	lsrs	r3, r3, #5
 8005d26:	2164      	movs	r1, #100	; 0x64
 8005d28:	fb01 f303 	mul.w	r3, r1, r3
 8005d2c:	1ad3      	subs	r3, r2, r3
 8005d2e:	00db      	lsls	r3, r3, #3
 8005d30:	3332      	adds	r3, #50	; 0x32
 8005d32:	4a87      	ldr	r2, [pc, #540]	; (8005f50 <UART_SetConfig+0x38c>)
 8005d34:	fba2 2303 	umull	r2, r3, r2, r3
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005d40:	441e      	add	r6, r3
 8005d42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d44:	4618      	mov	r0, r3
 8005d46:	f04f 0100 	mov.w	r1, #0
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	1894      	adds	r4, r2, r2
 8005d50:	623c      	str	r4, [r7, #32]
 8005d52:	415b      	adcs	r3, r3
 8005d54:	627b      	str	r3, [r7, #36]	; 0x24
 8005d56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d5a:	1812      	adds	r2, r2, r0
 8005d5c:	eb41 0303 	adc.w	r3, r1, r3
 8005d60:	f04f 0400 	mov.w	r4, #0
 8005d64:	f04f 0500 	mov.w	r5, #0
 8005d68:	00dd      	lsls	r5, r3, #3
 8005d6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d6e:	00d4      	lsls	r4, r2, #3
 8005d70:	4622      	mov	r2, r4
 8005d72:	462b      	mov	r3, r5
 8005d74:	1814      	adds	r4, r2, r0
 8005d76:	653c      	str	r4, [r7, #80]	; 0x50
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005d7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	461a      	mov	r2, r3
 8005d82:	f04f 0300 	mov.w	r3, #0
 8005d86:	1891      	adds	r1, r2, r2
 8005d88:	61b9      	str	r1, [r7, #24]
 8005d8a:	415b      	adcs	r3, r3
 8005d8c:	61fb      	str	r3, [r7, #28]
 8005d8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d92:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005d96:	f7fa fa29 	bl	80001ec <__aeabi_uldivmod>
 8005d9a:	4602      	mov	r2, r0
 8005d9c:	460b      	mov	r3, r1
 8005d9e:	4b6c      	ldr	r3, [pc, #432]	; (8005f50 <UART_SetConfig+0x38c>)
 8005da0:	fba3 1302 	umull	r1, r3, r3, r2
 8005da4:	095b      	lsrs	r3, r3, #5
 8005da6:	2164      	movs	r1, #100	; 0x64
 8005da8:	fb01 f303 	mul.w	r3, r1, r3
 8005dac:	1ad3      	subs	r3, r2, r3
 8005dae:	00db      	lsls	r3, r3, #3
 8005db0:	3332      	adds	r3, #50	; 0x32
 8005db2:	4a67      	ldr	r2, [pc, #412]	; (8005f50 <UART_SetConfig+0x38c>)
 8005db4:	fba2 2303 	umull	r2, r3, r2, r3
 8005db8:	095b      	lsrs	r3, r3, #5
 8005dba:	f003 0207 	and.w	r2, r3, #7
 8005dbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	4432      	add	r2, r6
 8005dc4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005dc6:	e0b9      	b.n	8005f3c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005dc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005dca:	461c      	mov	r4, r3
 8005dcc:	f04f 0500 	mov.w	r5, #0
 8005dd0:	4622      	mov	r2, r4
 8005dd2:	462b      	mov	r3, r5
 8005dd4:	1891      	adds	r1, r2, r2
 8005dd6:	6139      	str	r1, [r7, #16]
 8005dd8:	415b      	adcs	r3, r3
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005de0:	1912      	adds	r2, r2, r4
 8005de2:	eb45 0303 	adc.w	r3, r5, r3
 8005de6:	f04f 0000 	mov.w	r0, #0
 8005dea:	f04f 0100 	mov.w	r1, #0
 8005dee:	00d9      	lsls	r1, r3, #3
 8005df0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005df4:	00d0      	lsls	r0, r2, #3
 8005df6:	4602      	mov	r2, r0
 8005df8:	460b      	mov	r3, r1
 8005dfa:	eb12 0804 	adds.w	r8, r2, r4
 8005dfe:	eb43 0905 	adc.w	r9, r3, r5
 8005e02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e04:	685b      	ldr	r3, [r3, #4]
 8005e06:	4618      	mov	r0, r3
 8005e08:	f04f 0100 	mov.w	r1, #0
 8005e0c:	f04f 0200 	mov.w	r2, #0
 8005e10:	f04f 0300 	mov.w	r3, #0
 8005e14:	008b      	lsls	r3, r1, #2
 8005e16:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e1a:	0082      	lsls	r2, r0, #2
 8005e1c:	4640      	mov	r0, r8
 8005e1e:	4649      	mov	r1, r9
 8005e20:	f7fa f9e4 	bl	80001ec <__aeabi_uldivmod>
 8005e24:	4602      	mov	r2, r0
 8005e26:	460b      	mov	r3, r1
 8005e28:	4b49      	ldr	r3, [pc, #292]	; (8005f50 <UART_SetConfig+0x38c>)
 8005e2a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e2e:	095b      	lsrs	r3, r3, #5
 8005e30:	011e      	lsls	r6, r3, #4
 8005e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e34:	4618      	mov	r0, r3
 8005e36:	f04f 0100 	mov.w	r1, #0
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	460b      	mov	r3, r1
 8005e3e:	1894      	adds	r4, r2, r2
 8005e40:	60bc      	str	r4, [r7, #8]
 8005e42:	415b      	adcs	r3, r3
 8005e44:	60fb      	str	r3, [r7, #12]
 8005e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e4a:	1812      	adds	r2, r2, r0
 8005e4c:	eb41 0303 	adc.w	r3, r1, r3
 8005e50:	f04f 0400 	mov.w	r4, #0
 8005e54:	f04f 0500 	mov.w	r5, #0
 8005e58:	00dd      	lsls	r5, r3, #3
 8005e5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005e5e:	00d4      	lsls	r4, r2, #3
 8005e60:	4622      	mov	r2, r4
 8005e62:	462b      	mov	r3, r5
 8005e64:	1814      	adds	r4, r2, r0
 8005e66:	64bc      	str	r4, [r7, #72]	; 0x48
 8005e68:	414b      	adcs	r3, r1
 8005e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6e:	685b      	ldr	r3, [r3, #4]
 8005e70:	4618      	mov	r0, r3
 8005e72:	f04f 0100 	mov.w	r1, #0
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	008b      	lsls	r3, r1, #2
 8005e80:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005e84:	0082      	lsls	r2, r0, #2
 8005e86:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005e8a:	f7fa f9af 	bl	80001ec <__aeabi_uldivmod>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	460b      	mov	r3, r1
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <UART_SetConfig+0x38c>)
 8005e94:	fba3 1302 	umull	r1, r3, r3, r2
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	2164      	movs	r1, #100	; 0x64
 8005e9c:	fb01 f303 	mul.w	r3, r1, r3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	011b      	lsls	r3, r3, #4
 8005ea4:	3332      	adds	r3, #50	; 0x32
 8005ea6:	4a2a      	ldr	r2, [pc, #168]	; (8005f50 <UART_SetConfig+0x38c>)
 8005ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8005eac:	095b      	lsrs	r3, r3, #5
 8005eae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005eb2:	441e      	add	r6, r3
 8005eb4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f04f 0100 	mov.w	r1, #0
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	1894      	adds	r4, r2, r2
 8005ec2:	603c      	str	r4, [r7, #0]
 8005ec4:	415b      	adcs	r3, r3
 8005ec6:	607b      	str	r3, [r7, #4]
 8005ec8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ecc:	1812      	adds	r2, r2, r0
 8005ece:	eb41 0303 	adc.w	r3, r1, r3
 8005ed2:	f04f 0400 	mov.w	r4, #0
 8005ed6:	f04f 0500 	mov.w	r5, #0
 8005eda:	00dd      	lsls	r5, r3, #3
 8005edc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ee0:	00d4      	lsls	r4, r2, #3
 8005ee2:	4622      	mov	r2, r4
 8005ee4:	462b      	mov	r3, r5
 8005ee6:	eb12 0a00 	adds.w	sl, r2, r0
 8005eea:	eb43 0b01 	adc.w	fp, r3, r1
 8005eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f04f 0100 	mov.w	r1, #0
 8005ef8:	f04f 0200 	mov.w	r2, #0
 8005efc:	f04f 0300 	mov.w	r3, #0
 8005f00:	008b      	lsls	r3, r1, #2
 8005f02:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005f06:	0082      	lsls	r2, r0, #2
 8005f08:	4650      	mov	r0, sl
 8005f0a:	4659      	mov	r1, fp
 8005f0c:	f7fa f96e 	bl	80001ec <__aeabi_uldivmod>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4b0e      	ldr	r3, [pc, #56]	; (8005f50 <UART_SetConfig+0x38c>)
 8005f16:	fba3 1302 	umull	r1, r3, r3, r2
 8005f1a:	095b      	lsrs	r3, r3, #5
 8005f1c:	2164      	movs	r1, #100	; 0x64
 8005f1e:	fb01 f303 	mul.w	r3, r1, r3
 8005f22:	1ad3      	subs	r3, r2, r3
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	3332      	adds	r3, #50	; 0x32
 8005f28:	4a09      	ldr	r2, [pc, #36]	; (8005f50 <UART_SetConfig+0x38c>)
 8005f2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f2e:	095b      	lsrs	r3, r3, #5
 8005f30:	f003 020f 	and.w	r2, r3, #15
 8005f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4432      	add	r2, r6
 8005f3a:	609a      	str	r2, [r3, #8]
}
 8005f3c:	bf00      	nop
 8005f3e:	377c      	adds	r7, #124	; 0x7c
 8005f40:	46bd      	mov	sp, r7
 8005f42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f46:	bf00      	nop
 8005f48:	40011000 	.word	0x40011000
 8005f4c:	40011400 	.word	0x40011400
 8005f50:	51eb851f 	.word	0x51eb851f

08005f54 <__libc_init_array>:
 8005f54:	b570      	push	{r4, r5, r6, lr}
 8005f56:	4d0d      	ldr	r5, [pc, #52]	; (8005f8c <__libc_init_array+0x38>)
 8005f58:	4c0d      	ldr	r4, [pc, #52]	; (8005f90 <__libc_init_array+0x3c>)
 8005f5a:	1b64      	subs	r4, r4, r5
 8005f5c:	10a4      	asrs	r4, r4, #2
 8005f5e:	2600      	movs	r6, #0
 8005f60:	42a6      	cmp	r6, r4
 8005f62:	d109      	bne.n	8005f78 <__libc_init_array+0x24>
 8005f64:	4d0b      	ldr	r5, [pc, #44]	; (8005f94 <__libc_init_array+0x40>)
 8005f66:	4c0c      	ldr	r4, [pc, #48]	; (8005f98 <__libc_init_array+0x44>)
 8005f68:	f000 f820 	bl	8005fac <_init>
 8005f6c:	1b64      	subs	r4, r4, r5
 8005f6e:	10a4      	asrs	r4, r4, #2
 8005f70:	2600      	movs	r6, #0
 8005f72:	42a6      	cmp	r6, r4
 8005f74:	d105      	bne.n	8005f82 <__libc_init_array+0x2e>
 8005f76:	bd70      	pop	{r4, r5, r6, pc}
 8005f78:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f7c:	4798      	blx	r3
 8005f7e:	3601      	adds	r6, #1
 8005f80:	e7ee      	b.n	8005f60 <__libc_init_array+0xc>
 8005f82:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f86:	4798      	blx	r3
 8005f88:	3601      	adds	r6, #1
 8005f8a:	e7f2      	b.n	8005f72 <__libc_init_array+0x1e>
 8005f8c:	08006004 	.word	0x08006004
 8005f90:	08006004 	.word	0x08006004
 8005f94:	08006004 	.word	0x08006004
 8005f98:	08006008 	.word	0x08006008

08005f9c <memset>:
 8005f9c:	4402      	add	r2, r0
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d100      	bne.n	8005fa6 <memset+0xa>
 8005fa4:	4770      	bx	lr
 8005fa6:	f803 1b01 	strb.w	r1, [r3], #1
 8005faa:	e7f9      	b.n	8005fa0 <memset+0x4>

08005fac <_init>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr

08005fb8 <_fini>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr
