
STM32F411_test_CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08004000  08004000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a98  08004198  08004198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08005c30  08005c30  00002c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c40  08005c40  0000300c  2**0
                  CONTENTS
  4 .ARM          00000008  08005c40  08005c40  00002c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c48  08005c48  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c48  08005c48  00002c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005c4c  08005c4c  00002c4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005c50  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000048  2000000c  08005c5c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000054  08005c5c  00003054  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000052bb  00000000  00000000  0000303c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001536  00000000  00000000  000082f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000590  00000000  00000000  00009830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000407  00000000  00000000  00009dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000153fb  00000000  00000000  0000a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007a0e  00000000  00000000  0001f5c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085446  00000000  00000000  00026fd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001448  00000000  00000000  000ac45c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000093  00000000  00000000  000ad8a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08004198 <__do_global_dtors_aux>:
 8004198:	b510      	push	{r4, lr}
 800419a:	4c05      	ldr	r4, [pc, #20]	@ (80041b0 <__do_global_dtors_aux+0x18>)
 800419c:	7823      	ldrb	r3, [r4, #0]
 800419e:	b933      	cbnz	r3, 80041ae <__do_global_dtors_aux+0x16>
 80041a0:	4b04      	ldr	r3, [pc, #16]	@ (80041b4 <__do_global_dtors_aux+0x1c>)
 80041a2:	b113      	cbz	r3, 80041aa <__do_global_dtors_aux+0x12>
 80041a4:	4804      	ldr	r0, [pc, #16]	@ (80041b8 <__do_global_dtors_aux+0x20>)
 80041a6:	f3af 8000 	nop.w
 80041aa:	2301      	movs	r3, #1
 80041ac:	7023      	strb	r3, [r4, #0]
 80041ae:	bd10      	pop	{r4, pc}
 80041b0:	2000000c 	.word	0x2000000c
 80041b4:	00000000 	.word	0x00000000
 80041b8:	08005c18 	.word	0x08005c18

080041bc <frame_dummy>:
 80041bc:	b508      	push	{r3, lr}
 80041be:	4b03      	ldr	r3, [pc, #12]	@ (80041cc <frame_dummy+0x10>)
 80041c0:	b11b      	cbz	r3, 80041ca <frame_dummy+0xe>
 80041c2:	4903      	ldr	r1, [pc, #12]	@ (80041d0 <frame_dummy+0x14>)
 80041c4:	4803      	ldr	r0, [pc, #12]	@ (80041d4 <frame_dummy+0x18>)
 80041c6:	f3af 8000 	nop.w
 80041ca:	bd08      	pop	{r3, pc}
 80041cc:	00000000 	.word	0x00000000
 80041d0:	20000010 	.word	0x20000010
 80041d4:	08005c18 	.word	0x08005c18

080041d8 <__aeabi_uldivmod>:
 80041d8:	b953      	cbnz	r3, 80041f0 <__aeabi_uldivmod+0x18>
 80041da:	b94a      	cbnz	r2, 80041f0 <__aeabi_uldivmod+0x18>
 80041dc:	2900      	cmp	r1, #0
 80041de:	bf08      	it	eq
 80041e0:	2800      	cmpeq	r0, #0
 80041e2:	bf1c      	itt	ne
 80041e4:	f04f 31ff 	movne.w	r1, #4294967295
 80041e8:	f04f 30ff 	movne.w	r0, #4294967295
 80041ec:	f000 b96a 	b.w	80044c4 <__aeabi_idiv0>
 80041f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80041f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80041f8:	f000 f806 	bl	8004208 <__udivmoddi4>
 80041fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8004200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004204:	b004      	add	sp, #16
 8004206:	4770      	bx	lr

08004208 <__udivmoddi4>:
 8004208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800420c:	9d08      	ldr	r5, [sp, #32]
 800420e:	460c      	mov	r4, r1
 8004210:	2b00      	cmp	r3, #0
 8004212:	d14e      	bne.n	80042b2 <__udivmoddi4+0xaa>
 8004214:	4694      	mov	ip, r2
 8004216:	458c      	cmp	ip, r1
 8004218:	4686      	mov	lr, r0
 800421a:	fab2 f282 	clz	r2, r2
 800421e:	d962      	bls.n	80042e6 <__udivmoddi4+0xde>
 8004220:	b14a      	cbz	r2, 8004236 <__udivmoddi4+0x2e>
 8004222:	f1c2 0320 	rsb	r3, r2, #32
 8004226:	4091      	lsls	r1, r2
 8004228:	fa20 f303 	lsr.w	r3, r0, r3
 800422c:	fa0c fc02 	lsl.w	ip, ip, r2
 8004230:	4319      	orrs	r1, r3
 8004232:	fa00 fe02 	lsl.w	lr, r0, r2
 8004236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800423a:	fa1f f68c 	uxth.w	r6, ip
 800423e:	fbb1 f4f7 	udiv	r4, r1, r7
 8004242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004246:	fb07 1114 	mls	r1, r7, r4, r1
 800424a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800424e:	fb04 f106 	mul.w	r1, r4, r6
 8004252:	4299      	cmp	r1, r3
 8004254:	d90a      	bls.n	800426c <__udivmoddi4+0x64>
 8004256:	eb1c 0303 	adds.w	r3, ip, r3
 800425a:	f104 30ff 	add.w	r0, r4, #4294967295
 800425e:	f080 8112 	bcs.w	8004486 <__udivmoddi4+0x27e>
 8004262:	4299      	cmp	r1, r3
 8004264:	f240 810f 	bls.w	8004486 <__udivmoddi4+0x27e>
 8004268:	3c02      	subs	r4, #2
 800426a:	4463      	add	r3, ip
 800426c:	1a59      	subs	r1, r3, r1
 800426e:	fa1f f38e 	uxth.w	r3, lr
 8004272:	fbb1 f0f7 	udiv	r0, r1, r7
 8004276:	fb07 1110 	mls	r1, r7, r0, r1
 800427a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800427e:	fb00 f606 	mul.w	r6, r0, r6
 8004282:	429e      	cmp	r6, r3
 8004284:	d90a      	bls.n	800429c <__udivmoddi4+0x94>
 8004286:	eb1c 0303 	adds.w	r3, ip, r3
 800428a:	f100 31ff 	add.w	r1, r0, #4294967295
 800428e:	f080 80fc 	bcs.w	800448a <__udivmoddi4+0x282>
 8004292:	429e      	cmp	r6, r3
 8004294:	f240 80f9 	bls.w	800448a <__udivmoddi4+0x282>
 8004298:	4463      	add	r3, ip
 800429a:	3802      	subs	r0, #2
 800429c:	1b9b      	subs	r3, r3, r6
 800429e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80042a2:	2100      	movs	r1, #0
 80042a4:	b11d      	cbz	r5, 80042ae <__udivmoddi4+0xa6>
 80042a6:	40d3      	lsrs	r3, r2
 80042a8:	2200      	movs	r2, #0
 80042aa:	e9c5 3200 	strd	r3, r2, [r5]
 80042ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d905      	bls.n	80042c2 <__udivmoddi4+0xba>
 80042b6:	b10d      	cbz	r5, 80042bc <__udivmoddi4+0xb4>
 80042b8:	e9c5 0100 	strd	r0, r1, [r5]
 80042bc:	2100      	movs	r1, #0
 80042be:	4608      	mov	r0, r1
 80042c0:	e7f5      	b.n	80042ae <__udivmoddi4+0xa6>
 80042c2:	fab3 f183 	clz	r1, r3
 80042c6:	2900      	cmp	r1, #0
 80042c8:	d146      	bne.n	8004358 <__udivmoddi4+0x150>
 80042ca:	42a3      	cmp	r3, r4
 80042cc:	d302      	bcc.n	80042d4 <__udivmoddi4+0xcc>
 80042ce:	4290      	cmp	r0, r2
 80042d0:	f0c0 80f0 	bcc.w	80044b4 <__udivmoddi4+0x2ac>
 80042d4:	1a86      	subs	r6, r0, r2
 80042d6:	eb64 0303 	sbc.w	r3, r4, r3
 80042da:	2001      	movs	r0, #1
 80042dc:	2d00      	cmp	r5, #0
 80042de:	d0e6      	beq.n	80042ae <__udivmoddi4+0xa6>
 80042e0:	e9c5 6300 	strd	r6, r3, [r5]
 80042e4:	e7e3      	b.n	80042ae <__udivmoddi4+0xa6>
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	f040 8090 	bne.w	800440c <__udivmoddi4+0x204>
 80042ec:	eba1 040c 	sub.w	r4, r1, ip
 80042f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80042f4:	fa1f f78c 	uxth.w	r7, ip
 80042f8:	2101      	movs	r1, #1
 80042fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80042fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8004302:	fb08 4416 	mls	r4, r8, r6, r4
 8004306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800430a:	fb07 f006 	mul.w	r0, r7, r6
 800430e:	4298      	cmp	r0, r3
 8004310:	d908      	bls.n	8004324 <__udivmoddi4+0x11c>
 8004312:	eb1c 0303 	adds.w	r3, ip, r3
 8004316:	f106 34ff 	add.w	r4, r6, #4294967295
 800431a:	d202      	bcs.n	8004322 <__udivmoddi4+0x11a>
 800431c:	4298      	cmp	r0, r3
 800431e:	f200 80cd 	bhi.w	80044bc <__udivmoddi4+0x2b4>
 8004322:	4626      	mov	r6, r4
 8004324:	1a1c      	subs	r4, r3, r0
 8004326:	fa1f f38e 	uxth.w	r3, lr
 800432a:	fbb4 f0f8 	udiv	r0, r4, r8
 800432e:	fb08 4410 	mls	r4, r8, r0, r4
 8004332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8004336:	fb00 f707 	mul.w	r7, r0, r7
 800433a:	429f      	cmp	r7, r3
 800433c:	d908      	bls.n	8004350 <__udivmoddi4+0x148>
 800433e:	eb1c 0303 	adds.w	r3, ip, r3
 8004342:	f100 34ff 	add.w	r4, r0, #4294967295
 8004346:	d202      	bcs.n	800434e <__udivmoddi4+0x146>
 8004348:	429f      	cmp	r7, r3
 800434a:	f200 80b0 	bhi.w	80044ae <__udivmoddi4+0x2a6>
 800434e:	4620      	mov	r0, r4
 8004350:	1bdb      	subs	r3, r3, r7
 8004352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8004356:	e7a5      	b.n	80042a4 <__udivmoddi4+0x9c>
 8004358:	f1c1 0620 	rsb	r6, r1, #32
 800435c:	408b      	lsls	r3, r1
 800435e:	fa22 f706 	lsr.w	r7, r2, r6
 8004362:	431f      	orrs	r7, r3
 8004364:	fa20 fc06 	lsr.w	ip, r0, r6
 8004368:	fa04 f301 	lsl.w	r3, r4, r1
 800436c:	ea43 030c 	orr.w	r3, r3, ip
 8004370:	40f4      	lsrs	r4, r6
 8004372:	fa00 f801 	lsl.w	r8, r0, r1
 8004376:	0c38      	lsrs	r0, r7, #16
 8004378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800437c:	fbb4 fef0 	udiv	lr, r4, r0
 8004380:	fa1f fc87 	uxth.w	ip, r7
 8004384:	fb00 441e 	mls	r4, r0, lr, r4
 8004388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800438c:	fb0e f90c 	mul.w	r9, lr, ip
 8004390:	45a1      	cmp	r9, r4
 8004392:	fa02 f201 	lsl.w	r2, r2, r1
 8004396:	d90a      	bls.n	80043ae <__udivmoddi4+0x1a6>
 8004398:	193c      	adds	r4, r7, r4
 800439a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800439e:	f080 8084 	bcs.w	80044aa <__udivmoddi4+0x2a2>
 80043a2:	45a1      	cmp	r9, r4
 80043a4:	f240 8081 	bls.w	80044aa <__udivmoddi4+0x2a2>
 80043a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80043ac:	443c      	add	r4, r7
 80043ae:	eba4 0409 	sub.w	r4, r4, r9
 80043b2:	fa1f f983 	uxth.w	r9, r3
 80043b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80043ba:	fb00 4413 	mls	r4, r0, r3, r4
 80043be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80043c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80043c6:	45a4      	cmp	ip, r4
 80043c8:	d907      	bls.n	80043da <__udivmoddi4+0x1d2>
 80043ca:	193c      	adds	r4, r7, r4
 80043cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80043d0:	d267      	bcs.n	80044a2 <__udivmoddi4+0x29a>
 80043d2:	45a4      	cmp	ip, r4
 80043d4:	d965      	bls.n	80044a2 <__udivmoddi4+0x29a>
 80043d6:	3b02      	subs	r3, #2
 80043d8:	443c      	add	r4, r7
 80043da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80043de:	fba0 9302 	umull	r9, r3, r0, r2
 80043e2:	eba4 040c 	sub.w	r4, r4, ip
 80043e6:	429c      	cmp	r4, r3
 80043e8:	46ce      	mov	lr, r9
 80043ea:	469c      	mov	ip, r3
 80043ec:	d351      	bcc.n	8004492 <__udivmoddi4+0x28a>
 80043ee:	d04e      	beq.n	800448e <__udivmoddi4+0x286>
 80043f0:	b155      	cbz	r5, 8004408 <__udivmoddi4+0x200>
 80043f2:	ebb8 030e 	subs.w	r3, r8, lr
 80043f6:	eb64 040c 	sbc.w	r4, r4, ip
 80043fa:	fa04 f606 	lsl.w	r6, r4, r6
 80043fe:	40cb      	lsrs	r3, r1
 8004400:	431e      	orrs	r6, r3
 8004402:	40cc      	lsrs	r4, r1
 8004404:	e9c5 6400 	strd	r6, r4, [r5]
 8004408:	2100      	movs	r1, #0
 800440a:	e750      	b.n	80042ae <__udivmoddi4+0xa6>
 800440c:	f1c2 0320 	rsb	r3, r2, #32
 8004410:	fa20 f103 	lsr.w	r1, r0, r3
 8004414:	fa0c fc02 	lsl.w	ip, ip, r2
 8004418:	fa24 f303 	lsr.w	r3, r4, r3
 800441c:	4094      	lsls	r4, r2
 800441e:	430c      	orrs	r4, r1
 8004420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8004424:	fa00 fe02 	lsl.w	lr, r0, r2
 8004428:	fa1f f78c 	uxth.w	r7, ip
 800442c:	fbb3 f0f8 	udiv	r0, r3, r8
 8004430:	fb08 3110 	mls	r1, r8, r0, r3
 8004434:	0c23      	lsrs	r3, r4, #16
 8004436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800443a:	fb00 f107 	mul.w	r1, r0, r7
 800443e:	4299      	cmp	r1, r3
 8004440:	d908      	bls.n	8004454 <__udivmoddi4+0x24c>
 8004442:	eb1c 0303 	adds.w	r3, ip, r3
 8004446:	f100 36ff 	add.w	r6, r0, #4294967295
 800444a:	d22c      	bcs.n	80044a6 <__udivmoddi4+0x29e>
 800444c:	4299      	cmp	r1, r3
 800444e:	d92a      	bls.n	80044a6 <__udivmoddi4+0x29e>
 8004450:	3802      	subs	r0, #2
 8004452:	4463      	add	r3, ip
 8004454:	1a5b      	subs	r3, r3, r1
 8004456:	b2a4      	uxth	r4, r4
 8004458:	fbb3 f1f8 	udiv	r1, r3, r8
 800445c:	fb08 3311 	mls	r3, r8, r1, r3
 8004460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8004464:	fb01 f307 	mul.w	r3, r1, r7
 8004468:	42a3      	cmp	r3, r4
 800446a:	d908      	bls.n	800447e <__udivmoddi4+0x276>
 800446c:	eb1c 0404 	adds.w	r4, ip, r4
 8004470:	f101 36ff 	add.w	r6, r1, #4294967295
 8004474:	d213      	bcs.n	800449e <__udivmoddi4+0x296>
 8004476:	42a3      	cmp	r3, r4
 8004478:	d911      	bls.n	800449e <__udivmoddi4+0x296>
 800447a:	3902      	subs	r1, #2
 800447c:	4464      	add	r4, ip
 800447e:	1ae4      	subs	r4, r4, r3
 8004480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8004484:	e739      	b.n	80042fa <__udivmoddi4+0xf2>
 8004486:	4604      	mov	r4, r0
 8004488:	e6f0      	b.n	800426c <__udivmoddi4+0x64>
 800448a:	4608      	mov	r0, r1
 800448c:	e706      	b.n	800429c <__udivmoddi4+0x94>
 800448e:	45c8      	cmp	r8, r9
 8004490:	d2ae      	bcs.n	80043f0 <__udivmoddi4+0x1e8>
 8004492:	ebb9 0e02 	subs.w	lr, r9, r2
 8004496:	eb63 0c07 	sbc.w	ip, r3, r7
 800449a:	3801      	subs	r0, #1
 800449c:	e7a8      	b.n	80043f0 <__udivmoddi4+0x1e8>
 800449e:	4631      	mov	r1, r6
 80044a0:	e7ed      	b.n	800447e <__udivmoddi4+0x276>
 80044a2:	4603      	mov	r3, r0
 80044a4:	e799      	b.n	80043da <__udivmoddi4+0x1d2>
 80044a6:	4630      	mov	r0, r6
 80044a8:	e7d4      	b.n	8004454 <__udivmoddi4+0x24c>
 80044aa:	46d6      	mov	lr, sl
 80044ac:	e77f      	b.n	80043ae <__udivmoddi4+0x1a6>
 80044ae:	4463      	add	r3, ip
 80044b0:	3802      	subs	r0, #2
 80044b2:	e74d      	b.n	8004350 <__udivmoddi4+0x148>
 80044b4:	4606      	mov	r6, r0
 80044b6:	4623      	mov	r3, r4
 80044b8:	4608      	mov	r0, r1
 80044ba:	e70f      	b.n	80042dc <__udivmoddi4+0xd4>
 80044bc:	3e02      	subs	r6, #2
 80044be:	4463      	add	r3, ip
 80044c0:	e730      	b.n	8004324 <__udivmoddi4+0x11c>
 80044c2:	bf00      	nop

080044c4 <__aeabi_idiv0>:
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b088      	sub	sp, #32
 80044cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044ce:	f107 030c 	add.w	r3, r7, #12
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]
 80044d8:	609a      	str	r2, [r3, #8]
 80044da:	60da      	str	r2, [r3, #12]
 80044dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80044de:	2300      	movs	r3, #0
 80044e0:	60bb      	str	r3, [r7, #8]
 80044e2:	4b26      	ldr	r3, [pc, #152]	@ (800457c <MX_GPIO_Init+0xb4>)
 80044e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044e6:	4a25      	ldr	r2, [pc, #148]	@ (800457c <MX_GPIO_Init+0xb4>)
 80044e8:	f043 0304 	orr.w	r3, r3, #4
 80044ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80044ee:	4b23      	ldr	r3, [pc, #140]	@ (800457c <MX_GPIO_Init+0xb4>)
 80044f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f2:	f003 0304 	and.w	r3, r3, #4
 80044f6:	60bb      	str	r3, [r7, #8]
 80044f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80044fa:	2300      	movs	r3, #0
 80044fc:	607b      	str	r3, [r7, #4]
 80044fe:	4b1f      	ldr	r3, [pc, #124]	@ (800457c <MX_GPIO_Init+0xb4>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004502:	4a1e      	ldr	r2, [pc, #120]	@ (800457c <MX_GPIO_Init+0xb4>)
 8004504:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004508:	6313      	str	r3, [r2, #48]	@ 0x30
 800450a:	4b1c      	ldr	r3, [pc, #112]	@ (800457c <MX_GPIO_Init+0xb4>)
 800450c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800450e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004512:	607b      	str	r3, [r7, #4]
 8004514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004516:	2300      	movs	r3, #0
 8004518:	603b      	str	r3, [r7, #0]
 800451a:	4b18      	ldr	r3, [pc, #96]	@ (800457c <MX_GPIO_Init+0xb4>)
 800451c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800451e:	4a17      	ldr	r2, [pc, #92]	@ (800457c <MX_GPIO_Init+0xb4>)
 8004520:	f043 0301 	orr.w	r3, r3, #1
 8004524:	6313      	str	r3, [r2, #48]	@ 0x30
 8004526:	4b15      	ldr	r3, [pc, #84]	@ (800457c <MX_GPIO_Init+0xb4>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800452a:	f003 0301 	and.w	r3, r3, #1
 800452e:	603b      	str	r3, [r7, #0]
 8004530:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(C13_GPIO_Port, C13_Pin, GPIO_PIN_SET);
 8004532:	2201      	movs	r2, #1
 8004534:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004538:	4811      	ldr	r0, [pc, #68]	@ (8004580 <MX_GPIO_Init+0xb8>)
 800453a:	f000 fd0d 	bl	8004f58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : C13_Pin */
  GPIO_InitStruct.Pin = C13_Pin;
 800453e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004542:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004544:	2301      	movs	r3, #1
 8004546:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004548:	2300      	movs	r3, #0
 800454a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800454c:	2300      	movs	r3, #0
 800454e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(C13_GPIO_Port, &GPIO_InitStruct);
 8004550:	f107 030c 	add.w	r3, r7, #12
 8004554:	4619      	mov	r1, r3
 8004556:	480a      	ldr	r0, [pc, #40]	@ (8004580 <MX_GPIO_Init+0xb8>)
 8004558:	f000 fb62 	bl	8004c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : KEY_Pin */
  GPIO_InitStruct.Pin = KEY_Pin;
 800455c:	2301      	movs	r3, #1
 800455e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004560:	2300      	movs	r3, #0
 8004562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004564:	2301      	movs	r3, #1
 8004566:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8004568:	f107 030c 	add.w	r3, r7, #12
 800456c:	4619      	mov	r1, r3
 800456e:	4805      	ldr	r0, [pc, #20]	@ (8004584 <MX_GPIO_Init+0xbc>)
 8004570:	f000 fb56 	bl	8004c20 <HAL_GPIO_Init>

}
 8004574:	bf00      	nop
 8004576:	3720      	adds	r7, #32
 8004578:	46bd      	mov	sp, r7
 800457a:	bd80      	pop	{r7, pc}
 800457c:	40023800 	.word	0x40023800
 8004580:	40020800 	.word	0x40020800
 8004584:	40020000 	.word	0x40020000

08004588 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800458c:	f3bf 8f4f 	dsb	sy
}
 8004590:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <__NVIC_SystemReset+0x24>)
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800459a:	4904      	ldr	r1, [pc, #16]	@ (80045ac <__NVIC_SystemReset+0x24>)
 800459c:	4b04      	ldr	r3, [pc, #16]	@ (80045b0 <__NVIC_SystemReset+0x28>)
 800459e:	4313      	orrs	r3, r2
 80045a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80045a2:	f3bf 8f4f 	dsb	sy
}
 80045a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80045a8:	bf00      	nop
 80045aa:	e7fd      	b.n	80045a8 <__NVIC_SystemReset+0x20>
 80045ac:	e000ed00 	.word	0xe000ed00
 80045b0:	05fa0004 	.word	0x05fa0004

080045b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  SCB->VTOR = FLASH_BASE | 0x4000; // 添加至工程开头时钟初始化之后
 80045ba:	4b35      	ldr	r3, [pc, #212]	@ (8004690 <main+0xdc>)
 80045bc:	4a35      	ldr	r2, [pc, #212]	@ (8004694 <main+0xe0>)
 80045be:	609a      	str	r2, [r3, #8]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80045c0:	f000 f9d6 	bl	8004970 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80045c4:	f000 f876 	bl	80046b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80045c8:	f7ff ff7e 	bl	80044c8 <MX_GPIO_Init>
  MX_RTC_Init();
 80045cc:	f000 f8e4 	bl	8004798 <MX_RTC_Init>
	/* C13 Breathing Lamp test */
	static uint8_t pwmset;
	static uint16_t time;
	static uint8_t timeflag;
	static uint8_t timecount;
	if ((HAL_GetTick() - tick >= 1)) {
 80045d0:	f000 fa34 	bl	8004a3c <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	4293      	cmp	r3, r2
 80045da:	d04d      	beq.n	8004678 <main+0xc4>
		tick = HAL_GetTick();
 80045dc:	f000 fa2e 	bl	8004a3c <HAL_GetTick>
 80045e0:	6078      	str	r0, [r7, #4]

		/* Breathing Lamp */
		if (timeflag == 0) {
 80045e2:	4b2d      	ldr	r3, [pc, #180]	@ (8004698 <main+0xe4>)
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d10e      	bne.n	8004608 <main+0x54>
			time++;
 80045ea:	4b2c      	ldr	r3, [pc, #176]	@ (800469c <main+0xe8>)
 80045ec:	881b      	ldrh	r3, [r3, #0]
 80045ee:	3301      	adds	r3, #1
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	4b2a      	ldr	r3, [pc, #168]	@ (800469c <main+0xe8>)
 80045f4:	801a      	strh	r2, [r3, #0]
			if (time >= 1600)
 80045f6:	4b29      	ldr	r3, [pc, #164]	@ (800469c <main+0xe8>)
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	f5b3 6fc8 	cmp.w	r3, #1600	@ 0x640
 80045fe:	d310      	bcc.n	8004622 <main+0x6e>
				timeflag = 1;
 8004600:	4b25      	ldr	r3, [pc, #148]	@ (8004698 <main+0xe4>)
 8004602:	2201      	movs	r2, #1
 8004604:	701a      	strb	r2, [r3, #0]
 8004606:	e00c      	b.n	8004622 <main+0x6e>
		} else {
			time--;
 8004608:	4b24      	ldr	r3, [pc, #144]	@ (800469c <main+0xe8>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	4b22      	ldr	r3, [pc, #136]	@ (800469c <main+0xe8>)
 8004612:	801a      	strh	r2, [r3, #0]
			if (time == 0)
 8004614:	4b21      	ldr	r3, [pc, #132]	@ (800469c <main+0xe8>)
 8004616:	881b      	ldrh	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d102      	bne.n	8004622 <main+0x6e>
				timeflag = 0;
 800461c:	4b1e      	ldr	r3, [pc, #120]	@ (8004698 <main+0xe4>)
 800461e:	2200      	movs	r2, #0
 8004620:	701a      	strb	r2, [r3, #0]
		}

		/* Duty Cycle Setting */
		pwmset = time / 100;
 8004622:	4b1e      	ldr	r3, [pc, #120]	@ (800469c <main+0xe8>)
 8004624:	881b      	ldrh	r3, [r3, #0]
 8004626:	4a1e      	ldr	r2, [pc, #120]	@ (80046a0 <main+0xec>)
 8004628:	fba2 2303 	umull	r2, r3, r2, r3
 800462c:	095b      	lsrs	r3, r3, #5
 800462e:	b29b      	uxth	r3, r3
 8004630:	b2da      	uxtb	r2, r3
 8004632:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <main+0xf0>)
 8004634:	701a      	strb	r2, [r3, #0]

		/* 20ms Pulse Width */
		if (timecount > 20)
 8004636:	4b1c      	ldr	r3, [pc, #112]	@ (80046a8 <main+0xf4>)
 8004638:	781b      	ldrb	r3, [r3, #0]
 800463a:	2b14      	cmp	r3, #20
 800463c:	d903      	bls.n	8004646 <main+0x92>
			timecount = 0;
 800463e:	4b1a      	ldr	r3, [pc, #104]	@ (80046a8 <main+0xf4>)
 8004640:	2200      	movs	r2, #0
 8004642:	701a      	strb	r2, [r3, #0]
 8004644:	e005      	b.n	8004652 <main+0x9e>
		else
			timecount++;
 8004646:	4b18      	ldr	r3, [pc, #96]	@ (80046a8 <main+0xf4>)
 8004648:	781b      	ldrb	r3, [r3, #0]
 800464a:	3301      	adds	r3, #1
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4b16      	ldr	r3, [pc, #88]	@ (80046a8 <main+0xf4>)
 8004650:	701a      	strb	r2, [r3, #0]

		if (timecount >= pwmset)
 8004652:	4b15      	ldr	r3, [pc, #84]	@ (80046a8 <main+0xf4>)
 8004654:	781a      	ldrb	r2, [r3, #0]
 8004656:	4b13      	ldr	r3, [pc, #76]	@ (80046a4 <main+0xf0>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	429a      	cmp	r2, r3
 800465c:	d306      	bcc.n	800466c <main+0xb8>
			HAL_GPIO_WritePin(C13_GPIO_Port, C13_Pin, GPIO_PIN_SET);
 800465e:	2201      	movs	r2, #1
 8004660:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004664:	4811      	ldr	r0, [pc, #68]	@ (80046ac <main+0xf8>)
 8004666:	f000 fc77 	bl	8004f58 <HAL_GPIO_WritePin>
 800466a:	e005      	b.n	8004678 <main+0xc4>
		else
			HAL_GPIO_WritePin(C13_GPIO_Port, C13_Pin, GPIO_PIN_RESET);
 800466c:	2200      	movs	r2, #0
 800466e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004672:	480e      	ldr	r0, [pc, #56]	@ (80046ac <main+0xf8>)
 8004674:	f000 fc70 	bl	8004f58 <HAL_GPIO_WritePin>
	}

	// Enter the HID Bootloader
	if(HAL_GPIO_ReadPin(KEY_GPIO_Port, KEY_Pin) == GPIO_PIN_RESET)
 8004678:	2101      	movs	r1, #1
 800467a:	480d      	ldr	r0, [pc, #52]	@ (80046b0 <main+0xfc>)
 800467c:	f000 fc54 	bl	8004f28 <HAL_GPIO_ReadPin>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <main+0xd6>
		NVIC_SystemReset();
 8004686:	f7ff ff7f 	bl	8004588 <__NVIC_SystemReset>
	__WFI();
 800468a:	bf30      	wfi
  {
 800468c:	e7a0      	b.n	80045d0 <main+0x1c>
 800468e:	bf00      	nop
 8004690:	e000ed00 	.word	0xe000ed00
 8004694:	08004000 	.word	0x08004000
 8004698:	20000028 	.word	0x20000028
 800469c:	2000002a 	.word	0x2000002a
 80046a0:	51eb851f 	.word	0x51eb851f
 80046a4:	2000002c 	.word	0x2000002c
 80046a8:	2000002d 	.word	0x2000002d
 80046ac:	40020800 	.word	0x40020800
 80046b0:	40020000 	.word	0x40020000

080046b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b094      	sub	sp, #80	@ 0x50
 80046b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046ba:	f107 0320 	add.w	r3, r7, #32
 80046be:	2230      	movs	r2, #48	@ 0x30
 80046c0:	2100      	movs	r1, #0
 80046c2:	4618      	mov	r0, r3
 80046c4:	f001 fa7c 	bl	8005bc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046c8:	f107 030c 	add.w	r3, r7, #12
 80046cc:	2200      	movs	r2, #0
 80046ce:	601a      	str	r2, [r3, #0]
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	609a      	str	r2, [r3, #8]
 80046d4:	60da      	str	r2, [r3, #12]
 80046d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80046d8:	2300      	movs	r3, #0
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	4b28      	ldr	r3, [pc, #160]	@ (8004780 <SystemClock_Config+0xcc>)
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	4a27      	ldr	r2, [pc, #156]	@ (8004780 <SystemClock_Config+0xcc>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80046e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046e8:	4b25      	ldr	r3, [pc, #148]	@ (8004780 <SystemClock_Config+0xcc>)
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046f4:	2300      	movs	r3, #0
 80046f6:	607b      	str	r3, [r7, #4]
 80046f8:	4b22      	ldr	r3, [pc, #136]	@ (8004784 <SystemClock_Config+0xd0>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a21      	ldr	r2, [pc, #132]	@ (8004784 <SystemClock_Config+0xd0>)
 80046fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004702:	6013      	str	r3, [r2, #0]
 8004704:	4b1f      	ldr	r3, [pc, #124]	@ (8004784 <SystemClock_Config+0xd0>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800470c:	607b      	str	r3, [r7, #4]
 800470e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004710:	2305      	movs	r3, #5
 8004712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004718:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800471a:	2301      	movs	r3, #1
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800471e:	2302      	movs	r3, #2
 8004720:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004722:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004726:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8004728:	230c      	movs	r3, #12
 800472a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 96;
 800472c:	2360      	movs	r3, #96	@ 0x60
 800472e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004730:	2302      	movs	r3, #2
 8004732:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8004734:	2304      	movs	r3, #4
 8004736:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004738:	f107 0320 	add.w	r3, r7, #32
 800473c:	4618      	mov	r0, r3
 800473e:	f000 fc25 	bl	8004f8c <HAL_RCC_OscConfig>
 8004742:	4603      	mov	r3, r0
 8004744:	2b00      	cmp	r3, #0
 8004746:	d001      	beq.n	800474c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004748:	f000 f81e 	bl	8004788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800474c:	230f      	movs	r3, #15
 800474e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004750:	2302      	movs	r3, #2
 8004752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004754:	2300      	movs	r3, #0
 8004756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8004758:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800475c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800475e:	2300      	movs	r3, #0
 8004760:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8004762:	f107 030c 	add.w	r3, r7, #12
 8004766:	2103      	movs	r1, #3
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe87 	bl	800547c <HAL_RCC_ClockConfig>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d001      	beq.n	8004778 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8004774:	f000 f808 	bl	8004788 <Error_Handler>
  }
}
 8004778:	bf00      	nop
 800477a:	3750      	adds	r7, #80	@ 0x50
 800477c:	46bd      	mov	sp, r7
 800477e:	bd80      	pop	{r7, pc}
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000

08004788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr
	...

08004798 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800479c:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <MX_RTC_Init+0x44>)
 800479e:	4a10      	ldr	r2, [pc, #64]	@ (80047e0 <MX_RTC_Init+0x48>)
 80047a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80047a2:	4b0e      	ldr	r3, [pc, #56]	@ (80047dc <MX_RTC_Init+0x44>)
 80047a4:	2200      	movs	r2, #0
 80047a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <MX_RTC_Init+0x44>)
 80047aa:	227f      	movs	r2, #127	@ 0x7f
 80047ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80047ae:	4b0b      	ldr	r3, [pc, #44]	@ (80047dc <MX_RTC_Init+0x44>)
 80047b0:	22ff      	movs	r2, #255	@ 0xff
 80047b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80047b4:	4b09      	ldr	r3, [pc, #36]	@ (80047dc <MX_RTC_Init+0x44>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <MX_RTC_Init+0x44>)
 80047bc:	2200      	movs	r2, #0
 80047be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <MX_RTC_Init+0x44>)
 80047c2:	2200      	movs	r2, #0
 80047c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80047c6:	4805      	ldr	r0, [pc, #20]	@ (80047dc <MX_RTC_Init+0x44>)
 80047c8:	f001 f8f4 	bl	80059b4 <HAL_RTC_Init>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d001      	beq.n	80047d6 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80047d2:	f7ff ffd9 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047d6:	bf00      	nop
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	20000030 	.word	0x20000030
 80047e0:	40002800 	.word	0x40002800

080047e4 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047ec:	f107 0308 	add.w	r3, r7, #8
 80047f0:	2200      	movs	r2, #0
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	605a      	str	r2, [r3, #4]
 80047f6:	609a      	str	r2, [r3, #8]
 80047f8:	60da      	str	r2, [r3, #12]
 80047fa:	611a      	str	r2, [r3, #16]
 80047fc:	615a      	str	r2, [r3, #20]
  if(rtcHandle->Instance==RTC)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a0c      	ldr	r2, [pc, #48]	@ (8004834 <HAL_RTC_MspInit+0x50>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d111      	bne.n	800482c <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004808:	2302      	movs	r3, #2
 800480a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800480c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004810:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004812:	f107 0308 	add.w	r3, r7, #8
 8004816:	4618      	mov	r0, r3
 8004818:	f000 ffdc 	bl	80057d4 <HAL_RCCEx_PeriphCLKConfig>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d001      	beq.n	8004826 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8004822:	f7ff ffb1 	bl	8004788 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004826:	4b04      	ldr	r3, [pc, #16]	@ (8004838 <HAL_RTC_MspInit+0x54>)
 8004828:	2201      	movs	r2, #1
 800482a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800482c:	bf00      	nop
 800482e:	3720      	adds	r7, #32
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40002800 	.word	0x40002800
 8004838:	42470e3c 	.word	0x42470e3c

0800483c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800483c:	b480      	push	{r7}
 800483e:	b083      	sub	sp, #12
 8004840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	607b      	str	r3, [r7, #4]
 8004846:	4b10      	ldr	r3, [pc, #64]	@ (8004888 <HAL_MspInit+0x4c>)
 8004848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800484a:	4a0f      	ldr	r2, [pc, #60]	@ (8004888 <HAL_MspInit+0x4c>)
 800484c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004850:	6453      	str	r3, [r2, #68]	@ 0x44
 8004852:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <HAL_MspInit+0x4c>)
 8004854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004856:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800485a:	607b      	str	r3, [r7, #4]
 800485c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800485e:	2300      	movs	r3, #0
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	4b09      	ldr	r3, [pc, #36]	@ (8004888 <HAL_MspInit+0x4c>)
 8004864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004866:	4a08      	ldr	r2, [pc, #32]	@ (8004888 <HAL_MspInit+0x4c>)
 8004868:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800486c:	6413      	str	r3, [r2, #64]	@ 0x40
 800486e:	4b06      	ldr	r3, [pc, #24]	@ (8004888 <HAL_MspInit+0x4c>)
 8004870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004872:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004876:	603b      	str	r3, [r7, #0]
 8004878:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800487a:	bf00      	nop
 800487c:	370c      	adds	r7, #12
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40023800 	.word	0x40023800

0800488c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004890:	bf00      	nop
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr

0800489a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800489a:	b480      	push	{r7}
 800489c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <HardFault_Handler+0x4>

080048a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80048a2:	b480      	push	{r7}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80048a6:	bf00      	nop
 80048a8:	e7fd      	b.n	80048a6 <MemManage_Handler+0x4>

080048aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80048aa:	b480      	push	{r7}
 80048ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80048ae:	bf00      	nop
 80048b0:	e7fd      	b.n	80048ae <BusFault_Handler+0x4>

080048b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80048b2:	b480      	push	{r7}
 80048b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80048b6:	bf00      	nop
 80048b8:	e7fd      	b.n	80048b6 <UsageFault_Handler+0x4>

080048ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80048ba:	b480      	push	{r7}
 80048bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80048be:	bf00      	nop
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80048cc:	bf00      	nop
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80048d6:	b480      	push	{r7}
 80048d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80048da:	bf00      	nop
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048e8:	f000 f894 	bl	8004a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048ec:	bf00      	nop
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f4:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <SystemInit+0x28>)
 80048f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048fa:	4a07      	ldr	r2, [pc, #28]	@ (8004918 <SystemInit+0x28>)
 80048fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004900:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004904:	4b04      	ldr	r3, [pc, #16]	@ (8004918 <SystemInit+0x28>)
 8004906:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800490a:	609a      	str	r2, [r3, #8]
#endif
}
 800490c:	bf00      	nop
 800490e:	46bd      	mov	sp, r7
 8004910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004914:	4770      	bx	lr
 8004916:	bf00      	nop
 8004918:	e000ed00 	.word	0xe000ed00

0800491c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800491c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004954 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004920:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004922:	e003      	b.n	800492c <LoopCopyDataInit>

08004924 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004924:	4b0c      	ldr	r3, [pc, #48]	@ (8004958 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004926:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004928:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800492a:	3104      	adds	r1, #4

0800492c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800492c:	480b      	ldr	r0, [pc, #44]	@ (800495c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800492e:	4b0c      	ldr	r3, [pc, #48]	@ (8004960 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004930:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004932:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004934:	d3f6      	bcc.n	8004924 <CopyDataInit>
  ldr  r2, =_sbss
 8004936:	4a0b      	ldr	r2, [pc, #44]	@ (8004964 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004938:	e002      	b.n	8004940 <LoopFillZerobss>

0800493a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800493a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800493c:	f842 3b04 	str.w	r3, [r2], #4

08004940 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004940:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004942:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004944:	d3f9      	bcc.n	800493a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004946:	f7ff ffd3 	bl	80048f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800494a:	f001 f941 	bl	8005bd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800494e:	f7ff fe31 	bl	80045b4 <main>
  bx  lr    
 8004952:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004954:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8004958:	08005c50 	.word	0x08005c50
  ldr  r0, =_sdata
 800495c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004960:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8004964:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8004968:	20000054 	.word	0x20000054

0800496c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800496c:	e7fe      	b.n	800496c <ADC_IRQHandler>
	...

08004970 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004974:	4b0e      	ldr	r3, [pc, #56]	@ (80049b0 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0d      	ldr	r2, [pc, #52]	@ (80049b0 <HAL_Init+0x40>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004980:	4b0b      	ldr	r3, [pc, #44]	@ (80049b0 <HAL_Init+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a0a      	ldr	r2, [pc, #40]	@ (80049b0 <HAL_Init+0x40>)
 8004986:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800498a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800498c:	4b08      	ldr	r3, [pc, #32]	@ (80049b0 <HAL_Init+0x40>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a07      	ldr	r2, [pc, #28]	@ (80049b0 <HAL_Init+0x40>)
 8004992:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004996:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004998:	2003      	movs	r0, #3
 800499a:	f000 f90d 	bl	8004bb8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800499e:	2000      	movs	r0, #0
 80049a0:	f000 f808 	bl	80049b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80049a4:	f7ff ff4a 	bl	800483c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80049a8:	2300      	movs	r3, #0
}
 80049aa:	4618      	mov	r0, r3
 80049ac:	bd80      	pop	{r7, pc}
 80049ae:	bf00      	nop
 80049b0:	40023c00 	.word	0x40023c00

080049b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049bc:	4b12      	ldr	r3, [pc, #72]	@ (8004a08 <HAL_InitTick+0x54>)
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4b12      	ldr	r3, [pc, #72]	@ (8004a0c <HAL_InitTick+0x58>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80049ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 f917 	bl	8004c06 <HAL_SYSTICK_Config>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d001      	beq.n	80049e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e00e      	b.n	8004a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2b0f      	cmp	r3, #15
 80049e6:	d80a      	bhi.n	80049fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049e8:	2200      	movs	r2, #0
 80049ea:	6879      	ldr	r1, [r7, #4]
 80049ec:	f04f 30ff 	mov.w	r0, #4294967295
 80049f0:	f000 f8ed 	bl	8004bce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049f4:	4a06      	ldr	r2, [pc, #24]	@ (8004a10 <HAL_InitTick+0x5c>)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
 80049fc:	e000      	b.n	8004a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3708      	adds	r7, #8
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}
 8004a08:	20000000 	.word	0x20000000
 8004a0c:	20000008 	.word	0x20000008
 8004a10:	20000004 	.word	0x20000004

08004a14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a14:	b480      	push	{r7}
 8004a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a18:	4b06      	ldr	r3, [pc, #24]	@ (8004a34 <HAL_IncTick+0x20>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4b06      	ldr	r3, [pc, #24]	@ (8004a38 <HAL_IncTick+0x24>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4413      	add	r3, r2
 8004a24:	4a04      	ldr	r2, [pc, #16]	@ (8004a38 <HAL_IncTick+0x24>)
 8004a26:	6013      	str	r3, [r2, #0]
}
 8004a28:	bf00      	nop
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	20000008 	.word	0x20000008
 8004a38:	20000050 	.word	0x20000050

08004a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8004a40:	4b03      	ldr	r3, [pc, #12]	@ (8004a50 <HAL_GetTick+0x14>)
 8004a42:	681b      	ldr	r3, [r3, #0]
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	46bd      	mov	sp, r7
 8004a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4c:	4770      	bx	lr
 8004a4e:	bf00      	nop
 8004a50:	20000050 	.word	0x20000050

08004a54 <__NVIC_SetPriorityGrouping>:
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a64:	4b0c      	ldr	r3, [pc, #48]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a6a:	68ba      	ldr	r2, [r7, #8]
 8004a6c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a70:	4013      	ands	r3, r2
 8004a72:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a78:	68bb      	ldr	r3, [r7, #8]
 8004a7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a7c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a80:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a86:	4a04      	ldr	r2, [pc, #16]	@ (8004a98 <__NVIC_SetPriorityGrouping+0x44>)
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	60d3      	str	r3, [r2, #12]
}
 8004a8c:	bf00      	nop
 8004a8e:	3714      	adds	r7, #20
 8004a90:	46bd      	mov	sp, r7
 8004a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a96:	4770      	bx	lr
 8004a98:	e000ed00 	.word	0xe000ed00

08004a9c <__NVIC_GetPriorityGrouping>:
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004aa0:	4b04      	ldr	r3, [pc, #16]	@ (8004ab4 <__NVIC_GetPriorityGrouping+0x18>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	0a1b      	lsrs	r3, r3, #8
 8004aa6:	f003 0307 	and.w	r3, r3, #7
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr
 8004ab4:	e000ed00 	.word	0xe000ed00

08004ab8 <__NVIC_SetPriority>:
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	4603      	mov	r3, r0
 8004ac0:	6039      	str	r1, [r7, #0]
 8004ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	db0a      	blt.n	8004ae2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	490c      	ldr	r1, [pc, #48]	@ (8004b04 <__NVIC_SetPriority+0x4c>)
 8004ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad6:	0112      	lsls	r2, r2, #4
 8004ad8:	b2d2      	uxtb	r2, r2
 8004ada:	440b      	add	r3, r1
 8004adc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004ae0:	e00a      	b.n	8004af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	b2da      	uxtb	r2, r3
 8004ae6:	4908      	ldr	r1, [pc, #32]	@ (8004b08 <__NVIC_SetPriority+0x50>)
 8004ae8:	79fb      	ldrb	r3, [r7, #7]
 8004aea:	f003 030f 	and.w	r3, r3, #15
 8004aee:	3b04      	subs	r3, #4
 8004af0:	0112      	lsls	r2, r2, #4
 8004af2:	b2d2      	uxtb	r2, r2
 8004af4:	440b      	add	r3, r1
 8004af6:	761a      	strb	r2, [r3, #24]
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b02:	4770      	bx	lr
 8004b04:	e000e100 	.word	0xe000e100
 8004b08:	e000ed00 	.word	0xe000ed00

08004b0c <NVIC_EncodePriority>:
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b089      	sub	sp, #36	@ 0x24
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	f1c3 0307 	rsb	r3, r3, #7
 8004b26:	2b04      	cmp	r3, #4
 8004b28:	bf28      	it	cs
 8004b2a:	2304      	movcs	r3, #4
 8004b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	3304      	adds	r3, #4
 8004b32:	2b06      	cmp	r3, #6
 8004b34:	d902      	bls.n	8004b3c <NVIC_EncodePriority+0x30>
 8004b36:	69fb      	ldr	r3, [r7, #28]
 8004b38:	3b03      	subs	r3, #3
 8004b3a:	e000      	b.n	8004b3e <NVIC_EncodePriority+0x32>
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b40:	f04f 32ff 	mov.w	r2, #4294967295
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	43da      	mvns	r2, r3
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	401a      	ands	r2, r3
 8004b50:	697b      	ldr	r3, [r7, #20]
 8004b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b54:	f04f 31ff 	mov.w	r1, #4294967295
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	43d9      	mvns	r1, r3
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b64:	4313      	orrs	r3, r2
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3724      	adds	r7, #36	@ 0x24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b84:	d301      	bcc.n	8004b8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b86:	2301      	movs	r3, #1
 8004b88:	e00f      	b.n	8004baa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b8a:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb4 <SysTick_Config+0x40>)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004b92:	210f      	movs	r1, #15
 8004b94:	f04f 30ff 	mov.w	r0, #4294967295
 8004b98:	f7ff ff8e 	bl	8004ab8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b9c:	4b05      	ldr	r3, [pc, #20]	@ (8004bb4 <SysTick_Config+0x40>)
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ba2:	4b04      	ldr	r3, [pc, #16]	@ (8004bb4 <SysTick_Config+0x40>)
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ba8:	2300      	movs	r3, #0
}
 8004baa:	4618      	mov	r0, r3
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}
 8004bb2:	bf00      	nop
 8004bb4:	e000e010 	.word	0xe000e010

08004bb8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b082      	sub	sp, #8
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7ff ff47 	bl	8004a54 <__NVIC_SetPriorityGrouping>
}
 8004bc6:	bf00      	nop
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b086      	sub	sp, #24
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
 8004bda:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004be0:	f7ff ff5c 	bl	8004a9c <__NVIC_GetPriorityGrouping>
 8004be4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004be6:	687a      	ldr	r2, [r7, #4]
 8004be8:	68b9      	ldr	r1, [r7, #8]
 8004bea:	6978      	ldr	r0, [r7, #20]
 8004bec:	f7ff ff8e 	bl	8004b0c <NVIC_EncodePriority>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f7ff ff5d 	bl	8004ab8 <__NVIC_SetPriority>
}
 8004bfe:	bf00      	nop
 8004c00:	3718      	adds	r7, #24
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b082      	sub	sp, #8
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff ffb0 	bl	8004b74 <SysTick_Config>
 8004c14:	4603      	mov	r3, r0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3708      	adds	r7, #8
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b089      	sub	sp, #36	@ 0x24
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004c32:	2300      	movs	r3, #0
 8004c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c36:	2300      	movs	r3, #0
 8004c38:	61fb      	str	r3, [r7, #28]
 8004c3a:	e159      	b.n	8004ef0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	697a      	ldr	r2, [r7, #20]
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004c50:	693a      	ldr	r2, [r7, #16]
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	429a      	cmp	r2, r3
 8004c56:	f040 8148 	bne.w	8004eea <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d005      	beq.n	8004c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d130      	bne.n	8004cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	005b      	lsls	r3, r3, #1
 8004c7c:	2203      	movs	r2, #3
 8004c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c82:	43db      	mvns	r3, r3
 8004c84:	69ba      	ldr	r2, [r7, #24]
 8004c86:	4013      	ands	r3, r2
 8004c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68da      	ldr	r2, [r3, #12]
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69ba      	ldr	r2, [r7, #24]
 8004ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ca8:	2201      	movs	r2, #1
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	fa02 f303 	lsl.w	r3, r2, r3
 8004cb0:	43db      	mvns	r3, r3
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	091b      	lsrs	r3, r3, #4
 8004cbe:	f003 0201 	and.w	r2, r3, #1
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc8:	69ba      	ldr	r2, [r7, #24]
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	69ba      	ldr	r2, [r7, #24]
 8004cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	f003 0303 	and.w	r3, r3, #3
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d017      	beq.n	8004d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ce6:	69fb      	ldr	r3, [r7, #28]
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	2203      	movs	r2, #3
 8004cec:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf0:	43db      	mvns	r3, r3
 8004cf2:	69ba      	ldr	r2, [r7, #24]
 8004cf4:	4013      	ands	r3, r2
 8004cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	689a      	ldr	r2, [r3, #8]
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	005b      	lsls	r3, r3, #1
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	69ba      	ldr	r2, [r7, #24]
 8004d06:	4313      	orrs	r3, r2
 8004d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69ba      	ldr	r2, [r7, #24]
 8004d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f003 0303 	and.w	r3, r3, #3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d123      	bne.n	8004d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	08da      	lsrs	r2, r3, #3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	3208      	adds	r2, #8
 8004d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	f003 0307 	and.w	r3, r3, #7
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	220f      	movs	r2, #15
 8004d34:	fa02 f303 	lsl.w	r3, r2, r3
 8004d38:	43db      	mvns	r3, r3
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	691a      	ldr	r2, [r3, #16]
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	f003 0307 	and.w	r3, r3, #7
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d50:	69ba      	ldr	r2, [r7, #24]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	08da      	lsrs	r2, r3, #3
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	3208      	adds	r2, #8
 8004d5e:	69b9      	ldr	r1, [r7, #24]
 8004d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d6a:	69fb      	ldr	r3, [r7, #28]
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	2203      	movs	r2, #3
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	43db      	mvns	r3, r3
 8004d76:	69ba      	ldr	r2, [r7, #24]
 8004d78:	4013      	ands	r3, r2
 8004d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	f003 0203 	and.w	r2, r3, #3
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	005b      	lsls	r3, r3, #1
 8004d88:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8c:	69ba      	ldr	r2, [r7, #24]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	69ba      	ldr	r2, [r7, #24]
 8004d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	685b      	ldr	r3, [r3, #4]
 8004d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	f000 80a2 	beq.w	8004eea <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da6:	2300      	movs	r3, #0
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	4b57      	ldr	r3, [pc, #348]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dae:	4a56      	ldr	r2, [pc, #344]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004db0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004db4:	6453      	str	r3, [r2, #68]	@ 0x44
 8004db6:	4b54      	ldr	r3, [pc, #336]	@ (8004f08 <HAL_GPIO_Init+0x2e8>)
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004dc2:	4a52      	ldr	r2, [pc, #328]	@ (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	089b      	lsrs	r3, r3, #2
 8004dc8:	3302      	adds	r3, #2
 8004dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	220f      	movs	r2, #15
 8004dda:	fa02 f303 	lsl.w	r3, r2, r3
 8004dde:	43db      	mvns	r3, r3
 8004de0:	69ba      	ldr	r2, [r7, #24]
 8004de2:	4013      	ands	r3, r2
 8004de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	4a49      	ldr	r2, [pc, #292]	@ (8004f10 <HAL_GPIO_Init+0x2f0>)
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d019      	beq.n	8004e22 <HAL_GPIO_Init+0x202>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	4a48      	ldr	r2, [pc, #288]	@ (8004f14 <HAL_GPIO_Init+0x2f4>)
 8004df2:	4293      	cmp	r3, r2
 8004df4:	d013      	beq.n	8004e1e <HAL_GPIO_Init+0x1fe>
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4a47      	ldr	r2, [pc, #284]	@ (8004f18 <HAL_GPIO_Init+0x2f8>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d00d      	beq.n	8004e1a <HAL_GPIO_Init+0x1fa>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	4a46      	ldr	r2, [pc, #280]	@ (8004f1c <HAL_GPIO_Init+0x2fc>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d007      	beq.n	8004e16 <HAL_GPIO_Init+0x1f6>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	4a45      	ldr	r2, [pc, #276]	@ (8004f20 <HAL_GPIO_Init+0x300>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d101      	bne.n	8004e12 <HAL_GPIO_Init+0x1f2>
 8004e0e:	2304      	movs	r3, #4
 8004e10:	e008      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e12:	2307      	movs	r3, #7
 8004e14:	e006      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e16:	2303      	movs	r3, #3
 8004e18:	e004      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e1a:	2302      	movs	r3, #2
 8004e1c:	e002      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e1e:	2301      	movs	r3, #1
 8004e20:	e000      	b.n	8004e24 <HAL_GPIO_Init+0x204>
 8004e22:	2300      	movs	r3, #0
 8004e24:	69fa      	ldr	r2, [r7, #28]
 8004e26:	f002 0203 	and.w	r2, r2, #3
 8004e2a:	0092      	lsls	r2, r2, #2
 8004e2c:	4093      	lsls	r3, r2
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	4313      	orrs	r3, r2
 8004e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004e34:	4935      	ldr	r1, [pc, #212]	@ (8004f0c <HAL_GPIO_Init+0x2ec>)
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	089b      	lsrs	r3, r3, #2
 8004e3a:	3302      	adds	r3, #2
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004e42:	4b38      	ldr	r3, [pc, #224]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	69ba      	ldr	r2, [r7, #24]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d003      	beq.n	8004e66 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004e5e:	69ba      	ldr	r2, [r7, #24]
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	4313      	orrs	r3, r2
 8004e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004e66:	4a2f      	ldr	r2, [pc, #188]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004e6c:	4b2d      	ldr	r3, [pc, #180]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e6e:	68db      	ldr	r3, [r3, #12]
 8004e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	43db      	mvns	r3, r3
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	4013      	ands	r3, r2
 8004e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004e90:	4a24      	ldr	r2, [pc, #144]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004e96:	4b23      	ldr	r3, [pc, #140]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	43db      	mvns	r3, r3
 8004ea0:	69ba      	ldr	r2, [r7, #24]
 8004ea2:	4013      	ands	r3, r2
 8004ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d003      	beq.n	8004eba <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004eb2:	69ba      	ldr	r2, [r7, #24]
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004eba:	4a1a      	ldr	r2, [pc, #104]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ebc:	69bb      	ldr	r3, [r7, #24]
 8004ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ec0:	4b18      	ldr	r3, [pc, #96]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d003      	beq.n	8004ee4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004ee4:	4a0f      	ldr	r2, [pc, #60]	@ (8004f24 <HAL_GPIO_Init+0x304>)
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	3301      	adds	r3, #1
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	69fb      	ldr	r3, [r7, #28]
 8004ef2:	2b0f      	cmp	r3, #15
 8004ef4:	f67f aea2 	bls.w	8004c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ef8:	bf00      	nop
 8004efa:	bf00      	nop
 8004efc:	3724      	adds	r7, #36	@ 0x24
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40023800 	.word	0x40023800
 8004f0c:	40013800 	.word	0x40013800
 8004f10:	40020000 	.word	0x40020000
 8004f14:	40020400 	.word	0x40020400
 8004f18:	40020800 	.word	0x40020800
 8004f1c:	40020c00 	.word	0x40020c00
 8004f20:	40021000 	.word	0x40021000
 8004f24:	40013c00 	.word	0x40013c00

08004f28 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
 8004f30:	460b      	mov	r3, r1
 8004f32:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	691a      	ldr	r2, [r3, #16]
 8004f38:	887b      	ldrh	r3, [r7, #2]
 8004f3a:	4013      	ands	r3, r2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d002      	beq.n	8004f46 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004f40:	2301      	movs	r3, #1
 8004f42:	73fb      	strb	r3, [r7, #15]
 8004f44:	e001      	b.n	8004f4a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004f46:	2300      	movs	r3, #0
 8004f48:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004f4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	460b      	mov	r3, r1
 8004f62:	807b      	strh	r3, [r7, #2]
 8004f64:	4613      	mov	r3, r2
 8004f66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f68:	787b      	ldrb	r3, [r7, #1]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004f6e:	887a      	ldrh	r2, [r7, #2]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004f74:	e003      	b.n	8004f7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f76:	887b      	ldrh	r3, [r7, #2]
 8004f78:	041a      	lsls	r2, r3, #16
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	619a      	str	r2, [r3, #24]
}
 8004f7e:	bf00      	nop
 8004f80:	370c      	adds	r7, #12
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
	...

08004f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d101      	bne.n	8004f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	e267      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d075      	beq.n	8005096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004faa:	4b88      	ldr	r3, [pc, #544]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 030c 	and.w	r3, r3, #12
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d00c      	beq.n	8004fd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fb6:	4b85      	ldr	r3, [pc, #532]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004fbe:	2b08      	cmp	r3, #8
 8004fc0:	d112      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fc2:	4b82      	ldr	r3, [pc, #520]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004fce:	d10b      	bne.n	8004fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fd0:	4b7e      	ldr	r3, [pc, #504]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d05b      	beq.n	8005094 <HAL_RCC_OscConfig+0x108>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d157      	bne.n	8005094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e242      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ff0:	d106      	bne.n	8005000 <HAL_RCC_OscConfig+0x74>
 8004ff2:	4b76      	ldr	r3, [pc, #472]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a75      	ldr	r2, [pc, #468]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8004ff8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ffc:	6013      	str	r3, [r2, #0]
 8004ffe:	e01d      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005008:	d10c      	bne.n	8005024 <HAL_RCC_OscConfig+0x98>
 800500a:	4b70      	ldr	r3, [pc, #448]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a6f      	ldr	r2, [pc, #444]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005010:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005014:	6013      	str	r3, [r2, #0]
 8005016:	4b6d      	ldr	r3, [pc, #436]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a6c      	ldr	r2, [pc, #432]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800501c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005020:	6013      	str	r3, [r2, #0]
 8005022:	e00b      	b.n	800503c <HAL_RCC_OscConfig+0xb0>
 8005024:	4b69      	ldr	r3, [pc, #420]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a68      	ldr	r2, [pc, #416]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800502a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800502e:	6013      	str	r3, [r2, #0]
 8005030:	4b66      	ldr	r3, [pc, #408]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a65      	ldr	r2, [pc, #404]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005036:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800503a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d013      	beq.n	800506c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005044:	f7ff fcfa 	bl	8004a3c <HAL_GetTick>
 8005048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800504a:	e008      	b.n	800505e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800504c:	f7ff fcf6 	bl	8004a3c <HAL_GetTick>
 8005050:	4602      	mov	r2, r0
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	1ad3      	subs	r3, r2, r3
 8005056:	2b64      	cmp	r3, #100	@ 0x64
 8005058:	d901      	bls.n	800505e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800505a:	2303      	movs	r3, #3
 800505c:	e207      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800505e:	4b5b      	ldr	r3, [pc, #364]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d0f0      	beq.n	800504c <HAL_RCC_OscConfig+0xc0>
 800506a:	e014      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800506c:	f7ff fce6 	bl	8004a3c <HAL_GetTick>
 8005070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005072:	e008      	b.n	8005086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005074:	f7ff fce2 	bl	8004a3c <HAL_GetTick>
 8005078:	4602      	mov	r2, r0
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	2b64      	cmp	r3, #100	@ 0x64
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e1f3      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005086:	4b51      	ldr	r3, [pc, #324]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f0      	bne.n	8005074 <HAL_RCC_OscConfig+0xe8>
 8005092:	e000      	b.n	8005096 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050a2:	4b4a      	ldr	r3, [pc, #296]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d00b      	beq.n	80050c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ae:	4b47      	ldr	r3, [pc, #284]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d11c      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80050ba:	4b44      	ldr	r3, [pc, #272]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d116      	bne.n	80050f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050c6:	4b41      	ldr	r3, [pc, #260]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0302 	and.w	r3, r3, #2
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d005      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d001      	beq.n	80050de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e1c7      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050de:	4b3b      	ldr	r3, [pc, #236]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	00db      	lsls	r3, r3, #3
 80050ec:	4937      	ldr	r1, [pc, #220]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80050ee:	4313      	orrs	r3, r2
 80050f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80050f2:	e03a      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d020      	beq.n	800513e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80050fc:	4b34      	ldr	r3, [pc, #208]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005102:	f7ff fc9b 	bl	8004a3c <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800510a:	f7ff fc97 	bl	8004a3c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e1a8      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800511c:	4b2b      	ldr	r3, [pc, #172]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005128:	4b28      	ldr	r3, [pc, #160]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4925      	ldr	r1, [pc, #148]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005138:	4313      	orrs	r3, r2
 800513a:	600b      	str	r3, [r1, #0]
 800513c:	e015      	b.n	800516a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800513e:	4b24      	ldr	r3, [pc, #144]	@ (80051d0 <HAL_RCC_OscConfig+0x244>)
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005144:	f7ff fc7a 	bl	8004a3c <HAL_GetTick>
 8005148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800514a:	e008      	b.n	800515e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800514c:	f7ff fc76 	bl	8004a3c <HAL_GetTick>
 8005150:	4602      	mov	r2, r0
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	1ad3      	subs	r3, r2, r3
 8005156:	2b02      	cmp	r3, #2
 8005158:	d901      	bls.n	800515e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e187      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800515e:	4b1b      	ldr	r3, [pc, #108]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f003 0302 	and.w	r3, r3, #2
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1f0      	bne.n	800514c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0308 	and.w	r3, r3, #8
 8005172:	2b00      	cmp	r3, #0
 8005174:	d036      	beq.n	80051e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	695b      	ldr	r3, [r3, #20]
 800517a:	2b00      	cmp	r3, #0
 800517c:	d016      	beq.n	80051ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800517e:	4b15      	ldr	r3, [pc, #84]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 8005180:	2201      	movs	r2, #1
 8005182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005184:	f7ff fc5a 	bl	8004a3c <HAL_GetTick>
 8005188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800518a:	e008      	b.n	800519e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800518c:	f7ff fc56 	bl	8004a3c <HAL_GetTick>
 8005190:	4602      	mov	r2, r0
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	2b02      	cmp	r3, #2
 8005198:	d901      	bls.n	800519e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800519a:	2303      	movs	r3, #3
 800519c:	e167      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800519e:	4b0b      	ldr	r3, [pc, #44]	@ (80051cc <HAL_RCC_OscConfig+0x240>)
 80051a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051a2:	f003 0302 	and.w	r3, r3, #2
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d0f0      	beq.n	800518c <HAL_RCC_OscConfig+0x200>
 80051aa:	e01b      	b.n	80051e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80051ac:	4b09      	ldr	r3, [pc, #36]	@ (80051d4 <HAL_RCC_OscConfig+0x248>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051b2:	f7ff fc43 	bl	8004a3c <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051b8:	e00e      	b.n	80051d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80051ba:	f7ff fc3f 	bl	8004a3c <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d907      	bls.n	80051d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e150      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
 80051cc:	40023800 	.word	0x40023800
 80051d0:	42470000 	.word	0x42470000
 80051d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80051d8:	4b88      	ldr	r3, [pc, #544]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80051da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051dc:	f003 0302 	and.w	r3, r3, #2
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1ea      	bne.n	80051ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0304 	and.w	r3, r3, #4
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	f000 8097 	beq.w	8005320 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80051f6:	4b81      	ldr	r3, [pc, #516]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80051f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d10f      	bne.n	8005222 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005202:	2300      	movs	r3, #0
 8005204:	60bb      	str	r3, [r7, #8]
 8005206:	4b7d      	ldr	r3, [pc, #500]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005208:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800520a:	4a7c      	ldr	r2, [pc, #496]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800520c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005210:	6413      	str	r3, [r2, #64]	@ 0x40
 8005212:	4b7a      	ldr	r3, [pc, #488]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005216:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800521a:	60bb      	str	r3, [r7, #8]
 800521c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800521e:	2301      	movs	r3, #1
 8005220:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005222:	4b77      	ldr	r3, [pc, #476]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522a:	2b00      	cmp	r3, #0
 800522c:	d118      	bne.n	8005260 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800522e:	4b74      	ldr	r3, [pc, #464]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a73      	ldr	r2, [pc, #460]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005234:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005238:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800523a:	f7ff fbff 	bl	8004a3c <HAL_GetTick>
 800523e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005240:	e008      	b.n	8005254 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005242:	f7ff fbfb 	bl	8004a3c <HAL_GetTick>
 8005246:	4602      	mov	r2, r0
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	1ad3      	subs	r3, r2, r3
 800524c:	2b02      	cmp	r3, #2
 800524e:	d901      	bls.n	8005254 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005250:	2303      	movs	r3, #3
 8005252:	e10c      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005254:	4b6a      	ldr	r3, [pc, #424]	@ (8005400 <HAL_RCC_OscConfig+0x474>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800525c:	2b00      	cmp	r3, #0
 800525e:	d0f0      	beq.n	8005242 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	689b      	ldr	r3, [r3, #8]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d106      	bne.n	8005276 <HAL_RCC_OscConfig+0x2ea>
 8005268:	4b64      	ldr	r3, [pc, #400]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800526a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800526c:	4a63      	ldr	r2, [pc, #396]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800526e:	f043 0301 	orr.w	r3, r3, #1
 8005272:	6713      	str	r3, [r2, #112]	@ 0x70
 8005274:	e01c      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	2b05      	cmp	r3, #5
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x30c>
 800527e:	4b5f      	ldr	r3, [pc, #380]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005282:	4a5e      	ldr	r2, [pc, #376]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005284:	f043 0304 	orr.w	r3, r3, #4
 8005288:	6713      	str	r3, [r2, #112]	@ 0x70
 800528a:	4b5c      	ldr	r3, [pc, #368]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800528c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800528e:	4a5b      	ldr	r2, [pc, #364]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005290:	f043 0301 	orr.w	r3, r3, #1
 8005294:	6713      	str	r3, [r2, #112]	@ 0x70
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0x324>
 8005298:	4b58      	ldr	r3, [pc, #352]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800529a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800529c:	4a57      	ldr	r2, [pc, #348]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80052a4:	4b55      	ldr	r3, [pc, #340]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052a8:	4a54      	ldr	r2, [pc, #336]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052aa:	f023 0304 	bic.w	r3, r3, #4
 80052ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	689b      	ldr	r3, [r3, #8]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d015      	beq.n	80052e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b8:	f7ff fbc0 	bl	8004a3c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052be:	e00a      	b.n	80052d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052c0:	f7ff fbbc 	bl	8004a3c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d901      	bls.n	80052d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80052d2:	2303      	movs	r3, #3
 80052d4:	e0cb      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80052d6:	4b49      	ldr	r3, [pc, #292]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	f003 0302 	and.w	r3, r3, #2
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0ee      	beq.n	80052c0 <HAL_RCC_OscConfig+0x334>
 80052e2:	e014      	b.n	800530e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052e4:	f7ff fbaa 	bl	8004a3c <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052ea:	e00a      	b.n	8005302 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052ec:	f7ff fba6 	bl	8004a3c <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d901      	bls.n	8005302 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80052fe:	2303      	movs	r3, #3
 8005300:	e0b5      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005302:	4b3e      	ldr	r3, [pc, #248]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005304:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1ee      	bne.n	80052ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800530e:	7dfb      	ldrb	r3, [r7, #23]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d105      	bne.n	8005320 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005314:	4b39      	ldr	r3, [pc, #228]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005316:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005318:	4a38      	ldr	r2, [pc, #224]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800531a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800531e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	699b      	ldr	r3, [r3, #24]
 8005324:	2b00      	cmp	r3, #0
 8005326:	f000 80a1 	beq.w	800546c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800532a:	4b34      	ldr	r3, [pc, #208]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	f003 030c 	and.w	r3, r3, #12
 8005332:	2b08      	cmp	r3, #8
 8005334:	d05c      	beq.n	80053f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2b02      	cmp	r3, #2
 800533c:	d141      	bne.n	80053c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800533e:	4b31      	ldr	r3, [pc, #196]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005340:	2200      	movs	r2, #0
 8005342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005344:	f7ff fb7a 	bl	8004a3c <HAL_GetTick>
 8005348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800534a:	e008      	b.n	800535e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534c:	f7ff fb76 	bl	8004a3c <HAL_GetTick>
 8005350:	4602      	mov	r2, r0
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	1ad3      	subs	r3, r2, r3
 8005356:	2b02      	cmp	r3, #2
 8005358:	d901      	bls.n	800535e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e087      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800535e:	4b27      	ldr	r3, [pc, #156]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1f0      	bne.n	800534c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69da      	ldr	r2, [r3, #28]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6a1b      	ldr	r3, [r3, #32]
 8005372:	431a      	orrs	r2, r3
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005378:	019b      	lsls	r3, r3, #6
 800537a:	431a      	orrs	r2, r3
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005380:	085b      	lsrs	r3, r3, #1
 8005382:	3b01      	subs	r3, #1
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	431a      	orrs	r2, r3
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800538c:	061b      	lsls	r3, r3, #24
 800538e:	491b      	ldr	r1, [pc, #108]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 8005390:	4313      	orrs	r3, r2
 8005392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005394:	4b1b      	ldr	r3, [pc, #108]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 8005396:	2201      	movs	r2, #1
 8005398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800539a:	f7ff fb4f 	bl	8004a3c <HAL_GetTick>
 800539e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053a0:	e008      	b.n	80053b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a2:	f7ff fb4b 	bl	8004a3c <HAL_GetTick>
 80053a6:	4602      	mov	r2, r0
 80053a8:	693b      	ldr	r3, [r7, #16]
 80053aa:	1ad3      	subs	r3, r2, r3
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d901      	bls.n	80053b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e05c      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053b4:	4b11      	ldr	r3, [pc, #68]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d0f0      	beq.n	80053a2 <HAL_RCC_OscConfig+0x416>
 80053c0:	e054      	b.n	800546c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053c2:	4b10      	ldr	r3, [pc, #64]	@ (8005404 <HAL_RCC_OscConfig+0x478>)
 80053c4:	2200      	movs	r2, #0
 80053c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80053c8:	f7ff fb38 	bl	8004a3c <HAL_GetTick>
 80053cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053ce:	e008      	b.n	80053e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d0:	f7ff fb34 	bl	8004a3c <HAL_GetTick>
 80053d4:	4602      	mov	r2, r0
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d901      	bls.n	80053e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80053de:	2303      	movs	r3, #3
 80053e0:	e045      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80053e2:	4b06      	ldr	r3, [pc, #24]	@ (80053fc <HAL_RCC_OscConfig+0x470>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d1f0      	bne.n	80053d0 <HAL_RCC_OscConfig+0x444>
 80053ee:	e03d      	b.n	800546c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d107      	bne.n	8005408 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e038      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
 80053fc:	40023800 	.word	0x40023800
 8005400:	40007000 	.word	0x40007000
 8005404:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <HAL_RCC_OscConfig+0x4ec>)
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	2b01      	cmp	r3, #1
 8005414:	d028      	beq.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005420:	429a      	cmp	r2, r3
 8005422:	d121      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800542e:	429a      	cmp	r2, r3
 8005430:	d11a      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005438:	4013      	ands	r3, r2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800543e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005440:	4293      	cmp	r3, r2
 8005442:	d111      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800544e:	085b      	lsrs	r3, r3, #1
 8005450:	3b01      	subs	r3, #1
 8005452:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005454:	429a      	cmp	r2, r3
 8005456:	d107      	bne.n	8005468 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005462:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005464:	429a      	cmp	r2, r3
 8005466:	d001      	beq.n	800546c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e000      	b.n	800546e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800546c:	2300      	movs	r3, #0
}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b084      	sub	sp, #16
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d101      	bne.n	8005490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800548c:	2301      	movs	r3, #1
 800548e:	e0cc      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005490:	4b68      	ldr	r3, [pc, #416]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	429a      	cmp	r2, r3
 800549c:	d90c      	bls.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800549e:	4b65      	ldr	r3, [pc, #404]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a0:	683a      	ldr	r2, [r7, #0]
 80054a2:	b2d2      	uxtb	r2, r2
 80054a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054a6:	4b63      	ldr	r3, [pc, #396]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d001      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e0b8      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0302 	and.w	r3, r3, #2
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d020      	beq.n	8005506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0304 	and.w	r3, r3, #4
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d005      	beq.n	80054dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80054d0:	4b59      	ldr	r3, [pc, #356]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d2:	689b      	ldr	r3, [r3, #8]
 80054d4:	4a58      	ldr	r2, [pc, #352]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80054da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0308 	and.w	r3, r3, #8
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d005      	beq.n	80054f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80054e8:	4b53      	ldr	r3, [pc, #332]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	4a52      	ldr	r2, [pc, #328]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80054f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054f4:	4b50      	ldr	r3, [pc, #320]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	689b      	ldr	r3, [r3, #8]
 80054f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	494d      	ldr	r1, [pc, #308]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005502:	4313      	orrs	r3, r2
 8005504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d044      	beq.n	800559c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	685b      	ldr	r3, [r3, #4]
 8005516:	2b01      	cmp	r3, #1
 8005518:	d107      	bne.n	800552a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800551a:	4b47      	ldr	r3, [pc, #284]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d119      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e07f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	2b02      	cmp	r3, #2
 8005530:	d003      	beq.n	800553a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005536:	2b03      	cmp	r3, #3
 8005538:	d107      	bne.n	800554a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800553a:	4b3f      	ldr	r3, [pc, #252]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	e06f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800554a:	4b3b      	ldr	r3, [pc, #236]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d101      	bne.n	800555a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e067      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800555a:	4b37      	ldr	r3, [pc, #220]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800555c:	689b      	ldr	r3, [r3, #8]
 800555e:	f023 0203 	bic.w	r2, r3, #3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	4934      	ldr	r1, [pc, #208]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 8005568:	4313      	orrs	r3, r2
 800556a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800556c:	f7ff fa66 	bl	8004a3c <HAL_GetTick>
 8005570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005572:	e00a      	b.n	800558a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005574:	f7ff fa62 	bl	8004a3c <HAL_GetTick>
 8005578:	4602      	mov	r2, r0
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	1ad3      	subs	r3, r2, r3
 800557e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005582:	4293      	cmp	r3, r2
 8005584:	d901      	bls.n	800558a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e04f      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800558a:	4b2b      	ldr	r3, [pc, #172]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800558c:	689b      	ldr	r3, [r3, #8]
 800558e:	f003 020c 	and.w	r2, r3, #12
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	009b      	lsls	r3, r3, #2
 8005598:	429a      	cmp	r2, r3
 800559a:	d1eb      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800559c:	4b25      	ldr	r3, [pc, #148]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	683a      	ldr	r2, [r7, #0]
 80055a6:	429a      	cmp	r2, r3
 80055a8:	d20c      	bcs.n	80055c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055aa:	4b22      	ldr	r3, [pc, #136]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055ac:	683a      	ldr	r2, [r7, #0]
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055b2:	4b20      	ldr	r3, [pc, #128]	@ (8005634 <HAL_RCC_ClockConfig+0x1b8>)
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	683a      	ldr	r2, [r7, #0]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d001      	beq.n	80055c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e032      	b.n	800562a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f003 0304 	and.w	r3, r3, #4
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d008      	beq.n	80055e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80055d0:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	4916      	ldr	r1, [pc, #88]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d009      	beq.n	8005602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80055ee:	4b12      	ldr	r3, [pc, #72]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	00db      	lsls	r3, r3, #3
 80055fc:	490e      	ldr	r1, [pc, #56]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005602:	f000 f821 	bl	8005648 <HAL_RCC_GetSysClockFreq>
 8005606:	4602      	mov	r2, r0
 8005608:	4b0b      	ldr	r3, [pc, #44]	@ (8005638 <HAL_RCC_ClockConfig+0x1bc>)
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	091b      	lsrs	r3, r3, #4
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	490a      	ldr	r1, [pc, #40]	@ (800563c <HAL_RCC_ClockConfig+0x1c0>)
 8005614:	5ccb      	ldrb	r3, [r1, r3]
 8005616:	fa22 f303 	lsr.w	r3, r2, r3
 800561a:	4a09      	ldr	r2, [pc, #36]	@ (8005640 <HAL_RCC_ClockConfig+0x1c4>)
 800561c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800561e:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <HAL_RCC_ClockConfig+0x1c8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff f9c6 	bl	80049b4 <HAL_InitTick>

  return HAL_OK;
 8005628:	2300      	movs	r3, #0
}
 800562a:	4618      	mov	r0, r3
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}
 8005632:	bf00      	nop
 8005634:	40023c00 	.word	0x40023c00
 8005638:	40023800 	.word	0x40023800
 800563c:	08005c30 	.word	0x08005c30
 8005640:	20000000 	.word	0x20000000
 8005644:	20000004 	.word	0x20000004

08005648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800564c:	b090      	sub	sp, #64	@ 0x40
 800564e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005650:	2300      	movs	r3, #0
 8005652:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005654:	2300      	movs	r3, #0
 8005656:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005658:	2300      	movs	r3, #0
 800565a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800565c:	2300      	movs	r3, #0
 800565e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005660:	4b59      	ldr	r3, [pc, #356]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 030c 	and.w	r3, r3, #12
 8005668:	2b08      	cmp	r3, #8
 800566a:	d00d      	beq.n	8005688 <HAL_RCC_GetSysClockFreq+0x40>
 800566c:	2b08      	cmp	r3, #8
 800566e:	f200 80a1 	bhi.w	80057b4 <HAL_RCC_GetSysClockFreq+0x16c>
 8005672:	2b00      	cmp	r3, #0
 8005674:	d002      	beq.n	800567c <HAL_RCC_GetSysClockFreq+0x34>
 8005676:	2b04      	cmp	r3, #4
 8005678:	d003      	beq.n	8005682 <HAL_RCC_GetSysClockFreq+0x3a>
 800567a:	e09b      	b.n	80057b4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800567c:	4b53      	ldr	r3, [pc, #332]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x184>)
 800567e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005680:	e09b      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005682:	4b53      	ldr	r3, [pc, #332]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 8005684:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005686:	e098      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005688:	4b4f      	ldr	r3, [pc, #316]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005690:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005692:	4b4d      	ldr	r3, [pc, #308]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d028      	beq.n	80056f0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800569e:	4b4a      	ldr	r3, [pc, #296]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	099b      	lsrs	r3, r3, #6
 80056a4:	2200      	movs	r2, #0
 80056a6:	623b      	str	r3, [r7, #32]
 80056a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80056aa:	6a3b      	ldr	r3, [r7, #32]
 80056ac:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80056b0:	2100      	movs	r1, #0
 80056b2:	4b47      	ldr	r3, [pc, #284]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80056b4:	fb03 f201 	mul.w	r2, r3, r1
 80056b8:	2300      	movs	r3, #0
 80056ba:	fb00 f303 	mul.w	r3, r0, r3
 80056be:	4413      	add	r3, r2
 80056c0:	4a43      	ldr	r2, [pc, #268]	@ (80057d0 <HAL_RCC_GetSysClockFreq+0x188>)
 80056c2:	fba0 1202 	umull	r1, r2, r0, r2
 80056c6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056c8:	460a      	mov	r2, r1
 80056ca:	62ba      	str	r2, [r7, #40]	@ 0x28
 80056cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056ce:	4413      	add	r3, r2
 80056d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d4:	2200      	movs	r2, #0
 80056d6:	61bb      	str	r3, [r7, #24]
 80056d8:	61fa      	str	r2, [r7, #28]
 80056da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056de:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80056e2:	f7fe fd79 	bl	80041d8 <__aeabi_uldivmod>
 80056e6:	4602      	mov	r2, r0
 80056e8:	460b      	mov	r3, r1
 80056ea:	4613      	mov	r3, r2
 80056ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056ee:	e053      	b.n	8005798 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80056f0:	4b35      	ldr	r3, [pc, #212]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	099b      	lsrs	r3, r3, #6
 80056f6:	2200      	movs	r2, #0
 80056f8:	613b      	str	r3, [r7, #16]
 80056fa:	617a      	str	r2, [r7, #20]
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005702:	f04f 0b00 	mov.w	fp, #0
 8005706:	4652      	mov	r2, sl
 8005708:	465b      	mov	r3, fp
 800570a:	f04f 0000 	mov.w	r0, #0
 800570e:	f04f 0100 	mov.w	r1, #0
 8005712:	0159      	lsls	r1, r3, #5
 8005714:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005718:	0150      	lsls	r0, r2, #5
 800571a:	4602      	mov	r2, r0
 800571c:	460b      	mov	r3, r1
 800571e:	ebb2 080a 	subs.w	r8, r2, sl
 8005722:	eb63 090b 	sbc.w	r9, r3, fp
 8005726:	f04f 0200 	mov.w	r2, #0
 800572a:	f04f 0300 	mov.w	r3, #0
 800572e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005732:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005736:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800573a:	ebb2 0408 	subs.w	r4, r2, r8
 800573e:	eb63 0509 	sbc.w	r5, r3, r9
 8005742:	f04f 0200 	mov.w	r2, #0
 8005746:	f04f 0300 	mov.w	r3, #0
 800574a:	00eb      	lsls	r3, r5, #3
 800574c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005750:	00e2      	lsls	r2, r4, #3
 8005752:	4614      	mov	r4, r2
 8005754:	461d      	mov	r5, r3
 8005756:	eb14 030a 	adds.w	r3, r4, sl
 800575a:	603b      	str	r3, [r7, #0]
 800575c:	eb45 030b 	adc.w	r3, r5, fp
 8005760:	607b      	str	r3, [r7, #4]
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800576e:	4629      	mov	r1, r5
 8005770:	028b      	lsls	r3, r1, #10
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005778:	4621      	mov	r1, r4
 800577a:	028a      	lsls	r2, r1, #10
 800577c:	4610      	mov	r0, r2
 800577e:	4619      	mov	r1, r3
 8005780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005782:	2200      	movs	r2, #0
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	60fa      	str	r2, [r7, #12]
 8005788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800578c:	f7fe fd24 	bl	80041d8 <__aeabi_uldivmod>
 8005790:	4602      	mov	r2, r0
 8005792:	460b      	mov	r3, r1
 8005794:	4613      	mov	r3, r2
 8005796:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005798:	4b0b      	ldr	r3, [pc, #44]	@ (80057c8 <HAL_RCC_GetSysClockFreq+0x180>)
 800579a:	685b      	ldr	r3, [r3, #4]
 800579c:	0c1b      	lsrs	r3, r3, #16
 800579e:	f003 0303 	and.w	r3, r3, #3
 80057a2:	3301      	adds	r3, #1
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80057a8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80057aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80057b0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057b2:	e002      	b.n	80057ba <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80057b4:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_RCC_GetSysClockFreq+0x184>)
 80057b6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80057b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3740      	adds	r7, #64	@ 0x40
 80057c0:	46bd      	mov	sp, r7
 80057c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057c6:	bf00      	nop
 80057c8:	40023800 	.word	0x40023800
 80057cc:	00f42400 	.word	0x00f42400
 80057d0:	017d7840 	.word	0x017d7840

080057d4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b086      	sub	sp, #24
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f003 0301 	and.w	r3, r3, #1
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d105      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d038      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80057fc:	4b68      	ldr	r3, [pc, #416]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80057fe:	2200      	movs	r2, #0
 8005800:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005802:	f7ff f91b 	bl	8004a3c <HAL_GetTick>
 8005806:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005808:	e008      	b.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800580a:	f7ff f917 	bl	8004a3c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	697b      	ldr	r3, [r7, #20]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b02      	cmp	r3, #2
 8005816:	d901      	bls.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e0bd      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800581c:	4b61      	ldr	r3, [pc, #388]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d1f0      	bne.n	800580a <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN,
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	689b      	ldr	r3, [r3, #8]
 8005830:	019b      	lsls	r3, r3, #6
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	071b      	lsls	r3, r3, #28
 800583a:	495a      	ldr	r1, [pc, #360]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800583c:	4313      	orrs	r3, r2
 800583e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005842:	4b57      	ldr	r3, [pc, #348]	@ (80059a0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005844:	2201      	movs	r2, #1
 8005846:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005848:	f7ff f8f8 	bl	8004a3c <HAL_GetTick>
 800584c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800584e:	e008      	b.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005850:	f7ff f8f4 	bl	8004a3c <HAL_GetTick>
 8005854:	4602      	mov	r2, r0
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	1ad3      	subs	r3, r2, r3
 800585a:	2b02      	cmp	r3, #2
 800585c:	d901      	bls.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800585e:	2303      	movs	r3, #3
 8005860:	e09a      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005862:	4b50      	ldr	r3, [pc, #320]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800586a:	2b00      	cmp	r3, #0
 800586c:	d0f0      	beq.n	8005850 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8083 	beq.w	8005982 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800587c:	2300      	movs	r3, #0
 800587e:	60fb      	str	r3, [r7, #12]
 8005880:	4b48      	ldr	r3, [pc, #288]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005884:	4a47      	ldr	r2, [pc, #284]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800588a:	6413      	str	r3, [r2, #64]	@ 0x40
 800588c:	4b45      	ldr	r3, [pc, #276]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005898:	4b43      	ldr	r3, [pc, #268]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a42      	ldr	r2, [pc, #264]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800589e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058a2:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058a4:	f7ff f8ca 	bl	8004a3c <HAL_GetTick>
 80058a8:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058aa:	e008      	b.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058ac:	f7ff f8c6 	bl	8004a3c <HAL_GetTick>
 80058b0:	4602      	mov	r2, r0
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	1ad3      	subs	r3, r2, r3
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d901      	bls.n	80058be <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80058ba:	2303      	movs	r3, #3
 80058bc:	e06c      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058be:	4b3a      	ldr	r3, [pc, #232]	@ (80059a8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d0f0      	beq.n	80058ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80058ca:	4b36      	ldr	r3, [pc, #216]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058d2:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d02f      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80058e2:	693a      	ldr	r2, [r7, #16]
 80058e4:	429a      	cmp	r2, r3
 80058e6:	d028      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80058e8:	4b2e      	ldr	r3, [pc, #184]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80058ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80058ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80058f0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80058f2:	4b2e      	ldr	r3, [pc, #184]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058f4:	2201      	movs	r2, #1
 80058f6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80058f8:	4b2c      	ldr	r3, [pc, #176]	@ (80059ac <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80058fe:	4a29      	ldr	r2, [pc, #164]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005904:	4b27      	ldr	r3, [pc, #156]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005908:	f003 0301 	and.w	r3, r3, #1
 800590c:	2b01      	cmp	r3, #1
 800590e:	d114      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005910:	f7ff f894 	bl	8004a3c <HAL_GetTick>
 8005914:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005916:	e00a      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005918:	f7ff f890 	bl	8004a3c <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005926:	4293      	cmp	r3, r2
 8005928:	d901      	bls.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800592a:	2303      	movs	r3, #3
 800592c:	e034      	b.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800592e:	4b1d      	ldr	r3, [pc, #116]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005932:	f003 0302 	and.w	r3, r3, #2
 8005936:	2b00      	cmp	r3, #0
 8005938:	d0ee      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005942:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005946:	d10d      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005948:	4b16      	ldr	r3, [pc, #88]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005958:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800595c:	4911      	ldr	r1, [pc, #68]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800595e:	4313      	orrs	r3, r2
 8005960:	608b      	str	r3, [r1, #8]
 8005962:	e005      	b.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005964:	4b0f      	ldr	r3, [pc, #60]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800596a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800596e:	6093      	str	r3, [r2, #8]
 8005970:	4b0c      	ldr	r3, [pc, #48]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005972:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800597c:	4909      	ldr	r1, [pc, #36]	@ (80059a4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800597e:	4313      	orrs	r3, r2
 8005980:	670b      	str	r3, [r1, #112]	@ 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f003 0308 	and.w	r3, r3, #8
 800598a:	2b00      	cmp	r3, #0
 800598c:	d003      	beq.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	7d1a      	ldrb	r2, [r3, #20]
 8005992:	4b07      	ldr	r3, [pc, #28]	@ (80059b0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005994:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005996:	2300      	movs	r3, #0
}
 8005998:	4618      	mov	r0, r3
 800599a:	3718      	adds	r7, #24
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}
 80059a0:	42470068 	.word	0x42470068
 80059a4:	40023800 	.word	0x40023800
 80059a8:	40007000 	.word	0x40007000
 80059ac:	42470e40 	.word	0x42470e40
 80059b0:	424711e0 	.word	0x424711e0

080059b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b084      	sub	sp, #16
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d101      	bne.n	80059ca <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e073      	b.n	8005ab2 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7f5b      	ldrb	r3, [r3, #29]
 80059ce:	b2db      	uxtb	r3, r3
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	f7fe ff02 	bl	80047e4 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2202      	movs	r2, #2
 80059e4:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	68db      	ldr	r3, [r3, #12]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b10      	cmp	r3, #16
 80059f2:	d055      	beq.n	8005aa0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	22ca      	movs	r2, #202	@ 0xca
 80059fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2253      	movs	r2, #83	@ 0x53
 8005a02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8005a04:	6878      	ldr	r0, [r7, #4]
 8005a06:	f000 f87f 	bl	8005b08 <RTC_EnterInitMode>
 8005a0a:	4603      	mov	r3, r0
 8005a0c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8005a0e:	7bfb      	ldrb	r3, [r7, #15]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d12c      	bne.n	8005a6e <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	687a      	ldr	r2, [r7, #4]
 8005a1c:	6812      	ldr	r2, [r2, #0]
 8005a1e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005a22:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a26:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	6899      	ldr	r1, [r3, #8]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	431a      	orrs	r2, r3
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	695b      	ldr	r3, [r3, #20]
 8005a3c:	431a      	orrs	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	68d2      	ldr	r2, [r2, #12]
 8005a4e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	6919      	ldr	r1, [r3, #16]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	041a      	lsls	r2, r3, #16
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	430a      	orrs	r2, r1
 8005a62:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f000 f886 	bl	8005b76 <RTC_ExitInitMode>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8005a6e:	7bfb      	ldrb	r3, [r7, #15]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d110      	bne.n	8005a96 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005a82:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	699a      	ldr	r2, [r3, #24]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	430a      	orrs	r2, r1
 8005a94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	22ff      	movs	r2, #255	@ 0xff
 8005a9c:	625a      	str	r2, [r3, #36]	@ 0x24
 8005a9e:	e001      	b.n	8005aa4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8005aa0:	2300      	movs	r3, #0
 8005aa2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8005aa4:	7bfb      	ldrb	r3, [r7, #15]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d102      	bne.n	8005ab0 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2201      	movs	r2, #1
 8005aae:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8005ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3710      	adds	r7, #16
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
	...

08005abc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b084      	sub	sp, #16
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a0d      	ldr	r2, [pc, #52]	@ (8005b04 <HAL_RTC_WaitForSynchro+0x48>)
 8005ace:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005ad0:	f7fe ffb4 	bl	8004a3c <HAL_GetTick>
 8005ad4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005ad6:	e009      	b.n	8005aec <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005ad8:	f7fe ffb0 	bl	8004a3c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005ae6:	d901      	bls.n	8005aec <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e007      	b.n	8005afc <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	68db      	ldr	r3, [r3, #12]
 8005af2:	f003 0320 	and.w	r3, r3, #32
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d0ee      	beq.n	8005ad8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	00013f5f 	.word	0x00013f5f

08005b08 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8005b14:	2300      	movs	r3, #0
 8005b16:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d122      	bne.n	8005b6c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68da      	ldr	r2, [r3, #12]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005b34:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005b36:	f7fe ff81 	bl	8004a3c <HAL_GetTick>
 8005b3a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b3c:	e00c      	b.n	8005b58 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8005b3e:	f7fe ff7d 	bl	8004a3c <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	68bb      	ldr	r3, [r7, #8]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005b4c:	d904      	bls.n	8005b58 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2204      	movs	r2, #4
 8005b52:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	68db      	ldr	r3, [r3, #12]
 8005b5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d102      	bne.n	8005b6c <RTC_EnterInitMode+0x64>
 8005b66:	7bfb      	ldrb	r3, [r7, #15]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d1e8      	bne.n	8005b3e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8005b6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b084      	sub	sp, #16
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005b90:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	f003 0320 	and.w	r3, r3, #32
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ff8b 	bl	8005abc <HAL_RTC_WaitForSynchro>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d004      	beq.n	8005bb6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2204      	movs	r2, #4
 8005bb0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8005bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3710      	adds	r7, #16
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <memset>:
 8005bc0:	4402      	add	r2, r0
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d100      	bne.n	8005bca <memset+0xa>
 8005bc8:	4770      	bx	lr
 8005bca:	f803 1b01 	strb.w	r1, [r3], #1
 8005bce:	e7f9      	b.n	8005bc4 <memset+0x4>

08005bd0 <__libc_init_array>:
 8005bd0:	b570      	push	{r4, r5, r6, lr}
 8005bd2:	4d0d      	ldr	r5, [pc, #52]	@ (8005c08 <__libc_init_array+0x38>)
 8005bd4:	4c0d      	ldr	r4, [pc, #52]	@ (8005c0c <__libc_init_array+0x3c>)
 8005bd6:	1b64      	subs	r4, r4, r5
 8005bd8:	10a4      	asrs	r4, r4, #2
 8005bda:	2600      	movs	r6, #0
 8005bdc:	42a6      	cmp	r6, r4
 8005bde:	d109      	bne.n	8005bf4 <__libc_init_array+0x24>
 8005be0:	4d0b      	ldr	r5, [pc, #44]	@ (8005c10 <__libc_init_array+0x40>)
 8005be2:	4c0c      	ldr	r4, [pc, #48]	@ (8005c14 <__libc_init_array+0x44>)
 8005be4:	f000 f818 	bl	8005c18 <_init>
 8005be8:	1b64      	subs	r4, r4, r5
 8005bea:	10a4      	asrs	r4, r4, #2
 8005bec:	2600      	movs	r6, #0
 8005bee:	42a6      	cmp	r6, r4
 8005bf0:	d105      	bne.n	8005bfe <__libc_init_array+0x2e>
 8005bf2:	bd70      	pop	{r4, r5, r6, pc}
 8005bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bf8:	4798      	blx	r3
 8005bfa:	3601      	adds	r6, #1
 8005bfc:	e7ee      	b.n	8005bdc <__libc_init_array+0xc>
 8005bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c02:	4798      	blx	r3
 8005c04:	3601      	adds	r6, #1
 8005c06:	e7f2      	b.n	8005bee <__libc_init_array+0x1e>
 8005c08:	08005c48 	.word	0x08005c48
 8005c0c:	08005c48 	.word	0x08005c48
 8005c10:	08005c48 	.word	0x08005c48
 8005c14:	08005c4c 	.word	0x08005c4c

08005c18 <_init>:
 8005c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c1a:	bf00      	nop
 8005c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1e:	bc08      	pop	{r3}
 8005c20:	469e      	mov	lr, r3
 8005c22:	4770      	bx	lr

08005c24 <_fini>:
 8005c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c26:	bf00      	nop
 8005c28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2a:	bc08      	pop	{r3}
 8005c2c:	469e      	mov	lr, r3
 8005c2e:	4770      	bx	lr
