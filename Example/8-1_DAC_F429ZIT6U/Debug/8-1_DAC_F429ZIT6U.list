
8-1_DAC_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d7c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08005f28  08005f28  00015f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006318  08006318  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006318  08006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006320  08006320  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006320  08006320  00016320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006324  08006324  00016324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08006328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000328  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000334  20000334  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017471  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fce  00000000  00000000  000374ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  0003a480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001100  00000000  00000000  0003b6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026af4  00000000  00000000  0003c7b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184fa  00000000  00000000  000632a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000eaf4c  00000000  00000000  0007b79e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001666ea  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cd4  00000000  00000000  00166740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08005f10 	.word	0x08005f10

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08005f10 	.word	0x08005f10

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004f8:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_ADC1_Init+0xf0>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_ADC1_Init+0xec>)
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000512:	2201      	movs	r2, #1
 8000514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_ADC1_Init+0xf4>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000532:	2204      	movs	r2, #4
 8000534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000538:	2201      	movs	r2, #1
 800053a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000540:	2201      	movs	r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000546:	f001 f93f 	bl	80017c8 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fb8a 	bl	8000c68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000554:	230a      	movs	r3, #10
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800055c:	2304      	movs	r3, #4
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000566:	f001 f973 	bl	8001850 <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000570:	f000 fb7a 	bl	8000c68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000574:	230c      	movs	r3, #12
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000582:	f001 f965 	bl	8001850 <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fb6c 	bl	8000c68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000590:	230d      	movs	r3, #13
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_ADC1_Init+0xec>)
 800059e:	f001 f957 	bl	8001850 <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005a8:	f000 fb5e 	bl	8000c68 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ac:	2309      	movs	r3, #9
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xec>)
 80005ba:	f001 f949 	bl	8001850 <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005c4:	f000 fb50 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000002c 	.word	0x2000002c
 80005d4:	40012000 	.word	0x40012000
 80005d8:	0f000001 	.word	0x0f000001

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <HAL_ADC_MspInit+0x110>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d171      	bne.n	80006e2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	4a3a      	ldr	r2, [pc, #232]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060c:	6453      	str	r3, [r2, #68]	; 0x44
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000652:	230d      	movs	r3, #13
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <HAL_ADC_MspInit+0x118>)
 8000666:	f002 f897 	bl	8002798 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x11c>)
 800067e:	f002 f88b 	bl	8002798 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000684:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x124>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c8:	f001 fcea 	bl	80020a0 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006d2:	f000 fac9 	bl	8000c68 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020400 	.word	0x40020400
 80006fc:	20000074 	.word	0x20000074
 8000700:	40026410 	.word	0x40026410

08000704 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800070a:	463b      	mov	r3, r7
 800070c:	2200      	movs	r2, #0
 800070e:	601a      	str	r2, [r3, #0]
 8000710:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000712:	4b0f      	ldr	r3, [pc, #60]	; (8000750 <MX_DAC_Init+0x4c>)
 8000714:	4a0f      	ldr	r2, [pc, #60]	; (8000754 <MX_DAC_Init+0x50>)
 8000716:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000718:	480d      	ldr	r0, [pc, #52]	; (8000750 <MX_DAC_Init+0x4c>)
 800071a:	f001 fbd8 	bl	8001ece <HAL_DAC_Init>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d001      	beq.n	8000728 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000724:	f000 faa0 	bl	8000c68 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000728:	2300      	movs	r3, #0
 800072a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000730:	463b      	mov	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	4619      	mov	r1, r3
 8000736:	4806      	ldr	r0, [pc, #24]	; (8000750 <MX_DAC_Init+0x4c>)
 8000738:	f001 fc62 	bl	8002000 <HAL_DAC_ConfigChannel>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000742:	f000 fa91 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	200000d4 	.word	0x200000d4
 8000754:	40007400 	.word	0x40007400

08000758 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b08a      	sub	sp, #40	; 0x28
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_DAC_MspInit+0x7c>)
 8000776:	4293      	cmp	r3, r2
 8000778:	d127      	bne.n	80007ca <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800077a:	2300      	movs	r3, #0
 800077c:	613b      	str	r3, [r7, #16]
 800077e:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	4a15      	ldr	r2, [pc, #84]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 8000784:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000788:	6413      	str	r3, [r2, #64]	; 0x40
 800078a:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 800078c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800078e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000792:	613b      	str	r3, [r7, #16]
 8000794:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000796:	2300      	movs	r3, #0
 8000798:	60fb      	str	r3, [r7, #12]
 800079a:	4b0f      	ldr	r3, [pc, #60]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	4a0e      	ldr	r2, [pc, #56]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 80007a0:	f043 0301 	orr.w	r3, r3, #1
 80007a4:	6313      	str	r3, [r2, #48]	; 0x30
 80007a6:	4b0c      	ldr	r3, [pc, #48]	; (80007d8 <HAL_DAC_MspInit+0x80>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	f003 0301 	and.w	r3, r3, #1
 80007ae:	60fb      	str	r3, [r7, #12]
 80007b0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80007b2:	2310      	movs	r3, #16
 80007b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007b6:	2303      	movs	r3, #3
 80007b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007be:	f107 0314 	add.w	r3, r7, #20
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <HAL_DAC_MspInit+0x84>)
 80007c6:	f001 ffe7 	bl	8002798 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80007ca:	bf00      	nop
 80007cc:	3728      	adds	r7, #40	; 0x28
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40007400 	.word	0x40007400
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b0c      	ldr	r3, [pc, #48]	; (800081c <MX_DMA_Init+0x3c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a0b      	ldr	r2, [pc, #44]	; (800081c <MX_DMA_Init+0x3c>)
 80007f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b09      	ldr	r3, [pc, #36]	; (800081c <MX_DMA_Init+0x3c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000802:	2200      	movs	r2, #0
 8000804:	2100      	movs	r1, #0
 8000806:	2038      	movs	r0, #56	; 0x38
 8000808:	f001 fb2b 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800080c:	2038      	movs	r0, #56	; 0x38
 800080e:	f001 fb44 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	40023800 	.word	0x40023800

08000820 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	b08c      	sub	sp, #48	; 0x30
 8000824:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000826:	f107 031c 	add.w	r3, r7, #28
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
 800082e:	605a      	str	r2, [r3, #4]
 8000830:	609a      	str	r2, [r3, #8]
 8000832:	60da      	str	r2, [r3, #12]
 8000834:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	61bb      	str	r3, [r7, #24]
 800083a:	4b52      	ldr	r3, [pc, #328]	; (8000984 <MX_GPIO_Init+0x164>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083e:	4a51      	ldr	r2, [pc, #324]	; (8000984 <MX_GPIO_Init+0x164>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6313      	str	r3, [r2, #48]	; 0x30
 8000846:	4b4f      	ldr	r3, [pc, #316]	; (8000984 <MX_GPIO_Init+0x164>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	61bb      	str	r3, [r7, #24]
 8000850:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]
 8000856:	4b4b      	ldr	r3, [pc, #300]	; (8000984 <MX_GPIO_Init+0x164>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a4a      	ldr	r2, [pc, #296]	; (8000984 <MX_GPIO_Init+0x164>)
 800085c:	f043 0320 	orr.w	r3, r3, #32
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b48      	ldr	r3, [pc, #288]	; (8000984 <MX_GPIO_Init+0x164>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0320 	and.w	r3, r3, #32
 800086a:	617b      	str	r3, [r7, #20]
 800086c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	4b44      	ldr	r3, [pc, #272]	; (8000984 <MX_GPIO_Init+0x164>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	4a43      	ldr	r2, [pc, #268]	; (8000984 <MX_GPIO_Init+0x164>)
 8000878:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800087c:	6313      	str	r3, [r2, #48]	; 0x30
 800087e:	4b41      	ldr	r3, [pc, #260]	; (8000984 <MX_GPIO_Init+0x164>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000886:	613b      	str	r3, [r7, #16]
 8000888:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	4b3d      	ldr	r3, [pc, #244]	; (8000984 <MX_GPIO_Init+0x164>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a3c      	ldr	r2, [pc, #240]	; (8000984 <MX_GPIO_Init+0x164>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b3a      	ldr	r3, [pc, #232]	; (8000984 <MX_GPIO_Init+0x164>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60bb      	str	r3, [r7, #8]
 80008aa:	4b36      	ldr	r3, [pc, #216]	; (8000984 <MX_GPIO_Init+0x164>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a35      	ldr	r2, [pc, #212]	; (8000984 <MX_GPIO_Init+0x164>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b33      	ldr	r3, [pc, #204]	; (8000984 <MX_GPIO_Init+0x164>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	60bb      	str	r3, [r7, #8]
 80008c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	607b      	str	r3, [r7, #4]
 80008c6:	4b2f      	ldr	r3, [pc, #188]	; (8000984 <MX_GPIO_Init+0x164>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a2e      	ldr	r2, [pc, #184]	; (8000984 <MX_GPIO_Init+0x164>)
 80008cc:	f043 0302 	orr.w	r3, r3, #2
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b2c      	ldr	r3, [pc, #176]	; (8000984 <MX_GPIO_Init+0x164>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0302 	and.w	r3, r3, #2
 80008da:	607b      	str	r3, [r7, #4]
 80008dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	603b      	str	r3, [r7, #0]
 80008e2:	4b28      	ldr	r3, [pc, #160]	; (8000984 <MX_GPIO_Init+0x164>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a27      	ldr	r2, [pc, #156]	; (8000984 <MX_GPIO_Init+0x164>)
 80008e8:	f043 0308 	orr.w	r3, r3, #8
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b25      	ldr	r3, [pc, #148]	; (8000984 <MX_GPIO_Init+0x164>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0308 	and.w	r3, r3, #8
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000900:	4821      	ldr	r0, [pc, #132]	; (8000988 <MX_GPIO_Init+0x168>)
 8000902:	f002 f8f5 	bl	8002af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000906:	2308      	movs	r3, #8
 8000908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000910:	2301      	movs	r3, #1
 8000912:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <MX_GPIO_Init+0x16c>)
 800091c:	f001 ff3c 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000920:	f244 0381 	movw	r3, #16513	; 0x4081
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000926:	2301      	movs	r3, #1
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 031c 	add.w	r3, r7, #28
 8000936:	4619      	mov	r1, r3
 8000938:	4813      	ldr	r0, [pc, #76]	; (8000988 <MX_GPIO_Init+0x168>)
 800093a:	f001 ff2d 	bl	8002798 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800093e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000942:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800094a:	2302      	movs	r3, #2
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800094e:	f107 031c 	add.w	r3, r7, #28
 8000952:	4619      	mov	r1, r3
 8000954:	480e      	ldr	r0, [pc, #56]	; (8000990 <MX_GPIO_Init+0x170>)
 8000956:	f001 ff1f 	bl	8002798 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2009      	movs	r0, #9
 8000960:	f001 fa7f 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000964:	2009      	movs	r0, #9
 8000966:	f001 fa98 	bl	8001e9a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800096a:	2200      	movs	r2, #0
 800096c:	2100      	movs	r1, #0
 800096e:	2028      	movs	r0, #40	; 0x28
 8000970:	f001 fa77 	bl	8001e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000974:	2028      	movs	r0, #40	; 0x28
 8000976:	f001 fa90 	bl	8001e9a <HAL_NVIC_EnableIRQ>

}
 800097a:	bf00      	nop
 800097c:	3730      	adds	r7, #48	; 0x30
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40023800 	.word	0x40023800
 8000988:	40020400 	.word	0x40020400
 800098c:	40021000 	.word	0x40021000
 8000990:	40020c00 	.word	0x40020c00

08000994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009d2:	f002 f8cb 	bl	8002b6c <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 f944 	bl	8000c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009e4:	f002 fa06 	bl	8002df4 <HAL_I2CEx_ConfigAnalogFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009ee:	f000 f93b 	bl	8000c68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009f6:	f002 fa39 	bl	8002e6c <HAL_I2CEx_ConfigDigitalFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 f932 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	200000e8 	.word	0x200000e8
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_I2C_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a64:	2304      	movs	r3, #4
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <HAL_I2C_MspInit+0x8c>)
 8000a70:	f001 fe92 	bl	8002798 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aaa:	f000 fe1b 	bl	80016e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aae:	f000 f827 	bl	8000b00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ab2:	f7ff feb5 	bl	8000820 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000ab6:	f000 fd71 	bl	800159c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000aba:	f7ff ff6b 	bl	8000994 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000abe:	f000 fb77 	bl	80011b0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000ac2:	f000 f9e9 	bl	8000e98 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ac6:	f000 fa5d 	bl	8000f84 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000aca:	f000 fba7 	bl	800121c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000ace:	f000 f96d 	bl	8000dac <MX_TIM2_Init>
  MX_DMA_Init();
 8000ad2:	f7ff fe85 	bl	80007e0 <MX_DMA_Init>
  MX_ADC1_Init();
 8000ad6:	f7ff fd05 	bl	80004e4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000ada:	f000 fae7 	bl	80010ac <MX_TIM5_Init>
  MX_DAC_Init();
 8000ade:	f7ff fe11 	bl	8000704 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim7);
 8000ae2:	4805      	ldr	r0, [pc, #20]	; (8000af8 <main+0x54>)
 8000ae4:	f002 ff16 	bl	8003914 <HAL_TIM_Base_Start_IT>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	4804      	ldr	r0, [pc, #16]	; (8000afc <main+0x58>)
 8000aec:	f001 fa11 	bl	8001f12 <HAL_DAC_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int value = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	607b      	str	r3, [r7, #4]
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <main+0x50>
 8000af6:	bf00      	nop
 8000af8:	200002a4 	.word	0x200002a4
 8000afc:	200000d4 	.word	0x200000d4

08000b00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b094      	sub	sp, #80	; 0x50
 8000b04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b06:	f107 0320 	add.w	r3, r7, #32
 8000b0a:	2230      	movs	r2, #48	; 0x30
 8000b0c:	2100      	movs	r1, #0
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f004 fc8a 	bl	8005428 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	2200      	movs	r2, #0
 8000b1a:	601a      	str	r2, [r3, #0]
 8000b1c:	605a      	str	r2, [r3, #4]
 8000b1e:	609a      	str	r2, [r3, #8]
 8000b20:	60da      	str	r2, [r3, #12]
 8000b22:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
 8000b28:	4b2b      	ldr	r3, [pc, #172]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	4a2a      	ldr	r2, [pc, #168]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b32:	6413      	str	r3, [r2, #64]	; 0x40
 8000b34:	4b28      	ldr	r3, [pc, #160]	; (8000bd8 <SystemClock_Config+0xd8>)
 8000b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b3c:	60bb      	str	r3, [r7, #8]
 8000b3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b40:	2300      	movs	r3, #0
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	4b25      	ldr	r3, [pc, #148]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a24      	ldr	r2, [pc, #144]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4e:	6013      	str	r3, [r2, #0]
 8000b50:	4b22      	ldr	r3, [pc, #136]	; (8000bdc <SystemClock_Config+0xdc>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b58:	607b      	str	r3, [r7, #4]
 8000b5a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b66:	2302      	movs	r3, #2
 8000b68:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b6e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000b74:	23b4      	movs	r3, #180	; 0xb4
 8000b76:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b7c:	2304      	movs	r3, #4
 8000b7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b80:	f107 0320 	add.w	r3, r7, #32
 8000b84:	4618      	mov	r0, r3
 8000b86:	f002 fa01 	bl	8002f8c <HAL_RCC_OscConfig>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b90:	f000 f86a 	bl	8000c68 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b94:	f002 f9aa 	bl	8002eec <HAL_PWREx_EnableOverDrive>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000b9e:	f000 f863 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2302      	movs	r3, #2
 8000ba8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bb4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bb8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	2105      	movs	r1, #5
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f002 fc5b 	bl	800347c <HAL_RCC_ClockConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000bcc:	f000 f84c 	bl	8000c68 <Error_Handler>
  }
}
 8000bd0:	bf00      	nop
 8000bd2:	3750      	adds	r7, #80	; 0x50
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40007000 	.word	0x40007000

08000be0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
	static unsigned char cnt = 0;
	if(htim->Instance == TIM7)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a18      	ldr	r2, [pc, #96]	; (8000c50 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	d12a      	bne.n	8000c48 <HAL_TIM_PeriodElapsedCallback+0x68>
	{
		//float | 50 ->freq, sampling : cnt/1000 sinfloat(2π * Hz * Angle)
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (sinf(2 * 3.1415926535f * 50 * cnt / 1000.f)+1) * 2047);
 8000bf2:	4b18      	ldr	r3, [pc, #96]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	ee07 3a90 	vmov	s15, r3
 8000bfa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bfe:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000c58 <HAL_TIM_PeriodElapsedCallback+0x78>
 8000c02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c06:	eddf 6a15 	vldr	s13, [pc, #84]	; 8000c5c <HAL_TIM_PeriodElapsedCallback+0x7c>
 8000c0a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c0e:	eeb0 0a47 	vmov.f32	s0, s14
 8000c12:	f004 fc11 	bl	8005438 <sinf>
 8000c16:	eef0 7a40 	vmov.f32	s15, s0
 8000c1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000c1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000c22:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8000c60 <HAL_TIM_PeriodElapsedCallback+0x80>
 8000c26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c2e:	ee17 3a90 	vmov	r3, s15
 8000c32:	2200      	movs	r2, #0
 8000c34:	2100      	movs	r1, #0
 8000c36:	480b      	ldr	r0, [pc, #44]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000c38:	f001 f9bd 	bl	8001fb6 <HAL_DAC_SetValue>
		cnt++;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	3301      	adds	r3, #1
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8000c46:	701a      	strb	r2, [r3, #0]
		if(cnt > 999) cnt = 0;
	}
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}
 8000c50:	40001400 	.word	0x40001400
 8000c54:	20000028 	.word	0x20000028
 8000c58:	439d1463 	.word	0x439d1463
 8000c5c:	447a0000 	.word	0x447a0000
 8000c60:	44ffe000 	.word	0x44ffe000
 8000c64:	200000d4 	.word	0x200000d4

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>
	...

08000c74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c82:	4a0f      	ldr	r2, [pc, #60]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c88:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8a:	4b0d      	ldr	r3, [pc, #52]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <HAL_MspInit+0x4c>)
 8000ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000caa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb2:	bf00      	nop
 8000cb4:	370c      	adds	r7, #12
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40023800 	.word	0x40023800

08000cc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <NMI_Handler+0x4>

08000cca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cce:	e7fe      	b.n	8000cce <HardFault_Handler+0x4>

08000cd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd4:	e7fe      	b.n	8000cd4 <MemManage_Handler+0x4>

08000cd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cda:	e7fe      	b.n	8000cda <BusFault_Handler+0x4>

08000cdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce0:	e7fe      	b.n	8000ce0 <UsageFault_Handler+0x4>

08000ce2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce2:	b480      	push	{r7}
 8000ce4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr

08000cfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d02:	bf00      	nop
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d10:	f000 fd3a 	bl	8001788 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000d1c:	2008      	movs	r0, #8
 8000d1e:	f001 ff01 	bl	8002b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
	...

08000d28 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d2c:	4802      	ldr	r0, [pc, #8]	; (8000d38 <TIM4_IRQHandler+0x10>)
 8000d2e:	f002 feba 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d32:	bf00      	nop
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	2000013c 	.word	0x2000013c

08000d3c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000d40:	4802      	ldr	r0, [pc, #8]	; (8000d4c <USART3_IRQHandler+0x10>)
 8000d42:	f003 fd33 	bl	80047ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000d46:	bf00      	nop
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	200002ec 	.word	0x200002ec

08000d50 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000d54:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000d58:	f001 fee4 	bl	8002b24 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000d5c:	bf00      	nop
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000d64:	4802      	ldr	r0, [pc, #8]	; (8000d70 <TIM7_IRQHandler+0x10>)
 8000d66:	f002 fe9e 	bl	8003aa6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002a4 	.word	0x200002a4

08000d74 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <DMA2_Stream0_IRQHandler+0x10>)
 8000d7a:	f001 fad1 	bl	8002320 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	20000074 	.word	0x20000074

08000d88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <SystemInit+0x20>)
 8000d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d92:	4a05      	ldr	r2, [pc, #20]	; (8000da8 <SystemInit+0x20>)
 8000d94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000db2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dc0:	f107 0320 	add.w	r3, r7, #32
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dca:	1d3b      	adds	r3, r7, #4
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
 8000dd0:	605a      	str	r2, [r3, #4]
 8000dd2:	609a      	str	r2, [r3, #8]
 8000dd4:	60da      	str	r2, [r3, #12]
 8000dd6:	611a      	str	r2, [r3, #16]
 8000dd8:	615a      	str	r2, [r3, #20]
 8000dda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ddc:	4b2d      	ldr	r3, [pc, #180]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000dde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000de2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000de4:	4b2b      	ldr	r3, [pc, #172]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000de6:	22b3      	movs	r2, #179	; 0xb3
 8000de8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dea:	4b2a      	ldr	r3, [pc, #168]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000df0:	4b28      	ldr	r3, [pc, #160]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000df2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000df6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000df8:	4b26      	ldr	r3, [pc, #152]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dfe:	4b25      	ldr	r3, [pc, #148]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e00:	2200      	movs	r2, #0
 8000e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e04:	4823      	ldr	r0, [pc, #140]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e06:	f002 fd35 	bl	8003874 <HAL_TIM_Base_Init>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000e10:	f7ff ff2a 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e18:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e1a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e1e:	4619      	mov	r1, r3
 8000e20:	481c      	ldr	r0, [pc, #112]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e22:	f003 f80b 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000e2c:	f7ff ff1c 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000e30:	4818      	ldr	r0, [pc, #96]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e32:	f002 fddf 	bl	80039f4 <HAL_TIM_PWM_Init>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000e3c:	f7ff ff14 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e48:	f107 0320 	add.w	r3, r7, #32
 8000e4c:	4619      	mov	r1, r3
 8000e4e:	4811      	ldr	r0, [pc, #68]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e50:	f003 fbce 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000e5a:	f7ff ff05 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e5e:	2360      	movs	r3, #96	; 0x60
 8000e60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000e62:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e66:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e70:	1d3b      	adds	r3, r7, #4
 8000e72:	2200      	movs	r2, #0
 8000e74:	4619      	mov	r1, r3
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e78:	f002 ff1e 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e82:	f7ff fef1 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e86:	4803      	ldr	r0, [pc, #12]	; (8000e94 <MX_TIM2_Init+0xe8>)
 8000e88:	f000 fab2 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000e8c:	bf00      	nop
 8000e8e:	3738      	adds	r7, #56	; 0x38
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	2000025c 	.word	0x2000025c

08000e98 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b08e      	sub	sp, #56	; 0x38
 8000e9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	601a      	str	r2, [r3, #0]
 8000ea6:	605a      	str	r2, [r3, #4]
 8000ea8:	609a      	str	r2, [r3, #8]
 8000eaa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eac:	f107 0320 	add.w	r3, r7, #32
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
 8000ebe:	609a      	str	r2, [r3, #8]
 8000ec0:	60da      	str	r2, [r3, #12]
 8000ec2:	611a      	str	r2, [r3, #16]
 8000ec4:	615a      	str	r2, [r3, #20]
 8000ec6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec8:	4b2c      	ldr	r3, [pc, #176]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000eca:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <MX_TIM3_Init+0xe8>)
 8000ecc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8000ece:	4b2b      	ldr	r3, [pc, #172]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ed4:	4b29      	ldr	r3, [pc, #164]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8000eda:	4b28      	ldr	r3, [pc, #160]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000edc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000ee0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ee2:	4b26      	ldr	r3, [pc, #152]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee8:	4b24      	ldr	r3, [pc, #144]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000eee:	4823      	ldr	r0, [pc, #140]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000ef0:	f002 fcc0 	bl	8003874 <HAL_TIM_Base_Init>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000efa:	f7ff feb5 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000efe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f02:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f04:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f08:	4619      	mov	r1, r3
 8000f0a:	481c      	ldr	r0, [pc, #112]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000f0c:	f002 ff96 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000f16:	f7ff fea7 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f1a:	4818      	ldr	r0, [pc, #96]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000f1c:	f002 fd6a 	bl	80039f4 <HAL_TIM_PWM_Init>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000f26:	f7ff fe9f 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f32:	f107 0320 	add.w	r3, r7, #32
 8000f36:	4619      	mov	r1, r3
 8000f38:	4810      	ldr	r0, [pc, #64]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000f3a:	f003 fb59 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000f44:	f7ff fe90 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f48:	2360      	movs	r3, #96	; 0x60
 8000f4a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4807      	ldr	r0, [pc, #28]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000f60:	f002 feaa 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000f6a:	f7ff fe7d 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f6e:	4803      	ldr	r0, [pc, #12]	; (8000f7c <MX_TIM3_Init+0xe4>)
 8000f70:	f000 fa3e 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 8000f74:	bf00      	nop
 8000f76:	3738      	adds	r7, #56	; 0x38
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000214 	.word	0x20000214
 8000f80:	40000400 	.word	0x40000400

08000f84 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b08e      	sub	sp, #56	; 0x38
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f8a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f8e:	2200      	movs	r2, #0
 8000f90:	601a      	str	r2, [r3, #0]
 8000f92:	605a      	str	r2, [r3, #4]
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f98:	f107 0320 	add.w	r3, r7, #32
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]
 8000fae:	611a      	str	r2, [r3, #16]
 8000fb0:	615a      	str	r2, [r3, #20]
 8000fb2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fb4:	4b3b      	ldr	r3, [pc, #236]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fb6:	4a3c      	ldr	r2, [pc, #240]	; (80010a8 <MX_TIM4_Init+0x124>)
 8000fb8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8000fba:	4b3a      	ldr	r3, [pc, #232]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fbc:	2211      	movs	r2, #17
 8000fbe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8000fc6:	4b37      	ldr	r3, [pc, #220]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fc8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000fcc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fce:	4b35      	ldr	r3, [pc, #212]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd4:	4b33      	ldr	r3, [pc, #204]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fda:	4832      	ldr	r0, [pc, #200]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000fdc:	f002 fc4a 	bl	8003874 <HAL_TIM_Base_Init>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000fe6:	f7ff fe3f 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000ff0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	482b      	ldr	r0, [pc, #172]	; (80010a4 <MX_TIM4_Init+0x120>)
 8000ff8:	f002 ff20 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001002:	f7ff fe31 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001006:	4827      	ldr	r0, [pc, #156]	; (80010a4 <MX_TIM4_Init+0x120>)
 8001008:	f002 fcf4 	bl	80039f4 <HAL_TIM_PWM_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001012:	f7ff fe29 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800101e:	f107 0320 	add.w	r3, r7, #32
 8001022:	4619      	mov	r1, r3
 8001024:	481f      	ldr	r0, [pc, #124]	; (80010a4 <MX_TIM4_Init+0x120>)
 8001026:	f003 fae3 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d001      	beq.n	8001034 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001030:	f7ff fe1a 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001034:	2360      	movs	r3, #96	; 0x60
 8001036:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001038:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800103c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2200      	movs	r2, #0
 800104a:	4619      	mov	r1, r3
 800104c:	4815      	ldr	r0, [pc, #84]	; (80010a4 <MX_TIM4_Init+0x120>)
 800104e:	f002 fe33 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001058:	f7ff fe06 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800105c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001060:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001062:	1d3b      	adds	r3, r7, #4
 8001064:	2204      	movs	r2, #4
 8001066:	4619      	mov	r1, r3
 8001068:	480e      	ldr	r0, [pc, #56]	; (80010a4 <MX_TIM4_Init+0x120>)
 800106a:	f002 fe25 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001074:	f7ff fdf8 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001078:	f641 4351 	movw	r3, #7249	; 0x1c51
 800107c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800107e:	1d3b      	adds	r3, r7, #4
 8001080:	2208      	movs	r2, #8
 8001082:	4619      	mov	r1, r3
 8001084:	4807      	ldr	r0, [pc, #28]	; (80010a4 <MX_TIM4_Init+0x120>)
 8001086:	f002 fe17 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001090:	f7ff fdea 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001094:	4803      	ldr	r0, [pc, #12]	; (80010a4 <MX_TIM4_Init+0x120>)
 8001096:	f000 f9ab 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800109a:	bf00      	nop
 800109c:	3738      	adds	r7, #56	; 0x38
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000013c 	.word	0x2000013c
 80010a8:	40000800 	.word	0x40000800

080010ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08e      	sub	sp, #56	; 0x38
 80010b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010b6:	2200      	movs	r2, #0
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	605a      	str	r2, [r3, #4]
 80010bc:	609a      	str	r2, [r3, #8]
 80010be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010c0:	f107 0320 	add.w	r3, r7, #32
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
 80010d8:	615a      	str	r2, [r3, #20]
 80010da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010de:	4a32      	ldr	r2, [pc, #200]	; (80011a8 <MX_TIM5_Init+0xfc>)
 80010e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010e4:	2209      	movs	r2, #9
 80010e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e8:	4b2e      	ldr	r3, [pc, #184]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80010ee:	4b2d      	ldr	r3, [pc, #180]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010f0:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_TIM5_Init+0x100>)
 80010f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b2a      	ldr	r3, [pc, #168]	; (80011a4 <MX_TIM5_Init+0xf8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001100:	4828      	ldr	r0, [pc, #160]	; (80011a4 <MX_TIM5_Init+0xf8>)
 8001102:	f002 fbb7 	bl	8003874 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800110c:	f7ff fdac 	bl	8000c68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_TIM5_Init+0xf8>)
 800111e:	f002 fe8d 	bl	8003e3c <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001128:	f7ff fd9e 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800112c:	481d      	ldr	r0, [pc, #116]	; (80011a4 <MX_TIM5_Init+0xf8>)
 800112e:	f002 fc61 	bl	80039f4 <HAL_TIM_PWM_Init>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001138:	f7ff fd96 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800113c:	2300      	movs	r3, #0
 800113e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001140:	2300      	movs	r3, #0
 8001142:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001144:	f107 0320 	add.w	r3, r7, #32
 8001148:	4619      	mov	r1, r3
 800114a:	4816      	ldr	r0, [pc, #88]	; (80011a4 <MX_TIM5_Init+0xf8>)
 800114c:	f003 fa50 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001156:	f7ff fd87 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115a:	2360      	movs	r3, #96	; 0x60
 800115c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	2200      	movs	r2, #0
 800116e:	4619      	mov	r1, r3
 8001170:	480c      	ldr	r0, [pc, #48]	; (80011a4 <MX_TIM5_Init+0xf8>)
 8001172:	f002 fda1 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d001      	beq.n	8001180 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800117c:	f7ff fd74 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001180:	1d3b      	adds	r3, r7, #4
 8001182:	220c      	movs	r2, #12
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM5_Init+0xf8>)
 8001188:	f002 fd96 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001192:	f7ff fd69 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001196:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM5_Init+0xf8>)
 8001198:	f000 f92a 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 800119c:	bf00      	nop
 800119e:	3738      	adds	r7, #56	; 0x38
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200001cc 	.word	0x200001cc
 80011a8:	40000c00 	.word	0x40000c00
 80011ac:	0001869f 	.word	0x0001869f

080011b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80011be:	4b15      	ldr	r3, [pc, #84]	; (8001214 <MX_TIM7_Init+0x64>)
 80011c0:	4a15      	ldr	r2, [pc, #84]	; (8001218 <MX_TIM7_Init+0x68>)
 80011c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 80011c4:	4b13      	ldr	r3, [pc, #76]	; (8001214 <MX_TIM7_Init+0x64>)
 80011c6:	2208      	movs	r2, #8
 80011c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ca:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_TIM7_Init+0x64>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80011d0:	4b10      	ldr	r3, [pc, #64]	; (8001214 <MX_TIM7_Init+0x64>)
 80011d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80011d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80011d8:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_TIM7_Init+0x64>)
 80011da:	2280      	movs	r2, #128	; 0x80
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80011de:	480d      	ldr	r0, [pc, #52]	; (8001214 <MX_TIM7_Init+0x64>)
 80011e0:	f002 fb48 	bl	8003874 <HAL_TIM_Base_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80011ea:	f7ff fd3d 	bl	8000c68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011ee:	2300      	movs	r3, #0
 80011f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80011f6:	463b      	mov	r3, r7
 80011f8:	4619      	mov	r1, r3
 80011fa:	4806      	ldr	r0, [pc, #24]	; (8001214 <MX_TIM7_Init+0x64>)
 80011fc:	f003 f9f8 	bl	80045f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001206:	f7ff fd2f 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	3708      	adds	r7, #8
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	200002a4 	.word	0x200002a4
 8001218:	40001400 	.word	0x40001400

0800121c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]
 8001228:	605a      	str	r2, [r3, #4]
 800122a:	609a      	str	r2, [r3, #8]
 800122c:	60da      	str	r2, [r3, #12]
 800122e:	611a      	str	r2, [r3, #16]
 8001230:	615a      	str	r2, [r3, #20]
 8001232:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001234:	4b1e      	ldr	r3, [pc, #120]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001236:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <MX_TIM10_Init+0x98>)
 8001238:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <MX_TIM10_Init+0x94>)
 800123c:	2247      	movs	r2, #71	; 0x47
 800123e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001248:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800124c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b16      	ldr	r3, [pc, #88]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800125a:	4815      	ldr	r0, [pc, #84]	; (80012b0 <MX_TIM10_Init+0x94>)
 800125c:	f002 fb0a 	bl	8003874 <HAL_TIM_Base_Init>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001266:	f7ff fcff 	bl	8000c68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800126a:	4811      	ldr	r0, [pc, #68]	; (80012b0 <MX_TIM10_Init+0x94>)
 800126c:	f002 fbc2 	bl	80039f4 <HAL_TIM_PWM_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001276:	f7ff fcf7 	bl	8000c68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800127a:	2360      	movs	r3, #96	; 0x60
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800127e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001282:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001284:	2300      	movs	r3, #0
 8001286:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800128c:	1d3b      	adds	r3, r7, #4
 800128e:	2200      	movs	r2, #0
 8001290:	4619      	mov	r1, r3
 8001292:	4807      	ldr	r0, [pc, #28]	; (80012b0 <MX_TIM10_Init+0x94>)
 8001294:	f002 fd10 	bl	8003cb8 <HAL_TIM_PWM_ConfigChannel>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800129e:	f7ff fce3 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80012a2:	4803      	ldr	r0, [pc, #12]	; (80012b0 <MX_TIM10_Init+0x94>)
 80012a4:	f000 f8a4 	bl	80013f0 <HAL_TIM_MspPostInit>

}
 80012a8:	bf00      	nop
 80012aa:	3720      	adds	r7, #32
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000184 	.word	0x20000184
 80012b4:	40014400 	.word	0x40014400

080012b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b088      	sub	sp, #32
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012c8:	d10e      	bne.n	80012e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	61fb      	str	r3, [r7, #28]
 80012ce:	4b42      	ldr	r3, [pc, #264]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80012d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d2:	4a41      	ldr	r2, [pc, #260]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80012d4:	f043 0301 	orr.w	r3, r3, #1
 80012d8:	6413      	str	r3, [r2, #64]	; 0x40
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	61fb      	str	r3, [r7, #28]
 80012e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80012e6:	e072      	b.n	80013ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a3b      	ldr	r2, [pc, #236]	; (80013dc <HAL_TIM_Base_MspInit+0x124>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d10e      	bne.n	8001310 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	61bb      	str	r3, [r7, #24]
 80012f6:	4b38      	ldr	r3, [pc, #224]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	4a37      	ldr	r2, [pc, #220]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80012fc:	f043 0302 	orr.w	r3, r3, #2
 8001300:	6413      	str	r3, [r2, #64]	; 0x40
 8001302:	4b35      	ldr	r3, [pc, #212]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001306:	f003 0302 	and.w	r3, r3, #2
 800130a:	61bb      	str	r3, [r7, #24]
 800130c:	69bb      	ldr	r3, [r7, #24]
}
 800130e:	e05e      	b.n	80013ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	4a32      	ldr	r2, [pc, #200]	; (80013e0 <HAL_TIM_Base_MspInit+0x128>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d116      	bne.n	8001348 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b2e      	ldr	r3, [pc, #184]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a2d      	ldr	r2, [pc, #180]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001324:	f043 0304 	orr.w	r3, r3, #4
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
 800132a:	4b2b      	ldr	r3, [pc, #172]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 800132c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132e:	f003 0304 	and.w	r3, r3, #4
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2100      	movs	r1, #0
 800133a:	201e      	movs	r0, #30
 800133c:	f000 fd91 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001340:	201e      	movs	r0, #30
 8001342:	f000 fdaa 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 8001346:	e042      	b.n	80013ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a25      	ldr	r2, [pc, #148]	; (80013e4 <HAL_TIM_Base_MspInit+0x12c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d10e      	bne.n	8001370 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	613b      	str	r3, [r7, #16]
 8001356:	4b20      	ldr	r3, [pc, #128]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	4a1f      	ldr	r2, [pc, #124]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 800135c:	f043 0308 	orr.w	r3, r3, #8
 8001360:	6413      	str	r3, [r2, #64]	; 0x40
 8001362:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f003 0308 	and.w	r3, r3, #8
 800136a:	613b      	str	r3, [r7, #16]
 800136c:	693b      	ldr	r3, [r7, #16]
}
 800136e:	e02e      	b.n	80013ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	4a1c      	ldr	r2, [pc, #112]	; (80013e8 <HAL_TIM_Base_MspInit+0x130>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d116      	bne.n	80013a8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	60fb      	str	r3, [r7, #12]
 800137e:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a15      	ldr	r2, [pc, #84]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b13      	ldr	r3, [pc, #76]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2100      	movs	r1, #0
 800139a:	2037      	movs	r0, #55	; 0x37
 800139c:	f000 fd61 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80013a0:	2037      	movs	r0, #55	; 0x37
 80013a2:	f000 fd7a 	bl	8001e9a <HAL_NVIC_EnableIRQ>
}
 80013a6:	e012      	b.n	80013ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a0f      	ldr	r2, [pc, #60]	; (80013ec <HAL_TIM_Base_MspInit+0x134>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d10d      	bne.n	80013ce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80013b2:	2300      	movs	r3, #0
 80013b4:	60bb      	str	r3, [r7, #8]
 80013b6:	4b08      	ldr	r3, [pc, #32]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80013b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ba:	4a07      	ldr	r2, [pc, #28]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80013bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013c0:	6453      	str	r3, [r2, #68]	; 0x44
 80013c2:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <HAL_TIM_Base_MspInit+0x120>)
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	68bb      	ldr	r3, [r7, #8]
}
 80013ce:	bf00      	nop
 80013d0:	3720      	adds	r7, #32
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40000400 	.word	0x40000400
 80013e0:	40000800 	.word	0x40000800
 80013e4:	40000c00 	.word	0x40000c00
 80013e8:	40001400 	.word	0x40001400
 80013ec:	40014400 	.word	0x40014400

080013f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b08c      	sub	sp, #48	; 0x30
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001410:	d11e      	bne.n	8001450 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	61bb      	str	r3, [r7, #24]
 8001416:	4b58      	ldr	r3, [pc, #352]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a57      	ldr	r2, [pc, #348]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b55      	ldr	r3, [pc, #340]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	61bb      	str	r3, [r7, #24]
 800142c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800142e:	2320      	movs	r3, #32
 8001430:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001432:	2302      	movs	r3, #2
 8001434:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800143e:	2301      	movs	r3, #1
 8001440:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001442:	f107 031c 	add.w	r3, r7, #28
 8001446:	4619      	mov	r1, r3
 8001448:	484c      	ldr	r0, [pc, #304]	; (800157c <HAL_TIM_MspPostInit+0x18c>)
 800144a:	f001 f9a5 	bl	8002798 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800144e:	e08f      	b.n	8001570 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a4a      	ldr	r2, [pc, #296]	; (8001580 <HAL_TIM_MspPostInit+0x190>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d11e      	bne.n	8001498 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	4b46      	ldr	r3, [pc, #280]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a45      	ldr	r2, [pc, #276]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 8001464:	f043 0304 	orr.w	r3, r3, #4
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b43      	ldr	r3, [pc, #268]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0304 	and.w	r3, r3, #4
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001476:	2340      	movs	r3, #64	; 0x40
 8001478:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147a:	2302      	movs	r3, #2
 800147c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001482:	2300      	movs	r3, #0
 8001484:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001486:	2302      	movs	r3, #2
 8001488:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	483c      	ldr	r0, [pc, #240]	; (8001584 <HAL_TIM_MspPostInit+0x194>)
 8001492:	f001 f981 	bl	8002798 <HAL_GPIO_Init>
}
 8001496:	e06b      	b.n	8001570 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a3a      	ldr	r2, [pc, #232]	; (8001588 <HAL_TIM_MspPostInit+0x198>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d11f      	bne.n	80014e2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	4b34      	ldr	r3, [pc, #208]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a33      	ldr	r2, [pc, #204]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014ac:	f043 0308 	orr.w	r3, r3, #8
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0308 	and.w	r3, r3, #8
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80014be:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014d0:	2302      	movs	r3, #2
 80014d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014d4:	f107 031c 	add.w	r3, r7, #28
 80014d8:	4619      	mov	r1, r3
 80014da:	482c      	ldr	r0, [pc, #176]	; (800158c <HAL_TIM_MspPostInit+0x19c>)
 80014dc:	f001 f95c 	bl	8002798 <HAL_GPIO_Init>
}
 80014e0:	e046      	b.n	8001570 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a2a      	ldr	r2, [pc, #168]	; (8001590 <HAL_TIM_MspPostInit+0x1a0>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d11e      	bne.n	800152a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	2300      	movs	r3, #0
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	4b21      	ldr	r3, [pc, #132]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f4:	4a20      	ldr	r2, [pc, #128]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6313      	str	r3, [r2, #48]	; 0x30
 80014fc:	4b1e      	ldr	r3, [pc, #120]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 80014fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
 8001506:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001508:	2309      	movs	r3, #9
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150c:	2302      	movs	r3, #2
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001510:	2300      	movs	r3, #0
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001518:	2302      	movs	r3, #2
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800151c:	f107 031c 	add.w	r3, r7, #28
 8001520:	4619      	mov	r1, r3
 8001522:	4816      	ldr	r0, [pc, #88]	; (800157c <HAL_TIM_MspPostInit+0x18c>)
 8001524:	f001 f938 	bl	8002798 <HAL_GPIO_Init>
}
 8001528:	e022      	b.n	8001570 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4a19      	ldr	r2, [pc, #100]	; (8001594 <HAL_TIM_MspPostInit+0x1a4>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d11d      	bne.n	8001570 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	4b0f      	ldr	r3, [pc, #60]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	4a0e      	ldr	r2, [pc, #56]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 800153e:	f043 0320 	orr.w	r3, r3, #32
 8001542:	6313      	str	r3, [r2, #48]	; 0x30
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_TIM_MspPostInit+0x188>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001548:	f003 0320 	and.w	r3, r3, #32
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001550:	2340      	movs	r3, #64	; 0x40
 8001552:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155c:	2300      	movs	r3, #0
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001560:	2303      	movs	r3, #3
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001564:	f107 031c 	add.w	r3, r7, #28
 8001568:	4619      	mov	r1, r3
 800156a:	480b      	ldr	r0, [pc, #44]	; (8001598 <HAL_TIM_MspPostInit+0x1a8>)
 800156c:	f001 f914 	bl	8002798 <HAL_GPIO_Init>
}
 8001570:	bf00      	nop
 8001572:	3730      	adds	r7, #48	; 0x30
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40000400 	.word	0x40000400
 8001584:	40020800 	.word	0x40020800
 8001588:	40000800 	.word	0x40000800
 800158c:	40020c00 	.word	0x40020c00
 8001590:	40000c00 	.word	0x40000c00
 8001594:	40014400 	.word	0x40014400
 8001598:	40021400 	.word	0x40021400

0800159c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a0:	4b11      	ldr	r3, [pc, #68]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a2:	4a12      	ldr	r2, [pc, #72]	; (80015ec <MX_USART3_UART_Init+0x50>)
 80015a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80015a6:	4b10      	ldr	r3, [pc, #64]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80015ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015ae:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015ba:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015bc:	2200      	movs	r2, #0
 80015be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c0:	4b09      	ldr	r3, [pc, #36]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c2:	220c      	movs	r2, #12
 80015c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015c6:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015cc:	4b06      	ldr	r3, [pc, #24]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d2:	4805      	ldr	r0, [pc, #20]	; (80015e8 <MX_USART3_UART_Init+0x4c>)
 80015d4:	f003 f89c 	bl	8004710 <HAL_UART_Init>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015de:	f7ff fb43 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	200002ec 	.word	0x200002ec
 80015ec:	40004800 	.word	0x40004800

080015f0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a1d      	ldr	r2, [pc, #116]	; (8001684 <HAL_UART_MspInit+0x94>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d134      	bne.n	800167c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_UART_MspInit+0x98>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a1b      	ldr	r2, [pc, #108]	; (8001688 <HAL_UART_MspInit+0x98>)
 800161c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b19      	ldr	r3, [pc, #100]	; (8001688 <HAL_UART_MspInit+0x98>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b15      	ldr	r3, [pc, #84]	; (8001688 <HAL_UART_MspInit+0x98>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a14      	ldr	r2, [pc, #80]	; (8001688 <HAL_UART_MspInit+0x98>)
 8001638:	f043 0308 	orr.w	r3, r3, #8
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b12      	ldr	r3, [pc, #72]	; (8001688 <HAL_UART_MspInit+0x98>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0308 	and.w	r3, r3, #8
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800164a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001658:	2303      	movs	r3, #3
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800165c:	2307      	movs	r3, #7
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	4809      	ldr	r0, [pc, #36]	; (800168c <HAL_UART_MspInit+0x9c>)
 8001668:	f001 f896 	bl	8002798 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	2100      	movs	r1, #0
 8001670:	2027      	movs	r0, #39	; 0x27
 8001672:	f000 fbf6 	bl	8001e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001676:	2027      	movs	r0, #39	; 0x27
 8001678:	f000 fc0f 	bl	8001e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800167c:	bf00      	nop
 800167e:	3728      	adds	r7, #40	; 0x28
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	40004800 	.word	0x40004800
 8001688:	40023800 	.word	0x40023800
 800168c:	40020c00 	.word	0x40020c00

08001690 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001690:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001694:	480d      	ldr	r0, [pc, #52]	; (80016cc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001696:	490e      	ldr	r1, [pc, #56]	; (80016d0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001698:	4a0e      	ldr	r2, [pc, #56]	; (80016d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800169a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800169c:	e002      	b.n	80016a4 <LoopCopyDataInit>

0800169e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800169e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016a2:	3304      	adds	r3, #4

080016a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a8:	d3f9      	bcc.n	800169e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016ac:	4c0b      	ldr	r4, [pc, #44]	; (80016dc <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016b0:	e001      	b.n	80016b6 <LoopFillZerobss>

080016b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016b4:	3204      	adds	r2, #4

080016b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b8:	d3fb      	bcc.n	80016b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016ba:	f7ff fb65 	bl	8000d88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016be:	f003 fe8f 	bl	80053e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016c2:	f7ff f9ef 	bl	8000aa4 <main>
  bx  lr    
 80016c6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80016c8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80016cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80016d4:	08006328 	.word	0x08006328
  ldr r2, =_sbss
 80016d8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80016dc:	20000334 	.word	0x20000334

080016e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e0:	e7fe      	b.n	80016e0 <ADC_IRQHandler>
	...

080016e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_Init+0x40>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	; (8001724 <HAL_Init+0x40>)
 80016ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016f4:	4b0b      	ldr	r3, [pc, #44]	; (8001724 <HAL_Init+0x40>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a0a      	ldr	r2, [pc, #40]	; (8001724 <HAL_Init+0x40>)
 80016fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001700:	4b08      	ldr	r3, [pc, #32]	; (8001724 <HAL_Init+0x40>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a07      	ldr	r2, [pc, #28]	; (8001724 <HAL_Init+0x40>)
 8001706:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800170a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170c:	2003      	movs	r0, #3
 800170e:	f000 fb9d 	bl	8001e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001712:	200f      	movs	r0, #15
 8001714:	f000 f808 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001718:	f7ff faac 	bl	8000c74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023c00 	.word	0x40023c00

08001728 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001730:	4b12      	ldr	r3, [pc, #72]	; (800177c <HAL_InitTick+0x54>)
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	4b12      	ldr	r3, [pc, #72]	; (8001780 <HAL_InitTick+0x58>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	4619      	mov	r1, r3
 800173a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800173e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001742:	fbb2 f3f3 	udiv	r3, r2, r3
 8001746:	4618      	mov	r0, r3
 8001748:	f000 fbb5 	bl	8001eb6 <HAL_SYSTICK_Config>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d001      	beq.n	8001756 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	e00e      	b.n	8001774 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d80a      	bhi.n	8001772 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800175c:	2200      	movs	r2, #0
 800175e:	6879      	ldr	r1, [r7, #4]
 8001760:	f04f 30ff 	mov.w	r0, #4294967295
 8001764:	f000 fb7d 	bl	8001e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001768:	4a06      	ldr	r2, [pc, #24]	; (8001784 <HAL_InitTick+0x5c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800176e:	2300      	movs	r3, #0
 8001770:	e000      	b.n	8001774 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	3708      	adds	r7, #8
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}
 800177c:	20000000 	.word	0x20000000
 8001780:	20000008 	.word	0x20000008
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <HAL_IncTick+0x20>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	461a      	mov	r2, r3
 8001792:	4b06      	ldr	r3, [pc, #24]	; (80017ac <HAL_IncTick+0x24>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4413      	add	r3, r2
 8001798:	4a04      	ldr	r2, [pc, #16]	; (80017ac <HAL_IncTick+0x24>)
 800179a:	6013      	str	r3, [r2, #0]
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	20000008 	.word	0x20000008
 80017ac:	20000330 	.word	0x20000330

080017b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return uwTick;
 80017b4:	4b03      	ldr	r3, [pc, #12]	; (80017c4 <HAL_GetTick+0x14>)
 80017b6:	681b      	ldr	r3, [r3, #0]
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	20000330 	.word	0x20000330

080017c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d101      	bne.n	80017de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80017da:	2301      	movs	r3, #1
 80017dc:	e033      	b.n	8001846 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f7fe fef8 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	f003 0310 	and.w	r3, r3, #16
 8001802:	2b00      	cmp	r3, #0
 8001804:	d118      	bne.n	8001838 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800180e:	f023 0302 	bic.w	r3, r3, #2
 8001812:	f043 0202 	orr.w	r2, r3, #2
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800181a:	6878      	ldr	r0, [r7, #4]
 800181c:	f000 f94a 	bl	8001ab4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f023 0303 	bic.w	r3, r3, #3
 800182e:	f043 0201 	orr.w	r2, r3, #1
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
 8001836:	e001      	b.n	800183c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001844:	7bfb      	ldrb	r3, [r7, #15]
}
 8001846:	4618      	mov	r0, r3
 8001848:	3710      	adds	r7, #16
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001850:	b480      	push	{r7}
 8001852:	b085      	sub	sp, #20
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
 8001858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800185a:	2300      	movs	r3, #0
 800185c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001864:	2b01      	cmp	r3, #1
 8001866:	d101      	bne.n	800186c <HAL_ADC_ConfigChannel+0x1c>
 8001868:	2302      	movs	r3, #2
 800186a:	e113      	b.n	8001a94 <HAL_ADC_ConfigChannel+0x244>
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	2201      	movs	r2, #1
 8001870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2b09      	cmp	r3, #9
 800187a:	d925      	bls.n	80018c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68d9      	ldr	r1, [r3, #12]
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	b29b      	uxth	r3, r3
 8001888:	461a      	mov	r2, r3
 800188a:	4613      	mov	r3, r2
 800188c:	005b      	lsls	r3, r3, #1
 800188e:	4413      	add	r3, r2
 8001890:	3b1e      	subs	r3, #30
 8001892:	2207      	movs	r2, #7
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	43da      	mvns	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	400a      	ands	r2, r1
 80018a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	68d9      	ldr	r1, [r3, #12]
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	689a      	ldr	r2, [r3, #8]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	4603      	mov	r3, r0
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	4403      	add	r3, r0
 80018ba:	3b1e      	subs	r3, #30
 80018bc:	409a      	lsls	r2, r3
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	e022      	b.n	800190e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6919      	ldr	r1, [r3, #16]
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	b29b      	uxth	r3, r3
 80018d4:	461a      	mov	r2, r3
 80018d6:	4613      	mov	r3, r2
 80018d8:	005b      	lsls	r3, r3, #1
 80018da:	4413      	add	r3, r2
 80018dc:	2207      	movs	r2, #7
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43da      	mvns	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	400a      	ands	r2, r1
 80018ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	6919      	ldr	r1, [r3, #16]
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	689a      	ldr	r2, [r3, #8]
 80018f6:	683b      	ldr	r3, [r7, #0]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	b29b      	uxth	r3, r3
 80018fc:	4618      	mov	r0, r3
 80018fe:	4603      	mov	r3, r0
 8001900:	005b      	lsls	r3, r3, #1
 8001902:	4403      	add	r3, r0
 8001904:	409a      	lsls	r2, r3
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b06      	cmp	r3, #6
 8001914:	d824      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	4413      	add	r3, r2
 8001926:	3b05      	subs	r3, #5
 8001928:	221f      	movs	r2, #31
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	400a      	ands	r2, r1
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	b29b      	uxth	r3, r3
 8001944:	4618      	mov	r0, r3
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685a      	ldr	r2, [r3, #4]
 800194a:	4613      	mov	r3, r2
 800194c:	009b      	lsls	r3, r3, #2
 800194e:	4413      	add	r3, r2
 8001950:	3b05      	subs	r3, #5
 8001952:	fa00 f203 	lsl.w	r2, r0, r3
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	635a      	str	r2, [r3, #52]	; 0x34
 800195e:	e04c      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	2b0c      	cmp	r3, #12
 8001966:	d824      	bhi.n	80019b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	4613      	mov	r3, r2
 8001974:	009b      	lsls	r3, r3, #2
 8001976:	4413      	add	r3, r2
 8001978:	3b23      	subs	r3, #35	; 0x23
 800197a:	221f      	movs	r2, #31
 800197c:	fa02 f303 	lsl.w	r3, r2, r3
 8001980:	43da      	mvns	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	400a      	ands	r2, r1
 8001988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	b29b      	uxth	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	685a      	ldr	r2, [r3, #4]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3b23      	subs	r3, #35	; 0x23
 80019a4:	fa00 f203 	lsl.w	r2, r0, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	430a      	orrs	r2, r1
 80019ae:	631a      	str	r2, [r3, #48]	; 0x30
 80019b0:	e023      	b.n	80019fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4613      	mov	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	4413      	add	r3, r2
 80019c2:	3b41      	subs	r3, #65	; 0x41
 80019c4:	221f      	movs	r2, #31
 80019c6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ca:	43da      	mvns	r2, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	400a      	ands	r2, r1
 80019d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	b29b      	uxth	r3, r3
 80019e0:	4618      	mov	r0, r3
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	3b41      	subs	r3, #65	; 0x41
 80019ee:	fa00 f203 	lsl.w	r2, r0, r3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	430a      	orrs	r2, r1
 80019f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019fa:	4b29      	ldr	r3, [pc, #164]	; (8001aa0 <HAL_ADC_ConfigChannel+0x250>)
 80019fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a28      	ldr	r2, [pc, #160]	; (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d10f      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	2b12      	cmp	r3, #18
 8001a0e:	d10b      	bne.n	8001a28 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1d      	ldr	r2, [pc, #116]	; (8001aa4 <HAL_ADC_ConfigChannel+0x254>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d12b      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a1c      	ldr	r2, [pc, #112]	; (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d003      	beq.n	8001a44 <HAL_ADC_ConfigChannel+0x1f4>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	2b11      	cmp	r3, #17
 8001a42:	d122      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a11      	ldr	r2, [pc, #68]	; (8001aa8 <HAL_ADC_ConfigChannel+0x258>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d111      	bne.n	8001a8a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a66:	4b11      	ldr	r3, [pc, #68]	; (8001aac <HAL_ADC_ConfigChannel+0x25c>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a11      	ldr	r2, [pc, #68]	; (8001ab0 <HAL_ADC_ConfigChannel+0x260>)
 8001a6c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a70:	0c9a      	lsrs	r2, r3, #18
 8001a72:	4613      	mov	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	4413      	add	r3, r2
 8001a78:	005b      	lsls	r3, r3, #1
 8001a7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a7c:	e002      	b.n	8001a84 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3b01      	subs	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f9      	bne.n	8001a7e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a92:	2300      	movs	r3, #0
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	3714      	adds	r7, #20
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9e:	4770      	bx	lr
 8001aa0:	40012300 	.word	0x40012300
 8001aa4:	40012000 	.word	0x40012000
 8001aa8:	10000012 	.word	0x10000012
 8001aac:	20000000 	.word	0x20000000
 8001ab0:	431bde83 	.word	0x431bde83

08001ab4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b085      	sub	sp, #20
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001abc:	4b79      	ldr	r3, [pc, #484]	; (8001ca4 <ADC_Init+0x1f0>)
 8001abe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	431a      	orrs	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ae8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6859      	ldr	r1, [r3, #4]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	430a      	orrs	r2, r1
 8001afc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	685a      	ldr	r2, [r3, #4]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001b0c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	6859      	ldr	r1, [r3, #4]
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	430a      	orrs	r2, r1
 8001b1e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	689a      	ldr	r2, [r3, #8]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b2e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	6899      	ldr	r1, [r3, #8]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	68da      	ldr	r2, [r3, #12]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	430a      	orrs	r2, r1
 8001b40:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b46:	4a58      	ldr	r2, [pc, #352]	; (8001ca8 <ADC_Init+0x1f4>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b5a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	6899      	ldr	r1, [r3, #8]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b7c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	6899      	ldr	r1, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	609a      	str	r2, [r3, #8]
 8001b90:	e00f      	b.n	8001bb2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	689a      	ldr	r2, [r3, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ba0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	689a      	ldr	r2, [r3, #8]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001bb0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0202 	bic.w	r2, r2, #2
 8001bc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	6899      	ldr	r1, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	7e1b      	ldrb	r3, [r3, #24]
 8001bcc:	005a      	lsls	r2, r3, #1
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d01b      	beq.n	8001c18 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	685a      	ldr	r2, [r3, #4]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001bee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bfe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	6859      	ldr	r1, [r3, #4]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	3b01      	subs	r3, #1
 8001c0c:	035a      	lsls	r2, r3, #13
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
 8001c16:	e007      	b.n	8001c28 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c26:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001c36:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	69db      	ldr	r3, [r3, #28]
 8001c42:	3b01      	subs	r3, #1
 8001c44:	051a      	lsls	r2, r3, #20
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	430a      	orrs	r2, r1
 8001c4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	689a      	ldr	r2, [r3, #8]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	6899      	ldr	r1, [r3, #8]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c6a:	025a      	lsls	r2, r3, #9
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689a      	ldr	r2, [r3, #8]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	6899      	ldr	r1, [r3, #8]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	029a      	lsls	r2, r3, #10
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	430a      	orrs	r2, r1
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr
 8001ca4:	40012300 	.word	0x40012300
 8001ca8:	0f000001 	.word	0x0f000001

08001cac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b085      	sub	sp, #20
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f003 0307 	and.w	r3, r3, #7
 8001cba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc2:	68ba      	ldr	r2, [r7, #8]
 8001cc4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001cc8:	4013      	ands	r3, r2
 8001cca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cd8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cde:	4a04      	ldr	r2, [pc, #16]	; (8001cf0 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	60d3      	str	r3, [r2, #12]
}
 8001ce4:	bf00      	nop
 8001ce6:	3714      	adds	r7, #20
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cee:	4770      	bx	lr
 8001cf0:	e000ed00 	.word	0xe000ed00

08001cf4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <__NVIC_GetPriorityGrouping+0x18>)
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	0a1b      	lsrs	r3, r3, #8
 8001cfe:	f003 0307 	and.w	r3, r3, #7
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00

08001d10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	db0b      	blt.n	8001d3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	f003 021f 	and.w	r2, r3, #31
 8001d28:	4907      	ldr	r1, [pc, #28]	; (8001d48 <__NVIC_EnableIRQ+0x38>)
 8001d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2e:	095b      	lsrs	r3, r3, #5
 8001d30:	2001      	movs	r0, #1
 8001d32:	fa00 f202 	lsl.w	r2, r0, r2
 8001d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3b01      	subs	r3, #1
 8001e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e18:	d301      	bcc.n	8001e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e00f      	b.n	8001e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1e:	4a0a      	ldr	r2, [pc, #40]	; (8001e48 <SysTick_Config+0x40>)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	3b01      	subs	r3, #1
 8001e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e26:	210f      	movs	r1, #15
 8001e28:	f04f 30ff 	mov.w	r0, #4294967295
 8001e2c:	f7ff ff8e 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e30:	4b05      	ldr	r3, [pc, #20]	; (8001e48 <SysTick_Config+0x40>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e36:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <SysTick_Config+0x40>)
 8001e38:	2207      	movs	r2, #7
 8001e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e3c:	2300      	movs	r3, #0
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}
 8001e46:	bf00      	nop
 8001e48:	e000e010 	.word	0xe000e010

08001e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff29 	bl	8001cac <__NVIC_SetPriorityGrouping>
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b086      	sub	sp, #24
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	60b9      	str	r1, [r7, #8]
 8001e6c:	607a      	str	r2, [r7, #4]
 8001e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e74:	f7ff ff3e 	bl	8001cf4 <__NVIC_GetPriorityGrouping>
 8001e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e7a:	687a      	ldr	r2, [r7, #4]
 8001e7c:	68b9      	ldr	r1, [r7, #8]
 8001e7e:	6978      	ldr	r0, [r7, #20]
 8001e80:	f7ff ff8e 	bl	8001da0 <NVIC_EncodePriority>
 8001e84:	4602      	mov	r2, r0
 8001e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f7ff ff5d 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e92:	bf00      	nop
 8001e94:	3718      	adds	r7, #24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b082      	sub	sp, #8
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <__NVIC_EnableIRQ>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b082      	sub	sp, #8
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffa2 	bl	8001e08 <SysTick_Config>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3708      	adds	r7, #8
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ece:	b580      	push	{r7, lr}
 8001ed0:	b082      	sub	sp, #8
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e014      	b.n	8001f0a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	791b      	ldrb	r3, [r3, #4]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f7fe fc31 	bl	8000758 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2202      	movs	r2, #2
 8001efa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2201      	movs	r2, #1
 8001f06:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001f08:	2300      	movs	r3, #0
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	3708      	adds	r7, #8
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}

08001f12 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b083      	sub	sp, #12
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	795b      	ldrb	r3, [r3, #5]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d101      	bne.n	8001f28 <HAL_DAC_Start+0x16>
 8001f24:	2302      	movs	r3, #2
 8001f26:	e040      	b.n	8001faa <HAL_DAC_Start+0x98>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2202      	movs	r2, #2
 8001f32:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	6819      	ldr	r1, [r3, #0]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2201      	movs	r2, #1
 8001f42:	409a      	lsls	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d10f      	bne.n	8001f72 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f5c:	2b3c      	cmp	r3, #60	; 0x3c
 8001f5e:	d11d      	bne.n	8001f9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	685a      	ldr	r2, [r3, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f042 0201 	orr.w	r2, r2, #1
 8001f6e:	605a      	str	r2, [r3, #4]
 8001f70:	e014      	b.n	8001f9c <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	213c      	movs	r1, #60	; 0x3c
 8001f84:	fa01 f303 	lsl.w	r3, r1, r3
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d107      	bne.n	8001f9c <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	685a      	ldr	r2, [r3, #4]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f042 0202 	orr.w	r2, r2, #2
 8001f9a:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	60f8      	str	r0, [r7, #12]
 8001fbe:	60b9      	str	r1, [r7, #8]
 8001fc0:	607a      	str	r2, [r7, #4]
 8001fc2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d105      	bne.n	8001fe0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001fd4:	697a      	ldr	r2, [r7, #20]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	3308      	adds	r3, #8
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e004      	b.n	8001fea <HAL_DAC_SetValue+0x34>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001fe0:	697a      	ldr	r2, [r7, #20]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3314      	adds	r3, #20
 8001fe8:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	461a      	mov	r2, r3
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	371c      	adds	r7, #28
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002000:	b480      	push	{r7}
 8002002:	b087      	sub	sp, #28
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	795b      	ldrb	r3, [r3, #5]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d101      	bne.n	8002018 <HAL_DAC_ConfigChannel+0x18>
 8002014:	2302      	movs	r3, #2
 8002016:	e03c      	b.n	8002092 <HAL_DAC_ConfigChannel+0x92>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2201      	movs	r2, #1
 800201c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	2202      	movs	r2, #2
 8002022:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f003 0310 	and.w	r3, r3, #16
 8002032:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002036:	fa02 f303 	lsl.w	r3, r2, r3
 800203a:	43db      	mvns	r3, r3
 800203c:	697a      	ldr	r2, [r7, #20]
 800203e:	4013      	ands	r3, r2
 8002040:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	685b      	ldr	r3, [r3, #4]
 800204a:	4313      	orrs	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f003 0310 	and.w	r3, r3, #16
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	fa02 f303 	lsl.w	r3, r2, r3
 800205a:	697a      	ldr	r2, [r7, #20]
 800205c:	4313      	orrs	r3, r2
 800205e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	697a      	ldr	r2, [r7, #20]
 8002066:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6819      	ldr	r1, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f003 0310 	and.w	r3, r3, #16
 8002074:	22c0      	movs	r2, #192	; 0xc0
 8002076:	fa02 f303 	lsl.w	r3, r2, r3
 800207a:	43da      	mvns	r2, r3
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	400a      	ands	r2, r1
 8002082:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2201      	movs	r2, #1
 8002088:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2200      	movs	r2, #0
 800208e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002090:	2300      	movs	r3, #0
}
 8002092:	4618      	mov	r0, r3
 8002094:	371c      	adds	r7, #28
 8002096:	46bd      	mov	sp, r7
 8002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209c:	4770      	bx	lr
	...

080020a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b086      	sub	sp, #24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020ac:	f7ff fb80 	bl	80017b0 <HAL_GetTick>
 80020b0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d101      	bne.n	80020bc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e099      	b.n	80021f0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2202      	movs	r2, #2
 80020c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f022 0201 	bic.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020dc:	e00f      	b.n	80020fe <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020de:	f7ff fb67 	bl	80017b0 <HAL_GetTick>
 80020e2:	4602      	mov	r2, r0
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	2b05      	cmp	r3, #5
 80020ea:	d908      	bls.n	80020fe <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2220      	movs	r2, #32
 80020f0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2203      	movs	r2, #3
 80020f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e078      	b.n	80021f0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0301 	and.w	r3, r3, #1
 8002108:	2b00      	cmp	r3, #0
 800210a:	d1e8      	bne.n	80020de <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	4b38      	ldr	r3, [pc, #224]	; (80021f8 <HAL_DMA_Init+0x158>)
 8002118:	4013      	ands	r3, r2
 800211a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685a      	ldr	r2, [r3, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800212a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002136:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	699b      	ldr	r3, [r3, #24]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6a1b      	ldr	r3, [r3, #32]
 8002148:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800214a:	697a      	ldr	r2, [r7, #20]
 800214c:	4313      	orrs	r3, r2
 800214e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002154:	2b04      	cmp	r3, #4
 8002156:	d107      	bne.n	8002168 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002160:	4313      	orrs	r3, r2
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	f023 0307 	bic.w	r3, r3, #7
 800217e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	4313      	orrs	r3, r2
 8002188:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800218e:	2b04      	cmp	r3, #4
 8002190:	d117      	bne.n	80021c2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	4313      	orrs	r3, r2
 800219a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00e      	beq.n	80021c2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021a4:	6878      	ldr	r0, [r7, #4]
 80021a6:	f000 fa7b 	bl	80026a0 <DMA_CheckFifoParam>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2240      	movs	r2, #64	; 0x40
 80021b4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2201      	movs	r2, #1
 80021ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021be:	2301      	movs	r3, #1
 80021c0:	e016      	b.n	80021f0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	697a      	ldr	r2, [r7, #20]
 80021c8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f000 fa32 	bl	8002634 <DMA_CalcBaseAndBitshift>
 80021d0:	4603      	mov	r3, r0
 80021d2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d8:	223f      	movs	r2, #63	; 0x3f
 80021da:	409a      	lsls	r2, r3
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2201      	movs	r2, #1
 80021ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3718      	adds	r7, #24
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	f010803f 	.word	0xf010803f

080021fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002208:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800220a:	f7ff fad1 	bl	80017b0 <HAL_GetTick>
 800220e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002216:	b2db      	uxtb	r3, r3
 8002218:	2b02      	cmp	r3, #2
 800221a:	d008      	beq.n	800222e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2280      	movs	r2, #128	; 0x80
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2200      	movs	r2, #0
 8002226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e052      	b.n	80022d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 0216 	bic.w	r2, r2, #22
 800223c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	695a      	ldr	r2, [r3, #20]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800224c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002252:	2b00      	cmp	r3, #0
 8002254:	d103      	bne.n	800225e <HAL_DMA_Abort+0x62>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800225a:	2b00      	cmp	r3, #0
 800225c:	d007      	beq.n	800226e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 0208 	bic.w	r2, r2, #8
 800226c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0201 	bic.w	r2, r2, #1
 800227c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800227e:	e013      	b.n	80022a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002280:	f7ff fa96 	bl	80017b0 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b05      	cmp	r3, #5
 800228c:	d90c      	bls.n	80022a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2220      	movs	r2, #32
 8002292:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2203      	movs	r2, #3
 8002298:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e015      	b.n	80022d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1e4      	bne.n	8002280 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ba:	223f      	movs	r2, #63	; 0x3f
 80022bc:	409a      	lsls	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	2201      	movs	r2, #1
 80022c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3710      	adds	r7, #16
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	2b02      	cmp	r3, #2
 80022ee:	d004      	beq.n	80022fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2280      	movs	r2, #128	; 0x80
 80022f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00c      	b.n	8002314 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2205      	movs	r2, #5
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	681a      	ldr	r2, [r3, #0]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f022 0201 	bic.w	r2, r2, #1
 8002310:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	370c      	adds	r7, #12
 8002318:	46bd      	mov	sp, r7
 800231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231e:	4770      	bx	lr

08002320 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800232c:	4b92      	ldr	r3, [pc, #584]	; (8002578 <HAL_DMA_IRQHandler+0x258>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a92      	ldr	r2, [pc, #584]	; (800257c <HAL_DMA_IRQHandler+0x25c>)
 8002332:	fba2 2303 	umull	r2, r3, r2, r3
 8002336:	0a9b      	lsrs	r3, r3, #10
 8002338:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234a:	2208      	movs	r2, #8
 800234c:	409a      	lsls	r2, r3
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4013      	ands	r3, r2
 8002352:	2b00      	cmp	r3, #0
 8002354:	d01a      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	2b00      	cmp	r3, #0
 8002362:	d013      	beq.n	800238c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0204 	bic.w	r2, r2, #4
 8002372:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002378:	2208      	movs	r2, #8
 800237a:	409a      	lsls	r2, r3
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	f043 0201 	orr.w	r2, r3, #1
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002390:	2201      	movs	r2, #1
 8002392:	409a      	lsls	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	4013      	ands	r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d012      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d00b      	beq.n	80023c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ae:	2201      	movs	r2, #1
 80023b0:	409a      	lsls	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023ba:	f043 0202 	orr.w	r2, r3, #2
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023c6:	2204      	movs	r2, #4
 80023c8:	409a      	lsls	r2, r3
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	4013      	ands	r3, r2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d012      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0302 	and.w	r3, r3, #2
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d00b      	beq.n	80023f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e4:	2204      	movs	r2, #4
 80023e6:	409a      	lsls	r2, r3
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023f0:	f043 0204 	orr.w	r2, r3, #4
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fc:	2210      	movs	r2, #16
 80023fe:	409a      	lsls	r2, r3
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	4013      	ands	r3, r2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d043      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b00      	cmp	r3, #0
 8002414:	d03c      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241a:	2210      	movs	r2, #16
 800241c:	409a      	lsls	r2, r3
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d018      	beq.n	8002462 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d108      	bne.n	8002450 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	2b00      	cmp	r3, #0
 8002444:	d024      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	4798      	blx	r3
 800244e:	e01f      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	4798      	blx	r3
 8002460:	e016      	b.n	8002490 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800246c:	2b00      	cmp	r3, #0
 800246e:	d107      	bne.n	8002480 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0208 	bic.w	r2, r2, #8
 800247e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002484:	2b00      	cmp	r3, #0
 8002486:	d003      	beq.n	8002490 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002494:	2220      	movs	r2, #32
 8002496:	409a      	lsls	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 808e 	beq.w	80025be <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0310 	and.w	r3, r3, #16
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 8086 	beq.w	80025be <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b6:	2220      	movs	r2, #32
 80024b8:	409a      	lsls	r2, r3
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b05      	cmp	r3, #5
 80024c8:	d136      	bne.n	8002538 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 0216 	bic.w	r2, r2, #22
 80024d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	695a      	ldr	r2, [r3, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d103      	bne.n	80024fa <HAL_DMA_IRQHandler+0x1da>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d007      	beq.n	800250a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f022 0208 	bic.w	r2, r2, #8
 8002508:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	223f      	movs	r2, #63	; 0x3f
 8002510:	409a      	lsls	r2, r3
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800252a:	2b00      	cmp	r3, #0
 800252c:	d07d      	beq.n	800262a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
        }
        return;
 8002536:	e078      	b.n	800262a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002542:	2b00      	cmp	r3, #0
 8002544:	d01c      	beq.n	8002580 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d108      	bne.n	8002566 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002558:	2b00      	cmp	r3, #0
 800255a:	d030      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	4798      	blx	r3
 8002564:	e02b      	b.n	80025be <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800256a:	2b00      	cmp	r3, #0
 800256c:	d027      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	4798      	blx	r3
 8002576:	e022      	b.n	80025be <HAL_DMA_IRQHandler+0x29e>
 8002578:	20000000 	.word	0x20000000
 800257c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10f      	bne.n	80025ae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f022 0210 	bic.w	r2, r2, #16
 800259c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d032      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f003 0301 	and.w	r3, r3, #1
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d022      	beq.n	8002618 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2205      	movs	r2, #5
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f022 0201 	bic.w	r2, r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	3301      	adds	r3, #1
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d307      	bcc.n	8002606 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f003 0301 	and.w	r3, r3, #1
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1f2      	bne.n	80025ea <HAL_DMA_IRQHandler+0x2ca>
 8002604:	e000      	b.n	8002608 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002606:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	2b00      	cmp	r3, #0
 800261e:	d005      	beq.n	800262c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	4798      	blx	r3
 8002628:	e000      	b.n	800262c <HAL_DMA_IRQHandler+0x30c>
        return;
 800262a:	bf00      	nop
    }
  }
}
 800262c:	3718      	adds	r7, #24
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop

08002634 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b10      	subs	r3, #16
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <DMA_CalcBaseAndBitshift+0x64>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <DMA_CalcBaseAndBitshift+0x68>)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d909      	bls.n	8002676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	1d1a      	adds	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	; 0x58
 8002674:	e007      	b.n	8002686 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	aaaaaaab 	.word	0xaaaaaaab
 800269c:	08005f40 	.word	0x08005f40

080026a0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11f      	bne.n	80026fa <DMA_CheckFifoParam+0x5a>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d856      	bhi.n	800276e <DMA_CheckFifoParam+0xce>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <DMA_CheckFifoParam+0x28>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026eb 	.word	0x080026eb
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	0800276f 	.word	0x0800276f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d046      	beq.n	8002772 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e043      	b.n	8002772 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f2:	d140      	bne.n	8002776 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e03d      	b.n	8002776 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	d121      	bne.n	8002748 <DMA_CheckFifoParam+0xa8>
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d837      	bhi.n	800277a <DMA_CheckFifoParam+0xda>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <DMA_CheckFifoParam+0x70>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002721 	.word	0x08002721
 8002714:	08002727 	.word	0x08002727
 8002718:	08002721 	.word	0x08002721
 800271c:	08002739 	.word	0x08002739
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e030      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d025      	beq.n	800277e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002736:	e022      	b.n	800277e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002740:	d11f      	bne.n	8002782 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002746:	e01c      	b.n	8002782 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d903      	bls.n	8002756 <DMA_CheckFifoParam+0xb6>
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d003      	beq.n	800275c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002754:	e018      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	73fb      	strb	r3, [r7, #15]
      break;
 800275a:	e015      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002760:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002764:	2b00      	cmp	r3, #0
 8002766:	d00e      	beq.n	8002786 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	73fb      	strb	r3, [r7, #15]
      break;
 800276c:	e00b      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 800276e:	bf00      	nop
 8002770:	e00a      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002772:	bf00      	nop
 8002774:	e008      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002776:	bf00      	nop
 8002778:	e006      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 800277a:	bf00      	nop
 800277c:	e004      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 800277e:	bf00      	nop
 8002780:	e002      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;   
 8002782:	bf00      	nop
 8002784:	e000      	b.n	8002788 <DMA_CheckFifoParam+0xe8>
      break;
 8002786:	bf00      	nop
    }
  } 
  
  return status; 
 8002788:	7bfb      	ldrb	r3, [r7, #15]
}
 800278a:	4618      	mov	r0, r3
 800278c:	3714      	adds	r7, #20
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop

08002798 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	; 0x24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	61fb      	str	r3, [r7, #28]
 80027b2:	e177      	b.n	8002aa4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b4:	2201      	movs	r2, #1
 80027b6:	69fb      	ldr	r3, [r7, #28]
 80027b8:	fa02 f303 	lsl.w	r3, r2, r3
 80027bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	697a      	ldr	r2, [r7, #20]
 80027c4:	4013      	ands	r3, r2
 80027c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c8:	693a      	ldr	r2, [r7, #16]
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	f040 8166 	bne.w	8002a9e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027d2:	683b      	ldr	r3, [r7, #0]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	f003 0303 	and.w	r3, r3, #3
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d005      	beq.n	80027ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d130      	bne.n	800284c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	689b      	ldr	r3, [r3, #8]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	2203      	movs	r2, #3
 80027f6:	fa02 f303 	lsl.w	r3, r2, r3
 80027fa:	43db      	mvns	r3, r3
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	4013      	ands	r3, r2
 8002800:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	68da      	ldr	r2, [r3, #12]
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	005b      	lsls	r3, r3, #1
 800280a:	fa02 f303 	lsl.w	r3, r2, r3
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002820:	2201      	movs	r2, #1
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	fa02 f303 	lsl.w	r3, r2, r3
 8002828:	43db      	mvns	r3, r3
 800282a:	69ba      	ldr	r2, [r7, #24]
 800282c:	4013      	ands	r3, r2
 800282e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	091b      	lsrs	r3, r3, #4
 8002836:	f003 0201 	and.w	r2, r3, #1
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69ba      	ldr	r2, [r7, #24]
 800284a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	2b03      	cmp	r3, #3
 8002856:	d017      	beq.n	8002888 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	2203      	movs	r2, #3
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	43db      	mvns	r3, r3
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4013      	ands	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	689a      	ldr	r2, [r3, #8]
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	fa02 f303 	lsl.w	r3, r2, r3
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	4313      	orrs	r3, r2
 8002880:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69ba      	ldr	r2, [r7, #24]
 8002886:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f003 0303 	and.w	r3, r3, #3
 8002890:	2b02      	cmp	r3, #2
 8002892:	d123      	bne.n	80028dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	08da      	lsrs	r2, r3, #3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3208      	adds	r2, #8
 800289c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80028a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80028a2:	69fb      	ldr	r3, [r7, #28]
 80028a4:	f003 0307 	and.w	r3, r3, #7
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	220f      	movs	r2, #15
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	691a      	ldr	r2, [r3, #16]
 80028bc:	69fb      	ldr	r3, [r7, #28]
 80028be:	f003 0307 	and.w	r3, r3, #7
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	fa02 f303 	lsl.w	r3, r2, r3
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	08da      	lsrs	r2, r3, #3
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	3208      	adds	r2, #8
 80028d6:	69b9      	ldr	r1, [r7, #24]
 80028d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	2203      	movs	r2, #3
 80028e8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f003 0203 	and.w	r2, r3, #3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	69ba      	ldr	r2, [r7, #24]
 8002906:	4313      	orrs	r3, r2
 8002908:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	69ba      	ldr	r2, [r7, #24]
 800290e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80c0 	beq.w	8002a9e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b66      	ldr	r3, [pc, #408]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002926:	4a65      	ldr	r2, [pc, #404]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800292c:	6453      	str	r3, [r2, #68]	; 0x44
 800292e:	4b63      	ldr	r3, [pc, #396]	; (8002abc <HAL_GPIO_Init+0x324>)
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800293a:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <HAL_GPIO_Init+0x328>)
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	089b      	lsrs	r3, r3, #2
 8002940:	3302      	adds	r3, #2
 8002942:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	220f      	movs	r2, #15
 8002952:	fa02 f303 	lsl.w	r3, r2, r3
 8002956:	43db      	mvns	r3, r3
 8002958:	69ba      	ldr	r2, [r7, #24]
 800295a:	4013      	ands	r3, r2
 800295c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	4a58      	ldr	r2, [pc, #352]	; (8002ac4 <HAL_GPIO_Init+0x32c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d037      	beq.n	80029d6 <HAL_GPIO_Init+0x23e>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4a57      	ldr	r2, [pc, #348]	; (8002ac8 <HAL_GPIO_Init+0x330>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d031      	beq.n	80029d2 <HAL_GPIO_Init+0x23a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a56      	ldr	r2, [pc, #344]	; (8002acc <HAL_GPIO_Init+0x334>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d02b      	beq.n	80029ce <HAL_GPIO_Init+0x236>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a55      	ldr	r2, [pc, #340]	; (8002ad0 <HAL_GPIO_Init+0x338>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d025      	beq.n	80029ca <HAL_GPIO_Init+0x232>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a54      	ldr	r2, [pc, #336]	; (8002ad4 <HAL_GPIO_Init+0x33c>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d01f      	beq.n	80029c6 <HAL_GPIO_Init+0x22e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a53      	ldr	r2, [pc, #332]	; (8002ad8 <HAL_GPIO_Init+0x340>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d019      	beq.n	80029c2 <HAL_GPIO_Init+0x22a>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a52      	ldr	r2, [pc, #328]	; (8002adc <HAL_GPIO_Init+0x344>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_GPIO_Init+0x226>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a51      	ldr	r2, [pc, #324]	; (8002ae0 <HAL_GPIO_Init+0x348>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d00d      	beq.n	80029ba <HAL_GPIO_Init+0x222>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a50      	ldr	r2, [pc, #320]	; (8002ae4 <HAL_GPIO_Init+0x34c>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d007      	beq.n	80029b6 <HAL_GPIO_Init+0x21e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a4f      	ldr	r2, [pc, #316]	; (8002ae8 <HAL_GPIO_Init+0x350>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d101      	bne.n	80029b2 <HAL_GPIO_Init+0x21a>
 80029ae:	2309      	movs	r3, #9
 80029b0:	e012      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b2:	230a      	movs	r3, #10
 80029b4:	e010      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029b6:	2308      	movs	r3, #8
 80029b8:	e00e      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ba:	2307      	movs	r3, #7
 80029bc:	e00c      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029be:	2306      	movs	r3, #6
 80029c0:	e00a      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c2:	2305      	movs	r3, #5
 80029c4:	e008      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029c6:	2304      	movs	r3, #4
 80029c8:	e006      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ca:	2303      	movs	r3, #3
 80029cc:	e004      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e002      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <HAL_GPIO_Init+0x240>
 80029d6:	2300      	movs	r3, #0
 80029d8:	69fa      	ldr	r2, [r7, #28]
 80029da:	f002 0203 	and.w	r2, r2, #3
 80029de:	0092      	lsls	r2, r2, #2
 80029e0:	4093      	lsls	r3, r2
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029e8:	4935      	ldr	r1, [pc, #212]	; (8002ac0 <HAL_GPIO_Init+0x328>)
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	089b      	lsrs	r3, r3, #2
 80029ee:	3302      	adds	r3, #2
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f6:	4b3d      	ldr	r3, [pc, #244]	; (8002aec <HAL_GPIO_Init+0x354>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a1a:	4a34      	ldr	r2, [pc, #208]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a1c:	69bb      	ldr	r3, [r7, #24]
 8002a1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a20:	4b32      	ldr	r3, [pc, #200]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	43db      	mvns	r3, r3
 8002a2a:	69ba      	ldr	r2, [r7, #24]
 8002a2c:	4013      	ands	r3, r2
 8002a2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d003      	beq.n	8002a44 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a44:	4a29      	ldr	r2, [pc, #164]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a46:	69bb      	ldr	r3, [r7, #24]
 8002a48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a4a:	4b28      	ldr	r3, [pc, #160]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	43db      	mvns	r3, r3
 8002a54:	69ba      	ldr	r2, [r7, #24]
 8002a56:	4013      	ands	r3, r2
 8002a58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d003      	beq.n	8002a6e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002a66:	69ba      	ldr	r2, [r7, #24]
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a6e:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a74:	4b1d      	ldr	r3, [pc, #116]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	43db      	mvns	r3, r3
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	4013      	ands	r3, r2
 8002a82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002a90:	69ba      	ldr	r2, [r7, #24]
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4313      	orrs	r3, r2
 8002a96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a98:	4a14      	ldr	r2, [pc, #80]	; (8002aec <HAL_GPIO_Init+0x354>)
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	61fb      	str	r3, [r7, #28]
 8002aa4:	69fb      	ldr	r3, [r7, #28]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	f67f ae84 	bls.w	80027b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002aac:	bf00      	nop
 8002aae:	bf00      	nop
 8002ab0:	3724      	adds	r7, #36	; 0x24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab8:	4770      	bx	lr
 8002aba:	bf00      	nop
 8002abc:	40023800 	.word	0x40023800
 8002ac0:	40013800 	.word	0x40013800
 8002ac4:	40020000 	.word	0x40020000
 8002ac8:	40020400 	.word	0x40020400
 8002acc:	40020800 	.word	0x40020800
 8002ad0:	40020c00 	.word	0x40020c00
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40021400 	.word	0x40021400
 8002adc:	40021800 	.word	0x40021800
 8002ae0:	40021c00 	.word	0x40021c00
 8002ae4:	40022000 	.word	0x40022000
 8002ae8:	40022400 	.word	0x40022400
 8002aec:	40013c00 	.word	0x40013c00

08002af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	460b      	mov	r3, r1
 8002afa:	807b      	strh	r3, [r7, #2]
 8002afc:	4613      	mov	r3, r2
 8002afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002b00:	787b      	ldrb	r3, [r7, #1]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b06:	887a      	ldrh	r2, [r7, #2]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002b0c:	e003      	b.n	8002b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	041a      	lsls	r2, r3, #16
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	619a      	str	r2, [r3, #24]
}
 8002b16:	bf00      	nop
 8002b18:	370c      	adds	r7, #12
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b20:	4770      	bx	lr
	...

08002b24 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b2e:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b30:	695a      	ldr	r2, [r3, #20]
 8002b32:	88fb      	ldrh	r3, [r7, #6]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b3a:	4a05      	ldr	r2, [pc, #20]	; (8002b50 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	88fb      	ldrh	r3, [r7, #6]
 8002b3e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b40:	88fb      	ldrh	r3, [r7, #6]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f000 f806 	bl	8002b54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b48:	bf00      	nop
 8002b4a:	3708      	adds	r7, #8
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40013c00 	.word	0x40013c00

08002b54 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr
	...

08002b6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d101      	bne.n	8002b7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e12b      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d106      	bne.n	8002b98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7fd ff3e 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2224      	movs	r2, #36	; 0x24
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f022 0201 	bic.w	r2, r2, #1
 8002bae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bbe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002bce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002bd0:	f000 fe28 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	4a81      	ldr	r2, [pc, #516]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d807      	bhi.n	8002bf0 <HAL_I2C_Init+0x84>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	4a80      	ldr	r2, [pc, #512]	; (8002de4 <HAL_I2C_Init+0x278>)
 8002be4:	4293      	cmp	r3, r2
 8002be6:	bf94      	ite	ls
 8002be8:	2301      	movls	r3, #1
 8002bea:	2300      	movhi	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e006      	b.n	8002bfe <HAL_I2C_Init+0x92>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	4a7d      	ldr	r2, [pc, #500]	; (8002de8 <HAL_I2C_Init+0x27c>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	bf94      	ite	ls
 8002bf8:	2301      	movls	r3, #1
 8002bfa:	2300      	movhi	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d001      	beq.n	8002c06 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e0e7      	b.n	8002dd6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	4a78      	ldr	r2, [pc, #480]	; (8002dec <HAL_I2C_Init+0x280>)
 8002c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0e:	0c9b      	lsrs	r3, r3, #18
 8002c10:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68ba      	ldr	r2, [r7, #8]
 8002c22:	430a      	orrs	r2, r1
 8002c24:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	4a6a      	ldr	r2, [pc, #424]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d802      	bhi.n	8002c40 <HAL_I2C_Init+0xd4>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	3301      	adds	r3, #1
 8002c3e:	e009      	b.n	8002c54 <HAL_I2C_Init+0xe8>
 8002c40:	68bb      	ldr	r3, [r7, #8]
 8002c42:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	4a69      	ldr	r2, [pc, #420]	; (8002df0 <HAL_I2C_Init+0x284>)
 8002c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c50:	099b      	lsrs	r3, r3, #6
 8002c52:	3301      	adds	r3, #1
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6812      	ldr	r2, [r2, #0]
 8002c58:	430b      	orrs	r3, r1
 8002c5a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002c66:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	495c      	ldr	r1, [pc, #368]	; (8002de0 <HAL_I2C_Init+0x274>)
 8002c70:	428b      	cmp	r3, r1
 8002c72:	d819      	bhi.n	8002ca8 <HAL_I2C_Init+0x13c>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1e59      	subs	r1, r3, #1
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	005b      	lsls	r3, r3, #1
 8002c7e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c82:	1c59      	adds	r1, r3, #1
 8002c84:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002c88:	400b      	ands	r3, r1
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00a      	beq.n	8002ca4 <HAL_I2C_Init+0x138>
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	1e59      	subs	r1, r3, #1
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ca2:	e051      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca4:	2304      	movs	r3, #4
 8002ca6:	e04f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	689b      	ldr	r3, [r3, #8]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d111      	bne.n	8002cd4 <HAL_I2C_Init+0x168>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	1e58      	subs	r0, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6859      	ldr	r1, [r3, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	440b      	add	r3, r1
 8002cbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	bf0c      	ite	eq
 8002ccc:	2301      	moveq	r3, #1
 8002cce:	2300      	movne	r3, #0
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	e012      	b.n	8002cfa <HAL_I2C_Init+0x18e>
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	1e58      	subs	r0, r3, #1
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6859      	ldr	r1, [r3, #4]
 8002cdc:	460b      	mov	r3, r1
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	440b      	add	r3, r1
 8002ce2:	0099      	lsls	r1, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cea:	3301      	adds	r3, #1
 8002cec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d001      	beq.n	8002d02 <HAL_I2C_Init+0x196>
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e022      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d10e      	bne.n	8002d28 <HAL_I2C_Init+0x1bc>
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	1e58      	subs	r0, r3, #1
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6859      	ldr	r1, [r3, #4]
 8002d12:	460b      	mov	r3, r1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	440b      	add	r3, r1
 8002d18:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d1c:	3301      	adds	r3, #1
 8002d1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d22:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d26:	e00f      	b.n	8002d48 <HAL_I2C_Init+0x1dc>
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	1e58      	subs	r0, r3, #1
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6859      	ldr	r1, [r3, #4]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	0099      	lsls	r1, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d3e:	3301      	adds	r3, #1
 8002d40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002d48:	6879      	ldr	r1, [r7, #4]
 8002d4a:	6809      	ldr	r1, [r1, #0]
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	69da      	ldr	r2, [r3, #28]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a1b      	ldr	r3, [r3, #32]
 8002d62:	431a      	orrs	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	430a      	orrs	r2, r1
 8002d6a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002d76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002d7a:	687a      	ldr	r2, [r7, #4]
 8002d7c:	6911      	ldr	r1, [r2, #16]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	68d2      	ldr	r2, [r2, #12]
 8002d82:	4311      	orrs	r1, r2
 8002d84:	687a      	ldr	r2, [r7, #4]
 8002d86:	6812      	ldr	r2, [r2, #0]
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	695a      	ldr	r2, [r3, #20]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	699b      	ldr	r3, [r3, #24]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f042 0201 	orr.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2220      	movs	r2, #32
 8002dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002dd4:	2300      	movs	r3, #0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3710      	adds	r7, #16
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	000186a0 	.word	0x000186a0
 8002de4:	001e847f 	.word	0x001e847f
 8002de8:	003d08ff 	.word	0x003d08ff
 8002dec:	431bde83 	.word	0x431bde83
 8002df0:	10624dd3 	.word	0x10624dd3

08002df4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b083      	sub	sp, #12
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b20      	cmp	r3, #32
 8002e08:	d129      	bne.n	8002e5e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2224      	movs	r2, #36	; 0x24
 8002e0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f022 0210 	bic.w	r2, r2, #16
 8002e30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	683a      	ldr	r2, [r7, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681a      	ldr	r2, [r3, #0]
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f042 0201 	orr.w	r2, r2, #1
 8002e50:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2220      	movs	r2, #32
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	e000      	b.n	8002e60 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002e5e:	2302      	movs	r3, #2
  }
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002e76:	2300      	movs	r3, #0
 8002e78:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b20      	cmp	r3, #32
 8002e84:	d12a      	bne.n	8002edc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2224      	movs	r2, #36	; 0x24
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0201 	bic.w	r2, r2, #1
 8002e9c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002ea6:	89fb      	ldrh	r3, [r7, #14]
 8002ea8:	f023 030f 	bic.w	r3, r3, #15
 8002eac:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	b29a      	uxth	r2, r3
 8002eb2:	89fb      	ldrh	r3, [r7, #14]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	89fa      	ldrh	r2, [r7, #14]
 8002ebe:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f042 0201 	orr.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2220      	movs	r2, #32
 8002ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	e000      	b.n	8002ede <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002edc:	2302      	movs	r3, #2
  }
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
	...

08002eec <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	603b      	str	r3, [r7, #0]
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	4a1f      	ldr	r2, [pc, #124]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002f00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f04:	6413      	str	r3, [r2, #64]	; 0x40
 8002f06:	4b1d      	ldr	r3, [pc, #116]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x90>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f0e:	603b      	str	r3, [r7, #0]
 8002f10:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f12:	4b1b      	ldr	r3, [pc, #108]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x94>)
 8002f14:	2201      	movs	r2, #1
 8002f16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f18:	f7fe fc4a 	bl	80017b0 <HAL_GetTick>
 8002f1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f1e:	e009      	b.n	8002f34 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f20:	f7fe fc46 	bl	80017b0 <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	1ad3      	subs	r3, r2, r3
 8002f2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f2e:	d901      	bls.n	8002f34 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e01f      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f34:	4b13      	ldr	r3, [pc, #76]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f40:	d1ee      	bne.n	8002f20 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f42:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f44:	2201      	movs	r2, #1
 8002f46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f48:	f7fe fc32 	bl	80017b0 <HAL_GetTick>
 8002f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f4e:	e009      	b.n	8002f64 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f50:	f7fe fc2e 	bl	80017b0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5e:	d901      	bls.n	8002f64 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e007      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f70:	d1ee      	bne.n	8002f50 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	420e0040 	.word	0x420e0040
 8002f84:	40007000 	.word	0x40007000
 8002f88:	420e0044 	.word	0x420e0044

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e264      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002faa:	4ba3      	ldr	r3, [pc, #652]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b04      	cmp	r3, #4
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb6:	4ba0      	ldr	r3, [pc, #640]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d112      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fc2:	4b9d      	ldr	r3, [pc, #628]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b99      	ldr	r3, [pc, #612]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e23f      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b91      	ldr	r3, [pc, #580]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a90      	ldr	r2, [pc, #576]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b8b      	ldr	r3, [pc, #556]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a8a      	ldr	r2, [pc, #552]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b88      	ldr	r3, [pc, #544]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a87      	ldr	r2, [pc, #540]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b84      	ldr	r3, [pc, #528]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a83      	ldr	r2, [pc, #524]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b81      	ldr	r3, [pc, #516]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a80      	ldr	r2, [pc, #512]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fbb4 	bl	80017b0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fbb0 	bl	80017b0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e204      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305e:	4b76      	ldr	r3, [pc, #472]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800306c:	f7fe fba0 	bl	80017b0 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fb9c 	bl	80017b0 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e1f0      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003086:	4b6c      	ldr	r3, [pc, #432]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d063      	beq.n	800316a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030a2:	4b65      	ldr	r3, [pc, #404]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00b      	beq.n	80030c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ae:	4b62      	ldr	r3, [pc, #392]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b6:	2b08      	cmp	r3, #8
 80030b8:	d11c      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ba:	4b5f      	ldr	r3, [pc, #380]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d116      	bne.n	80030f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c6:	4b5c      	ldr	r3, [pc, #368]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f003 0302 	and.w	r3, r3, #2
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d005      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d001      	beq.n	80030de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e1c4      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030de:	4b56      	ldr	r3, [pc, #344]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	00db      	lsls	r3, r3, #3
 80030ec:	4952      	ldr	r1, [pc, #328]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030f2:	e03a      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d020      	beq.n	800313e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030fc:	4b4f      	ldr	r3, [pc, #316]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 80030fe:	2201      	movs	r2, #1
 8003100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003102:	f7fe fb55 	bl	80017b0 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003108:	e008      	b.n	800311c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800310a:	f7fe fb51 	bl	80017b0 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b02      	cmp	r3, #2
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e1a5      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800311c:	4b46      	ldr	r3, [pc, #280]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0f0      	beq.n	800310a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003128:	4b43      	ldr	r3, [pc, #268]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	691b      	ldr	r3, [r3, #16]
 8003134:	00db      	lsls	r3, r3, #3
 8003136:	4940      	ldr	r1, [pc, #256]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003138:	4313      	orrs	r3, r2
 800313a:	600b      	str	r3, [r1, #0]
 800313c:	e015      	b.n	800316a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313e:	4b3f      	ldr	r3, [pc, #252]	; (800323c <HAL_RCC_OscConfig+0x2b0>)
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fe fb34 	bl	80017b0 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800314c:	f7fe fb30 	bl	80017b0 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b02      	cmp	r3, #2
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e184      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315e:	4b36      	ldr	r3, [pc, #216]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 0308 	and.w	r3, r3, #8
 8003172:	2b00      	cmp	r3, #0
 8003174:	d030      	beq.n	80031d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d016      	beq.n	80031ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317e:	4b30      	ldr	r3, [pc, #192]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 8003180:	2201      	movs	r2, #1
 8003182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe fb14 	bl	80017b0 <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800318c:	f7fe fb10 	bl	80017b0 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e164      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319e:	4b26      	ldr	r3, [pc, #152]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
 80031aa:	e015      	b.n	80031d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031ac:	4b24      	ldr	r3, [pc, #144]	; (8003240 <HAL_RCC_OscConfig+0x2b4>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031b2:	f7fe fafd 	bl	80017b0 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe faf9 	bl	80017b0 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e14d      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031cc:	4b1a      	ldr	r3, [pc, #104]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d0:	f003 0302 	and.w	r3, r3, #2
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1f0      	bne.n	80031ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	f000 80a0 	beq.w	8003326 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e6:	2300      	movs	r3, #0
 80031e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10f      	bne.n	8003216 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f6:	2300      	movs	r3, #0
 80031f8:	60bb      	str	r3, [r7, #8]
 80031fa:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fe:	4a0e      	ldr	r2, [pc, #56]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003204:	6413      	str	r3, [r2, #64]	; 0x40
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <HAL_RCC_OscConfig+0x2ac>)
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320e:	60bb      	str	r3, [r7, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003212:	2301      	movs	r3, #1
 8003214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003216:	4b0b      	ldr	r3, [pc, #44]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321e:	2b00      	cmp	r3, #0
 8003220:	d121      	bne.n	8003266 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003222:	4b08      	ldr	r3, [pc, #32]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a07      	ldr	r2, [pc, #28]	; (8003244 <HAL_RCC_OscConfig+0x2b8>)
 8003228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800322c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322e:	f7fe fabf 	bl	80017b0 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003234:	e011      	b.n	800325a <HAL_RCC_OscConfig+0x2ce>
 8003236:	bf00      	nop
 8003238:	40023800 	.word	0x40023800
 800323c:	42470000 	.word	0x42470000
 8003240:	42470e80 	.word	0x42470e80
 8003244:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003248:	f7fe fab2 	bl	80017b0 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e106      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800325a:	4b85      	ldr	r3, [pc, #532]	; (8003470 <HAL_RCC_OscConfig+0x4e4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003262:	2b00      	cmp	r3, #0
 8003264:	d0f0      	beq.n	8003248 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d106      	bne.n	800327c <HAL_RCC_OscConfig+0x2f0>
 800326e:	4b81      	ldr	r3, [pc, #516]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003272:	4a80      	ldr	r2, [pc, #512]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003274:	f043 0301 	orr.w	r3, r3, #1
 8003278:	6713      	str	r3, [r2, #112]	; 0x70
 800327a:	e01c      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	2b05      	cmp	r3, #5
 8003282:	d10c      	bne.n	800329e <HAL_RCC_OscConfig+0x312>
 8003284:	4b7b      	ldr	r3, [pc, #492]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003286:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003288:	4a7a      	ldr	r2, [pc, #488]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800328a:	f043 0304 	orr.w	r3, r3, #4
 800328e:	6713      	str	r3, [r2, #112]	; 0x70
 8003290:	4b78      	ldr	r3, [pc, #480]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a77      	ldr	r2, [pc, #476]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e00b      	b.n	80032b6 <HAL_RCC_OscConfig+0x32a>
 800329e:	4b75      	ldr	r3, [pc, #468]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	4a74      	ldr	r2, [pc, #464]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032a4:	f023 0301 	bic.w	r3, r3, #1
 80032a8:	6713      	str	r3, [r2, #112]	; 0x70
 80032aa:	4b72      	ldr	r3, [pc, #456]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	4a71      	ldr	r2, [pc, #452]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d015      	beq.n	80032ea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032be:	f7fe fa77 	bl	80017b0 <HAL_GetTick>
 80032c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c4:	e00a      	b.n	80032dc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c6:	f7fe fa73 	bl	80017b0 <HAL_GetTick>
 80032ca:	4602      	mov	r2, r0
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	1ad3      	subs	r3, r2, r3
 80032d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d901      	bls.n	80032dc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e0c5      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032dc:	4b65      	ldr	r3, [pc, #404]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80032de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e0:	f003 0302 	and.w	r3, r3, #2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d0ee      	beq.n	80032c6 <HAL_RCC_OscConfig+0x33a>
 80032e8:	e014      	b.n	8003314 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032ea:	f7fe fa61 	bl	80017b0 <HAL_GetTick>
 80032ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032f0:	e00a      	b.n	8003308 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f2:	f7fe fa5d 	bl	80017b0 <HAL_GetTick>
 80032f6:	4602      	mov	r2, r0
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	1ad3      	subs	r3, r2, r3
 80032fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003300:	4293      	cmp	r3, r2
 8003302:	d901      	bls.n	8003308 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003304:	2303      	movs	r3, #3
 8003306:	e0af      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003308:	4b5a      	ldr	r3, [pc, #360]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1ee      	bne.n	80032f2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003314:	7dfb      	ldrb	r3, [r7, #23]
 8003316:	2b01      	cmp	r3, #1
 8003318:	d105      	bne.n	8003326 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800331a:	4b56      	ldr	r3, [pc, #344]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 800331c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331e:	4a55      	ldr	r2, [pc, #340]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003324:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	699b      	ldr	r3, [r3, #24]
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 809b 	beq.w	8003466 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003330:	4b50      	ldr	r3, [pc, #320]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b08      	cmp	r3, #8
 800333a:	d05c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	699b      	ldr	r3, [r3, #24]
 8003340:	2b02      	cmp	r3, #2
 8003342:	d141      	bne.n	80033c8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003344:	4b4c      	ldr	r3, [pc, #304]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 8003346:	2200      	movs	r2, #0
 8003348:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800334a:	f7fe fa31 	bl	80017b0 <HAL_GetTick>
 800334e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003350:	e008      	b.n	8003364 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003352:	f7fe fa2d 	bl	80017b0 <HAL_GetTick>
 8003356:	4602      	mov	r2, r0
 8003358:	693b      	ldr	r3, [r7, #16]
 800335a:	1ad3      	subs	r3, r2, r3
 800335c:	2b02      	cmp	r3, #2
 800335e:	d901      	bls.n	8003364 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e081      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003364:	4b43      	ldr	r3, [pc, #268]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800336c:	2b00      	cmp	r3, #0
 800336e:	d1f0      	bne.n	8003352 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	431a      	orrs	r2, r3
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337e:	019b      	lsls	r3, r3, #6
 8003380:	431a      	orrs	r2, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003386:	085b      	lsrs	r3, r3, #1
 8003388:	3b01      	subs	r3, #1
 800338a:	041b      	lsls	r3, r3, #16
 800338c:	431a      	orrs	r2, r3
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	4937      	ldr	r1, [pc, #220]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003396:	4313      	orrs	r3, r2
 8003398:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800339a:	4b37      	ldr	r3, [pc, #220]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 800339c:	2201      	movs	r2, #1
 800339e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a0:	f7fe fa06 	bl	80017b0 <HAL_GetTick>
 80033a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	e008      	b.n	80033ba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a8:	f7fe fa02 	bl	80017b0 <HAL_GetTick>
 80033ac:	4602      	mov	r2, r0
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	1ad3      	subs	r3, r2, r3
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d901      	bls.n	80033ba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80033b6:	2303      	movs	r3, #3
 80033b8:	e056      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b2e      	ldr	r3, [pc, #184]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d0f0      	beq.n	80033a8 <HAL_RCC_OscConfig+0x41c>
 80033c6:	e04e      	b.n	8003466 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c8:	4b2b      	ldr	r3, [pc, #172]	; (8003478 <HAL_RCC_OscConfig+0x4ec>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ce:	f7fe f9ef 	bl	80017b0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d6:	f7fe f9eb 	bl	80017b0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e03f      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e8:	4b22      	ldr	r3, [pc, #136]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d1f0      	bne.n	80033d6 <HAL_RCC_OscConfig+0x44a>
 80033f4:	e037      	b.n	8003466 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80033fe:	2301      	movs	r3, #1
 8003400:	e032      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003402:	4b1c      	ldr	r3, [pc, #112]	; (8003474 <HAL_RCC_OscConfig+0x4e8>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d028      	beq.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800341a:	429a      	cmp	r2, r3
 800341c:	d121      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003428:	429a      	cmp	r2, r3
 800342a:	d11a      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342c:	68fa      	ldr	r2, [r7, #12]
 800342e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003432:	4013      	ands	r3, r2
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003438:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800343a:	4293      	cmp	r3, r2
 800343c:	d111      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003448:	085b      	lsrs	r3, r3, #1
 800344a:	3b01      	subs	r3, #1
 800344c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344e:	429a      	cmp	r2, r3
 8003450:	d107      	bne.n	8003462 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345e:	429a      	cmp	r2, r3
 8003460:	d001      	beq.n	8003466 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e000      	b.n	8003468 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
}
 8003468:	4618      	mov	r0, r3
 800346a:	3718      	adds	r7, #24
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}
 8003470:	40007000 	.word	0x40007000
 8003474:	40023800 	.word	0x40023800
 8003478:	42470060 	.word	0x42470060

0800347c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b084      	sub	sp, #16
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d101      	bne.n	8003490 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800348c:	2301      	movs	r3, #1
 800348e:	e0cc      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003490:	4b68      	ldr	r3, [pc, #416]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 030f 	and.w	r3, r3, #15
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	429a      	cmp	r2, r3
 800349c:	d90c      	bls.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349e:	4b65      	ldr	r3, [pc, #404]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	683a      	ldr	r2, [r7, #0]
 80034a2:	b2d2      	uxtb	r2, r2
 80034a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a6:	4b63      	ldr	r3, [pc, #396]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 030f 	and.w	r3, r3, #15
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d001      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0b8      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d005      	beq.n	80034dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034d0:	4b59      	ldr	r3, [pc, #356]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	4a58      	ldr	r2, [pc, #352]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80034da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0308 	and.w	r3, r3, #8
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d005      	beq.n	80034f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e8:	4b53      	ldr	r3, [pc, #332]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	4a52      	ldr	r2, [pc, #328]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80034f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034f4:	4b50      	ldr	r3, [pc, #320]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	494d      	ldr	r1, [pc, #308]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003502:	4313      	orrs	r3, r2
 8003504:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 0301 	and.w	r3, r3, #1
 800350e:	2b00      	cmp	r3, #0
 8003510:	d044      	beq.n	800359c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	2b01      	cmp	r3, #1
 8003518:	d107      	bne.n	800352a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800351a:	4b47      	ldr	r3, [pc, #284]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003522:	2b00      	cmp	r3, #0
 8003524:	d119      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e07f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	2b02      	cmp	r3, #2
 8003530:	d003      	beq.n	800353a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003536:	2b03      	cmp	r3, #3
 8003538:	d107      	bne.n	800354a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800353a:	4b3f      	ldr	r3, [pc, #252]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e06f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d101      	bne.n	800355a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	e067      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800355a:	4b37      	ldr	r3, [pc, #220]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f023 0203 	bic.w	r2, r3, #3
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	4934      	ldr	r1, [pc, #208]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 8003568:	4313      	orrs	r3, r2
 800356a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800356c:	f7fe f920 	bl	80017b0 <HAL_GetTick>
 8003570:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003572:	e00a      	b.n	800358a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003574:	f7fe f91c 	bl	80017b0 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003582:	4293      	cmp	r3, r2
 8003584:	d901      	bls.n	800358a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e04f      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f003 020c 	and.w	r2, r3, #12
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	429a      	cmp	r2, r3
 800359a:	d1eb      	bne.n	8003574 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800359c:	4b25      	ldr	r3, [pc, #148]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 030f 	and.w	r3, r3, #15
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d20c      	bcs.n	80035c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035aa:	4b22      	ldr	r3, [pc, #136]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	b2d2      	uxtb	r2, r2
 80035b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b2:	4b20      	ldr	r3, [pc, #128]	; (8003634 <HAL_RCC_ClockConfig+0x1b8>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	683a      	ldr	r2, [r7, #0]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d001      	beq.n	80035c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e032      	b.n	800362a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d008      	beq.n	80035e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035d0:	4b19      	ldr	r3, [pc, #100]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	4916      	ldr	r1, [pc, #88]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035de:	4313      	orrs	r3, r2
 80035e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0308 	and.w	r3, r3, #8
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035ee:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	00db      	lsls	r3, r3, #3
 80035fc:	490e      	ldr	r1, [pc, #56]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003602:	f000 f821 	bl	8003648 <HAL_RCC_GetSysClockFreq>
 8003606:	4602      	mov	r2, r0
 8003608:	4b0b      	ldr	r3, [pc, #44]	; (8003638 <HAL_RCC_ClockConfig+0x1bc>)
 800360a:	689b      	ldr	r3, [r3, #8]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	f003 030f 	and.w	r3, r3, #15
 8003612:	490a      	ldr	r1, [pc, #40]	; (800363c <HAL_RCC_ClockConfig+0x1c0>)
 8003614:	5ccb      	ldrb	r3, [r1, r3]
 8003616:	fa22 f303 	lsr.w	r3, r2, r3
 800361a:	4a09      	ldr	r2, [pc, #36]	; (8003640 <HAL_RCC_ClockConfig+0x1c4>)
 800361c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_RCC_ClockConfig+0x1c8>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe f880 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	4618      	mov	r0, r3
 800362c:	3710      	adds	r7, #16
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00
 8003638:	40023800 	.word	0x40023800
 800363c:	08005f28 	.word	0x08005f28
 8003640:	20000000 	.word	0x20000000
 8003644:	20000004 	.word	0x20000004

08003648 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003648:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800364c:	b084      	sub	sp, #16
 800364e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	607b      	str	r3, [r7, #4]
 8003654:	2300      	movs	r3, #0
 8003656:	60fb      	str	r3, [r7, #12]
 8003658:	2300      	movs	r3, #0
 800365a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800365c:	2300      	movs	r3, #0
 800365e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003660:	4b67      	ldr	r3, [pc, #412]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003662:	689b      	ldr	r3, [r3, #8]
 8003664:	f003 030c 	and.w	r3, r3, #12
 8003668:	2b08      	cmp	r3, #8
 800366a:	d00d      	beq.n	8003688 <HAL_RCC_GetSysClockFreq+0x40>
 800366c:	2b08      	cmp	r3, #8
 800366e:	f200 80bd 	bhi.w	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
 8003672:	2b00      	cmp	r3, #0
 8003674:	d002      	beq.n	800367c <HAL_RCC_GetSysClockFreq+0x34>
 8003676:	2b04      	cmp	r3, #4
 8003678:	d003      	beq.n	8003682 <HAL_RCC_GetSysClockFreq+0x3a>
 800367a:	e0b7      	b.n	80037ec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800367c:	4b61      	ldr	r3, [pc, #388]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800367e:	60bb      	str	r3, [r7, #8]
       break;
 8003680:	e0b7      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003682:	4b61      	ldr	r3, [pc, #388]	; (8003808 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003684:	60bb      	str	r3, [r7, #8]
      break;
 8003686:	e0b4      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003688:	4b5d      	ldr	r3, [pc, #372]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003690:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04d      	beq.n	800373a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	099b      	lsrs	r3, r3, #6
 80036a4:	461a      	mov	r2, r3
 80036a6:	f04f 0300 	mov.w	r3, #0
 80036aa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80036ae:	f04f 0100 	mov.w	r1, #0
 80036b2:	ea02 0800 	and.w	r8, r2, r0
 80036b6:	ea03 0901 	and.w	r9, r3, r1
 80036ba:	4640      	mov	r0, r8
 80036bc:	4649      	mov	r1, r9
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	014b      	lsls	r3, r1, #5
 80036c8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80036cc:	0142      	lsls	r2, r0, #5
 80036ce:	4610      	mov	r0, r2
 80036d0:	4619      	mov	r1, r3
 80036d2:	ebb0 0008 	subs.w	r0, r0, r8
 80036d6:	eb61 0109 	sbc.w	r1, r1, r9
 80036da:	f04f 0200 	mov.w	r2, #0
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	018b      	lsls	r3, r1, #6
 80036e4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80036e8:	0182      	lsls	r2, r0, #6
 80036ea:	1a12      	subs	r2, r2, r0
 80036ec:	eb63 0301 	sbc.w	r3, r3, r1
 80036f0:	f04f 0000 	mov.w	r0, #0
 80036f4:	f04f 0100 	mov.w	r1, #0
 80036f8:	00d9      	lsls	r1, r3, #3
 80036fa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80036fe:	00d0      	lsls	r0, r2, #3
 8003700:	4602      	mov	r2, r0
 8003702:	460b      	mov	r3, r1
 8003704:	eb12 0208 	adds.w	r2, r2, r8
 8003708:	eb43 0309 	adc.w	r3, r3, r9
 800370c:	f04f 0000 	mov.w	r0, #0
 8003710:	f04f 0100 	mov.w	r1, #0
 8003714:	0259      	lsls	r1, r3, #9
 8003716:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800371a:	0250      	lsls	r0, r2, #9
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4610      	mov	r0, r2
 8003722:	4619      	mov	r1, r3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	461a      	mov	r2, r3
 8003728:	f04f 0300 	mov.w	r3, #0
 800372c:	f7fc fd5e 	bl	80001ec <__aeabi_uldivmod>
 8003730:	4602      	mov	r2, r0
 8003732:	460b      	mov	r3, r1
 8003734:	4613      	mov	r3, r2
 8003736:	60fb      	str	r3, [r7, #12]
 8003738:	e04a      	b.n	80037d0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	099b      	lsrs	r3, r3, #6
 8003740:	461a      	mov	r2, r3
 8003742:	f04f 0300 	mov.w	r3, #0
 8003746:	f240 10ff 	movw	r0, #511	; 0x1ff
 800374a:	f04f 0100 	mov.w	r1, #0
 800374e:	ea02 0400 	and.w	r4, r2, r0
 8003752:	ea03 0501 	and.w	r5, r3, r1
 8003756:	4620      	mov	r0, r4
 8003758:	4629      	mov	r1, r5
 800375a:	f04f 0200 	mov.w	r2, #0
 800375e:	f04f 0300 	mov.w	r3, #0
 8003762:	014b      	lsls	r3, r1, #5
 8003764:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003768:	0142      	lsls	r2, r0, #5
 800376a:	4610      	mov	r0, r2
 800376c:	4619      	mov	r1, r3
 800376e:	1b00      	subs	r0, r0, r4
 8003770:	eb61 0105 	sbc.w	r1, r1, r5
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	018b      	lsls	r3, r1, #6
 800377e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003782:	0182      	lsls	r2, r0, #6
 8003784:	1a12      	subs	r2, r2, r0
 8003786:	eb63 0301 	sbc.w	r3, r3, r1
 800378a:	f04f 0000 	mov.w	r0, #0
 800378e:	f04f 0100 	mov.w	r1, #0
 8003792:	00d9      	lsls	r1, r3, #3
 8003794:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003798:	00d0      	lsls	r0, r2, #3
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	1912      	adds	r2, r2, r4
 80037a0:	eb45 0303 	adc.w	r3, r5, r3
 80037a4:	f04f 0000 	mov.w	r0, #0
 80037a8:	f04f 0100 	mov.w	r1, #0
 80037ac:	0299      	lsls	r1, r3, #10
 80037ae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80037b2:	0290      	lsls	r0, r2, #10
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	461a      	mov	r2, r3
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	f7fc fd12 	bl	80001ec <__aeabi_uldivmod>
 80037c8:	4602      	mov	r2, r0
 80037ca:	460b      	mov	r3, r1
 80037cc:	4613      	mov	r3, r2
 80037ce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037d0:	4b0b      	ldr	r3, [pc, #44]	; (8003800 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037d2:	685b      	ldr	r3, [r3, #4]
 80037d4:	0c1b      	lsrs	r3, r3, #16
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	3301      	adds	r3, #1
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80037e0:	68fa      	ldr	r2, [r7, #12]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e8:	60bb      	str	r3, [r7, #8]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037ec:	4b05      	ldr	r3, [pc, #20]	; (8003804 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80037ee:	60bb      	str	r3, [r7, #8]
      break;
 80037f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037f2:	68bb      	ldr	r3, [r7, #8]
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3710      	adds	r7, #16
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	00f42400 	.word	0x00f42400
 8003808:	007a1200 	.word	0x007a1200

0800380c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800380c:	b480      	push	{r7}
 800380e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003810:	4b03      	ldr	r3, [pc, #12]	; (8003820 <HAL_RCC_GetHCLKFreq+0x14>)
 8003812:	681b      	ldr	r3, [r3, #0]
}
 8003814:	4618      	mov	r0, r3
 8003816:	46bd      	mov	sp, r7
 8003818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381c:	4770      	bx	lr
 800381e:	bf00      	nop
 8003820:	20000000 	.word	0x20000000

08003824 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003828:	f7ff fff0 	bl	800380c <HAL_RCC_GetHCLKFreq>
 800382c:	4602      	mov	r2, r0
 800382e:	4b05      	ldr	r3, [pc, #20]	; (8003844 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	0a9b      	lsrs	r3, r3, #10
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	4903      	ldr	r1, [pc, #12]	; (8003848 <HAL_RCC_GetPCLK1Freq+0x24>)
 800383a:	5ccb      	ldrb	r3, [r1, r3]
 800383c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003840:	4618      	mov	r0, r3
 8003842:	bd80      	pop	{r7, pc}
 8003844:	40023800 	.word	0x40023800
 8003848:	08005f38 	.word	0x08005f38

0800384c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003850:	f7ff ffdc 	bl	800380c <HAL_RCC_GetHCLKFreq>
 8003854:	4602      	mov	r2, r0
 8003856:	4b05      	ldr	r3, [pc, #20]	; (800386c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	0b5b      	lsrs	r3, r3, #13
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	4903      	ldr	r1, [pc, #12]	; (8003870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003862:	5ccb      	ldrb	r3, [r1, r3]
 8003864:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003868:	4618      	mov	r0, r3
 800386a:	bd80      	pop	{r7, pc}
 800386c:	40023800 	.word	0x40023800
 8003870:	08005f38 	.word	0x08005f38

08003874 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b082      	sub	sp, #8
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e041      	b.n	800390a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800388c:	b2db      	uxtb	r3, r3
 800388e:	2b00      	cmp	r3, #0
 8003890:	d106      	bne.n	80038a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fd0c 	bl	80012b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	4619      	mov	r1, r3
 80038b2:	4610      	mov	r0, r2
 80038b4:	f000 fbb2 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3708      	adds	r7, #8
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
	...

08003914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003922:	b2db      	uxtb	r3, r3
 8003924:	2b01      	cmp	r3, #1
 8003926:	d001      	beq.n	800392c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e04e      	b.n	80039ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2202      	movs	r2, #2
 8003930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	68da      	ldr	r2, [r3, #12]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a23      	ldr	r2, [pc, #140]	; (80039d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d022      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003956:	d01d      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a1f      	ldr	r2, [pc, #124]	; (80039dc <HAL_TIM_Base_Start_IT+0xc8>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d018      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a1e      	ldr	r2, [pc, #120]	; (80039e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a1c      	ldr	r2, [pc, #112]	; (80039e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d00e      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a1b      	ldr	r2, [pc, #108]	; (80039e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d009      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	4a19      	ldr	r2, [pc, #100]	; (80039ec <HAL_TIM_Base_Start_IT+0xd8>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d004      	beq.n	8003994 <HAL_TIM_Base_Start_IT+0x80>
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	4a18      	ldr	r2, [pc, #96]	; (80039f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d111      	bne.n	80039b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	689b      	ldr	r3, [r3, #8]
 800399a:	f003 0307 	and.w	r3, r3, #7
 800399e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2b06      	cmp	r3, #6
 80039a4:	d010      	beq.n	80039c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f042 0201 	orr.w	r2, r2, #1
 80039b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039b6:	e007      	b.n	80039c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3714      	adds	r7, #20
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	40010000 	.word	0x40010000
 80039dc:	40000400 	.word	0x40000400
 80039e0:	40000800 	.word	0x40000800
 80039e4:	40000c00 	.word	0x40000c00
 80039e8:	40010400 	.word	0x40010400
 80039ec:	40014000 	.word	0x40014000
 80039f0:	40001800 	.word	0x40001800

080039f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a02:	2301      	movs	r3, #1
 8003a04:	e041      	b.n	8003a8a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d106      	bne.n	8003a20 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f000 f839 	bl	8003a92 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	3304      	adds	r3, #4
 8003a30:	4619      	mov	r1, r3
 8003a32:	4610      	mov	r0, r2
 8003a34:	f000 faf2 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3708      	adds	r7, #8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a92:	b480      	push	{r7}
 8003a94:	b083      	sub	sp, #12
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a9a:	bf00      	nop
 8003a9c:	370c      	adds	r7, #12
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr

08003aa6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	f003 0302 	and.w	r3, r3, #2
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d122      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11b      	bne.n	8003b02 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f06f 0202 	mvn.w	r2, #2
 8003ad2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	699b      	ldr	r3, [r3, #24]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f000 fa78 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003aee:	e005      	b.n	8003afc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa6a 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 fa7b 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	f003 0304 	and.w	r3, r3, #4
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d122      	bne.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68db      	ldr	r3, [r3, #12]
 8003b16:	f003 0304 	and.w	r3, r3, #4
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d11b      	bne.n	8003b56 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f06f 0204 	mvn.w	r2, #4
 8003b26:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d003      	beq.n	8003b44 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f000 fa4e 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b42:	e005      	b.n	8003b50 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa40 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fa51 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2200      	movs	r2, #0
 8003b54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	f003 0308 	and.w	r3, r3, #8
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d122      	bne.n	8003baa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d11b      	bne.n	8003baa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0208 	mvn.w	r2, #8
 8003b7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2204      	movs	r2, #4
 8003b80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f003 0303 	and.w	r3, r3, #3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fa24 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003b96:	e005      	b.n	8003ba4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa16 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fa27 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	691b      	ldr	r3, [r3, #16]
 8003bb0:	f003 0310 	and.w	r3, r3, #16
 8003bb4:	2b10      	cmp	r3, #16
 8003bb6:	d122      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	f003 0310 	and.w	r3, r3, #16
 8003bc2:	2b10      	cmp	r3, #16
 8003bc4:	d11b      	bne.n	8003bfe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f06f 0210 	mvn.w	r2, #16
 8003bce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2208      	movs	r2, #8
 8003bd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69db      	ldr	r3, [r3, #28]
 8003bdc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d003      	beq.n	8003bec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f000 f9fa 	bl	8003fde <HAL_TIM_IC_CaptureCallback>
 8003bea:	e005      	b.n	8003bf8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 f9ec 	bl	8003fca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f000 f9fd 	bl	8003ff2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	691b      	ldr	r3, [r3, #16]
 8003c04:	f003 0301 	and.w	r3, r3, #1
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d10e      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d107      	bne.n	8003c2a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f06f 0201 	mvn.w	r2, #1
 8003c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7fc ffdb 	bl	8000be0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	691b      	ldr	r3, [r3, #16]
 8003c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c34:	2b80      	cmp	r3, #128	; 0x80
 8003c36:	d10e      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c42:	2b80      	cmp	r3, #128	; 0x80
 8003c44:	d107      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	f000 fd53 	bl	80046fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c60:	2b40      	cmp	r3, #64	; 0x40
 8003c62:	d10e      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c6e:	2b40      	cmp	r3, #64	; 0x40
 8003c70:	d107      	bne.n	8003c82 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f000 f9c2 	bl	8004006 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	691b      	ldr	r3, [r3, #16]
 8003c88:	f003 0320 	and.w	r3, r3, #32
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d10e      	bne.n	8003cae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f003 0320 	and.w	r3, r3, #32
 8003c9a:	2b20      	cmp	r3, #32
 8003c9c:	d107      	bne.n	8003cae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f06f 0220 	mvn.w	r2, #32
 8003ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca8:	6878      	ldr	r0, [r7, #4]
 8003caa:	f000 fd1d 	bl	80046e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003cae:	bf00      	nop
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d101      	bne.n	8003cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cd2:	2302      	movs	r3, #2
 8003cd4:	e0ae      	b.n	8003e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	f200 809f 	bhi.w	8003e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ce6:	a201      	add	r2, pc, #4	; (adr r2, 8003cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cec:	08003d21 	.word	0x08003d21
 8003cf0:	08003e25 	.word	0x08003e25
 8003cf4:	08003e25 	.word	0x08003e25
 8003cf8:	08003e25 	.word	0x08003e25
 8003cfc:	08003d61 	.word	0x08003d61
 8003d00:	08003e25 	.word	0x08003e25
 8003d04:	08003e25 	.word	0x08003e25
 8003d08:	08003e25 	.word	0x08003e25
 8003d0c:	08003da3 	.word	0x08003da3
 8003d10:	08003e25 	.word	0x08003e25
 8003d14:	08003e25 	.word	0x08003e25
 8003d18:	08003e25 	.word	0x08003e25
 8003d1c:	08003de3 	.word	0x08003de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	68b9      	ldr	r1, [r7, #8]
 8003d26:	4618      	mov	r0, r3
 8003d28:	f000 fa18 	bl	800415c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	699a      	ldr	r2, [r3, #24]
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f042 0208 	orr.w	r2, r2, #8
 8003d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699a      	ldr	r2, [r3, #24]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f022 0204 	bic.w	r2, r2, #4
 8003d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6999      	ldr	r1, [r3, #24]
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	691a      	ldr	r2, [r3, #16]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	619a      	str	r2, [r3, #24]
      break;
 8003d5e:	e064      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68b9      	ldr	r1, [r7, #8]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f000 fa68 	bl	800423c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699a      	ldr	r2, [r3, #24]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	6999      	ldr	r1, [r3, #24]
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	691b      	ldr	r3, [r3, #16]
 8003d96:	021a      	lsls	r2, r3, #8
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	619a      	str	r2, [r3, #24]
      break;
 8003da0:	e043      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	68b9      	ldr	r1, [r7, #8]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f000 fabd 	bl	8004328 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69da      	ldr	r2, [r3, #28]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f042 0208 	orr.w	r2, r2, #8
 8003dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69da      	ldr	r2, [r3, #28]
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f022 0204 	bic.w	r2, r2, #4
 8003dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	69d9      	ldr	r1, [r3, #28]
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	61da      	str	r2, [r3, #28]
      break;
 8003de0:	e023      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	68b9      	ldr	r1, [r7, #8]
 8003de8:	4618      	mov	r0, r3
 8003dea:	f000 fb11 	bl	8004410 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69d9      	ldr	r1, [r3, #28]
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	021a      	lsls	r2, r3, #8
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	61da      	str	r2, [r3, #28]
      break;
 8003e22:	e002      	b.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	75fb      	strb	r3, [r7, #23]
      break;
 8003e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3718      	adds	r7, #24
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e46:	2300      	movs	r3, #0
 8003e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d101      	bne.n	8003e58 <HAL_TIM_ConfigClockSource+0x1c>
 8003e54:	2302      	movs	r3, #2
 8003e56:	e0b4      	b.n	8003fc2 <HAL_TIM_ConfigClockSource+0x186>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68ba      	ldr	r2, [r7, #8]
 8003e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e90:	d03e      	beq.n	8003f10 <HAL_TIM_ConfigClockSource+0xd4>
 8003e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e96:	f200 8087 	bhi.w	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e9e:	f000 8086 	beq.w	8003fae <HAL_TIM_ConfigClockSource+0x172>
 8003ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ea6:	d87f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b70      	cmp	r3, #112	; 0x70
 8003eaa:	d01a      	beq.n	8003ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8003eac:	2b70      	cmp	r3, #112	; 0x70
 8003eae:	d87b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b60      	cmp	r3, #96	; 0x60
 8003eb2:	d050      	beq.n	8003f56 <HAL_TIM_ConfigClockSource+0x11a>
 8003eb4:	2b60      	cmp	r3, #96	; 0x60
 8003eb6:	d877      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b50      	cmp	r3, #80	; 0x50
 8003eba:	d03c      	beq.n	8003f36 <HAL_TIM_ConfigClockSource+0xfa>
 8003ebc:	2b50      	cmp	r3, #80	; 0x50
 8003ebe:	d873      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b40      	cmp	r3, #64	; 0x40
 8003ec2:	d058      	beq.n	8003f76 <HAL_TIM_ConfigClockSource+0x13a>
 8003ec4:	2b40      	cmp	r3, #64	; 0x40
 8003ec6:	d86f      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b30      	cmp	r3, #48	; 0x30
 8003eca:	d064      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b30      	cmp	r3, #48	; 0x30
 8003ece:	d86b      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b20      	cmp	r3, #32
 8003ed2:	d060      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d867      	bhi.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d05c      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003edc:	2b10      	cmp	r3, #16
 8003ede:	d05a      	beq.n	8003f96 <HAL_TIM_ConfigClockSource+0x15a>
 8003ee0:	e062      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6818      	ldr	r0, [r3, #0]
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6899      	ldr	r1, [r3, #8]
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685a      	ldr	r2, [r3, #4]
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	f000 fb5d 	bl	80045b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	609a      	str	r2, [r3, #8]
      break;
 8003f0e:	e04f      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	6899      	ldr	r1, [r3, #8]
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f000 fb46 	bl	80045b0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689a      	ldr	r2, [r3, #8]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f32:	609a      	str	r2, [r3, #8]
      break;
 8003f34:	e03c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6818      	ldr	r0, [r3, #0]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	6859      	ldr	r1, [r3, #4]
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	461a      	mov	r2, r3
 8003f44:	f000 faba 	bl	80044bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2150      	movs	r1, #80	; 0x50
 8003f4e:	4618      	mov	r0, r3
 8003f50:	f000 fb13 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003f54:	e02c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6818      	ldr	r0, [r3, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	6859      	ldr	r1, [r3, #4]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f000 fad9 	bl	800451a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2160      	movs	r1, #96	; 0x60
 8003f6e:	4618      	mov	r0, r3
 8003f70:	f000 fb03 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003f74:	e01c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6818      	ldr	r0, [r3, #0]
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	6859      	ldr	r1, [r3, #4]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	461a      	mov	r2, r3
 8003f84:	f000 fa9a 	bl	80044bc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2140      	movs	r1, #64	; 0x40
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f000 faf3 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003f94:	e00c      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	4610      	mov	r0, r2
 8003fa2:	f000 faea 	bl	800457a <TIM_ITRx_SetConfig>
      break;
 8003fa6:	e003      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	73fb      	strb	r3, [r7, #15]
      break;
 8003fac:	e000      	b.n	8003fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	3710      	adds	r7, #16
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	bd80      	pop	{r7, pc}

08003fca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff2:	b480      	push	{r7}
 8003ff4:	b083      	sub	sp, #12
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
	...

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a40      	ldr	r2, [pc, #256]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d013      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403a:	d00f      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a3d      	ldr	r2, [pc, #244]	; (8004134 <TIM_Base_SetConfig+0x118>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d00b      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a3c      	ldr	r2, [pc, #240]	; (8004138 <TIM_Base_SetConfig+0x11c>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d007      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a3b      	ldr	r2, [pc, #236]	; (800413c <TIM_Base_SetConfig+0x120>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_Base_SetConfig+0x40>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a3a      	ldr	r2, [pc, #232]	; (8004140 <TIM_Base_SetConfig+0x124>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d108      	bne.n	800406e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004062:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	4313      	orrs	r3, r2
 800406c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d02b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800407c:	d027      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2c      	ldr	r2, [pc, #176]	; (8004134 <TIM_Base_SetConfig+0x118>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d023      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2b      	ldr	r2, [pc, #172]	; (8004138 <TIM_Base_SetConfig+0x11c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d01f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <TIM_Base_SetConfig+0x120>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d01b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a29      	ldr	r2, [pc, #164]	; (8004140 <TIM_Base_SetConfig+0x124>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d017      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a28      	ldr	r2, [pc, #160]	; (8004144 <TIM_Base_SetConfig+0x128>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d013      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a27      	ldr	r2, [pc, #156]	; (8004148 <TIM_Base_SetConfig+0x12c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d00f      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a26      	ldr	r2, [pc, #152]	; (800414c <TIM_Base_SetConfig+0x130>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d00b      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a25      	ldr	r2, [pc, #148]	; (8004150 <TIM_Base_SetConfig+0x134>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d007      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a24      	ldr	r2, [pc, #144]	; (8004154 <TIM_Base_SetConfig+0x138>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d003      	beq.n	80040ce <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a23      	ldr	r2, [pc, #140]	; (8004158 <TIM_Base_SetConfig+0x13c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d108      	bne.n	80040e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	4313      	orrs	r3, r2
 80040de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	695b      	ldr	r3, [r3, #20]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68fa      	ldr	r2, [r7, #12]
 80040f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	689a      	ldr	r2, [r3, #8]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	681a      	ldr	r2, [r3, #0]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a0a      	ldr	r2, [pc, #40]	; (8004130 <TIM_Base_SetConfig+0x114>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0xf8>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a0c      	ldr	r2, [pc, #48]	; (8004140 <TIM_Base_SetConfig+0x124>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	615a      	str	r2, [r3, #20]
}
 8004122:	bf00      	nop
 8004124:	3714      	adds	r7, #20
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40010400 	.word	0x40010400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800
 8004150:	40001800 	.word	0x40001800
 8004154:	40001c00 	.word	0x40001c00
 8004158:	40002000 	.word	0x40002000

0800415c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800415c:	b480      	push	{r7}
 800415e:	b087      	sub	sp, #28
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
 8004164:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	f023 0201 	bic.w	r2, r3, #1
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800418a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	f023 0303 	bic.w	r3, r3, #3
 8004192:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	4313      	orrs	r3, r2
 800419c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	f023 0302 	bic.w	r3, r3, #2
 80041a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	4313      	orrs	r3, r2
 80041ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d003      	beq.n	80041c0 <TIM_OC1_SetConfig+0x64>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d10c      	bne.n	80041da <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f023 0308 	bic.w	r3, r3, #8
 80041c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f023 0304 	bic.w	r3, r3, #4
 80041d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <TIM_OC1_SetConfig+0xd8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d003      	beq.n	80041ea <TIM_OC1_SetConfig+0x8e>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	4a14      	ldr	r2, [pc, #80]	; (8004238 <TIM_OC1_SetConfig+0xdc>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d111      	bne.n	800420e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	699b      	ldr	r3, [r3, #24]
 8004208:	693a      	ldr	r2, [r7, #16]
 800420a:	4313      	orrs	r3, r2
 800420c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	621a      	str	r2, [r3, #32]
}
 8004228:	bf00      	nop
 800422a:	371c      	adds	r7, #28
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	40010000 	.word	0x40010000
 8004238:	40010400 	.word	0x40010400

0800423c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	f023 0210 	bic.w	r2, r3, #16
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	021b      	lsls	r3, r3, #8
 800427a:	68fa      	ldr	r2, [r7, #12]
 800427c:	4313      	orrs	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	f023 0320 	bic.w	r3, r3, #32
 8004286:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	011b      	lsls	r3, r3, #4
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	4313      	orrs	r3, r2
 8004292:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a22      	ldr	r2, [pc, #136]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_OC2_SetConfig+0x68>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a21      	ldr	r2, [pc, #132]	; (8004324 <TIM_OC2_SetConfig+0xe8>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d10d      	bne.n	80042c0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80042aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	011b      	lsls	r3, r3, #4
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	4313      	orrs	r3, r2
 80042b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	4a17      	ldr	r2, [pc, #92]	; (8004320 <TIM_OC2_SetConfig+0xe4>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d003      	beq.n	80042d0 <TIM_OC2_SetConfig+0x94>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	4a16      	ldr	r2, [pc, #88]	; (8004324 <TIM_OC2_SetConfig+0xe8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d113      	bne.n	80042f8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042de:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	695b      	ldr	r3, [r3, #20]
 80042e4:	009b      	lsls	r3, r3, #2
 80042e6:	693a      	ldr	r2, [r7, #16]
 80042e8:	4313      	orrs	r3, r2
 80042ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	699b      	ldr	r3, [r3, #24]
 80042f0:	009b      	lsls	r3, r3, #2
 80042f2:	693a      	ldr	r2, [r7, #16]
 80042f4:	4313      	orrs	r3, r2
 80042f6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	693a      	ldr	r2, [r7, #16]
 80042fc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	68fa      	ldr	r2, [r7, #12]
 8004302:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	697a      	ldr	r2, [r7, #20]
 8004310:	621a      	str	r2, [r3, #32]
}
 8004312:	bf00      	nop
 8004314:	371c      	adds	r7, #28
 8004316:	46bd      	mov	sp, r7
 8004318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431c:	4770      	bx	lr
 800431e:	bf00      	nop
 8004320:	40010000 	.word	0x40010000
 8004324:	40010400 	.word	0x40010400

08004328 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004328:	b480      	push	{r7}
 800432a:	b087      	sub	sp, #28
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	69db      	ldr	r3, [r3, #28]
 800434e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f023 0303 	bic.w	r3, r3, #3
 800435e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68fa      	ldr	r2, [r7, #12]
 8004366:	4313      	orrs	r3, r2
 8004368:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800436a:	697b      	ldr	r3, [r7, #20]
 800436c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004370:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	021b      	lsls	r3, r3, #8
 8004378:	697a      	ldr	r2, [r7, #20]
 800437a:	4313      	orrs	r3, r2
 800437c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	4a21      	ldr	r2, [pc, #132]	; (8004408 <TIM_OC3_SetConfig+0xe0>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d003      	beq.n	800438e <TIM_OC3_SetConfig+0x66>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4a20      	ldr	r2, [pc, #128]	; (800440c <TIM_OC3_SetConfig+0xe4>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d10d      	bne.n	80043aa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004394:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	68db      	ldr	r3, [r3, #12]
 800439a:	021b      	lsls	r3, r3, #8
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	4313      	orrs	r3, r2
 80043a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80043a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4a16      	ldr	r2, [pc, #88]	; (8004408 <TIM_OC3_SetConfig+0xe0>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d003      	beq.n	80043ba <TIM_OC3_SetConfig+0x92>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <TIM_OC3_SetConfig+0xe4>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d113      	bne.n	80043e2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	695b      	ldr	r3, [r3, #20]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	699b      	ldr	r3, [r3, #24]
 80043da:	011b      	lsls	r3, r3, #4
 80043dc:	693a      	ldr	r2, [r7, #16]
 80043de:	4313      	orrs	r3, r2
 80043e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	693a      	ldr	r2, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68fa      	ldr	r2, [r7, #12]
 80043ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	697a      	ldr	r2, [r7, #20]
 80043fa:	621a      	str	r2, [r3, #32]
}
 80043fc:	bf00      	nop
 80043fe:	371c      	adds	r7, #28
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40010000 	.word	0x40010000
 800440c:	40010400 	.word	0x40010400

08004410 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004410:	b480      	push	{r7}
 8004412:	b087      	sub	sp, #28
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6a1b      	ldr	r3, [r3, #32]
 800441e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a1b      	ldr	r3, [r3, #32]
 800442a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	69db      	ldr	r3, [r3, #28]
 8004436:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800443e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004446:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	021b      	lsls	r3, r3, #8
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800445a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	031b      	lsls	r3, r3, #12
 8004462:	693a      	ldr	r2, [r7, #16]
 8004464:	4313      	orrs	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a12      	ldr	r2, [pc, #72]	; (80044b4 <TIM_OC4_SetConfig+0xa4>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_OC4_SetConfig+0x68>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a11      	ldr	r2, [pc, #68]	; (80044b8 <TIM_OC4_SetConfig+0xa8>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d109      	bne.n	800448c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800447e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	695b      	ldr	r3, [r3, #20]
 8004484:	019b      	lsls	r3, r3, #6
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	4313      	orrs	r3, r2
 800448a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68fa      	ldr	r2, [r7, #12]
 8004496:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	693a      	ldr	r2, [r7, #16]
 80044a4:	621a      	str	r2, [r3, #32]
}
 80044a6:	bf00      	nop
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	40010000 	.word	0x40010000
 80044b8:	40010400 	.word	0x40010400

080044bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044bc:	b480      	push	{r7}
 80044be:	b087      	sub	sp, #28
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6a1b      	ldr	r3, [r3, #32]
 80044cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	f023 0201 	bic.w	r2, r3, #1
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	011b      	lsls	r3, r3, #4
 80044ec:	693a      	ldr	r2, [r7, #16]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f023 030a 	bic.w	r3, r3, #10
 80044f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044fa:	697a      	ldr	r2, [r7, #20]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	693a      	ldr	r2, [r7, #16]
 8004506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	621a      	str	r2, [r3, #32]
}
 800450e:	bf00      	nop
 8004510:	371c      	adds	r7, #28
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr

0800451a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6a1b      	ldr	r3, [r3, #32]
 800452a:	f023 0210 	bic.w	r2, r3, #16
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	031b      	lsls	r3, r3, #12
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	4313      	orrs	r3, r2
 800454e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	693a      	ldr	r2, [r7, #16]
 800455e:	4313      	orrs	r3, r2
 8004560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	621a      	str	r2, [r3, #32]
}
 800456e:	bf00      	nop
 8004570:	371c      	adds	r7, #28
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr

0800457a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800457a:	b480      	push	{r7}
 800457c:	b085      	sub	sp, #20
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
 8004582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004592:	683a      	ldr	r2, [r7, #0]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4313      	orrs	r3, r2
 8004598:	f043 0307 	orr.w	r3, r3, #7
 800459c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	609a      	str	r2, [r3, #8]
}
 80045a4:	bf00      	nop
 80045a6:	3714      	adds	r7, #20
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b087      	sub	sp, #28
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	60f8      	str	r0, [r7, #12]
 80045b8:	60b9      	str	r1, [r7, #8]
 80045ba:	607a      	str	r2, [r7, #4]
 80045bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	021a      	lsls	r2, r3, #8
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	609a      	str	r2, [r3, #8]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b085      	sub	sp, #20
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004604:	2302      	movs	r3, #2
 8004606:	e05a      	b.n	80046be <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2202      	movs	r2, #2
 8004614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800462e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68fa      	ldr	r2, [r7, #12]
 8004636:	4313      	orrs	r3, r2
 8004638:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	68fa      	ldr	r2, [r7, #12]
 8004640:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a21      	ldr	r2, [pc, #132]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d022      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004654:	d01d      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a1d      	ldr	r2, [pc, #116]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d018      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1b      	ldr	r2, [pc, #108]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d013      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1a      	ldr	r2, [pc, #104]	; (80046d8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d00e      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a18      	ldr	r2, [pc, #96]	; (80046dc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d009      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a17      	ldr	r2, [pc, #92]	; (80046e0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d004      	beq.n	8004692 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d10c      	bne.n	80046ac <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004698:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68ba      	ldr	r2, [r7, #8]
 80046aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3714      	adds	r7, #20
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800
 80046d8:	40000c00 	.word	0x40000c00
 80046dc:	40010400 	.word	0x40010400
 80046e0:	40014000 	.word	0x40014000
 80046e4:	40001800 	.word	0x40001800

080046e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80046f0:	bf00      	nop
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr

080046fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e03f      	b.n	80047a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2b00      	cmp	r3, #0
 800472c:	d106      	bne.n	800473c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2200      	movs	r2, #0
 8004732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004736:	6878      	ldr	r0, [r7, #4]
 8004738:	f7fc ff5a 	bl	80015f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2224      	movs	r2, #36	; 0x24
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 fc7b 	bl	8005050 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	691a      	ldr	r2, [r3, #16]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	695a      	ldr	r2, [r3, #20]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68da      	ldr	r2, [r3, #12]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2200      	movs	r2, #0
 800478e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2220      	movs	r2, #32
 8004794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047a0:	2300      	movs	r3, #0
}
 80047a2:	4618      	mov	r0, r3
 80047a4:	3708      	adds	r7, #8
 80047a6:	46bd      	mov	sp, r7
 80047a8:	bd80      	pop	{r7, pc}
	...

080047ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b0ba      	sub	sp, #232	; 0xe8
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	68db      	ldr	r3, [r3, #12]
 80047c4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80047de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80047ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d10f      	bne.n	8004812 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 0320 	and.w	r3, r3, #32
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d009      	beq.n	8004812 <HAL_UART_IRQHandler+0x66>
 80047fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004802:	f003 0320 	and.w	r3, r3, #32
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800480a:	6878      	ldr	r0, [r7, #4]
 800480c:	f000 fb65 	bl	8004eda <UART_Receive_IT>
      return;
 8004810:	e256      	b.n	8004cc0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004812:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004816:	2b00      	cmp	r3, #0
 8004818:	f000 80de 	beq.w	80049d8 <HAL_UART_IRQHandler+0x22c>
 800481c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004820:	f003 0301 	and.w	r3, r3, #1
 8004824:	2b00      	cmp	r3, #0
 8004826:	d106      	bne.n	8004836 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800482c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004830:	2b00      	cmp	r3, #0
 8004832:	f000 80d1 	beq.w	80049d8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483a:	f003 0301 	and.w	r3, r3, #1
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00b      	beq.n	800485a <HAL_UART_IRQHandler+0xae>
 8004842:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	f043 0201 	orr.w	r2, r3, #1
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800485a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800485e:	f003 0304 	and.w	r3, r3, #4
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <HAL_UART_IRQHandler+0xd2>
 8004866:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004876:	f043 0202 	orr.w	r2, r3, #2
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800487e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004882:	f003 0302 	and.w	r3, r3, #2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d00b      	beq.n	80048a2 <HAL_UART_IRQHandler+0xf6>
 800488a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489a:	f043 0204 	orr.w	r2, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048a6:	f003 0308 	and.w	r3, r3, #8
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d011      	beq.n	80048d2 <HAL_UART_IRQHandler+0x126>
 80048ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d105      	bne.n	80048c6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80048ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d005      	beq.n	80048d2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ca:	f043 0208 	orr.w	r2, r3, #8
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	f000 81ed 	beq.w	8004cb6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80048dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e0:	f003 0320 	and.w	r3, r3, #32
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d008      	beq.n	80048fa <HAL_UART_IRQHandler+0x14e>
 80048e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ec:	f003 0320 	and.w	r3, r3, #32
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d002      	beq.n	80048fa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 faf0 	bl	8004eda <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004904:	2b40      	cmp	r3, #64	; 0x40
 8004906:	bf0c      	ite	eq
 8004908:	2301      	moveq	r3, #1
 800490a:	2300      	movne	r3, #0
 800490c:	b2db      	uxtb	r3, r3
 800490e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <HAL_UART_IRQHandler+0x17a>
 800491e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004922:	2b00      	cmp	r3, #0
 8004924:	d04f      	beq.n	80049c6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 f9f8 	bl	8004d1c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	695b      	ldr	r3, [r3, #20]
 8004932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004936:	2b40      	cmp	r3, #64	; 0x40
 8004938:	d141      	bne.n	80049be <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	3314      	adds	r3, #20
 8004940:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004948:	e853 3f00 	ldrex	r3, [r3]
 800494c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004950:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004954:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004958:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	3314      	adds	r3, #20
 8004962:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004966:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800496a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800496e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004972:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004976:	e841 2300 	strex	r3, r2, [r1]
 800497a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800497e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1d9      	bne.n	800493a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	2b00      	cmp	r3, #0
 800498c:	d013      	beq.n	80049b6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004992:	4a7d      	ldr	r2, [pc, #500]	; (8004b88 <HAL_UART_IRQHandler+0x3dc>)
 8004994:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	4618      	mov	r0, r3
 800499c:	f7fd fc9e 	bl	80022dc <HAL_DMA_Abort_IT>
 80049a0:	4603      	mov	r3, r0
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d016      	beq.n	80049d4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80049b0:	4610      	mov	r0, r2
 80049b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b4:	e00e      	b.n	80049d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 f99a 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049bc:	e00a      	b.n	80049d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f000 f996 	bl	8004cf0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c4:	e006      	b.n	80049d4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f000 f992 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80049d2:	e170      	b.n	8004cb6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	bf00      	nop
    return;
 80049d6:	e16e      	b.n	8004cb6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 814a 	bne.w	8004c76 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8143 	beq.w	8004c76 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 813c 	beq.w	8004c76 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80049fe:	2300      	movs	r3, #0
 8004a00:	60bb      	str	r3, [r7, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	60bb      	str	r3, [r7, #8]
 8004a12:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b40      	cmp	r3, #64	; 0x40
 8004a20:	f040 80b4 	bne.w	8004b8c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a30:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	f000 8140 	beq.w	8004cba <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004a3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a42:	429a      	cmp	r2, r3
 8004a44:	f080 8139 	bcs.w	8004cba <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004a4e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a54:	69db      	ldr	r3, [r3, #28]
 8004a56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a5a:	f000 8088 	beq.w	8004b6e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	330c      	adds	r3, #12
 8004a64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a8a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a8e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a9a:	e841 2300 	strex	r3, r2, [r1]
 8004a9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004aa2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1d9      	bne.n	8004a5e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	3314      	adds	r3, #20
 8004ab0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ab4:	e853 3f00 	ldrex	r3, [r3]
 8004ab8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004abc:	f023 0301 	bic.w	r3, r3, #1
 8004ac0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3314      	adds	r3, #20
 8004aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004ace:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004ad2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004ad6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004ada:	e841 2300 	strex	r3, r2, [r1]
 8004ade:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004ae0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1e1      	bne.n	8004aaa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	3314      	adds	r3, #20
 8004aec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004af0:	e853 3f00 	ldrex	r3, [r3]
 8004af4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004af6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004af8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004afc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3314      	adds	r3, #20
 8004b06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b12:	e841 2300 	strex	r3, r2, [r1]
 8004b16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d1e3      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	330c      	adds	r3, #12
 8004b32:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b36:	e853 3f00 	ldrex	r3, [r3]
 8004b3a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b3e:	f023 0310 	bic.w	r3, r3, #16
 8004b42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	330c      	adds	r3, #12
 8004b4c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004b50:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b52:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b54:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b56:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b58:	e841 2300 	strex	r3, r2, [r1]
 8004b5c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1e3      	bne.n	8004b2c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b68:	4618      	mov	r0, r3
 8004b6a:	f7fd fb47 	bl	80021fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b76:	b29b      	uxth	r3, r3
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	b29b      	uxth	r3, r3
 8004b7c:	4619      	mov	r1, r3
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f8c0 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b84:	e099      	b.n	8004cba <HAL_UART_IRQHandler+0x50e>
 8004b86:	bf00      	nop
 8004b88:	08004de3 	.word	0x08004de3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b94:	b29b      	uxth	r3, r3
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ba0:	b29b      	uxth	r3, r3
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f000 808b 	beq.w	8004cbe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004ba8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	f000 8086 	beq.w	8004cbe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	330c      	adds	r3, #12
 8004bb8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bbc:	e853 3f00 	ldrex	r3, [r3]
 8004bc0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004bc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bc4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004bc8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	330c      	adds	r3, #12
 8004bd2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004bd6:	647a      	str	r2, [r7, #68]	; 0x44
 8004bd8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bda:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bdc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bde:	e841 2300 	strex	r3, r2, [r1]
 8004be2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1e3      	bne.n	8004bb2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	3314      	adds	r3, #20
 8004bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf4:	e853 3f00 	ldrex	r3, [r3]
 8004bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8004bfa:	6a3b      	ldr	r3, [r7, #32]
 8004bfc:	f023 0301 	bic.w	r3, r3, #1
 8004c00:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	3314      	adds	r3, #20
 8004c0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c0e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c10:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c12:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c16:	e841 2300 	strex	r3, r2, [r1]
 8004c1a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d1e3      	bne.n	8004bea <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	2220      	movs	r2, #32
 8004c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	330c      	adds	r3, #12
 8004c36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	f023 0310 	bic.w	r3, r3, #16
 8004c46:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	330c      	adds	r3, #12
 8004c50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	69b9      	ldr	r1, [r7, #24]
 8004c5a:	69fa      	ldr	r2, [r7, #28]
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	617b      	str	r3, [r7, #20]
   return(result);
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e3      	bne.n	8004c30 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f848 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c74:	e023      	b.n	8004cbe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d009      	beq.n	8004c96 <HAL_UART_IRQHandler+0x4ea>
 8004c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d003      	beq.n	8004c96 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	f000 f8bb 	bl	8004e0a <UART_Transmit_IT>
    return;
 8004c94:	e014      	b.n	8004cc0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x514>
 8004ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d008      	beq.n	8004cc0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 f8fb 	bl	8004eaa <UART_EndTransmit_IT>
    return;
 8004cb4:	e004      	b.n	8004cc0 <HAL_UART_IRQHandler+0x514>
    return;
 8004cb6:	bf00      	nop
 8004cb8:	e002      	b.n	8004cc0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cba:	bf00      	nop
 8004cbc:	e000      	b.n	8004cc0 <HAL_UART_IRQHandler+0x514>
      return;
 8004cbe:	bf00      	nop
  }
}
 8004cc0:	37e8      	adds	r7, #232	; 0xe8
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop

08004cc8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b083      	sub	sp, #12
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004cd0:	bf00      	nop
 8004cd2:	370c      	adds	r7, #12
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004ce4:	bf00      	nop
 8004ce6:	370c      	adds	r7, #12
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
 8004d0c:	460b      	mov	r3, r1
 8004d0e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d10:	bf00      	nop
 8004d12:	370c      	adds	r7, #12
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b095      	sub	sp, #84	; 0x54
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	330c      	adds	r3, #12
 8004d2a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d2e:	e853 3f00 	ldrex	r3, [r3]
 8004d32:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d36:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	330c      	adds	r3, #12
 8004d42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004d44:	643a      	str	r2, [r7, #64]	; 0x40
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d4c:	e841 2300 	strex	r3, r2, [r1]
 8004d50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d1e5      	bne.n	8004d24 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	3314      	adds	r3, #20
 8004d5e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d60:	6a3b      	ldr	r3, [r7, #32]
 8004d62:	e853 3f00 	ldrex	r3, [r3]
 8004d66:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	f023 0301 	bic.w	r3, r3, #1
 8004d6e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3314      	adds	r3, #20
 8004d76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d78:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e5      	bne.n	8004d58 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d119      	bne.n	8004dc8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	330c      	adds	r3, #12
 8004d9a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	e853 3f00 	ldrex	r3, [r3]
 8004da2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	f023 0310 	bic.w	r3, r3, #16
 8004daa:	647b      	str	r3, [r7, #68]	; 0x44
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	330c      	adds	r3, #12
 8004db2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004db4:	61ba      	str	r2, [r7, #24]
 8004db6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6979      	ldr	r1, [r7, #20]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	e841 2300 	strex	r3, r2, [r1]
 8004dc0:	613b      	str	r3, [r7, #16]
   return(result);
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d1e5      	bne.n	8004d94 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2220      	movs	r2, #32
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004dd6:	bf00      	nop
 8004dd8:	3754      	adds	r7, #84	; 0x54
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr

08004de2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004de2:	b580      	push	{r7, lr}
 8004de4:	b084      	sub	sp, #16
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004dfc:	68f8      	ldr	r0, [r7, #12]
 8004dfe:	f7ff ff77 	bl	8004cf0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}

08004e0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b085      	sub	sp, #20
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	2b21      	cmp	r3, #33	; 0x21
 8004e1c:	d13e      	bne.n	8004e9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e26:	d114      	bne.n	8004e52 <UART_Transmit_IT+0x48>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d110      	bne.n	8004e52 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	881b      	ldrh	r3, [r3, #0]
 8004e3a:	461a      	mov	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004e44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	1c9a      	adds	r2, r3, #2
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	621a      	str	r2, [r3, #32]
 8004e50:	e008      	b.n	8004e64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a1b      	ldr	r3, [r3, #32]
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	6211      	str	r1, [r2, #32]
 8004e5c:	781a      	ldrb	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004e68:	b29b      	uxth	r3, r3
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	4619      	mov	r1, r3
 8004e72:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d10f      	bne.n	8004e98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68da      	ldr	r2, [r3, #12]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	68da      	ldr	r2, [r3, #12]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	e000      	b.n	8004e9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004e9c:	2302      	movs	r3, #2
  }
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr

08004eaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004eaa:	b580      	push	{r7, lr}
 8004eac:	b082      	sub	sp, #8
 8004eae:	af00      	add	r7, sp, #0
 8004eb0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68da      	ldr	r2, [r3, #12]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ec0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2220      	movs	r2, #32
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f7ff fefc 	bl	8004cc8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004ed0:	2300      	movs	r3, #0
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}

08004eda <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004eda:	b580      	push	{r7, lr}
 8004edc:	b08c      	sub	sp, #48	; 0x30
 8004ede:	af00      	add	r7, sp, #0
 8004ee0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b22      	cmp	r3, #34	; 0x22
 8004eec:	f040 80ab 	bne.w	8005046 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ef8:	d117      	bne.n	8004f2a <UART_Receive_IT+0x50>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	691b      	ldr	r3, [r3, #16]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d113      	bne.n	8004f2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f02:	2300      	movs	r3, #0
 8004f04:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f0a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f18:	b29a      	uxth	r2, r3
 8004f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f22:	1c9a      	adds	r2, r3, #2
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	629a      	str	r2, [r3, #40]	; 0x28
 8004f28:	e026      	b.n	8004f78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004f30:	2300      	movs	r3, #0
 8004f32:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f3c:	d007      	beq.n	8004f4e <UART_Receive_IT+0x74>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d10a      	bne.n	8004f5c <UART_Receive_IT+0x82>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d106      	bne.n	8004f5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	b2da      	uxtb	r2, r3
 8004f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f58:	701a      	strb	r2, [r3, #0]
 8004f5a:	e008      	b.n	8004f6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	b2db      	uxtb	r3, r3
 8004f64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f72:	1c5a      	adds	r2, r3, #1
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	4619      	mov	r1, r3
 8004f86:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d15a      	bne.n	8005042 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	68da      	ldr	r2, [r3, #12]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f022 0220 	bic.w	r2, r2, #32
 8004f9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	68da      	ldr	r2, [r3, #12]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	695a      	ldr	r2, [r3, #20]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f022 0201 	bic.w	r2, r2, #1
 8004fba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2220      	movs	r2, #32
 8004fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d135      	bne.n	8005038 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	e853 3f00 	ldrex	r3, [r3]
 8004fe0:	613b      	str	r3, [r7, #16]
   return(result);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f023 0310 	bic.w	r3, r3, #16
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ff2:	623a      	str	r2, [r7, #32]
 8004ff4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff6:	69f9      	ldr	r1, [r7, #28]
 8004ff8:	6a3a      	ldr	r2, [r7, #32]
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	61bb      	str	r3, [r7, #24]
   return(result);
 8005000:	69bb      	ldr	r3, [r7, #24]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d1e5      	bne.n	8004fd2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0310 	and.w	r3, r3, #16
 8005010:	2b10      	cmp	r3, #16
 8005012:	d10a      	bne.n	800502a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005014:	2300      	movs	r3, #0
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	60fb      	str	r3, [r7, #12]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800502e:	4619      	mov	r1, r3
 8005030:	6878      	ldr	r0, [r7, #4]
 8005032:	f7ff fe67 	bl	8004d04 <HAL_UARTEx_RxEventCallback>
 8005036:	e002      	b.n	800503e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	f7ff fe4f 	bl	8004cdc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800503e:	2300      	movs	r3, #0
 8005040:	e002      	b.n	8005048 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005042:	2300      	movs	r3, #0
 8005044:	e000      	b.n	8005048 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005046:	2302      	movs	r3, #2
  }
}
 8005048:	4618      	mov	r0, r3
 800504a:	3730      	adds	r7, #48	; 0x30
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005054:	b09f      	sub	sp, #124	; 0x7c
 8005056:	af00      	add	r7, sp, #0
 8005058:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800505a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005064:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005066:	68d9      	ldr	r1, [r3, #12]
 8005068:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	ea40 0301 	orr.w	r3, r0, r1
 8005070:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005074:	689a      	ldr	r2, [r3, #8]
 8005076:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005078:	691b      	ldr	r3, [r3, #16]
 800507a:	431a      	orrs	r2, r3
 800507c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	431a      	orrs	r2, r3
 8005082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005084:	69db      	ldr	r3, [r3, #28]
 8005086:	4313      	orrs	r3, r2
 8005088:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800508a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68db      	ldr	r3, [r3, #12]
 8005090:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005094:	f021 010c 	bic.w	r1, r1, #12
 8005098:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800509e:	430b      	orrs	r3, r1
 80050a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80050a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80050ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ae:	6999      	ldr	r1, [r3, #24]
 80050b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	ea40 0301 	orr.w	r3, r0, r1
 80050b8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	4bc5      	ldr	r3, [pc, #788]	; (80053d4 <UART_SetConfig+0x384>)
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d004      	beq.n	80050ce <UART_SetConfig+0x7e>
 80050c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4bc3      	ldr	r3, [pc, #780]	; (80053d8 <UART_SetConfig+0x388>)
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d103      	bne.n	80050d6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050ce:	f7fe fbbd 	bl	800384c <HAL_RCC_GetPCLK2Freq>
 80050d2:	6778      	str	r0, [r7, #116]	; 0x74
 80050d4:	e002      	b.n	80050dc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d6:	f7fe fba5 	bl	8003824 <HAL_RCC_GetPCLK1Freq>
 80050da:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	f040 80b6 	bne.w	8005254 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80050ea:	461c      	mov	r4, r3
 80050ec:	f04f 0500 	mov.w	r5, #0
 80050f0:	4622      	mov	r2, r4
 80050f2:	462b      	mov	r3, r5
 80050f4:	1891      	adds	r1, r2, r2
 80050f6:	6439      	str	r1, [r7, #64]	; 0x40
 80050f8:	415b      	adcs	r3, r3
 80050fa:	647b      	str	r3, [r7, #68]	; 0x44
 80050fc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005100:	1912      	adds	r2, r2, r4
 8005102:	eb45 0303 	adc.w	r3, r5, r3
 8005106:	f04f 0000 	mov.w	r0, #0
 800510a:	f04f 0100 	mov.w	r1, #0
 800510e:	00d9      	lsls	r1, r3, #3
 8005110:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005114:	00d0      	lsls	r0, r2, #3
 8005116:	4602      	mov	r2, r0
 8005118:	460b      	mov	r3, r1
 800511a:	1911      	adds	r1, r2, r4
 800511c:	6639      	str	r1, [r7, #96]	; 0x60
 800511e:	416b      	adcs	r3, r5
 8005120:	667b      	str	r3, [r7, #100]	; 0x64
 8005122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	461a      	mov	r2, r3
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	1891      	adds	r1, r2, r2
 800512e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005130:	415b      	adcs	r3, r3
 8005132:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005134:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005138:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800513c:	f7fb f856 	bl	80001ec <__aeabi_uldivmod>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	4ba5      	ldr	r3, [pc, #660]	; (80053dc <UART_SetConfig+0x38c>)
 8005146:	fba3 2302 	umull	r2, r3, r3, r2
 800514a:	095b      	lsrs	r3, r3, #5
 800514c:	011e      	lsls	r6, r3, #4
 800514e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005150:	461c      	mov	r4, r3
 8005152:	f04f 0500 	mov.w	r5, #0
 8005156:	4622      	mov	r2, r4
 8005158:	462b      	mov	r3, r5
 800515a:	1891      	adds	r1, r2, r2
 800515c:	6339      	str	r1, [r7, #48]	; 0x30
 800515e:	415b      	adcs	r3, r3
 8005160:	637b      	str	r3, [r7, #52]	; 0x34
 8005162:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005166:	1912      	adds	r2, r2, r4
 8005168:	eb45 0303 	adc.w	r3, r5, r3
 800516c:	f04f 0000 	mov.w	r0, #0
 8005170:	f04f 0100 	mov.w	r1, #0
 8005174:	00d9      	lsls	r1, r3, #3
 8005176:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800517a:	00d0      	lsls	r0, r2, #3
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	1911      	adds	r1, r2, r4
 8005182:	65b9      	str	r1, [r7, #88]	; 0x58
 8005184:	416b      	adcs	r3, r5
 8005186:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800518a:	685b      	ldr	r3, [r3, #4]
 800518c:	461a      	mov	r2, r3
 800518e:	f04f 0300 	mov.w	r3, #0
 8005192:	1891      	adds	r1, r2, r2
 8005194:	62b9      	str	r1, [r7, #40]	; 0x28
 8005196:	415b      	adcs	r3, r3
 8005198:	62fb      	str	r3, [r7, #44]	; 0x2c
 800519a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800519e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80051a2:	f7fb f823 	bl	80001ec <__aeabi_uldivmod>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4b8c      	ldr	r3, [pc, #560]	; (80053dc <UART_SetConfig+0x38c>)
 80051ac:	fba3 1302 	umull	r1, r3, r3, r2
 80051b0:	095b      	lsrs	r3, r3, #5
 80051b2:	2164      	movs	r1, #100	; 0x64
 80051b4:	fb01 f303 	mul.w	r3, r1, r3
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	3332      	adds	r3, #50	; 0x32
 80051be:	4a87      	ldr	r2, [pc, #540]	; (80053dc <UART_SetConfig+0x38c>)
 80051c0:	fba2 2303 	umull	r2, r3, r2, r3
 80051c4:	095b      	lsrs	r3, r3, #5
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80051cc:	441e      	add	r6, r3
 80051ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051d0:	4618      	mov	r0, r3
 80051d2:	f04f 0100 	mov.w	r1, #0
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	1894      	adds	r4, r2, r2
 80051dc:	623c      	str	r4, [r7, #32]
 80051de:	415b      	adcs	r3, r3
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24
 80051e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80051e6:	1812      	adds	r2, r2, r0
 80051e8:	eb41 0303 	adc.w	r3, r1, r3
 80051ec:	f04f 0400 	mov.w	r4, #0
 80051f0:	f04f 0500 	mov.w	r5, #0
 80051f4:	00dd      	lsls	r5, r3, #3
 80051f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80051fa:	00d4      	lsls	r4, r2, #3
 80051fc:	4622      	mov	r2, r4
 80051fe:	462b      	mov	r3, r5
 8005200:	1814      	adds	r4, r2, r0
 8005202:	653c      	str	r4, [r7, #80]	; 0x50
 8005204:	414b      	adcs	r3, r1
 8005206:	657b      	str	r3, [r7, #84]	; 0x54
 8005208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	461a      	mov	r2, r3
 800520e:	f04f 0300 	mov.w	r3, #0
 8005212:	1891      	adds	r1, r2, r2
 8005214:	61b9      	str	r1, [r7, #24]
 8005216:	415b      	adcs	r3, r3
 8005218:	61fb      	str	r3, [r7, #28]
 800521a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800521e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005222:	f7fa ffe3 	bl	80001ec <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4b6c      	ldr	r3, [pc, #432]	; (80053dc <UART_SetConfig+0x38c>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	; 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	3332      	adds	r3, #50	; 0x32
 800523e:	4a67      	ldr	r2, [pc, #412]	; (80053dc <UART_SetConfig+0x38c>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 0207 	and.w	r2, r3, #7
 800524a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4432      	add	r2, r6
 8005250:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005252:	e0b9      	b.n	80053c8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005254:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005256:	461c      	mov	r4, r3
 8005258:	f04f 0500 	mov.w	r5, #0
 800525c:	4622      	mov	r2, r4
 800525e:	462b      	mov	r3, r5
 8005260:	1891      	adds	r1, r2, r2
 8005262:	6139      	str	r1, [r7, #16]
 8005264:	415b      	adcs	r3, r3
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800526c:	1912      	adds	r2, r2, r4
 800526e:	eb45 0303 	adc.w	r3, r5, r3
 8005272:	f04f 0000 	mov.w	r0, #0
 8005276:	f04f 0100 	mov.w	r1, #0
 800527a:	00d9      	lsls	r1, r3, #3
 800527c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005280:	00d0      	lsls	r0, r2, #3
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	eb12 0804 	adds.w	r8, r2, r4
 800528a:	eb43 0905 	adc.w	r9, r3, r5
 800528e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	4618      	mov	r0, r3
 8005294:	f04f 0100 	mov.w	r1, #0
 8005298:	f04f 0200 	mov.w	r2, #0
 800529c:	f04f 0300 	mov.w	r3, #0
 80052a0:	008b      	lsls	r3, r1, #2
 80052a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80052a6:	0082      	lsls	r2, r0, #2
 80052a8:	4640      	mov	r0, r8
 80052aa:	4649      	mov	r1, r9
 80052ac:	f7fa ff9e 	bl	80001ec <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b49      	ldr	r3, [pc, #292]	; (80053dc <UART_SetConfig+0x38c>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011e      	lsls	r6, r3, #4
 80052be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052c0:	4618      	mov	r0, r3
 80052c2:	f04f 0100 	mov.w	r1, #0
 80052c6:	4602      	mov	r2, r0
 80052c8:	460b      	mov	r3, r1
 80052ca:	1894      	adds	r4, r2, r2
 80052cc:	60bc      	str	r4, [r7, #8]
 80052ce:	415b      	adcs	r3, r3
 80052d0:	60fb      	str	r3, [r7, #12]
 80052d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80052d6:	1812      	adds	r2, r2, r0
 80052d8:	eb41 0303 	adc.w	r3, r1, r3
 80052dc:	f04f 0400 	mov.w	r4, #0
 80052e0:	f04f 0500 	mov.w	r5, #0
 80052e4:	00dd      	lsls	r5, r3, #3
 80052e6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80052ea:	00d4      	lsls	r4, r2, #3
 80052ec:	4622      	mov	r2, r4
 80052ee:	462b      	mov	r3, r5
 80052f0:	1814      	adds	r4, r2, r0
 80052f2:	64bc      	str	r4, [r7, #72]	; 0x48
 80052f4:	414b      	adcs	r3, r1
 80052f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4618      	mov	r0, r3
 80052fe:	f04f 0100 	mov.w	r1, #0
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	f04f 0300 	mov.w	r3, #0
 800530a:	008b      	lsls	r3, r1, #2
 800530c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005310:	0082      	lsls	r2, r0, #2
 8005312:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005316:	f7fa ff69 	bl	80001ec <__aeabi_uldivmod>
 800531a:	4602      	mov	r2, r0
 800531c:	460b      	mov	r3, r1
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <UART_SetConfig+0x38c>)
 8005320:	fba3 1302 	umull	r1, r3, r3, r2
 8005324:	095b      	lsrs	r3, r3, #5
 8005326:	2164      	movs	r1, #100	; 0x64
 8005328:	fb01 f303 	mul.w	r3, r1, r3
 800532c:	1ad3      	subs	r3, r2, r3
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	3332      	adds	r3, #50	; 0x32
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <UART_SetConfig+0x38c>)
 8005334:	fba2 2303 	umull	r2, r3, r2, r3
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800533e:	441e      	add	r6, r3
 8005340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005342:	4618      	mov	r0, r3
 8005344:	f04f 0100 	mov.w	r1, #0
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	1894      	adds	r4, r2, r2
 800534e:	603c      	str	r4, [r7, #0]
 8005350:	415b      	adcs	r3, r3
 8005352:	607b      	str	r3, [r7, #4]
 8005354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005358:	1812      	adds	r2, r2, r0
 800535a:	eb41 0303 	adc.w	r3, r1, r3
 800535e:	f04f 0400 	mov.w	r4, #0
 8005362:	f04f 0500 	mov.w	r5, #0
 8005366:	00dd      	lsls	r5, r3, #3
 8005368:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800536c:	00d4      	lsls	r4, r2, #3
 800536e:	4622      	mov	r2, r4
 8005370:	462b      	mov	r3, r5
 8005372:	eb12 0a00 	adds.w	sl, r2, r0
 8005376:	eb43 0b01 	adc.w	fp, r3, r1
 800537a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4618      	mov	r0, r3
 8005380:	f04f 0100 	mov.w	r1, #0
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	008b      	lsls	r3, r1, #2
 800538e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005392:	0082      	lsls	r2, r0, #2
 8005394:	4650      	mov	r0, sl
 8005396:	4659      	mov	r1, fp
 8005398:	f7fa ff28 	bl	80001ec <__aeabi_uldivmod>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4b0e      	ldr	r3, [pc, #56]	; (80053dc <UART_SetConfig+0x38c>)
 80053a2:	fba3 1302 	umull	r1, r3, r3, r2
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	2164      	movs	r1, #100	; 0x64
 80053aa:	fb01 f303 	mul.w	r3, r1, r3
 80053ae:	1ad3      	subs	r3, r2, r3
 80053b0:	011b      	lsls	r3, r3, #4
 80053b2:	3332      	adds	r3, #50	; 0x32
 80053b4:	4a09      	ldr	r2, [pc, #36]	; (80053dc <UART_SetConfig+0x38c>)
 80053b6:	fba2 2303 	umull	r2, r3, r2, r3
 80053ba:	095b      	lsrs	r3, r3, #5
 80053bc:	f003 020f 	and.w	r2, r3, #15
 80053c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4432      	add	r2, r6
 80053c6:	609a      	str	r2, [r3, #8]
}
 80053c8:	bf00      	nop
 80053ca:	377c      	adds	r7, #124	; 0x7c
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	40011000 	.word	0x40011000
 80053d8:	40011400 	.word	0x40011400
 80053dc:	51eb851f 	.word	0x51eb851f

080053e0 <__libc_init_array>:
 80053e0:	b570      	push	{r4, r5, r6, lr}
 80053e2:	4d0d      	ldr	r5, [pc, #52]	; (8005418 <__libc_init_array+0x38>)
 80053e4:	4c0d      	ldr	r4, [pc, #52]	; (800541c <__libc_init_array+0x3c>)
 80053e6:	1b64      	subs	r4, r4, r5
 80053e8:	10a4      	asrs	r4, r4, #2
 80053ea:	2600      	movs	r6, #0
 80053ec:	42a6      	cmp	r6, r4
 80053ee:	d109      	bne.n	8005404 <__libc_init_array+0x24>
 80053f0:	4d0b      	ldr	r5, [pc, #44]	; (8005420 <__libc_init_array+0x40>)
 80053f2:	4c0c      	ldr	r4, [pc, #48]	; (8005424 <__libc_init_array+0x44>)
 80053f4:	f000 fd8c 	bl	8005f10 <_init>
 80053f8:	1b64      	subs	r4, r4, r5
 80053fa:	10a4      	asrs	r4, r4, #2
 80053fc:	2600      	movs	r6, #0
 80053fe:	42a6      	cmp	r6, r4
 8005400:	d105      	bne.n	800540e <__libc_init_array+0x2e>
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	f855 3b04 	ldr.w	r3, [r5], #4
 8005408:	4798      	blx	r3
 800540a:	3601      	adds	r6, #1
 800540c:	e7ee      	b.n	80053ec <__libc_init_array+0xc>
 800540e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005412:	4798      	blx	r3
 8005414:	3601      	adds	r6, #1
 8005416:	e7f2      	b.n	80053fe <__libc_init_array+0x1e>
 8005418:	08006320 	.word	0x08006320
 800541c:	08006320 	.word	0x08006320
 8005420:	08006320 	.word	0x08006320
 8005424:	08006324 	.word	0x08006324

08005428 <memset>:
 8005428:	4402      	add	r2, r0
 800542a:	4603      	mov	r3, r0
 800542c:	4293      	cmp	r3, r2
 800542e:	d100      	bne.n	8005432 <memset+0xa>
 8005430:	4770      	bx	lr
 8005432:	f803 1b01 	strb.w	r1, [r3], #1
 8005436:	e7f9      	b.n	800542c <memset+0x4>

08005438 <sinf>:
 8005438:	ee10 3a10 	vmov	r3, s0
 800543c:	b507      	push	{r0, r1, r2, lr}
 800543e:	4a1d      	ldr	r2, [pc, #116]	; (80054b4 <sinf+0x7c>)
 8005440:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005444:	4293      	cmp	r3, r2
 8005446:	dc05      	bgt.n	8005454 <sinf+0x1c>
 8005448:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80054b8 <sinf+0x80>
 800544c:	2000      	movs	r0, #0
 800544e:	f000 fc5b 	bl	8005d08 <__kernel_sinf>
 8005452:	e004      	b.n	800545e <sinf+0x26>
 8005454:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005458:	db04      	blt.n	8005464 <sinf+0x2c>
 800545a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800545e:	b003      	add	sp, #12
 8005460:	f85d fb04 	ldr.w	pc, [sp], #4
 8005464:	4668      	mov	r0, sp
 8005466:	f000 f829 	bl	80054bc <__ieee754_rem_pio2f>
 800546a:	f000 0003 	and.w	r0, r0, #3
 800546e:	2801      	cmp	r0, #1
 8005470:	d008      	beq.n	8005484 <sinf+0x4c>
 8005472:	2802      	cmp	r0, #2
 8005474:	d00d      	beq.n	8005492 <sinf+0x5a>
 8005476:	b9b0      	cbnz	r0, 80054a6 <sinf+0x6e>
 8005478:	eddd 0a01 	vldr	s1, [sp, #4]
 800547c:	ed9d 0a00 	vldr	s0, [sp]
 8005480:	2001      	movs	r0, #1
 8005482:	e7e4      	b.n	800544e <sinf+0x16>
 8005484:	eddd 0a01 	vldr	s1, [sp, #4]
 8005488:	ed9d 0a00 	vldr	s0, [sp]
 800548c:	f000 f952 	bl	8005734 <__kernel_cosf>
 8005490:	e7e5      	b.n	800545e <sinf+0x26>
 8005492:	eddd 0a01 	vldr	s1, [sp, #4]
 8005496:	ed9d 0a00 	vldr	s0, [sp]
 800549a:	2001      	movs	r0, #1
 800549c:	f000 fc34 	bl	8005d08 <__kernel_sinf>
 80054a0:	eeb1 0a40 	vneg.f32	s0, s0
 80054a4:	e7db      	b.n	800545e <sinf+0x26>
 80054a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80054aa:	ed9d 0a00 	vldr	s0, [sp]
 80054ae:	f000 f941 	bl	8005734 <__kernel_cosf>
 80054b2:	e7f5      	b.n	80054a0 <sinf+0x68>
 80054b4:	3f490fd8 	.word	0x3f490fd8
 80054b8:	00000000 	.word	0x00000000

080054bc <__ieee754_rem_pio2f>:
 80054bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054be:	ee10 6a10 	vmov	r6, s0
 80054c2:	4b8e      	ldr	r3, [pc, #568]	; (80056fc <__ieee754_rem_pio2f+0x240>)
 80054c4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80054c8:	429d      	cmp	r5, r3
 80054ca:	b087      	sub	sp, #28
 80054cc:	eef0 7a40 	vmov.f32	s15, s0
 80054d0:	4604      	mov	r4, r0
 80054d2:	dc05      	bgt.n	80054e0 <__ieee754_rem_pio2f+0x24>
 80054d4:	2300      	movs	r3, #0
 80054d6:	ed80 0a00 	vstr	s0, [r0]
 80054da:	6043      	str	r3, [r0, #4]
 80054dc:	2000      	movs	r0, #0
 80054de:	e01a      	b.n	8005516 <__ieee754_rem_pio2f+0x5a>
 80054e0:	4b87      	ldr	r3, [pc, #540]	; (8005700 <__ieee754_rem_pio2f+0x244>)
 80054e2:	429d      	cmp	r5, r3
 80054e4:	dc46      	bgt.n	8005574 <__ieee754_rem_pio2f+0xb8>
 80054e6:	2e00      	cmp	r6, #0
 80054e8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8005704 <__ieee754_rem_pio2f+0x248>
 80054ec:	4b86      	ldr	r3, [pc, #536]	; (8005708 <__ieee754_rem_pio2f+0x24c>)
 80054ee:	f025 050f 	bic.w	r5, r5, #15
 80054f2:	dd1f      	ble.n	8005534 <__ieee754_rem_pio2f+0x78>
 80054f4:	429d      	cmp	r5, r3
 80054f6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 80054fa:	d00e      	beq.n	800551a <__ieee754_rem_pio2f+0x5e>
 80054fc:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800570c <__ieee754_rem_pio2f+0x250>
 8005500:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005504:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005508:	ed80 0a00 	vstr	s0, [r0]
 800550c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005510:	2001      	movs	r0, #1
 8005512:	edc4 7a01 	vstr	s15, [r4, #4]
 8005516:	b007      	add	sp, #28
 8005518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800551a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005710 <__ieee754_rem_pio2f+0x254>
 800551e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005714 <__ieee754_rem_pio2f+0x258>
 8005522:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005526:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800552a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800552e:	edc0 6a00 	vstr	s13, [r0]
 8005532:	e7eb      	b.n	800550c <__ieee754_rem_pio2f+0x50>
 8005534:	429d      	cmp	r5, r3
 8005536:	ee77 7a80 	vadd.f32	s15, s15, s0
 800553a:	d00e      	beq.n	800555a <__ieee754_rem_pio2f+0x9e>
 800553c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800570c <__ieee754_rem_pio2f+0x250>
 8005540:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005544:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005548:	ed80 0a00 	vstr	s0, [r0]
 800554c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005550:	f04f 30ff 	mov.w	r0, #4294967295
 8005554:	edc4 7a01 	vstr	s15, [r4, #4]
 8005558:	e7dd      	b.n	8005516 <__ieee754_rem_pio2f+0x5a>
 800555a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005710 <__ieee754_rem_pio2f+0x254>
 800555e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005714 <__ieee754_rem_pio2f+0x258>
 8005562:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005566:	ee77 6a87 	vadd.f32	s13, s15, s14
 800556a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800556e:	edc0 6a00 	vstr	s13, [r0]
 8005572:	e7eb      	b.n	800554c <__ieee754_rem_pio2f+0x90>
 8005574:	4b68      	ldr	r3, [pc, #416]	; (8005718 <__ieee754_rem_pio2f+0x25c>)
 8005576:	429d      	cmp	r5, r3
 8005578:	dc72      	bgt.n	8005660 <__ieee754_rem_pio2f+0x1a4>
 800557a:	f000 fc0d 	bl	8005d98 <fabsf>
 800557e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800571c <__ieee754_rem_pio2f+0x260>
 8005582:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005586:	eee0 7a07 	vfma.f32	s15, s0, s14
 800558a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800558e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005592:	ee17 0a90 	vmov	r0, s15
 8005596:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005704 <__ieee754_rem_pio2f+0x248>
 800559a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800559e:	281f      	cmp	r0, #31
 80055a0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800570c <__ieee754_rem_pio2f+0x250>
 80055a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055a8:	eeb1 6a47 	vneg.f32	s12, s14
 80055ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 80055b0:	ee16 2a90 	vmov	r2, s13
 80055b4:	dc1c      	bgt.n	80055f0 <__ieee754_rem_pio2f+0x134>
 80055b6:	495a      	ldr	r1, [pc, #360]	; (8005720 <__ieee754_rem_pio2f+0x264>)
 80055b8:	1e47      	subs	r7, r0, #1
 80055ba:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80055be:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80055c2:	428b      	cmp	r3, r1
 80055c4:	d014      	beq.n	80055f0 <__ieee754_rem_pio2f+0x134>
 80055c6:	6022      	str	r2, [r4, #0]
 80055c8:	ed94 7a00 	vldr	s14, [r4]
 80055cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80055d0:	2e00      	cmp	r6, #0
 80055d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80055d6:	ed84 0a01 	vstr	s0, [r4, #4]
 80055da:	da9c      	bge.n	8005516 <__ieee754_rem_pio2f+0x5a>
 80055dc:	eeb1 7a47 	vneg.f32	s14, s14
 80055e0:	eeb1 0a40 	vneg.f32	s0, s0
 80055e4:	ed84 7a00 	vstr	s14, [r4]
 80055e8:	ed84 0a01 	vstr	s0, [r4, #4]
 80055ec:	4240      	negs	r0, r0
 80055ee:	e792      	b.n	8005516 <__ieee754_rem_pio2f+0x5a>
 80055f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80055f4:	15eb      	asrs	r3, r5, #23
 80055f6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80055fa:	2d08      	cmp	r5, #8
 80055fc:	dde3      	ble.n	80055c6 <__ieee754_rem_pio2f+0x10a>
 80055fe:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005710 <__ieee754_rem_pio2f+0x254>
 8005602:	eef0 6a40 	vmov.f32	s13, s0
 8005606:	eee6 6a27 	vfma.f32	s13, s12, s15
 800560a:	ee30 0a66 	vsub.f32	s0, s0, s13
 800560e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005612:	eddf 7a40 	vldr	s15, [pc, #256]	; 8005714 <__ieee754_rem_pio2f+0x258>
 8005616:	ee97 0a27 	vfnms.f32	s0, s14, s15
 800561a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800561e:	eef0 7a40 	vmov.f32	s15, s0
 8005622:	ee15 2a90 	vmov	r2, s11
 8005626:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800562a:	1a5b      	subs	r3, r3, r1
 800562c:	2b19      	cmp	r3, #25
 800562e:	dc04      	bgt.n	800563a <__ieee754_rem_pio2f+0x17e>
 8005630:	edc4 5a00 	vstr	s11, [r4]
 8005634:	eeb0 0a66 	vmov.f32	s0, s13
 8005638:	e7c6      	b.n	80055c8 <__ieee754_rem_pio2f+0x10c>
 800563a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005724 <__ieee754_rem_pio2f+0x268>
 800563e:	eeb0 0a66 	vmov.f32	s0, s13
 8005642:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005646:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800564a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005728 <__ieee754_rem_pio2f+0x26c>
 800564e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005652:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005656:	ee30 7a67 	vsub.f32	s14, s0, s15
 800565a:	ed84 7a00 	vstr	s14, [r4]
 800565e:	e7b3      	b.n	80055c8 <__ieee754_rem_pio2f+0x10c>
 8005660:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005664:	db06      	blt.n	8005674 <__ieee754_rem_pio2f+0x1b8>
 8005666:	ee70 7a40 	vsub.f32	s15, s0, s0
 800566a:	edc0 7a01 	vstr	s15, [r0, #4]
 800566e:	edc0 7a00 	vstr	s15, [r0]
 8005672:	e733      	b.n	80054dc <__ieee754_rem_pio2f+0x20>
 8005674:	15ea      	asrs	r2, r5, #23
 8005676:	3a86      	subs	r2, #134	; 0x86
 8005678:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800567c:	ee07 3a90 	vmov	s15, r3
 8005680:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005684:	eddf 6a29 	vldr	s13, [pc, #164]	; 800572c <__ieee754_rem_pio2f+0x270>
 8005688:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800568c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005690:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005694:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005698:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800569c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80056a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80056a4:	ed8d 7a04 	vstr	s14, [sp, #16]
 80056a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80056ac:	eef5 7a40 	vcmp.f32	s15, #0.0
 80056b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056b4:	edcd 7a05 	vstr	s15, [sp, #20]
 80056b8:	d11e      	bne.n	80056f8 <__ieee754_rem_pio2f+0x23c>
 80056ba:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80056be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80056c2:	bf14      	ite	ne
 80056c4:	2302      	movne	r3, #2
 80056c6:	2301      	moveq	r3, #1
 80056c8:	4919      	ldr	r1, [pc, #100]	; (8005730 <__ieee754_rem_pio2f+0x274>)
 80056ca:	9101      	str	r1, [sp, #4]
 80056cc:	2102      	movs	r1, #2
 80056ce:	9100      	str	r1, [sp, #0]
 80056d0:	a803      	add	r0, sp, #12
 80056d2:	4621      	mov	r1, r4
 80056d4:	f000 f88e 	bl	80057f4 <__kernel_rem_pio2f>
 80056d8:	2e00      	cmp	r6, #0
 80056da:	f6bf af1c 	bge.w	8005516 <__ieee754_rem_pio2f+0x5a>
 80056de:	edd4 7a00 	vldr	s15, [r4]
 80056e2:	eef1 7a67 	vneg.f32	s15, s15
 80056e6:	edc4 7a00 	vstr	s15, [r4]
 80056ea:	edd4 7a01 	vldr	s15, [r4, #4]
 80056ee:	eef1 7a67 	vneg.f32	s15, s15
 80056f2:	edc4 7a01 	vstr	s15, [r4, #4]
 80056f6:	e779      	b.n	80055ec <__ieee754_rem_pio2f+0x130>
 80056f8:	2303      	movs	r3, #3
 80056fa:	e7e5      	b.n	80056c8 <__ieee754_rem_pio2f+0x20c>
 80056fc:	3f490fd8 	.word	0x3f490fd8
 8005700:	4016cbe3 	.word	0x4016cbe3
 8005704:	3fc90f80 	.word	0x3fc90f80
 8005708:	3fc90fd0 	.word	0x3fc90fd0
 800570c:	37354443 	.word	0x37354443
 8005710:	37354400 	.word	0x37354400
 8005714:	2e85a308 	.word	0x2e85a308
 8005718:	43490f80 	.word	0x43490f80
 800571c:	3f22f984 	.word	0x3f22f984
 8005720:	08005f48 	.word	0x08005f48
 8005724:	2e85a300 	.word	0x2e85a300
 8005728:	248d3132 	.word	0x248d3132
 800572c:	43800000 	.word	0x43800000
 8005730:	08005fc8 	.word	0x08005fc8

08005734 <__kernel_cosf>:
 8005734:	ee10 3a10 	vmov	r3, s0
 8005738:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800573c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005740:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005744:	da05      	bge.n	8005752 <__kernel_cosf+0x1e>
 8005746:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800574a:	ee17 2a90 	vmov	r2, s15
 800574e:	2a00      	cmp	r2, #0
 8005750:	d03d      	beq.n	80057ce <__kernel_cosf+0x9a>
 8005752:	ee60 5a00 	vmul.f32	s11, s0, s0
 8005756:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80057d4 <__kernel_cosf+0xa0>
 800575a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80057d8 <__kernel_cosf+0xa4>
 800575e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80057dc <__kernel_cosf+0xa8>
 8005762:	4a1f      	ldr	r2, [pc, #124]	; (80057e0 <__kernel_cosf+0xac>)
 8005764:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005768:	4293      	cmp	r3, r2
 800576a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80057e4 <__kernel_cosf+0xb0>
 800576e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005772:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80057e8 <__kernel_cosf+0xb4>
 8005776:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800577a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80057ec <__kernel_cosf+0xb8>
 800577e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005782:	eeb0 7a66 	vmov.f32	s14, s13
 8005786:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800578a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800578e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8005792:	ee67 6a25 	vmul.f32	s13, s14, s11
 8005796:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800579a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800579e:	dc04      	bgt.n	80057aa <__kernel_cosf+0x76>
 80057a0:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80057a4:	ee36 0a47 	vsub.f32	s0, s12, s14
 80057a8:	4770      	bx	lr
 80057aa:	4a11      	ldr	r2, [pc, #68]	; (80057f0 <__kernel_cosf+0xbc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	bfda      	itte	le
 80057b0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80057b4:	ee06 3a90 	vmovle	s13, r3
 80057b8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80057bc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80057c0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80057c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80057c8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80057cc:	4770      	bx	lr
 80057ce:	eeb0 0a46 	vmov.f32	s0, s12
 80057d2:	4770      	bx	lr
 80057d4:	ad47d74e 	.word	0xad47d74e
 80057d8:	310f74f6 	.word	0x310f74f6
 80057dc:	3d2aaaab 	.word	0x3d2aaaab
 80057e0:	3e999999 	.word	0x3e999999
 80057e4:	b493f27c 	.word	0xb493f27c
 80057e8:	37d00d01 	.word	0x37d00d01
 80057ec:	bab60b61 	.word	0xbab60b61
 80057f0:	3f480000 	.word	0x3f480000

080057f4 <__kernel_rem_pio2f>:
 80057f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f8:	ed2d 8b04 	vpush	{d8-d9}
 80057fc:	b0d7      	sub	sp, #348	; 0x15c
 80057fe:	4616      	mov	r6, r2
 8005800:	4698      	mov	r8, r3
 8005802:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005804:	4bbb      	ldr	r3, [pc, #748]	; (8005af4 <__kernel_rem_pio2f+0x300>)
 8005806:	9001      	str	r0, [sp, #4]
 8005808:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 800580c:	1d33      	adds	r3, r6, #4
 800580e:	460d      	mov	r5, r1
 8005810:	f108 39ff 	add.w	r9, r8, #4294967295
 8005814:	db29      	blt.n	800586a <__kernel_rem_pio2f+0x76>
 8005816:	1ef1      	subs	r1, r6, #3
 8005818:	bf48      	it	mi
 800581a:	1d31      	addmi	r1, r6, #4
 800581c:	10c9      	asrs	r1, r1, #3
 800581e:	1c4c      	adds	r4, r1, #1
 8005820:	00e3      	lsls	r3, r4, #3
 8005822:	9302      	str	r3, [sp, #8]
 8005824:	9b65      	ldr	r3, [sp, #404]	; 0x194
 8005826:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8005b04 <__kernel_rem_pio2f+0x310>
 800582a:	eba1 0009 	sub.w	r0, r1, r9
 800582e:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 8005832:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 8005836:	eb07 0c09 	add.w	ip, r7, r9
 800583a:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 800583e:	2300      	movs	r3, #0
 8005840:	4563      	cmp	r3, ip
 8005842:	dd14      	ble.n	800586e <__kernel_rem_pio2f+0x7a>
 8005844:	ab1a      	add	r3, sp, #104	; 0x68
 8005846:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 800584a:	46cc      	mov	ip, r9
 800584c:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 8005850:	f1c8 0b01 	rsb	fp, r8, #1
 8005854:	eb0b 020c 	add.w	r2, fp, ip
 8005858:	4297      	cmp	r7, r2
 800585a:	db27      	blt.n	80058ac <__kernel_rem_pio2f+0xb8>
 800585c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005860:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005864:	4618      	mov	r0, r3
 8005866:	2200      	movs	r2, #0
 8005868:	e016      	b.n	8005898 <__kernel_rem_pio2f+0xa4>
 800586a:	2100      	movs	r1, #0
 800586c:	e7d7      	b.n	800581e <__kernel_rem_pio2f+0x2a>
 800586e:	42d8      	cmn	r0, r3
 8005870:	bf5d      	ittte	pl
 8005872:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 8005876:	ee07 2a90 	vmovpl	s15, r2
 800587a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800587e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005882:	ecea 7a01 	vstmia	sl!, {s15}
 8005886:	3301      	adds	r3, #1
 8005888:	e7da      	b.n	8005840 <__kernel_rem_pio2f+0x4c>
 800588a:	ecfe 6a01 	vldmia	lr!, {s13}
 800588e:	ed90 7a00 	vldr	s14, [r0]
 8005892:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005896:	3201      	adds	r2, #1
 8005898:	454a      	cmp	r2, r9
 800589a:	f1a0 0004 	sub.w	r0, r0, #4
 800589e:	ddf4      	ble.n	800588a <__kernel_rem_pio2f+0x96>
 80058a0:	ecea 7a01 	vstmia	sl!, {s15}
 80058a4:	3304      	adds	r3, #4
 80058a6:	f10c 0c01 	add.w	ip, ip, #1
 80058aa:	e7d3      	b.n	8005854 <__kernel_rem_pio2f+0x60>
 80058ac:	ab06      	add	r3, sp, #24
 80058ae:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 80058b2:	9304      	str	r3, [sp, #16]
 80058b4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 80058b6:	eddf 8a92 	vldr	s17, [pc, #584]	; 8005b00 <__kernel_rem_pio2f+0x30c>
 80058ba:	ed9f 9a90 	vldr	s18, [pc, #576]	; 8005afc <__kernel_rem_pio2f+0x308>
 80058be:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80058c2:	9303      	str	r3, [sp, #12]
 80058c4:	46ba      	mov	sl, r7
 80058c6:	ab56      	add	r3, sp, #344	; 0x158
 80058c8:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 80058cc:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 80058d0:	ab06      	add	r3, sp, #24
 80058d2:	4618      	mov	r0, r3
 80058d4:	4652      	mov	r2, sl
 80058d6:	2a00      	cmp	r2, #0
 80058d8:	dc51      	bgt.n	800597e <__kernel_rem_pio2f+0x18a>
 80058da:	4620      	mov	r0, r4
 80058dc:	9305      	str	r3, [sp, #20]
 80058de:	f000 faa5 	bl	8005e2c <scalbnf>
 80058e2:	eeb0 8a40 	vmov.f32	s16, s0
 80058e6:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80058ea:	ee28 0a00 	vmul.f32	s0, s16, s0
 80058ee:	f000 fa5b 	bl	8005da8 <floorf>
 80058f2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80058f6:	eea0 8a67 	vfms.f32	s16, s0, s15
 80058fa:	2c00      	cmp	r4, #0
 80058fc:	9b05      	ldr	r3, [sp, #20]
 80058fe:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005902:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005906:	edcd 7a00 	vstr	s15, [sp]
 800590a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800590e:	dd4b      	ble.n	80059a8 <__kernel_rem_pio2f+0x1b4>
 8005910:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005914:	aa06      	add	r2, sp, #24
 8005916:	f1c4 0e08 	rsb	lr, r4, #8
 800591a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800591e:	ee17 1a90 	vmov	r1, s15
 8005922:	fa42 f00e 	asr.w	r0, r2, lr
 8005926:	4401      	add	r1, r0
 8005928:	9100      	str	r1, [sp, #0]
 800592a:	fa00 f00e 	lsl.w	r0, r0, lr
 800592e:	a906      	add	r1, sp, #24
 8005930:	1a12      	subs	r2, r2, r0
 8005932:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8005936:	f1c4 0007 	rsb	r0, r4, #7
 800593a:	fa42 fb00 	asr.w	fp, r2, r0
 800593e:	f1bb 0f00 	cmp.w	fp, #0
 8005942:	dd43      	ble.n	80059cc <__kernel_rem_pio2f+0x1d8>
 8005944:	9a00      	ldr	r2, [sp, #0]
 8005946:	f04f 0e00 	mov.w	lr, #0
 800594a:	3201      	adds	r2, #1
 800594c:	9200      	str	r2, [sp, #0]
 800594e:	4670      	mov	r0, lr
 8005950:	45f2      	cmp	sl, lr
 8005952:	dc6c      	bgt.n	8005a2e <__kernel_rem_pio2f+0x23a>
 8005954:	2c00      	cmp	r4, #0
 8005956:	dd04      	ble.n	8005962 <__kernel_rem_pio2f+0x16e>
 8005958:	2c01      	cmp	r4, #1
 800595a:	d079      	beq.n	8005a50 <__kernel_rem_pio2f+0x25c>
 800595c:	2c02      	cmp	r4, #2
 800595e:	f000 8082 	beq.w	8005a66 <__kernel_rem_pio2f+0x272>
 8005962:	f1bb 0f02 	cmp.w	fp, #2
 8005966:	d131      	bne.n	80059cc <__kernel_rem_pio2f+0x1d8>
 8005968:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800596c:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005970:	b360      	cbz	r0, 80059cc <__kernel_rem_pio2f+0x1d8>
 8005972:	4620      	mov	r0, r4
 8005974:	f000 fa5a 	bl	8005e2c <scalbnf>
 8005978:	ee38 8a40 	vsub.f32	s16, s16, s0
 800597c:	e026      	b.n	80059cc <__kernel_rem_pio2f+0x1d8>
 800597e:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005982:	3a01      	subs	r2, #1
 8005984:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005988:	a942      	add	r1, sp, #264	; 0x108
 800598a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800598e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8005992:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005996:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800599a:	eca0 0a01 	vstmia	r0!, {s0}
 800599e:	ed9c 0a00 	vldr	s0, [ip]
 80059a2:	ee37 0a80 	vadd.f32	s0, s15, s0
 80059a6:	e796      	b.n	80058d6 <__kernel_rem_pio2f+0xe2>
 80059a8:	d107      	bne.n	80059ba <__kernel_rem_pio2f+0x1c6>
 80059aa:	f10a 32ff 	add.w	r2, sl, #4294967295
 80059ae:	a906      	add	r1, sp, #24
 80059b0:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80059b4:	ea4f 2b22 	mov.w	fp, r2, asr #8
 80059b8:	e7c1      	b.n	800593e <__kernel_rem_pio2f+0x14a>
 80059ba:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80059be:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80059c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c6:	da2f      	bge.n	8005a28 <__kernel_rem_pio2f+0x234>
 80059c8:	f04f 0b00 	mov.w	fp, #0
 80059cc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80059d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059d4:	f040 8098 	bne.w	8005b08 <__kernel_rem_pio2f+0x314>
 80059d8:	f10a 33ff 	add.w	r3, sl, #4294967295
 80059dc:	469c      	mov	ip, r3
 80059de:	2200      	movs	r2, #0
 80059e0:	45bc      	cmp	ip, r7
 80059e2:	da48      	bge.n	8005a76 <__kernel_rem_pio2f+0x282>
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d05f      	beq.n	8005aa8 <__kernel_rem_pio2f+0x2b4>
 80059e8:	aa06      	add	r2, sp, #24
 80059ea:	3c08      	subs	r4, #8
 80059ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80059f0:	2900      	cmp	r1, #0
 80059f2:	d07d      	beq.n	8005af0 <__kernel_rem_pio2f+0x2fc>
 80059f4:	4620      	mov	r0, r4
 80059f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80059fa:	9301      	str	r3, [sp, #4]
 80059fc:	f000 fa16 	bl	8005e2c <scalbnf>
 8005a00:	9b01      	ldr	r3, [sp, #4]
 8005a02:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8005b00 <__kernel_rem_pio2f+0x30c>
 8005a06:	4619      	mov	r1, r3
 8005a08:	2900      	cmp	r1, #0
 8005a0a:	f280 80af 	bge.w	8005b6c <__kernel_rem_pio2f+0x378>
 8005a0e:	4618      	mov	r0, r3
 8005a10:	2400      	movs	r4, #0
 8005a12:	2800      	cmp	r0, #0
 8005a14:	f2c0 80d0 	blt.w	8005bb8 <__kernel_rem_pio2f+0x3c4>
 8005a18:	a942      	add	r1, sp, #264	; 0x108
 8005a1a:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 8005a1e:	4a36      	ldr	r2, [pc, #216]	; (8005af8 <__kernel_rem_pio2f+0x304>)
 8005a20:	eddf 7a38 	vldr	s15, [pc, #224]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005a24:	2100      	movs	r1, #0
 8005a26:	e0bb      	b.n	8005ba0 <__kernel_rem_pio2f+0x3ac>
 8005a28:	f04f 0b02 	mov.w	fp, #2
 8005a2c:	e78a      	b.n	8005944 <__kernel_rem_pio2f+0x150>
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	b948      	cbnz	r0, 8005a46 <__kernel_rem_pio2f+0x252>
 8005a32:	b11a      	cbz	r2, 8005a3c <__kernel_rem_pio2f+0x248>
 8005a34:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	f10e 0e01 	add.w	lr, lr, #1
 8005a40:	3304      	adds	r3, #4
 8005a42:	4610      	mov	r0, r2
 8005a44:	e784      	b.n	8005950 <__kernel_rem_pio2f+0x15c>
 8005a46:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	e7f5      	b.n	8005a3c <__kernel_rem_pio2f+0x248>
 8005a50:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005a54:	ab06      	add	r3, sp, #24
 8005a56:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005a5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a5e:	aa06      	add	r2, sp, #24
 8005a60:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 8005a64:	e77d      	b.n	8005962 <__kernel_rem_pio2f+0x16e>
 8005a66:	f10a 3cff 	add.w	ip, sl, #4294967295
 8005a6a:	ab06      	add	r3, sp, #24
 8005a6c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005a70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a74:	e7f3      	b.n	8005a5e <__kernel_rem_pio2f+0x26a>
 8005a76:	a906      	add	r1, sp, #24
 8005a78:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 8005a7c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005a80:	4302      	orrs	r2, r0
 8005a82:	e7ad      	b.n	80059e0 <__kernel_rem_pio2f+0x1ec>
 8005a84:	3001      	adds	r0, #1
 8005a86:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d0fa      	beq.n	8005a84 <__kernel_rem_pio2f+0x290>
 8005a8e:	a91a      	add	r1, sp, #104	; 0x68
 8005a90:	eb0a 0208 	add.w	r2, sl, r8
 8005a94:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8005a98:	f10a 0301 	add.w	r3, sl, #1
 8005a9c:	eb0a 0100 	add.w	r1, sl, r0
 8005aa0:	4299      	cmp	r1, r3
 8005aa2:	da04      	bge.n	8005aae <__kernel_rem_pio2f+0x2ba>
 8005aa4:	468a      	mov	sl, r1
 8005aa6:	e70e      	b.n	80058c6 <__kernel_rem_pio2f+0xd2>
 8005aa8:	9b04      	ldr	r3, [sp, #16]
 8005aaa:	2001      	movs	r0, #1
 8005aac:	e7eb      	b.n	8005a86 <__kernel_rem_pio2f+0x292>
 8005aae:	9803      	ldr	r0, [sp, #12]
 8005ab0:	f8dd c004 	ldr.w	ip, [sp, #4]
 8005ab4:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8005ab8:	9000      	str	r0, [sp, #0]
 8005aba:	ee07 0a90 	vmov	s15, r0
 8005abe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ac2:	2000      	movs	r0, #0
 8005ac4:	ece2 7a01 	vstmia	r2!, {s15}
 8005ac8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005acc:	4696      	mov	lr, r2
 8005ace:	4548      	cmp	r0, r9
 8005ad0:	dd06      	ble.n	8005ae0 <__kernel_rem_pio2f+0x2ec>
 8005ad2:	a842      	add	r0, sp, #264	; 0x108
 8005ad4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ad8:	edc0 7a00 	vstr	s15, [r0]
 8005adc:	3301      	adds	r3, #1
 8005ade:	e7df      	b.n	8005aa0 <__kernel_rem_pio2f+0x2ac>
 8005ae0:	ecfc 6a01 	vldmia	ip!, {s13}
 8005ae4:	ed3e 7a01 	vldmdb	lr!, {s14}
 8005ae8:	3001      	adds	r0, #1
 8005aea:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005aee:	e7ee      	b.n	8005ace <__kernel_rem_pio2f+0x2da>
 8005af0:	3b01      	subs	r3, #1
 8005af2:	e779      	b.n	80059e8 <__kernel_rem_pio2f+0x1f4>
 8005af4:	0800630c 	.word	0x0800630c
 8005af8:	080062e0 	.word	0x080062e0
 8005afc:	43800000 	.word	0x43800000
 8005b00:	3b800000 	.word	0x3b800000
 8005b04:	00000000 	.word	0x00000000
 8005b08:	9b02      	ldr	r3, [sp, #8]
 8005b0a:	eeb0 0a48 	vmov.f32	s0, s16
 8005b0e:	1b98      	subs	r0, r3, r6
 8005b10:	f000 f98c 	bl	8005e2c <scalbnf>
 8005b14:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8005afc <__kernel_rem_pio2f+0x308>
 8005b18:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8005b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b20:	db1b      	blt.n	8005b5a <__kernel_rem_pio2f+0x366>
 8005b22:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8005b00 <__kernel_rem_pio2f+0x30c>
 8005b26:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005b2a:	aa06      	add	r2, sp, #24
 8005b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b30:	a906      	add	r1, sp, #24
 8005b32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b36:	3408      	adds	r4, #8
 8005b38:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8005b3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005b40:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005b44:	ee10 3a10 	vmov	r3, s0
 8005b48:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005b4c:	ee17 2a90 	vmov	r2, s15
 8005b50:	f10a 0301 	add.w	r3, sl, #1
 8005b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005b58:	e74c      	b.n	80059f4 <__kernel_rem_pio2f+0x200>
 8005b5a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005b5e:	aa06      	add	r2, sp, #24
 8005b60:	ee10 3a10 	vmov	r3, s0
 8005b64:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 8005b68:	4653      	mov	r3, sl
 8005b6a:	e743      	b.n	80059f4 <__kernel_rem_pio2f+0x200>
 8005b6c:	aa42      	add	r2, sp, #264	; 0x108
 8005b6e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005b72:	aa06      	add	r2, sp, #24
 8005b74:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8005b78:	9201      	str	r2, [sp, #4]
 8005b7a:	ee07 2a90 	vmov	s15, r2
 8005b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b82:	3901      	subs	r1, #1
 8005b84:	ee67 7a80 	vmul.f32	s15, s15, s0
 8005b88:	ee20 0a07 	vmul.f32	s0, s0, s14
 8005b8c:	edc0 7a00 	vstr	s15, [r0]
 8005b90:	e73a      	b.n	8005a08 <__kernel_rem_pio2f+0x214>
 8005b92:	ecf2 6a01 	vldmia	r2!, {s13}
 8005b96:	ecb6 7a01 	vldmia	r6!, {s14}
 8005b9a:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005b9e:	3101      	adds	r1, #1
 8005ba0:	42b9      	cmp	r1, r7
 8005ba2:	dc01      	bgt.n	8005ba8 <__kernel_rem_pio2f+0x3b4>
 8005ba4:	428c      	cmp	r4, r1
 8005ba6:	daf4      	bge.n	8005b92 <__kernel_rem_pio2f+0x39e>
 8005ba8:	aa56      	add	r2, sp, #344	; 0x158
 8005baa:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8005bae:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8005bb2:	3801      	subs	r0, #1
 8005bb4:	3401      	adds	r4, #1
 8005bb6:	e72c      	b.n	8005a12 <__kernel_rem_pio2f+0x21e>
 8005bb8:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005bba:	2a02      	cmp	r2, #2
 8005bbc:	dc0a      	bgt.n	8005bd4 <__kernel_rem_pio2f+0x3e0>
 8005bbe:	2a00      	cmp	r2, #0
 8005bc0:	dc61      	bgt.n	8005c86 <__kernel_rem_pio2f+0x492>
 8005bc2:	d03c      	beq.n	8005c3e <__kernel_rem_pio2f+0x44a>
 8005bc4:	9b00      	ldr	r3, [sp, #0]
 8005bc6:	f003 0007 	and.w	r0, r3, #7
 8005bca:	b057      	add	sp, #348	; 0x15c
 8005bcc:	ecbd 8b04 	vpop	{d8-d9}
 8005bd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bd4:	9a64      	ldr	r2, [sp, #400]	; 0x190
 8005bd6:	2a03      	cmp	r2, #3
 8005bd8:	d1f4      	bne.n	8005bc4 <__kernel_rem_pio2f+0x3d0>
 8005bda:	aa2e      	add	r2, sp, #184	; 0xb8
 8005bdc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005be0:	4608      	mov	r0, r1
 8005be2:	461c      	mov	r4, r3
 8005be4:	2c00      	cmp	r4, #0
 8005be6:	f1a0 0004 	sub.w	r0, r0, #4
 8005bea:	dc59      	bgt.n	8005ca0 <__kernel_rem_pio2f+0x4ac>
 8005bec:	4618      	mov	r0, r3
 8005bee:	2801      	cmp	r0, #1
 8005bf0:	f1a1 0104 	sub.w	r1, r1, #4
 8005bf4:	dc64      	bgt.n	8005cc0 <__kernel_rem_pio2f+0x4cc>
 8005bf6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	dc70      	bgt.n	8005ce0 <__kernel_rem_pio2f+0x4ec>
 8005bfe:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 8005c02:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 8005c06:	f1bb 0f00 	cmp.w	fp, #0
 8005c0a:	d172      	bne.n	8005cf2 <__kernel_rem_pio2f+0x4fe>
 8005c0c:	edc5 6a00 	vstr	s13, [r5]
 8005c10:	ed85 7a01 	vstr	s14, [r5, #4]
 8005c14:	edc5 7a02 	vstr	s15, [r5, #8]
 8005c18:	e7d4      	b.n	8005bc4 <__kernel_rem_pio2f+0x3d0>
 8005c1a:	aa2e      	add	r2, sp, #184	; 0xb8
 8005c1c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005c20:	ed91 7a00 	vldr	s14, [r1]
 8005c24:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	daf5      	bge.n	8005c1a <__kernel_rem_pio2f+0x426>
 8005c2e:	f1bb 0f00 	cmp.w	fp, #0
 8005c32:	d001      	beq.n	8005c38 <__kernel_rem_pio2f+0x444>
 8005c34:	eef1 7a67 	vneg.f32	s15, s15
 8005c38:	edc5 7a00 	vstr	s15, [r5]
 8005c3c:	e7c2      	b.n	8005bc4 <__kernel_rem_pio2f+0x3d0>
 8005c3e:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005c42:	e7f2      	b.n	8005c2a <__kernel_rem_pio2f+0x436>
 8005c44:	aa2e      	add	r2, sp, #184	; 0xb8
 8005c46:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 8005c4a:	edd0 7a00 	vldr	s15, [r0]
 8005c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c52:	3901      	subs	r1, #1
 8005c54:	2900      	cmp	r1, #0
 8005c56:	daf5      	bge.n	8005c44 <__kernel_rem_pio2f+0x450>
 8005c58:	f1bb 0f00 	cmp.w	fp, #0
 8005c5c:	d017      	beq.n	8005c8e <__kernel_rem_pio2f+0x49a>
 8005c5e:	eef1 7a47 	vneg.f32	s15, s14
 8005c62:	edc5 7a00 	vstr	s15, [r5]
 8005c66:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 8005c6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005c6e:	a82f      	add	r0, sp, #188	; 0xbc
 8005c70:	2101      	movs	r1, #1
 8005c72:	428b      	cmp	r3, r1
 8005c74:	da0e      	bge.n	8005c94 <__kernel_rem_pio2f+0x4a0>
 8005c76:	f1bb 0f00 	cmp.w	fp, #0
 8005c7a:	d001      	beq.n	8005c80 <__kernel_rem_pio2f+0x48c>
 8005c7c:	eef1 7a67 	vneg.f32	s15, s15
 8005c80:	edc5 7a01 	vstr	s15, [r5, #4]
 8005c84:	e79e      	b.n	8005bc4 <__kernel_rem_pio2f+0x3d0>
 8005c86:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 8005b04 <__kernel_rem_pio2f+0x310>
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	e7e2      	b.n	8005c54 <__kernel_rem_pio2f+0x460>
 8005c8e:	eef0 7a47 	vmov.f32	s15, s14
 8005c92:	e7e6      	b.n	8005c62 <__kernel_rem_pio2f+0x46e>
 8005c94:	ecb0 7a01 	vldmia	r0!, {s14}
 8005c98:	3101      	adds	r1, #1
 8005c9a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005c9e:	e7e8      	b.n	8005c72 <__kernel_rem_pio2f+0x47e>
 8005ca0:	edd0 7a00 	vldr	s15, [r0]
 8005ca4:	edd0 6a01 	vldr	s13, [r0, #4]
 8005ca8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005cac:	3c01      	subs	r4, #1
 8005cae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cb2:	ed80 7a00 	vstr	s14, [r0]
 8005cb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cba:	edc0 7a01 	vstr	s15, [r0, #4]
 8005cbe:	e791      	b.n	8005be4 <__kernel_rem_pio2f+0x3f0>
 8005cc0:	edd1 7a00 	vldr	s15, [r1]
 8005cc4:	edd1 6a01 	vldr	s13, [r1, #4]
 8005cc8:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8005ccc:	3801      	subs	r0, #1
 8005cce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cd2:	ed81 7a00 	vstr	s14, [r1]
 8005cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005cda:	edc1 7a01 	vstr	s15, [r1, #4]
 8005cde:	e786      	b.n	8005bee <__kernel_rem_pio2f+0x3fa>
 8005ce0:	aa2e      	add	r2, sp, #184	; 0xb8
 8005ce2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 8005ce6:	ed91 7a00 	vldr	s14, [r1]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005cf0:	e783      	b.n	8005bfa <__kernel_rem_pio2f+0x406>
 8005cf2:	eef1 6a66 	vneg.f32	s13, s13
 8005cf6:	eeb1 7a47 	vneg.f32	s14, s14
 8005cfa:	edc5 6a00 	vstr	s13, [r5]
 8005cfe:	ed85 7a01 	vstr	s14, [r5, #4]
 8005d02:	eef1 7a67 	vneg.f32	s15, s15
 8005d06:	e785      	b.n	8005c14 <__kernel_rem_pio2f+0x420>

08005d08 <__kernel_sinf>:
 8005d08:	ee10 3a10 	vmov	r3, s0
 8005d0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d10:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005d14:	da04      	bge.n	8005d20 <__kernel_sinf+0x18>
 8005d16:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005d1a:	ee17 3a90 	vmov	r3, s15
 8005d1e:	b35b      	cbz	r3, 8005d78 <__kernel_sinf+0x70>
 8005d20:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005d24:	eddf 7a15 	vldr	s15, [pc, #84]	; 8005d7c <__kernel_sinf+0x74>
 8005d28:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8005d80 <__kernel_sinf+0x78>
 8005d2c:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005d30:	eddf 7a14 	vldr	s15, [pc, #80]	; 8005d84 <__kernel_sinf+0x7c>
 8005d34:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d38:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8005d88 <__kernel_sinf+0x80>
 8005d3c:	eea7 6a87 	vfma.f32	s12, s15, s14
 8005d40:	eddf 7a12 	vldr	s15, [pc, #72]	; 8005d8c <__kernel_sinf+0x84>
 8005d44:	ee60 6a07 	vmul.f32	s13, s0, s14
 8005d48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8005d4c:	b930      	cbnz	r0, 8005d5c <__kernel_sinf+0x54>
 8005d4e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8005d90 <__kernel_sinf+0x88>
 8005d52:	eea7 6a27 	vfma.f32	s12, s14, s15
 8005d56:	eea6 0a26 	vfma.f32	s0, s12, s13
 8005d5a:	4770      	bx	lr
 8005d5c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8005d60:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8005d64:	eee0 7a86 	vfma.f32	s15, s1, s12
 8005d68:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8005d6c:	eddf 7a09 	vldr	s15, [pc, #36]	; 8005d94 <__kernel_sinf+0x8c>
 8005d70:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8005d74:	ee30 0a60 	vsub.f32	s0, s0, s1
 8005d78:	4770      	bx	lr
 8005d7a:	bf00      	nop
 8005d7c:	2f2ec9d3 	.word	0x2f2ec9d3
 8005d80:	b2d72f34 	.word	0xb2d72f34
 8005d84:	3638ef1b 	.word	0x3638ef1b
 8005d88:	b9500d01 	.word	0xb9500d01
 8005d8c:	3c088889 	.word	0x3c088889
 8005d90:	be2aaaab 	.word	0xbe2aaaab
 8005d94:	3e2aaaab 	.word	0x3e2aaaab

08005d98 <fabsf>:
 8005d98:	ee10 3a10 	vmov	r3, s0
 8005d9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005da0:	ee00 3a10 	vmov	s0, r3
 8005da4:	4770      	bx	lr
	...

08005da8 <floorf>:
 8005da8:	ee10 3a10 	vmov	r3, s0
 8005dac:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005db0:	3a7f      	subs	r2, #127	; 0x7f
 8005db2:	2a16      	cmp	r2, #22
 8005db4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8005db8:	dc2a      	bgt.n	8005e10 <floorf+0x68>
 8005dba:	2a00      	cmp	r2, #0
 8005dbc:	da11      	bge.n	8005de2 <floorf+0x3a>
 8005dbe:	eddf 7a18 	vldr	s15, [pc, #96]	; 8005e20 <floorf+0x78>
 8005dc2:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005dc6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005dca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dce:	dd05      	ble.n	8005ddc <floorf+0x34>
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	da23      	bge.n	8005e1c <floorf+0x74>
 8005dd4:	4a13      	ldr	r2, [pc, #76]	; (8005e24 <floorf+0x7c>)
 8005dd6:	2900      	cmp	r1, #0
 8005dd8:	bf18      	it	ne
 8005dda:	4613      	movne	r3, r2
 8005ddc:	ee00 3a10 	vmov	s0, r3
 8005de0:	4770      	bx	lr
 8005de2:	4911      	ldr	r1, [pc, #68]	; (8005e28 <floorf+0x80>)
 8005de4:	4111      	asrs	r1, r2
 8005de6:	420b      	tst	r3, r1
 8005de8:	d0fa      	beq.n	8005de0 <floorf+0x38>
 8005dea:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8005e20 <floorf+0x78>
 8005dee:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005df2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8005df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005dfa:	ddef      	ble.n	8005ddc <floorf+0x34>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	bfbe      	ittt	lt
 8005e00:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8005e04:	fa40 f202 	asrlt.w	r2, r0, r2
 8005e08:	189b      	addlt	r3, r3, r2
 8005e0a:	ea23 0301 	bic.w	r3, r3, r1
 8005e0e:	e7e5      	b.n	8005ddc <floorf+0x34>
 8005e10:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8005e14:	d3e4      	bcc.n	8005de0 <floorf+0x38>
 8005e16:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005e1a:	4770      	bx	lr
 8005e1c:	2300      	movs	r3, #0
 8005e1e:	e7dd      	b.n	8005ddc <floorf+0x34>
 8005e20:	7149f2ca 	.word	0x7149f2ca
 8005e24:	bf800000 	.word	0xbf800000
 8005e28:	007fffff 	.word	0x007fffff

08005e2c <scalbnf>:
 8005e2c:	ee10 3a10 	vmov	r3, s0
 8005e30:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8005e34:	d025      	beq.n	8005e82 <scalbnf+0x56>
 8005e36:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8005e3a:	d302      	bcc.n	8005e42 <scalbnf+0x16>
 8005e3c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8005e40:	4770      	bx	lr
 8005e42:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8005e46:	d122      	bne.n	8005e8e <scalbnf+0x62>
 8005e48:	4b2a      	ldr	r3, [pc, #168]	; (8005ef4 <scalbnf+0xc8>)
 8005e4a:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8005ef8 <scalbnf+0xcc>
 8005e4e:	4298      	cmp	r0, r3
 8005e50:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e54:	db16      	blt.n	8005e84 <scalbnf+0x58>
 8005e56:	ee10 3a10 	vmov	r3, s0
 8005e5a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8005e5e:	3a19      	subs	r2, #25
 8005e60:	4402      	add	r2, r0
 8005e62:	2afe      	cmp	r2, #254	; 0xfe
 8005e64:	dd15      	ble.n	8005e92 <scalbnf+0x66>
 8005e66:	ee10 3a10 	vmov	r3, s0
 8005e6a:	eddf 7a24 	vldr	s15, [pc, #144]	; 8005efc <scalbnf+0xd0>
 8005e6e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8005f00 <scalbnf+0xd4>
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	eeb0 7a67 	vmov.f32	s14, s15
 8005e78:	bfb8      	it	lt
 8005e7a:	eef0 7a66 	vmovlt.f32	s15, s13
 8005e7e:	ee27 0a27 	vmul.f32	s0, s14, s15
 8005e82:	4770      	bx	lr
 8005e84:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005f04 <scalbnf+0xd8>
 8005e88:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e8c:	4770      	bx	lr
 8005e8e:	0dd2      	lsrs	r2, r2, #23
 8005e90:	e7e6      	b.n	8005e60 <scalbnf+0x34>
 8005e92:	2a00      	cmp	r2, #0
 8005e94:	dd06      	ble.n	8005ea4 <scalbnf+0x78>
 8005e96:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005e9a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005e9e:	ee00 3a10 	vmov	s0, r3
 8005ea2:	4770      	bx	lr
 8005ea4:	f112 0f16 	cmn.w	r2, #22
 8005ea8:	da1a      	bge.n	8005ee0 <scalbnf+0xb4>
 8005eaa:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005eae:	4298      	cmp	r0, r3
 8005eb0:	ee10 3a10 	vmov	r3, s0
 8005eb4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005eb8:	dd0a      	ble.n	8005ed0 <scalbnf+0xa4>
 8005eba:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8005efc <scalbnf+0xd0>
 8005ebe:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8005f00 <scalbnf+0xd4>
 8005ec2:	eef0 7a40 	vmov.f32	s15, s0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	bf18      	it	ne
 8005eca:	eeb0 0a47 	vmovne.f32	s0, s14
 8005ece:	e7db      	b.n	8005e88 <scalbnf+0x5c>
 8005ed0:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8005f04 <scalbnf+0xd8>
 8005ed4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8005f08 <scalbnf+0xdc>
 8005ed8:	eef0 7a40 	vmov.f32	s15, s0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	e7f3      	b.n	8005ec8 <scalbnf+0x9c>
 8005ee0:	3219      	adds	r2, #25
 8005ee2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ee6:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8005eea:	eddf 7a08 	vldr	s15, [pc, #32]	; 8005f0c <scalbnf+0xe0>
 8005eee:	ee07 3a10 	vmov	s14, r3
 8005ef2:	e7c4      	b.n	8005e7e <scalbnf+0x52>
 8005ef4:	ffff3cb0 	.word	0xffff3cb0
 8005ef8:	4c000000 	.word	0x4c000000
 8005efc:	7149f2ca 	.word	0x7149f2ca
 8005f00:	f149f2ca 	.word	0xf149f2ca
 8005f04:	0da24260 	.word	0x0da24260
 8005f08:	8da24260 	.word	0x8da24260
 8005f0c:	33000000 	.word	0x33000000

08005f10 <_init>:
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	bf00      	nop
 8005f14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f16:	bc08      	pop	{r3}
 8005f18:	469e      	mov	lr, r3
 8005f1a:	4770      	bx	lr

08005f1c <_fini>:
 8005f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f1e:	bf00      	nop
 8005f20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f22:	bc08      	pop	{r3}
 8005f24:	469e      	mov	lr, r3
 8005f26:	4770      	bx	lr
