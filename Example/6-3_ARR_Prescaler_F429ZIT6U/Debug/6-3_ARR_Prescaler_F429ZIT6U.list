
6-3_ARR_Prescaler_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000056b8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005948  08005948  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005948  08005948  00015948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005950  08005950  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005950  08005950  00015950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005958  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000284  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015740  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b41  00000000  00000000  000357e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010d0  00000000  00000000  00038328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fd0  00000000  00000000  000393f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002574f  00000000  00000000  0003a3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015350  00000000  00000000  0005fb17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddf45  00000000  00000000  00074e67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152dac  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004dbc  00000000  00000000  00152e00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08005850 	.word	0x08005850

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	08005850 	.word	0x08005850

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b08c      	sub	sp, #48	; 0x30
 800058c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058e:	f107 031c 	add.w	r3, r7, #28
 8000592:	2200      	movs	r2, #0
 8000594:	601a      	str	r2, [r3, #0]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	609a      	str	r2, [r3, #8]
 800059a:	60da      	str	r2, [r3, #12]
 800059c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	61bb      	str	r3, [r7, #24]
 80005a2:	4b52      	ldr	r3, [pc, #328]	; (80006ec <MX_GPIO_Init+0x164>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a6:	4a51      	ldr	r2, [pc, #324]	; (80006ec <MX_GPIO_Init+0x164>)
 80005a8:	f043 0310 	orr.w	r3, r3, #16
 80005ac:	6313      	str	r3, [r2, #48]	; 0x30
 80005ae:	4b4f      	ldr	r3, [pc, #316]	; (80006ec <MX_GPIO_Init+0x164>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b2:	f003 0310 	and.w	r3, r3, #16
 80005b6:	61bb      	str	r3, [r7, #24]
 80005b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
 80005be:	4b4b      	ldr	r3, [pc, #300]	; (80006ec <MX_GPIO_Init+0x164>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	4a4a      	ldr	r2, [pc, #296]	; (80006ec <MX_GPIO_Init+0x164>)
 80005c4:	f043 0320 	orr.w	r3, r3, #32
 80005c8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ca:	4b48      	ldr	r3, [pc, #288]	; (80006ec <MX_GPIO_Init+0x164>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ce:	f003 0320 	and.w	r3, r3, #32
 80005d2:	617b      	str	r3, [r7, #20]
 80005d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	613b      	str	r3, [r7, #16]
 80005da:	4b44      	ldr	r3, [pc, #272]	; (80006ec <MX_GPIO_Init+0x164>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	4a43      	ldr	r2, [pc, #268]	; (80006ec <MX_GPIO_Init+0x164>)
 80005e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e4:	6313      	str	r3, [r2, #48]	; 0x30
 80005e6:	4b41      	ldr	r3, [pc, #260]	; (80006ec <MX_GPIO_Init+0x164>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ee:	613b      	str	r3, [r7, #16]
 80005f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	2300      	movs	r3, #0
 80005f4:	60fb      	str	r3, [r7, #12]
 80005f6:	4b3d      	ldr	r3, [pc, #244]	; (80006ec <MX_GPIO_Init+0x164>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <MX_GPIO_Init+0x164>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	6313      	str	r3, [r2, #48]	; 0x30
 8000602:	4b3a      	ldr	r3, [pc, #232]	; (80006ec <MX_GPIO_Init+0x164>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	2300      	movs	r3, #0
 8000610:	60bb      	str	r3, [r7, #8]
 8000612:	4b36      	ldr	r3, [pc, #216]	; (80006ec <MX_GPIO_Init+0x164>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	4a35      	ldr	r2, [pc, #212]	; (80006ec <MX_GPIO_Init+0x164>)
 8000618:	f043 0302 	orr.w	r3, r3, #2
 800061c:	6313      	str	r3, [r2, #48]	; 0x30
 800061e:	4b33      	ldr	r3, [pc, #204]	; (80006ec <MX_GPIO_Init+0x164>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	f003 0302 	and.w	r3, r3, #2
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062a:	2300      	movs	r3, #0
 800062c:	607b      	str	r3, [r7, #4]
 800062e:	4b2f      	ldr	r3, [pc, #188]	; (80006ec <MX_GPIO_Init+0x164>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a2e      	ldr	r2, [pc, #184]	; (80006ec <MX_GPIO_Init+0x164>)
 8000634:	f043 0308 	orr.w	r3, r3, #8
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b2c      	ldr	r3, [pc, #176]	; (80006ec <MX_GPIO_Init+0x164>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0308 	and.w	r3, r3, #8
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000646:	2300      	movs	r3, #0
 8000648:	603b      	str	r3, [r7, #0]
 800064a:	4b28      	ldr	r3, [pc, #160]	; (80006ec <MX_GPIO_Init+0x164>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	4a27      	ldr	r2, [pc, #156]	; (80006ec <MX_GPIO_Init+0x164>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	6313      	str	r3, [r2, #48]	; 0x30
 8000656:	4b25      	ldr	r3, [pc, #148]	; (80006ec <MX_GPIO_Init+0x164>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	603b      	str	r3, [r7, #0]
 8000660:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	f244 0181 	movw	r1, #16513	; 0x4081
 8000668:	4821      	ldr	r0, [pc, #132]	; (80006f0 <MX_GPIO_Init+0x168>)
 800066a:	f001 fb6b 	bl	8001d44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800066e:	2308      	movs	r3, #8
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000672:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000676:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000678:	2301      	movs	r3, #1
 800067a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800067c:	f107 031c 	add.w	r3, r7, #28
 8000680:	4619      	mov	r1, r3
 8000682:	481c      	ldr	r0, [pc, #112]	; (80006f4 <MX_GPIO_Init+0x16c>)
 8000684:	f001 f9b2 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000688:	f244 0381 	movw	r3, #16513	; 0x4081
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800068e:	2301      	movs	r3, #1
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000696:	2300      	movs	r3, #0
 8000698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	4619      	mov	r1, r3
 80006a0:	4813      	ldr	r0, [pc, #76]	; (80006f0 <MX_GPIO_Init+0x168>)
 80006a2:	f001 f9a3 	bl	80019ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80006a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80006b2:	2302      	movs	r3, #2
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	480e      	ldr	r0, [pc, #56]	; (80006f8 <MX_GPIO_Init+0x170>)
 80006be:	f001 f995 	bl	80019ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80006c2:	2200      	movs	r2, #0
 80006c4:	2100      	movs	r1, #0
 80006c6:	2009      	movs	r0, #9
 80006c8:	f001 f8c7 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80006cc:	2009      	movs	r0, #9
 80006ce:	f001 f8e0 	bl	8001892 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2100      	movs	r1, #0
 80006d6:	2028      	movs	r0, #40	; 0x28
 80006d8:	f001 f8bf 	bl	800185a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80006dc:	2028      	movs	r0, #40	; 0x28
 80006de:	f001 f8d8 	bl	8001892 <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3730      	adds	r7, #48	; 0x30
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40021000 	.word	0x40021000
 80006f8:	40020c00 	.word	0x40020c00

080006fc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000700:	4b1b      	ldr	r3, [pc, #108]	; (8000770 <MX_I2C1_Init+0x74>)
 8000702:	4a1c      	ldr	r2, [pc, #112]	; (8000774 <MX_I2C1_Init+0x78>)
 8000704:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000706:	4b1a      	ldr	r3, [pc, #104]	; (8000770 <MX_I2C1_Init+0x74>)
 8000708:	4a1b      	ldr	r2, [pc, #108]	; (8000778 <MX_I2C1_Init+0x7c>)
 800070a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800070c:	4b18      	ldr	r3, [pc, #96]	; (8000770 <MX_I2C1_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000712:	4b17      	ldr	r3, [pc, #92]	; (8000770 <MX_I2C1_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <MX_I2C1_Init+0x74>)
 800071a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800071e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000720:	4b13      	ldr	r3, [pc, #76]	; (8000770 <MX_I2C1_Init+0x74>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000726:	4b12      	ldr	r3, [pc, #72]	; (8000770 <MX_I2C1_Init+0x74>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800072c:	4b10      	ldr	r3, [pc, #64]	; (8000770 <MX_I2C1_Init+0x74>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000732:	4b0f      	ldr	r3, [pc, #60]	; (8000770 <MX_I2C1_Init+0x74>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <MX_I2C1_Init+0x74>)
 800073a:	f001 fb41 	bl	8001dc0 <HAL_I2C_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f95c 	bl	8000a00 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000748:	2100      	movs	r1, #0
 800074a:	4809      	ldr	r0, [pc, #36]	; (8000770 <MX_I2C1_Init+0x74>)
 800074c:	f001 fc7c 	bl	8002048 <HAL_I2CEx_ConfigAnalogFilter>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000756:	f000 f953 	bl	8000a00 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800075a:	2100      	movs	r1, #0
 800075c:	4804      	ldr	r0, [pc, #16]	; (8000770 <MX_I2C1_Init+0x74>)
 800075e:	f001 fcaf 	bl	80020c0 <HAL_I2CEx_ConfigDigitalFilter>
 8000762:	4603      	mov	r3, r0
 8000764:	2b00      	cmp	r3, #0
 8000766:	d001      	beq.n	800076c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000768:	f000 f94a 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000098 	.word	0x20000098
 8000774:	40005400 	.word	0x40005400
 8000778:	000186a0 	.word	0x000186a0

0800077c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b08a      	sub	sp, #40	; 0x28
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	605a      	str	r2, [r3, #4]
 800078e:	609a      	str	r2, [r3, #8]
 8000790:	60da      	str	r2, [r3, #12]
 8000792:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a19      	ldr	r2, [pc, #100]	; (8000800 <HAL_I2C_MspInit+0x84>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d12c      	bne.n	80007f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	4b18      	ldr	r3, [pc, #96]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a17      	ldr	r2, [pc, #92]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007a8:	f043 0302 	orr.w	r3, r3, #2
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b15      	ldr	r3, [pc, #84]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0302 	and.w	r3, r3, #2
 80007b6:	613b      	str	r3, [r7, #16]
 80007b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80007ba:	f44f 7340 	mov.w	r3, #768	; 0x300
 80007be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007c0:	2312      	movs	r3, #18
 80007c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007cc:	2304      	movs	r3, #4
 80007ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d0:	f107 0314 	add.w	r3, r7, #20
 80007d4:	4619      	mov	r1, r3
 80007d6:	480c      	ldr	r0, [pc, #48]	; (8000808 <HAL_I2C_MspInit+0x8c>)
 80007d8:	f001 f908 	bl	80019ec <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
 80007e0:	4b08      	ldr	r3, [pc, #32]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e4:	4a07      	ldr	r2, [pc, #28]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ea:	6413      	str	r3, [r2, #64]	; 0x40
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <HAL_I2C_MspInit+0x88>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40005400 	.word	0x40005400
 8000804:	40023800 	.word	0x40023800
 8000808:	40020400 	.word	0x40020400

0800080c <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len){
 800080c:	b580      	push	{r7, lr}
 800080e:	b084      	sub	sp, #16
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)== HAL_OK) return len;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	b29a      	uxth	r2, r3
 800081c:	230a      	movs	r3, #10
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	4806      	ldr	r0, [pc, #24]	; (800083c <_write+0x30>)
 8000822:	f003 f972 	bl	8003b0a <HAL_UART_Transmit>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <_write+0x24>
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	e000      	b.n	8000832 <_write+0x26>
	else return 0;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2000029c 	.word	0x2000029c

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fe97 	bl	8001578 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f823 	bl	8000894 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f7ff fe9b 	bl	8000588 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000852:	f000 fded 	bl	8001430 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000856:	f7ff ff51 	bl	80006fc <MX_I2C1_Init>
  MX_TIM7_Init();
 800085a:	f000 fbf3 	bl	8001044 <MX_TIM7_Init>
  MX_TIM3_Init();
 800085e:	f000 fa65 	bl	8000d2c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000862:	f000 fad9 	bl	8000e18 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000866:	f000 fc23 	bl	80010b0 <MX_TIM10_Init>
  MX_TIM2_Init();
 800086a:	f000 f9e9 	bl	8000c40 <MX_TIM2_Init>
  MX_TIM5_Init();
 800086e:	f000 fb67 	bl	8000f40 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000872:	2100      	movs	r1, #0
 8000874:	4806      	ldr	r0, [pc, #24]	; (8000890 <main+0x50>)
 8000876:	f002 f9cf 	bl	8002c18 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint16_t psc = 180;
 800087a:	23b4      	movs	r3, #180	; 0xb4
 800087c:	80fb      	strh	r3, [r7, #6]
  static uint16_t arr = 1000;
  uint8_t flag = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	717b      	strb	r3, [r7, #5]
  while (1){
	  //Error_ARR(&arr, &flag);
	  PWM_PSC_CHANGE(&psc, &flag);
 8000882:	1d7a      	adds	r2, r7, #5
 8000884:	1dbb      	adds	r3, r7, #6
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f000 f873 	bl	8000974 <PWM_PSC_CHANGE>
 800088e:	e7f8      	b.n	8000882 <main+0x42>
 8000890:	2000020c 	.word	0x2000020c

08000894 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b094      	sub	sp, #80	; 0x50
 8000898:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800089a:	f107 0320 	add.w	r3, r7, #32
 800089e:	2230      	movs	r2, #48	; 0x30
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f004 f876 	bl	8004994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
 80008b0:	605a      	str	r2, [r3, #4]
 80008b2:	609a      	str	r2, [r3, #8]
 80008b4:	60da      	str	r2, [r3, #12]
 80008b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	4b2b      	ldr	r3, [pc, #172]	; (800096c <SystemClock_Config+0xd8>)
 80008be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c0:	4a2a      	ldr	r2, [pc, #168]	; (800096c <SystemClock_Config+0xd8>)
 80008c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c6:	6413      	str	r3, [r2, #64]	; 0x40
 80008c8:	4b28      	ldr	r3, [pc, #160]	; (800096c <SystemClock_Config+0xd8>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d0:	60bb      	str	r3, [r7, #8]
 80008d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008d4:	2300      	movs	r3, #0
 80008d6:	607b      	str	r3, [r7, #4]
 80008d8:	4b25      	ldr	r3, [pc, #148]	; (8000970 <SystemClock_Config+0xdc>)
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a24      	ldr	r2, [pc, #144]	; (8000970 <SystemClock_Config+0xdc>)
 80008de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80008e2:	6013      	str	r3, [r2, #0]
 80008e4:	4b22      	ldr	r3, [pc, #136]	; (8000970 <SystemClock_Config+0xdc>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008ec:	607b      	str	r3, [r7, #4]
 80008ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008fa:	2302      	movs	r3, #2
 80008fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000904:	2304      	movs	r3, #4
 8000906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000908:	23b4      	movs	r3, #180	; 0xb4
 800090a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800090c:	2302      	movs	r3, #2
 800090e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000914:	f107 0320 	add.w	r3, r7, #32
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fc61 	bl	80021e0 <HAL_RCC_OscConfig>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000924:	f000 f86c 	bl	8000a00 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000928:	f001 fc0a 	bl	8002140 <HAL_PWREx_EnableOverDrive>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000932:	f000 f865 	bl	8000a00 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000936:	230f      	movs	r3, #15
 8000938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800093a:	2302      	movs	r3, #2
 800093c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000948:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800094c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800094e:	f107 030c 	add.w	r3, r7, #12
 8000952:	2105      	movs	r1, #5
 8000954:	4618      	mov	r0, r3
 8000956:	f001 febb 	bl	80026d0 <HAL_RCC_ClockConfig>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000960:	f000 f84e 	bl	8000a00 <Error_Handler>
  }
}
 8000964:	bf00      	nop
 8000966:	3750      	adds	r7, #80	; 0x50
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40023800 	.word	0x40023800
 8000970:	40007000 	.word	0x40007000

08000974 <PWM_PSC_CHANGE>:
	  TIM2->CCR1 = TIM2->ARR / 2;
	  HAL_Delay(10);
}

void PWM_PSC_CHANGE(uint16_t* psc, uint8_t* flag)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	6039      	str	r1, [r7, #0]

	if(*flag == 0){
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d111      	bne.n	80009aa <PWM_PSC_CHANGE+0x36>
		(*psc)++;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	3301      	adds	r3, #1
 800098c:	b29a      	uxth	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	801a      	strh	r2, [r3, #0]
		printf("++ ");
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <PWM_PSC_CHANGE+0x80>)
 8000994:	f004 f806 	bl	80049a4 <iprintf>
		if(*psc >= 450) *flag = 1;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	881b      	ldrh	r3, [r3, #0]
 800099c:	f5b3 7fe1 	cmp.w	r3, #450	; 0x1c2
 80009a0:	d313      	bcc.n	80009ca <PWM_PSC_CHANGE+0x56>
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	2201      	movs	r2, #1
 80009a6:	701a      	strb	r2, [r3, #0]
 80009a8:	e00f      	b.n	80009ca <PWM_PSC_CHANGE+0x56>

	}else{
		(*psc)--;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	3b01      	subs	r3, #1
 80009b0:	b29a      	uxth	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	801a      	strh	r2, [r3, #0]
		printf("-- ");
 80009b6:	4810      	ldr	r0, [pc, #64]	; (80009f8 <PWM_PSC_CHANGE+0x84>)
 80009b8:	f003 fff4 	bl	80049a4 <iprintf>
		if(*psc <= 180) *flag = 0;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	2bb4      	cmp	r3, #180	; 0xb4
 80009c2:	d802      	bhi.n	80009ca <PWM_PSC_CHANGE+0x56>
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]

	}
	printf("[psc] : %d | [flag] : %d\r\n", *psc, *flag);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	881b      	ldrh	r3, [r3, #0]
 80009ce:	4619      	mov	r1, r3
 80009d0:	683b      	ldr	r3, [r7, #0]
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	4809      	ldr	r0, [pc, #36]	; (80009fc <PWM_PSC_CHANGE+0x88>)
 80009d8:	f003 ffe4 	bl	80049a4 <iprintf>
	TIM2->PSC = *psc;
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	881a      	ldrh	r2, [r3, #0]
 80009e0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80009e4:	629a      	str	r2, [r3, #40]	; 0x28
	HAL_Delay(10);
 80009e6:	200a      	movs	r0, #10
 80009e8:	f000 fe38 	bl	800165c <HAL_Delay>
}
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	08005874 	.word	0x08005874
 80009f8:	08005878 	.word	0x08005878
 80009fc:	0800587c 	.word	0x0800587c

08000a00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a04:	b672      	cpsid	i
}
 8000a06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <Error_Handler+0x8>
	...

08000a0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	607b      	str	r3, [r7, #4]
 8000a16:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a1a:	4a0f      	ldr	r2, [pc, #60]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a20:	6453      	str	r3, [r2, #68]	; 0x44
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a2a:	607b      	str	r3, [r7, #4]
 8000a2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a36:	4a08      	ldr	r2, [pc, #32]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a3c:	6413      	str	r3, [r2, #64]	; 0x40
 8000a3e:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_MspInit+0x4c>)
 8000a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a46:	603b      	str	r3, [r7, #0]
 8000a48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	40023800 	.word	0x40023800

08000a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a60:	e7fe      	b.n	8000a60 <NMI_Handler+0x4>

08000a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a66:	e7fe      	b.n	8000a66 <HardFault_Handler+0x4>

08000a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a6c:	e7fe      	b.n	8000a6c <MemManage_Handler+0x4>

08000a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a6e:	b480      	push	{r7}
 8000a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a72:	e7fe      	b.n	8000a72 <BusFault_Handler+0x4>

08000a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a78:	e7fe      	b.n	8000a78 <UsageFault_Handler+0x4>

08000a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr

08000a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr

08000a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr

08000aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aa8:	f000 fdb8 	bl	800161c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000ab4:	2008      	movs	r0, #8
 8000ab6:	f001 f95f 	bl	8001d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000aba:	bf00      	nop
 8000abc:	bd80      	pop	{r7, pc}
	...

08000ac0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ac4:	4802      	ldr	r0, [pc, #8]	; (8000ad0 <TIM4_IRQHandler+0x10>)
 8000ac6:	f002 f96f 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	200000ec 	.word	0x200000ec

08000ad4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	; (8000ae4 <USART3_IRQHandler+0x10>)
 8000ada:	f003 f8a9 	bl	8003c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000029c 	.word	0x2000029c

08000ae8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000aec:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000af0:	f001 f942 	bl	8001d78 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM7_IRQHandler+0x10>)
 8000afe:	f002 f953 	bl	8002da8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000254 	.word	0x20000254

08000b0c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	60f8      	str	r0, [r7, #12]
 8000b14:	60b9      	str	r1, [r7, #8]
 8000b16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b18:	2300      	movs	r3, #0
 8000b1a:	617b      	str	r3, [r7, #20]
 8000b1c:	e00a      	b.n	8000b34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000b1e:	f3af 8000 	nop.w
 8000b22:	4601      	mov	r1, r0
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	1c5a      	adds	r2, r3, #1
 8000b28:	60ba      	str	r2, [r7, #8]
 8000b2a:	b2ca      	uxtb	r2, r1
 8000b2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	617b      	str	r3, [r7, #20]
 8000b34:	697a      	ldr	r2, [r7, #20]
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	dbf0      	blt.n	8000b1e <_read+0x12>
	}

return len;
 8000b3c:	687b      	ldr	r3, [r7, #4]
}
 8000b3e:	4618      	mov	r0, r3
 8000b40:	3718      	adds	r7, #24
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	return -1;
 8000b4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr

08000b5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b5e:	b480      	push	{r7}
 8000b60:	b083      	sub	sp, #12
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b6e:	605a      	str	r2, [r3, #4]
	return 0;
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	370c      	adds	r7, #12
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr

08000b7e <_isatty>:

int _isatty(int file)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	b083      	sub	sp, #12
 8000b82:	af00      	add	r7, sp, #0
 8000b84:	6078      	str	r0, [r7, #4]
	return 1;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	370c      	adds	r7, #12
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr

08000b94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b94:	b480      	push	{r7}
 8000b96:	b085      	sub	sp, #20
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	60f8      	str	r0, [r7, #12]
 8000b9c:	60b9      	str	r1, [r7, #8]
 8000b9e:	607a      	str	r2, [r7, #4]
	return 0;
 8000ba0:	2300      	movs	r3, #0
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	3714      	adds	r7, #20
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
	...

08000bb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b086      	sub	sp, #24
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb8:	4a14      	ldr	r2, [pc, #80]	; (8000c0c <_sbrk+0x5c>)
 8000bba:	4b15      	ldr	r3, [pc, #84]	; (8000c10 <_sbrk+0x60>)
 8000bbc:	1ad3      	subs	r3, r2, r3
 8000bbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <_sbrk+0x64>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d102      	bne.n	8000bd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	; (8000c14 <_sbrk+0x64>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	; (8000c18 <_sbrk+0x68>)
 8000bd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bd2:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <_sbrk+0x64>)
 8000bd4:	681a      	ldr	r2, [r3, #0]
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	693a      	ldr	r2, [r7, #16]
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d207      	bcs.n	8000bf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000be0:	f003 feae 	bl	8004940 <__errno>
 8000be4:	4603      	mov	r3, r0
 8000be6:	220c      	movs	r2, #12
 8000be8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000bea:	f04f 33ff 	mov.w	r3, #4294967295
 8000bee:	e009      	b.n	8000c04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <_sbrk+0x64>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <_sbrk+0x64>)
 8000bf8:	681a      	ldr	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	4413      	add	r3, r2
 8000bfe:	4a05      	ldr	r2, [pc, #20]	; (8000c14 <_sbrk+0x64>)
 8000c00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c02:	68fb      	ldr	r3, [r7, #12]
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	20030000 	.word	0x20030000
 8000c10:	00000400 	.word	0x00000400
 8000c14:	2000008c 	.word	0x2000008c
 8000c18:	200002f8 	.word	0x200002f8

08000c1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <SystemInit+0x20>)
 8000c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c26:	4a05      	ldr	r2, [pc, #20]	; (8000c3c <SystemInit+0x20>)
 8000c28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08e      	sub	sp, #56	; 0x38
 8000c44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	601a      	str	r2, [r3, #0]
 8000c4e:	605a      	str	r2, [r3, #4]
 8000c50:	609a      	str	r2, [r3, #8]
 8000c52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c54:	f107 0320 	add.w	r3, r7, #32
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c70:	4b2d      	ldr	r3, [pc, #180]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c72:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c76:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8000c78:	4b2b      	ldr	r3, [pc, #172]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c7a:	22b3      	movs	r2, #179	; 0xb3
 8000c7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c7e:	4b2a      	ldr	r3, [pc, #168]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000c84:	4b28      	ldr	r3, [pc, #160]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c8c:	4b26      	ldr	r3, [pc, #152]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c92:	4b25      	ldr	r3, [pc, #148]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c98:	4823      	ldr	r0, [pc, #140]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000c9a:	f001 ff15 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ca4:	f7ff feac 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cac:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	481c      	ldr	r0, [pc, #112]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000cb6:	f002 fa41 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000cc0:	f7ff fe9e 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000cc4:	4818      	ldr	r0, [pc, #96]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000cc6:	f001 ff4e 	bl	8002b66 <HAL_TIM_PWM_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000cd0:	f7ff fe96 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000ce4:	f002 fe34 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000cee:	f7ff fe87 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2360      	movs	r3, #96	; 0x60
 8000cf4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000cf6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000cfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d04:	1d3b      	adds	r3, r7, #4
 8000d06:	2200      	movs	r2, #0
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4807      	ldr	r0, [pc, #28]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000d0c:	f002 f954 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000d16:	f7ff fe73 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d1a:	4803      	ldr	r0, [pc, #12]	; (8000d28 <MX_TIM2_Init+0xe8>)
 8000d1c:	f000 fab2 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000d20:	bf00      	nop
 8000d22:	3738      	adds	r7, #56	; 0x38
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	2000020c 	.word	0x2000020c

08000d2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08e      	sub	sp, #56	; 0x38
 8000d30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
 8000d3a:	605a      	str	r2, [r3, #4]
 8000d3c:	609a      	str	r2, [r3, #8]
 8000d3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d40:	f107 0320 	add.w	r3, r7, #32
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d4a:	1d3b      	adds	r3, r7, #4
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
 8000d58:	615a      	str	r2, [r3, #20]
 8000d5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d5c:	4b2c      	ldr	r3, [pc, #176]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d5e:	4a2d      	ldr	r2, [pc, #180]	; (8000e14 <MX_TIM3_Init+0xe8>)
 8000d60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8000d62:	4b2b      	ldr	r3, [pc, #172]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d64:	2208      	movs	r2, #8
 8000d66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d68:	4b29      	ldr	r3, [pc, #164]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8000d6e:	4b28      	ldr	r3, [pc, #160]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d70:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000d74:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d76:	4b26      	ldr	r3, [pc, #152]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d7c:	4b24      	ldr	r3, [pc, #144]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d82:	4823      	ldr	r0, [pc, #140]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000d84:	f001 fea0 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d001      	beq.n	8000d92 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d8e:	f7ff fe37 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	481c      	ldr	r0, [pc, #112]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000da0:	f002 f9cc 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000daa:	f7ff fe29 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000dae:	4818      	ldr	r0, [pc, #96]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000db0:	f001 fed9 	bl	8002b66 <HAL_TIM_PWM_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000dba:	f7ff fe21 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000dc6:	f107 0320 	add.w	r3, r7, #32
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4810      	ldr	r0, [pc, #64]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000dce:	f002 fdbf 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d001      	beq.n	8000ddc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000dd8:	f7ff fe12 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ddc:	2360      	movs	r3, #96	; 0x60
 8000dde:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000de8:	2300      	movs	r3, #0
 8000dea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2200      	movs	r2, #0
 8000df0:	4619      	mov	r1, r3
 8000df2:	4807      	ldr	r0, [pc, #28]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000df4:	f002 f8e0 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000dfe:	f7ff fdff 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <MX_TIM3_Init+0xe4>)
 8000e04:	f000 fa3e 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000e08:	bf00      	nop
 8000e0a:	3738      	adds	r7, #56	; 0x38
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001c4 	.word	0x200001c4
 8000e14:	40000400 	.word	0x40000400

08000e18 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b08e      	sub	sp, #56	; 0x38
 8000e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e2c:	f107 0320 	add.w	r3, r7, #32
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
 8000e34:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]
 8000e46:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e48:	4b3b      	ldr	r3, [pc, #236]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e4a:	4a3c      	ldr	r2, [pc, #240]	; (8000f3c <MX_TIM4_Init+0x124>)
 8000e4c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8000e4e:	4b3a      	ldr	r3, [pc, #232]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e50:	2211      	movs	r2, #17
 8000e52:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b38      	ldr	r3, [pc, #224]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 8000e5a:	4b37      	ldr	r3, [pc, #220]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e5c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e60:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b35      	ldr	r3, [pc, #212]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b33      	ldr	r3, [pc, #204]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e6e:	4832      	ldr	r0, [pc, #200]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e70:	f001 fe2a 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e7a:	f7ff fdc1 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e82:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e84:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	482b      	ldr	r0, [pc, #172]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e8c:	f002 f956 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e96:	f7ff fdb3 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e9a:	4827      	ldr	r0, [pc, #156]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000e9c:	f001 fe63 	bl	8002b66 <HAL_TIM_PWM_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000ea6:	f7ff fdab 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000eb2:	f107 0320 	add.w	r3, r7, #32
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	481f      	ldr	r0, [pc, #124]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000eba:	f002 fd49 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000ec4:	f7ff fd9c 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ec8:	2360      	movs	r3, #96	; 0x60
 8000eca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8000ecc:	f246 13a7 	movw	r3, #24999	; 0x61a7
 8000ed0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	2200      	movs	r2, #0
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4815      	ldr	r0, [pc, #84]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000ee2:	f002 f869 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8000eec:	f7ff fd88 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8000ef0:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8000ef4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef6:	1d3b      	adds	r3, r7, #4
 8000ef8:	2204      	movs	r2, #4
 8000efa:	4619      	mov	r1, r3
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000efe:	f002 f85b 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d001      	beq.n	8000f0c <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8000f08:	f7ff fd7a 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8000f0c:	f641 4351 	movw	r3, #7249	; 0x1c51
 8000f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f12:	1d3b      	adds	r3, r7, #4
 8000f14:	2208      	movs	r2, #8
 8000f16:	4619      	mov	r1, r3
 8000f18:	4807      	ldr	r0, [pc, #28]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000f1a:	f002 f84d 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8000f24:	f7ff fd6c 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <MX_TIM4_Init+0x120>)
 8000f2a:	f000 f9ab 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8000f2e:	bf00      	nop
 8000f30:	3738      	adds	r7, #56	; 0x38
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200000ec 	.word	0x200000ec
 8000f3c:	40000800 	.word	0x40000800

08000f40 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b08e      	sub	sp, #56	; 0x38
 8000f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f46:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	601a      	str	r2, [r3, #0]
 8000f4e:	605a      	str	r2, [r3, #4]
 8000f50:	609a      	str	r2, [r3, #8]
 8000f52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f54:	f107 0320 	add.w	r3, r7, #32
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
 8000f6c:	615a      	str	r2, [r3, #20]
 8000f6e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f70:	4b31      	ldr	r3, [pc, #196]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f72:	4a32      	ldr	r2, [pc, #200]	; (800103c <MX_TIM5_Init+0xfc>)
 8000f74:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f78:	2209      	movs	r2, #9
 8000f7a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7c:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8000f82:	4b2d      	ldr	r3, [pc, #180]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f84:	4a2e      	ldr	r2, [pc, #184]	; (8001040 <MX_TIM5_Init+0x100>)
 8000f86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b2b      	ldr	r3, [pc, #172]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b2a      	ldr	r3, [pc, #168]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f94:	4828      	ldr	r0, [pc, #160]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000f96:	f001 fd97 	bl	8002ac8 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8000fa0:	f7ff fd2e 	bl	8000a00 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fa8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4821      	ldr	r0, [pc, #132]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000fb2:	f002 f8c3 	bl	800313c <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8000fbc:	f7ff fd20 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000fc2:	f001 fdd0 	bl	8002b66 <HAL_TIM_PWM_Init>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8000fcc:	f7ff fd18 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fd8:	f107 0320 	add.w	r3, r7, #32
 8000fdc:	4619      	mov	r1, r3
 8000fde:	4816      	ldr	r0, [pc, #88]	; (8001038 <MX_TIM5_Init+0xf8>)
 8000fe0:	f002 fcb6 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8000fea:	f7ff fd09 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fee:	2360      	movs	r3, #96	; 0x60
 8000ff0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	4619      	mov	r1, r3
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <MX_TIM5_Init+0xf8>)
 8001006:	f001 ffd7 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001010:	f7ff fcf6 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001014:	1d3b      	adds	r3, r7, #4
 8001016:	220c      	movs	r2, #12
 8001018:	4619      	mov	r1, r3
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <MX_TIM5_Init+0xf8>)
 800101c:	f001 ffcc 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001026:	f7ff fceb 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800102a:	4803      	ldr	r0, [pc, #12]	; (8001038 <MX_TIM5_Init+0xf8>)
 800102c:	f000 f92a 	bl	8001284 <HAL_TIM_MspPostInit>

}
 8001030:	bf00      	nop
 8001032:	3738      	adds	r7, #56	; 0x38
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	2000017c 	.word	0x2000017c
 800103c:	40000c00 	.word	0x40000c00
 8001040:	0001869f 	.word	0x0001869f

08001044 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800104a:	463b      	mov	r3, r7
 800104c:	2200      	movs	r2, #0
 800104e:	601a      	str	r2, [r3, #0]
 8001050:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001054:	4a15      	ldr	r2, [pc, #84]	; (80010ac <MX_TIM7_Init+0x68>)
 8001056:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8001058:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <MX_TIM7_Init+0x64>)
 800105a:	f242 3227 	movw	r2, #8999	; 0x2327
 800105e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001062:	2200      	movs	r2, #0
 8001064:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001066:	4b10      	ldr	r3, [pc, #64]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001068:	f242 720f 	movw	r2, #9999	; 0x270f
 800106c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001070:	2280      	movs	r2, #128	; 0x80
 8001072:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001074:	480c      	ldr	r0, [pc, #48]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001076:	f001 fd27 	bl	8002ac8 <HAL_TIM_Base_Init>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001080:	f7ff fcbe 	bl	8000a00 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001084:	2300      	movs	r3, #0
 8001086:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001088:	2300      	movs	r3, #0
 800108a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	4805      	ldr	r0, [pc, #20]	; (80010a8 <MX_TIM7_Init+0x64>)
 8001092:	f002 fc5d 	bl	8003950 <HAL_TIMEx_MasterConfigSynchronization>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 800109c:	f7ff fcb0 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80010a0:	bf00      	nop
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000254 	.word	0x20000254
 80010ac:	40001400 	.word	0x40001400

080010b0 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
 80010c4:	615a      	str	r2, [r3, #20]
 80010c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80010c8:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_TIM10_Init+0x94>)
 80010ca:	4a1f      	ldr	r2, [pc, #124]	; (8001148 <MX_TIM10_Init+0x98>)
 80010cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <MX_TIM10_Init+0x94>)
 80010d0:	2247      	movs	r2, #71	; 0x47
 80010d2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010d4:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_TIM10_Init+0x94>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 80010da:	4b1a      	ldr	r3, [pc, #104]	; (8001144 <MX_TIM10_Init+0x94>)
 80010dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80010e0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_TIM10_Init+0x94>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_TIM10_Init+0x94>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80010ee:	4815      	ldr	r0, [pc, #84]	; (8001144 <MX_TIM10_Init+0x94>)
 80010f0:	f001 fcea 	bl	8002ac8 <HAL_TIM_Base_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80010fa:	f7ff fc81 	bl	8000a00 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80010fe:	4811      	ldr	r0, [pc, #68]	; (8001144 <MX_TIM10_Init+0x94>)
 8001100:	f001 fd31 	bl	8002b66 <HAL_TIM_PWM_Init>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800110a:	f7ff fc79 	bl	8000a00 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110e:	2360      	movs	r3, #96	; 0x60
 8001110:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001112:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001116:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	4619      	mov	r1, r3
 8001126:	4807      	ldr	r0, [pc, #28]	; (8001144 <MX_TIM10_Init+0x94>)
 8001128:	f001 ff46 	bl	8002fb8 <HAL_TIM_PWM_ConfigChannel>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001132:	f7ff fc65 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001136:	4803      	ldr	r0, [pc, #12]	; (8001144 <MX_TIM10_Init+0x94>)
 8001138:	f000 f8a4 	bl	8001284 <HAL_TIM_MspPostInit>

}
 800113c:	bf00      	nop
 800113e:	3720      	adds	r7, #32
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000134 	.word	0x20000134
 8001148:	40014400 	.word	0x40014400

0800114c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800115c:	d10e      	bne.n	800117c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	61fb      	str	r3, [r7, #28]
 8001162:	4b42      	ldr	r3, [pc, #264]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	4a41      	ldr	r2, [pc, #260]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6413      	str	r3, [r2, #64]	; 0x40
 800116e:	4b3f      	ldr	r3, [pc, #252]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800117a:	e072      	b.n	8001262 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a3b      	ldr	r2, [pc, #236]	; (8001270 <HAL_TIM_Base_MspInit+0x124>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d10e      	bne.n	80011a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	61bb      	str	r3, [r7, #24]
 800118a:	4b38      	ldr	r3, [pc, #224]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	4a37      	ldr	r2, [pc, #220]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001190:	f043 0302 	orr.w	r3, r3, #2
 8001194:	6413      	str	r3, [r2, #64]	; 0x40
 8001196:	4b35      	ldr	r3, [pc, #212]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	69bb      	ldr	r3, [r7, #24]
}
 80011a2:	e05e      	b.n	8001262 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a32      	ldr	r2, [pc, #200]	; (8001274 <HAL_TIM_Base_MspInit+0x128>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d116      	bne.n	80011dc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	617b      	str	r3, [r7, #20]
 80011b2:	4b2e      	ldr	r3, [pc, #184]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a2d      	ldr	r2, [pc, #180]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b2b      	ldr	r3, [pc, #172]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 0304 	and.w	r3, r3, #4
 80011c6:	617b      	str	r3, [r7, #20]
 80011c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80011ca:	2200      	movs	r2, #0
 80011cc:	2100      	movs	r1, #0
 80011ce:	201e      	movs	r0, #30
 80011d0:	f000 fb43 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80011d4:	201e      	movs	r0, #30
 80011d6:	f000 fb5c 	bl	8001892 <HAL_NVIC_EnableIRQ>
}
 80011da:	e042      	b.n	8001262 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a25      	ldr	r2, [pc, #148]	; (8001278 <HAL_TIM_Base_MspInit+0x12c>)
 80011e2:	4293      	cmp	r3, r2
 80011e4:	d10e      	bne.n	8001204 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	613b      	str	r3, [r7, #16]
 80011ea:	4b20      	ldr	r3, [pc, #128]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	4a1f      	ldr	r2, [pc, #124]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011f0:	f043 0308 	orr.w	r3, r3, #8
 80011f4:	6413      	str	r3, [r2, #64]	; 0x40
 80011f6:	4b1d      	ldr	r3, [pc, #116]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	613b      	str	r3, [r7, #16]
 8001200:	693b      	ldr	r3, [r7, #16]
}
 8001202:	e02e      	b.n	8001262 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a1c      	ldr	r2, [pc, #112]	; (800127c <HAL_TIM_Base_MspInit+0x130>)
 800120a:	4293      	cmp	r3, r2
 800120c:	d116      	bne.n	800123c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b16      	ldr	r3, [pc, #88]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	4a15      	ldr	r2, [pc, #84]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	6413      	str	r3, [r2, #64]	; 0x40
 800121e:	4b13      	ldr	r3, [pc, #76]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f003 0320 	and.w	r3, r3, #32
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2037      	movs	r0, #55	; 0x37
 8001230:	f000 fb13 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001234:	2037      	movs	r0, #55	; 0x37
 8001236:	f000 fb2c 	bl	8001892 <HAL_NVIC_EnableIRQ>
}
 800123a:	e012      	b.n	8001262 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0f      	ldr	r2, [pc, #60]	; (8001280 <HAL_TIM_Base_MspInit+0x134>)
 8001242:	4293      	cmp	r3, r2
 8001244:	d10d      	bne.n	8001262 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	60bb      	str	r3, [r7, #8]
 800124a:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 800124c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124e:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001254:	6453      	str	r3, [r2, #68]	; 0x44
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <HAL_TIM_Base_MspInit+0x120>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800125e:	60bb      	str	r3, [r7, #8]
 8001260:	68bb      	ldr	r3, [r7, #8]
}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023800 	.word	0x40023800
 8001270:	40000400 	.word	0x40000400
 8001274:	40000800 	.word	0x40000800
 8001278:	40000c00 	.word	0x40000c00
 800127c:	40001400 	.word	0x40001400
 8001280:	40014400 	.word	0x40014400

08001284 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	; 0x30
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128c:	f107 031c 	add.w	r3, r7, #28
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
 8001296:	609a      	str	r2, [r3, #8]
 8001298:	60da      	str	r2, [r3, #12]
 800129a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80012a4:	d11e      	bne.n	80012e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012a6:	2300      	movs	r3, #0
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	4b58      	ldr	r3, [pc, #352]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ae:	4a57      	ldr	r2, [pc, #348]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80012b0:	f043 0301 	orr.w	r3, r3, #1
 80012b4:	6313      	str	r3, [r2, #48]	; 0x30
 80012b6:	4b55      	ldr	r3, [pc, #340]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	f003 0301 	and.w	r3, r3, #1
 80012be:	61bb      	str	r3, [r7, #24]
 80012c0:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80012c2:	2320      	movs	r3, #32
 80012c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d2:	2301      	movs	r3, #1
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	484c      	ldr	r0, [pc, #304]	; (8001410 <HAL_TIM_MspPostInit+0x18c>)
 80012de:	f000 fb85 	bl	80019ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80012e2:	e08f      	b.n	8001404 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4a4a      	ldr	r2, [pc, #296]	; (8001414 <HAL_TIM_MspPostInit+0x190>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d11e      	bne.n	800132c <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
 80012f2:	4b46      	ldr	r3, [pc, #280]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a45      	ldr	r2, [pc, #276]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80012f8:	f043 0304 	orr.w	r3, r3, #4
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b43      	ldr	r3, [pc, #268]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	617b      	str	r3, [r7, #20]
 8001308:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800130a:	2340      	movs	r3, #64	; 0x40
 800130c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800131a:	2302      	movs	r3, #2
 800131c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 031c 	add.w	r3, r7, #28
 8001322:	4619      	mov	r1, r3
 8001324:	483c      	ldr	r0, [pc, #240]	; (8001418 <HAL_TIM_MspPostInit+0x194>)
 8001326:	f000 fb61 	bl	80019ec <HAL_GPIO_Init>
}
 800132a:	e06b      	b.n	8001404 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a3a      	ldr	r2, [pc, #232]	; (800141c <HAL_TIM_MspPostInit+0x198>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d11f      	bne.n	8001376 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b34      	ldr	r3, [pc, #208]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a33      	ldr	r2, [pc, #204]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 8001340:	f043 0308 	orr.w	r3, r3, #8
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b31      	ldr	r3, [pc, #196]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0308 	and.w	r3, r3, #8
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001352:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001364:	2302      	movs	r3, #2
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	482c      	ldr	r0, [pc, #176]	; (8001420 <HAL_TIM_MspPostInit+0x19c>)
 8001370:	f000 fb3c 	bl	80019ec <HAL_GPIO_Init>
}
 8001374:	e046      	b.n	8001404 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a2a      	ldr	r2, [pc, #168]	; (8001424 <HAL_TIM_MspPostInit+0x1a0>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d11e      	bne.n	80013be <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	4b21      	ldr	r3, [pc, #132]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 8001386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001388:	4a20      	ldr	r2, [pc, #128]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 800138a:	f043 0301 	orr.w	r3, r3, #1
 800138e:	6313      	str	r3, [r2, #48]	; 0x30
 8001390:	4b1e      	ldr	r3, [pc, #120]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 8001392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001394:	f003 0301 	and.w	r3, r3, #1
 8001398:	60fb      	str	r3, [r7, #12]
 800139a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800139c:	2309      	movs	r3, #9
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a8:	2300      	movs	r3, #0
 80013aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 031c 	add.w	r3, r7, #28
 80013b4:	4619      	mov	r1, r3
 80013b6:	4816      	ldr	r0, [pc, #88]	; (8001410 <HAL_TIM_MspPostInit+0x18c>)
 80013b8:	f000 fb18 	bl	80019ec <HAL_GPIO_Init>
}
 80013bc:	e022      	b.n	8001404 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a19      	ldr	r2, [pc, #100]	; (8001428 <HAL_TIM_MspPostInit+0x1a4>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d11d      	bne.n	8001404 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c8:	2300      	movs	r3, #0
 80013ca:	60bb      	str	r3, [r7, #8]
 80013cc:	4b0f      	ldr	r3, [pc, #60]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80013ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d0:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80013d2:	f043 0320 	orr.w	r3, r3, #32
 80013d6:	6313      	str	r3, [r2, #48]	; 0x30
 80013d8:	4b0c      	ldr	r3, [pc, #48]	; (800140c <HAL_TIM_MspPostInit+0x188>)
 80013da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013dc:	f003 0320 	and.w	r3, r3, #32
 80013e0:	60bb      	str	r3, [r7, #8]
 80013e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e4:	2340      	movs	r3, #64	; 0x40
 80013e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80013f4:	2303      	movs	r3, #3
 80013f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 031c 	add.w	r3, r7, #28
 80013fc:	4619      	mov	r1, r3
 80013fe:	480b      	ldr	r0, [pc, #44]	; (800142c <HAL_TIM_MspPostInit+0x1a8>)
 8001400:	f000 faf4 	bl	80019ec <HAL_GPIO_Init>
}
 8001404:	bf00      	nop
 8001406:	3730      	adds	r7, #48	; 0x30
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40000400 	.word	0x40000400
 8001418:	40020800 	.word	0x40020800
 800141c:	40000800 	.word	0x40000800
 8001420:	40020c00 	.word	0x40020c00
 8001424:	40000c00 	.word	0x40000c00
 8001428:	40014400 	.word	0x40014400
 800142c:	40021400 	.word	0x40021400

08001430 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001434:	4b11      	ldr	r3, [pc, #68]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001436:	4a12      	ldr	r2, [pc, #72]	; (8001480 <MX_USART3_UART_Init+0x50>)
 8001438:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800143a:	4b10      	ldr	r3, [pc, #64]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800143c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001440:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001444:	2200      	movs	r2, #0
 8001446:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001448:	4b0c      	ldr	r3, [pc, #48]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800144a:	2200      	movs	r2, #0
 800144c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800144e:	4b0b      	ldr	r3, [pc, #44]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001454:	4b09      	ldr	r3, [pc, #36]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001456:	220c      	movs	r2, #12
 8001458:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800145a:	4b08      	ldr	r3, [pc, #32]	; (800147c <MX_USART3_UART_Init+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001462:	2200      	movs	r2, #0
 8001464:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001466:	4805      	ldr	r0, [pc, #20]	; (800147c <MX_USART3_UART_Init+0x4c>)
 8001468:	f002 fb02 	bl	8003a70 <HAL_UART_Init>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001472:	f7ff fac5 	bl	8000a00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	2000029c 	.word	0x2000029c
 8001480:	40004800 	.word	0x40004800

08001484 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	; 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1d      	ldr	r2, [pc, #116]	; (8001518 <HAL_UART_MspInit+0x94>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d134      	bne.n	8001510 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	613b      	str	r3, [r7, #16]
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_UART_MspInit+0x98>)
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	4a1b      	ldr	r2, [pc, #108]	; (800151c <HAL_UART_MspInit+0x98>)
 80014b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014b4:	6413      	str	r3, [r2, #64]	; 0x40
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_UART_MspInit+0x98>)
 80014b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014be:	613b      	str	r3, [r7, #16]
 80014c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b15      	ldr	r3, [pc, #84]	; (800151c <HAL_UART_MspInit+0x98>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a14      	ldr	r2, [pc, #80]	; (800151c <HAL_UART_MspInit+0x98>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b12      	ldr	r3, [pc, #72]	; (800151c <HAL_UART_MspInit+0x98>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014de:	f44f 7340 	mov.w	r3, #768	; 0x300
 80014e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e8:	2300      	movs	r3, #0
 80014ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ec:	2303      	movs	r3, #3
 80014ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80014f0:	2307      	movs	r3, #7
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	4619      	mov	r1, r3
 80014fa:	4809      	ldr	r0, [pc, #36]	; (8001520 <HAL_UART_MspInit+0x9c>)
 80014fc:	f000 fa76 	bl	80019ec <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2100      	movs	r1, #0
 8001504:	2027      	movs	r0, #39	; 0x27
 8001506:	f000 f9a8 	bl	800185a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800150a:	2027      	movs	r0, #39	; 0x27
 800150c:	f000 f9c1 	bl	8001892 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001510:	bf00      	nop
 8001512:	3728      	adds	r7, #40	; 0x28
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40004800 	.word	0x40004800
 800151c:	40023800 	.word	0x40023800
 8001520:	40020c00 	.word	0x40020c00

08001524 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001524:	f8df d034 	ldr.w	sp, [pc, #52]	; 800155c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001528:	480d      	ldr	r0, [pc, #52]	; (8001560 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800152a:	490e      	ldr	r1, [pc, #56]	; (8001564 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800152c:	4a0e      	ldr	r2, [pc, #56]	; (8001568 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800152e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001530:	e002      	b.n	8001538 <LoopCopyDataInit>

08001532 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001532:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001534:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001536:	3304      	adds	r3, #4

08001538 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001538:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800153a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800153c:	d3f9      	bcc.n	8001532 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800153e:	4a0b      	ldr	r2, [pc, #44]	; (800156c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001540:	4c0b      	ldr	r4, [pc, #44]	; (8001570 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001542:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001544:	e001      	b.n	800154a <LoopFillZerobss>

08001546 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001546:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001548:	3204      	adds	r2, #4

0800154a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800154a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800154c:	d3fb      	bcc.n	8001546 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800154e:	f7ff fb65 	bl	8000c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001552:	f003 f9fb 	bl	800494c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001556:	f7ff f973 	bl	8000840 <main>
  bx  lr    
 800155a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800155c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001560:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001564:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001568:	08005958 	.word	0x08005958
  ldr r2, =_sbss
 800156c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001570:	200002f4 	.word	0x200002f4

08001574 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001574:	e7fe      	b.n	8001574 <ADC_IRQHandler>
	...

08001578 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800157c:	4b0e      	ldr	r3, [pc, #56]	; (80015b8 <HAL_Init+0x40>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a0d      	ldr	r2, [pc, #52]	; (80015b8 <HAL_Init+0x40>)
 8001582:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001586:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_Init+0x40>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a0a      	ldr	r2, [pc, #40]	; (80015b8 <HAL_Init+0x40>)
 800158e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001592:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <HAL_Init+0x40>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a07      	ldr	r2, [pc, #28]	; (80015b8 <HAL_Init+0x40>)
 800159a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800159e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015a0:	2003      	movs	r0, #3
 80015a2:	f000 f94f 	bl	8001844 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015a6:	200f      	movs	r0, #15
 80015a8:	f000 f808 	bl	80015bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015ac:	f7ff fa2e 	bl	8000a0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023c00 	.word	0x40023c00

080015bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015c4:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_InitTick+0x54>)
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_InitTick+0x58>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	4619      	mov	r1, r3
 80015ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80015d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	f000 f967 	bl	80018ae <HAL_SYSTICK_Config>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e00e      	b.n	8001608 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	2b0f      	cmp	r3, #15
 80015ee:	d80a      	bhi.n	8001606 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015f0:	2200      	movs	r2, #0
 80015f2:	6879      	ldr	r1, [r7, #4]
 80015f4:	f04f 30ff 	mov.w	r0, #4294967295
 80015f8:	f000 f92f 	bl	800185a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015fc:	4a06      	ldr	r2, [pc, #24]	; (8001618 <HAL_InitTick+0x5c>)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001602:	2300      	movs	r3, #0
 8001604:	e000      	b.n	8001608 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	20000000 	.word	0x20000000
 8001614:	20000008 	.word	0x20000008
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_IncTick+0x20>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	461a      	mov	r2, r3
 8001626:	4b06      	ldr	r3, [pc, #24]	; (8001640 <HAL_IncTick+0x24>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4413      	add	r3, r2
 800162c:	4a04      	ldr	r2, [pc, #16]	; (8001640 <HAL_IncTick+0x24>)
 800162e:	6013      	str	r3, [r2, #0]
}
 8001630:	bf00      	nop
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	20000008 	.word	0x20000008
 8001640:	200002e0 	.word	0x200002e0

08001644 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  return uwTick;
 8001648:	4b03      	ldr	r3, [pc, #12]	; (8001658 <HAL_GetTick+0x14>)
 800164a:	681b      	ldr	r3, [r3, #0]
}
 800164c:	4618      	mov	r0, r3
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	200002e0 	.word	0x200002e0

0800165c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b084      	sub	sp, #16
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001664:	f7ff ffee 	bl	8001644 <HAL_GetTick>
 8001668:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001674:	d005      	beq.n	8001682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_Delay+0x44>)
 8001678:	781b      	ldrb	r3, [r3, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001682:	bf00      	nop
 8001684:	f7ff ffde 	bl	8001644 <HAL_GetTick>
 8001688:	4602      	mov	r2, r0
 800168a:	68bb      	ldr	r3, [r7, #8]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	429a      	cmp	r2, r3
 8001692:	d8f7      	bhi.n	8001684 <HAL_Delay+0x28>
  {
  }
}
 8001694:	bf00      	nop
 8001696:	bf00      	nop
 8001698:	3710      	adds	r7, #16
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	20000008 	.word	0x20000008

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4907      	ldr	r1, [pc, #28]	; (8001740 <__NVIC_EnableIRQ+0x38>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	e000e100 	.word	0xe000e100

08001744 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	6039      	str	r1, [r7, #0]
 800174e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001754:	2b00      	cmp	r3, #0
 8001756:	db0a      	blt.n	800176e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	b2da      	uxtb	r2, r3
 800175c:	490c      	ldr	r1, [pc, #48]	; (8001790 <__NVIC_SetPriority+0x4c>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	0112      	lsls	r2, r2, #4
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	440b      	add	r3, r1
 8001768:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800176c:	e00a      	b.n	8001784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	b2da      	uxtb	r2, r3
 8001772:	4908      	ldr	r1, [pc, #32]	; (8001794 <__NVIC_SetPriority+0x50>)
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f003 030f 	and.w	r3, r3, #15
 800177a:	3b04      	subs	r3, #4
 800177c:	0112      	lsls	r2, r2, #4
 800177e:	b2d2      	uxtb	r2, r2
 8001780:	440b      	add	r3, r1
 8001782:	761a      	strb	r2, [r3, #24]
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000e100 	.word	0xe000e100
 8001794:	e000ed00 	.word	0xe000ed00

08001798 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001798:	b480      	push	{r7}
 800179a:	b089      	sub	sp, #36	; 0x24
 800179c:	af00      	add	r7, sp, #0
 800179e:	60f8      	str	r0, [r7, #12]
 80017a0:	60b9      	str	r1, [r7, #8]
 80017a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	f003 0307 	and.w	r3, r3, #7
 80017aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	f1c3 0307 	rsb	r3, r3, #7
 80017b2:	2b04      	cmp	r3, #4
 80017b4:	bf28      	it	cs
 80017b6:	2304      	movcs	r3, #4
 80017b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	3304      	adds	r3, #4
 80017be:	2b06      	cmp	r3, #6
 80017c0:	d902      	bls.n	80017c8 <NVIC_EncodePriority+0x30>
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	3b03      	subs	r3, #3
 80017c6:	e000      	b.n	80017ca <NVIC_EncodePriority+0x32>
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017cc:	f04f 32ff 	mov.w	r2, #4294967295
 80017d0:	69bb      	ldr	r3, [r7, #24]
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43da      	mvns	r2, r3
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	401a      	ands	r2, r3
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e0:	f04f 31ff 	mov.w	r1, #4294967295
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	fa01 f303 	lsl.w	r3, r1, r3
 80017ea:	43d9      	mvns	r1, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	4313      	orrs	r3, r2
         );
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3724      	adds	r7, #36	; 0x24
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr
	...

08001800 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b082      	sub	sp, #8
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3b01      	subs	r3, #1
 800180c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001810:	d301      	bcc.n	8001816 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001812:	2301      	movs	r3, #1
 8001814:	e00f      	b.n	8001836 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <SysTick_Config+0x40>)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	3b01      	subs	r3, #1
 800181c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800181e:	210f      	movs	r1, #15
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	f7ff ff8e 	bl	8001744 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001828:	4b05      	ldr	r3, [pc, #20]	; (8001840 <SysTick_Config+0x40>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800182e:	4b04      	ldr	r3, [pc, #16]	; (8001840 <SysTick_Config+0x40>)
 8001830:	2207      	movs	r2, #7
 8001832:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3708      	adds	r7, #8
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	e000e010 	.word	0xe000e010

08001844 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800184c:	6878      	ldr	r0, [r7, #4]
 800184e:	f7ff ff29 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}

0800185a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185a:	b580      	push	{r7, lr}
 800185c:	b086      	sub	sp, #24
 800185e:	af00      	add	r7, sp, #0
 8001860:	4603      	mov	r3, r0
 8001862:	60b9      	str	r1, [r7, #8]
 8001864:	607a      	str	r2, [r7, #4]
 8001866:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800186c:	f7ff ff3e 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001870:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001872:	687a      	ldr	r2, [r7, #4]
 8001874:	68b9      	ldr	r1, [r7, #8]
 8001876:	6978      	ldr	r0, [r7, #20]
 8001878:	f7ff ff8e 	bl	8001798 <NVIC_EncodePriority>
 800187c:	4602      	mov	r2, r0
 800187e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff ff5d 	bl	8001744 <__NVIC_SetPriority>
}
 800188a:	bf00      	nop
 800188c:	3718      	adds	r7, #24
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}

08001892 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001892:	b580      	push	{r7, lr}
 8001894:	b082      	sub	sp, #8
 8001896:	af00      	add	r7, sp, #0
 8001898:	4603      	mov	r3, r0
 800189a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800189c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff ff31 	bl	8001708 <__NVIC_EnableIRQ>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018b6:	6878      	ldr	r0, [r7, #4]
 80018b8:	f7ff ffa2 	bl	8001800 <SysTick_Config>
 80018bc:	4603      	mov	r3, r0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3708      	adds	r7, #8
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}

080018c6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018c6:	b580      	push	{r7, lr}
 80018c8:	b084      	sub	sp, #16
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018d4:	f7ff feb6 	bl	8001644 <HAL_GetTick>
 80018d8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d008      	beq.n	80018f8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2280      	movs	r2, #128	; 0x80
 80018ea:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e052      	b.n	800199e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f022 0216 	bic.w	r2, r2, #22
 8001906:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001916:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	2b00      	cmp	r3, #0
 800191e:	d103      	bne.n	8001928 <HAL_DMA_Abort+0x62>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001924:	2b00      	cmp	r3, #0
 8001926:	d007      	beq.n	8001938 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	681a      	ldr	r2, [r3, #0]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f022 0208 	bic.w	r2, r2, #8
 8001936:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0201 	bic.w	r2, r2, #1
 8001946:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001948:	e013      	b.n	8001972 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194a:	f7ff fe7b 	bl	8001644 <HAL_GetTick>
 800194e:	4602      	mov	r2, r0
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b05      	cmp	r3, #5
 8001956:	d90c      	bls.n	8001972 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2220      	movs	r2, #32
 800195c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	2203      	movs	r2, #3
 8001962:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e015      	b.n	800199e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e4      	bne.n	800194a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001984:	223f      	movs	r2, #63	; 0x3f
 8001986:	409a      	lsls	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	2201      	movs	r2, #1
 8001990:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2200      	movs	r2, #0
 8001998:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019a6:	b480      	push	{r7}
 80019a8:	b083      	sub	sp, #12
 80019aa:	af00      	add	r7, sp, #0
 80019ac:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019b4:	b2db      	uxtb	r3, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d004      	beq.n	80019c4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2280      	movs	r2, #128	; 0x80
 80019be:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	e00c      	b.n	80019de <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2205      	movs	r2, #5
 80019c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681a      	ldr	r2, [r3, #0]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f022 0201 	bic.w	r2, r2, #1
 80019da:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	; 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
 80019f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019f6:	2300      	movs	r3, #0
 80019f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a02:	2300      	movs	r3, #0
 8001a04:	61fb      	str	r3, [r7, #28]
 8001a06:	e177      	b.n	8001cf8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a08:	2201      	movs	r2, #1
 8001a0a:	69fb      	ldr	r3, [r7, #28]
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	697a      	ldr	r2, [r7, #20]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	f040 8166 	bne.w	8001cf2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f003 0303 	and.w	r3, r3, #3
 8001a2e:	2b01      	cmp	r3, #1
 8001a30:	d005      	beq.n	8001a3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d130      	bne.n	8001aa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	005b      	lsls	r3, r3, #1
 8001a48:	2203      	movs	r2, #3
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	68da      	ldr	r2, [r3, #12]
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	69ba      	ldr	r2, [r7, #24]
 8001a64:	4313      	orrs	r3, r2
 8001a66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a74:	2201      	movs	r2, #1
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	69ba      	ldr	r2, [r7, #24]
 8001a80:	4013      	ands	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	091b      	lsrs	r3, r3, #4
 8001a8a:	f003 0201 	and.w	r2, r3, #1
 8001a8e:	69fb      	ldr	r3, [r7, #28]
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	69ba      	ldr	r2, [r7, #24]
 8001a96:	4313      	orrs	r3, r2
 8001a98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	69ba      	ldr	r2, [r7, #24]
 8001a9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 0303 	and.w	r3, r3, #3
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d017      	beq.n	8001adc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	68db      	ldr	r3, [r3, #12]
 8001ab0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	2203      	movs	r2, #3
 8001ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8001abc:	43db      	mvns	r3, r3
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	689a      	ldr	r2, [r3, #8]
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	005b      	lsls	r3, r3, #1
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b02      	cmp	r3, #2
 8001ae6:	d123      	bne.n	8001b30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ae8:	69fb      	ldr	r3, [r7, #28]
 8001aea:	08da      	lsrs	r2, r3, #3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	3208      	adds	r2, #8
 8001af0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001af6:	69fb      	ldr	r3, [r7, #28]
 8001af8:	f003 0307 	and.w	r3, r3, #7
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	220f      	movs	r2, #15
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	43db      	mvns	r3, r3
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	691a      	ldr	r2, [r3, #16]
 8001b10:	69fb      	ldr	r3, [r7, #28]
 8001b12:	f003 0307 	and.w	r3, r3, #7
 8001b16:	009b      	lsls	r3, r3, #2
 8001b18:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	08da      	lsrs	r2, r3, #3
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	3208      	adds	r2, #8
 8001b2a:	69b9      	ldr	r1, [r7, #24]
 8001b2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	2203      	movs	r2, #3
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f003 0203 	and.w	r2, r3, #3
 8001b50:	69fb      	ldr	r3, [r7, #28]
 8001b52:	005b      	lsls	r3, r3, #1
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	f000 80c0 	beq.w	8001cf2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	4a65      	ldr	r2, [pc, #404]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b80:	6453      	str	r3, [r2, #68]	; 0x44
 8001b82:	4b63      	ldr	r3, [pc, #396]	; (8001d10 <HAL_GPIO_Init+0x324>)
 8001b84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b8e:	4a61      	ldr	r2, [pc, #388]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	089b      	lsrs	r3, r3, #2
 8001b94:	3302      	adds	r3, #2
 8001b96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f003 0303 	and.w	r3, r3, #3
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	220f      	movs	r2, #15
 8001ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8001baa:	43db      	mvns	r3, r3
 8001bac:	69ba      	ldr	r2, [r7, #24]
 8001bae:	4013      	ands	r3, r2
 8001bb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	4a58      	ldr	r2, [pc, #352]	; (8001d18 <HAL_GPIO_Init+0x32c>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d037      	beq.n	8001c2a <HAL_GPIO_Init+0x23e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	4a57      	ldr	r2, [pc, #348]	; (8001d1c <HAL_GPIO_Init+0x330>)
 8001bbe:	4293      	cmp	r3, r2
 8001bc0:	d031      	beq.n	8001c26 <HAL_GPIO_Init+0x23a>
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_GPIO_Init+0x334>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d02b      	beq.n	8001c22 <HAL_GPIO_Init+0x236>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_GPIO_Init+0x338>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d025      	beq.n	8001c1e <HAL_GPIO_Init+0x232>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	4a54      	ldr	r2, [pc, #336]	; (8001d28 <HAL_GPIO_Init+0x33c>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d01f      	beq.n	8001c1a <HAL_GPIO_Init+0x22e>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	4a53      	ldr	r2, [pc, #332]	; (8001d2c <HAL_GPIO_Init+0x340>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d019      	beq.n	8001c16 <HAL_GPIO_Init+0x22a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	4a52      	ldr	r2, [pc, #328]	; (8001d30 <HAL_GPIO_Init+0x344>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d013      	beq.n	8001c12 <HAL_GPIO_Init+0x226>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	4a51      	ldr	r2, [pc, #324]	; (8001d34 <HAL_GPIO_Init+0x348>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d00d      	beq.n	8001c0e <HAL_GPIO_Init+0x222>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	4a50      	ldr	r2, [pc, #320]	; (8001d38 <HAL_GPIO_Init+0x34c>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d007      	beq.n	8001c0a <HAL_GPIO_Init+0x21e>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4a4f      	ldr	r2, [pc, #316]	; (8001d3c <HAL_GPIO_Init+0x350>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d101      	bne.n	8001c06 <HAL_GPIO_Init+0x21a>
 8001c02:	2309      	movs	r3, #9
 8001c04:	e012      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c06:	230a      	movs	r3, #10
 8001c08:	e010      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0a:	2308      	movs	r3, #8
 8001c0c:	e00e      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c0e:	2307      	movs	r3, #7
 8001c10:	e00c      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c12:	2306      	movs	r3, #6
 8001c14:	e00a      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c16:	2305      	movs	r3, #5
 8001c18:	e008      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1a:	2304      	movs	r3, #4
 8001c1c:	e006      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c1e:	2303      	movs	r3, #3
 8001c20:	e004      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e002      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <HAL_GPIO_Init+0x240>
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	69fa      	ldr	r2, [r7, #28]
 8001c2e:	f002 0203 	and.w	r2, r2, #3
 8001c32:	0092      	lsls	r2, r2, #2
 8001c34:	4093      	lsls	r3, r2
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c3c:	4935      	ldr	r1, [pc, #212]	; (8001d14 <HAL_GPIO_Init+0x328>)
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	089b      	lsrs	r3, r3, #2
 8001c42:	3302      	adds	r3, #2
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001c4a:	4b3d      	ldr	r3, [pc, #244]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	43db      	mvns	r3, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4013      	ands	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d003      	beq.n	8001c6e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001c6e:	4a34      	ldr	r2, [pc, #208]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c70:	69bb      	ldr	r3, [r7, #24]
 8001c72:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001c74:	4b32      	ldr	r3, [pc, #200]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001c98:	4a29      	ldr	r2, [pc, #164]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001c9a:	69bb      	ldr	r3, [r7, #24]
 8001c9c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca4:	693b      	ldr	r3, [r7, #16]
 8001ca6:	43db      	mvns	r3, r3
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	4013      	ands	r3, r2
 8001cac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d003      	beq.n	8001cc2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001cc2:	4a1f      	ldr	r2, [pc, #124]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cc8:	4b1d      	ldr	r3, [pc, #116]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cec:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_GPIO_Init+0x354>)
 8001cee:	69bb      	ldr	r3, [r7, #24]
 8001cf0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	f67f ae84 	bls.w	8001a08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3724      	adds	r7, #36	; 0x24
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40013800 	.word	0x40013800
 8001d18:	40020000 	.word	0x40020000
 8001d1c:	40020400 	.word	0x40020400
 8001d20:	40020800 	.word	0x40020800
 8001d24:	40020c00 	.word	0x40020c00
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40021400 	.word	0x40021400
 8001d30:	40021800 	.word	0x40021800
 8001d34:	40021c00 	.word	0x40021c00
 8001d38:	40022000 	.word	0x40022000
 8001d3c:	40022400 	.word	0x40022400
 8001d40:	40013c00 	.word	0x40013c00

08001d44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	807b      	strh	r3, [r7, #2]
 8001d50:	4613      	mov	r3, r2
 8001d52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d54:	787b      	ldrb	r3, [r7, #1]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d5a:	887a      	ldrh	r2, [r7, #2]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d60:	e003      	b.n	8001d6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d62:	887b      	ldrh	r3, [r7, #2]
 8001d64:	041a      	lsls	r2, r3, #16
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	619a      	str	r2, [r3, #24]
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
	...

08001d78 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b082      	sub	sp, #8
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	4603      	mov	r3, r0
 8001d80:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d82:	4b08      	ldr	r3, [pc, #32]	; (8001da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d84:	695a      	ldr	r2, [r3, #20]
 8001d86:	88fb      	ldrh	r3, [r7, #6]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d006      	beq.n	8001d9c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d8e:	4a05      	ldr	r2, [pc, #20]	; (8001da4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d90:	88fb      	ldrh	r3, [r7, #6]
 8001d92:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d94:	88fb      	ldrh	r3, [r7, #6]
 8001d96:	4618      	mov	r0, r3
 8001d98:	f000 f806 	bl	8001da8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40013c00 	.word	0x40013c00

08001da8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr
	...

08001dc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d101      	bne.n	8001dd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001dce:	2301      	movs	r3, #1
 8001dd0:	e12b      	b.n	800202a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d106      	bne.n	8001dec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7fe fcc8 	bl	800077c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2224      	movs	r2, #36	; 0x24
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0201 	bic.w	r2, r2, #1
 8001e02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001e22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001e24:	f000 fe28 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 8001e28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	4a81      	ldr	r2, [pc, #516]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d807      	bhi.n	8001e44 <HAL_I2C_Init+0x84>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4a80      	ldr	r2, [pc, #512]	; (8002038 <HAL_I2C_Init+0x278>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	bf94      	ite	ls
 8001e3c:	2301      	movls	r3, #1
 8001e3e:	2300      	movhi	r3, #0
 8001e40:	b2db      	uxtb	r3, r3
 8001e42:	e006      	b.n	8001e52 <HAL_I2C_Init+0x92>
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	4a7d      	ldr	r2, [pc, #500]	; (800203c <HAL_I2C_Init+0x27c>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	bf94      	ite	ls
 8001e4c:	2301      	movls	r3, #1
 8001e4e:	2300      	movhi	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e0e7      	b.n	800202a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	4a78      	ldr	r2, [pc, #480]	; (8002040 <HAL_I2C_Init+0x280>)
 8001e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e62:	0c9b      	lsrs	r3, r3, #18
 8001e64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a1b      	ldr	r3, [r3, #32]
 8001e80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a6a      	ldr	r2, [pc, #424]	; (8002034 <HAL_I2C_Init+0x274>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d802      	bhi.n	8001e94 <HAL_I2C_Init+0xd4>
 8001e8e:	68bb      	ldr	r3, [r7, #8]
 8001e90:	3301      	adds	r3, #1
 8001e92:	e009      	b.n	8001ea8 <HAL_I2C_Init+0xe8>
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001e9a:	fb02 f303 	mul.w	r3, r2, r3
 8001e9e:	4a69      	ldr	r2, [pc, #420]	; (8002044 <HAL_I2C_Init+0x284>)
 8001ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea4:	099b      	lsrs	r3, r3, #6
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6812      	ldr	r2, [r2, #0]
 8001eac:	430b      	orrs	r3, r1
 8001eae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001eba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	495c      	ldr	r1, [pc, #368]	; (8002034 <HAL_I2C_Init+0x274>)
 8001ec4:	428b      	cmp	r3, r1
 8001ec6:	d819      	bhi.n	8001efc <HAL_I2C_Init+0x13c>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	1e59      	subs	r1, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ed6:	1c59      	adds	r1, r3, #1
 8001ed8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001edc:	400b      	ands	r3, r1
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d00a      	beq.n	8001ef8 <HAL_I2C_Init+0x138>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	1e59      	subs	r1, r3, #1
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	005b      	lsls	r3, r3, #1
 8001eec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ef6:	e051      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001ef8:	2304      	movs	r3, #4
 8001efa:	e04f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d111      	bne.n	8001f28 <HAL_I2C_Init+0x168>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	1e58      	subs	r0, r3, #1
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6859      	ldr	r1, [r3, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	440b      	add	r3, r1
 8001f12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f16:	3301      	adds	r3, #1
 8001f18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	bf0c      	ite	eq
 8001f20:	2301      	moveq	r3, #1
 8001f22:	2300      	movne	r3, #0
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	e012      	b.n	8001f4e <HAL_I2C_Init+0x18e>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	1e58      	subs	r0, r3, #1
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6859      	ldr	r1, [r3, #4]
 8001f30:	460b      	mov	r3, r1
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	0099      	lsls	r1, r3, #2
 8001f38:	440b      	add	r3, r1
 8001f3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f3e:	3301      	adds	r3, #1
 8001f40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	bf0c      	ite	eq
 8001f48:	2301      	moveq	r3, #1
 8001f4a:	2300      	movne	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d001      	beq.n	8001f56 <HAL_I2C_Init+0x196>
 8001f52:	2301      	movs	r3, #1
 8001f54:	e022      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10e      	bne.n	8001f7c <HAL_I2C_Init+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	1e58      	subs	r0, r3, #1
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6859      	ldr	r1, [r3, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	440b      	add	r3, r1
 8001f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f7a:	e00f      	b.n	8001f9c <HAL_I2C_Init+0x1dc>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	1e58      	subs	r0, r3, #1
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6859      	ldr	r1, [r3, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	0099      	lsls	r1, r3, #2
 8001f8c:	440b      	add	r3, r1
 8001f8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f92:	3301      	adds	r3, #1
 8001f94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	6809      	ldr	r1, [r1, #0]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69da      	ldr	r2, [r3, #28]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a1b      	ldr	r3, [r3, #32]
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001fca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001fce:	687a      	ldr	r2, [r7, #4]
 8001fd0:	6911      	ldr	r1, [r2, #16]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	68d2      	ldr	r2, [r2, #12]
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6812      	ldr	r2, [r2, #0]
 8001fdc:	430b      	orrs	r3, r1
 8001fde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	699b      	ldr	r3, [r3, #24]
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681a      	ldr	r2, [r3, #0]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f042 0201 	orr.w	r2, r2, #1
 800200a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2220      	movs	r2, #32
 8002016:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2200      	movs	r2, #0
 8002024:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002028:	2300      	movs	r3, #0
}
 800202a:	4618      	mov	r0, r3
 800202c:	3710      	adds	r7, #16
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	000186a0 	.word	0x000186a0
 8002038:	001e847f 	.word	0x001e847f
 800203c:	003d08ff 	.word	0x003d08ff
 8002040:	431bde83 	.word	0x431bde83
 8002044:	10624dd3 	.word	0x10624dd3

08002048 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002048:	b480      	push	{r7}
 800204a:	b083      	sub	sp, #12
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b20      	cmp	r3, #32
 800205c:	d129      	bne.n	80020b2 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2224      	movs	r2, #36	; 0x24
 8002062:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	f022 0201 	bic.w	r2, r2, #1
 8002074:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f022 0210 	bic.w	r2, r2, #16
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	683a      	ldr	r2, [r7, #0]
 8002092:	430a      	orrs	r2, r1
 8002094:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f042 0201 	orr.w	r2, r2, #1
 80020a4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2220      	movs	r2, #32
 80020aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80020ae:	2300      	movs	r3, #0
 80020b0:	e000      	b.n	80020b4 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80020b2:	2302      	movs	r3, #2
  }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	2b20      	cmp	r3, #32
 80020d8:	d12a      	bne.n	8002130 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2224      	movs	r2, #36	; 0x24
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0201 	bic.w	r2, r2, #1
 80020f0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f8:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80020fa:	89fb      	ldrh	r3, [r7, #14]
 80020fc:	f023 030f 	bic.w	r3, r3, #15
 8002100:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	b29a      	uxth	r2, r3
 8002106:	89fb      	ldrh	r3, [r7, #14]
 8002108:	4313      	orrs	r3, r2
 800210a:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	89fa      	ldrh	r2, [r7, #14]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f042 0201 	orr.w	r2, r2, #1
 8002122:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2220      	movs	r2, #32
 8002128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
	...

08002140 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b082      	sub	sp, #8
 8002144:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002146:	2300      	movs	r3, #0
 8002148:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	603b      	str	r3, [r7, #0]
 800214e:	4b20      	ldr	r3, [pc, #128]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	4a1f      	ldr	r2, [pc, #124]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 8002154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002158:	6413      	str	r3, [r2, #64]	; 0x40
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <HAL_PWREx_EnableOverDrive+0x90>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002162:	603b      	str	r3, [r7, #0]
 8002164:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002166:	4b1b      	ldr	r3, [pc, #108]	; (80021d4 <HAL_PWREx_EnableOverDrive+0x94>)
 8002168:	2201      	movs	r2, #1
 800216a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800216c:	f7ff fa6a 	bl	8001644 <HAL_GetTick>
 8002170:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002172:	e009      	b.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002174:	f7ff fa66 	bl	8001644 <HAL_GetTick>
 8002178:	4602      	mov	r2, r0
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002182:	d901      	bls.n	8002188 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002184:	2303      	movs	r3, #3
 8002186:	e01f      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002188:	4b13      	ldr	r3, [pc, #76]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002190:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002194:	d1ee      	bne.n	8002174 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002196:	4b11      	ldr	r3, [pc, #68]	; (80021dc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002198:	2201      	movs	r2, #1
 800219a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800219c:	f7ff fa52 	bl	8001644 <HAL_GetTick>
 80021a0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a2:	e009      	b.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021a4:	f7ff fa4e 	bl	8001644 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021b2:	d901      	bls.n	80021b8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e007      	b.n	80021c8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021b8:	4b07      	ldr	r3, [pc, #28]	; (80021d8 <HAL_PWREx_EnableOverDrive+0x98>)
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021c4:	d1ee      	bne.n	80021a4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3708      	adds	r7, #8
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bd80      	pop	{r7, pc}
 80021d0:	40023800 	.word	0x40023800
 80021d4:	420e0040 	.word	0x420e0040
 80021d8:	40007000 	.word	0x40007000
 80021dc:	420e0044 	.word	0x420e0044

080021e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b086      	sub	sp, #24
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e264      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d075      	beq.n	80022ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80021fe:	4ba3      	ldr	r3, [pc, #652]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f003 030c 	and.w	r3, r3, #12
 8002206:	2b04      	cmp	r3, #4
 8002208:	d00c      	beq.n	8002224 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220a:	4ba0      	ldr	r3, [pc, #640]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002212:	2b08      	cmp	r3, #8
 8002214:	d112      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002216:	4b9d      	ldr	r3, [pc, #628]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800221e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002222:	d10b      	bne.n	800223c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002224:	4b99      	ldr	r3, [pc, #612]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d05b      	beq.n	80022e8 <HAL_RCC_OscConfig+0x108>
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d157      	bne.n	80022e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e23f      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002244:	d106      	bne.n	8002254 <HAL_RCC_OscConfig+0x74>
 8002246:	4b91      	ldr	r3, [pc, #580]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a90      	ldr	r2, [pc, #576]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800224c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002250:	6013      	str	r3, [r2, #0]
 8002252:	e01d      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800225c:	d10c      	bne.n	8002278 <HAL_RCC_OscConfig+0x98>
 800225e:	4b8b      	ldr	r3, [pc, #556]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a8a      	ldr	r2, [pc, #552]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002264:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002268:	6013      	str	r3, [r2, #0]
 800226a:	4b88      	ldr	r3, [pc, #544]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a87      	ldr	r2, [pc, #540]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002270:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002274:	6013      	str	r3, [r2, #0]
 8002276:	e00b      	b.n	8002290 <HAL_RCC_OscConfig+0xb0>
 8002278:	4b84      	ldr	r3, [pc, #528]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a83      	ldr	r2, [pc, #524]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800227e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002282:	6013      	str	r3, [r2, #0]
 8002284:	4b81      	ldr	r3, [pc, #516]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a80      	ldr	r2, [pc, #512]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800228a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800228e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d013      	beq.n	80022c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002298:	f7ff f9d4 	bl	8001644 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff f9d0 	bl	8001644 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e204      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b2:	4b76      	ldr	r3, [pc, #472]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d0f0      	beq.n	80022a0 <HAL_RCC_OscConfig+0xc0>
 80022be:	e014      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c0:	f7ff f9c0 	bl	8001644 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022c8:	f7ff f9bc 	bl	8001644 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e1f0      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022da:	4b6c      	ldr	r3, [pc, #432]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0xe8>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d063      	beq.n	80023be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80022f6:	4b65      	ldr	r3, [pc, #404]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80022f8:	689b      	ldr	r3, [r3, #8]
 80022fa:	f003 030c 	and.w	r3, r3, #12
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00b      	beq.n	800231a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002302:	4b62      	ldr	r3, [pc, #392]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800230a:	2b08      	cmp	r3, #8
 800230c:	d11c      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230e:	4b5f      	ldr	r3, [pc, #380]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002316:	2b00      	cmp	r3, #0
 8002318:	d116      	bne.n	8002348 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231a:	4b5c      	ldr	r3, [pc, #368]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d005      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e1c4      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002332:	4b56      	ldr	r3, [pc, #344]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	00db      	lsls	r3, r3, #3
 8002340:	4952      	ldr	r1, [pc, #328]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002342:	4313      	orrs	r3, r2
 8002344:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002346:	e03a      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d020      	beq.n	8002392 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002350:	4b4f      	ldr	r3, [pc, #316]	; (8002490 <HAL_RCC_OscConfig+0x2b0>)
 8002352:	2201      	movs	r2, #1
 8002354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002356:	f7ff f975 	bl	8001644 <HAL_GetTick>
 800235a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800235c:	e008      	b.n	8002370 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800235e:	f7ff f971 	bl	8001644 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b02      	cmp	r3, #2
 800236a:	d901      	bls.n	8002370 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	e1a5      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002370:	4b46      	ldr	r3, [pc, #280]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d0f0      	beq.n	800235e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4b43      	ldr	r3, [pc, #268]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	691b      	ldr	r3, [r3, #16]
 8002388:	00db      	lsls	r3, r3, #3
 800238a:	4940      	ldr	r1, [pc, #256]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800238c:	4313      	orrs	r3, r2
 800238e:	600b      	str	r3, [r1, #0]
 8002390:	e015      	b.n	80023be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002392:	4b3f      	ldr	r3, [pc, #252]	; (8002490 <HAL_RCC_OscConfig+0x2b0>)
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002398:	f7ff f954 	bl	8001644 <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800239e:	e008      	b.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023a0:	f7ff f950 	bl	8001644 <HAL_GetTick>
 80023a4:	4602      	mov	r2, r0
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	2b02      	cmp	r3, #2
 80023ac:	d901      	bls.n	80023b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80023ae:	2303      	movs	r3, #3
 80023b0:	e184      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	4b36      	ldr	r3, [pc, #216]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d1f0      	bne.n	80023a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d030      	beq.n	800242c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d016      	beq.n	8002400 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023d2:	4b30      	ldr	r3, [pc, #192]	; (8002494 <HAL_RCC_OscConfig+0x2b4>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d8:	f7ff f934 	bl	8001644 <HAL_GetTick>
 80023dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023de:	e008      	b.n	80023f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023e0:	f7ff f930 	bl	8001644 <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d901      	bls.n	80023f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e164      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f2:	4b26      	ldr	r3, [pc, #152]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d0f0      	beq.n	80023e0 <HAL_RCC_OscConfig+0x200>
 80023fe:	e015      	b.n	800242c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002400:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x2b4>)
 8002402:	2200      	movs	r2, #0
 8002404:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002406:	f7ff f91d 	bl	8001644 <HAL_GetTick>
 800240a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240c:	e008      	b.n	8002420 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800240e:	f7ff f919 	bl	8001644 <HAL_GetTick>
 8002412:	4602      	mov	r2, r0
 8002414:	693b      	ldr	r3, [r7, #16]
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	2b02      	cmp	r3, #2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e14d      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002420:	4b1a      	ldr	r3, [pc, #104]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1f0      	bne.n	800240e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0304 	and.w	r3, r3, #4
 8002434:	2b00      	cmp	r3, #0
 8002436:	f000 80a0 	beq.w	800257a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800243a:	2300      	movs	r3, #0
 800243c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243e:	4b13      	ldr	r3, [pc, #76]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002442:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10f      	bne.n	800246a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800244a:	2300      	movs	r3, #0
 800244c:	60bb      	str	r3, [r7, #8]
 800244e:	4b0f      	ldr	r3, [pc, #60]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	4a0e      	ldr	r2, [pc, #56]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002458:	6413      	str	r3, [r2, #64]	; 0x40
 800245a:	4b0c      	ldr	r3, [pc, #48]	; (800248c <HAL_RCC_OscConfig+0x2ac>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002466:	2301      	movs	r3, #1
 8002468:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800246a:	4b0b      	ldr	r3, [pc, #44]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002472:	2b00      	cmp	r3, #0
 8002474:	d121      	bne.n	80024ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002476:	4b08      	ldr	r3, [pc, #32]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a07      	ldr	r2, [pc, #28]	; (8002498 <HAL_RCC_OscConfig+0x2b8>)
 800247c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002482:	f7ff f8df 	bl	8001644 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002488:	e011      	b.n	80024ae <HAL_RCC_OscConfig+0x2ce>
 800248a:	bf00      	nop
 800248c:	40023800 	.word	0x40023800
 8002490:	42470000 	.word	0x42470000
 8002494:	42470e80 	.word	0x42470e80
 8002498:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800249c:	f7ff f8d2 	bl	8001644 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e106      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024ae:	4b85      	ldr	r3, [pc, #532]	; (80026c4 <HAL_RCC_OscConfig+0x4e4>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d0f0      	beq.n	800249c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2b01      	cmp	r3, #1
 80024c0:	d106      	bne.n	80024d0 <HAL_RCC_OscConfig+0x2f0>
 80024c2:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c6:	4a80      	ldr	r2, [pc, #512]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	6713      	str	r3, [r2, #112]	; 0x70
 80024ce:	e01c      	b.n	800250a <HAL_RCC_OscConfig+0x32a>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d10c      	bne.n	80024f2 <HAL_RCC_OscConfig+0x312>
 80024d8:	4b7b      	ldr	r3, [pc, #492]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024dc:	4a7a      	ldr	r2, [pc, #488]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024de:	f043 0304 	orr.w	r3, r3, #4
 80024e2:	6713      	str	r3, [r2, #112]	; 0x70
 80024e4:	4b78      	ldr	r3, [pc, #480]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	4a77      	ldr	r2, [pc, #476]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	6713      	str	r3, [r2, #112]	; 0x70
 80024f0:	e00b      	b.n	800250a <HAL_RCC_OscConfig+0x32a>
 80024f2:	4b75      	ldr	r3, [pc, #468]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f6:	4a74      	ldr	r2, [pc, #464]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6713      	str	r3, [r2, #112]	; 0x70
 80024fe:	4b72      	ldr	r3, [pc, #456]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002502:	4a71      	ldr	r2, [pc, #452]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002504:	f023 0304 	bic.w	r3, r3, #4
 8002508:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d015      	beq.n	800253e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002512:	f7ff f897 	bl	8001644 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800251a:	f7ff f893 	bl	8001644 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	f241 3288 	movw	r2, #5000	; 0x1388
 8002528:	4293      	cmp	r3, r2
 800252a:	d901      	bls.n	8002530 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	e0c5      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	4b65      	ldr	r3, [pc, #404]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f003 0302 	and.w	r3, r3, #2
 8002538:	2b00      	cmp	r3, #0
 800253a:	d0ee      	beq.n	800251a <HAL_RCC_OscConfig+0x33a>
 800253c:	e014      	b.n	8002568 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800253e:	f7ff f881 	bl	8001644 <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7ff f87d 	bl	8001644 <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0af      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	4b5a      	ldr	r3, [pc, #360]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d1ee      	bne.n	8002546 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002568:	7dfb      	ldrb	r3, [r7, #23]
 800256a:	2b01      	cmp	r3, #1
 800256c:	d105      	bne.n	800257a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800256e:	4b56      	ldr	r3, [pc, #344]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a55      	ldr	r2, [pc, #340]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002574:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	699b      	ldr	r3, [r3, #24]
 800257e:	2b00      	cmp	r3, #0
 8002580:	f000 809b 	beq.w	80026ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002584:	4b50      	ldr	r3, [pc, #320]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 030c 	and.w	r3, r3, #12
 800258c:	2b08      	cmp	r3, #8
 800258e:	d05c      	beq.n	800264a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	699b      	ldr	r3, [r3, #24]
 8002594:	2b02      	cmp	r3, #2
 8002596:	d141      	bne.n	800261c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b4c      	ldr	r3, [pc, #304]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800259a:	2200      	movs	r2, #0
 800259c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800259e:	f7ff f851 	bl	8001644 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025a6:	f7ff f84d 	bl	8001644 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e081      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025b8:	4b43      	ldr	r3, [pc, #268]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1f0      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	019b      	lsls	r3, r3, #6
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025da:	085b      	lsrs	r3, r3, #1
 80025dc:	3b01      	subs	r3, #1
 80025de:	041b      	lsls	r3, r3, #16
 80025e0:	431a      	orrs	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e6:	061b      	lsls	r3, r3, #24
 80025e8:	4937      	ldr	r1, [pc, #220]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025ee:	4b37      	ldr	r3, [pc, #220]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f4:	f7ff f826 	bl	8001644 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7ff f822 	bl	8001644 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e056      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260e:	4b2e      	ldr	r3, [pc, #184]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x41c>
 800261a:	e04e      	b.n	80026ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800261c:	4b2b      	ldr	r3, [pc, #172]	; (80026cc <HAL_RCC_OscConfig+0x4ec>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002622:	f7ff f80f 	bl	8001644 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002628:	e008      	b.n	800263c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800262a:	f7ff f80b 	bl	8001644 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d901      	bls.n	800263c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e03f      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800263c:	4b22      	ldr	r3, [pc, #136]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d1f0      	bne.n	800262a <HAL_RCC_OscConfig+0x44a>
 8002648:	e037      	b.n	80026ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e032      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002656:	4b1c      	ldr	r3, [pc, #112]	; (80026c8 <HAL_RCC_OscConfig+0x4e8>)
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	2b01      	cmp	r3, #1
 8002662:	d028      	beq.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d121      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267c:	429a      	cmp	r2, r3
 800267e:	d11a      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002686:	4013      	ands	r3, r2
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800268e:	4293      	cmp	r3, r2
 8002690:	d111      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800269c:	085b      	lsrs	r3, r3, #1
 800269e:	3b01      	subs	r3, #1
 80026a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d107      	bne.n	80026b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d001      	beq.n	80026ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80026ba:	2300      	movs	r3, #0
}
 80026bc:	4618      	mov	r0, r3
 80026be:	3718      	adds	r7, #24
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40007000 	.word	0x40007000
 80026c8:	40023800 	.word	0x40023800
 80026cc:	42470060 	.word	0x42470060

080026d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
 80026d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0cc      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b68      	ldr	r3, [pc, #416]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d90c      	bls.n	800270c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b65      	ldr	r3, [pc, #404]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	b2d2      	uxtb	r2, r2
 80026f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80026fa:	4b63      	ldr	r3, [pc, #396]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 030f 	and.w	r3, r3, #15
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e0b8      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f003 0302 	and.w	r3, r3, #2
 8002714:	2b00      	cmp	r3, #0
 8002716:	d020      	beq.n	800275a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f003 0304 	and.w	r3, r3, #4
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002724:	4b59      	ldr	r3, [pc, #356]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	4a58      	ldr	r2, [pc, #352]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800272a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800272e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0308 	and.w	r3, r3, #8
 8002738:	2b00      	cmp	r3, #0
 800273a:	d005      	beq.n	8002748 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800273c:	4b53      	ldr	r3, [pc, #332]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	4a52      	ldr	r2, [pc, #328]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002742:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002746:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002748:	4b50      	ldr	r3, [pc, #320]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	494d      	ldr	r1, [pc, #308]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002756:	4313      	orrs	r3, r2
 8002758:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	d044      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b01      	cmp	r3, #1
 800276c:	d107      	bne.n	800277e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800276e:	4b47      	ldr	r3, [pc, #284]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d119      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e07f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	2b02      	cmp	r3, #2
 8002784:	d003      	beq.n	800278e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800278a:	2b03      	cmp	r3, #3
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b3f      	ldr	r3, [pc, #252]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e06f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3b      	ldr	r3, [pc, #236]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e067      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b37      	ldr	r3, [pc, #220]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4934      	ldr	r1, [pc, #208]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027c0:	f7fe ff40 	bl	8001644 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe ff3c 	bl	8001644 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e04f      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2b      	ldr	r3, [pc, #172]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b25      	ldr	r3, [pc, #148]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d20c      	bcs.n	8002818 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b22      	ldr	r3, [pc, #136]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b20      	ldr	r3, [pc, #128]	; (8002888 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e032      	b.n	800287e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002824:	4b19      	ldr	r3, [pc, #100]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	4916      	ldr	r1, [pc, #88]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	4313      	orrs	r3, r2
 8002834:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002842:	4b12      	ldr	r3, [pc, #72]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	490e      	ldr	r1, [pc, #56]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	4313      	orrs	r3, r2
 8002854:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002856:	f000 f821 	bl	800289c <HAL_RCC_GetSysClockFreq>
 800285a:	4602      	mov	r2, r0
 800285c:	4b0b      	ldr	r3, [pc, #44]	; (800288c <HAL_RCC_ClockConfig+0x1bc>)
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	091b      	lsrs	r3, r3, #4
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	490a      	ldr	r1, [pc, #40]	; (8002890 <HAL_RCC_ClockConfig+0x1c0>)
 8002868:	5ccb      	ldrb	r3, [r1, r3]
 800286a:	fa22 f303 	lsr.w	r3, r2, r3
 800286e:	4a09      	ldr	r2, [pc, #36]	; (8002894 <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002872:	4b09      	ldr	r3, [pc, #36]	; (8002898 <HAL_RCC_ClockConfig+0x1c8>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fe fea0 	bl	80015bc <HAL_InitTick>

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}
 8002886:	bf00      	nop
 8002888:	40023c00 	.word	0x40023c00
 800288c:	40023800 	.word	0x40023800
 8002890:	08005898 	.word	0x08005898
 8002894:	20000000 	.word	0x20000000
 8002898:	20000004 	.word	0x20000004

0800289c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800289c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028a0:	b084      	sub	sp, #16
 80028a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80028a4:	2300      	movs	r3, #0
 80028a6:	607b      	str	r3, [r7, #4]
 80028a8:	2300      	movs	r3, #0
 80028aa:	60fb      	str	r3, [r7, #12]
 80028ac:	2300      	movs	r3, #0
 80028ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80028b0:	2300      	movs	r3, #0
 80028b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028b4:	4b67      	ldr	r3, [pc, #412]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f003 030c 	and.w	r3, r3, #12
 80028bc:	2b08      	cmp	r3, #8
 80028be:	d00d      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x40>
 80028c0:	2b08      	cmp	r3, #8
 80028c2:	f200 80bd 	bhi.w	8002a40 <HAL_RCC_GetSysClockFreq+0x1a4>
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d002      	beq.n	80028d0 <HAL_RCC_GetSysClockFreq+0x34>
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d003      	beq.n	80028d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80028ce:	e0b7      	b.n	8002a40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d0:	4b61      	ldr	r3, [pc, #388]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028d2:	60bb      	str	r3, [r7, #8]
       break;
 80028d4:	e0b7      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028d6:	4b61      	ldr	r3, [pc, #388]	; (8002a5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80028d8:	60bb      	str	r3, [r7, #8]
      break;
 80028da:	e0b4      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028dc:	4b5d      	ldr	r3, [pc, #372]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d04d      	beq.n	800298e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028f2:	4b58      	ldr	r3, [pc, #352]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	099b      	lsrs	r3, r3, #6
 80028f8:	461a      	mov	r2, r3
 80028fa:	f04f 0300 	mov.w	r3, #0
 80028fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002902:	f04f 0100 	mov.w	r1, #0
 8002906:	ea02 0800 	and.w	r8, r2, r0
 800290a:	ea03 0901 	and.w	r9, r3, r1
 800290e:	4640      	mov	r0, r8
 8002910:	4649      	mov	r1, r9
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	014b      	lsls	r3, r1, #5
 800291c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002920:	0142      	lsls	r2, r0, #5
 8002922:	4610      	mov	r0, r2
 8002924:	4619      	mov	r1, r3
 8002926:	ebb0 0008 	subs.w	r0, r0, r8
 800292a:	eb61 0109 	sbc.w	r1, r1, r9
 800292e:	f04f 0200 	mov.w	r2, #0
 8002932:	f04f 0300 	mov.w	r3, #0
 8002936:	018b      	lsls	r3, r1, #6
 8002938:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800293c:	0182      	lsls	r2, r0, #6
 800293e:	1a12      	subs	r2, r2, r0
 8002940:	eb63 0301 	sbc.w	r3, r3, r1
 8002944:	f04f 0000 	mov.w	r0, #0
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	00d9      	lsls	r1, r3, #3
 800294e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002952:	00d0      	lsls	r0, r2, #3
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	eb12 0208 	adds.w	r2, r2, r8
 800295c:	eb43 0309 	adc.w	r3, r3, r9
 8002960:	f04f 0000 	mov.w	r0, #0
 8002964:	f04f 0100 	mov.w	r1, #0
 8002968:	0259      	lsls	r1, r3, #9
 800296a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800296e:	0250      	lsls	r0, r2, #9
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	461a      	mov	r2, r3
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	f7fd fc86 	bl	8000290 <__aeabi_uldivmod>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4613      	mov	r3, r2
 800298a:	60fb      	str	r3, [r7, #12]
 800298c:	e04a      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800298e:	4b31      	ldr	r3, [pc, #196]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	099b      	lsrs	r3, r3, #6
 8002994:	461a      	mov	r2, r3
 8002996:	f04f 0300 	mov.w	r3, #0
 800299a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800299e:	f04f 0100 	mov.w	r1, #0
 80029a2:	ea02 0400 	and.w	r4, r2, r0
 80029a6:	ea03 0501 	and.w	r5, r3, r1
 80029aa:	4620      	mov	r0, r4
 80029ac:	4629      	mov	r1, r5
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	014b      	lsls	r3, r1, #5
 80029b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029bc:	0142      	lsls	r2, r0, #5
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	1b00      	subs	r0, r0, r4
 80029c4:	eb61 0105 	sbc.w	r1, r1, r5
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	018b      	lsls	r3, r1, #6
 80029d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80029d6:	0182      	lsls	r2, r0, #6
 80029d8:	1a12      	subs	r2, r2, r0
 80029da:	eb63 0301 	sbc.w	r3, r3, r1
 80029de:	f04f 0000 	mov.w	r0, #0
 80029e2:	f04f 0100 	mov.w	r1, #0
 80029e6:	00d9      	lsls	r1, r3, #3
 80029e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80029ec:	00d0      	lsls	r0, r2, #3
 80029ee:	4602      	mov	r2, r0
 80029f0:	460b      	mov	r3, r1
 80029f2:	1912      	adds	r2, r2, r4
 80029f4:	eb45 0303 	adc.w	r3, r5, r3
 80029f8:	f04f 0000 	mov.w	r0, #0
 80029fc:	f04f 0100 	mov.w	r1, #0
 8002a00:	0299      	lsls	r1, r3, #10
 8002a02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a06:	0290      	lsls	r0, r2, #10
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	461a      	mov	r2, r3
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	f7fd fc3a 	bl	8000290 <__aeabi_uldivmod>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4613      	mov	r3, r2
 8002a22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002a24:	4b0b      	ldr	r3, [pc, #44]	; (8002a54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0c1b      	lsrs	r3, r3, #16
 8002a2a:	f003 0303 	and.w	r3, r3, #3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	005b      	lsls	r3, r3, #1
 8002a32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a3c:	60bb      	str	r3, [r7, #8]
      break;
 8002a3e:	e002      	b.n	8002a46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a40:	4b05      	ldr	r3, [pc, #20]	; (8002a58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a42:	60bb      	str	r3, [r7, #8]
      break;
 8002a44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a46:	68bb      	ldr	r3, [r7, #8]
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a52:	bf00      	nop
 8002a54:	40023800 	.word	0x40023800
 8002a58:	00f42400 	.word	0x00f42400
 8002a5c:	007a1200 	.word	0x007a1200

08002a60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a64:	4b03      	ldr	r3, [pc, #12]	; (8002a74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a66:	681b      	ldr	r3, [r3, #0]
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	20000000 	.word	0x20000000

08002a78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002a7c:	f7ff fff0 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0a9b      	lsrs	r3, r3, #10
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4903      	ldr	r1, [pc, #12]	; (8002a9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a94:	4618      	mov	r0, r3
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080058a8 	.word	0x080058a8

08002aa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002aa4:	f7ff ffdc 	bl	8002a60 <HAL_RCC_GetHCLKFreq>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	4b05      	ldr	r3, [pc, #20]	; (8002ac0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	0b5b      	lsrs	r3, r3, #13
 8002ab0:	f003 0307 	and.w	r3, r3, #7
 8002ab4:	4903      	ldr	r1, [pc, #12]	; (8002ac4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ab6:	5ccb      	ldrb	r3, [r1, r3]
 8002ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	080058a8 	.word	0x080058a8

08002ac8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d101      	bne.n	8002ada <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ad6:	2301      	movs	r3, #1
 8002ad8:	e041      	b.n	8002b5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d106      	bne.n	8002af4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f7fe fb2c 	bl	800114c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	3304      	adds	r3, #4
 8002b04:	4619      	mov	r1, r3
 8002b06:	4610      	mov	r0, r2
 8002b08:	f000 fc12 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2201      	movs	r2, #1
 8002b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}

08002b66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b66:	b580      	push	{r7, lr}
 8002b68:	b082      	sub	sp, #8
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d101      	bne.n	8002b78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	e041      	b.n	8002bfc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d106      	bne.n	8002b92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f839 	bl	8002c04 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2202      	movs	r2, #2
 8002b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	3304      	adds	r3, #4
 8002ba2:	4619      	mov	r1, r3
 8002ba4:	4610      	mov	r0, r2
 8002ba6:	f000 fbc3 	bl	8003330 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2201      	movs	r2, #1
 8002bde:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2201      	movs	r2, #1
 8002be6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2201      	movs	r2, #1
 8002bf6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3708      	adds	r7, #8
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b084      	sub	sp, #16
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d109      	bne.n	8002c3c <HAL_TIM_PWM_Start+0x24>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	bf14      	ite	ne
 8002c34:	2301      	movne	r3, #1
 8002c36:	2300      	moveq	r3, #0
 8002c38:	b2db      	uxtb	r3, r3
 8002c3a:	e022      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	2b04      	cmp	r3, #4
 8002c40:	d109      	bne.n	8002c56 <HAL_TIM_PWM_Start+0x3e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	bf14      	ite	ne
 8002c4e:	2301      	movne	r3, #1
 8002c50:	2300      	moveq	r3, #0
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	e015      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	2b08      	cmp	r3, #8
 8002c5a:	d109      	bne.n	8002c70 <HAL_TIM_PWM_Start+0x58>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	bf14      	ite	ne
 8002c68:	2301      	movne	r3, #1
 8002c6a:	2300      	moveq	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e008      	b.n	8002c82 <HAL_TIM_PWM_Start+0x6a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	bf14      	ite	ne
 8002c7c:	2301      	movne	r3, #1
 8002c7e:	2300      	moveq	r3, #0
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e07c      	b.n	8002d84 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d104      	bne.n	8002c9a <HAL_TIM_PWM_Start+0x82>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2202      	movs	r2, #2
 8002c94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c98:	e013      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	2b04      	cmp	r3, #4
 8002c9e:	d104      	bne.n	8002caa <HAL_TIM_PWM_Start+0x92>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ca8:	e00b      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	2b08      	cmp	r3, #8
 8002cae:	d104      	bne.n	8002cba <HAL_TIM_PWM_Start+0xa2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2202      	movs	r2, #2
 8002cb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cb8:	e003      	b.n	8002cc2 <HAL_TIM_PWM_Start+0xaa>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	6839      	ldr	r1, [r7, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 fe1a 	bl	8003904 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_TIM_PWM_Start+0x174>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d004      	beq.n	8002ce4 <HAL_TIM_PWM_Start+0xcc>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_TIM_PWM_Start+0x178>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d101      	bne.n	8002ce8 <HAL_TIM_PWM_Start+0xd0>
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e000      	b.n	8002cea <HAL_TIM_PWM_Start+0xd2>
 8002ce8:	2300      	movs	r3, #0
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d007      	beq.n	8002cfe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <HAL_TIM_PWM_Start+0x174>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d022      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d10:	d01d      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a1f      	ldr	r2, [pc, #124]	; (8002d94 <HAL_TIM_PWM_Start+0x17c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d018      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a1d      	ldr	r2, [pc, #116]	; (8002d98 <HAL_TIM_PWM_Start+0x180>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d013      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a1c      	ldr	r2, [pc, #112]	; (8002d9c <HAL_TIM_PWM_Start+0x184>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00e      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a16      	ldr	r2, [pc, #88]	; (8002d90 <HAL_TIM_PWM_Start+0x178>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d009      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_TIM_PWM_Start+0x188>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d004      	beq.n	8002d4e <HAL_TIM_PWM_Start+0x136>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <HAL_TIM_PWM_Start+0x18c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d111      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2b06      	cmp	r3, #6
 8002d5e:	d010      	beq.n	8002d82 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d70:	e007      	b.n	8002d82 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f042 0201 	orr.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3710      	adds	r7, #16
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40010000 	.word	0x40010000
 8002d90:	40010400 	.word	0x40010400
 8002d94:	40000400 	.word	0x40000400
 8002d98:	40000800 	.word	0x40000800
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40014000 	.word	0x40014000
 8002da4:	40001800 	.word	0x40001800

08002da8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d122      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	f003 0302 	and.w	r3, r3, #2
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d11b      	bne.n	8002e04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f06f 0202 	mvn.w	r2, #2
 8002dd4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2201      	movs	r2, #1
 8002dda:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	699b      	ldr	r3, [r3, #24]
 8002de2:	f003 0303 	and.w	r3, r3, #3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d003      	beq.n	8002df2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 fa81 	bl	80032f2 <HAL_TIM_IC_CaptureCallback>
 8002df0:	e005      	b.n	8002dfe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 fa73 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	f000 fa84 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	691b      	ldr	r3, [r3, #16]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d122      	bne.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d11b      	bne.n	8002e58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f06f 0204 	mvn.w	r2, #4
 8002e28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d003      	beq.n	8002e46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fa57 	bl	80032f2 <HAL_TIM_IC_CaptureCallback>
 8002e44:	e005      	b.n	8002e52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f000 fa49 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f000 fa5a 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2200      	movs	r2, #0
 8002e56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	691b      	ldr	r3, [r3, #16]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d122      	bne.n	8002eac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	68db      	ldr	r3, [r3, #12]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d11b      	bne.n	8002eac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f06f 0208 	mvn.w	r2, #8
 8002e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2204      	movs	r2, #4
 8002e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	69db      	ldr	r3, [r3, #28]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d003      	beq.n	8002e9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 fa2d 	bl	80032f2 <HAL_TIM_IC_CaptureCallback>
 8002e98:	e005      	b.n	8002ea6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 fa1f 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa30 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d122      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	f003 0310 	and.w	r3, r3, #16
 8002ec4:	2b10      	cmp	r3, #16
 8002ec6:	d11b      	bne.n	8002f00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f06f 0210 	mvn.w	r2, #16
 8002ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2208      	movs	r2, #8
 8002ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	69db      	ldr	r3, [r3, #28]
 8002ede:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d003      	beq.n	8002eee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 fa03 	bl	80032f2 <HAL_TIM_IC_CaptureCallback>
 8002eec:	e005      	b.n	8002efa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f000 f9f5 	bl	80032de <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fa06 	bl	8003306 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10e      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68db      	ldr	r3, [r3, #12]
 8002f14:	f003 0301 	and.w	r3, r3, #1
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f06f 0201 	mvn.w	r2, #1
 8002f24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	f000 f9cf 	bl	80032ca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	691b      	ldr	r3, [r3, #16]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d10e      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f44:	2b80      	cmp	r3, #128	; 0x80
 8002f46:	d107      	bne.n	8002f58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fd82 	bl	8003a5c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d10e      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b40      	cmp	r3, #64	; 0x40
 8002f72:	d107      	bne.n	8002f84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9cb 	bl	800331a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691b      	ldr	r3, [r3, #16]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d10e      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	f003 0320 	and.w	r3, r3, #32
 8002f9c:	2b20      	cmp	r3, #32
 8002f9e:	d107      	bne.n	8002fb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f06f 0220 	mvn.w	r2, #32
 8002fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f000 fd4c 	bl	8003a48 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b086      	sub	sp, #24
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	60f8      	str	r0, [r7, #12]
 8002fc0:	60b9      	str	r1, [r7, #8]
 8002fc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0ae      	b.n	8003134 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2b0c      	cmp	r3, #12
 8002fe2:	f200 809f 	bhi.w	8003124 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002fe6:	a201      	add	r2, pc, #4	; (adr r2, 8002fec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fec:	08003021 	.word	0x08003021
 8002ff0:	08003125 	.word	0x08003125
 8002ff4:	08003125 	.word	0x08003125
 8002ff8:	08003125 	.word	0x08003125
 8002ffc:	08003061 	.word	0x08003061
 8003000:	08003125 	.word	0x08003125
 8003004:	08003125 	.word	0x08003125
 8003008:	08003125 	.word	0x08003125
 800300c:	080030a3 	.word	0x080030a3
 8003010:	08003125 	.word	0x08003125
 8003014:	08003125 	.word	0x08003125
 8003018:	08003125 	.word	0x08003125
 800301c:	080030e3 	.word	0x080030e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	68b9      	ldr	r1, [r7, #8]
 8003026:	4618      	mov	r0, r3
 8003028:	f000 fa22 	bl	8003470 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	699a      	ldr	r2, [r3, #24]
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0208 	orr.w	r2, r2, #8
 800303a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	699a      	ldr	r2, [r3, #24]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 0204 	bic.w	r2, r2, #4
 800304a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6999      	ldr	r1, [r3, #24]
 8003052:	68bb      	ldr	r3, [r7, #8]
 8003054:	691a      	ldr	r2, [r3, #16]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	619a      	str	r2, [r3, #24]
      break;
 800305e:	e064      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	4618      	mov	r0, r3
 8003068:	f000 fa72 	bl	8003550 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699a      	ldr	r2, [r3, #24]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800307a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	699a      	ldr	r2, [r3, #24]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800308a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6999      	ldr	r1, [r3, #24]
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	691b      	ldr	r3, [r3, #16]
 8003096:	021a      	lsls	r2, r3, #8
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	430a      	orrs	r2, r1
 800309e:	619a      	str	r2, [r3, #24]
      break;
 80030a0:	e043      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	68b9      	ldr	r1, [r7, #8]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fac7 	bl	800363c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	69da      	ldr	r2, [r3, #28]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0208 	orr.w	r2, r2, #8
 80030bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	69da      	ldr	r2, [r3, #28]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0204 	bic.w	r2, r2, #4
 80030cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	69d9      	ldr	r1, [r3, #28]
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	691a      	ldr	r2, [r3, #16]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	61da      	str	r2, [r3, #28]
      break;
 80030e0:	e023      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68b9      	ldr	r1, [r7, #8]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f000 fb1b 	bl	8003724 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	69da      	ldr	r2, [r3, #28]
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	69da      	ldr	r2, [r3, #28]
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800310c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	69d9      	ldr	r1, [r3, #28]
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	021a      	lsls	r2, r3, #8
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	430a      	orrs	r2, r1
 8003120:	61da      	str	r2, [r3, #28]
      break;
 8003122:	e002      	b.n	800312a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	75fb      	strb	r3, [r7, #23]
      break;
 8003128:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003132:	7dfb      	ldrb	r3, [r7, #23]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3718      	adds	r7, #24
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003146:	2300      	movs	r3, #0
 8003148:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003150:	2b01      	cmp	r3, #1
 8003152:	d101      	bne.n	8003158 <HAL_TIM_ConfigClockSource+0x1c>
 8003154:	2302      	movs	r3, #2
 8003156:	e0b4      	b.n	80032c2 <HAL_TIM_ConfigClockSource+0x186>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003176:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800317e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003190:	d03e      	beq.n	8003210 <HAL_TIM_ConfigClockSource+0xd4>
 8003192:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003196:	f200 8087 	bhi.w	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 800319a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800319e:	f000 8086 	beq.w	80032ae <HAL_TIM_ConfigClockSource+0x172>
 80031a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031a6:	d87f      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031a8:	2b70      	cmp	r3, #112	; 0x70
 80031aa:	d01a      	beq.n	80031e2 <HAL_TIM_ConfigClockSource+0xa6>
 80031ac:	2b70      	cmp	r3, #112	; 0x70
 80031ae:	d87b      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031b0:	2b60      	cmp	r3, #96	; 0x60
 80031b2:	d050      	beq.n	8003256 <HAL_TIM_ConfigClockSource+0x11a>
 80031b4:	2b60      	cmp	r3, #96	; 0x60
 80031b6:	d877      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031b8:	2b50      	cmp	r3, #80	; 0x50
 80031ba:	d03c      	beq.n	8003236 <HAL_TIM_ConfigClockSource+0xfa>
 80031bc:	2b50      	cmp	r3, #80	; 0x50
 80031be:	d873      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031c0:	2b40      	cmp	r3, #64	; 0x40
 80031c2:	d058      	beq.n	8003276 <HAL_TIM_ConfigClockSource+0x13a>
 80031c4:	2b40      	cmp	r3, #64	; 0x40
 80031c6:	d86f      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031c8:	2b30      	cmp	r3, #48	; 0x30
 80031ca:	d064      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x15a>
 80031cc:	2b30      	cmp	r3, #48	; 0x30
 80031ce:	d86b      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d0:	2b20      	cmp	r3, #32
 80031d2:	d060      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x15a>
 80031d4:	2b20      	cmp	r3, #32
 80031d6:	d867      	bhi.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d05c      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x15a>
 80031dc:	2b10      	cmp	r3, #16
 80031de:	d05a      	beq.n	8003296 <HAL_TIM_ConfigClockSource+0x15a>
 80031e0:	e062      	b.n	80032a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6818      	ldr	r0, [r3, #0]
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	6899      	ldr	r1, [r3, #8]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	685a      	ldr	r2, [r3, #4]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	68db      	ldr	r3, [r3, #12]
 80031f2:	f000 fb67 	bl	80038c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80031fe:	68bb      	ldr	r3, [r7, #8]
 8003200:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003204:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68ba      	ldr	r2, [r7, #8]
 800320c:	609a      	str	r2, [r3, #8]
      break;
 800320e:	e04f      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6818      	ldr	r0, [r3, #0]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	6899      	ldr	r1, [r3, #8]
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	f000 fb50 	bl	80038c4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003232:	609a      	str	r2, [r3, #8]
      break;
 8003234:	e03c      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6818      	ldr	r0, [r3, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	6859      	ldr	r1, [r3, #4]
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	68db      	ldr	r3, [r3, #12]
 8003242:	461a      	mov	r2, r3
 8003244:	f000 fac4 	bl	80037d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	2150      	movs	r1, #80	; 0x50
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fb1d 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 8003254:	e02c      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6818      	ldr	r0, [r3, #0]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	6859      	ldr	r1, [r3, #4]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	68db      	ldr	r3, [r3, #12]
 8003262:	461a      	mov	r2, r3
 8003264:	f000 fae3 	bl	800382e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2160      	movs	r1, #96	; 0x60
 800326e:	4618      	mov	r0, r3
 8003270:	f000 fb0d 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 8003274:	e01c      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6818      	ldr	r0, [r3, #0]
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	6859      	ldr	r1, [r3, #4]
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	68db      	ldr	r3, [r3, #12]
 8003282:	461a      	mov	r2, r3
 8003284:	f000 faa4 	bl	80037d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2140      	movs	r1, #64	; 0x40
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fafd 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 8003294:	e00c      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4619      	mov	r1, r3
 80032a0:	4610      	mov	r0, r2
 80032a2:	f000 faf4 	bl	800388e <TIM_ITRx_SetConfig>
      break;
 80032a6:	e003      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80032a8:	2301      	movs	r3, #1
 80032aa:	73fb      	strb	r3, [r7, #15]
      break;
 80032ac:	e000      	b.n	80032b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80032ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2201      	movs	r2, #1
 80032b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2200      	movs	r2, #0
 80032bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80032c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032ca:	b480      	push	{r7}
 80032cc:	b083      	sub	sp, #12
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr

080032de <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032de:	b480      	push	{r7}
 80032e0:	b083      	sub	sp, #12
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80032e6:	bf00      	nop
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f0:	4770      	bx	lr

080032f2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032f2:	b480      	push	{r7}
 80032f4:	b083      	sub	sp, #12
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032fa:	bf00      	nop
 80032fc:	370c      	adds	r7, #12
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr

08003306 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003306:	b480      	push	{r7}
 8003308:	b083      	sub	sp, #12
 800330a:	af00      	add	r7, sp, #0
 800330c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800330e:	bf00      	nop
 8003310:	370c      	adds	r7, #12
 8003312:	46bd      	mov	sp, r7
 8003314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003318:	4770      	bx	lr

0800331a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
	...

08003330 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
 8003338:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	4a40      	ldr	r2, [pc, #256]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a3d      	ldr	r2, [pc, #244]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a3c      	ldr	r2, [pc, #240]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <TIM_Base_SetConfig+0x120>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0x40>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a3a      	ldr	r2, [pc, #232]	; (8003454 <TIM_Base_SetConfig+0x124>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d108      	bne.n	8003382 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003376:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4313      	orrs	r3, r2
 8003380:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	4a2f      	ldr	r2, [pc, #188]	; (8003444 <TIM_Base_SetConfig+0x114>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d02b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003390:	d027      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	4a2c      	ldr	r2, [pc, #176]	; (8003448 <TIM_Base_SetConfig+0x118>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d023      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a2b      	ldr	r2, [pc, #172]	; (800344c <TIM_Base_SetConfig+0x11c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d01f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a2a      	ldr	r2, [pc, #168]	; (8003450 <TIM_Base_SetConfig+0x120>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d01b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a29      	ldr	r2, [pc, #164]	; (8003454 <TIM_Base_SetConfig+0x124>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d017      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a28      	ldr	r2, [pc, #160]	; (8003458 <TIM_Base_SetConfig+0x128>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d013      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a27      	ldr	r2, [pc, #156]	; (800345c <TIM_Base_SetConfig+0x12c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d00f      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a26      	ldr	r2, [pc, #152]	; (8003460 <TIM_Base_SetConfig+0x130>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d00b      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a25      	ldr	r2, [pc, #148]	; (8003464 <TIM_Base_SetConfig+0x134>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d007      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a24      	ldr	r2, [pc, #144]	; (8003468 <TIM_Base_SetConfig+0x138>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d003      	beq.n	80033e2 <TIM_Base_SetConfig+0xb2>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a23      	ldr	r2, [pc, #140]	; (800346c <TIM_Base_SetConfig+0x13c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d108      	bne.n	80033f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	68db      	ldr	r3, [r3, #12]
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4313      	orrs	r3, r2
 80033f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	695b      	ldr	r3, [r3, #20]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	4a0a      	ldr	r2, [pc, #40]	; (8003444 <TIM_Base_SetConfig+0x114>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <TIM_Base_SetConfig+0xf8>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	4a0c      	ldr	r2, [pc, #48]	; (8003454 <TIM_Base_SetConfig+0x124>)
 8003424:	4293      	cmp	r3, r2
 8003426:	d103      	bne.n	8003430 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003428:	683b      	ldr	r3, [r7, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	615a      	str	r2, [r3, #20]
}
 8003436:	bf00      	nop
 8003438:	3714      	adds	r7, #20
 800343a:	46bd      	mov	sp, r7
 800343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003440:	4770      	bx	lr
 8003442:	bf00      	nop
 8003444:	40010000 	.word	0x40010000
 8003448:	40000400 	.word	0x40000400
 800344c:	40000800 	.word	0x40000800
 8003450:	40000c00 	.word	0x40000c00
 8003454:	40010400 	.word	0x40010400
 8003458:	40014000 	.word	0x40014000
 800345c:	40014400 	.word	0x40014400
 8003460:	40014800 	.word	0x40014800
 8003464:	40001800 	.word	0x40001800
 8003468:	40001c00 	.word	0x40001c00
 800346c:	40002000 	.word	0x40002000

08003470 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003470:	b480      	push	{r7}
 8003472:	b087      	sub	sp, #28
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	f023 0201 	bic.w	r2, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6a1b      	ldr	r3, [r3, #32]
 800348a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	699b      	ldr	r3, [r3, #24]
 8003496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800349e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 0303 	bic.w	r3, r3, #3
 80034a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	f023 0302 	bic.w	r3, r3, #2
 80034b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4313      	orrs	r3, r2
 80034c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <TIM_OC1_SetConfig+0xd8>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d003      	beq.n	80034d4 <TIM_OC1_SetConfig+0x64>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <TIM_OC1_SetConfig+0xdc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d10c      	bne.n	80034ee <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	f023 0308 	bic.w	r3, r3, #8
 80034da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	697a      	ldr	r2, [r7, #20]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	f023 0304 	bic.w	r3, r3, #4
 80034ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a15      	ldr	r2, [pc, #84]	; (8003548 <TIM_OC1_SetConfig+0xd8>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d003      	beq.n	80034fe <TIM_OC1_SetConfig+0x8e>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	4a14      	ldr	r2, [pc, #80]	; (800354c <TIM_OC1_SetConfig+0xdc>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d111      	bne.n	8003522 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003504:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800350c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	693a      	ldr	r2, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	699b      	ldr	r3, [r3, #24]
 800351c:	693a      	ldr	r2, [r7, #16]
 800351e:	4313      	orrs	r3, r2
 8003520:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	693a      	ldr	r2, [r7, #16]
 8003526:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	68fa      	ldr	r2, [r7, #12]
 800352c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	697a      	ldr	r2, [r7, #20]
 800353a:	621a      	str	r2, [r3, #32]
}
 800353c:	bf00      	nop
 800353e:	371c      	adds	r7, #28
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	40010000 	.word	0x40010000
 800354c:	40010400 	.word	0x40010400

08003550 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003550:	b480      	push	{r7}
 8003552:	b087      	sub	sp, #28
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
 8003558:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a1b      	ldr	r3, [r3, #32]
 800355e:	f023 0210 	bic.w	r2, r3, #16
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	699b      	ldr	r3, [r3, #24]
 8003576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800357e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003586:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	021b      	lsls	r3, r3, #8
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	4313      	orrs	r3, r2
 8003592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	f023 0320 	bic.w	r3, r3, #32
 800359a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	011b      	lsls	r3, r3, #4
 80035a2:	697a      	ldr	r2, [r7, #20]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a22      	ldr	r2, [pc, #136]	; (8003634 <TIM_OC2_SetConfig+0xe4>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d003      	beq.n	80035b8 <TIM_OC2_SetConfig+0x68>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a21      	ldr	r2, [pc, #132]	; (8003638 <TIM_OC2_SetConfig+0xe8>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d10d      	bne.n	80035d4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	011b      	lsls	r3, r3, #4
 80035c6:	697a      	ldr	r2, [r7, #20]
 80035c8:	4313      	orrs	r3, r2
 80035ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80035d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a17      	ldr	r2, [pc, #92]	; (8003634 <TIM_OC2_SetConfig+0xe4>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d003      	beq.n	80035e4 <TIM_OC2_SetConfig+0x94>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a16      	ldr	r2, [pc, #88]	; (8003638 <TIM_OC2_SetConfig+0xe8>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d113      	bne.n	800360c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035ea:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035f2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	693a      	ldr	r2, [r7, #16]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	693a      	ldr	r2, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	685a      	ldr	r2, [r3, #4]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	697a      	ldr	r2, [r7, #20]
 8003624:	621a      	str	r2, [r3, #32]
}
 8003626:	bf00      	nop
 8003628:	371c      	adds	r7, #28
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40010000 	.word	0x40010000
 8003638:	40010400 	.word	0x40010400

0800363c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800363c:	b480      	push	{r7}
 800363e:	b087      	sub	sp, #28
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a1b      	ldr	r3, [r3, #32]
 800364a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
 8003656:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69db      	ldr	r3, [r3, #28]
 8003662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800366a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0303 	bic.w	r3, r3, #3
 8003672:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	4313      	orrs	r3, r2
 800367c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800367e:	697b      	ldr	r3, [r7, #20]
 8003680:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003684:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	021b      	lsls	r3, r3, #8
 800368c:	697a      	ldr	r2, [r7, #20]
 800368e:	4313      	orrs	r3, r2
 8003690:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a21      	ldr	r2, [pc, #132]	; (800371c <TIM_OC3_SetConfig+0xe0>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d003      	beq.n	80036a2 <TIM_OC3_SetConfig+0x66>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a20      	ldr	r2, [pc, #128]	; (8003720 <TIM_OC3_SetConfig+0xe4>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d10d      	bne.n	80036be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	68db      	ldr	r3, [r3, #12]
 80036ae:	021b      	lsls	r3, r3, #8
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a16      	ldr	r2, [pc, #88]	; (800371c <TIM_OC3_SetConfig+0xe0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d003      	beq.n	80036ce <TIM_OC3_SetConfig+0x92>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <TIM_OC3_SetConfig+0xe4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d113      	bne.n	80036f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80036dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	695b      	ldr	r3, [r3, #20]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	693a      	ldr	r2, [r7, #16]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	699b      	ldr	r3, [r3, #24]
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	693a      	ldr	r2, [r7, #16]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	693a      	ldr	r2, [r7, #16]
 80036fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685a      	ldr	r2, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	697a      	ldr	r2, [r7, #20]
 800370e:	621a      	str	r2, [r3, #32]
}
 8003710:	bf00      	nop
 8003712:	371c      	adds	r7, #28
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003752:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800375a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	021b      	lsls	r3, r3, #8
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	4313      	orrs	r3, r2
 8003766:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800376e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	031b      	lsls	r3, r3, #12
 8003776:	693a      	ldr	r2, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a12      	ldr	r2, [pc, #72]	; (80037c8 <TIM_OC4_SetConfig+0xa4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d003      	beq.n	800378c <TIM_OC4_SetConfig+0x68>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	4a11      	ldr	r2, [pc, #68]	; (80037cc <TIM_OC4_SetConfig+0xa8>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d109      	bne.n	80037a0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003792:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	695b      	ldr	r3, [r3, #20]
 8003798:	019b      	lsls	r3, r3, #6
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	68fa      	ldr	r2, [r7, #12]
 80037aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	693a      	ldr	r2, [r7, #16]
 80037b8:	621a      	str	r2, [r3, #32]
}
 80037ba:	bf00      	nop
 80037bc:	371c      	adds	r7, #28
 80037be:	46bd      	mov	sp, r7
 80037c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c4:	4770      	bx	lr
 80037c6:	bf00      	nop
 80037c8:	40010000 	.word	0x40010000
 80037cc:	40010400 	.word	0x40010400

080037d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80037d0:	b480      	push	{r7}
 80037d2:	b087      	sub	sp, #28
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	f023 0201 	bic.w	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80037fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	011b      	lsls	r3, r3, #4
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	f023 030a 	bic.w	r3, r3, #10
 800380c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800380e:	697a      	ldr	r2, [r7, #20]
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4313      	orrs	r3, r2
 8003814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	693a      	ldr	r2, [r7, #16]
 800381a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	697a      	ldr	r2, [r7, #20]
 8003820:	621a      	str	r2, [r3, #32]
}
 8003822:	bf00      	nop
 8003824:	371c      	adds	r7, #28
 8003826:	46bd      	mov	sp, r7
 8003828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382c:	4770      	bx	lr

0800382e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800382e:	b480      	push	{r7}
 8003830:	b087      	sub	sp, #28
 8003832:	af00      	add	r7, sp, #0
 8003834:	60f8      	str	r0, [r7, #12]
 8003836:	60b9      	str	r1, [r7, #8]
 8003838:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	699b      	ldr	r3, [r3, #24]
 800384a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003858:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	031b      	lsls	r3, r3, #12
 800385e:	697a      	ldr	r2, [r7, #20]
 8003860:	4313      	orrs	r3, r2
 8003862:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003864:	693b      	ldr	r3, [r7, #16]
 8003866:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800386a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	011b      	lsls	r3, r3, #4
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	4313      	orrs	r3, r2
 8003874:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	697a      	ldr	r2, [r7, #20]
 800387a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	693a      	ldr	r2, [r7, #16]
 8003880:	621a      	str	r2, [r3, #32]
}
 8003882:	bf00      	nop
 8003884:	371c      	adds	r7, #28
 8003886:	46bd      	mov	sp, r7
 8003888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388c:	4770      	bx	lr

0800388e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800388e:	b480      	push	{r7}
 8003890:	b085      	sub	sp, #20
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
 8003896:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689b      	ldr	r3, [r3, #8]
 800389c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f043 0307 	orr.w	r3, r3, #7
 80038b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	609a      	str	r2, [r3, #8]
}
 80038b8:	bf00      	nop
 80038ba:	3714      	adds	r7, #20
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80038c4:	b480      	push	{r7}
 80038c6:	b087      	sub	sp, #28
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	60b9      	str	r1, [r7, #8]
 80038ce:	607a      	str	r2, [r7, #4]
 80038d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	021a      	lsls	r2, r3, #8
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	431a      	orrs	r2, r3
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	697a      	ldr	r2, [r7, #20]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	609a      	str	r2, [r3, #8]
}
 80038f8:	bf00      	nop
 80038fa:	371c      	adds	r7, #28
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003904:	b480      	push	{r7}
 8003906:	b087      	sub	sp, #28
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2201      	movs	r2, #1
 8003918:	fa02 f303 	lsl.w	r3, r2, r3
 800391c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6a1a      	ldr	r2, [r3, #32]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	43db      	mvns	r3, r3
 8003926:	401a      	ands	r2, r3
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6a1a      	ldr	r2, [r3, #32]
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	6879      	ldr	r1, [r7, #4]
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	431a      	orrs	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	621a      	str	r2, [r3, #32]
}
 8003942:	bf00      	nop
 8003944:	371c      	adds	r7, #28
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
	...

08003950 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003960:	2b01      	cmp	r3, #1
 8003962:	d101      	bne.n	8003968 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003964:	2302      	movs	r3, #2
 8003966:	e05a      	b.n	8003a1e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2202      	movs	r2, #2
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800398e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	4313      	orrs	r3, r2
 8003998:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68fa      	ldr	r2, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a21      	ldr	r2, [pc, #132]	; (8003a2c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d022      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d01d      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a1d      	ldr	r2, [pc, #116]	; (8003a30 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d018      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a1b      	ldr	r2, [pc, #108]	; (8003a34 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a1a      	ldr	r2, [pc, #104]	; (8003a38 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d00e      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d004      	beq.n	80039f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a15      	ldr	r2, [pc, #84]	; (8003a44 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d10c      	bne.n	8003a0c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80039f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	685b      	ldr	r3, [r3, #4]
 80039fe:	68ba      	ldr	r2, [r7, #8]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68ba      	ldr	r2, [r7, #8]
 8003a0a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2200      	movs	r2, #0
 8003a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a1c:	2300      	movs	r3, #0
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3714      	adds	r7, #20
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	40010000 	.word	0x40010000
 8003a30:	40000400 	.word	0x40000400
 8003a34:	40000800 	.word	0x40000800
 8003a38:	40000c00 	.word	0x40000c00
 8003a3c:	40010400 	.word	0x40010400
 8003a40:	40014000 	.word	0x40014000
 8003a44:	40001800 	.word	0x40001800

08003a48 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a50:	bf00      	nop
 8003a52:	370c      	adds	r7, #12
 8003a54:	46bd      	mov	sp, r7
 8003a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5a:	4770      	bx	lr

08003a5c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a64:	bf00      	nop
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr

08003a70 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e03f      	b.n	8003b02 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d106      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	f7fd fcf4 	bl	8001484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2224      	movs	r2, #36	; 0x24
 8003aa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68da      	ldr	r2, [r3, #12]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003ab2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f000 fd7b 	bl	80045b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691a      	ldr	r2, [r3, #16]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ac8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	695a      	ldr	r2, [r3, #20]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003ad8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68da      	ldr	r2, [r3, #12]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003ae8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	2200      	movs	r2, #0
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2220      	movs	r2, #32
 8003af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2220      	movs	r2, #32
 8003afc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b08a      	sub	sp, #40	; 0x28
 8003b0e:	af02      	add	r7, sp, #8
 8003b10:	60f8      	str	r0, [r7, #12]
 8003b12:	60b9      	str	r1, [r7, #8]
 8003b14:	603b      	str	r3, [r7, #0]
 8003b16:	4613      	mov	r3, r2
 8003b18:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b24:	b2db      	uxtb	r3, r3
 8003b26:	2b20      	cmp	r3, #32
 8003b28:	d17c      	bne.n	8003c24 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d002      	beq.n	8003b36 <HAL_UART_Transmit+0x2c>
 8003b30:	88fb      	ldrh	r3, [r7, #6]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d101      	bne.n	8003b3a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003b36:	2301      	movs	r3, #1
 8003b38:	e075      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Transmit+0x3e>
 8003b44:	2302      	movs	r3, #2
 8003b46:	e06e      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	2200      	movs	r2, #0
 8003b54:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2221      	movs	r2, #33	; 0x21
 8003b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003b5e:	f7fd fd71 	bl	8001644 <HAL_GetTick>
 8003b62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	88fa      	ldrh	r2, [r7, #6]
 8003b68:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	88fa      	ldrh	r2, [r7, #6]
 8003b6e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b78:	d108      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d104      	bne.n	8003b8c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003b82:	2300      	movs	r3, #0
 8003b84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003b86:	68bb      	ldr	r3, [r7, #8]
 8003b88:	61bb      	str	r3, [r7, #24]
 8003b8a:	e003      	b.n	8003b94 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003b9c:	e02a      	b.n	8003bf4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	9300      	str	r3, [sp, #0]
 8003ba2:	697b      	ldr	r3, [r7, #20]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	2180      	movs	r1, #128	; 0x80
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f000 faf9 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d001      	beq.n	8003bb8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003bb4:	2303      	movs	r3, #3
 8003bb6:	e036      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d10b      	bne.n	8003bd6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bbe:	69bb      	ldr	r3, [r7, #24]
 8003bc0:	881b      	ldrh	r3, [r3, #0]
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003bcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	61bb      	str	r3, [r7, #24]
 8003bd4:	e007      	b.n	8003be6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	3301      	adds	r3, #1
 8003be4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	3b01      	subs	r3, #1
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1cf      	bne.n	8003b9e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	2200      	movs	r2, #0
 8003c06:	2140      	movs	r1, #64	; 0x40
 8003c08:	68f8      	ldr	r0, [r7, #12]
 8003c0a:	f000 fac9 	bl	80041a0 <UART_WaitOnFlagUntilTimeout>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d001      	beq.n	8003c18 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003c20:	2300      	movs	r3, #0
 8003c22:	e000      	b.n	8003c26 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003c24:	2302      	movs	r3, #2
  }
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3720      	adds	r7, #32
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b0ba      	sub	sp, #232	; 0xe8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 030f 	and.w	r3, r3, #15
 8003c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d10f      	bne.n	8003c96 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c7a:	f003 0320 	and.w	r3, r3, #32
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d009      	beq.n	8003c96 <HAL_UART_IRQHandler+0x66>
 8003c82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c86:	f003 0320 	and.w	r3, r3, #32
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fbd3 	bl	800443a <UART_Receive_IT>
      return;
 8003c94:	e256      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003c96:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 80de 	beq.w	8003e5c <HAL_UART_IRQHandler+0x22c>
 8003ca0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ca4:	f003 0301 	and.w	r3, r3, #1
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003cac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cb0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 80d1 	beq.w	8003e5c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003cba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <HAL_UART_IRQHandler+0xae>
 8003cc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d005      	beq.n	8003cde <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003cde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_UART_IRQHandler+0xd2>
 8003cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d005      	beq.n	8003d02 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	f043 0202 	orr.w	r2, r3, #2
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d00b      	beq.n	8003d26 <HAL_UART_IRQHandler+0xf6>
 8003d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d12:	f003 0301 	and.w	r3, r3, #1
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d005      	beq.n	8003d26 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2a:	f003 0308 	and.w	r3, r3, #8
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d011      	beq.n	8003d56 <HAL_UART_IRQHandler+0x126>
 8003d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d36:	f003 0320 	and.w	r3, r3, #32
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d105      	bne.n	8003d4a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d42:	f003 0301 	and.w	r3, r3, #1
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0208 	orr.w	r2, r3, #8
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	f000 81ed 	beq.w	800413a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003d60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d008      	beq.n	8003d7e <HAL_UART_IRQHandler+0x14e>
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d70:	f003 0320 	and.w	r3, r3, #32
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d002      	beq.n	8003d7e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 fb5e 	bl	800443a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	695b      	ldr	r3, [r3, #20]
 8003d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d88:	2b40      	cmp	r3, #64	; 0x40
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d103      	bne.n	8003daa <HAL_UART_IRQHandler+0x17a>
 8003da2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d04f      	beq.n	8003e4a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f000 fa66 	bl	800427c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b40      	cmp	r3, #64	; 0x40
 8003dbc:	d141      	bne.n	8003e42 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	3314      	adds	r3, #20
 8003dc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003dcc:	e853 3f00 	ldrex	r3, [r3]
 8003dd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003dd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ddc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	3314      	adds	r3, #20
 8003de6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003dea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003df6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003dfa:	e841 2300 	strex	r3, r2, [r1]
 8003dfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d1d9      	bne.n	8003dbe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d013      	beq.n	8003e3a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e16:	4a7d      	ldr	r2, [pc, #500]	; (800400c <HAL_UART_IRQHandler+0x3dc>)
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	4618      	mov	r0, r3
 8003e20:	f7fd fdc1 	bl	80019a6 <HAL_DMA_Abort_IT>
 8003e24:	4603      	mov	r3, r0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d016      	beq.n	8003e58 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e34:	4610      	mov	r0, r2
 8003e36:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e38:	e00e      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 f99a 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e40:	e00a      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f000 f996 	bl	8004174 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e48:	e006      	b.n	8003e58 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f992 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003e56:	e170      	b.n	800413a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e58:	bf00      	nop
    return;
 8003e5a:	e16e      	b.n	800413a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e60:	2b01      	cmp	r3, #1
 8003e62:	f040 814a 	bne.w	80040fa <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003e6a:	f003 0310 	and.w	r3, r3, #16
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	f000 8143 	beq.w	80040fa <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003e74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003e78:	f003 0310 	and.w	r3, r3, #16
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	f000 813c 	beq.w	80040fa <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003e82:	2300      	movs	r3, #0
 8003e84:	60bb      	str	r3, [r7, #8]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	60bb      	str	r3, [r7, #8]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	60bb      	str	r3, [r7, #8]
 8003e96:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ea2:	2b40      	cmp	r3, #64	; 0x40
 8003ea4:	f040 80b4 	bne.w	8004010 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003eb4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 8140 	beq.w	800413e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003ec2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	f080 8139 	bcs.w	800413e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003ed2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed8:	69db      	ldr	r3, [r3, #28]
 8003eda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ede:	f000 8088 	beq.w	8003ff2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	330c      	adds	r3, #12
 8003ee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003ef8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	330c      	adds	r3, #12
 8003f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003f0e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003f12:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f1e:	e841 2300 	strex	r3, r2, [r1]
 8003f22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d1d9      	bne.n	8003ee2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	3314      	adds	r3, #20
 8003f34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f38:	e853 3f00 	ldrex	r3, [r3]
 8003f3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f40:	f023 0301 	bic.w	r3, r3, #1
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	3314      	adds	r3, #20
 8003f4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f5e:	e841 2300 	strex	r3, r2, [r1]
 8003f62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003f64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1e1      	bne.n	8003f2e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3314      	adds	r3, #20
 8003f70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003f7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3314      	adds	r3, #20
 8003f8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003f8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003f90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003f96:	e841 2300 	strex	r3, r2, [r1]
 8003f9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1e3      	bne.n	8003f6a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2220      	movs	r2, #32
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	330c      	adds	r3, #12
 8003fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fba:	e853 3f00 	ldrex	r3, [r3]
 8003fbe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003fc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fc2:	f023 0310 	bic.w	r3, r3, #16
 8003fc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	330c      	adds	r3, #12
 8003fd0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8003fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fdc:	e841 2300 	strex	r3, r2, [r1]
 8003fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d1e3      	bne.n	8003fb0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fd fc6a 	bl	80018c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	b29b      	uxth	r3, r3
 8004000:	4619      	mov	r1, r3
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f8c0 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004008:	e099      	b.n	800413e <HAL_UART_IRQHandler+0x50e>
 800400a:	bf00      	nop
 800400c:	08004343 	.word	0x08004343
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004018:	b29b      	uxth	r3, r3
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004024:	b29b      	uxth	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 808b 	beq.w	8004142 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800402c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 8086 	beq.w	8004142 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	330c      	adds	r3, #12
 800403c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004048:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800404c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	330c      	adds	r3, #12
 8004056:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800405a:	647a      	str	r2, [r7, #68]	; 0x44
 800405c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004060:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004062:	e841 2300 	strex	r3, r2, [r1]
 8004066:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1e3      	bne.n	8004036 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	3314      	adds	r3, #20
 8004074:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004078:	e853 3f00 	ldrex	r3, [r3]
 800407c:	623b      	str	r3, [r7, #32]
   return(result);
 800407e:	6a3b      	ldr	r3, [r7, #32]
 8004080:	f023 0301 	bic.w	r3, r3, #1
 8004084:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	3314      	adds	r3, #20
 800408e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004092:	633a      	str	r2, [r7, #48]	; 0x30
 8004094:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004096:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004098:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800409a:	e841 2300 	strex	r3, r2, [r1]
 800409e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1e3      	bne.n	800406e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2220      	movs	r2, #32
 80040aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	330c      	adds	r3, #12
 80040ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	e853 3f00 	ldrex	r3, [r3]
 80040c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0310 	bic.w	r3, r3, #16
 80040ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	330c      	adds	r3, #12
 80040d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80040d8:	61fa      	str	r2, [r7, #28]
 80040da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040dc:	69b9      	ldr	r1, [r7, #24]
 80040de:	69fa      	ldr	r2, [r7, #28]
 80040e0:	e841 2300 	strex	r3, r2, [r1]
 80040e4:	617b      	str	r3, [r7, #20]
   return(result);
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d1e3      	bne.n	80040b4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80040ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040f0:	4619      	mov	r1, r3
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 f848 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80040f8:	e023      	b.n	8004142 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80040fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d009      	beq.n	800411a <HAL_UART_IRQHandler+0x4ea>
 8004106:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d003      	beq.n	800411a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f929 	bl	800436a <UART_Transmit_IT>
    return;
 8004118:	e014      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800411a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800411e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00e      	beq.n	8004144 <HAL_UART_IRQHandler+0x514>
 8004126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d008      	beq.n	8004144 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f969 	bl	800440a <UART_EndTransmit_IT>
    return;
 8004138:	e004      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
    return;
 800413a:	bf00      	nop
 800413c:	e002      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
      return;
 800413e:	bf00      	nop
 8004140:	e000      	b.n	8004144 <HAL_UART_IRQHandler+0x514>
      return;
 8004142:	bf00      	nop
  }
}
 8004144:	37e8      	adds	r7, #232	; 0xe8
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop

0800414c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004154:	bf00      	nop
 8004156:	370c      	adds	r7, #12
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004160:	b480      	push	{r7}
 8004162:	b083      	sub	sp, #12
 8004164:	af00      	add	r7, sp, #0
 8004166:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800417c:	bf00      	nop
 800417e:	370c      	adds	r7, #12
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004194:	bf00      	nop
 8004196:	370c      	adds	r7, #12
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr

080041a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b090      	sub	sp, #64	; 0x40
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	603b      	str	r3, [r7, #0]
 80041ac:	4613      	mov	r3, r2
 80041ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041b0:	e050      	b.n	8004254 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d04c      	beq.n	8004254 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80041ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d007      	beq.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80041c0:	f7fd fa40 	bl	8001644 <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d241      	bcs.n	8004254 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	330c      	adds	r3, #12
 80041d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	e853 3f00 	ldrex	r3, [r3]
 80041de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80041e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80041e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	330c      	adds	r3, #12
 80041ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f0:	637a      	str	r2, [r7, #52]	; 0x34
 80041f2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041f8:	e841 2300 	strex	r3, r2, [r1]
 80041fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004200:	2b00      	cmp	r3, #0
 8004202:	d1e5      	bne.n	80041d0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	3314      	adds	r3, #20
 800420a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	e853 3f00 	ldrex	r3, [r3]
 8004212:	613b      	str	r3, [r7, #16]
   return(result);
 8004214:	693b      	ldr	r3, [r7, #16]
 8004216:	f023 0301 	bic.w	r3, r3, #1
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3314      	adds	r3, #20
 8004222:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004224:	623a      	str	r2, [r7, #32]
 8004226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004228:	69f9      	ldr	r1, [r7, #28]
 800422a:	6a3a      	ldr	r2, [r7, #32]
 800422c:	e841 2300 	strex	r3, r2, [r1]
 8004230:	61bb      	str	r3, [r7, #24]
   return(result);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d1e5      	bne.n	8004204 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2220      	movs	r2, #32
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	2220      	movs	r2, #32
 8004244:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e00f      	b.n	8004274 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4013      	ands	r3, r2
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	429a      	cmp	r2, r3
 8004262:	bf0c      	ite	eq
 8004264:	2301      	moveq	r3, #1
 8004266:	2300      	movne	r3, #0
 8004268:	b2db      	uxtb	r3, r3
 800426a:	461a      	mov	r2, r3
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	429a      	cmp	r2, r3
 8004270:	d09f      	beq.n	80041b2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3740      	adds	r7, #64	; 0x40
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800427c:	b480      	push	{r7}
 800427e:	b095      	sub	sp, #84	; 0x54
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004296:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800429a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	330c      	adds	r3, #12
 80042a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80042a4:	643a      	str	r2, [r7, #64]	; 0x40
 80042a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80042aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80042ac:	e841 2300 	strex	r3, r2, [r1]
 80042b0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80042b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d1e5      	bne.n	8004284 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	3314      	adds	r3, #20
 80042be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042c0:	6a3b      	ldr	r3, [r7, #32]
 80042c2:	e853 3f00 	ldrex	r3, [r3]
 80042c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f023 0301 	bic.w	r3, r3, #1
 80042ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	3314      	adds	r3, #20
 80042d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80042d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80042de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042e0:	e841 2300 	strex	r3, r2, [r1]
 80042e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80042e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d1e5      	bne.n	80042b8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d119      	bne.n	8004328 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	330c      	adds	r3, #12
 80042fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	e853 3f00 	ldrex	r3, [r3]
 8004302:	60bb      	str	r3, [r7, #8]
   return(result);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0310 	bic.w	r3, r3, #16
 800430a:	647b      	str	r3, [r7, #68]	; 0x44
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	330c      	adds	r3, #12
 8004312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004314:	61ba      	str	r2, [r7, #24]
 8004316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004318:	6979      	ldr	r1, [r7, #20]
 800431a:	69ba      	ldr	r2, [r7, #24]
 800431c:	e841 2300 	strex	r3, r2, [r1]
 8004320:	613b      	str	r3, [r7, #16]
   return(result);
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1e5      	bne.n	80042f4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2220      	movs	r2, #32
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004336:	bf00      	nop
 8004338:	3754      	adds	r7, #84	; 0x54
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800434e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2200      	movs	r2, #0
 800435a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800435c:	68f8      	ldr	r0, [r7, #12]
 800435e:	f7ff ff09 	bl	8004174 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004362:	bf00      	nop
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800436a:	b480      	push	{r7}
 800436c:	b085      	sub	sp, #20
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b21      	cmp	r3, #33	; 0x21
 800437c:	d13e      	bne.n	80043fc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004386:	d114      	bne.n	80043b2 <UART_Transmit_IT+0x48>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d110      	bne.n	80043b2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	881b      	ldrh	r3, [r3, #0]
 800439a:	461a      	mov	r2, r3
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043a4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	1c9a      	adds	r2, r3, #2
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	621a      	str	r2, [r3, #32]
 80043b0:	e008      	b.n	80043c4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	1c59      	adds	r1, r3, #1
 80043b8:	687a      	ldr	r2, [r7, #4]
 80043ba:	6211      	str	r1, [r2, #32]
 80043bc:	781a      	ldrb	r2, [r3, #0]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29b      	uxth	r3, r3
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	4619      	mov	r1, r3
 80043d2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80043e6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	68da      	ldr	r2, [r3, #12]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80043f6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80043f8:	2300      	movs	r3, #0
 80043fa:	e000      	b.n	80043fe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80043fc:	2302      	movs	r3, #2
  }
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3714      	adds	r7, #20
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800440a:	b580      	push	{r7, lr}
 800440c:	b082      	sub	sp, #8
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68da      	ldr	r2, [r3, #12]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004420:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2220      	movs	r2, #32
 8004426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7ff fe8e 	bl	800414c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800443a:	b580      	push	{r7, lr}
 800443c:	b08c      	sub	sp, #48	; 0x30
 800443e:	af00      	add	r7, sp, #0
 8004440:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b22      	cmp	r3, #34	; 0x22
 800444c:	f040 80ab 	bne.w	80045a6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004458:	d117      	bne.n	800448a <UART_Receive_IT+0x50>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d113      	bne.n	800448a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004462:	2300      	movs	r3, #0
 8004464:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	b29b      	uxth	r3, r3
 8004474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004478:	b29a      	uxth	r2, r3
 800447a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004482:	1c9a      	adds	r2, r3, #2
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	629a      	str	r2, [r3, #40]	; 0x28
 8004488:	e026      	b.n	80044d8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004490:	2300      	movs	r3, #0
 8004492:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800449c:	d007      	beq.n	80044ae <UART_Receive_IT+0x74>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d10a      	bne.n	80044bc <UART_Receive_IT+0x82>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	691b      	ldr	r3, [r3, #16]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d106      	bne.n	80044bc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	b2da      	uxtb	r2, r3
 80044b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044b8:	701a      	strb	r2, [r3, #0]
 80044ba:	e008      	b.n	80044ce <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044cc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d2:	1c5a      	adds	r2, r3, #1
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29b      	uxth	r3, r3
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	4619      	mov	r1, r3
 80044e6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d15a      	bne.n	80045a2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0220 	bic.w	r2, r2, #32
 80044fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800450a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695a      	ldr	r2, [r3, #20]
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004528:	2b01      	cmp	r3, #1
 800452a:	d135      	bne.n	8004598 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	613b      	str	r3, [r7, #16]
   return(result);
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	f023 0310 	bic.w	r3, r3, #16
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004552:	623a      	str	r2, [r7, #32]
 8004554:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	69f9      	ldr	r1, [r7, #28]
 8004558:	6a3a      	ldr	r2, [r7, #32]
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0310 	and.w	r3, r3, #16
 8004570:	2b10      	cmp	r3, #16
 8004572:	d10a      	bne.n	800458a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	60fb      	str	r3, [r7, #12]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800458e:	4619      	mov	r1, r3
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f7ff fdf9 	bl	8004188 <HAL_UARTEx_RxEventCallback>
 8004596:	e002      	b.n	800459e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f7ff fde1 	bl	8004160 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800459e:	2300      	movs	r3, #0
 80045a0:	e002      	b.n	80045a8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80045a2:	2300      	movs	r3, #0
 80045a4:	e000      	b.n	80045a8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80045a6:	2302      	movs	r3, #2
  }
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3730      	adds	r7, #48	; 0x30
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045b4:	b09f      	sub	sp, #124	; 0x7c
 80045b6:	af00      	add	r7, sp, #0
 80045b8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80045ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	691b      	ldr	r3, [r3, #16]
 80045c0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	68d9      	ldr	r1, [r3, #12]
 80045c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	ea40 0301 	orr.w	r3, r0, r1
 80045d0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80045d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d4:	689a      	ldr	r2, [r3, #8]
 80045d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	431a      	orrs	r2, r3
 80045dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045de:	695b      	ldr	r3, [r3, #20]
 80045e0:	431a      	orrs	r2, r3
 80045e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045e4:	69db      	ldr	r3, [r3, #28]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80045ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68db      	ldr	r3, [r3, #12]
 80045f0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80045f4:	f021 010c 	bic.w	r1, r1, #12
 80045f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80045fe:	430b      	orrs	r3, r1
 8004600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800460c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800460e:	6999      	ldr	r1, [r3, #24]
 8004610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	ea40 0301 	orr.w	r3, r0, r1
 8004618:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800461a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	4bc5      	ldr	r3, [pc, #788]	; (8004934 <UART_SetConfig+0x384>)
 8004620:	429a      	cmp	r2, r3
 8004622:	d004      	beq.n	800462e <UART_SetConfig+0x7e>
 8004624:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	4bc3      	ldr	r3, [pc, #780]	; (8004938 <UART_SetConfig+0x388>)
 800462a:	429a      	cmp	r2, r3
 800462c:	d103      	bne.n	8004636 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800462e:	f7fe fa37 	bl	8002aa0 <HAL_RCC_GetPCLK2Freq>
 8004632:	6778      	str	r0, [r7, #116]	; 0x74
 8004634:	e002      	b.n	800463c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004636:	f7fe fa1f 	bl	8002a78 <HAL_RCC_GetPCLK1Freq>
 800463a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800463c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004644:	f040 80b6 	bne.w	80047b4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004648:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800464a:	461c      	mov	r4, r3
 800464c:	f04f 0500 	mov.w	r5, #0
 8004650:	4622      	mov	r2, r4
 8004652:	462b      	mov	r3, r5
 8004654:	1891      	adds	r1, r2, r2
 8004656:	6439      	str	r1, [r7, #64]	; 0x40
 8004658:	415b      	adcs	r3, r3
 800465a:	647b      	str	r3, [r7, #68]	; 0x44
 800465c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004660:	1912      	adds	r2, r2, r4
 8004662:	eb45 0303 	adc.w	r3, r5, r3
 8004666:	f04f 0000 	mov.w	r0, #0
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	00d9      	lsls	r1, r3, #3
 8004670:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004674:	00d0      	lsls	r0, r2, #3
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	1911      	adds	r1, r2, r4
 800467c:	6639      	str	r1, [r7, #96]	; 0x60
 800467e:	416b      	adcs	r3, r5
 8004680:	667b      	str	r3, [r7, #100]	; 0x64
 8004682:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	461a      	mov	r2, r3
 8004688:	f04f 0300 	mov.w	r3, #0
 800468c:	1891      	adds	r1, r2, r2
 800468e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004690:	415b      	adcs	r3, r3
 8004692:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004694:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004698:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800469c:	f7fb fdf8 	bl	8000290 <__aeabi_uldivmod>
 80046a0:	4602      	mov	r2, r0
 80046a2:	460b      	mov	r3, r1
 80046a4:	4ba5      	ldr	r3, [pc, #660]	; (800493c <UART_SetConfig+0x38c>)
 80046a6:	fba3 2302 	umull	r2, r3, r3, r2
 80046aa:	095b      	lsrs	r3, r3, #5
 80046ac:	011e      	lsls	r6, r3, #4
 80046ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046b0:	461c      	mov	r4, r3
 80046b2:	f04f 0500 	mov.w	r5, #0
 80046b6:	4622      	mov	r2, r4
 80046b8:	462b      	mov	r3, r5
 80046ba:	1891      	adds	r1, r2, r2
 80046bc:	6339      	str	r1, [r7, #48]	; 0x30
 80046be:	415b      	adcs	r3, r3
 80046c0:	637b      	str	r3, [r7, #52]	; 0x34
 80046c2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80046c6:	1912      	adds	r2, r2, r4
 80046c8:	eb45 0303 	adc.w	r3, r5, r3
 80046cc:	f04f 0000 	mov.w	r0, #0
 80046d0:	f04f 0100 	mov.w	r1, #0
 80046d4:	00d9      	lsls	r1, r3, #3
 80046d6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80046da:	00d0      	lsls	r0, r2, #3
 80046dc:	4602      	mov	r2, r0
 80046de:	460b      	mov	r3, r1
 80046e0:	1911      	adds	r1, r2, r4
 80046e2:	65b9      	str	r1, [r7, #88]	; 0x58
 80046e4:	416b      	adcs	r3, r5
 80046e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	461a      	mov	r2, r3
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	1891      	adds	r1, r2, r2
 80046f4:	62b9      	str	r1, [r7, #40]	; 0x28
 80046f6:	415b      	adcs	r3, r3
 80046f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80046fe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004702:	f7fb fdc5 	bl	8000290 <__aeabi_uldivmod>
 8004706:	4602      	mov	r2, r0
 8004708:	460b      	mov	r3, r1
 800470a:	4b8c      	ldr	r3, [pc, #560]	; (800493c <UART_SetConfig+0x38c>)
 800470c:	fba3 1302 	umull	r1, r3, r3, r2
 8004710:	095b      	lsrs	r3, r3, #5
 8004712:	2164      	movs	r1, #100	; 0x64
 8004714:	fb01 f303 	mul.w	r3, r1, r3
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	3332      	adds	r3, #50	; 0x32
 800471e:	4a87      	ldr	r2, [pc, #540]	; (800493c <UART_SetConfig+0x38c>)
 8004720:	fba2 2303 	umull	r2, r3, r2, r3
 8004724:	095b      	lsrs	r3, r3, #5
 8004726:	005b      	lsls	r3, r3, #1
 8004728:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800472c:	441e      	add	r6, r3
 800472e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004730:	4618      	mov	r0, r3
 8004732:	f04f 0100 	mov.w	r1, #0
 8004736:	4602      	mov	r2, r0
 8004738:	460b      	mov	r3, r1
 800473a:	1894      	adds	r4, r2, r2
 800473c:	623c      	str	r4, [r7, #32]
 800473e:	415b      	adcs	r3, r3
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
 8004742:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004746:	1812      	adds	r2, r2, r0
 8004748:	eb41 0303 	adc.w	r3, r1, r3
 800474c:	f04f 0400 	mov.w	r4, #0
 8004750:	f04f 0500 	mov.w	r5, #0
 8004754:	00dd      	lsls	r5, r3, #3
 8004756:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800475a:	00d4      	lsls	r4, r2, #3
 800475c:	4622      	mov	r2, r4
 800475e:	462b      	mov	r3, r5
 8004760:	1814      	adds	r4, r2, r0
 8004762:	653c      	str	r4, [r7, #80]	; 0x50
 8004764:	414b      	adcs	r3, r1
 8004766:	657b      	str	r3, [r7, #84]	; 0x54
 8004768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	461a      	mov	r2, r3
 800476e:	f04f 0300 	mov.w	r3, #0
 8004772:	1891      	adds	r1, r2, r2
 8004774:	61b9      	str	r1, [r7, #24]
 8004776:	415b      	adcs	r3, r3
 8004778:	61fb      	str	r3, [r7, #28]
 800477a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800477e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004782:	f7fb fd85 	bl	8000290 <__aeabi_uldivmod>
 8004786:	4602      	mov	r2, r0
 8004788:	460b      	mov	r3, r1
 800478a:	4b6c      	ldr	r3, [pc, #432]	; (800493c <UART_SetConfig+0x38c>)
 800478c:	fba3 1302 	umull	r1, r3, r3, r2
 8004790:	095b      	lsrs	r3, r3, #5
 8004792:	2164      	movs	r1, #100	; 0x64
 8004794:	fb01 f303 	mul.w	r3, r1, r3
 8004798:	1ad3      	subs	r3, r2, r3
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	3332      	adds	r3, #50	; 0x32
 800479e:	4a67      	ldr	r2, [pc, #412]	; (800493c <UART_SetConfig+0x38c>)
 80047a0:	fba2 2303 	umull	r2, r3, r2, r3
 80047a4:	095b      	lsrs	r3, r3, #5
 80047a6:	f003 0207 	and.w	r2, r3, #7
 80047aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4432      	add	r2, r6
 80047b0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047b2:	e0b9      	b.n	8004928 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80047b6:	461c      	mov	r4, r3
 80047b8:	f04f 0500 	mov.w	r5, #0
 80047bc:	4622      	mov	r2, r4
 80047be:	462b      	mov	r3, r5
 80047c0:	1891      	adds	r1, r2, r2
 80047c2:	6139      	str	r1, [r7, #16]
 80047c4:	415b      	adcs	r3, r3
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80047cc:	1912      	adds	r2, r2, r4
 80047ce:	eb45 0303 	adc.w	r3, r5, r3
 80047d2:	f04f 0000 	mov.w	r0, #0
 80047d6:	f04f 0100 	mov.w	r1, #0
 80047da:	00d9      	lsls	r1, r3, #3
 80047dc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80047e0:	00d0      	lsls	r0, r2, #3
 80047e2:	4602      	mov	r2, r0
 80047e4:	460b      	mov	r3, r1
 80047e6:	eb12 0804 	adds.w	r8, r2, r4
 80047ea:	eb43 0905 	adc.w	r9, r3, r5
 80047ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f04f 0100 	mov.w	r1, #0
 80047f8:	f04f 0200 	mov.w	r2, #0
 80047fc:	f04f 0300 	mov.w	r3, #0
 8004800:	008b      	lsls	r3, r1, #2
 8004802:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004806:	0082      	lsls	r2, r0, #2
 8004808:	4640      	mov	r0, r8
 800480a:	4649      	mov	r1, r9
 800480c:	f7fb fd40 	bl	8000290 <__aeabi_uldivmod>
 8004810:	4602      	mov	r2, r0
 8004812:	460b      	mov	r3, r1
 8004814:	4b49      	ldr	r3, [pc, #292]	; (800493c <UART_SetConfig+0x38c>)
 8004816:	fba3 2302 	umull	r2, r3, r3, r2
 800481a:	095b      	lsrs	r3, r3, #5
 800481c:	011e      	lsls	r6, r3, #4
 800481e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004820:	4618      	mov	r0, r3
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	4602      	mov	r2, r0
 8004828:	460b      	mov	r3, r1
 800482a:	1894      	adds	r4, r2, r2
 800482c:	60bc      	str	r4, [r7, #8]
 800482e:	415b      	adcs	r3, r3
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004836:	1812      	adds	r2, r2, r0
 8004838:	eb41 0303 	adc.w	r3, r1, r3
 800483c:	f04f 0400 	mov.w	r4, #0
 8004840:	f04f 0500 	mov.w	r5, #0
 8004844:	00dd      	lsls	r5, r3, #3
 8004846:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800484a:	00d4      	lsls	r4, r2, #3
 800484c:	4622      	mov	r2, r4
 800484e:	462b      	mov	r3, r5
 8004850:	1814      	adds	r4, r2, r0
 8004852:	64bc      	str	r4, [r7, #72]	; 0x48
 8004854:	414b      	adcs	r3, r1
 8004856:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004858:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	4618      	mov	r0, r3
 800485e:	f04f 0100 	mov.w	r1, #0
 8004862:	f04f 0200 	mov.w	r2, #0
 8004866:	f04f 0300 	mov.w	r3, #0
 800486a:	008b      	lsls	r3, r1, #2
 800486c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004870:	0082      	lsls	r2, r0, #2
 8004872:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004876:	f7fb fd0b 	bl	8000290 <__aeabi_uldivmod>
 800487a:	4602      	mov	r2, r0
 800487c:	460b      	mov	r3, r1
 800487e:	4b2f      	ldr	r3, [pc, #188]	; (800493c <UART_SetConfig+0x38c>)
 8004880:	fba3 1302 	umull	r1, r3, r3, r2
 8004884:	095b      	lsrs	r3, r3, #5
 8004886:	2164      	movs	r1, #100	; 0x64
 8004888:	fb01 f303 	mul.w	r3, r1, r3
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	3332      	adds	r3, #50	; 0x32
 8004892:	4a2a      	ldr	r2, [pc, #168]	; (800493c <UART_SetConfig+0x38c>)
 8004894:	fba2 2303 	umull	r2, r3, r2, r3
 8004898:	095b      	lsrs	r3, r3, #5
 800489a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800489e:	441e      	add	r6, r3
 80048a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a2:	4618      	mov	r0, r3
 80048a4:	f04f 0100 	mov.w	r1, #0
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	1894      	adds	r4, r2, r2
 80048ae:	603c      	str	r4, [r7, #0]
 80048b0:	415b      	adcs	r3, r3
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048b8:	1812      	adds	r2, r2, r0
 80048ba:	eb41 0303 	adc.w	r3, r1, r3
 80048be:	f04f 0400 	mov.w	r4, #0
 80048c2:	f04f 0500 	mov.w	r5, #0
 80048c6:	00dd      	lsls	r5, r3, #3
 80048c8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80048cc:	00d4      	lsls	r4, r2, #3
 80048ce:	4622      	mov	r2, r4
 80048d0:	462b      	mov	r3, r5
 80048d2:	eb12 0a00 	adds.w	sl, r2, r0
 80048d6:	eb43 0b01 	adc.w	fp, r3, r1
 80048da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	4618      	mov	r0, r3
 80048e0:	f04f 0100 	mov.w	r1, #0
 80048e4:	f04f 0200 	mov.w	r2, #0
 80048e8:	f04f 0300 	mov.w	r3, #0
 80048ec:	008b      	lsls	r3, r1, #2
 80048ee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80048f2:	0082      	lsls	r2, r0, #2
 80048f4:	4650      	mov	r0, sl
 80048f6:	4659      	mov	r1, fp
 80048f8:	f7fb fcca 	bl	8000290 <__aeabi_uldivmod>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	4b0e      	ldr	r3, [pc, #56]	; (800493c <UART_SetConfig+0x38c>)
 8004902:	fba3 1302 	umull	r1, r3, r3, r2
 8004906:	095b      	lsrs	r3, r3, #5
 8004908:	2164      	movs	r1, #100	; 0x64
 800490a:	fb01 f303 	mul.w	r3, r1, r3
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	011b      	lsls	r3, r3, #4
 8004912:	3332      	adds	r3, #50	; 0x32
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <UART_SetConfig+0x38c>)
 8004916:	fba2 2303 	umull	r2, r3, r2, r3
 800491a:	095b      	lsrs	r3, r3, #5
 800491c:	f003 020f 	and.w	r2, r3, #15
 8004920:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4432      	add	r2, r6
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	377c      	adds	r7, #124	; 0x7c
 800492c:	46bd      	mov	sp, r7
 800492e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004932:	bf00      	nop
 8004934:	40011000 	.word	0x40011000
 8004938:	40011400 	.word	0x40011400
 800493c:	51eb851f 	.word	0x51eb851f

08004940 <__errno>:
 8004940:	4b01      	ldr	r3, [pc, #4]	; (8004948 <__errno+0x8>)
 8004942:	6818      	ldr	r0, [r3, #0]
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	2000000c 	.word	0x2000000c

0800494c <__libc_init_array>:
 800494c:	b570      	push	{r4, r5, r6, lr}
 800494e:	4d0d      	ldr	r5, [pc, #52]	; (8004984 <__libc_init_array+0x38>)
 8004950:	4c0d      	ldr	r4, [pc, #52]	; (8004988 <__libc_init_array+0x3c>)
 8004952:	1b64      	subs	r4, r4, r5
 8004954:	10a4      	asrs	r4, r4, #2
 8004956:	2600      	movs	r6, #0
 8004958:	42a6      	cmp	r6, r4
 800495a:	d109      	bne.n	8004970 <__libc_init_array+0x24>
 800495c:	4d0b      	ldr	r5, [pc, #44]	; (800498c <__libc_init_array+0x40>)
 800495e:	4c0c      	ldr	r4, [pc, #48]	; (8004990 <__libc_init_array+0x44>)
 8004960:	f000 ff76 	bl	8005850 <_init>
 8004964:	1b64      	subs	r4, r4, r5
 8004966:	10a4      	asrs	r4, r4, #2
 8004968:	2600      	movs	r6, #0
 800496a:	42a6      	cmp	r6, r4
 800496c:	d105      	bne.n	800497a <__libc_init_array+0x2e>
 800496e:	bd70      	pop	{r4, r5, r6, pc}
 8004970:	f855 3b04 	ldr.w	r3, [r5], #4
 8004974:	4798      	blx	r3
 8004976:	3601      	adds	r6, #1
 8004978:	e7ee      	b.n	8004958 <__libc_init_array+0xc>
 800497a:	f855 3b04 	ldr.w	r3, [r5], #4
 800497e:	4798      	blx	r3
 8004980:	3601      	adds	r6, #1
 8004982:	e7f2      	b.n	800496a <__libc_init_array+0x1e>
 8004984:	08005950 	.word	0x08005950
 8004988:	08005950 	.word	0x08005950
 800498c:	08005950 	.word	0x08005950
 8004990:	08005954 	.word	0x08005954

08004994 <memset>:
 8004994:	4402      	add	r2, r0
 8004996:	4603      	mov	r3, r0
 8004998:	4293      	cmp	r3, r2
 800499a:	d100      	bne.n	800499e <memset+0xa>
 800499c:	4770      	bx	lr
 800499e:	f803 1b01 	strb.w	r1, [r3], #1
 80049a2:	e7f9      	b.n	8004998 <memset+0x4>

080049a4 <iprintf>:
 80049a4:	b40f      	push	{r0, r1, r2, r3}
 80049a6:	4b0a      	ldr	r3, [pc, #40]	; (80049d0 <iprintf+0x2c>)
 80049a8:	b513      	push	{r0, r1, r4, lr}
 80049aa:	681c      	ldr	r4, [r3, #0]
 80049ac:	b124      	cbz	r4, 80049b8 <iprintf+0x14>
 80049ae:	69a3      	ldr	r3, [r4, #24]
 80049b0:	b913      	cbnz	r3, 80049b8 <iprintf+0x14>
 80049b2:	4620      	mov	r0, r4
 80049b4:	f000 f866 	bl	8004a84 <__sinit>
 80049b8:	ab05      	add	r3, sp, #20
 80049ba:	9a04      	ldr	r2, [sp, #16]
 80049bc:	68a1      	ldr	r1, [r4, #8]
 80049be:	9301      	str	r3, [sp, #4]
 80049c0:	4620      	mov	r0, r4
 80049c2:	f000 f983 	bl	8004ccc <_vfiprintf_r>
 80049c6:	b002      	add	sp, #8
 80049c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80049cc:	b004      	add	sp, #16
 80049ce:	4770      	bx	lr
 80049d0:	2000000c 	.word	0x2000000c

080049d4 <std>:
 80049d4:	2300      	movs	r3, #0
 80049d6:	b510      	push	{r4, lr}
 80049d8:	4604      	mov	r4, r0
 80049da:	e9c0 3300 	strd	r3, r3, [r0]
 80049de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049e2:	6083      	str	r3, [r0, #8]
 80049e4:	8181      	strh	r1, [r0, #12]
 80049e6:	6643      	str	r3, [r0, #100]	; 0x64
 80049e8:	81c2      	strh	r2, [r0, #14]
 80049ea:	6183      	str	r3, [r0, #24]
 80049ec:	4619      	mov	r1, r3
 80049ee:	2208      	movs	r2, #8
 80049f0:	305c      	adds	r0, #92	; 0x5c
 80049f2:	f7ff ffcf 	bl	8004994 <memset>
 80049f6:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <std+0x38>)
 80049f8:	6263      	str	r3, [r4, #36]	; 0x24
 80049fa:	4b05      	ldr	r3, [pc, #20]	; (8004a10 <std+0x3c>)
 80049fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049fe:	4b05      	ldr	r3, [pc, #20]	; (8004a14 <std+0x40>)
 8004a00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004a02:	4b05      	ldr	r3, [pc, #20]	; (8004a18 <std+0x44>)
 8004a04:	6224      	str	r4, [r4, #32]
 8004a06:	6323      	str	r3, [r4, #48]	; 0x30
 8004a08:	bd10      	pop	{r4, pc}
 8004a0a:	bf00      	nop
 8004a0c:	08005275 	.word	0x08005275
 8004a10:	08005297 	.word	0x08005297
 8004a14:	080052cf 	.word	0x080052cf
 8004a18:	080052f3 	.word	0x080052f3

08004a1c <_cleanup_r>:
 8004a1c:	4901      	ldr	r1, [pc, #4]	; (8004a24 <_cleanup_r+0x8>)
 8004a1e:	f000 b8af 	b.w	8004b80 <_fwalk_reent>
 8004a22:	bf00      	nop
 8004a24:	080055cd 	.word	0x080055cd

08004a28 <__sfmoreglue>:
 8004a28:	b570      	push	{r4, r5, r6, lr}
 8004a2a:	1e4a      	subs	r2, r1, #1
 8004a2c:	2568      	movs	r5, #104	; 0x68
 8004a2e:	4355      	muls	r5, r2
 8004a30:	460e      	mov	r6, r1
 8004a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004a36:	f000 f8c5 	bl	8004bc4 <_malloc_r>
 8004a3a:	4604      	mov	r4, r0
 8004a3c:	b140      	cbz	r0, 8004a50 <__sfmoreglue+0x28>
 8004a3e:	2100      	movs	r1, #0
 8004a40:	e9c0 1600 	strd	r1, r6, [r0]
 8004a44:	300c      	adds	r0, #12
 8004a46:	60a0      	str	r0, [r4, #8]
 8004a48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004a4c:	f7ff ffa2 	bl	8004994 <memset>
 8004a50:	4620      	mov	r0, r4
 8004a52:	bd70      	pop	{r4, r5, r6, pc}

08004a54 <__sfp_lock_acquire>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__sfp_lock_acquire+0x8>)
 8004a56:	f000 b8b3 	b.w	8004bc0 <__retarget_lock_acquire_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	200002ec 	.word	0x200002ec

08004a60 <__sfp_lock_release>:
 8004a60:	4801      	ldr	r0, [pc, #4]	; (8004a68 <__sfp_lock_release+0x8>)
 8004a62:	f000 b8ae 	b.w	8004bc2 <__retarget_lock_release_recursive>
 8004a66:	bf00      	nop
 8004a68:	200002ec 	.word	0x200002ec

08004a6c <__sinit_lock_acquire>:
 8004a6c:	4801      	ldr	r0, [pc, #4]	; (8004a74 <__sinit_lock_acquire+0x8>)
 8004a6e:	f000 b8a7 	b.w	8004bc0 <__retarget_lock_acquire_recursive>
 8004a72:	bf00      	nop
 8004a74:	200002e7 	.word	0x200002e7

08004a78 <__sinit_lock_release>:
 8004a78:	4801      	ldr	r0, [pc, #4]	; (8004a80 <__sinit_lock_release+0x8>)
 8004a7a:	f000 b8a2 	b.w	8004bc2 <__retarget_lock_release_recursive>
 8004a7e:	bf00      	nop
 8004a80:	200002e7 	.word	0x200002e7

08004a84 <__sinit>:
 8004a84:	b510      	push	{r4, lr}
 8004a86:	4604      	mov	r4, r0
 8004a88:	f7ff fff0 	bl	8004a6c <__sinit_lock_acquire>
 8004a8c:	69a3      	ldr	r3, [r4, #24]
 8004a8e:	b11b      	cbz	r3, 8004a98 <__sinit+0x14>
 8004a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a94:	f7ff bff0 	b.w	8004a78 <__sinit_lock_release>
 8004a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8004a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8004a9e:	4b13      	ldr	r3, [pc, #76]	; (8004aec <__sinit+0x68>)
 8004aa0:	4a13      	ldr	r2, [pc, #76]	; (8004af0 <__sinit+0x6c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	62a2      	str	r2, [r4, #40]	; 0x28
 8004aa6:	42a3      	cmp	r3, r4
 8004aa8:	bf04      	itt	eq
 8004aaa:	2301      	moveq	r3, #1
 8004aac:	61a3      	streq	r3, [r4, #24]
 8004aae:	4620      	mov	r0, r4
 8004ab0:	f000 f820 	bl	8004af4 <__sfp>
 8004ab4:	6060      	str	r0, [r4, #4]
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f000 f81c 	bl	8004af4 <__sfp>
 8004abc:	60a0      	str	r0, [r4, #8]
 8004abe:	4620      	mov	r0, r4
 8004ac0:	f000 f818 	bl	8004af4 <__sfp>
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	60e0      	str	r0, [r4, #12]
 8004ac8:	2104      	movs	r1, #4
 8004aca:	6860      	ldr	r0, [r4, #4]
 8004acc:	f7ff ff82 	bl	80049d4 <std>
 8004ad0:	68a0      	ldr	r0, [r4, #8]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	2109      	movs	r1, #9
 8004ad6:	f7ff ff7d 	bl	80049d4 <std>
 8004ada:	68e0      	ldr	r0, [r4, #12]
 8004adc:	2202      	movs	r2, #2
 8004ade:	2112      	movs	r1, #18
 8004ae0:	f7ff ff78 	bl	80049d4 <std>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	61a3      	str	r3, [r4, #24]
 8004ae8:	e7d2      	b.n	8004a90 <__sinit+0xc>
 8004aea:	bf00      	nop
 8004aec:	080058b0 	.word	0x080058b0
 8004af0:	08004a1d 	.word	0x08004a1d

08004af4 <__sfp>:
 8004af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004af6:	4607      	mov	r7, r0
 8004af8:	f7ff ffac 	bl	8004a54 <__sfp_lock_acquire>
 8004afc:	4b1e      	ldr	r3, [pc, #120]	; (8004b78 <__sfp+0x84>)
 8004afe:	681e      	ldr	r6, [r3, #0]
 8004b00:	69b3      	ldr	r3, [r6, #24]
 8004b02:	b913      	cbnz	r3, 8004b0a <__sfp+0x16>
 8004b04:	4630      	mov	r0, r6
 8004b06:	f7ff ffbd 	bl	8004a84 <__sinit>
 8004b0a:	3648      	adds	r6, #72	; 0x48
 8004b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004b10:	3b01      	subs	r3, #1
 8004b12:	d503      	bpl.n	8004b1c <__sfp+0x28>
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	b30b      	cbz	r3, 8004b5c <__sfp+0x68>
 8004b18:	6836      	ldr	r6, [r6, #0]
 8004b1a:	e7f7      	b.n	8004b0c <__sfp+0x18>
 8004b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004b20:	b9d5      	cbnz	r5, 8004b58 <__sfp+0x64>
 8004b22:	4b16      	ldr	r3, [pc, #88]	; (8004b7c <__sfp+0x88>)
 8004b24:	60e3      	str	r3, [r4, #12]
 8004b26:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004b2a:	6665      	str	r5, [r4, #100]	; 0x64
 8004b2c:	f000 f847 	bl	8004bbe <__retarget_lock_init_recursive>
 8004b30:	f7ff ff96 	bl	8004a60 <__sfp_lock_release>
 8004b34:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004b38:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004b3c:	6025      	str	r5, [r4, #0]
 8004b3e:	61a5      	str	r5, [r4, #24]
 8004b40:	2208      	movs	r2, #8
 8004b42:	4629      	mov	r1, r5
 8004b44:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004b48:	f7ff ff24 	bl	8004994 <memset>
 8004b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004b54:	4620      	mov	r0, r4
 8004b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004b58:	3468      	adds	r4, #104	; 0x68
 8004b5a:	e7d9      	b.n	8004b10 <__sfp+0x1c>
 8004b5c:	2104      	movs	r1, #4
 8004b5e:	4638      	mov	r0, r7
 8004b60:	f7ff ff62 	bl	8004a28 <__sfmoreglue>
 8004b64:	4604      	mov	r4, r0
 8004b66:	6030      	str	r0, [r6, #0]
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d1d5      	bne.n	8004b18 <__sfp+0x24>
 8004b6c:	f7ff ff78 	bl	8004a60 <__sfp_lock_release>
 8004b70:	230c      	movs	r3, #12
 8004b72:	603b      	str	r3, [r7, #0]
 8004b74:	e7ee      	b.n	8004b54 <__sfp+0x60>
 8004b76:	bf00      	nop
 8004b78:	080058b0 	.word	0x080058b0
 8004b7c:	ffff0001 	.word	0xffff0001

08004b80 <_fwalk_reent>:
 8004b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b84:	4606      	mov	r6, r0
 8004b86:	4688      	mov	r8, r1
 8004b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004b8c:	2700      	movs	r7, #0
 8004b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004b92:	f1b9 0901 	subs.w	r9, r9, #1
 8004b96:	d505      	bpl.n	8004ba4 <_fwalk_reent+0x24>
 8004b98:	6824      	ldr	r4, [r4, #0]
 8004b9a:	2c00      	cmp	r4, #0
 8004b9c:	d1f7      	bne.n	8004b8e <_fwalk_reent+0xe>
 8004b9e:	4638      	mov	r0, r7
 8004ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ba4:	89ab      	ldrh	r3, [r5, #12]
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	d907      	bls.n	8004bba <_fwalk_reent+0x3a>
 8004baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004bae:	3301      	adds	r3, #1
 8004bb0:	d003      	beq.n	8004bba <_fwalk_reent+0x3a>
 8004bb2:	4629      	mov	r1, r5
 8004bb4:	4630      	mov	r0, r6
 8004bb6:	47c0      	blx	r8
 8004bb8:	4307      	orrs	r7, r0
 8004bba:	3568      	adds	r5, #104	; 0x68
 8004bbc:	e7e9      	b.n	8004b92 <_fwalk_reent+0x12>

08004bbe <__retarget_lock_init_recursive>:
 8004bbe:	4770      	bx	lr

08004bc0 <__retarget_lock_acquire_recursive>:
 8004bc0:	4770      	bx	lr

08004bc2 <__retarget_lock_release_recursive>:
 8004bc2:	4770      	bx	lr

08004bc4 <_malloc_r>:
 8004bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc6:	1ccd      	adds	r5, r1, #3
 8004bc8:	f025 0503 	bic.w	r5, r5, #3
 8004bcc:	3508      	adds	r5, #8
 8004bce:	2d0c      	cmp	r5, #12
 8004bd0:	bf38      	it	cc
 8004bd2:	250c      	movcc	r5, #12
 8004bd4:	2d00      	cmp	r5, #0
 8004bd6:	4606      	mov	r6, r0
 8004bd8:	db01      	blt.n	8004bde <_malloc_r+0x1a>
 8004bda:	42a9      	cmp	r1, r5
 8004bdc:	d903      	bls.n	8004be6 <_malloc_r+0x22>
 8004bde:	230c      	movs	r3, #12
 8004be0:	6033      	str	r3, [r6, #0]
 8004be2:	2000      	movs	r0, #0
 8004be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004be6:	f000 fda3 	bl	8005730 <__malloc_lock>
 8004bea:	4921      	ldr	r1, [pc, #132]	; (8004c70 <_malloc_r+0xac>)
 8004bec:	680a      	ldr	r2, [r1, #0]
 8004bee:	4614      	mov	r4, r2
 8004bf0:	b99c      	cbnz	r4, 8004c1a <_malloc_r+0x56>
 8004bf2:	4f20      	ldr	r7, [pc, #128]	; (8004c74 <_malloc_r+0xb0>)
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	b923      	cbnz	r3, 8004c02 <_malloc_r+0x3e>
 8004bf8:	4621      	mov	r1, r4
 8004bfa:	4630      	mov	r0, r6
 8004bfc:	f000 fb2a 	bl	8005254 <_sbrk_r>
 8004c00:	6038      	str	r0, [r7, #0]
 8004c02:	4629      	mov	r1, r5
 8004c04:	4630      	mov	r0, r6
 8004c06:	f000 fb25 	bl	8005254 <_sbrk_r>
 8004c0a:	1c43      	adds	r3, r0, #1
 8004c0c:	d123      	bne.n	8004c56 <_malloc_r+0x92>
 8004c0e:	230c      	movs	r3, #12
 8004c10:	6033      	str	r3, [r6, #0]
 8004c12:	4630      	mov	r0, r6
 8004c14:	f000 fd92 	bl	800573c <__malloc_unlock>
 8004c18:	e7e3      	b.n	8004be2 <_malloc_r+0x1e>
 8004c1a:	6823      	ldr	r3, [r4, #0]
 8004c1c:	1b5b      	subs	r3, r3, r5
 8004c1e:	d417      	bmi.n	8004c50 <_malloc_r+0x8c>
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	d903      	bls.n	8004c2c <_malloc_r+0x68>
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	441c      	add	r4, r3
 8004c28:	6025      	str	r5, [r4, #0]
 8004c2a:	e004      	b.n	8004c36 <_malloc_r+0x72>
 8004c2c:	6863      	ldr	r3, [r4, #4]
 8004c2e:	42a2      	cmp	r2, r4
 8004c30:	bf0c      	ite	eq
 8004c32:	600b      	streq	r3, [r1, #0]
 8004c34:	6053      	strne	r3, [r2, #4]
 8004c36:	4630      	mov	r0, r6
 8004c38:	f000 fd80 	bl	800573c <__malloc_unlock>
 8004c3c:	f104 000b 	add.w	r0, r4, #11
 8004c40:	1d23      	adds	r3, r4, #4
 8004c42:	f020 0007 	bic.w	r0, r0, #7
 8004c46:	1ac2      	subs	r2, r0, r3
 8004c48:	d0cc      	beq.n	8004be4 <_malloc_r+0x20>
 8004c4a:	1a1b      	subs	r3, r3, r0
 8004c4c:	50a3      	str	r3, [r4, r2]
 8004c4e:	e7c9      	b.n	8004be4 <_malloc_r+0x20>
 8004c50:	4622      	mov	r2, r4
 8004c52:	6864      	ldr	r4, [r4, #4]
 8004c54:	e7cc      	b.n	8004bf0 <_malloc_r+0x2c>
 8004c56:	1cc4      	adds	r4, r0, #3
 8004c58:	f024 0403 	bic.w	r4, r4, #3
 8004c5c:	42a0      	cmp	r0, r4
 8004c5e:	d0e3      	beq.n	8004c28 <_malloc_r+0x64>
 8004c60:	1a21      	subs	r1, r4, r0
 8004c62:	4630      	mov	r0, r6
 8004c64:	f000 faf6 	bl	8005254 <_sbrk_r>
 8004c68:	3001      	adds	r0, #1
 8004c6a:	d1dd      	bne.n	8004c28 <_malloc_r+0x64>
 8004c6c:	e7cf      	b.n	8004c0e <_malloc_r+0x4a>
 8004c6e:	bf00      	nop
 8004c70:	20000090 	.word	0x20000090
 8004c74:	20000094 	.word	0x20000094

08004c78 <__sfputc_r>:
 8004c78:	6893      	ldr	r3, [r2, #8]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	b410      	push	{r4}
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	da08      	bge.n	8004c96 <__sfputc_r+0x1e>
 8004c84:	6994      	ldr	r4, [r2, #24]
 8004c86:	42a3      	cmp	r3, r4
 8004c88:	db01      	blt.n	8004c8e <__sfputc_r+0x16>
 8004c8a:	290a      	cmp	r1, #10
 8004c8c:	d103      	bne.n	8004c96 <__sfputc_r+0x1e>
 8004c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004c92:	f000 bb33 	b.w	80052fc <__swbuf_r>
 8004c96:	6813      	ldr	r3, [r2, #0]
 8004c98:	1c58      	adds	r0, r3, #1
 8004c9a:	6010      	str	r0, [r2, #0]
 8004c9c:	7019      	strb	r1, [r3, #0]
 8004c9e:	4608      	mov	r0, r1
 8004ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004ca4:	4770      	bx	lr

08004ca6 <__sfputs_r>:
 8004ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ca8:	4606      	mov	r6, r0
 8004caa:	460f      	mov	r7, r1
 8004cac:	4614      	mov	r4, r2
 8004cae:	18d5      	adds	r5, r2, r3
 8004cb0:	42ac      	cmp	r4, r5
 8004cb2:	d101      	bne.n	8004cb8 <__sfputs_r+0x12>
 8004cb4:	2000      	movs	r0, #0
 8004cb6:	e007      	b.n	8004cc8 <__sfputs_r+0x22>
 8004cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cbc:	463a      	mov	r2, r7
 8004cbe:	4630      	mov	r0, r6
 8004cc0:	f7ff ffda 	bl	8004c78 <__sfputc_r>
 8004cc4:	1c43      	adds	r3, r0, #1
 8004cc6:	d1f3      	bne.n	8004cb0 <__sfputs_r+0xa>
 8004cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ccc <_vfiprintf_r>:
 8004ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd0:	460d      	mov	r5, r1
 8004cd2:	b09d      	sub	sp, #116	; 0x74
 8004cd4:	4614      	mov	r4, r2
 8004cd6:	4698      	mov	r8, r3
 8004cd8:	4606      	mov	r6, r0
 8004cda:	b118      	cbz	r0, 8004ce4 <_vfiprintf_r+0x18>
 8004cdc:	6983      	ldr	r3, [r0, #24]
 8004cde:	b90b      	cbnz	r3, 8004ce4 <_vfiprintf_r+0x18>
 8004ce0:	f7ff fed0 	bl	8004a84 <__sinit>
 8004ce4:	4b89      	ldr	r3, [pc, #548]	; (8004f0c <_vfiprintf_r+0x240>)
 8004ce6:	429d      	cmp	r5, r3
 8004ce8:	d11b      	bne.n	8004d22 <_vfiprintf_r+0x56>
 8004cea:	6875      	ldr	r5, [r6, #4]
 8004cec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004cee:	07d9      	lsls	r1, r3, #31
 8004cf0:	d405      	bmi.n	8004cfe <_vfiprintf_r+0x32>
 8004cf2:	89ab      	ldrh	r3, [r5, #12]
 8004cf4:	059a      	lsls	r2, r3, #22
 8004cf6:	d402      	bmi.n	8004cfe <_vfiprintf_r+0x32>
 8004cf8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004cfa:	f7ff ff61 	bl	8004bc0 <__retarget_lock_acquire_recursive>
 8004cfe:	89ab      	ldrh	r3, [r5, #12]
 8004d00:	071b      	lsls	r3, r3, #28
 8004d02:	d501      	bpl.n	8004d08 <_vfiprintf_r+0x3c>
 8004d04:	692b      	ldr	r3, [r5, #16]
 8004d06:	b9eb      	cbnz	r3, 8004d44 <_vfiprintf_r+0x78>
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4630      	mov	r0, r6
 8004d0c:	f000 fb5a 	bl	80053c4 <__swsetup_r>
 8004d10:	b1c0      	cbz	r0, 8004d44 <_vfiprintf_r+0x78>
 8004d12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004d14:	07dc      	lsls	r4, r3, #31
 8004d16:	d50e      	bpl.n	8004d36 <_vfiprintf_r+0x6a>
 8004d18:	f04f 30ff 	mov.w	r0, #4294967295
 8004d1c:	b01d      	add	sp, #116	; 0x74
 8004d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d22:	4b7b      	ldr	r3, [pc, #492]	; (8004f10 <_vfiprintf_r+0x244>)
 8004d24:	429d      	cmp	r5, r3
 8004d26:	d101      	bne.n	8004d2c <_vfiprintf_r+0x60>
 8004d28:	68b5      	ldr	r5, [r6, #8]
 8004d2a:	e7df      	b.n	8004cec <_vfiprintf_r+0x20>
 8004d2c:	4b79      	ldr	r3, [pc, #484]	; (8004f14 <_vfiprintf_r+0x248>)
 8004d2e:	429d      	cmp	r5, r3
 8004d30:	bf08      	it	eq
 8004d32:	68f5      	ldreq	r5, [r6, #12]
 8004d34:	e7da      	b.n	8004cec <_vfiprintf_r+0x20>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	0598      	lsls	r0, r3, #22
 8004d3a:	d4ed      	bmi.n	8004d18 <_vfiprintf_r+0x4c>
 8004d3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004d3e:	f7ff ff40 	bl	8004bc2 <__retarget_lock_release_recursive>
 8004d42:	e7e9      	b.n	8004d18 <_vfiprintf_r+0x4c>
 8004d44:	2300      	movs	r3, #0
 8004d46:	9309      	str	r3, [sp, #36]	; 0x24
 8004d48:	2320      	movs	r3, #32
 8004d4a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004d4e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d52:	2330      	movs	r3, #48	; 0x30
 8004d54:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004f18 <_vfiprintf_r+0x24c>
 8004d58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004d5c:	f04f 0901 	mov.w	r9, #1
 8004d60:	4623      	mov	r3, r4
 8004d62:	469a      	mov	sl, r3
 8004d64:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d68:	b10a      	cbz	r2, 8004d6e <_vfiprintf_r+0xa2>
 8004d6a:	2a25      	cmp	r2, #37	; 0x25
 8004d6c:	d1f9      	bne.n	8004d62 <_vfiprintf_r+0x96>
 8004d6e:	ebba 0b04 	subs.w	fp, sl, r4
 8004d72:	d00b      	beq.n	8004d8c <_vfiprintf_r+0xc0>
 8004d74:	465b      	mov	r3, fp
 8004d76:	4622      	mov	r2, r4
 8004d78:	4629      	mov	r1, r5
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7ff ff93 	bl	8004ca6 <__sfputs_r>
 8004d80:	3001      	adds	r0, #1
 8004d82:	f000 80aa 	beq.w	8004eda <_vfiprintf_r+0x20e>
 8004d86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004d88:	445a      	add	r2, fp
 8004d8a:	9209      	str	r2, [sp, #36]	; 0x24
 8004d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	f000 80a2 	beq.w	8004eda <_vfiprintf_r+0x20e>
 8004d96:	2300      	movs	r3, #0
 8004d98:	f04f 32ff 	mov.w	r2, #4294967295
 8004d9c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004da0:	f10a 0a01 	add.w	sl, sl, #1
 8004da4:	9304      	str	r3, [sp, #16]
 8004da6:	9307      	str	r3, [sp, #28]
 8004da8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004dac:	931a      	str	r3, [sp, #104]	; 0x68
 8004dae:	4654      	mov	r4, sl
 8004db0:	2205      	movs	r2, #5
 8004db2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db6:	4858      	ldr	r0, [pc, #352]	; (8004f18 <_vfiprintf_r+0x24c>)
 8004db8:	f7fb fa1a 	bl	80001f0 <memchr>
 8004dbc:	9a04      	ldr	r2, [sp, #16]
 8004dbe:	b9d8      	cbnz	r0, 8004df8 <_vfiprintf_r+0x12c>
 8004dc0:	06d1      	lsls	r1, r2, #27
 8004dc2:	bf44      	itt	mi
 8004dc4:	2320      	movmi	r3, #32
 8004dc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dca:	0713      	lsls	r3, r2, #28
 8004dcc:	bf44      	itt	mi
 8004dce:	232b      	movmi	r3, #43	; 0x2b
 8004dd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004dd4:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd8:	2b2a      	cmp	r3, #42	; 0x2a
 8004dda:	d015      	beq.n	8004e08 <_vfiprintf_r+0x13c>
 8004ddc:	9a07      	ldr	r2, [sp, #28]
 8004dde:	4654      	mov	r4, sl
 8004de0:	2000      	movs	r0, #0
 8004de2:	f04f 0c0a 	mov.w	ip, #10
 8004de6:	4621      	mov	r1, r4
 8004de8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004dec:	3b30      	subs	r3, #48	; 0x30
 8004dee:	2b09      	cmp	r3, #9
 8004df0:	d94e      	bls.n	8004e90 <_vfiprintf_r+0x1c4>
 8004df2:	b1b0      	cbz	r0, 8004e22 <_vfiprintf_r+0x156>
 8004df4:	9207      	str	r2, [sp, #28]
 8004df6:	e014      	b.n	8004e22 <_vfiprintf_r+0x156>
 8004df8:	eba0 0308 	sub.w	r3, r0, r8
 8004dfc:	fa09 f303 	lsl.w	r3, r9, r3
 8004e00:	4313      	orrs	r3, r2
 8004e02:	9304      	str	r3, [sp, #16]
 8004e04:	46a2      	mov	sl, r4
 8004e06:	e7d2      	b.n	8004dae <_vfiprintf_r+0xe2>
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	1d19      	adds	r1, r3, #4
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	9103      	str	r1, [sp, #12]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	bfbb      	ittet	lt
 8004e14:	425b      	neglt	r3, r3
 8004e16:	f042 0202 	orrlt.w	r2, r2, #2
 8004e1a:	9307      	strge	r3, [sp, #28]
 8004e1c:	9307      	strlt	r3, [sp, #28]
 8004e1e:	bfb8      	it	lt
 8004e20:	9204      	strlt	r2, [sp, #16]
 8004e22:	7823      	ldrb	r3, [r4, #0]
 8004e24:	2b2e      	cmp	r3, #46	; 0x2e
 8004e26:	d10c      	bne.n	8004e42 <_vfiprintf_r+0x176>
 8004e28:	7863      	ldrb	r3, [r4, #1]
 8004e2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004e2c:	d135      	bne.n	8004e9a <_vfiprintf_r+0x1ce>
 8004e2e:	9b03      	ldr	r3, [sp, #12]
 8004e30:	1d1a      	adds	r2, r3, #4
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	9203      	str	r2, [sp, #12]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	bfb8      	it	lt
 8004e3a:	f04f 33ff 	movlt.w	r3, #4294967295
 8004e3e:	3402      	adds	r4, #2
 8004e40:	9305      	str	r3, [sp, #20]
 8004e42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004f28 <_vfiprintf_r+0x25c>
 8004e46:	7821      	ldrb	r1, [r4, #0]
 8004e48:	2203      	movs	r2, #3
 8004e4a:	4650      	mov	r0, sl
 8004e4c:	f7fb f9d0 	bl	80001f0 <memchr>
 8004e50:	b140      	cbz	r0, 8004e64 <_vfiprintf_r+0x198>
 8004e52:	2340      	movs	r3, #64	; 0x40
 8004e54:	eba0 000a 	sub.w	r0, r0, sl
 8004e58:	fa03 f000 	lsl.w	r0, r3, r0
 8004e5c:	9b04      	ldr	r3, [sp, #16]
 8004e5e:	4303      	orrs	r3, r0
 8004e60:	3401      	adds	r4, #1
 8004e62:	9304      	str	r3, [sp, #16]
 8004e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e68:	482c      	ldr	r0, [pc, #176]	; (8004f1c <_vfiprintf_r+0x250>)
 8004e6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004e6e:	2206      	movs	r2, #6
 8004e70:	f7fb f9be 	bl	80001f0 <memchr>
 8004e74:	2800      	cmp	r0, #0
 8004e76:	d03f      	beq.n	8004ef8 <_vfiprintf_r+0x22c>
 8004e78:	4b29      	ldr	r3, [pc, #164]	; (8004f20 <_vfiprintf_r+0x254>)
 8004e7a:	bb1b      	cbnz	r3, 8004ec4 <_vfiprintf_r+0x1f8>
 8004e7c:	9b03      	ldr	r3, [sp, #12]
 8004e7e:	3307      	adds	r3, #7
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	3308      	adds	r3, #8
 8004e86:	9303      	str	r3, [sp, #12]
 8004e88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004e8a:	443b      	add	r3, r7
 8004e8c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e8e:	e767      	b.n	8004d60 <_vfiprintf_r+0x94>
 8004e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e94:	460c      	mov	r4, r1
 8004e96:	2001      	movs	r0, #1
 8004e98:	e7a5      	b.n	8004de6 <_vfiprintf_r+0x11a>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	3401      	adds	r4, #1
 8004e9e:	9305      	str	r3, [sp, #20]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	f04f 0c0a 	mov.w	ip, #10
 8004ea6:	4620      	mov	r0, r4
 8004ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004eac:	3a30      	subs	r2, #48	; 0x30
 8004eae:	2a09      	cmp	r2, #9
 8004eb0:	d903      	bls.n	8004eba <_vfiprintf_r+0x1ee>
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d0c5      	beq.n	8004e42 <_vfiprintf_r+0x176>
 8004eb6:	9105      	str	r1, [sp, #20]
 8004eb8:	e7c3      	b.n	8004e42 <_vfiprintf_r+0x176>
 8004eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e7f0      	b.n	8004ea6 <_vfiprintf_r+0x1da>
 8004ec4:	ab03      	add	r3, sp, #12
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	462a      	mov	r2, r5
 8004eca:	4b16      	ldr	r3, [pc, #88]	; (8004f24 <_vfiprintf_r+0x258>)
 8004ecc:	a904      	add	r1, sp, #16
 8004ece:	4630      	mov	r0, r6
 8004ed0:	f3af 8000 	nop.w
 8004ed4:	4607      	mov	r7, r0
 8004ed6:	1c78      	adds	r0, r7, #1
 8004ed8:	d1d6      	bne.n	8004e88 <_vfiprintf_r+0x1bc>
 8004eda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004edc:	07d9      	lsls	r1, r3, #31
 8004ede:	d405      	bmi.n	8004eec <_vfiprintf_r+0x220>
 8004ee0:	89ab      	ldrh	r3, [r5, #12]
 8004ee2:	059a      	lsls	r2, r3, #22
 8004ee4:	d402      	bmi.n	8004eec <_vfiprintf_r+0x220>
 8004ee6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004ee8:	f7ff fe6b 	bl	8004bc2 <__retarget_lock_release_recursive>
 8004eec:	89ab      	ldrh	r3, [r5, #12]
 8004eee:	065b      	lsls	r3, r3, #25
 8004ef0:	f53f af12 	bmi.w	8004d18 <_vfiprintf_r+0x4c>
 8004ef4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004ef6:	e711      	b.n	8004d1c <_vfiprintf_r+0x50>
 8004ef8:	ab03      	add	r3, sp, #12
 8004efa:	9300      	str	r3, [sp, #0]
 8004efc:	462a      	mov	r2, r5
 8004efe:	4b09      	ldr	r3, [pc, #36]	; (8004f24 <_vfiprintf_r+0x258>)
 8004f00:	a904      	add	r1, sp, #16
 8004f02:	4630      	mov	r0, r6
 8004f04:	f000 f880 	bl	8005008 <_printf_i>
 8004f08:	e7e4      	b.n	8004ed4 <_vfiprintf_r+0x208>
 8004f0a:	bf00      	nop
 8004f0c:	080058d4 	.word	0x080058d4
 8004f10:	080058f4 	.word	0x080058f4
 8004f14:	080058b4 	.word	0x080058b4
 8004f18:	08005914 	.word	0x08005914
 8004f1c:	0800591e 	.word	0x0800591e
 8004f20:	00000000 	.word	0x00000000
 8004f24:	08004ca7 	.word	0x08004ca7
 8004f28:	0800591a 	.word	0x0800591a

08004f2c <_printf_common>:
 8004f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f30:	4616      	mov	r6, r2
 8004f32:	4699      	mov	r9, r3
 8004f34:	688a      	ldr	r2, [r1, #8]
 8004f36:	690b      	ldr	r3, [r1, #16]
 8004f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	bfb8      	it	lt
 8004f40:	4613      	movlt	r3, r2
 8004f42:	6033      	str	r3, [r6, #0]
 8004f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004f48:	4607      	mov	r7, r0
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	b10a      	cbz	r2, 8004f52 <_printf_common+0x26>
 8004f4e:	3301      	adds	r3, #1
 8004f50:	6033      	str	r3, [r6, #0]
 8004f52:	6823      	ldr	r3, [r4, #0]
 8004f54:	0699      	lsls	r1, r3, #26
 8004f56:	bf42      	ittt	mi
 8004f58:	6833      	ldrmi	r3, [r6, #0]
 8004f5a:	3302      	addmi	r3, #2
 8004f5c:	6033      	strmi	r3, [r6, #0]
 8004f5e:	6825      	ldr	r5, [r4, #0]
 8004f60:	f015 0506 	ands.w	r5, r5, #6
 8004f64:	d106      	bne.n	8004f74 <_printf_common+0x48>
 8004f66:	f104 0a19 	add.w	sl, r4, #25
 8004f6a:	68e3      	ldr	r3, [r4, #12]
 8004f6c:	6832      	ldr	r2, [r6, #0]
 8004f6e:	1a9b      	subs	r3, r3, r2
 8004f70:	42ab      	cmp	r3, r5
 8004f72:	dc26      	bgt.n	8004fc2 <_printf_common+0x96>
 8004f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004f78:	1e13      	subs	r3, r2, #0
 8004f7a:	6822      	ldr	r2, [r4, #0]
 8004f7c:	bf18      	it	ne
 8004f7e:	2301      	movne	r3, #1
 8004f80:	0692      	lsls	r2, r2, #26
 8004f82:	d42b      	bmi.n	8004fdc <_printf_common+0xb0>
 8004f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004f88:	4649      	mov	r1, r9
 8004f8a:	4638      	mov	r0, r7
 8004f8c:	47c0      	blx	r8
 8004f8e:	3001      	adds	r0, #1
 8004f90:	d01e      	beq.n	8004fd0 <_printf_common+0xa4>
 8004f92:	6823      	ldr	r3, [r4, #0]
 8004f94:	68e5      	ldr	r5, [r4, #12]
 8004f96:	6832      	ldr	r2, [r6, #0]
 8004f98:	f003 0306 	and.w	r3, r3, #6
 8004f9c:	2b04      	cmp	r3, #4
 8004f9e:	bf08      	it	eq
 8004fa0:	1aad      	subeq	r5, r5, r2
 8004fa2:	68a3      	ldr	r3, [r4, #8]
 8004fa4:	6922      	ldr	r2, [r4, #16]
 8004fa6:	bf0c      	ite	eq
 8004fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004fac:	2500      	movne	r5, #0
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	bfc4      	itt	gt
 8004fb2:	1a9b      	subgt	r3, r3, r2
 8004fb4:	18ed      	addgt	r5, r5, r3
 8004fb6:	2600      	movs	r6, #0
 8004fb8:	341a      	adds	r4, #26
 8004fba:	42b5      	cmp	r5, r6
 8004fbc:	d11a      	bne.n	8004ff4 <_printf_common+0xc8>
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	e008      	b.n	8004fd4 <_printf_common+0xa8>
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	4652      	mov	r2, sl
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	4638      	mov	r0, r7
 8004fca:	47c0      	blx	r8
 8004fcc:	3001      	adds	r0, #1
 8004fce:	d103      	bne.n	8004fd8 <_printf_common+0xac>
 8004fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fd8:	3501      	adds	r5, #1
 8004fda:	e7c6      	b.n	8004f6a <_printf_common+0x3e>
 8004fdc:	18e1      	adds	r1, r4, r3
 8004fde:	1c5a      	adds	r2, r3, #1
 8004fe0:	2030      	movs	r0, #48	; 0x30
 8004fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004fe6:	4422      	add	r2, r4
 8004fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ff0:	3302      	adds	r3, #2
 8004ff2:	e7c7      	b.n	8004f84 <_printf_common+0x58>
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	4622      	mov	r2, r4
 8004ff8:	4649      	mov	r1, r9
 8004ffa:	4638      	mov	r0, r7
 8004ffc:	47c0      	blx	r8
 8004ffe:	3001      	adds	r0, #1
 8005000:	d0e6      	beq.n	8004fd0 <_printf_common+0xa4>
 8005002:	3601      	adds	r6, #1
 8005004:	e7d9      	b.n	8004fba <_printf_common+0x8e>
	...

08005008 <_printf_i>:
 8005008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	460c      	mov	r4, r1
 800500e:	4691      	mov	r9, r2
 8005010:	7e27      	ldrb	r7, [r4, #24]
 8005012:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005014:	2f78      	cmp	r7, #120	; 0x78
 8005016:	4680      	mov	r8, r0
 8005018:	469a      	mov	sl, r3
 800501a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800501e:	d807      	bhi.n	8005030 <_printf_i+0x28>
 8005020:	2f62      	cmp	r7, #98	; 0x62
 8005022:	d80a      	bhi.n	800503a <_printf_i+0x32>
 8005024:	2f00      	cmp	r7, #0
 8005026:	f000 80d8 	beq.w	80051da <_printf_i+0x1d2>
 800502a:	2f58      	cmp	r7, #88	; 0x58
 800502c:	f000 80a3 	beq.w	8005176 <_printf_i+0x16e>
 8005030:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005038:	e03a      	b.n	80050b0 <_printf_i+0xa8>
 800503a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800503e:	2b15      	cmp	r3, #21
 8005040:	d8f6      	bhi.n	8005030 <_printf_i+0x28>
 8005042:	a001      	add	r0, pc, #4	; (adr r0, 8005048 <_printf_i+0x40>)
 8005044:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005048:	080050a1 	.word	0x080050a1
 800504c:	080050b5 	.word	0x080050b5
 8005050:	08005031 	.word	0x08005031
 8005054:	08005031 	.word	0x08005031
 8005058:	08005031 	.word	0x08005031
 800505c:	08005031 	.word	0x08005031
 8005060:	080050b5 	.word	0x080050b5
 8005064:	08005031 	.word	0x08005031
 8005068:	08005031 	.word	0x08005031
 800506c:	08005031 	.word	0x08005031
 8005070:	08005031 	.word	0x08005031
 8005074:	080051c1 	.word	0x080051c1
 8005078:	080050e5 	.word	0x080050e5
 800507c:	080051a3 	.word	0x080051a3
 8005080:	08005031 	.word	0x08005031
 8005084:	08005031 	.word	0x08005031
 8005088:	080051e3 	.word	0x080051e3
 800508c:	08005031 	.word	0x08005031
 8005090:	080050e5 	.word	0x080050e5
 8005094:	08005031 	.word	0x08005031
 8005098:	08005031 	.word	0x08005031
 800509c:	080051ab 	.word	0x080051ab
 80050a0:	680b      	ldr	r3, [r1, #0]
 80050a2:	1d1a      	adds	r2, r3, #4
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	600a      	str	r2, [r1, #0]
 80050a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80050ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0a3      	b.n	80051fc <_printf_i+0x1f4>
 80050b4:	6825      	ldr	r5, [r4, #0]
 80050b6:	6808      	ldr	r0, [r1, #0]
 80050b8:	062e      	lsls	r6, r5, #24
 80050ba:	f100 0304 	add.w	r3, r0, #4
 80050be:	d50a      	bpl.n	80050d6 <_printf_i+0xce>
 80050c0:	6805      	ldr	r5, [r0, #0]
 80050c2:	600b      	str	r3, [r1, #0]
 80050c4:	2d00      	cmp	r5, #0
 80050c6:	da03      	bge.n	80050d0 <_printf_i+0xc8>
 80050c8:	232d      	movs	r3, #45	; 0x2d
 80050ca:	426d      	negs	r5, r5
 80050cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050d0:	485e      	ldr	r0, [pc, #376]	; (800524c <_printf_i+0x244>)
 80050d2:	230a      	movs	r3, #10
 80050d4:	e019      	b.n	800510a <_printf_i+0x102>
 80050d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80050da:	6805      	ldr	r5, [r0, #0]
 80050dc:	600b      	str	r3, [r1, #0]
 80050de:	bf18      	it	ne
 80050e0:	b22d      	sxthne	r5, r5
 80050e2:	e7ef      	b.n	80050c4 <_printf_i+0xbc>
 80050e4:	680b      	ldr	r3, [r1, #0]
 80050e6:	6825      	ldr	r5, [r4, #0]
 80050e8:	1d18      	adds	r0, r3, #4
 80050ea:	6008      	str	r0, [r1, #0]
 80050ec:	0628      	lsls	r0, r5, #24
 80050ee:	d501      	bpl.n	80050f4 <_printf_i+0xec>
 80050f0:	681d      	ldr	r5, [r3, #0]
 80050f2:	e002      	b.n	80050fa <_printf_i+0xf2>
 80050f4:	0669      	lsls	r1, r5, #25
 80050f6:	d5fb      	bpl.n	80050f0 <_printf_i+0xe8>
 80050f8:	881d      	ldrh	r5, [r3, #0]
 80050fa:	4854      	ldr	r0, [pc, #336]	; (800524c <_printf_i+0x244>)
 80050fc:	2f6f      	cmp	r7, #111	; 0x6f
 80050fe:	bf0c      	ite	eq
 8005100:	2308      	moveq	r3, #8
 8005102:	230a      	movne	r3, #10
 8005104:	2100      	movs	r1, #0
 8005106:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800510a:	6866      	ldr	r6, [r4, #4]
 800510c:	60a6      	str	r6, [r4, #8]
 800510e:	2e00      	cmp	r6, #0
 8005110:	bfa2      	ittt	ge
 8005112:	6821      	ldrge	r1, [r4, #0]
 8005114:	f021 0104 	bicge.w	r1, r1, #4
 8005118:	6021      	strge	r1, [r4, #0]
 800511a:	b90d      	cbnz	r5, 8005120 <_printf_i+0x118>
 800511c:	2e00      	cmp	r6, #0
 800511e:	d04d      	beq.n	80051bc <_printf_i+0x1b4>
 8005120:	4616      	mov	r6, r2
 8005122:	fbb5 f1f3 	udiv	r1, r5, r3
 8005126:	fb03 5711 	mls	r7, r3, r1, r5
 800512a:	5dc7      	ldrb	r7, [r0, r7]
 800512c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005130:	462f      	mov	r7, r5
 8005132:	42bb      	cmp	r3, r7
 8005134:	460d      	mov	r5, r1
 8005136:	d9f4      	bls.n	8005122 <_printf_i+0x11a>
 8005138:	2b08      	cmp	r3, #8
 800513a:	d10b      	bne.n	8005154 <_printf_i+0x14c>
 800513c:	6823      	ldr	r3, [r4, #0]
 800513e:	07df      	lsls	r7, r3, #31
 8005140:	d508      	bpl.n	8005154 <_printf_i+0x14c>
 8005142:	6923      	ldr	r3, [r4, #16]
 8005144:	6861      	ldr	r1, [r4, #4]
 8005146:	4299      	cmp	r1, r3
 8005148:	bfde      	ittt	le
 800514a:	2330      	movle	r3, #48	; 0x30
 800514c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005150:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005154:	1b92      	subs	r2, r2, r6
 8005156:	6122      	str	r2, [r4, #16]
 8005158:	f8cd a000 	str.w	sl, [sp]
 800515c:	464b      	mov	r3, r9
 800515e:	aa03      	add	r2, sp, #12
 8005160:	4621      	mov	r1, r4
 8005162:	4640      	mov	r0, r8
 8005164:	f7ff fee2 	bl	8004f2c <_printf_common>
 8005168:	3001      	adds	r0, #1
 800516a:	d14c      	bne.n	8005206 <_printf_i+0x1fe>
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	b004      	add	sp, #16
 8005172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005176:	4835      	ldr	r0, [pc, #212]	; (800524c <_printf_i+0x244>)
 8005178:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800517c:	6823      	ldr	r3, [r4, #0]
 800517e:	680e      	ldr	r6, [r1, #0]
 8005180:	061f      	lsls	r7, r3, #24
 8005182:	f856 5b04 	ldr.w	r5, [r6], #4
 8005186:	600e      	str	r6, [r1, #0]
 8005188:	d514      	bpl.n	80051b4 <_printf_i+0x1ac>
 800518a:	07d9      	lsls	r1, r3, #31
 800518c:	bf44      	itt	mi
 800518e:	f043 0320 	orrmi.w	r3, r3, #32
 8005192:	6023      	strmi	r3, [r4, #0]
 8005194:	b91d      	cbnz	r5, 800519e <_printf_i+0x196>
 8005196:	6823      	ldr	r3, [r4, #0]
 8005198:	f023 0320 	bic.w	r3, r3, #32
 800519c:	6023      	str	r3, [r4, #0]
 800519e:	2310      	movs	r3, #16
 80051a0:	e7b0      	b.n	8005104 <_printf_i+0xfc>
 80051a2:	6823      	ldr	r3, [r4, #0]
 80051a4:	f043 0320 	orr.w	r3, r3, #32
 80051a8:	6023      	str	r3, [r4, #0]
 80051aa:	2378      	movs	r3, #120	; 0x78
 80051ac:	4828      	ldr	r0, [pc, #160]	; (8005250 <_printf_i+0x248>)
 80051ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80051b2:	e7e3      	b.n	800517c <_printf_i+0x174>
 80051b4:	065e      	lsls	r6, r3, #25
 80051b6:	bf48      	it	mi
 80051b8:	b2ad      	uxthmi	r5, r5
 80051ba:	e7e6      	b.n	800518a <_printf_i+0x182>
 80051bc:	4616      	mov	r6, r2
 80051be:	e7bb      	b.n	8005138 <_printf_i+0x130>
 80051c0:	680b      	ldr	r3, [r1, #0]
 80051c2:	6826      	ldr	r6, [r4, #0]
 80051c4:	6960      	ldr	r0, [r4, #20]
 80051c6:	1d1d      	adds	r5, r3, #4
 80051c8:	600d      	str	r5, [r1, #0]
 80051ca:	0635      	lsls	r5, r6, #24
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	d501      	bpl.n	80051d4 <_printf_i+0x1cc>
 80051d0:	6018      	str	r0, [r3, #0]
 80051d2:	e002      	b.n	80051da <_printf_i+0x1d2>
 80051d4:	0671      	lsls	r1, r6, #25
 80051d6:	d5fb      	bpl.n	80051d0 <_printf_i+0x1c8>
 80051d8:	8018      	strh	r0, [r3, #0]
 80051da:	2300      	movs	r3, #0
 80051dc:	6123      	str	r3, [r4, #16]
 80051de:	4616      	mov	r6, r2
 80051e0:	e7ba      	b.n	8005158 <_printf_i+0x150>
 80051e2:	680b      	ldr	r3, [r1, #0]
 80051e4:	1d1a      	adds	r2, r3, #4
 80051e6:	600a      	str	r2, [r1, #0]
 80051e8:	681e      	ldr	r6, [r3, #0]
 80051ea:	6862      	ldr	r2, [r4, #4]
 80051ec:	2100      	movs	r1, #0
 80051ee:	4630      	mov	r0, r6
 80051f0:	f7fa fffe 	bl	80001f0 <memchr>
 80051f4:	b108      	cbz	r0, 80051fa <_printf_i+0x1f2>
 80051f6:	1b80      	subs	r0, r0, r6
 80051f8:	6060      	str	r0, [r4, #4]
 80051fa:	6863      	ldr	r3, [r4, #4]
 80051fc:	6123      	str	r3, [r4, #16]
 80051fe:	2300      	movs	r3, #0
 8005200:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005204:	e7a8      	b.n	8005158 <_printf_i+0x150>
 8005206:	6923      	ldr	r3, [r4, #16]
 8005208:	4632      	mov	r2, r6
 800520a:	4649      	mov	r1, r9
 800520c:	4640      	mov	r0, r8
 800520e:	47d0      	blx	sl
 8005210:	3001      	adds	r0, #1
 8005212:	d0ab      	beq.n	800516c <_printf_i+0x164>
 8005214:	6823      	ldr	r3, [r4, #0]
 8005216:	079b      	lsls	r3, r3, #30
 8005218:	d413      	bmi.n	8005242 <_printf_i+0x23a>
 800521a:	68e0      	ldr	r0, [r4, #12]
 800521c:	9b03      	ldr	r3, [sp, #12]
 800521e:	4298      	cmp	r0, r3
 8005220:	bfb8      	it	lt
 8005222:	4618      	movlt	r0, r3
 8005224:	e7a4      	b.n	8005170 <_printf_i+0x168>
 8005226:	2301      	movs	r3, #1
 8005228:	4632      	mov	r2, r6
 800522a:	4649      	mov	r1, r9
 800522c:	4640      	mov	r0, r8
 800522e:	47d0      	blx	sl
 8005230:	3001      	adds	r0, #1
 8005232:	d09b      	beq.n	800516c <_printf_i+0x164>
 8005234:	3501      	adds	r5, #1
 8005236:	68e3      	ldr	r3, [r4, #12]
 8005238:	9903      	ldr	r1, [sp, #12]
 800523a:	1a5b      	subs	r3, r3, r1
 800523c:	42ab      	cmp	r3, r5
 800523e:	dcf2      	bgt.n	8005226 <_printf_i+0x21e>
 8005240:	e7eb      	b.n	800521a <_printf_i+0x212>
 8005242:	2500      	movs	r5, #0
 8005244:	f104 0619 	add.w	r6, r4, #25
 8005248:	e7f5      	b.n	8005236 <_printf_i+0x22e>
 800524a:	bf00      	nop
 800524c:	08005925 	.word	0x08005925
 8005250:	08005936 	.word	0x08005936

08005254 <_sbrk_r>:
 8005254:	b538      	push	{r3, r4, r5, lr}
 8005256:	4d06      	ldr	r5, [pc, #24]	; (8005270 <_sbrk_r+0x1c>)
 8005258:	2300      	movs	r3, #0
 800525a:	4604      	mov	r4, r0
 800525c:	4608      	mov	r0, r1
 800525e:	602b      	str	r3, [r5, #0]
 8005260:	f7fb fca6 	bl	8000bb0 <_sbrk>
 8005264:	1c43      	adds	r3, r0, #1
 8005266:	d102      	bne.n	800526e <_sbrk_r+0x1a>
 8005268:	682b      	ldr	r3, [r5, #0]
 800526a:	b103      	cbz	r3, 800526e <_sbrk_r+0x1a>
 800526c:	6023      	str	r3, [r4, #0]
 800526e:	bd38      	pop	{r3, r4, r5, pc}
 8005270:	200002f0 	.word	0x200002f0

08005274 <__sread>:
 8005274:	b510      	push	{r4, lr}
 8005276:	460c      	mov	r4, r1
 8005278:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800527c:	f000 fab4 	bl	80057e8 <_read_r>
 8005280:	2800      	cmp	r0, #0
 8005282:	bfab      	itete	ge
 8005284:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005286:	89a3      	ldrhlt	r3, [r4, #12]
 8005288:	181b      	addge	r3, r3, r0
 800528a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800528e:	bfac      	ite	ge
 8005290:	6563      	strge	r3, [r4, #84]	; 0x54
 8005292:	81a3      	strhlt	r3, [r4, #12]
 8005294:	bd10      	pop	{r4, pc}

08005296 <__swrite>:
 8005296:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800529a:	461f      	mov	r7, r3
 800529c:	898b      	ldrh	r3, [r1, #12]
 800529e:	05db      	lsls	r3, r3, #23
 80052a0:	4605      	mov	r5, r0
 80052a2:	460c      	mov	r4, r1
 80052a4:	4616      	mov	r6, r2
 80052a6:	d505      	bpl.n	80052b4 <__swrite+0x1e>
 80052a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052ac:	2302      	movs	r3, #2
 80052ae:	2200      	movs	r2, #0
 80052b0:	f000 f9c8 	bl	8005644 <_lseek_r>
 80052b4:	89a3      	ldrh	r3, [r4, #12]
 80052b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80052ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052be:	81a3      	strh	r3, [r4, #12]
 80052c0:	4632      	mov	r2, r6
 80052c2:	463b      	mov	r3, r7
 80052c4:	4628      	mov	r0, r5
 80052c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80052ca:	f000 b869 	b.w	80053a0 <_write_r>

080052ce <__sseek>:
 80052ce:	b510      	push	{r4, lr}
 80052d0:	460c      	mov	r4, r1
 80052d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052d6:	f000 f9b5 	bl	8005644 <_lseek_r>
 80052da:	1c43      	adds	r3, r0, #1
 80052dc:	89a3      	ldrh	r3, [r4, #12]
 80052de:	bf15      	itete	ne
 80052e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80052e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80052e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80052ea:	81a3      	strheq	r3, [r4, #12]
 80052ec:	bf18      	it	ne
 80052ee:	81a3      	strhne	r3, [r4, #12]
 80052f0:	bd10      	pop	{r4, pc}

080052f2 <__sclose>:
 80052f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80052f6:	f000 b8d3 	b.w	80054a0 <_close_r>
	...

080052fc <__swbuf_r>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	460e      	mov	r6, r1
 8005300:	4614      	mov	r4, r2
 8005302:	4605      	mov	r5, r0
 8005304:	b118      	cbz	r0, 800530e <__swbuf_r+0x12>
 8005306:	6983      	ldr	r3, [r0, #24]
 8005308:	b90b      	cbnz	r3, 800530e <__swbuf_r+0x12>
 800530a:	f7ff fbbb 	bl	8004a84 <__sinit>
 800530e:	4b21      	ldr	r3, [pc, #132]	; (8005394 <__swbuf_r+0x98>)
 8005310:	429c      	cmp	r4, r3
 8005312:	d12b      	bne.n	800536c <__swbuf_r+0x70>
 8005314:	686c      	ldr	r4, [r5, #4]
 8005316:	69a3      	ldr	r3, [r4, #24]
 8005318:	60a3      	str	r3, [r4, #8]
 800531a:	89a3      	ldrh	r3, [r4, #12]
 800531c:	071a      	lsls	r2, r3, #28
 800531e:	d52f      	bpl.n	8005380 <__swbuf_r+0x84>
 8005320:	6923      	ldr	r3, [r4, #16]
 8005322:	b36b      	cbz	r3, 8005380 <__swbuf_r+0x84>
 8005324:	6923      	ldr	r3, [r4, #16]
 8005326:	6820      	ldr	r0, [r4, #0]
 8005328:	1ac0      	subs	r0, r0, r3
 800532a:	6963      	ldr	r3, [r4, #20]
 800532c:	b2f6      	uxtb	r6, r6
 800532e:	4283      	cmp	r3, r0
 8005330:	4637      	mov	r7, r6
 8005332:	dc04      	bgt.n	800533e <__swbuf_r+0x42>
 8005334:	4621      	mov	r1, r4
 8005336:	4628      	mov	r0, r5
 8005338:	f000 f948 	bl	80055cc <_fflush_r>
 800533c:	bb30      	cbnz	r0, 800538c <__swbuf_r+0x90>
 800533e:	68a3      	ldr	r3, [r4, #8]
 8005340:	3b01      	subs	r3, #1
 8005342:	60a3      	str	r3, [r4, #8]
 8005344:	6823      	ldr	r3, [r4, #0]
 8005346:	1c5a      	adds	r2, r3, #1
 8005348:	6022      	str	r2, [r4, #0]
 800534a:	701e      	strb	r6, [r3, #0]
 800534c:	6963      	ldr	r3, [r4, #20]
 800534e:	3001      	adds	r0, #1
 8005350:	4283      	cmp	r3, r0
 8005352:	d004      	beq.n	800535e <__swbuf_r+0x62>
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	07db      	lsls	r3, r3, #31
 8005358:	d506      	bpl.n	8005368 <__swbuf_r+0x6c>
 800535a:	2e0a      	cmp	r6, #10
 800535c:	d104      	bne.n	8005368 <__swbuf_r+0x6c>
 800535e:	4621      	mov	r1, r4
 8005360:	4628      	mov	r0, r5
 8005362:	f000 f933 	bl	80055cc <_fflush_r>
 8005366:	b988      	cbnz	r0, 800538c <__swbuf_r+0x90>
 8005368:	4638      	mov	r0, r7
 800536a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800536c:	4b0a      	ldr	r3, [pc, #40]	; (8005398 <__swbuf_r+0x9c>)
 800536e:	429c      	cmp	r4, r3
 8005370:	d101      	bne.n	8005376 <__swbuf_r+0x7a>
 8005372:	68ac      	ldr	r4, [r5, #8]
 8005374:	e7cf      	b.n	8005316 <__swbuf_r+0x1a>
 8005376:	4b09      	ldr	r3, [pc, #36]	; (800539c <__swbuf_r+0xa0>)
 8005378:	429c      	cmp	r4, r3
 800537a:	bf08      	it	eq
 800537c:	68ec      	ldreq	r4, [r5, #12]
 800537e:	e7ca      	b.n	8005316 <__swbuf_r+0x1a>
 8005380:	4621      	mov	r1, r4
 8005382:	4628      	mov	r0, r5
 8005384:	f000 f81e 	bl	80053c4 <__swsetup_r>
 8005388:	2800      	cmp	r0, #0
 800538a:	d0cb      	beq.n	8005324 <__swbuf_r+0x28>
 800538c:	f04f 37ff 	mov.w	r7, #4294967295
 8005390:	e7ea      	b.n	8005368 <__swbuf_r+0x6c>
 8005392:	bf00      	nop
 8005394:	080058d4 	.word	0x080058d4
 8005398:	080058f4 	.word	0x080058f4
 800539c:	080058b4 	.word	0x080058b4

080053a0 <_write_r>:
 80053a0:	b538      	push	{r3, r4, r5, lr}
 80053a2:	4d07      	ldr	r5, [pc, #28]	; (80053c0 <_write_r+0x20>)
 80053a4:	4604      	mov	r4, r0
 80053a6:	4608      	mov	r0, r1
 80053a8:	4611      	mov	r1, r2
 80053aa:	2200      	movs	r2, #0
 80053ac:	602a      	str	r2, [r5, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	f7fb fa2c 	bl	800080c <_write>
 80053b4:	1c43      	adds	r3, r0, #1
 80053b6:	d102      	bne.n	80053be <_write_r+0x1e>
 80053b8:	682b      	ldr	r3, [r5, #0]
 80053ba:	b103      	cbz	r3, 80053be <_write_r+0x1e>
 80053bc:	6023      	str	r3, [r4, #0]
 80053be:	bd38      	pop	{r3, r4, r5, pc}
 80053c0:	200002f0 	.word	0x200002f0

080053c4 <__swsetup_r>:
 80053c4:	4b32      	ldr	r3, [pc, #200]	; (8005490 <__swsetup_r+0xcc>)
 80053c6:	b570      	push	{r4, r5, r6, lr}
 80053c8:	681d      	ldr	r5, [r3, #0]
 80053ca:	4606      	mov	r6, r0
 80053cc:	460c      	mov	r4, r1
 80053ce:	b125      	cbz	r5, 80053da <__swsetup_r+0x16>
 80053d0:	69ab      	ldr	r3, [r5, #24]
 80053d2:	b913      	cbnz	r3, 80053da <__swsetup_r+0x16>
 80053d4:	4628      	mov	r0, r5
 80053d6:	f7ff fb55 	bl	8004a84 <__sinit>
 80053da:	4b2e      	ldr	r3, [pc, #184]	; (8005494 <__swsetup_r+0xd0>)
 80053dc:	429c      	cmp	r4, r3
 80053de:	d10f      	bne.n	8005400 <__swsetup_r+0x3c>
 80053e0:	686c      	ldr	r4, [r5, #4]
 80053e2:	89a3      	ldrh	r3, [r4, #12]
 80053e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80053e8:	0719      	lsls	r1, r3, #28
 80053ea:	d42c      	bmi.n	8005446 <__swsetup_r+0x82>
 80053ec:	06dd      	lsls	r5, r3, #27
 80053ee:	d411      	bmi.n	8005414 <__swsetup_r+0x50>
 80053f0:	2309      	movs	r3, #9
 80053f2:	6033      	str	r3, [r6, #0]
 80053f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80053f8:	81a3      	strh	r3, [r4, #12]
 80053fa:	f04f 30ff 	mov.w	r0, #4294967295
 80053fe:	e03e      	b.n	800547e <__swsetup_r+0xba>
 8005400:	4b25      	ldr	r3, [pc, #148]	; (8005498 <__swsetup_r+0xd4>)
 8005402:	429c      	cmp	r4, r3
 8005404:	d101      	bne.n	800540a <__swsetup_r+0x46>
 8005406:	68ac      	ldr	r4, [r5, #8]
 8005408:	e7eb      	b.n	80053e2 <__swsetup_r+0x1e>
 800540a:	4b24      	ldr	r3, [pc, #144]	; (800549c <__swsetup_r+0xd8>)
 800540c:	429c      	cmp	r4, r3
 800540e:	bf08      	it	eq
 8005410:	68ec      	ldreq	r4, [r5, #12]
 8005412:	e7e6      	b.n	80053e2 <__swsetup_r+0x1e>
 8005414:	0758      	lsls	r0, r3, #29
 8005416:	d512      	bpl.n	800543e <__swsetup_r+0x7a>
 8005418:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800541a:	b141      	cbz	r1, 800542e <__swsetup_r+0x6a>
 800541c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005420:	4299      	cmp	r1, r3
 8005422:	d002      	beq.n	800542a <__swsetup_r+0x66>
 8005424:	4630      	mov	r0, r6
 8005426:	f000 f98f 	bl	8005748 <_free_r>
 800542a:	2300      	movs	r3, #0
 800542c:	6363      	str	r3, [r4, #52]	; 0x34
 800542e:	89a3      	ldrh	r3, [r4, #12]
 8005430:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005434:	81a3      	strh	r3, [r4, #12]
 8005436:	2300      	movs	r3, #0
 8005438:	6063      	str	r3, [r4, #4]
 800543a:	6923      	ldr	r3, [r4, #16]
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	89a3      	ldrh	r3, [r4, #12]
 8005440:	f043 0308 	orr.w	r3, r3, #8
 8005444:	81a3      	strh	r3, [r4, #12]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	b94b      	cbnz	r3, 800545e <__swsetup_r+0x9a>
 800544a:	89a3      	ldrh	r3, [r4, #12]
 800544c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005450:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005454:	d003      	beq.n	800545e <__swsetup_r+0x9a>
 8005456:	4621      	mov	r1, r4
 8005458:	4630      	mov	r0, r6
 800545a:	f000 f929 	bl	80056b0 <__smakebuf_r>
 800545e:	89a0      	ldrh	r0, [r4, #12]
 8005460:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005464:	f010 0301 	ands.w	r3, r0, #1
 8005468:	d00a      	beq.n	8005480 <__swsetup_r+0xbc>
 800546a:	2300      	movs	r3, #0
 800546c:	60a3      	str	r3, [r4, #8]
 800546e:	6963      	ldr	r3, [r4, #20]
 8005470:	425b      	negs	r3, r3
 8005472:	61a3      	str	r3, [r4, #24]
 8005474:	6923      	ldr	r3, [r4, #16]
 8005476:	b943      	cbnz	r3, 800548a <__swsetup_r+0xc6>
 8005478:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800547c:	d1ba      	bne.n	80053f4 <__swsetup_r+0x30>
 800547e:	bd70      	pop	{r4, r5, r6, pc}
 8005480:	0781      	lsls	r1, r0, #30
 8005482:	bf58      	it	pl
 8005484:	6963      	ldrpl	r3, [r4, #20]
 8005486:	60a3      	str	r3, [r4, #8]
 8005488:	e7f4      	b.n	8005474 <__swsetup_r+0xb0>
 800548a:	2000      	movs	r0, #0
 800548c:	e7f7      	b.n	800547e <__swsetup_r+0xba>
 800548e:	bf00      	nop
 8005490:	2000000c 	.word	0x2000000c
 8005494:	080058d4 	.word	0x080058d4
 8005498:	080058f4 	.word	0x080058f4
 800549c:	080058b4 	.word	0x080058b4

080054a0 <_close_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	; (80054bc <_close_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fb fb4b 	bl	8000b46 <_close>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_close_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_close_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200002f0 	.word	0x200002f0

080054c0 <__sflush_r>:
 80054c0:	898a      	ldrh	r2, [r1, #12]
 80054c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	0710      	lsls	r0, r2, #28
 80054ca:	460c      	mov	r4, r1
 80054cc:	d458      	bmi.n	8005580 <__sflush_r+0xc0>
 80054ce:	684b      	ldr	r3, [r1, #4]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	dc05      	bgt.n	80054e0 <__sflush_r+0x20>
 80054d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	dc02      	bgt.n	80054e0 <__sflush_r+0x20>
 80054da:	2000      	movs	r0, #0
 80054dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80054e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80054e2:	2e00      	cmp	r6, #0
 80054e4:	d0f9      	beq.n	80054da <__sflush_r+0x1a>
 80054e6:	2300      	movs	r3, #0
 80054e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80054ec:	682f      	ldr	r7, [r5, #0]
 80054ee:	602b      	str	r3, [r5, #0]
 80054f0:	d032      	beq.n	8005558 <__sflush_r+0x98>
 80054f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80054f4:	89a3      	ldrh	r3, [r4, #12]
 80054f6:	075a      	lsls	r2, r3, #29
 80054f8:	d505      	bpl.n	8005506 <__sflush_r+0x46>
 80054fa:	6863      	ldr	r3, [r4, #4]
 80054fc:	1ac0      	subs	r0, r0, r3
 80054fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005500:	b10b      	cbz	r3, 8005506 <__sflush_r+0x46>
 8005502:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005504:	1ac0      	subs	r0, r0, r3
 8005506:	2300      	movs	r3, #0
 8005508:	4602      	mov	r2, r0
 800550a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800550c:	6a21      	ldr	r1, [r4, #32]
 800550e:	4628      	mov	r0, r5
 8005510:	47b0      	blx	r6
 8005512:	1c43      	adds	r3, r0, #1
 8005514:	89a3      	ldrh	r3, [r4, #12]
 8005516:	d106      	bne.n	8005526 <__sflush_r+0x66>
 8005518:	6829      	ldr	r1, [r5, #0]
 800551a:	291d      	cmp	r1, #29
 800551c:	d82c      	bhi.n	8005578 <__sflush_r+0xb8>
 800551e:	4a2a      	ldr	r2, [pc, #168]	; (80055c8 <__sflush_r+0x108>)
 8005520:	40ca      	lsrs	r2, r1
 8005522:	07d6      	lsls	r6, r2, #31
 8005524:	d528      	bpl.n	8005578 <__sflush_r+0xb8>
 8005526:	2200      	movs	r2, #0
 8005528:	6062      	str	r2, [r4, #4]
 800552a:	04d9      	lsls	r1, r3, #19
 800552c:	6922      	ldr	r2, [r4, #16]
 800552e:	6022      	str	r2, [r4, #0]
 8005530:	d504      	bpl.n	800553c <__sflush_r+0x7c>
 8005532:	1c42      	adds	r2, r0, #1
 8005534:	d101      	bne.n	800553a <__sflush_r+0x7a>
 8005536:	682b      	ldr	r3, [r5, #0]
 8005538:	b903      	cbnz	r3, 800553c <__sflush_r+0x7c>
 800553a:	6560      	str	r0, [r4, #84]	; 0x54
 800553c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800553e:	602f      	str	r7, [r5, #0]
 8005540:	2900      	cmp	r1, #0
 8005542:	d0ca      	beq.n	80054da <__sflush_r+0x1a>
 8005544:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005548:	4299      	cmp	r1, r3
 800554a:	d002      	beq.n	8005552 <__sflush_r+0x92>
 800554c:	4628      	mov	r0, r5
 800554e:	f000 f8fb 	bl	8005748 <_free_r>
 8005552:	2000      	movs	r0, #0
 8005554:	6360      	str	r0, [r4, #52]	; 0x34
 8005556:	e7c1      	b.n	80054dc <__sflush_r+0x1c>
 8005558:	6a21      	ldr	r1, [r4, #32]
 800555a:	2301      	movs	r3, #1
 800555c:	4628      	mov	r0, r5
 800555e:	47b0      	blx	r6
 8005560:	1c41      	adds	r1, r0, #1
 8005562:	d1c7      	bne.n	80054f4 <__sflush_r+0x34>
 8005564:	682b      	ldr	r3, [r5, #0]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d0c4      	beq.n	80054f4 <__sflush_r+0x34>
 800556a:	2b1d      	cmp	r3, #29
 800556c:	d001      	beq.n	8005572 <__sflush_r+0xb2>
 800556e:	2b16      	cmp	r3, #22
 8005570:	d101      	bne.n	8005576 <__sflush_r+0xb6>
 8005572:	602f      	str	r7, [r5, #0]
 8005574:	e7b1      	b.n	80054da <__sflush_r+0x1a>
 8005576:	89a3      	ldrh	r3, [r4, #12]
 8005578:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800557c:	81a3      	strh	r3, [r4, #12]
 800557e:	e7ad      	b.n	80054dc <__sflush_r+0x1c>
 8005580:	690f      	ldr	r7, [r1, #16]
 8005582:	2f00      	cmp	r7, #0
 8005584:	d0a9      	beq.n	80054da <__sflush_r+0x1a>
 8005586:	0793      	lsls	r3, r2, #30
 8005588:	680e      	ldr	r6, [r1, #0]
 800558a:	bf08      	it	eq
 800558c:	694b      	ldreq	r3, [r1, #20]
 800558e:	600f      	str	r7, [r1, #0]
 8005590:	bf18      	it	ne
 8005592:	2300      	movne	r3, #0
 8005594:	eba6 0807 	sub.w	r8, r6, r7
 8005598:	608b      	str	r3, [r1, #8]
 800559a:	f1b8 0f00 	cmp.w	r8, #0
 800559e:	dd9c      	ble.n	80054da <__sflush_r+0x1a>
 80055a0:	6a21      	ldr	r1, [r4, #32]
 80055a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80055a4:	4643      	mov	r3, r8
 80055a6:	463a      	mov	r2, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	47b0      	blx	r6
 80055ac:	2800      	cmp	r0, #0
 80055ae:	dc06      	bgt.n	80055be <__sflush_r+0xfe>
 80055b0:	89a3      	ldrh	r3, [r4, #12]
 80055b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	f04f 30ff 	mov.w	r0, #4294967295
 80055bc:	e78e      	b.n	80054dc <__sflush_r+0x1c>
 80055be:	4407      	add	r7, r0
 80055c0:	eba8 0800 	sub.w	r8, r8, r0
 80055c4:	e7e9      	b.n	800559a <__sflush_r+0xda>
 80055c6:	bf00      	nop
 80055c8:	20400001 	.word	0x20400001

080055cc <_fflush_r>:
 80055cc:	b538      	push	{r3, r4, r5, lr}
 80055ce:	690b      	ldr	r3, [r1, #16]
 80055d0:	4605      	mov	r5, r0
 80055d2:	460c      	mov	r4, r1
 80055d4:	b913      	cbnz	r3, 80055dc <_fflush_r+0x10>
 80055d6:	2500      	movs	r5, #0
 80055d8:	4628      	mov	r0, r5
 80055da:	bd38      	pop	{r3, r4, r5, pc}
 80055dc:	b118      	cbz	r0, 80055e6 <_fflush_r+0x1a>
 80055de:	6983      	ldr	r3, [r0, #24]
 80055e0:	b90b      	cbnz	r3, 80055e6 <_fflush_r+0x1a>
 80055e2:	f7ff fa4f 	bl	8004a84 <__sinit>
 80055e6:	4b14      	ldr	r3, [pc, #80]	; (8005638 <_fflush_r+0x6c>)
 80055e8:	429c      	cmp	r4, r3
 80055ea:	d11b      	bne.n	8005624 <_fflush_r+0x58>
 80055ec:	686c      	ldr	r4, [r5, #4]
 80055ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d0ef      	beq.n	80055d6 <_fflush_r+0xa>
 80055f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80055f8:	07d0      	lsls	r0, r2, #31
 80055fa:	d404      	bmi.n	8005606 <_fflush_r+0x3a>
 80055fc:	0599      	lsls	r1, r3, #22
 80055fe:	d402      	bmi.n	8005606 <_fflush_r+0x3a>
 8005600:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005602:	f7ff fadd 	bl	8004bc0 <__retarget_lock_acquire_recursive>
 8005606:	4628      	mov	r0, r5
 8005608:	4621      	mov	r1, r4
 800560a:	f7ff ff59 	bl	80054c0 <__sflush_r>
 800560e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005610:	07da      	lsls	r2, r3, #31
 8005612:	4605      	mov	r5, r0
 8005614:	d4e0      	bmi.n	80055d8 <_fflush_r+0xc>
 8005616:	89a3      	ldrh	r3, [r4, #12]
 8005618:	059b      	lsls	r3, r3, #22
 800561a:	d4dd      	bmi.n	80055d8 <_fflush_r+0xc>
 800561c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800561e:	f7ff fad0 	bl	8004bc2 <__retarget_lock_release_recursive>
 8005622:	e7d9      	b.n	80055d8 <_fflush_r+0xc>
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <_fflush_r+0x70>)
 8005626:	429c      	cmp	r4, r3
 8005628:	d101      	bne.n	800562e <_fflush_r+0x62>
 800562a:	68ac      	ldr	r4, [r5, #8]
 800562c:	e7df      	b.n	80055ee <_fflush_r+0x22>
 800562e:	4b04      	ldr	r3, [pc, #16]	; (8005640 <_fflush_r+0x74>)
 8005630:	429c      	cmp	r4, r3
 8005632:	bf08      	it	eq
 8005634:	68ec      	ldreq	r4, [r5, #12]
 8005636:	e7da      	b.n	80055ee <_fflush_r+0x22>
 8005638:	080058d4 	.word	0x080058d4
 800563c:	080058f4 	.word	0x080058f4
 8005640:	080058b4 	.word	0x080058b4

08005644 <_lseek_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d07      	ldr	r5, [pc, #28]	; (8005664 <_lseek_r+0x20>)
 8005648:	4604      	mov	r4, r0
 800564a:	4608      	mov	r0, r1
 800564c:	4611      	mov	r1, r2
 800564e:	2200      	movs	r2, #0
 8005650:	602a      	str	r2, [r5, #0]
 8005652:	461a      	mov	r2, r3
 8005654:	f7fb fa9e 	bl	8000b94 <_lseek>
 8005658:	1c43      	adds	r3, r0, #1
 800565a:	d102      	bne.n	8005662 <_lseek_r+0x1e>
 800565c:	682b      	ldr	r3, [r5, #0]
 800565e:	b103      	cbz	r3, 8005662 <_lseek_r+0x1e>
 8005660:	6023      	str	r3, [r4, #0]
 8005662:	bd38      	pop	{r3, r4, r5, pc}
 8005664:	200002f0 	.word	0x200002f0

08005668 <__swhatbuf_r>:
 8005668:	b570      	push	{r4, r5, r6, lr}
 800566a:	460e      	mov	r6, r1
 800566c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005670:	2900      	cmp	r1, #0
 8005672:	b096      	sub	sp, #88	; 0x58
 8005674:	4614      	mov	r4, r2
 8005676:	461d      	mov	r5, r3
 8005678:	da07      	bge.n	800568a <__swhatbuf_r+0x22>
 800567a:	2300      	movs	r3, #0
 800567c:	602b      	str	r3, [r5, #0]
 800567e:	89b3      	ldrh	r3, [r6, #12]
 8005680:	061a      	lsls	r2, r3, #24
 8005682:	d410      	bmi.n	80056a6 <__swhatbuf_r+0x3e>
 8005684:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005688:	e00e      	b.n	80056a8 <__swhatbuf_r+0x40>
 800568a:	466a      	mov	r2, sp
 800568c:	f000 f8be 	bl	800580c <_fstat_r>
 8005690:	2800      	cmp	r0, #0
 8005692:	dbf2      	blt.n	800567a <__swhatbuf_r+0x12>
 8005694:	9a01      	ldr	r2, [sp, #4]
 8005696:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800569a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800569e:	425a      	negs	r2, r3
 80056a0:	415a      	adcs	r2, r3
 80056a2:	602a      	str	r2, [r5, #0]
 80056a4:	e7ee      	b.n	8005684 <__swhatbuf_r+0x1c>
 80056a6:	2340      	movs	r3, #64	; 0x40
 80056a8:	2000      	movs	r0, #0
 80056aa:	6023      	str	r3, [r4, #0]
 80056ac:	b016      	add	sp, #88	; 0x58
 80056ae:	bd70      	pop	{r4, r5, r6, pc}

080056b0 <__smakebuf_r>:
 80056b0:	898b      	ldrh	r3, [r1, #12]
 80056b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80056b4:	079d      	lsls	r5, r3, #30
 80056b6:	4606      	mov	r6, r0
 80056b8:	460c      	mov	r4, r1
 80056ba:	d507      	bpl.n	80056cc <__smakebuf_r+0x1c>
 80056bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80056c0:	6023      	str	r3, [r4, #0]
 80056c2:	6123      	str	r3, [r4, #16]
 80056c4:	2301      	movs	r3, #1
 80056c6:	6163      	str	r3, [r4, #20]
 80056c8:	b002      	add	sp, #8
 80056ca:	bd70      	pop	{r4, r5, r6, pc}
 80056cc:	ab01      	add	r3, sp, #4
 80056ce:	466a      	mov	r2, sp
 80056d0:	f7ff ffca 	bl	8005668 <__swhatbuf_r>
 80056d4:	9900      	ldr	r1, [sp, #0]
 80056d6:	4605      	mov	r5, r0
 80056d8:	4630      	mov	r0, r6
 80056da:	f7ff fa73 	bl	8004bc4 <_malloc_r>
 80056de:	b948      	cbnz	r0, 80056f4 <__smakebuf_r+0x44>
 80056e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80056e4:	059a      	lsls	r2, r3, #22
 80056e6:	d4ef      	bmi.n	80056c8 <__smakebuf_r+0x18>
 80056e8:	f023 0303 	bic.w	r3, r3, #3
 80056ec:	f043 0302 	orr.w	r3, r3, #2
 80056f0:	81a3      	strh	r3, [r4, #12]
 80056f2:	e7e3      	b.n	80056bc <__smakebuf_r+0xc>
 80056f4:	4b0d      	ldr	r3, [pc, #52]	; (800572c <__smakebuf_r+0x7c>)
 80056f6:	62b3      	str	r3, [r6, #40]	; 0x28
 80056f8:	89a3      	ldrh	r3, [r4, #12]
 80056fa:	6020      	str	r0, [r4, #0]
 80056fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005700:	81a3      	strh	r3, [r4, #12]
 8005702:	9b00      	ldr	r3, [sp, #0]
 8005704:	6163      	str	r3, [r4, #20]
 8005706:	9b01      	ldr	r3, [sp, #4]
 8005708:	6120      	str	r0, [r4, #16]
 800570a:	b15b      	cbz	r3, 8005724 <__smakebuf_r+0x74>
 800570c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005710:	4630      	mov	r0, r6
 8005712:	f000 f88d 	bl	8005830 <_isatty_r>
 8005716:	b128      	cbz	r0, 8005724 <__smakebuf_r+0x74>
 8005718:	89a3      	ldrh	r3, [r4, #12]
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	f043 0301 	orr.w	r3, r3, #1
 8005722:	81a3      	strh	r3, [r4, #12]
 8005724:	89a0      	ldrh	r0, [r4, #12]
 8005726:	4305      	orrs	r5, r0
 8005728:	81a5      	strh	r5, [r4, #12]
 800572a:	e7cd      	b.n	80056c8 <__smakebuf_r+0x18>
 800572c:	08004a1d 	.word	0x08004a1d

08005730 <__malloc_lock>:
 8005730:	4801      	ldr	r0, [pc, #4]	; (8005738 <__malloc_lock+0x8>)
 8005732:	f7ff ba45 	b.w	8004bc0 <__retarget_lock_acquire_recursive>
 8005736:	bf00      	nop
 8005738:	200002e8 	.word	0x200002e8

0800573c <__malloc_unlock>:
 800573c:	4801      	ldr	r0, [pc, #4]	; (8005744 <__malloc_unlock+0x8>)
 800573e:	f7ff ba40 	b.w	8004bc2 <__retarget_lock_release_recursive>
 8005742:	bf00      	nop
 8005744:	200002e8 	.word	0x200002e8

08005748 <_free_r>:
 8005748:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800574a:	2900      	cmp	r1, #0
 800574c:	d048      	beq.n	80057e0 <_free_r+0x98>
 800574e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005752:	9001      	str	r0, [sp, #4]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f1a1 0404 	sub.w	r4, r1, #4
 800575a:	bfb8      	it	lt
 800575c:	18e4      	addlt	r4, r4, r3
 800575e:	f7ff ffe7 	bl	8005730 <__malloc_lock>
 8005762:	4a20      	ldr	r2, [pc, #128]	; (80057e4 <_free_r+0x9c>)
 8005764:	9801      	ldr	r0, [sp, #4]
 8005766:	6813      	ldr	r3, [r2, #0]
 8005768:	4615      	mov	r5, r2
 800576a:	b933      	cbnz	r3, 800577a <_free_r+0x32>
 800576c:	6063      	str	r3, [r4, #4]
 800576e:	6014      	str	r4, [r2, #0]
 8005770:	b003      	add	sp, #12
 8005772:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005776:	f7ff bfe1 	b.w	800573c <__malloc_unlock>
 800577a:	42a3      	cmp	r3, r4
 800577c:	d90b      	bls.n	8005796 <_free_r+0x4e>
 800577e:	6821      	ldr	r1, [r4, #0]
 8005780:	1862      	adds	r2, r4, r1
 8005782:	4293      	cmp	r3, r2
 8005784:	bf04      	itt	eq
 8005786:	681a      	ldreq	r2, [r3, #0]
 8005788:	685b      	ldreq	r3, [r3, #4]
 800578a:	6063      	str	r3, [r4, #4]
 800578c:	bf04      	itt	eq
 800578e:	1852      	addeq	r2, r2, r1
 8005790:	6022      	streq	r2, [r4, #0]
 8005792:	602c      	str	r4, [r5, #0]
 8005794:	e7ec      	b.n	8005770 <_free_r+0x28>
 8005796:	461a      	mov	r2, r3
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	b10b      	cbz	r3, 80057a0 <_free_r+0x58>
 800579c:	42a3      	cmp	r3, r4
 800579e:	d9fa      	bls.n	8005796 <_free_r+0x4e>
 80057a0:	6811      	ldr	r1, [r2, #0]
 80057a2:	1855      	adds	r5, r2, r1
 80057a4:	42a5      	cmp	r5, r4
 80057a6:	d10b      	bne.n	80057c0 <_free_r+0x78>
 80057a8:	6824      	ldr	r4, [r4, #0]
 80057aa:	4421      	add	r1, r4
 80057ac:	1854      	adds	r4, r2, r1
 80057ae:	42a3      	cmp	r3, r4
 80057b0:	6011      	str	r1, [r2, #0]
 80057b2:	d1dd      	bne.n	8005770 <_free_r+0x28>
 80057b4:	681c      	ldr	r4, [r3, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	4421      	add	r1, r4
 80057bc:	6011      	str	r1, [r2, #0]
 80057be:	e7d7      	b.n	8005770 <_free_r+0x28>
 80057c0:	d902      	bls.n	80057c8 <_free_r+0x80>
 80057c2:	230c      	movs	r3, #12
 80057c4:	6003      	str	r3, [r0, #0]
 80057c6:	e7d3      	b.n	8005770 <_free_r+0x28>
 80057c8:	6825      	ldr	r5, [r4, #0]
 80057ca:	1961      	adds	r1, r4, r5
 80057cc:	428b      	cmp	r3, r1
 80057ce:	bf04      	itt	eq
 80057d0:	6819      	ldreq	r1, [r3, #0]
 80057d2:	685b      	ldreq	r3, [r3, #4]
 80057d4:	6063      	str	r3, [r4, #4]
 80057d6:	bf04      	itt	eq
 80057d8:	1949      	addeq	r1, r1, r5
 80057da:	6021      	streq	r1, [r4, #0]
 80057dc:	6054      	str	r4, [r2, #4]
 80057de:	e7c7      	b.n	8005770 <_free_r+0x28>
 80057e0:	b003      	add	sp, #12
 80057e2:	bd30      	pop	{r4, r5, pc}
 80057e4:	20000090 	.word	0x20000090

080057e8 <_read_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4d07      	ldr	r5, [pc, #28]	; (8005808 <_read_r+0x20>)
 80057ec:	4604      	mov	r4, r0
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	2200      	movs	r2, #0
 80057f4:	602a      	str	r2, [r5, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7fb f988 	bl	8000b0c <_read>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_read_r+0x1e>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	b103      	cbz	r3, 8005806 <_read_r+0x1e>
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	200002f0 	.word	0x200002f0

0800580c <_fstat_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4d07      	ldr	r5, [pc, #28]	; (800582c <_fstat_r+0x20>)
 8005810:	2300      	movs	r3, #0
 8005812:	4604      	mov	r4, r0
 8005814:	4608      	mov	r0, r1
 8005816:	4611      	mov	r1, r2
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	f7fb f9a0 	bl	8000b5e <_fstat>
 800581e:	1c43      	adds	r3, r0, #1
 8005820:	d102      	bne.n	8005828 <_fstat_r+0x1c>
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	b103      	cbz	r3, 8005828 <_fstat_r+0x1c>
 8005826:	6023      	str	r3, [r4, #0]
 8005828:	bd38      	pop	{r3, r4, r5, pc}
 800582a:	bf00      	nop
 800582c:	200002f0 	.word	0x200002f0

08005830 <_isatty_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d06      	ldr	r5, [pc, #24]	; (800584c <_isatty_r+0x1c>)
 8005834:	2300      	movs	r3, #0
 8005836:	4604      	mov	r4, r0
 8005838:	4608      	mov	r0, r1
 800583a:	602b      	str	r3, [r5, #0]
 800583c:	f7fb f99f 	bl	8000b7e <_isatty>
 8005840:	1c43      	adds	r3, r0, #1
 8005842:	d102      	bne.n	800584a <_isatty_r+0x1a>
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b103      	cbz	r3, 800584a <_isatty_r+0x1a>
 8005848:	6023      	str	r3, [r4, #0]
 800584a:	bd38      	pop	{r3, r4, r5, pc}
 800584c:	200002f0 	.word	0x200002f0

08005850 <_init>:
 8005850:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005852:	bf00      	nop
 8005854:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005856:	bc08      	pop	{r3}
 8005858:	469e      	mov	lr, r3
 800585a:	4770      	bx	lr

0800585c <_fini>:
 800585c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800585e:	bf00      	nop
 8005860:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005862:	bc08      	pop	{r3}
 8005864:	469e      	mov	lr, r3
 8005866:	4770      	bx	lr
