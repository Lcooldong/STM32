
7-2_ADC_Graph_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a50  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08006bfc  08006bfc  00016bfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006c84  08006c84  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08006c84  08006c84  00016c84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006c8c  08006c8c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006c8c  08006c8c  00016c8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006c90  08006c90  00016c90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08006c94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000334  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003a4  200003a4  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001817f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003227  00000000  00000000  0003821f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  0003b448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001108  00000000  00000000  0003c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000274c7  00000000  00000000  0003d798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001839b  00000000  00000000  00064c5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea940  00000000  00000000  0007cffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016793a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000526c  00000000  00000000  00167990  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08006be4 	.word	0x08006be4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	08006be4 	.word	0x08006be4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004ea:	463b      	mov	r3, r7
 80004ec:	2200      	movs	r2, #0
 80004ee:	601a      	str	r2, [r3, #0]
 80004f0:	605a      	str	r2, [r3, #4]
 80004f2:	609a      	str	r2, [r3, #8]
 80004f4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80004f6:	4b36      	ldr	r3, [pc, #216]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004f8:	4a36      	ldr	r2, [pc, #216]	; (80005d4 <MX_ADC1_Init+0xf0>)
 80004fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80004fc:	4b34      	ldr	r3, [pc, #208]	; (80005d0 <MX_ADC1_Init+0xec>)
 80004fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000502:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000504:	4b32      	ldr	r3, [pc, #200]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800050a:	4b31      	ldr	r3, [pc, #196]	; (80005d0 <MX_ADC1_Init+0xec>)
 800050c:	2201      	movs	r2, #1
 800050e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000510:	4b2f      	ldr	r3, [pc, #188]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000512:	2201      	movs	r2, #1
 8000514:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000516:	4b2e      	ldr	r3, [pc, #184]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000518:	2200      	movs	r2, #0
 800051a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800051e:	4b2c      	ldr	r3, [pc, #176]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000520:	2200      	movs	r2, #0
 8000522:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000524:	4b2a      	ldr	r3, [pc, #168]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000526:	4a2c      	ldr	r2, [pc, #176]	; (80005d8 <MX_ADC1_Init+0xf4>)
 8000528:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <MX_ADC1_Init+0xec>)
 800052c:	2200      	movs	r2, #0
 800052e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000532:	2204      	movs	r2, #4
 8000534:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000538:	2201      	movs	r2, #1
 800053a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800053e:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000540:	2201      	movs	r2, #1
 8000542:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000544:	4822      	ldr	r0, [pc, #136]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000546:	f001 faff 	bl	8001b48 <HAL_ADC_Init>
 800054a:	4603      	mov	r3, r0
 800054c:	2b00      	cmp	r3, #0
 800054e:	d001      	beq.n	8000554 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000550:	f000 fc9e 	bl	8000e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000554:	230a      	movs	r3, #10
 8000556:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000558:	2301      	movs	r3, #1
 800055a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 800055c:	2304      	movs	r3, #4
 800055e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000560:	463b      	mov	r3, r7
 8000562:	4619      	mov	r1, r3
 8000564:	481a      	ldr	r0, [pc, #104]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000566:	f001 fc61 	bl	8001e2c <HAL_ADC_ConfigChannel>
 800056a:	4603      	mov	r3, r0
 800056c:	2b00      	cmp	r3, #0
 800056e:	d001      	beq.n	8000574 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000570:	f000 fc8e 	bl	8000e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000574:	230c      	movs	r3, #12
 8000576:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000578:	2302      	movs	r3, #2
 800057a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800057c:	463b      	mov	r3, r7
 800057e:	4619      	mov	r1, r3
 8000580:	4813      	ldr	r0, [pc, #76]	; (80005d0 <MX_ADC1_Init+0xec>)
 8000582:	f001 fc53 	bl	8001e2c <HAL_ADC_ConfigChannel>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d001      	beq.n	8000590 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800058c:	f000 fc80 	bl	8000e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000590:	230d      	movs	r3, #13
 8000592:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000594:	2303      	movs	r3, #3
 8000596:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000598:	463b      	mov	r3, r7
 800059a:	4619      	mov	r1, r3
 800059c:	480c      	ldr	r0, [pc, #48]	; (80005d0 <MX_ADC1_Init+0xec>)
 800059e:	f001 fc45 	bl	8001e2c <HAL_ADC_ConfigChannel>
 80005a2:	4603      	mov	r3, r0
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d001      	beq.n	80005ac <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80005a8:	f000 fc72 	bl	8000e90 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80005ac:	2309      	movs	r3, #9
 80005ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80005b0:	2304      	movs	r3, #4
 80005b2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b4:	463b      	mov	r3, r7
 80005b6:	4619      	mov	r1, r3
 80005b8:	4805      	ldr	r0, [pc, #20]	; (80005d0 <MX_ADC1_Init+0xec>)
 80005ba:	f001 fc37 	bl	8001e2c <HAL_ADC_ConfigChannel>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80005c4:	f000 fc64 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005c8:	bf00      	nop
 80005ca:	3710      	adds	r7, #16
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	2000009c 	.word	0x2000009c
 80005d4:	40012000 	.word	0x40012000
 80005d8:	0f000001 	.word	0x0f000001

080005dc <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b08a      	sub	sp, #40	; 0x28
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e4:	f107 0314 	add.w	r3, r7, #20
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a3c      	ldr	r2, [pc, #240]	; (80006ec <HAL_ADC_MspInit+0x110>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d171      	bne.n	80006e2 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	613b      	str	r3, [r7, #16]
 8000602:	4b3b      	ldr	r3, [pc, #236]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000606:	4a3a      	ldr	r2, [pc, #232]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000608:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800060c:	6453      	str	r3, [r2, #68]	; 0x44
 800060e:	4b38      	ldr	r3, [pc, #224]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	613b      	str	r3, [r7, #16]
 8000618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
 800061e:	4b34      	ldr	r3, [pc, #208]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000622:	4a33      	ldr	r2, [pc, #204]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000624:	f043 0304 	orr.w	r3, r3, #4
 8000628:	6313      	str	r3, [r2, #48]	; 0x30
 800062a:	4b31      	ldr	r3, [pc, #196]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	f003 0304 	and.w	r3, r3, #4
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	4b2d      	ldr	r3, [pc, #180]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a2c      	ldr	r2, [pc, #176]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b2a      	ldr	r3, [pc, #168]	; (80006f0 <HAL_ADC_MspInit+0x114>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
 8000650:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000652:	230d      	movs	r3, #13
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000656:	2303      	movs	r3, #3
 8000658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800065e:	f107 0314 	add.w	r3, r7, #20
 8000662:	4619      	mov	r1, r3
 8000664:	4823      	ldr	r0, [pc, #140]	; (80006f4 <HAL_ADC_MspInit+0x118>)
 8000666:	f002 fba5 	bl	8002db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800066a:	2302      	movs	r3, #2
 800066c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800066e:	2303      	movs	r3, #3
 8000670:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	481e      	ldr	r0, [pc, #120]	; (80006f8 <HAL_ADC_MspInit+0x11c>)
 800067e:	f002 fb99 	bl	8002db4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000682:	4b1e      	ldr	r3, [pc, #120]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000684:	4a1e      	ldr	r2, [pc, #120]	; (8000700 <HAL_ADC_MspInit+0x124>)
 8000686:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000688:	4b1c      	ldr	r3, [pc, #112]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800068a:	2200      	movs	r2, #0
 800068c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800068e:	4b1b      	ldr	r3, [pc, #108]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000690:	2200      	movs	r2, #0
 8000692:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000694:	4b19      	ldr	r3, [pc, #100]	; (80006fc <HAL_ADC_MspInit+0x120>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <HAL_ADC_MspInit+0x120>)
 800069c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80006a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80006aa:	4b14      	ldr	r3, [pc, #80]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006ba:	4b10      	ldr	r3, [pc, #64]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006c0:	4b0e      	ldr	r3, [pc, #56]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006c8:	f001 ff72 	bl	80025b0 <HAL_DMA_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80006d2:	f000 fbdd 	bl	8000e90 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	4a08      	ldr	r2, [pc, #32]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006da:	639a      	str	r2, [r3, #56]	; 0x38
 80006dc:	4a07      	ldr	r2, [pc, #28]	; (80006fc <HAL_ADC_MspInit+0x120>)
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006e2:	bf00      	nop
 80006e4:	3728      	adds	r7, #40	; 0x28
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40012000 	.word	0x40012000
 80006f0:	40023800 	.word	0x40023800
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020400 	.word	0x40020400
 80006fc:	200000e4 	.word	0x200000e4
 8000700:	40026410 	.word	0x40026410

08000704 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	4b0c      	ldr	r3, [pc, #48]	; (8000740 <MX_DMA_Init+0x3c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	4a0b      	ldr	r2, [pc, #44]	; (8000740 <MX_DMA_Init+0x3c>)
 8000714:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000718:	6313      	str	r3, [r2, #48]	; 0x30
 800071a:	4b09      	ldr	r3, [pc, #36]	; (8000740 <MX_DMA_Init+0x3c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000726:	2200      	movs	r2, #0
 8000728:	2100      	movs	r1, #0
 800072a:	2038      	movs	r0, #56	; 0x38
 800072c:	f001 ff09 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000730:	2038      	movs	r0, #56	; 0x38
 8000732:	f001 ff22 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40023800 	.word	0x40023800

08000744 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	; 0x30
 8000748:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b52      	ldr	r3, [pc, #328]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a51      	ldr	r2, [pc, #324]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000764:	f043 0310 	orr.w	r3, r3, #16
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b4f      	ldr	r3, [pc, #316]	; (80008a8 <MX_GPIO_Init+0x164>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0310 	and.w	r3, r3, #16
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b4b      	ldr	r3, [pc, #300]	; (80008a8 <MX_GPIO_Init+0x164>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a4a      	ldr	r2, [pc, #296]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000780:	f043 0320 	orr.w	r3, r3, #32
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b48      	ldr	r3, [pc, #288]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0320 	and.w	r3, r3, #32
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b44      	ldr	r3, [pc, #272]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a43      	ldr	r2, [pc, #268]	; (80008a8 <MX_GPIO_Init+0x164>)
 800079c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b3d      	ldr	r3, [pc, #244]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	4a3c      	ldr	r2, [pc, #240]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007b8:	f043 0304 	orr.w	r3, r3, #4
 80007bc:	6313      	str	r3, [r2, #48]	; 0x30
 80007be:	4b3a      	ldr	r3, [pc, #232]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	f003 0304 	and.w	r3, r3, #4
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b36      	ldr	r3, [pc, #216]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	4a35      	ldr	r2, [pc, #212]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	6313      	str	r3, [r2, #48]	; 0x30
 80007da:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b2f      	ldr	r3, [pc, #188]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a2e      	ldr	r2, [pc, #184]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007f0:	f043 0302 	orr.w	r3, r3, #2
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_GPIO_Init+0x164>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0302 	and.w	r3, r3, #2
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]
 8000806:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4a27      	ldr	r2, [pc, #156]	; (80008a8 <MX_GPIO_Init+0x164>)
 800080c:	f043 0308 	orr.w	r3, r3, #8
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4b25      	ldr	r3, [pc, #148]	; (80008a8 <MX_GPIO_Init+0x164>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0308 	and.w	r3, r3, #8
 800081a:	603b      	str	r3, [r7, #0]
 800081c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800081e:	2200      	movs	r2, #0
 8000820:	f244 0181 	movw	r1, #16513	; 0x4081
 8000824:	4821      	ldr	r0, [pc, #132]	; (80008ac <MX_GPIO_Init+0x168>)
 8000826:	f002 fc71 	bl	800310c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800082a:	2308      	movs	r3, #8
 800082c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000834:	2301      	movs	r3, #1
 8000836:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000838:	f107 031c 	add.w	r3, r7, #28
 800083c:	4619      	mov	r1, r3
 800083e:	481c      	ldr	r0, [pc, #112]	; (80008b0 <MX_GPIO_Init+0x16c>)
 8000840:	f002 fab8 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000844:	f244 0381 	movw	r3, #16513	; 0x4081
 8000848:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084a:	2301      	movs	r3, #1
 800084c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084e:	2300      	movs	r3, #0
 8000850:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000852:	2300      	movs	r3, #0
 8000854:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000856:	f107 031c 	add.w	r3, r7, #28
 800085a:	4619      	mov	r1, r3
 800085c:	4813      	ldr	r0, [pc, #76]	; (80008ac <MX_GPIO_Init+0x168>)
 800085e:	f002 faa9 	bl	8002db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000862:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000866:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000868:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800086e:	2302      	movs	r3, #2
 8000870:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000872:	f107 031c 	add.w	r3, r7, #28
 8000876:	4619      	mov	r1, r3
 8000878:	480e      	ldr	r0, [pc, #56]	; (80008b4 <MX_GPIO_Init+0x170>)
 800087a:	f002 fa9b 	bl	8002db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800087e:	2200      	movs	r2, #0
 8000880:	2100      	movs	r1, #0
 8000882:	2009      	movs	r0, #9
 8000884:	f001 fe5d 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000888:	2009      	movs	r0, #9
 800088a:	f001 fe76 	bl	800257a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800088e:	2200      	movs	r2, #0
 8000890:	2100      	movs	r1, #0
 8000892:	2028      	movs	r0, #40	; 0x28
 8000894:	f001 fe55 	bl	8002542 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000898:	2028      	movs	r0, #40	; 0x28
 800089a:	f001 fe6e 	bl	800257a <HAL_NVIC_EnableIRQ>

}
 800089e:	bf00      	nop
 80008a0:	3730      	adds	r7, #48	; 0x30
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	40023800 	.word	0x40023800
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40021000 	.word	0x40021000
 80008b4:	40020c00 	.word	0x40020c00

080008b8 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af02      	add	r7, sp, #8
 80008be:	4603      	mov	r3, r0
 80008c0:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80008c2:	79fb      	ldrb	r3, [r7, #7]
 80008c4:	f023 030f 	bic.w	r3, r3, #15
 80008c8:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80008ca:	79fb      	ldrb	r3, [r7, #7]
 80008cc:	011b      	lsls	r3, r3, #4
 80008ce:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80008d0:	7bfb      	ldrb	r3, [r7, #15]
 80008d2:	f043 030c 	orr.w	r3, r3, #12
 80008d6:	b2db      	uxtb	r3, r3
 80008d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80008da:	7bfb      	ldrb	r3, [r7, #15]
 80008dc:	f043 0308 	orr.w	r3, r3, #8
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80008e4:	7bbb      	ldrb	r3, [r7, #14]
 80008e6:	f043 030c 	orr.w	r3, r3, #12
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80008ee:	7bbb      	ldrb	r3, [r7, #14]
 80008f0:	f043 0308 	orr.w	r3, r3, #8
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80008f8:	f107 0208 	add.w	r2, r7, #8
 80008fc:	2364      	movs	r3, #100	; 0x64
 80008fe:	9300      	str	r3, [sp, #0]
 8000900:	2304      	movs	r3, #4
 8000902:	214e      	movs	r1, #78	; 0x4e
 8000904:	4803      	ldr	r0, [pc, #12]	; (8000914 <lcd_send_cmd+0x5c>)
 8000906:	f002 fd83 	bl	8003410 <HAL_I2C_Master_Transmit>
}
 800090a:	bf00      	nop
 800090c:	3710      	adds	r7, #16
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000144 	.word	0x20000144

08000918 <lcd_init>:
    lcd_send_cmd (col);
}


void lcd_init (void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 800091c:	2032      	movs	r0, #50	; 0x32
 800091e:	f001 f8ef 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000922:	2030      	movs	r0, #48	; 0x30
 8000924:	f7ff ffc8 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000928:	2005      	movs	r0, #5
 800092a:	f001 f8e9 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 800092e:	2030      	movs	r0, #48	; 0x30
 8000930:	f7ff ffc2 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000934:	2001      	movs	r0, #1
 8000936:	f001 f8e3 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x30);
 800093a:	2030      	movs	r0, #48	; 0x30
 800093c:	f7ff ffbc 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(10);
 8000940:	200a      	movs	r0, #10
 8000942:	f001 f8dd 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000946:	2020      	movs	r0, #32
 8000948:	f7ff ffb6 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(10);
 800094c:	200a      	movs	r0, #10
 800094e:	f001 f8d7 	bl	8001b00 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000952:	2028      	movs	r0, #40	; 0x28
 8000954:	f7ff ffb0 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000958:	2001      	movs	r0, #1
 800095a:	f001 f8d1 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 800095e:	2008      	movs	r0, #8
 8000960:	f7ff ffaa 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000964:	2001      	movs	r0, #1
 8000966:	f001 f8cb 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800096a:	2001      	movs	r0, #1
 800096c:	f7ff ffa4 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000970:	2001      	movs	r0, #1
 8000972:	f001 f8c5 	bl	8001b00 <HAL_Delay>
	HAL_Delay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f001 f8c2 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 800097c:	2006      	movs	r0, #6
 800097e:	f7ff ff9b 	bl	80008b8 <lcd_send_cmd>
	HAL_Delay(1);
 8000982:	2001      	movs	r0, #1
 8000984:	f001 f8bc 	bl	8001b00 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000988:	200c      	movs	r0, #12
 800098a:	f7ff ff95 	bl	80008b8 <lcd_send_cmd>
}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_I2C1_Init+0x74>)
 800099a:	4a1c      	ldr	r2, [pc, #112]	; (8000a0c <MX_I2C1_Init+0x78>)
 800099c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <MX_I2C1_Init+0x7c>)
 80009a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009b2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009b6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009b8:	4b13      	ldr	r3, [pc, #76]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009be:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009c4:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009d0:	480d      	ldr	r0, [pc, #52]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009d2:	f002 fbd9 	bl	8003188 <HAL_I2C_Init>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009dc:	f000 fa58 	bl	8000e90 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009e0:	2100      	movs	r1, #0
 80009e2:	4809      	ldr	r0, [pc, #36]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009e4:	f003 f81b 	bl	8003a1e <HAL_I2CEx_ConfigAnalogFilter>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80009ee:	f000 fa4f 	bl	8000e90 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80009f2:	2100      	movs	r1, #0
 80009f4:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_I2C1_Init+0x74>)
 80009f6:	f003 f84e 	bl	8003a96 <HAL_I2CEx_ConfigDigitalFilter>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000a00:	f000 fa46 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000144 	.word	0x20000144
 8000a0c:	40005400 	.word	0x40005400
 8000a10:	000186a0 	.word	0x000186a0

08000a14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b08a      	sub	sp, #40	; 0x28
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	2200      	movs	r2, #0
 8000a22:	601a      	str	r2, [r3, #0]
 8000a24:	605a      	str	r2, [r3, #4]
 8000a26:	609a      	str	r2, [r3, #8]
 8000a28:	60da      	str	r2, [r3, #12]
 8000a2a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	4a19      	ldr	r2, [pc, #100]	; (8000a98 <HAL_I2C_MspInit+0x84>)
 8000a32:	4293      	cmp	r3, r2
 8000a34:	d12c      	bne.n	8000a90 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a36:	2300      	movs	r3, #0
 8000a38:	613b      	str	r3, [r7, #16]
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a40:	f043 0302 	orr.w	r3, r3, #2
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0302 	and.w	r3, r3, #2
 8000a4e:	613b      	str	r3, [r7, #16]
 8000a50:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a52:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a58:	2312      	movs	r3, #18
 8000a5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a64:	2304      	movs	r3, #4
 8000a66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a68:	f107 0314 	add.w	r3, r7, #20
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <HAL_I2C_MspInit+0x8c>)
 8000a70:	f002 f9a0 	bl	8002db4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	4b08      	ldr	r3, [pc, #32]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7c:	4a07      	ldr	r2, [pc, #28]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a7e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a82:	6413      	str	r3, [r2, #64]	; 0x40
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <HAL_I2C_MspInit+0x88>)
 8000a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a90:	bf00      	nop
 8000a92:	3728      	adds	r7, #40	; 0x28
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40005400 	.word	0x40005400
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)== HAL_OK) return len;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	b29a      	uxth	r2, r3
 8000ab4:	230a      	movs	r3, #10
 8000ab6:	68b9      	ldr	r1, [r7, #8]
 8000ab8:	4806      	ldr	r0, [pc, #24]	; (8000ad4 <_write+0x30>)
 8000aba:	f004 fc22 	bl	8005302 <HAL_UART_Transmit>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d101      	bne.n	8000ac8 <_write+0x24>
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	e000      	b.n	8000aca <_write+0x26>
	else return 0;
 8000ac8:	2300      	movs	r3, #0
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3710      	adds	r7, #16
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	2000034c 	.word	0x2000034c

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	f5ad 6d9d 	sub.w	sp, sp, #1256	; 0x4e8
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ae0:	f000 ff9c 	bl	8001a1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae4:	f000 f964 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae8:	f7ff fe2c 	bl	8000744 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000aec:	f000 fef2 	bl	80018d4 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000af0:	f7ff ff50 	bl	8000994 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000af4:	f000 fcf8 	bl	80014e8 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000af8:	f000 fb6a 	bl	80011d0 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000afc:	f000 fbde 	bl	80012bc <MX_TIM4_Init>
  MX_TIM10_Init();
 8000b00:	f000 fd28 	bl	8001554 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000b04:	f000 faee 	bl	80010e4 <MX_TIM2_Init>
  MX_DMA_Init();
 8000b08:	f7ff fdfc 	bl	8000704 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b0c:	f7ff fcea 	bl	80004e4 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000b10:	f000 fc68 	bl	80013e4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 8000b14:	f7ff ff00 	bl	8000918 <lcd_init>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValue[0], 4);
 8000b18:	f207 43bc 	addw	r3, r7, #1212	; 0x4bc
 8000b1c:	2204      	movs	r2, #4
 8000b1e:	4619      	mov	r1, r3
 8000b20:	489e      	ldr	r0, [pc, #632]	; (8000d9c <main+0x2c4>)
 8000b22:	f001 f855 	bl	8001bd0 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  int cnt = 0;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
  uint32_t startTime = HAL_GetTick();
 8000b2c:	f000 ffdc 	bl	8001ae8 <HAL_GetTick>
 8000b30:	f8c7 04c8 	str.w	r0, [r7, #1224]	; 0x4c8
  dataBox analogData[AD_DATA];
  while (1)
  {
	  //printf("\r\n===========================================\r\n");
	  for(int i=0; i < AD_DATA; i++){
 8000b34:	2300      	movs	r3, #0
 8000b36:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000b3a:	e03b      	b.n	8000bb4 <main+0xdc>
		  tempData = adcValue[3];	// new set for data
 8000b3c:	f8b7 34c2 	ldrh.w	r3, [r7, #1218]	; 0x4c2
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	4b97      	ldr	r3, [pc, #604]	; (8000da0 <main+0x2c8>)
 8000b44:	801a      	strh	r2, [r3, #0]
		  currentTime = HAL_GetTick();
 8000b46:	f000 ffcf 	bl	8001ae8 <HAL_GetTick>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	4a95      	ldr	r2, [pc, #596]	; (8000da4 <main+0x2cc>)
 8000b4e:	6013      	str	r3, [r2, #0]
		  //printf("%d\r\n", currentTime);
		  analogData[i].value = tempData;
 8000b50:	4b93      	ldr	r3, [pc, #588]	; (8000da0 <main+0x2c8>)
 8000b52:	881b      	ldrh	r3, [r3, #0]
 8000b54:	4618      	mov	r0, r3
 8000b56:	f107 010c 	add.w	r1, r7, #12
 8000b5a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8000b5e:	4613      	mov	r3, r2
 8000b60:	005b      	lsls	r3, r3, #1
 8000b62:	4413      	add	r3, r2
 8000b64:	009b      	lsls	r3, r3, #2
 8000b66:	440b      	add	r3, r1
 8000b68:	6018      	str	r0, [r3, #0]
		  analogData[i].time  = currentTime;
 8000b6a:	4b8e      	ldr	r3, [pc, #568]	; (8000da4 <main+0x2cc>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f107 010c 	add.w	r1, r7, #12
 8000b74:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8000b78:	4613      	mov	r3, r2
 8000b7a:	005b      	lsls	r3, r3, #1
 8000b7c:	4413      	add	r3, r2
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	440b      	add	r3, r1
 8000b82:	3304      	adds	r3, #4
 8000b84:	6018      	str	r0, [r3, #0]
		  analogData[i].count = cnt;
 8000b86:	f107 010c 	add.w	r1, r7, #12
 8000b8a:	f8d7 24e0 	ldr.w	r2, [r7, #1248]	; 0x4e0
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3308      	adds	r3, #8
 8000b9a:	f8d7 24e4 	ldr.w	r2, [r7, #1252]	; 0x4e4
 8000b9e:	601a      	str	r2, [r3, #0]
		  cnt++;
 8000ba0:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000ba4:	3301      	adds	r3, #1
 8000ba6:	f8c7 34e4 	str.w	r3, [r7, #1252]	; 0x4e4
	  for(int i=0; i < AD_DATA; i++){
 8000baa:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f8c7 34e0 	str.w	r3, [r7, #1248]	; 0x4e0
 8000bb4:	f8d7 34e0 	ldr.w	r3, [r7, #1248]	; 0x4e0
 8000bb8:	2b63      	cmp	r3, #99	; 0x63
 8000bba:	ddbf      	ble.n	8000b3c <main+0x64>
	  }

	  if(cnt == 100) break;
 8000bbc:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	; 0x4e4
 8000bc0:	2b64      	cmp	r3, #100	; 0x64
 8000bc2:	d003      	beq.n	8000bcc <main+0xf4>



	  //printf("\r===========================================\r\n");
	  HAL_Delay(100);
 8000bc4:	2064      	movs	r0, #100	; 0x64
 8000bc6:	f000 ff9b 	bl	8001b00 <HAL_Delay>
	  for(int i=0; i < AD_DATA; i++){
 8000bca:	e7b3      	b.n	8000b34 <main+0x5c>
	  if(cnt == 100) break;
 8000bcc:	bf00      	nop

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  bool flag = true;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
  for(int i=0; i< AD_DATA; i++){
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8000bda:	e06c      	b.n	8000cb6 <main+0x1de>
	  flag = false;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	  for(int j=0; j < AD_DATA-1-i; j++){
 8000be2:	2300      	movs	r3, #0
 8000be4:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8000be8:	e051      	b.n	8000c8e <main+0x1b6>
		  if(analogData[j].value > analogData[j+1].value){
 8000bea:	f107 010c 	add.w	r1, r7, #12
 8000bee:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8000bf2:	4613      	mov	r3, r2
 8000bf4:	005b      	lsls	r3, r3, #1
 8000bf6:	4413      	add	r3, r2
 8000bf8:	009b      	lsls	r3, r3, #2
 8000bfa:	440b      	add	r3, r1
 8000bfc:	6819      	ldr	r1, [r3, #0]
 8000bfe:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000c02:	1c5a      	adds	r2, r3, #1
 8000c04:	f107 000c 	add.w	r0, r7, #12
 8000c08:	4613      	mov	r3, r2
 8000c0a:	005b      	lsls	r3, r3, #1
 8000c0c:	4413      	add	r3, r2
 8000c0e:	009b      	lsls	r3, r3, #2
 8000c10:	4403      	add	r3, r0
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4299      	cmp	r1, r3
 8000c16:	dd35      	ble.n	8000c84 <main+0x1ac>
			  dataBox temp;
			  temp = analogData[j];
 8000c18:	4638      	mov	r0, r7
 8000c1a:	f107 010c 	add.w	r1, r7, #12
 8000c1e:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8000c22:	4613      	mov	r3, r2
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	4413      	add	r3, r2
 8000c28:	009b      	lsls	r3, r3, #2
 8000c2a:	18ca      	adds	r2, r1, r3
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  analogData[j] = analogData[j+1];
 8000c34:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	f107 000c 	add.w	r0, r7, #12
 8000c3e:	f8d7 14d4 	ldr.w	r1, [r7, #1236]	; 0x4d4
 8000c42:	460b      	mov	r3, r1
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	440b      	add	r3, r1
 8000c48:	009b      	lsls	r3, r3, #2
 8000c4a:	4418      	add	r0, r3
 8000c4c:	f107 010c 	add.w	r1, r7, #12
 8000c50:	4613      	mov	r3, r2
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	4413      	add	r3, r2
 8000c56:	009b      	lsls	r3, r3, #2
 8000c58:	18ca      	adds	r2, r1, r3
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c5e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  analogData[j+1] = temp;
 8000c62:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000c66:	1c5a      	adds	r2, r3, #1
 8000c68:	f107 010c 	add.w	r1, r7, #12
 8000c6c:	4613      	mov	r3, r2
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	4413      	add	r3, r2
 8000c72:	009b      	lsls	r3, r3, #2
 8000c74:	440b      	add	r3, r1
 8000c76:	463a      	mov	r2, r7
 8000c78:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c7a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
			  flag = true;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	f887 34df 	strb.w	r3, [r7, #1247]	; 0x4df
	  for(int j=0; j < AD_DATA-1-i; j++){
 8000c84:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000c88:	3301      	adds	r3, #1
 8000c8a:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
 8000c8e:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000c92:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8000c96:	f8d7 24d4 	ldr.w	r2, [r7, #1236]	; 0x4d4
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	dba5      	blt.n	8000bea <main+0x112>
		  }
	  }
	  if (flag == false) break;
 8000c9e:	f897 34df 	ldrb.w	r3, [r7, #1247]	; 0x4df
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d109      	bne.n	8000cc0 <main+0x1e8>
  for(int i=0; i< AD_DATA; i++){
 8000cac:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000cb0:	3301      	adds	r3, #1
 8000cb2:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 8000cb6:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000cba:	2b63      	cmp	r3, #99	; 0x63
 8000cbc:	dd8e      	ble.n	8000bdc <main+0x104>
 8000cbe:	e000      	b.n	8000cc2 <main+0x1ea>
	  if (flag == false) break;
 8000cc0:	bf00      	nop

  }

  for(int i=0; i < AD_DATA-1; i++){	// align
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8000cc8:	e05d      	b.n	8000d86 <main+0x2ae>
	  int spacer = analogData[i].time /1000;
 8000cca:	f107 010c 	add.w	r1, r7, #12
 8000cce:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	005b      	lsls	r3, r3, #1
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	440b      	add	r3, r1
 8000cdc:	3304      	adds	r3, #4
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a31      	ldr	r2, [pc, #196]	; (8000da8 <main+0x2d0>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1192      	asrs	r2, r2, #6
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad3      	subs	r3, r2, r3
 8000cec:	f8c7 34c4 	str.w	r3, [r7, #1220]	; 0x4c4
	  if((analogData[i].value == analogData[i+1].value) || (analogData[i].time == 0)){
 8000cf0:	f107 010c 	add.w	r1, r7, #12
 8000cf4:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000cf8:	4613      	mov	r3, r2
 8000cfa:	005b      	lsls	r3, r3, #1
 8000cfc:	4413      	add	r3, r2
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	440b      	add	r3, r1
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000d08:	1c5a      	adds	r2, r3, #1
 8000d0a:	f107 000c 	add.w	r0, r7, #12
 8000d0e:	4613      	mov	r3, r2
 8000d10:	005b      	lsls	r3, r3, #1
 8000d12:	4413      	add	r3, r2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	4403      	add	r3, r0
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4299      	cmp	r1, r3
 8000d1c:	d00c      	beq.n	8000d38 <main+0x260>
 8000d1e:	f107 010c 	add.w	r1, r7, #12
 8000d22:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000d26:	4613      	mov	r3, r2
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	4413      	add	r3, r2
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	440b      	add	r3, r1
 8000d30:	3304      	adds	r3, #4
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d11b      	bne.n	8000d70 <main+0x298>
		  for(int j = 0; j < analogData[i].count; j++){
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8000d3e:	e007      	b.n	8000d50 <main+0x278>
			  printf(" ");
 8000d40:	2020      	movs	r0, #32
 8000d42:	f005 fa2b 	bl	800619c <putchar>
		  for(int j = 0; j < analogData[i].count; j++){
 8000d46:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	; 0x4cc
 8000d4a:	3301      	adds	r3, #1
 8000d4c:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
 8000d50:	f107 010c 	add.w	r1, r7, #12
 8000d54:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	440b      	add	r3, r1
 8000d62:	3308      	adds	r3, #8
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	dbe8      	blt.n	8000d40 <main+0x268>
 8000d6e:	e002      	b.n	8000d76 <main+0x29e>
		  }
	  }else{
		  printf("\r\n");
 8000d70:	480e      	ldr	r0, [pc, #56]	; (8000dac <main+0x2d4>)
 8000d72:	f005 fa97 	bl	80062a4 <puts>
	  }
	  //printf("%d\r\n", analogData[i].value);
	  printf("o");
 8000d76:	206f      	movs	r0, #111	; 0x6f
 8000d78:	f005 fa10 	bl	800619c <putchar>
  for(int i=0; i < AD_DATA-1; i++){	// align
 8000d7c:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000d80:	3301      	adds	r3, #1
 8000d82:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
 8000d86:	f8d7 34d0 	ldr.w	r3, [r7, #1232]	; 0x4d0
 8000d8a:	2b62      	cmp	r3, #98	; 0x62
 8000d8c:	dd9d      	ble.n	8000cca <main+0x1f2>
 8000d8e:	2300      	movs	r3, #0

  }

  /* USER CODE END 3 */
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	f507 679d 	add.w	r7, r7, #1256	; 0x4e8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000009c 	.word	0x2000009c
 8000da0:	2000008c 	.word	0x2000008c
 8000da4:	20000198 	.word	0x20000198
 8000da8:	10624dd3 	.word	0x10624dd3
 8000dac:	08006bfc 	.word	0x08006bfc

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f005 f9e4 	bl	800618c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b2b      	ldr	r3, [pc, #172]	; (8000e88 <SystemClock_Config+0xd8>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a2a      	ldr	r2, [pc, #168]	; (8000e88 <SystemClock_Config+0xd8>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b28      	ldr	r3, [pc, #160]	; (8000e88 <SystemClock_Config+0xd8>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b25      	ldr	r3, [pc, #148]	; (8000e8c <SystemClock_Config+0xdc>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a24      	ldr	r2, [pc, #144]	; (8000e8c <SystemClock_Config+0xdc>)
 8000dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <SystemClock_Config+0xdc>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0c:	2301      	movs	r3, #1
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e16:	2302      	movs	r3, #2
 8000e18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000e20:	2304      	movs	r3, #4
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000e24:	23b4      	movs	r3, #180	; 0xb4
 8000e26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e2c:	2304      	movs	r3, #4
 8000e2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e30:	f107 0320 	add.w	r3, r7, #32
 8000e34:	4618      	mov	r0, r3
 8000e36:	f002 febd 	bl	8003bb4 <HAL_RCC_OscConfig>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e40:	f000 f826 	bl	8000e90 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e44:	f002 fe66 	bl	8003b14 <HAL_PWREx_EnableOverDrive>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e4e:	f000 f81f 	bl	8000e90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e62:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e68:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e6a:	f107 030c 	add.w	r3, r7, #12
 8000e6e:	2105      	movs	r1, #5
 8000e70:	4618      	mov	r0, r3
 8000e72:	f003 f917 	bl	80040a4 <HAL_RCC_ClockConfig>
 8000e76:	4603      	mov	r3, r0
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d001      	beq.n	8000e80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e7c:	f000 f808 	bl	8000e90 <Error_Handler>
  }
}
 8000e80:	bf00      	nop
 8000e82:	3750      	adds	r7, #80	; 0x50
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40007000 	.word	0x40007000

08000e90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e90:	b480      	push	{r7}
 8000e92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e94:	b672      	cpsid	i
}
 8000e96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <Error_Handler+0x8>
	...

08000e9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e9c:	b480      	push	{r7}
 8000e9e:	b083      	sub	sp, #12
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	607b      	str	r3, [r7, #4]
 8000ea6:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eaa:	4a0f      	ldr	r2, [pc, #60]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eba:	607b      	str	r3, [r7, #4]
 8000ebc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec6:	4a08      	ldr	r2, [pc, #32]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ec8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ecc:	6413      	str	r3, [r2, #64]	; 0x40
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <HAL_MspInit+0x4c>)
 8000ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ed6:	603b      	str	r3, [r7, #0]
 8000ed8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800

08000eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <NMI_Handler+0x4>

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f38:	f000 fdc2 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3c:	bf00      	nop
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f44:	2008      	movs	r0, #8
 8000f46:	f002 f8fb 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f4a:	bf00      	nop
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <TIM4_IRQHandler+0x10>)
 8000f56:	f003 fb49 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	2000019c 	.word	0x2000019c

08000f64 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <USART3_IRQHandler+0x10>)
 8000f6a:	f004 fa5d 	bl	8005428 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000034c 	.word	0x2000034c

08000f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f7c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f80:	f002 f8de 	bl	8003140 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f8c:	4802      	ldr	r0, [pc, #8]	; (8000f98 <TIM7_IRQHandler+0x10>)
 8000f8e:	f003 fb2d 	bl	80045ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	20000304 	.word	0x20000304

08000f9c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000fa0:	4802      	ldr	r0, [pc, #8]	; (8000fac <DMA2_Stream0_IRQHandler+0x10>)
 8000fa2:	f001 fc9d 	bl	80028e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	200000e4 	.word	0x200000e4

08000fb0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b086      	sub	sp, #24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	60f8      	str	r0, [r7, #12]
 8000fb8:	60b9      	str	r1, [r7, #8]
 8000fba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
 8000fc0:	e00a      	b.n	8000fd8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc2:	f3af 8000 	nop.w
 8000fc6:	4601      	mov	r1, r0
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	1c5a      	adds	r2, r3, #1
 8000fcc:	60ba      	str	r2, [r7, #8]
 8000fce:	b2ca      	uxtb	r2, r1
 8000fd0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf0      	blt.n	8000fc2 <_read+0x12>
	}

return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f005 f858 	bl	8006138 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20030000 	.word	0x20030000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20000090 	.word	0x20000090
 80010bc:	200003a8 	.word	0x200003a8

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08e      	sub	sp, #56	; 0x38
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	f107 0320 	add.w	r3, r7, #32
 80010fc:	2200      	movs	r2, #0
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001116:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800111a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800111c:	4b2b      	ldr	r3, [pc, #172]	; (80011cc <MX_TIM2_Init+0xe8>)
 800111e:	22b3      	movs	r2, #179	; 0xb3
 8001120:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b2a      	ldr	r3, [pc, #168]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001128:	4b28      	ldr	r3, [pc, #160]	; (80011cc <MX_TIM2_Init+0xe8>)
 800112a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800112e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001130:	4b26      	ldr	r3, [pc, #152]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001136:	4b25      	ldr	r3, [pc, #148]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800113c:	4823      	ldr	r0, [pc, #140]	; (80011cc <MX_TIM2_Init+0xe8>)
 800113e:	f003 f9ad 	bl	800449c <HAL_TIM_Base_Init>
 8001142:	4603      	mov	r3, r0
 8001144:	2b00      	cmp	r3, #0
 8001146:	d001      	beq.n	800114c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001148:	f7ff fea2 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001150:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001152:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001156:	4619      	mov	r1, r3
 8001158:	481c      	ldr	r0, [pc, #112]	; (80011cc <MX_TIM2_Init+0xe8>)
 800115a:	f003 fc11 	bl	8004980 <HAL_TIM_ConfigClockSource>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001164:	f7ff fe94 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001168:	4818      	ldr	r0, [pc, #96]	; (80011cc <MX_TIM2_Init+0xe8>)
 800116a:	f003 f9e6 	bl	800453a <HAL_TIM_PWM_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001174:	f7ff fe8c 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800117c:	2300      	movs	r3, #0
 800117e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	4619      	mov	r1, r3
 8001186:	4811      	ldr	r0, [pc, #68]	; (80011cc <MX_TIM2_Init+0xe8>)
 8001188:	f003 ffde 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001192:	f7ff fe7d 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001196:	2360      	movs	r3, #96	; 0x60
 8001198:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800119a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800119e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011a4:	2300      	movs	r3, #0
 80011a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011a8:	1d3b      	adds	r3, r7, #4
 80011aa:	2200      	movs	r2, #0
 80011ac:	4619      	mov	r1, r3
 80011ae:	4807      	ldr	r0, [pc, #28]	; (80011cc <MX_TIM2_Init+0xe8>)
 80011b0:	f003 fb24 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d001      	beq.n	80011be <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80011ba:	f7ff fe69 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80011be:	4803      	ldr	r0, [pc, #12]	; (80011cc <MX_TIM2_Init+0xe8>)
 80011c0:	f000 fab2 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80011c4:	bf00      	nop
 80011c6:	3738      	adds	r7, #56	; 0x38
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002bc 	.word	0x200002bc

080011d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b08e      	sub	sp, #56	; 0x38
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	605a      	str	r2, [r3, #4]
 80011e0:	609a      	str	r2, [r3, #8]
 80011e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011e4:	f107 0320 	add.w	r3, r7, #32
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001200:	4b2c      	ldr	r3, [pc, #176]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <MX_TIM3_Init+0xe8>)
 8001204:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8001206:	4b2b      	ldr	r3, [pc, #172]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001208:	2208      	movs	r2, #8
 800120a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b29      	ldr	r3, [pc, #164]	; (80012b4 <MX_TIM3_Init+0xe4>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001214:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001218:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b26      	ldr	r3, [pc, #152]	; (80012b4 <MX_TIM3_Init+0xe4>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001226:	4823      	ldr	r0, [pc, #140]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001228:	f003 f938 	bl	800449c <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001232:	f7ff fe2d 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800123c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001240:	4619      	mov	r1, r3
 8001242:	481c      	ldr	r0, [pc, #112]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001244:	f003 fb9c 	bl	8004980 <HAL_TIM_ConfigClockSource>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800124e:	f7ff fe1f 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001252:	4818      	ldr	r0, [pc, #96]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001254:	f003 f971 	bl	800453a <HAL_TIM_PWM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800125e:	f7ff fe17 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001262:	2300      	movs	r3, #0
 8001264:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800126a:	f107 0320 	add.w	r3, r7, #32
 800126e:	4619      	mov	r1, r3
 8001270:	4810      	ldr	r0, [pc, #64]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001272:	f003 ff69 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8001276:	4603      	mov	r3, r0
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800127c:	f7ff fe08 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001280:	2360      	movs	r3, #96	; 0x60
 8001282:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001288:	2300      	movs	r3, #0
 800128a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800128c:	2300      	movs	r3, #0
 800128e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001290:	1d3b      	adds	r3, r7, #4
 8001292:	2200      	movs	r2, #0
 8001294:	4619      	mov	r1, r3
 8001296:	4807      	ldr	r0, [pc, #28]	; (80012b4 <MX_TIM3_Init+0xe4>)
 8001298:	f003 fab0 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80012a2:	f7ff fdf5 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80012a6:	4803      	ldr	r0, [pc, #12]	; (80012b4 <MX_TIM3_Init+0xe4>)
 80012a8:	f000 fa3e 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80012ac:	bf00      	nop
 80012ae:	3738      	adds	r7, #56	; 0x38
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000274 	.word	0x20000274
 80012b8:	40000400 	.word	0x40000400

080012bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]
 80012ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d0:	f107 0320 	add.w	r3, r7, #32
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012da:	1d3b      	adds	r3, r7, #4
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]
 80012e8:	615a      	str	r2, [r3, #20]
 80012ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ec:	4b3b      	ldr	r3, [pc, #236]	; (80013dc <MX_TIM4_Init+0x120>)
 80012ee:	4a3c      	ldr	r2, [pc, #240]	; (80013e0 <MX_TIM4_Init+0x124>)
 80012f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80012f2:	4b3a      	ldr	r3, [pc, #232]	; (80013dc <MX_TIM4_Init+0x120>)
 80012f4:	2211      	movs	r2, #17
 80012f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f8:	4b38      	ldr	r3, [pc, #224]	; (80013dc <MX_TIM4_Init+0x120>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80012fe:	4b37      	ldr	r3, [pc, #220]	; (80013dc <MX_TIM4_Init+0x120>)
 8001300:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001304:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001306:	4b35      	ldr	r3, [pc, #212]	; (80013dc <MX_TIM4_Init+0x120>)
 8001308:	2200      	movs	r2, #0
 800130a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130c:	4b33      	ldr	r3, [pc, #204]	; (80013dc <MX_TIM4_Init+0x120>)
 800130e:	2200      	movs	r2, #0
 8001310:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001312:	4832      	ldr	r0, [pc, #200]	; (80013dc <MX_TIM4_Init+0x120>)
 8001314:	f003 f8c2 	bl	800449c <HAL_TIM_Base_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800131e:	f7ff fdb7 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001322:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001328:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800132c:	4619      	mov	r1, r3
 800132e:	482b      	ldr	r0, [pc, #172]	; (80013dc <MX_TIM4_Init+0x120>)
 8001330:	f003 fb26 	bl	8004980 <HAL_TIM_ConfigClockSource>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800133a:	f7ff fda9 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800133e:	4827      	ldr	r0, [pc, #156]	; (80013dc <MX_TIM4_Init+0x120>)
 8001340:	f003 f8fb 	bl	800453a <HAL_TIM_PWM_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800134a:	f7ff fda1 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001352:	2300      	movs	r3, #0
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001356:	f107 0320 	add.w	r3, r7, #32
 800135a:	4619      	mov	r1, r3
 800135c:	481f      	ldr	r0, [pc, #124]	; (80013dc <MX_TIM4_Init+0x120>)
 800135e:	f003 fef3 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001368:	f7ff fd92 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136c:	2360      	movs	r3, #96	; 0x60
 800136e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001370:	f246 13a7 	movw	r3, #24999	; 0x61a7
 8001374:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2200      	movs	r2, #0
 8001382:	4619      	mov	r1, r3
 8001384:	4815      	ldr	r0, [pc, #84]	; (80013dc <MX_TIM4_Init+0x120>)
 8001386:	f003 fa39 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001390:	f7ff fd7e 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8001394:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001398:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2204      	movs	r2, #4
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_TIM4_Init+0x120>)
 80013a2:	f003 fa2b 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80013ac:	f7ff fd70 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 80013b0:	f641 4351 	movw	r3, #7249	; 0x1c51
 80013b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2208      	movs	r2, #8
 80013ba:	4619      	mov	r1, r3
 80013bc:	4807      	ldr	r0, [pc, #28]	; (80013dc <MX_TIM4_Init+0x120>)
 80013be:	f003 fa1d 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80013c8:	f7ff fd62 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80013cc:	4803      	ldr	r0, [pc, #12]	; (80013dc <MX_TIM4_Init+0x120>)
 80013ce:	f000 f9ab 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80013d2:	bf00      	nop
 80013d4:	3738      	adds	r7, #56	; 0x38
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	2000019c 	.word	0x2000019c
 80013e0:	40000800 	.word	0x40000800

080013e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08e      	sub	sp, #56	; 0x38
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0320 	add.w	r3, r7, #32
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
 8001410:	615a      	str	r2, [r3, #20]
 8001412:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001414:	4b31      	ldr	r3, [pc, #196]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001416:	4a32      	ldr	r2, [pc, #200]	; (80014e0 <MX_TIM5_Init+0xfc>)
 8001418:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 800141a:	4b30      	ldr	r3, [pc, #192]	; (80014dc <MX_TIM5_Init+0xf8>)
 800141c:	2209      	movs	r2, #9
 800141e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001420:	4b2e      	ldr	r3, [pc, #184]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001422:	2200      	movs	r2, #0
 8001424:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8001426:	4b2d      	ldr	r3, [pc, #180]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001428:	4a2e      	ldr	r2, [pc, #184]	; (80014e4 <MX_TIM5_Init+0x100>)
 800142a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b2b      	ldr	r3, [pc, #172]	; (80014dc <MX_TIM5_Init+0xf8>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b2a      	ldr	r3, [pc, #168]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001438:	4828      	ldr	r0, [pc, #160]	; (80014dc <MX_TIM5_Init+0xf8>)
 800143a:	f003 f82f 	bl	800449c <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001444:	f7ff fd24 	bl	8000e90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001452:	4619      	mov	r1, r3
 8001454:	4821      	ldr	r0, [pc, #132]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001456:	f003 fa93 	bl	8004980 <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001460:	f7ff fd16 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001464:	481d      	ldr	r0, [pc, #116]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001466:	f003 f868 	bl	800453a <HAL_TIM_PWM_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001470:	f7ff fd0e 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800147c:	f107 0320 	add.w	r3, r7, #32
 8001480:	4619      	mov	r1, r3
 8001482:	4816      	ldr	r0, [pc, #88]	; (80014dc <MX_TIM5_Init+0xf8>)
 8001484:	f003 fe60 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800148e:	f7ff fcff 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001492:	2360      	movs	r3, #96	; 0x60
 8001494:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001496:	2300      	movs	r3, #0
 8001498:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	480c      	ldr	r0, [pc, #48]	; (80014dc <MX_TIM5_Init+0xf8>)
 80014aa:	f003 f9a7 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 80014b4:	f7ff fcec 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	220c      	movs	r2, #12
 80014bc:	4619      	mov	r1, r3
 80014be:	4807      	ldr	r0, [pc, #28]	; (80014dc <MX_TIM5_Init+0xf8>)
 80014c0:	f003 f99c 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80014ca:	f7ff fce1 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80014ce:	4803      	ldr	r0, [pc, #12]	; (80014dc <MX_TIM5_Init+0xf8>)
 80014d0:	f000 f92a 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80014d4:	bf00      	nop
 80014d6:	3738      	adds	r7, #56	; 0x38
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	2000022c 	.word	0x2000022c
 80014e0:	40000c00 	.word	0x40000c00
 80014e4:	0001869f 	.word	0x0001869f

080014e8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ee:	463b      	mov	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014f6:	4b15      	ldr	r3, [pc, #84]	; (800154c <MX_TIM7_Init+0x64>)
 80014f8:	4a15      	ldr	r2, [pc, #84]	; (8001550 <MX_TIM7_Init+0x68>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 80014fc:	4b13      	ldr	r3, [pc, #76]	; (800154c <MX_TIM7_Init+0x64>)
 80014fe:	f242 3227 	movw	r2, #8999	; 0x2327
 8001502:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001504:	4b11      	ldr	r3, [pc, #68]	; (800154c <MX_TIM7_Init+0x64>)
 8001506:	2200      	movs	r2, #0
 8001508:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 800150a:	4b10      	ldr	r3, [pc, #64]	; (800154c <MX_TIM7_Init+0x64>)
 800150c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001510:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001512:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_TIM7_Init+0x64>)
 8001514:	2280      	movs	r2, #128	; 0x80
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001518:	480c      	ldr	r0, [pc, #48]	; (800154c <MX_TIM7_Init+0x64>)
 800151a:	f002 ffbf 	bl	800449c <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001524:	f7ff fcb4 	bl	8000e90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152c:	2300      	movs	r3, #0
 800152e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001530:	463b      	mov	r3, r7
 8001532:	4619      	mov	r1, r3
 8001534:	4805      	ldr	r0, [pc, #20]	; (800154c <MX_TIM7_Init+0x64>)
 8001536:	f003 fe07 	bl	8005148 <HAL_TIMEx_MasterConfigSynchronization>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001540:	f7ff fca6 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001544:	bf00      	nop
 8001546:	3708      	adds	r7, #8
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000304 	.word	0x20000304
 8001550:	40001400 	.word	0x40001400

08001554 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b088      	sub	sp, #32
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800155a:	1d3b      	adds	r3, r7, #4
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
 8001562:	609a      	str	r2, [r3, #8]
 8001564:	60da      	str	r2, [r3, #12]
 8001566:	611a      	str	r2, [r3, #16]
 8001568:	615a      	str	r2, [r3, #20]
 800156a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800156c:	4b1e      	ldr	r3, [pc, #120]	; (80015e8 <MX_TIM10_Init+0x94>)
 800156e:	4a1f      	ldr	r2, [pc, #124]	; (80015ec <MX_TIM10_Init+0x98>)
 8001570:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001572:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_TIM10_Init+0x94>)
 8001574:	2247      	movs	r2, #71	; 0x47
 8001576:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001578:	4b1b      	ldr	r3, [pc, #108]	; (80015e8 <MX_TIM10_Init+0x94>)
 800157a:	2200      	movs	r2, #0
 800157c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM10_Init+0x94>)
 8001580:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001584:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001586:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_TIM10_Init+0x94>)
 8001588:	2200      	movs	r2, #0
 800158a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <MX_TIM10_Init+0x94>)
 800158e:	2200      	movs	r2, #0
 8001590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001592:	4815      	ldr	r0, [pc, #84]	; (80015e8 <MX_TIM10_Init+0x94>)
 8001594:	f002 ff82 	bl	800449c <HAL_TIM_Base_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800159e:	f7ff fc77 	bl	8000e90 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80015a2:	4811      	ldr	r0, [pc, #68]	; (80015e8 <MX_TIM10_Init+0x94>)
 80015a4:	f002 ffc9 	bl	800453a <HAL_TIM_PWM_Init>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d001      	beq.n	80015b2 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80015ae:	f7ff fc6f 	bl	8000e90 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015b2:	2360      	movs	r3, #96	; 0x60
 80015b4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 80015b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015bc:	2300      	movs	r3, #0
 80015be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80015c4:	1d3b      	adds	r3, r7, #4
 80015c6:	2200      	movs	r2, #0
 80015c8:	4619      	mov	r1, r3
 80015ca:	4807      	ldr	r0, [pc, #28]	; (80015e8 <MX_TIM10_Init+0x94>)
 80015cc:	f003 f916 	bl	80047fc <HAL_TIM_PWM_ConfigChannel>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80015d6:	f7ff fc5b 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80015da:	4803      	ldr	r0, [pc, #12]	; (80015e8 <MX_TIM10_Init+0x94>)
 80015dc:	f000 f8a4 	bl	8001728 <HAL_TIM_MspPostInit>

}
 80015e0:	bf00      	nop
 80015e2:	3720      	adds	r7, #32
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200001e4 	.word	0x200001e4
 80015ec:	40014400 	.word	0x40014400

080015f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b088      	sub	sp, #32
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001600:	d10e      	bne.n	8001620 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	61fb      	str	r3, [r7, #28]
 8001606:	4b42      	ldr	r3, [pc, #264]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a41      	ldr	r2, [pc, #260]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 800160c:	f043 0301 	orr.w	r3, r3, #1
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	61fb      	str	r3, [r7, #28]
 800161c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 800161e:	e072      	b.n	8001706 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <HAL_TIM_Base_MspInit+0x124>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d10e      	bne.n	8001648 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	61bb      	str	r3, [r7, #24]
 800162e:	4b38      	ldr	r3, [pc, #224]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	4a37      	ldr	r2, [pc, #220]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001634:	f043 0302 	orr.w	r3, r3, #2
 8001638:	6413      	str	r3, [r2, #64]	; 0x40
 800163a:	4b35      	ldr	r3, [pc, #212]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 800163c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	61bb      	str	r3, [r7, #24]
 8001644:	69bb      	ldr	r3, [r7, #24]
}
 8001646:	e05e      	b.n	8001706 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a32      	ldr	r2, [pc, #200]	; (8001718 <HAL_TIM_Base_MspInit+0x128>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d116      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
 8001656:	4b2e      	ldr	r3, [pc, #184]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	4a2d      	ldr	r2, [pc, #180]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 800165c:	f043 0304 	orr.w	r3, r3, #4
 8001660:	6413      	str	r3, [r2, #64]	; 0x40
 8001662:	4b2b      	ldr	r3, [pc, #172]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	f003 0304 	and.w	r3, r3, #4
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	201e      	movs	r0, #30
 8001674:	f000 ff65 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001678:	201e      	movs	r0, #30
 800167a:	f000 ff7e 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 800167e:	e042      	b.n	8001706 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a25      	ldr	r2, [pc, #148]	; (800171c <HAL_TIM_Base_MspInit+0x12c>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10e      	bne.n	80016a8 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	4b20      	ldr	r3, [pc, #128]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001692:	4a1f      	ldr	r2, [pc, #124]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 8001694:	f043 0308 	orr.w	r3, r3, #8
 8001698:	6413      	str	r3, [r2, #64]	; 0x40
 800169a:	4b1d      	ldr	r3, [pc, #116]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169e:	f003 0308 	and.w	r3, r3, #8
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
}
 80016a6:	e02e      	b.n	8001706 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	4a1c      	ldr	r2, [pc, #112]	; (8001720 <HAL_TIM_Base_MspInit+0x130>)
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d116      	bne.n	80016e0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	60fb      	str	r3, [r7, #12]
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a15      	ldr	r2, [pc, #84]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016bc:	f043 0320 	orr.w	r3, r3, #32
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b13      	ldr	r3, [pc, #76]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 0320 	and.w	r3, r3, #32
 80016ca:	60fb      	str	r3, [r7, #12]
 80016cc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80016ce:	2200      	movs	r2, #0
 80016d0:	2100      	movs	r1, #0
 80016d2:	2037      	movs	r0, #55	; 0x37
 80016d4:	f000 ff35 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80016d8:	2037      	movs	r0, #55	; 0x37
 80016da:	f000 ff4e 	bl	800257a <HAL_NVIC_EnableIRQ>
}
 80016de:	e012      	b.n	8001706 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0f      	ldr	r2, [pc, #60]	; (8001724 <HAL_TIM_Base_MspInit+0x134>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d10d      	bne.n	8001706 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	4b08      	ldr	r3, [pc, #32]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f2:	4a07      	ldr	r2, [pc, #28]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	6453      	str	r3, [r2, #68]	; 0x44
 80016fa:	4b05      	ldr	r3, [pc, #20]	; (8001710 <HAL_TIM_Base_MspInit+0x120>)
 80016fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001702:	60bb      	str	r3, [r7, #8]
 8001704:	68bb      	ldr	r3, [r7, #8]
}
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40000400 	.word	0x40000400
 8001718:	40000800 	.word	0x40000800
 800171c:	40000c00 	.word	0x40000c00
 8001720:	40001400 	.word	0x40001400
 8001724:	40014400 	.word	0x40014400

08001728 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08c      	sub	sp, #48	; 0x30
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 031c 	add.w	r3, r7, #28
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001748:	d11e      	bne.n	8001788 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
 800174e:	4b58      	ldr	r3, [pc, #352]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	4a57      	ldr	r2, [pc, #348]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	6313      	str	r3, [r2, #48]	; 0x30
 800175a:	4b55      	ldr	r3, [pc, #340]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	61bb      	str	r3, [r7, #24]
 8001764:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001766:	2320      	movs	r3, #32
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001776:	2301      	movs	r3, #1
 8001778:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 031c 	add.w	r3, r7, #28
 800177e:	4619      	mov	r1, r3
 8001780:	484c      	ldr	r0, [pc, #304]	; (80018b4 <HAL_TIM_MspPostInit+0x18c>)
 8001782:	f001 fb17 	bl	8002db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001786:	e08f      	b.n	80018a8 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a4a      	ldr	r2, [pc, #296]	; (80018b8 <HAL_TIM_MspPostInit+0x190>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d11e      	bne.n	80017d0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
 8001796:	4b46      	ldr	r3, [pc, #280]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a45      	ldr	r2, [pc, #276]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 800179c:	f043 0304 	orr.w	r3, r3, #4
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b43      	ldr	r3, [pc, #268]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0304 	and.w	r3, r3, #4
 80017aa:	617b      	str	r3, [r7, #20]
 80017ac:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80017ae:	2340      	movs	r3, #64	; 0x40
 80017b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80017be:	2302      	movs	r3, #2
 80017c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 031c 	add.w	r3, r7, #28
 80017c6:	4619      	mov	r1, r3
 80017c8:	483c      	ldr	r0, [pc, #240]	; (80018bc <HAL_TIM_MspPostInit+0x194>)
 80017ca:	f001 faf3 	bl	8002db4 <HAL_GPIO_Init>
}
 80017ce:	e06b      	b.n	80018a8 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3a      	ldr	r2, [pc, #232]	; (80018c0 <HAL_TIM_MspPostInit+0x198>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d11f      	bne.n	800181a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	613b      	str	r3, [r7, #16]
 80017de:	4b34      	ldr	r3, [pc, #208]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a33      	ldr	r2, [pc, #204]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 80017e4:	f043 0308 	orr.w	r3, r3, #8
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b31      	ldr	r3, [pc, #196]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0308 	and.w	r3, r3, #8
 80017f2:	613b      	str	r3, [r7, #16]
 80017f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80017f6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001808:	2302      	movs	r3, #2
 800180a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180c:	f107 031c 	add.w	r3, r7, #28
 8001810:	4619      	mov	r1, r3
 8001812:	482c      	ldr	r0, [pc, #176]	; (80018c4 <HAL_TIM_MspPostInit+0x19c>)
 8001814:	f001 face 	bl	8002db4 <HAL_GPIO_Init>
}
 8001818:	e046      	b.n	80018a8 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a2a      	ldr	r2, [pc, #168]	; (80018c8 <HAL_TIM_MspPostInit+0x1a0>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d11e      	bne.n	8001862 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001824:	2300      	movs	r3, #0
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	4b21      	ldr	r3, [pc, #132]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 800182a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182c:	4a20      	ldr	r2, [pc, #128]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 800182e:	f043 0301 	orr.w	r3, r3, #1
 8001832:	6313      	str	r3, [r2, #48]	; 0x30
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	f003 0301 	and.w	r3, r3, #1
 800183c:	60fb      	str	r3, [r7, #12]
 800183e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001840:	2309      	movs	r3, #9
 8001842:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	2302      	movs	r3, #2
 8001846:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184c:	2300      	movs	r3, #0
 800184e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001850:	2302      	movs	r3, #2
 8001852:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001854:	f107 031c 	add.w	r3, r7, #28
 8001858:	4619      	mov	r1, r3
 800185a:	4816      	ldr	r0, [pc, #88]	; (80018b4 <HAL_TIM_MspPostInit+0x18c>)
 800185c:	f001 faaa 	bl	8002db4 <HAL_GPIO_Init>
}
 8001860:	e022      	b.n	80018a8 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a19      	ldr	r2, [pc, #100]	; (80018cc <HAL_TIM_MspPostInit+0x1a4>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d11d      	bne.n	80018a8 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800186c:	2300      	movs	r3, #0
 800186e:	60bb      	str	r3, [r7, #8]
 8001870:	4b0f      	ldr	r3, [pc, #60]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001874:	4a0e      	ldr	r2, [pc, #56]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 8001876:	f043 0320 	orr.w	r3, r3, #32
 800187a:	6313      	str	r3, [r2, #48]	; 0x30
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <HAL_TIM_MspPostInit+0x188>)
 800187e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	60bb      	str	r3, [r7, #8]
 8001886:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001888:	2340      	movs	r3, #64	; 0x40
 800188a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001898:	2303      	movs	r3, #3
 800189a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800189c:	f107 031c 	add.w	r3, r7, #28
 80018a0:	4619      	mov	r1, r3
 80018a2:	480b      	ldr	r0, [pc, #44]	; (80018d0 <HAL_TIM_MspPostInit+0x1a8>)
 80018a4:	f001 fa86 	bl	8002db4 <HAL_GPIO_Init>
}
 80018a8:	bf00      	nop
 80018aa:	3730      	adds	r7, #48	; 0x30
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40023800 	.word	0x40023800
 80018b4:	40020000 	.word	0x40020000
 80018b8:	40000400 	.word	0x40000400
 80018bc:	40020800 	.word	0x40020800
 80018c0:	40000800 	.word	0x40000800
 80018c4:	40020c00 	.word	0x40020c00
 80018c8:	40000c00 	.word	0x40000c00
 80018cc:	40014400 	.word	0x40014400
 80018d0:	40021400 	.word	0x40021400

080018d4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80018d8:	4b11      	ldr	r3, [pc, #68]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018da:	4a12      	ldr	r2, [pc, #72]	; (8001924 <MX_USART3_UART_Init+0x50>)
 80018dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80018de:	4b10      	ldr	r3, [pc, #64]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018e6:	4b0e      	ldr	r3, [pc, #56]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ec:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018f2:	4b0b      	ldr	r3, [pc, #44]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018f8:	4b09      	ldr	r3, [pc, #36]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 80018fa:	220c      	movs	r2, #12
 80018fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001904:	4b06      	ldr	r3, [pc, #24]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800190a:	4805      	ldr	r0, [pc, #20]	; (8001920 <MX_USART3_UART_Init+0x4c>)
 800190c:	f003 fcac 	bl	8005268 <HAL_UART_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001916:	f7ff fabb 	bl	8000e90 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	2000034c 	.word	0x2000034c
 8001924:	40004800 	.word	0x40004800

08001928 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a1d      	ldr	r2, [pc, #116]	; (80019bc <HAL_UART_MspInit+0x94>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d134      	bne.n	80019b4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b1c      	ldr	r3, [pc, #112]	; (80019c0 <HAL_UART_MspInit+0x98>)
 8001950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001952:	4a1b      	ldr	r2, [pc, #108]	; (80019c0 <HAL_UART_MspInit+0x98>)
 8001954:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001958:	6413      	str	r3, [r2, #64]	; 0x40
 800195a:	4b19      	ldr	r3, [pc, #100]	; (80019c0 <HAL_UART_MspInit+0x98>)
 800195c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <HAL_UART_MspInit+0x98>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a14      	ldr	r2, [pc, #80]	; (80019c0 <HAL_UART_MspInit+0x98>)
 8001970:	f043 0308 	orr.w	r3, r3, #8
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <HAL_UART_MspInit+0x98>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	60fb      	str	r3, [r7, #12]
 8001980:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001982:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001986:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001988:	2302      	movs	r3, #2
 800198a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001990:	2303      	movs	r3, #3
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001994:	2307      	movs	r3, #7
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	4619      	mov	r1, r3
 800199e:	4809      	ldr	r0, [pc, #36]	; (80019c4 <HAL_UART_MspInit+0x9c>)
 80019a0:	f001 fa08 	bl	8002db4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019a4:	2200      	movs	r2, #0
 80019a6:	2100      	movs	r1, #0
 80019a8:	2027      	movs	r0, #39	; 0x27
 80019aa:	f000 fdca 	bl	8002542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019ae:	2027      	movs	r0, #39	; 0x27
 80019b0:	f000 fde3 	bl	800257a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40004800 	.word	0x40004800
 80019c0:	40023800 	.word	0x40023800
 80019c4:	40020c00 	.word	0x40020c00

080019c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80019c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a00 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019cc:	480d      	ldr	r0, [pc, #52]	; (8001a04 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019ce:	490e      	ldr	r1, [pc, #56]	; (8001a08 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019d0:	4a0e      	ldr	r2, [pc, #56]	; (8001a0c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019d4:	e002      	b.n	80019dc <LoopCopyDataInit>

080019d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019da:	3304      	adds	r3, #4

080019dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019e0:	d3f9      	bcc.n	80019d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019e2:	4a0b      	ldr	r2, [pc, #44]	; (8001a10 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019e4:	4c0b      	ldr	r4, [pc, #44]	; (8001a14 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019e8:	e001      	b.n	80019ee <LoopFillZerobss>

080019ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ec:	3204      	adds	r2, #4

080019ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019f0:	d3fb      	bcc.n	80019ea <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019f2:	f7ff fb65 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019f6:	f004 fba5 	bl	8006144 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019fa:	f7ff f86d 	bl	8000ad8 <main>
  bx  lr    
 80019fe:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001a00:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a08:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a0c:	08006c94 	.word	0x08006c94
  ldr r2, =_sbss
 8001a10:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a14:	200003a4 	.word	0x200003a4

08001a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a18:	e7fe      	b.n	8001a18 <ADC_IRQHandler>
	...

08001a1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <HAL_Init+0x40>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a0d      	ldr	r2, [pc, #52]	; (8001a5c <HAL_Init+0x40>)
 8001a26:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a2a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	; (8001a5c <HAL_Init+0x40>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	4a0a      	ldr	r2, [pc, #40]	; (8001a5c <HAL_Init+0x40>)
 8001a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a36:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x40>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x40>)
 8001a3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a42:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 fd71 	bl	800252c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff fa24 	bl	8000e9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023c00 	.word	0x40023c00

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 fd89 	bl	8002596 <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 fd51 	bl	8002542 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000000 	.word	0x20000000
 8001ab8:	20000008 	.word	0x20000008
 8001abc:	20000004 	.word	0x20000004

08001ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_IncTick+0x24>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_IncTick+0x24>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
 8001ade:	bf00      	nop
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000390 	.word	0x20000390

08001ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b03      	ldr	r3, [pc, #12]	; (8001afc <HAL_GetTick+0x14>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	20000390 	.word	0x20000390

08001b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff ffee 	bl	8001ae8 <HAL_GetTick>
 8001b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b18:	d005      	beq.n	8001b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b1a:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_Delay+0x44>)
 8001b1c:	781b      	ldrb	r3, [r3, #0]
 8001b1e:	461a      	mov	r2, r3
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	4413      	add	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffde 	bl	8001ae8 <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	68bb      	ldr	r3, [r7, #8]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d8f7      	bhi.n	8001b28 <HAL_Delay+0x28>
  {
  }
}
 8001b38:	bf00      	nop
 8001b3a:	bf00      	nop
 8001b3c:	3710      	adds	r7, #16
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000008 	.word	0x20000008

08001b48 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b084      	sub	sp, #16
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b50:	2300      	movs	r3, #0
 8001b52:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e033      	b.n	8001bc6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d109      	bne.n	8001b7a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f7fe fd38 	bl	80005dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7e:	f003 0310 	and.w	r3, r3, #16
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d118      	bne.n	8001bb8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b8e:	f023 0302 	bic.w	r3, r3, #2
 8001b92:	f043 0202 	orr.w	r2, r3, #2
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b9a:	6878      	ldr	r0, [r7, #4]
 8001b9c:	f000 fa78 	bl	8002090 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	f023 0303 	bic.w	r3, r3, #3
 8001bae:	f043 0201 	orr.w	r2, r3, #1
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	641a      	str	r2, [r3, #64]	; 0x40
 8001bb6:	e001      	b.n	8001bbc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3710      	adds	r7, #16
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
	...

08001bd0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b086      	sub	sp, #24
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	60f8      	str	r0, [r7, #12]
 8001bd8:	60b9      	str	r1, [r7, #8]
 8001bda:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d101      	bne.n	8001bee <HAL_ADC_Start_DMA+0x1e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e0e9      	b.n	8001dc2 <HAL_ADC_Start_DMA+0x1f2>
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0301 	and.w	r3, r3, #1
 8001c00:	2b01      	cmp	r3, #1
 8001c02:	d018      	beq.n	8001c36 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	689a      	ldr	r2, [r3, #8]
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001c14:	4b6d      	ldr	r3, [pc, #436]	; (8001dcc <HAL_ADC_Start_DMA+0x1fc>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a6d      	ldr	r2, [pc, #436]	; (8001dd0 <HAL_ADC_Start_DMA+0x200>)
 8001c1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c1e:	0c9a      	lsrs	r2, r3, #18
 8001c20:	4613      	mov	r3, r2
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	4413      	add	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c28:	e002      	b.n	8001c30 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f9      	bne.n	8001c2a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001c44:	d107      	bne.n	8001c56 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689a      	ldr	r2, [r3, #8]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c54:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f003 0301 	and.w	r3, r3, #1
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	f040 80a1 	bne.w	8001da8 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001c6e:	f023 0301 	bic.w	r3, r3, #1
 8001c72:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d007      	beq.n	8001c98 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c90:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ca4:	d106      	bne.n	8001cb4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001caa:	f023 0206 	bic.w	r2, r3, #6
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	645a      	str	r2, [r3, #68]	; 0x44
 8001cb2:	e002      	b.n	8001cba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cc2:	4b44      	ldr	r3, [pc, #272]	; (8001dd4 <HAL_ADC_Start_DMA+0x204>)
 8001cc4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cca:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_ADC_Start_DMA+0x208>)
 8001ccc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd2:	4a42      	ldr	r2, [pc, #264]	; (8001ddc <HAL_ADC_Start_DMA+0x20c>)
 8001cd4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cda:	4a41      	ldr	r2, [pc, #260]	; (8001de0 <HAL_ADC_Start_DMA+0x210>)
 8001cdc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685a      	ldr	r2, [r3, #4]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001cf6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689a      	ldr	r2, [r3, #8]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d06:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	334c      	adds	r3, #76	; 0x4c
 8001d12:	4619      	mov	r1, r3
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	f000 fcf8 	bl	800270c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 031f 	and.w	r3, r3, #31
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d12a      	bne.n	8001d7e <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a2d      	ldr	r2, [pc, #180]	; (8001de4 <HAL_ADC_Start_DMA+0x214>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d015      	beq.n	8001d5e <HAL_ADC_Start_DMA+0x18e>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a2c      	ldr	r2, [pc, #176]	; (8001de8 <HAL_ADC_Start_DMA+0x218>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d105      	bne.n	8001d48 <HAL_ADC_Start_DMA+0x178>
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_ADC_Start_DMA+0x204>)
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 031f 	and.w	r3, r3, #31
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d00a      	beq.n	8001d5e <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a27      	ldr	r2, [pc, #156]	; (8001dec <HAL_ADC_Start_DMA+0x21c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d136      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <HAL_ADC_Start_DMA+0x204>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 0310 	and.w	r3, r3, #16
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d130      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d129      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d7a:	609a      	str	r2, [r3, #8]
 8001d7c:	e020      	b.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a18      	ldr	r2, [pc, #96]	; (8001de4 <HAL_ADC_Start_DMA+0x214>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d11b      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d114      	bne.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689a      	ldr	r2, [r3, #8]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	e00b      	b.n	8001dc0 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	f043 0210 	orr.w	r2, r3, #16
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001db8:	f043 0201 	orr.w	r2, r3, #1
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3718      	adds	r7, #24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}
 8001dca:	bf00      	nop
 8001dcc:	20000000 	.word	0x20000000
 8001dd0:	431bde83 	.word	0x431bde83
 8001dd4:	40012300 	.word	0x40012300
 8001dd8:	08002289 	.word	0x08002289
 8001ddc:	08002343 	.word	0x08002343
 8001de0:	0800235f 	.word	0x0800235f
 8001de4:	40012000 	.word	0x40012000
 8001de8:	40012100 	.word	0x40012100
 8001dec:	40012200 	.word	0x40012200

08001df0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001df8:	bf00      	nop
 8001dfa:	370c      	adds	r7, #12
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e02:	4770      	bx	lr

08001e04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b085      	sub	sp, #20
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
 8001e34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001e36:	2300      	movs	r3, #0
 8001e38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d101      	bne.n	8001e48 <HAL_ADC_ConfigChannel+0x1c>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e113      	b.n	8002070 <HAL_ADC_ConfigChannel+0x244>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	2b09      	cmp	r3, #9
 8001e56:	d925      	bls.n	8001ea4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68d9      	ldr	r1, [r3, #12]
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	461a      	mov	r2, r3
 8001e66:	4613      	mov	r3, r2
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	4413      	add	r3, r2
 8001e6c:	3b1e      	subs	r3, #30
 8001e6e:	2207      	movs	r2, #7
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	43da      	mvns	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	400a      	ands	r2, r1
 8001e7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	68d9      	ldr	r1, [r3, #12]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689a      	ldr	r2, [r3, #8]
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	4603      	mov	r3, r0
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	4403      	add	r3, r0
 8001e96:	3b1e      	subs	r3, #30
 8001e98:	409a      	lsls	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	430a      	orrs	r2, r1
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	e022      	b.n	8001eea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	6919      	ldr	r1, [r3, #16]
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	005b      	lsls	r3, r3, #1
 8001eb6:	4413      	add	r3, r2
 8001eb8:	2207      	movs	r2, #7
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43da      	mvns	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	400a      	ands	r2, r1
 8001ec6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6919      	ldr	r1, [r3, #16]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	689a      	ldr	r2, [r3, #8]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	4603      	mov	r3, r0
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	4403      	add	r3, r0
 8001ee0:	409a      	lsls	r2, r3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	430a      	orrs	r2, r1
 8001ee8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	2b06      	cmp	r3, #6
 8001ef0:	d824      	bhi.n	8001f3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	4613      	mov	r3, r2
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	4413      	add	r3, r2
 8001f02:	3b05      	subs	r3, #5
 8001f04:	221f      	movs	r2, #31
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	43da      	mvns	r2, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	400a      	ands	r2, r1
 8001f12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	4618      	mov	r0, r3
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685a      	ldr	r2, [r3, #4]
 8001f26:	4613      	mov	r3, r2
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3b05      	subs	r3, #5
 8001f2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	635a      	str	r2, [r3, #52]	; 0x34
 8001f3a:	e04c      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b0c      	cmp	r3, #12
 8001f42:	d824      	bhi.n	8001f8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	3b23      	subs	r3, #35	; 0x23
 8001f56:	221f      	movs	r2, #31
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	43da      	mvns	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	400a      	ands	r2, r1
 8001f64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	4413      	add	r3, r2
 8001f7e:	3b23      	subs	r3, #35	; 0x23
 8001f80:	fa00 f203 	lsl.w	r2, r0, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f8c:	e023      	b.n	8001fd6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685a      	ldr	r2, [r3, #4]
 8001f98:	4613      	mov	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	3b41      	subs	r3, #65	; 0x41
 8001fa0:	221f      	movs	r2, #31
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	43da      	mvns	r2, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	400a      	ands	r2, r1
 8001fae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	685a      	ldr	r2, [r3, #4]
 8001fc2:	4613      	mov	r3, r2
 8001fc4:	009b      	lsls	r3, r3, #2
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3b41      	subs	r3, #65	; 0x41
 8001fca:	fa00 f203 	lsl.w	r2, r0, r3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001fd6:	4b29      	ldr	r3, [pc, #164]	; (800207c <HAL_ADC_ConfigChannel+0x250>)
 8001fd8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a28      	ldr	r2, [pc, #160]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d10f      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b12      	cmp	r3, #18
 8001fea:	d10b      	bne.n	8002004 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a1d      	ldr	r2, [pc, #116]	; (8002080 <HAL_ADC_ConfigChannel+0x254>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d12b      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a1c      	ldr	r2, [pc, #112]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d003      	beq.n	8002020 <HAL_ADC_ConfigChannel+0x1f4>
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b11      	cmp	r3, #17
 800201e:	d122      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a11      	ldr	r2, [pc, #68]	; (8002084 <HAL_ADC_ConfigChannel+0x258>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d111      	bne.n	8002066 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002042:	4b11      	ldr	r3, [pc, #68]	; (8002088 <HAL_ADC_ConfigChannel+0x25c>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_ADC_ConfigChannel+0x260>)
 8002048:	fba2 2303 	umull	r2, r3, r2, r3
 800204c:	0c9a      	lsrs	r2, r3, #18
 800204e:	4613      	mov	r3, r2
 8002050:	009b      	lsls	r3, r3, #2
 8002052:	4413      	add	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002058:	e002      	b.n	8002060 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	3b01      	subs	r3, #1
 800205e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f9      	bne.n	800205a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2200      	movs	r2, #0
 800206a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800206e:	2300      	movs	r3, #0
}
 8002070:	4618      	mov	r0, r3
 8002072:	3714      	adds	r7, #20
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	40012300 	.word	0x40012300
 8002080:	40012000 	.word	0x40012000
 8002084:	10000012 	.word	0x10000012
 8002088:	20000000 	.word	0x20000000
 800208c:	431bde83 	.word	0x431bde83

08002090 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002090:	b480      	push	{r7}
 8002092:	b085      	sub	sp, #20
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002098:	4b79      	ldr	r3, [pc, #484]	; (8002280 <ADC_Init+0x1f0>)
 800209a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	431a      	orrs	r2, r3
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6859      	ldr	r1, [r3, #4]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	691b      	ldr	r3, [r3, #16]
 80020d0:	021a      	lsls	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	430a      	orrs	r2, r1
 80020d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	6859      	ldr	r1, [r3, #4]
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689a      	ldr	r2, [r3, #8]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	430a      	orrs	r2, r1
 80020fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689a      	ldr	r2, [r3, #8]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800210a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	6899      	ldr	r1, [r3, #8]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	68da      	ldr	r2, [r3, #12]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	430a      	orrs	r2, r1
 800211c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002122:	4a58      	ldr	r2, [pc, #352]	; (8002284 <ADC_Init+0x1f4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d022      	beq.n	800216e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	689a      	ldr	r2, [r3, #8]
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002136:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6899      	ldr	r1, [r3, #8]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	6899      	ldr	r1, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	609a      	str	r2, [r3, #8]
 800216c:	e00f      	b.n	800218e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800217c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	689a      	ldr	r2, [r3, #8]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800218c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689a      	ldr	r2, [r3, #8]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f022 0202 	bic.w	r2, r2, #2
 800219c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6899      	ldr	r1, [r3, #8]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	7e1b      	ldrb	r3, [r3, #24]
 80021a8:	005a      	lsls	r2, r3, #1
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d01b      	beq.n	80021f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	685a      	ldr	r2, [r3, #4]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6859      	ldr	r1, [r3, #4]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	3b01      	subs	r3, #1
 80021e8:	035a      	lsls	r2, r3, #13
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	e007      	b.n	8002204 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	685a      	ldr	r2, [r3, #4]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002202:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002212:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69db      	ldr	r3, [r3, #28]
 800221e:	3b01      	subs	r3, #1
 8002220:	051a      	lsls	r2, r3, #20
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002238:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	6899      	ldr	r1, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002246:	025a      	lsls	r2, r3, #9
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	695b      	ldr	r3, [r3, #20]
 800226a:	029a      	lsls	r2, r3, #10
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	40012300 	.word	0x40012300
 8002284:	0f000001 	.word	0x0f000001

08002288 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002294:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d13c      	bne.n	800231c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d12b      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d127      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ca:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d006      	beq.n	80022e0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d119      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0220 	bic.w	r2, r2, #32
 80022ee:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d105      	bne.n	8002314 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800230c:	f043 0201 	orr.w	r2, r3, #1
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002314:	68f8      	ldr	r0, [r7, #12]
 8002316:	f7ff fd6b 	bl	8001df0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800231a:	e00e      	b.n	800233a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002320:	f003 0310 	and.w	r3, r3, #16
 8002324:	2b00      	cmp	r3, #0
 8002326:	d003      	beq.n	8002330 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7ff fd75 	bl	8001e18 <HAL_ADC_ErrorCallback>
}
 800232e:	e004      	b.n	800233a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	4798      	blx	r3
}
 800233a:	bf00      	nop
 800233c:	3710      	adds	r7, #16
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}

08002342 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002342:	b580      	push	{r7, lr}
 8002344:	b084      	sub	sp, #16
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800234e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002350:	68f8      	ldr	r0, [r7, #12]
 8002352:	f7ff fd57 	bl	8001e04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002356:	bf00      	nop
 8002358:	3710      	adds	r7, #16
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800235e:	b580      	push	{r7, lr}
 8002360:	b084      	sub	sp, #16
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800236a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2240      	movs	r2, #64	; 0x40
 8002370:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f043 0204 	orr.w	r2, r3, #4
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800237e:	68f8      	ldr	r0, [r7, #12]
 8002380:	f7ff fd4a 	bl	8001e18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002384:	bf00      	nop
 8002386:	3710      	adds	r7, #16
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800239c:	4b0c      	ldr	r3, [pc, #48]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 800239e:	68db      	ldr	r3, [r3, #12]
 80023a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023a8:	4013      	ands	r3, r2
 80023aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023be:	4a04      	ldr	r2, [pc, #16]	; (80023d0 <__NVIC_SetPriorityGrouping+0x44>)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	60d3      	str	r3, [r2, #12]
}
 80023c4:	bf00      	nop
 80023c6:	3714      	adds	r7, #20
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr
 80023d0:	e000ed00 	.word	0xe000ed00

080023d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023d8:	4b04      	ldr	r3, [pc, #16]	; (80023ec <__NVIC_GetPriorityGrouping+0x18>)
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	0a1b      	lsrs	r3, r3, #8
 80023de:	f003 0307 	and.w	r3, r3, #7
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr
 80023ec:	e000ed00 	.word	0xe000ed00

080023f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	db0b      	blt.n	800241a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002402:	79fb      	ldrb	r3, [r7, #7]
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	4907      	ldr	r1, [pc, #28]	; (8002428 <__NVIC_EnableIRQ+0x38>)
 800240a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240e:	095b      	lsrs	r3, r3, #5
 8002410:	2001      	movs	r0, #1
 8002412:	fa00 f202 	lsl.w	r2, r0, r2
 8002416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800241a:	bf00      	nop
 800241c:	370c      	adds	r7, #12
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	e000e100 	.word	0xe000e100

0800242c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	6039      	str	r1, [r7, #0]
 8002436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800243c:	2b00      	cmp	r3, #0
 800243e:	db0a      	blt.n	8002456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	b2da      	uxtb	r2, r3
 8002444:	490c      	ldr	r1, [pc, #48]	; (8002478 <__NVIC_SetPriority+0x4c>)
 8002446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244a:	0112      	lsls	r2, r2, #4
 800244c:	b2d2      	uxtb	r2, r2
 800244e:	440b      	add	r3, r1
 8002450:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002454:	e00a      	b.n	800246c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	b2da      	uxtb	r2, r3
 800245a:	4908      	ldr	r1, [pc, #32]	; (800247c <__NVIC_SetPriority+0x50>)
 800245c:	79fb      	ldrb	r3, [r7, #7]
 800245e:	f003 030f 	and.w	r3, r3, #15
 8002462:	3b04      	subs	r3, #4
 8002464:	0112      	lsls	r2, r2, #4
 8002466:	b2d2      	uxtb	r2, r2
 8002468:	440b      	add	r3, r1
 800246a:	761a      	strb	r2, [r3, #24]
}
 800246c:	bf00      	nop
 800246e:	370c      	adds	r7, #12
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	e000e100 	.word	0xe000e100
 800247c:	e000ed00 	.word	0xe000ed00

08002480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002480:	b480      	push	{r7}
 8002482:	b089      	sub	sp, #36	; 0x24
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f1c3 0307 	rsb	r3, r3, #7
 800249a:	2b04      	cmp	r3, #4
 800249c:	bf28      	it	cs
 800249e:	2304      	movcs	r3, #4
 80024a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	3304      	adds	r3, #4
 80024a6:	2b06      	cmp	r3, #6
 80024a8:	d902      	bls.n	80024b0 <NVIC_EncodePriority+0x30>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	3b03      	subs	r3, #3
 80024ae:	e000      	b.n	80024b2 <NVIC_EncodePriority+0x32>
 80024b0:	2300      	movs	r3, #0
 80024b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b4:	f04f 32ff 	mov.w	r2, #4294967295
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	fa02 f303 	lsl.w	r3, r2, r3
 80024be:	43da      	mvns	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	401a      	ands	r2, r3
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024c8:	f04f 31ff 	mov.w	r1, #4294967295
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	fa01 f303 	lsl.w	r3, r1, r3
 80024d2:	43d9      	mvns	r1, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d8:	4313      	orrs	r3, r2
         );
}
 80024da:	4618      	mov	r0, r3
 80024dc:	3724      	adds	r7, #36	; 0x24
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
	...

080024e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024f8:	d301      	bcc.n	80024fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024fa:	2301      	movs	r3, #1
 80024fc:	e00f      	b.n	800251e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024fe:	4a0a      	ldr	r2, [pc, #40]	; (8002528 <SysTick_Config+0x40>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	3b01      	subs	r3, #1
 8002504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002506:	210f      	movs	r1, #15
 8002508:	f04f 30ff 	mov.w	r0, #4294967295
 800250c:	f7ff ff8e 	bl	800242c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <SysTick_Config+0x40>)
 8002512:	2200      	movs	r2, #0
 8002514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <SysTick_Config+0x40>)
 8002518:	2207      	movs	r2, #7
 800251a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	e000e010 	.word	0xe000e010

0800252c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f7ff ff29 	bl	800238c <__NVIC_SetPriorityGrouping>
}
 800253a:	bf00      	nop
 800253c:	3708      	adds	r7, #8
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}

08002542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002542:	b580      	push	{r7, lr}
 8002544:	b086      	sub	sp, #24
 8002546:	af00      	add	r7, sp, #0
 8002548:	4603      	mov	r3, r0
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
 800254e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002550:	2300      	movs	r3, #0
 8002552:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002554:	f7ff ff3e 	bl	80023d4 <__NVIC_GetPriorityGrouping>
 8002558:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800255a:	687a      	ldr	r2, [r7, #4]
 800255c:	68b9      	ldr	r1, [r7, #8]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff8e 	bl	8002480 <NVIC_EncodePriority>
 8002564:	4602      	mov	r2, r0
 8002566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800256a:	4611      	mov	r1, r2
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff ff5d 	bl	800242c <__NVIC_SetPriority>
}
 8002572:	bf00      	nop
 8002574:	3718      	adds	r7, #24
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	4603      	mov	r3, r0
 8002582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002588:	4618      	mov	r0, r3
 800258a:	f7ff ff31 	bl	80023f0 <__NVIC_EnableIRQ>
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002596:	b580      	push	{r7, lr}
 8002598:	b082      	sub	sp, #8
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff ffa2 	bl	80024e8 <SysTick_Config>
 80025a4:	4603      	mov	r3, r0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3708      	adds	r7, #8
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025bc:	f7ff fa94 	bl	8001ae8 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e099      	b.n	8002700 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2202      	movs	r2, #2
 80025d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025ec:	e00f      	b.n	800260e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025ee:	f7ff fa7b 	bl	8001ae8 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b05      	cmp	r3, #5
 80025fa:	d908      	bls.n	800260e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2220      	movs	r2, #32
 8002600:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2203      	movs	r2, #3
 8002606:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e078      	b.n	8002700 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1e8      	bne.n	80025ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002624:	697a      	ldr	r2, [r7, #20]
 8002626:	4b38      	ldr	r3, [pc, #224]	; (8002708 <HAL_DMA_Init+0x158>)
 8002628:	4013      	ands	r3, r2
 800262a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	685a      	ldr	r2, [r3, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800263a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	691b      	ldr	r3, [r3, #16]
 8002640:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002646:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002652:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6a1b      	ldr	r3, [r3, #32]
 8002658:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800265a:	697a      	ldr	r2, [r7, #20]
 800265c:	4313      	orrs	r3, r2
 800265e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002664:	2b04      	cmp	r3, #4
 8002666:	d107      	bne.n	8002678 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002670:	4313      	orrs	r3, r2
 8002672:	697a      	ldr	r2, [r7, #20]
 8002674:	4313      	orrs	r3, r2
 8002676:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002688:	697b      	ldr	r3, [r7, #20]
 800268a:	f023 0307 	bic.w	r3, r3, #7
 800268e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	697a      	ldr	r2, [r7, #20]
 8002696:	4313      	orrs	r3, r2
 8002698:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d117      	bne.n	80026d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4313      	orrs	r3, r2
 80026aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 fb01 	bl	8002cbc <DMA_CheckFifoParam>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d008      	beq.n	80026d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2240      	movs	r2, #64	; 0x40
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2201      	movs	r2, #1
 80026ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ce:	2301      	movs	r3, #1
 80026d0:	e016      	b.n	8002700 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fab8 	bl	8002c50 <DMA_CalcBaseAndBitshift>
 80026e0:	4603      	mov	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	223f      	movs	r2, #63	; 0x3f
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}
 8002708:	f010803f 	.word	0xf010803f

0800270c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	607a      	str	r2, [r7, #4]
 8002718:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800271a:	2300      	movs	r3, #0
 800271c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002722:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800272a:	2b01      	cmp	r3, #1
 800272c:	d101      	bne.n	8002732 <HAL_DMA_Start_IT+0x26>
 800272e:	2302      	movs	r3, #2
 8002730:	e040      	b.n	80027b4 <HAL_DMA_Start_IT+0xa8>
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d12f      	bne.n	80027a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2202      	movs	r2, #2
 800274a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	68b9      	ldr	r1, [r7, #8]
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 fa4a 	bl	8002bf4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002764:	223f      	movs	r2, #63	; 0x3f
 8002766:	409a      	lsls	r2, r3
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f042 0216 	orr.w	r2, r2, #22
 800277a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d007      	beq.n	8002794 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f042 0208 	orr.w	r2, r2, #8
 8002792:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f042 0201 	orr.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e005      	b.n	80027b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027ae:	2302      	movs	r3, #2
 80027b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b4:	4618      	mov	r0, r3
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027ca:	f7ff f98d 	bl	8001ae8 <HAL_GetTick>
 80027ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	2b02      	cmp	r3, #2
 80027da:	d008      	beq.n	80027ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2280      	movs	r2, #128	; 0x80
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e052      	b.n	8002894 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0216 	bic.w	r2, r2, #22
 80027fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695a      	ldr	r2, [r3, #20]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800280c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	2b00      	cmp	r3, #0
 8002814:	d103      	bne.n	800281e <HAL_DMA_Abort+0x62>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800281a:	2b00      	cmp	r3, #0
 800281c:	d007      	beq.n	800282e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681a      	ldr	r2, [r3, #0]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f022 0208 	bic.w	r2, r2, #8
 800282c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f022 0201 	bic.w	r2, r2, #1
 800283c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283e:	e013      	b.n	8002868 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002840:	f7ff f952 	bl	8001ae8 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	68bb      	ldr	r3, [r7, #8]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b05      	cmp	r3, #5
 800284c:	d90c      	bls.n	8002868 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2220      	movs	r2, #32
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2203      	movs	r2, #3
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e015      	b.n	8002894 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0301 	and.w	r3, r3, #1
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1e4      	bne.n	8002840 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800287a:	223f      	movs	r2, #63	; 0x3f
 800287c:	409a      	lsls	r2, r3
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d004      	beq.n	80028ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2280      	movs	r2, #128	; 0x80
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e00c      	b.n	80028d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2205      	movs	r2, #5
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	681a      	ldr	r2, [r3, #0]
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f022 0201 	bic.w	r2, r2, #1
 80028d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80028e8:	2300      	movs	r3, #0
 80028ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028ec:	4b92      	ldr	r3, [pc, #584]	; (8002b38 <HAL_DMA_IRQHandler+0x258>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a92      	ldr	r2, [pc, #584]	; (8002b3c <HAL_DMA_IRQHandler+0x25c>)
 80028f2:	fba2 2303 	umull	r2, r3, r2, r3
 80028f6:	0a9b      	lsrs	r3, r3, #10
 80028f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800290a:	2208      	movs	r2, #8
 800290c:	409a      	lsls	r2, r3
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	4013      	ands	r3, r2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d01a      	beq.n	800294c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d013      	beq.n	800294c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0204 	bic.w	r2, r2, #4
 8002932:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002938:	2208      	movs	r2, #8
 800293a:	409a      	lsls	r2, r3
 800293c:	693b      	ldr	r3, [r7, #16]
 800293e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002944:	f043 0201 	orr.w	r2, r3, #1
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	4013      	ands	r3, r2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d012      	beq.n	8002982 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	695b      	ldr	r3, [r3, #20]
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00b      	beq.n	8002982 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296e:	2201      	movs	r2, #1
 8002970:	409a      	lsls	r2, r3
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800297a:	f043 0202 	orr.w	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002986:	2204      	movs	r2, #4
 8002988:	409a      	lsls	r2, r3
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	4013      	ands	r3, r2
 800298e:	2b00      	cmp	r3, #0
 8002990:	d012      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d00b      	beq.n	80029b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a4:	2204      	movs	r2, #4
 80029a6:	409a      	lsls	r2, r3
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029b0:	f043 0204 	orr.w	r2, r3, #4
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029bc:	2210      	movs	r2, #16
 80029be:	409a      	lsls	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4013      	ands	r3, r2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d043      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d03c      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029da:	2210      	movs	r2, #16
 80029dc:	409a      	lsls	r2, r3
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d018      	beq.n	8002a22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d108      	bne.n	8002a10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d024      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	4798      	blx	r3
 8002a0e:	e01f      	b.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01b      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a1c:	6878      	ldr	r0, [r7, #4]
 8002a1e:	4798      	blx	r3
 8002a20:	e016      	b.n	8002a50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d107      	bne.n	8002a40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f022 0208 	bic.w	r2, r2, #8
 8002a3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d003      	beq.n	8002a50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a54:	2220      	movs	r2, #32
 8002a56:	409a      	lsls	r2, r3
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	f000 808e 	beq.w	8002b7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0310 	and.w	r3, r3, #16
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	f000 8086 	beq.w	8002b7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a76:	2220      	movs	r2, #32
 8002a78:	409a      	lsls	r2, r3
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d136      	bne.n	8002af8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	681a      	ldr	r2, [r3, #0]
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f022 0216 	bic.w	r2, r2, #22
 8002a98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	695a      	ldr	r2, [r3, #20]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d103      	bne.n	8002aba <HAL_DMA_IRQHandler+0x1da>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d007      	beq.n	8002aca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0208 	bic.w	r2, r2, #8
 8002ac8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ace:	223f      	movs	r2, #63	; 0x3f
 8002ad0:	409a      	lsls	r2, r3
 8002ad2:	693b      	ldr	r3, [r7, #16]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2201      	movs	r2, #1
 8002ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d07d      	beq.n	8002bea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	4798      	blx	r3
        }
        return;
 8002af6:	e078      	b.n	8002bea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d01c      	beq.n	8002b40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d108      	bne.n	8002b26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d030      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	4798      	blx	r3
 8002b24:	e02b      	b.n	8002b7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d027      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	4798      	blx	r3
 8002b36:	e022      	b.n	8002b7e <HAL_DMA_IRQHandler+0x29e>
 8002b38:	20000000 	.word	0x20000000
 8002b3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10f      	bne.n	8002b6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0210 	bic.w	r2, r2, #16
 8002b5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2201      	movs	r2, #1
 8002b62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d003      	beq.n	8002b7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d032      	beq.n	8002bec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8a:	f003 0301 	and.w	r3, r3, #1
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d022      	beq.n	8002bd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2205      	movs	r2, #5
 8002b96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0201 	bic.w	r2, r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	3301      	adds	r3, #1
 8002bae:	60bb      	str	r3, [r7, #8]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d307      	bcc.n	8002bc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1f2      	bne.n	8002baa <HAL_DMA_IRQHandler+0x2ca>
 8002bc4:	e000      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002bc6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	4798      	blx	r3
 8002be8:	e000      	b.n	8002bec <HAL_DMA_IRQHandler+0x30c>
        return;
 8002bea:	bf00      	nop
    }
  }
}
 8002bec:	3718      	adds	r7, #24
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop

08002bf4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
 8002c00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	683a      	ldr	r2, [r7, #0]
 8002c18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b40      	cmp	r3, #64	; 0x40
 8002c20:	d108      	bne.n	8002c34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68ba      	ldr	r2, [r7, #8]
 8002c30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c32:	e007      	b.n	8002c44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68ba      	ldr	r2, [r7, #8]
 8002c3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	60da      	str	r2, [r3, #12]
}
 8002c44:	bf00      	nop
 8002c46:	3714      	adds	r7, #20
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr

08002c50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b085      	sub	sp, #20
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3b10      	subs	r3, #16
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <DMA_CalcBaseAndBitshift+0x64>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	091b      	lsrs	r3, r3, #4
 8002c68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c6a:	4a13      	ldr	r2, [pc, #76]	; (8002cb8 <DMA_CalcBaseAndBitshift+0x68>)
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	4413      	add	r3, r2
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d909      	bls.n	8002c92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	1d1a      	adds	r2, r3, #4
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	659a      	str	r2, [r3, #88]	; 0x58
 8002c90:	e007      	b.n	8002ca2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c9a:	f023 0303 	bic.w	r3, r3, #3
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3714      	adds	r7, #20
 8002caa:	46bd      	mov	sp, r7
 8002cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb0:	4770      	bx	lr
 8002cb2:	bf00      	nop
 8002cb4:	aaaaaaab 	.word	0xaaaaaaab
 8002cb8:	08006c18 	.word	0x08006c18

08002cbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ccc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d11f      	bne.n	8002d16 <DMA_CheckFifoParam+0x5a>
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d856      	bhi.n	8002d8a <DMA_CheckFifoParam+0xce>
 8002cdc:	a201      	add	r2, pc, #4	; (adr r2, 8002ce4 <DMA_CheckFifoParam+0x28>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d07 	.word	0x08002d07
 8002cec:	08002cf5 	.word	0x08002cf5
 8002cf0:	08002d8b 	.word	0x08002d8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d046      	beq.n	8002d8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d04:	e043      	b.n	8002d8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d0e:	d140      	bne.n	8002d92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d14:	e03d      	b.n	8002d92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1e:	d121      	bne.n	8002d64 <DMA_CheckFifoParam+0xa8>
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d837      	bhi.n	8002d96 <DMA_CheckFifoParam+0xda>
 8002d26:	a201      	add	r2, pc, #4	; (adr r2, 8002d2c <DMA_CheckFifoParam+0x70>)
 8002d28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d2c:	08002d3d 	.word	0x08002d3d
 8002d30:	08002d43 	.word	0x08002d43
 8002d34:	08002d3d 	.word	0x08002d3d
 8002d38:	08002d55 	.word	0x08002d55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	e030      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d025      	beq.n	8002d9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d52:	e022      	b.n	8002d9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d62:	e01c      	b.n	8002d9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d903      	bls.n	8002d72 <DMA_CheckFifoParam+0xb6>
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b03      	cmp	r3, #3
 8002d6e:	d003      	beq.n	8002d78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d70:	e018      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	73fb      	strb	r3, [r7, #15]
      break;
 8002d76:	e015      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00e      	beq.n	8002da2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d84:	2301      	movs	r3, #1
 8002d86:	73fb      	strb	r3, [r7, #15]
      break;
 8002d88:	e00b      	b.n	8002da2 <DMA_CheckFifoParam+0xe6>
      break;
 8002d8a:	bf00      	nop
 8002d8c:	e00a      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
 8002d90:	e008      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d92:	bf00      	nop
 8002d94:	e006      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d96:	bf00      	nop
 8002d98:	e004      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002d9a:	bf00      	nop
 8002d9c:	e002      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d9e:	bf00      	nop
 8002da0:	e000      	b.n	8002da4 <DMA_CheckFifoParam+0xe8>
      break;
 8002da2:	bf00      	nop
    }
  } 
  
  return status; 
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	3714      	adds	r7, #20
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop

08002db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002db4:	b480      	push	{r7}
 8002db6:	b089      	sub	sp, #36	; 0x24
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
 8002dbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002dbe:	2300      	movs	r3, #0
 8002dc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002dca:	2300      	movs	r3, #0
 8002dcc:	61fb      	str	r3, [r7, #28]
 8002dce:	e177      	b.n	80030c0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	697a      	ldr	r2, [r7, #20]
 8002de0:	4013      	ands	r3, r2
 8002de2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	f040 8166 	bne.w	80030ba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	2b01      	cmp	r3, #1
 8002df8:	d005      	beq.n	8002e06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e02:	2b02      	cmp	r3, #2
 8002e04:	d130      	bne.n	8002e68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e0c:	69fb      	ldr	r3, [r7, #28]
 8002e0e:	005b      	lsls	r3, r3, #1
 8002e10:	2203      	movs	r2, #3
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	43db      	mvns	r3, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	68da      	ldr	r2, [r3, #12]
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	69ba      	ldr	r2, [r7, #24]
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	091b      	lsrs	r3, r3, #4
 8002e52:	f003 0201 	and.w	r2, r3, #1
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f003 0303 	and.w	r3, r3, #3
 8002e70:	2b03      	cmp	r3, #3
 8002e72:	d017      	beq.n	8002ea4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	2203      	movs	r2, #3
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	005b      	lsls	r3, r3, #1
 8002e94:	fa02 f303 	lsl.w	r3, r2, r3
 8002e98:	69ba      	ldr	r2, [r7, #24]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0303 	and.w	r3, r3, #3
 8002eac:	2b02      	cmp	r3, #2
 8002eae:	d123      	bne.n	8002ef8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	08da      	lsrs	r2, r3, #3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	3208      	adds	r2, #8
 8002eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	f003 0307 	and.w	r3, r3, #7
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	220f      	movs	r2, #15
 8002ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ecc:	43db      	mvns	r3, r3
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	691a      	ldr	r2, [r3, #16]
 8002ed8:	69fb      	ldr	r3, [r7, #28]
 8002eda:	f003 0307 	and.w	r3, r3, #7
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	08da      	lsrs	r2, r3, #3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	3208      	adds	r2, #8
 8002ef2:	69b9      	ldr	r1, [r7, #24]
 8002ef4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	005b      	lsls	r3, r3, #1
 8002f02:	2203      	movs	r2, #3
 8002f04:	fa02 f303 	lsl.w	r3, r2, r3
 8002f08:	43db      	mvns	r3, r3
 8002f0a:	69ba      	ldr	r2, [r7, #24]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0203 	and.w	r2, r3, #3
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4313      	orrs	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	f000 80c0 	beq.w	80030ba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	60fb      	str	r3, [r7, #12]
 8002f3e:	4b66      	ldr	r3, [pc, #408]	; (80030d8 <HAL_GPIO_Init+0x324>)
 8002f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f42:	4a65      	ldr	r2, [pc, #404]	; (80030d8 <HAL_GPIO_Init+0x324>)
 8002f44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f48:	6453      	str	r3, [r2, #68]	; 0x44
 8002f4a:	4b63      	ldr	r3, [pc, #396]	; (80030d8 <HAL_GPIO_Init+0x324>)
 8002f4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f52:	60fb      	str	r3, [r7, #12]
 8002f54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f56:	4a61      	ldr	r2, [pc, #388]	; (80030dc <HAL_GPIO_Init+0x328>)
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	089b      	lsrs	r3, r3, #2
 8002f5c:	3302      	adds	r3, #2
 8002f5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0303 	and.w	r3, r3, #3
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	220f      	movs	r2, #15
 8002f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	4a58      	ldr	r2, [pc, #352]	; (80030e0 <HAL_GPIO_Init+0x32c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d037      	beq.n	8002ff2 <HAL_GPIO_Init+0x23e>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a57      	ldr	r2, [pc, #348]	; (80030e4 <HAL_GPIO_Init+0x330>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d031      	beq.n	8002fee <HAL_GPIO_Init+0x23a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4a56      	ldr	r2, [pc, #344]	; (80030e8 <HAL_GPIO_Init+0x334>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d02b      	beq.n	8002fea <HAL_GPIO_Init+0x236>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a55      	ldr	r2, [pc, #340]	; (80030ec <HAL_GPIO_Init+0x338>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d025      	beq.n	8002fe6 <HAL_GPIO_Init+0x232>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a54      	ldr	r2, [pc, #336]	; (80030f0 <HAL_GPIO_Init+0x33c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d01f      	beq.n	8002fe2 <HAL_GPIO_Init+0x22e>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a53      	ldr	r2, [pc, #332]	; (80030f4 <HAL_GPIO_Init+0x340>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d019      	beq.n	8002fde <HAL_GPIO_Init+0x22a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a52      	ldr	r2, [pc, #328]	; (80030f8 <HAL_GPIO_Init+0x344>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <HAL_GPIO_Init+0x226>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a51      	ldr	r2, [pc, #324]	; (80030fc <HAL_GPIO_Init+0x348>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00d      	beq.n	8002fd6 <HAL_GPIO_Init+0x222>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a50      	ldr	r2, [pc, #320]	; (8003100 <HAL_GPIO_Init+0x34c>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d007      	beq.n	8002fd2 <HAL_GPIO_Init+0x21e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a4f      	ldr	r2, [pc, #316]	; (8003104 <HAL_GPIO_Init+0x350>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d101      	bne.n	8002fce <HAL_GPIO_Init+0x21a>
 8002fca:	2309      	movs	r3, #9
 8002fcc:	e012      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fce:	230a      	movs	r3, #10
 8002fd0:	e010      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fd2:	2308      	movs	r3, #8
 8002fd4:	e00e      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fd6:	2307      	movs	r3, #7
 8002fd8:	e00c      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fda:	2306      	movs	r3, #6
 8002fdc:	e00a      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fde:	2305      	movs	r3, #5
 8002fe0:	e008      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fe2:	2304      	movs	r3, #4
 8002fe4:	e006      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e004      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e002      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e000      	b.n	8002ff4 <HAL_GPIO_Init+0x240>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	f002 0203 	and.w	r2, r2, #3
 8002ffa:	0092      	lsls	r2, r2, #2
 8002ffc:	4093      	lsls	r3, r2
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003004:	4935      	ldr	r1, [pc, #212]	; (80030dc <HAL_GPIO_Init+0x328>)
 8003006:	69fb      	ldr	r3, [r7, #28]
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	3302      	adds	r3, #2
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003012:	4b3d      	ldr	r3, [pc, #244]	; (8003108 <HAL_GPIO_Init+0x354>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	43db      	mvns	r3, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4013      	ands	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d003      	beq.n	8003036 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	4313      	orrs	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003036:	4a34      	ldr	r2, [pc, #208]	; (8003108 <HAL_GPIO_Init+0x354>)
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800303c:	4b32      	ldr	r3, [pc, #200]	; (8003108 <HAL_GPIO_Init+0x354>)
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	43db      	mvns	r3, r3
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	4013      	ands	r3, r2
 800304a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d003      	beq.n	8003060 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003060:	4a29      	ldr	r2, [pc, #164]	; (8003108 <HAL_GPIO_Init+0x354>)
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_GPIO_Init+0x354>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a1f      	ldr	r2, [pc, #124]	; (8003108 <HAL_GPIO_Init+0x354>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b1d      	ldr	r3, [pc, #116]	; (8003108 <HAL_GPIO_Init+0x354>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_GPIO_Init+0x354>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	3301      	adds	r3, #1
 80030be:	61fb      	str	r3, [r7, #28]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	2b0f      	cmp	r3, #15
 80030c4:	f67f ae84 	bls.w	8002dd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80030c8:	bf00      	nop
 80030ca:	bf00      	nop
 80030cc:	3724      	adds	r7, #36	; 0x24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d4:	4770      	bx	lr
 80030d6:	bf00      	nop
 80030d8:	40023800 	.word	0x40023800
 80030dc:	40013800 	.word	0x40013800
 80030e0:	40020000 	.word	0x40020000
 80030e4:	40020400 	.word	0x40020400
 80030e8:	40020800 	.word	0x40020800
 80030ec:	40020c00 	.word	0x40020c00
 80030f0:	40021000 	.word	0x40021000
 80030f4:	40021400 	.word	0x40021400
 80030f8:	40021800 	.word	0x40021800
 80030fc:	40021c00 	.word	0x40021c00
 8003100:	40022000 	.word	0x40022000
 8003104:	40022400 	.word	0x40022400
 8003108:	40013c00 	.word	0x40013c00

0800310c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800310c:	b480      	push	{r7}
 800310e:	b083      	sub	sp, #12
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	807b      	strh	r3, [r7, #2]
 8003118:	4613      	mov	r3, r2
 800311a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800311c:	787b      	ldrb	r3, [r7, #1]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003122:	887a      	ldrh	r2, [r7, #2]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003128:	e003      	b.n	8003132 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800312a:	887b      	ldrh	r3, [r7, #2]
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	619a      	str	r2, [r3, #24]
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
	...

08003140 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	4603      	mov	r3, r0
 8003148:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800314a:	4b08      	ldr	r3, [pc, #32]	; (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	4013      	ands	r3, r2
 8003152:	2b00      	cmp	r3, #0
 8003154:	d006      	beq.n	8003164 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003156:	4a05      	ldr	r2, [pc, #20]	; (800316c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003158:	88fb      	ldrh	r3, [r7, #6]
 800315a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800315c:	88fb      	ldrh	r3, [r7, #6]
 800315e:	4618      	mov	r0, r3
 8003160:	f000 f806 	bl	8003170 <HAL_GPIO_EXTI_Callback>
  }
}
 8003164:	bf00      	nop
 8003166:	3708      	adds	r7, #8
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40013c00 	.word	0x40013c00

08003170 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	4603      	mov	r3, r0
 8003178:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800317a:	bf00      	nop
 800317c:	370c      	adds	r7, #12
 800317e:	46bd      	mov	sp, r7
 8003180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003184:	4770      	bx	lr
	...

08003188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b084      	sub	sp, #16
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e12b      	b.n	80033f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fd fc30 	bl	8000a14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80031ec:	f001 f92e 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 80031f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a81      	ldr	r2, [pc, #516]	; (80033fc <HAL_I2C_Init+0x274>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d807      	bhi.n	800320c <HAL_I2C_Init+0x84>
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	4a80      	ldr	r2, [pc, #512]	; (8003400 <HAL_I2C_Init+0x278>)
 8003200:	4293      	cmp	r3, r2
 8003202:	bf94      	ite	ls
 8003204:	2301      	movls	r3, #1
 8003206:	2300      	movhi	r3, #0
 8003208:	b2db      	uxtb	r3, r3
 800320a:	e006      	b.n	800321a <HAL_I2C_Init+0x92>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4a7d      	ldr	r2, [pc, #500]	; (8003404 <HAL_I2C_Init+0x27c>)
 8003210:	4293      	cmp	r3, r2
 8003212:	bf94      	ite	ls
 8003214:	2301      	movls	r3, #1
 8003216:	2300      	movhi	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b00      	cmp	r3, #0
 800321c:	d001      	beq.n	8003222 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e0e7      	b.n	80033f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	4a78      	ldr	r2, [pc, #480]	; (8003408 <HAL_I2C_Init+0x280>)
 8003226:	fba2 2303 	umull	r2, r3, r2, r3
 800322a:	0c9b      	lsrs	r3, r3, #18
 800322c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	68ba      	ldr	r2, [r7, #8]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6a1b      	ldr	r3, [r3, #32]
 8003248:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	4a6a      	ldr	r2, [pc, #424]	; (80033fc <HAL_I2C_Init+0x274>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d802      	bhi.n	800325c <HAL_I2C_Init+0xd4>
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	3301      	adds	r3, #1
 800325a:	e009      	b.n	8003270 <HAL_I2C_Init+0xe8>
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003262:	fb02 f303 	mul.w	r3, r2, r3
 8003266:	4a69      	ldr	r2, [pc, #420]	; (800340c <HAL_I2C_Init+0x284>)
 8003268:	fba2 2303 	umull	r2, r3, r2, r3
 800326c:	099b      	lsrs	r3, r3, #6
 800326e:	3301      	adds	r3, #1
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6812      	ldr	r2, [r2, #0]
 8003274:	430b      	orrs	r3, r1
 8003276:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	69db      	ldr	r3, [r3, #28]
 800327e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003282:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	495c      	ldr	r1, [pc, #368]	; (80033fc <HAL_I2C_Init+0x274>)
 800328c:	428b      	cmp	r3, r1
 800328e:	d819      	bhi.n	80032c4 <HAL_I2C_Init+0x13c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	1e59      	subs	r1, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fbb1 f3f3 	udiv	r3, r1, r3
 800329e:	1c59      	adds	r1, r3, #1
 80032a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80032a4:	400b      	ands	r3, r1
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_I2C_Init+0x138>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	1e59      	subs	r1, r3, #1
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80032b8:	3301      	adds	r3, #1
 80032ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032be:	e051      	b.n	8003364 <HAL_I2C_Init+0x1dc>
 80032c0:	2304      	movs	r3, #4
 80032c2:	e04f      	b.n	8003364 <HAL_I2C_Init+0x1dc>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d111      	bne.n	80032f0 <HAL_I2C_Init+0x168>
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	1e58      	subs	r0, r3, #1
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	460b      	mov	r3, r1
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	440b      	add	r3, r1
 80032da:	fbb0 f3f3 	udiv	r3, r0, r3
 80032de:	3301      	adds	r3, #1
 80032e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	bf0c      	ite	eq
 80032e8:	2301      	moveq	r3, #1
 80032ea:	2300      	movne	r3, #0
 80032ec:	b2db      	uxtb	r3, r3
 80032ee:	e012      	b.n	8003316 <HAL_I2C_Init+0x18e>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	1e58      	subs	r0, r3, #1
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6859      	ldr	r1, [r3, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	440b      	add	r3, r1
 80032fe:	0099      	lsls	r1, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	fbb0 f3f3 	udiv	r3, r0, r3
 8003306:	3301      	adds	r3, #1
 8003308:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800330c:	2b00      	cmp	r3, #0
 800330e:	bf0c      	ite	eq
 8003310:	2301      	moveq	r3, #1
 8003312:	2300      	movne	r3, #0
 8003314:	b2db      	uxtb	r3, r3
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_I2C_Init+0x196>
 800331a:	2301      	movs	r3, #1
 800331c:	e022      	b.n	8003364 <HAL_I2C_Init+0x1dc>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10e      	bne.n	8003344 <HAL_I2C_Init+0x1bc>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	1e58      	subs	r0, r3, #1
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6859      	ldr	r1, [r3, #4]
 800332e:	460b      	mov	r3, r1
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	440b      	add	r3, r1
 8003334:	fbb0 f3f3 	udiv	r3, r0, r3
 8003338:	3301      	adds	r3, #1
 800333a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800333e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003342:	e00f      	b.n	8003364 <HAL_I2C_Init+0x1dc>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	1e58      	subs	r0, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6859      	ldr	r1, [r3, #4]
 800334c:	460b      	mov	r3, r1
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	0099      	lsls	r1, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	fbb0 f3f3 	udiv	r3, r0, r3
 800335a:	3301      	adds	r3, #1
 800335c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003360:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	6809      	ldr	r1, [r1, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	69da      	ldr	r2, [r3, #28]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6a1b      	ldr	r3, [r3, #32]
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	430a      	orrs	r2, r1
 8003386:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	689b      	ldr	r3, [r3, #8]
 800338e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003392:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6911      	ldr	r1, [r2, #16]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68d2      	ldr	r2, [r2, #12]
 800339e:	4311      	orrs	r1, r2
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	695a      	ldr	r2, [r3, #20]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	699b      	ldr	r3, [r3, #24]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2220      	movs	r2, #32
 80033de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	000186a0 	.word	0x000186a0
 8003400:	001e847f 	.word	0x001e847f
 8003404:	003d08ff 	.word	0x003d08ff
 8003408:	431bde83 	.word	0x431bde83
 800340c:	10624dd3 	.word	0x10624dd3

08003410 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b088      	sub	sp, #32
 8003414:	af02      	add	r7, sp, #8
 8003416:	60f8      	str	r0, [r7, #12]
 8003418:	607a      	str	r2, [r7, #4]
 800341a:	461a      	mov	r2, r3
 800341c:	460b      	mov	r3, r1
 800341e:	817b      	strh	r3, [r7, #10]
 8003420:	4613      	mov	r3, r2
 8003422:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003424:	f7fe fb60 	bl	8001ae8 <HAL_GetTick>
 8003428:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b20      	cmp	r3, #32
 8003434:	f040 80e0 	bne.w	80035f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003438:	697b      	ldr	r3, [r7, #20]
 800343a:	9300      	str	r3, [sp, #0]
 800343c:	2319      	movs	r3, #25
 800343e:	2201      	movs	r2, #1
 8003440:	4970      	ldr	r1, [pc, #448]	; (8003604 <HAL_I2C_Master_Transmit+0x1f4>)
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f964 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800344e:	2302      	movs	r3, #2
 8003450:	e0d3      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_I2C_Master_Transmit+0x50>
 800345c:	2302      	movs	r3, #2
 800345e:	e0cc      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b01      	cmp	r3, #1
 8003474:	d007      	beq.n	8003486 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003494:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2221      	movs	r2, #33	; 0x21
 800349a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	2210      	movs	r2, #16
 80034a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	893a      	ldrh	r2, [r7, #8]
 80034b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034bc:	b29a      	uxth	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a50      	ldr	r2, [pc, #320]	; (8003608 <HAL_I2C_Master_Transmit+0x1f8>)
 80034c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034c8:	8979      	ldrh	r1, [r7, #10]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	6a3a      	ldr	r2, [r7, #32]
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f89c 	bl	800360c <I2C_MasterRequestWrite>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e08d      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695b      	ldr	r3, [r3, #20]
 80034e8:	613b      	str	r3, [r7, #16]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	699b      	ldr	r3, [r3, #24]
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80034f4:	e066      	b.n	80035c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034f6:	697a      	ldr	r2, [r7, #20]
 80034f8:	6a39      	ldr	r1, [r7, #32]
 80034fa:	68f8      	ldr	r0, [r7, #12]
 80034fc:	f000 f9de 	bl	80038bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00d      	beq.n	8003522 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	2b04      	cmp	r3, #4
 800350c:	d107      	bne.n	800351e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e06b      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	781a      	ldrb	r2, [r3, #0]
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003532:	1c5a      	adds	r2, r3, #1
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	3b01      	subs	r3, #1
 8003540:	b29a      	uxth	r2, r3
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800354a:	3b01      	subs	r3, #1
 800354c:	b29a      	uxth	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b04      	cmp	r3, #4
 800355e:	d11b      	bne.n	8003598 <HAL_I2C_Master_Transmit+0x188>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003564:	2b00      	cmp	r3, #0
 8003566:	d017      	beq.n	8003598 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356c:	781a      	ldrb	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003578:	1c5a      	adds	r2, r3, #1
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003590:	3b01      	subs	r3, #1
 8003592:	b29a      	uxth	r2, r3
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003598:	697a      	ldr	r2, [r7, #20]
 800359a:	6a39      	ldr	r1, [r7, #32]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f9ce 	bl	800393e <I2C_WaitOnBTFFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d00d      	beq.n	80035c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d107      	bne.n	80035c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e01a      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d194      	bne.n	80034f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2220      	movs	r2, #32
 80035e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2200      	movs	r2, #0
 80035f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	e000      	b.n	80035fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80035f8:	2302      	movs	r3, #2
  }
}
 80035fa:	4618      	mov	r0, r3
 80035fc:	3718      	adds	r7, #24
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	00100002 	.word	0x00100002
 8003608:	ffff0000 	.word	0xffff0000

0800360c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b088      	sub	sp, #32
 8003610:	af02      	add	r7, sp, #8
 8003612:	60f8      	str	r0, [r7, #12]
 8003614:	607a      	str	r2, [r7, #4]
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	460b      	mov	r3, r1
 800361a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003622:	697b      	ldr	r3, [r7, #20]
 8003624:	2b08      	cmp	r3, #8
 8003626:	d006      	beq.n	8003636 <I2C_MasterRequestWrite+0x2a>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d003      	beq.n	8003636 <I2C_MasterRequestWrite+0x2a>
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003634:	d108      	bne.n	8003648 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681a      	ldr	r2, [r3, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003644:	601a      	str	r2, [r3, #0]
 8003646:	e00b      	b.n	8003660 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364c:	2b12      	cmp	r3, #18
 800364e:	d107      	bne.n	8003660 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800365e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2200      	movs	r2, #0
 8003668:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 f84f 	bl	8003710 <I2C_WaitOnFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00d      	beq.n	8003694 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d103      	bne.n	8003690 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800368e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e035      	b.n	8003700 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800369c:	d108      	bne.n	80036b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369e:	897b      	ldrh	r3, [r7, #10]
 80036a0:	b2db      	uxtb	r3, r3
 80036a2:	461a      	mov	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036ac:	611a      	str	r2, [r3, #16]
 80036ae:	e01b      	b.n	80036e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036b0:	897b      	ldrh	r3, [r7, #10]
 80036b2:	11db      	asrs	r3, r3, #7
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	f003 0306 	and.w	r3, r3, #6
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	f063 030f 	orn	r3, r3, #15
 80036c0:	b2da      	uxtb	r2, r3
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	490e      	ldr	r1, [pc, #56]	; (8003708 <I2C_MasterRequestWrite+0xfc>)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f875 	bl	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e010      	b.n	8003700 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036de:	897b      	ldrh	r3, [r7, #10]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	687a      	ldr	r2, [r7, #4]
 80036ec:	4907      	ldr	r1, [pc, #28]	; (800370c <I2C_MasterRequestWrite+0x100>)
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 f865 	bl	80037be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e000      	b.n	8003700 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036fe:	2300      	movs	r3, #0
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	00010008 	.word	0x00010008
 800370c:	00010002 	.word	0x00010002

08003710 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b084      	sub	sp, #16
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	603b      	str	r3, [r7, #0]
 800371c:	4613      	mov	r3, r2
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003720:	e025      	b.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003728:	d021      	beq.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372a:	f7fe f9dd 	bl	8001ae8 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	429a      	cmp	r2, r3
 8003738:	d302      	bcc.n	8003740 <I2C_WaitOnFlagUntilTimeout+0x30>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d116      	bne.n	800376e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2200      	movs	r2, #0
 8003744:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	2220      	movs	r2, #32
 800374a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375a:	f043 0220 	orr.w	r2, r3, #32
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e023      	b.n	80037b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	0c1b      	lsrs	r3, r3, #16
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b01      	cmp	r3, #1
 8003776:	d10d      	bne.n	8003794 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	695b      	ldr	r3, [r3, #20]
 800377e:	43da      	mvns	r2, r3
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	4013      	ands	r3, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	bf0c      	ite	eq
 800378a:	2301      	moveq	r3, #1
 800378c:	2300      	movne	r3, #0
 800378e:	b2db      	uxtb	r3, r3
 8003790:	461a      	mov	r2, r3
 8003792:	e00c      	b.n	80037ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699b      	ldr	r3, [r3, #24]
 800379a:	43da      	mvns	r2, r3
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	4013      	ands	r3, r2
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	bf0c      	ite	eq
 80037a6:	2301      	moveq	r3, #1
 80037a8:	2300      	movne	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	461a      	mov	r2, r3
 80037ae:	79fb      	ldrb	r3, [r7, #7]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d0b6      	beq.n	8003722 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	3710      	adds	r7, #16
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b084      	sub	sp, #16
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	60f8      	str	r0, [r7, #12]
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037cc:	e051      	b.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695b      	ldr	r3, [r3, #20]
 80037d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d123      	bne.n	8003826 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80037f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2220      	movs	r2, #32
 8003802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003812:	f043 0204 	orr.w	r2, r3, #4
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	2200      	movs	r2, #0
 800381e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e046      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295
 800382c:	d021      	beq.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7fe f95b 	bl	8001ae8 <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	687a      	ldr	r2, [r7, #4]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d116      	bne.n	8003872 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2220      	movs	r2, #32
 800384e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	f043 0220 	orr.w	r2, r3, #32
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e020      	b.n	80038b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	0c1b      	lsrs	r3, r3, #16
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d10c      	bne.n	8003896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	4013      	ands	r3, r2
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	bf14      	ite	ne
 800388e:	2301      	movne	r3, #1
 8003890:	2300      	moveq	r3, #0
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e00b      	b.n	80038ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	699b      	ldr	r3, [r3, #24]
 800389c:	43da      	mvns	r2, r3
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4013      	ands	r3, r2
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	bf14      	ite	ne
 80038a8:	2301      	movne	r3, #1
 80038aa:	2300      	moveq	r3, #0
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d18d      	bne.n	80037ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80038b2:	2300      	movs	r3, #0
}
 80038b4:	4618      	mov	r0, r3
 80038b6:	3710      	adds	r7, #16
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bd80      	pop	{r7, pc}

080038bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	60f8      	str	r0, [r7, #12]
 80038c4:	60b9      	str	r1, [r7, #8]
 80038c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038c8:	e02d      	b.n	8003926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038ca:	68f8      	ldr	r0, [r7, #12]
 80038cc:	f000 f878 	bl	80039c0 <I2C_IsAcknowledgeFailed>
 80038d0:	4603      	mov	r3, r0
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d001      	beq.n	80038da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e02d      	b.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e0:	d021      	beq.n	8003926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038e2:	f7fe f901 	bl	8001ae8 <HAL_GetTick>
 80038e6:	4602      	mov	r2, r0
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	68ba      	ldr	r2, [r7, #8]
 80038ee:	429a      	cmp	r2, r3
 80038f0:	d302      	bcc.n	80038f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d116      	bne.n	8003926 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0220 	orr.w	r2, r3, #32
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e007      	b.n	8003936 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	695b      	ldr	r3, [r3, #20]
 800392c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003930:	2b80      	cmp	r3, #128	; 0x80
 8003932:	d1ca      	bne.n	80038ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003934:	2300      	movs	r3, #0
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800394a:	e02d      	b.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f000 f837 	bl	80039c0 <I2C_IsAcknowledgeFailed>
 8003952:	4603      	mov	r3, r0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d001      	beq.n	800395c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e02d      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003962:	d021      	beq.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003964:	f7fe f8c0 	bl	8001ae8 <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	68ba      	ldr	r2, [r7, #8]
 8003970:	429a      	cmp	r2, r3
 8003972:	d302      	bcc.n	800397a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d116      	bne.n	80039a8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003994:	f043 0220 	orr.w	r2, r3, #32
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039a4:	2301      	movs	r3, #1
 80039a6:	e007      	b.n	80039b8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	695b      	ldr	r3, [r3, #20]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b04      	cmp	r3, #4
 80039b4:	d1ca      	bne.n	800394c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3710      	adds	r7, #16
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}

080039c0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	695b      	ldr	r3, [r3, #20]
 80039ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039d6:	d11b      	bne.n	8003a10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80039e0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2200      	movs	r2, #0
 80039e6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2220      	movs	r2, #32
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2200      	movs	r2, #0
 80039f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039fc:	f043 0204 	orr.w	r2, r3, #4
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e000      	b.n	8003a12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	370c      	adds	r7, #12
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b20      	cmp	r3, #32
 8003a32:	d129      	bne.n	8003a88 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2224      	movs	r2, #36	; 0x24
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f022 0201 	bic.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	430a      	orrs	r2, r1
 8003a6a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f042 0201 	orr.w	r2, r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2220      	movs	r2, #32
 8003a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003a84:	2300      	movs	r3, #0
 8003a86:	e000      	b.n	8003a8a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003a88:	2302      	movs	r3, #2
  }
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	370c      	adds	r7, #12
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003a96:	b480      	push	{r7}
 8003a98:	b085      	sub	sp, #20
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
 8003a9e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b20      	cmp	r3, #32
 8003aae:	d12a      	bne.n	8003b06 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2224      	movs	r2, #36	; 0x24
 8003ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	681a      	ldr	r2, [r3, #0]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f022 0201 	bic.w	r2, r2, #1
 8003ac6:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003ad0:	89fb      	ldrh	r3, [r7, #14]
 8003ad2:	f023 030f 	bic.w	r3, r3, #15
 8003ad6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	89fb      	ldrh	r3, [r7, #14]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	89fa      	ldrh	r2, [r7, #14]
 8003ae8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2220      	movs	r2, #32
 8003afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e000      	b.n	8003b08 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003b06:	2302      	movs	r3, #2
  }
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3714      	adds	r7, #20
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr

08003b14 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b082      	sub	sp, #8
 8003b18:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	603b      	str	r3, [r7, #0]
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b26:	4a1f      	ldr	r2, [pc, #124]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <HAL_PWREx_EnableOverDrive+0x90>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b36:	603b      	str	r3, [r7, #0]
 8003b38:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_PWREx_EnableOverDrive+0x94>)
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b40:	f7fd ffd2 	bl	8001ae8 <HAL_GetTick>
 8003b44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b46:	e009      	b.n	8003b5c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b48:	f7fd ffce 	bl	8001ae8 <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	1ad3      	subs	r3, r2, r3
 8003b52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b56:	d901      	bls.n	8003b5c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003b58:	2303      	movs	r3, #3
 8003b5a:	e01f      	b.n	8003b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b5c:	4b13      	ldr	r3, [pc, #76]	; (8003bac <HAL_PWREx_EnableOverDrive+0x98>)
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b68:	d1ee      	bne.n	8003b48 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b6a:	4b11      	ldr	r3, [pc, #68]	; (8003bb0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b70:	f7fd ffba 	bl	8001ae8 <HAL_GetTick>
 8003b74:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b76:	e009      	b.n	8003b8c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b78:	f7fd ffb6 	bl	8001ae8 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b86:	d901      	bls.n	8003b8c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e007      	b.n	8003b9c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b8c:	4b07      	ldr	r3, [pc, #28]	; (8003bac <HAL_PWREx_EnableOverDrive+0x98>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b94:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b98:	d1ee      	bne.n	8003b78 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3708      	adds	r7, #8
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	420e0040 	.word	0x420e0040
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	420e0044 	.word	0x420e0044

08003bb4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e264      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d075      	beq.n	8003cbe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bd2:	4ba3      	ldr	r3, [pc, #652]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	f003 030c 	and.w	r3, r3, #12
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d00c      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bde:	4ba0      	ldr	r3, [pc, #640]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be6:	2b08      	cmp	r3, #8
 8003be8:	d112      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bea:	4b9d      	ldr	r3, [pc, #628]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bf6:	d10b      	bne.n	8003c10 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bf8:	4b99      	ldr	r3, [pc, #612]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d05b      	beq.n	8003cbc <HAL_RCC_OscConfig+0x108>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d157      	bne.n	8003cbc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e23f      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c18:	d106      	bne.n	8003c28 <HAL_RCC_OscConfig+0x74>
 8003c1a:	4b91      	ldr	r3, [pc, #580]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a90      	ldr	r2, [pc, #576]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e01d      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c30:	d10c      	bne.n	8003c4c <HAL_RCC_OscConfig+0x98>
 8003c32:	4b8b      	ldr	r3, [pc, #556]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a8a      	ldr	r2, [pc, #552]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c3c:	6013      	str	r3, [r2, #0]
 8003c3e:	4b88      	ldr	r3, [pc, #544]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a87      	ldr	r2, [pc, #540]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	e00b      	b.n	8003c64 <HAL_RCC_OscConfig+0xb0>
 8003c4c:	4b84      	ldr	r3, [pc, #528]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a83      	ldr	r2, [pc, #524]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c52:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4b81      	ldr	r3, [pc, #516]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a80      	ldr	r2, [pc, #512]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c5e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c62:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d013      	beq.n	8003c94 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6c:	f7fd ff3c 	bl	8001ae8 <HAL_GetTick>
 8003c70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c72:	e008      	b.n	8003c86 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c74:	f7fd ff38 	bl	8001ae8 <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	2b64      	cmp	r3, #100	; 0x64
 8003c80:	d901      	bls.n	8003c86 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c82:	2303      	movs	r3, #3
 8003c84:	e204      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	4b76      	ldr	r3, [pc, #472]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d0f0      	beq.n	8003c74 <HAL_RCC_OscConfig+0xc0>
 8003c92:	e014      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c94:	f7fd ff28 	bl	8001ae8 <HAL_GetTick>
 8003c98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c9a:	e008      	b.n	8003cae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c9c:	f7fd ff24 	bl	8001ae8 <HAL_GetTick>
 8003ca0:	4602      	mov	r2, r0
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1ad3      	subs	r3, r2, r3
 8003ca6:	2b64      	cmp	r3, #100	; 0x64
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e1f0      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	4b6c      	ldr	r3, [pc, #432]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d1f0      	bne.n	8003c9c <HAL_RCC_OscConfig+0xe8>
 8003cba:	e000      	b.n	8003cbe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cbc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d063      	beq.n	8003d92 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cca:	4b65      	ldr	r3, [pc, #404]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d00b      	beq.n	8003cee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cd6:	4b62      	ldr	r3, [pc, #392]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d11c      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ce2:	4b5f      	ldr	r3, [pc, #380]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d116      	bne.n	8003d1c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cee:	4b5c      	ldr	r3, [pc, #368]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d005      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d001      	beq.n	8003d06 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e1c4      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d06:	4b56      	ldr	r3, [pc, #344]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	4952      	ldr	r1, [pc, #328]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1a:	e03a      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d020      	beq.n	8003d66 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d24:	4b4f      	ldr	r3, [pc, #316]	; (8003e64 <HAL_RCC_OscConfig+0x2b0>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d2a:	f7fd fedd 	bl	8001ae8 <HAL_GetTick>
 8003d2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d30:	e008      	b.n	8003d44 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d32:	f7fd fed9 	bl	8001ae8 <HAL_GetTick>
 8003d36:	4602      	mov	r2, r0
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	1ad3      	subs	r3, r2, r3
 8003d3c:	2b02      	cmp	r3, #2
 8003d3e:	d901      	bls.n	8003d44 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d40:	2303      	movs	r3, #3
 8003d42:	e1a5      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	4b46      	ldr	r3, [pc, #280]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0302 	and.w	r3, r3, #2
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d0f0      	beq.n	8003d32 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4940      	ldr	r1, [pc, #256]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	600b      	str	r3, [r1, #0]
 8003d64:	e015      	b.n	8003d92 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d66:	4b3f      	ldr	r3, [pc, #252]	; (8003e64 <HAL_RCC_OscConfig+0x2b0>)
 8003d68:	2200      	movs	r2, #0
 8003d6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d6c:	f7fd febc 	bl	8001ae8 <HAL_GetTick>
 8003d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d72:	e008      	b.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d74:	f7fd feb8 	bl	8001ae8 <HAL_GetTick>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d901      	bls.n	8003d86 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e184      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	4b36      	ldr	r3, [pc, #216]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 0302 	and.w	r3, r3, #2
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d1f0      	bne.n	8003d74 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d030      	beq.n	8003e00 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d016      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003da6:	4b30      	ldr	r3, [pc, #192]	; (8003e68 <HAL_RCC_OscConfig+0x2b4>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dac:	f7fd fe9c 	bl	8001ae8 <HAL_GetTick>
 8003db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003db2:	e008      	b.n	8003dc6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003db4:	f7fd fe98 	bl	8001ae8 <HAL_GetTick>
 8003db8:	4602      	mov	r2, r0
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	1ad3      	subs	r3, r2, r3
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d901      	bls.n	8003dc6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	e164      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003dc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dca:	f003 0302 	and.w	r3, r3, #2
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0f0      	beq.n	8003db4 <HAL_RCC_OscConfig+0x200>
 8003dd2:	e015      	b.n	8003e00 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_RCC_OscConfig+0x2b4>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dda:	f7fd fe85 	bl	8001ae8 <HAL_GetTick>
 8003dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003de0:	e008      	b.n	8003df4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003de2:	f7fd fe81 	bl	8001ae8 <HAL_GetTick>
 8003de6:	4602      	mov	r2, r0
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	2b02      	cmp	r3, #2
 8003dee:	d901      	bls.n	8003df4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003df0:	2303      	movs	r3, #3
 8003df2:	e14d      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	4b1a      	ldr	r3, [pc, #104]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003df6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003df8:	f003 0302 	and.w	r3, r3, #2
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d1f0      	bne.n	8003de2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	f000 80a0 	beq.w	8003f4e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e12:	4b13      	ldr	r3, [pc, #76]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10f      	bne.n	8003e3e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
 8003e22:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e26:	4a0e      	ldr	r2, [pc, #56]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003e28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e2c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e2e:	4b0c      	ldr	r3, [pc, #48]	; (8003e60 <HAL_RCC_OscConfig+0x2ac>)
 8003e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e36:	60bb      	str	r3, [r7, #8]
 8003e38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e3e:	4b0b      	ldr	r3, [pc, #44]	; (8003e6c <HAL_RCC_OscConfig+0x2b8>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d121      	bne.n	8003e8e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e4a:	4b08      	ldr	r3, [pc, #32]	; (8003e6c <HAL_RCC_OscConfig+0x2b8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <HAL_RCC_OscConfig+0x2b8>)
 8003e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e56:	f7fd fe47 	bl	8001ae8 <HAL_GetTick>
 8003e5a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5c:	e011      	b.n	8003e82 <HAL_RCC_OscConfig+0x2ce>
 8003e5e:	bf00      	nop
 8003e60:	40023800 	.word	0x40023800
 8003e64:	42470000 	.word	0x42470000
 8003e68:	42470e80 	.word	0x42470e80
 8003e6c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e70:	f7fd fe3a 	bl	8001ae8 <HAL_GetTick>
 8003e74:	4602      	mov	r2, r0
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	1ad3      	subs	r3, r2, r3
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e106      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e82:	4b85      	ldr	r3, [pc, #532]	; (8004098 <HAL_RCC_OscConfig+0x4e4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0f0      	beq.n	8003e70 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	2b01      	cmp	r3, #1
 8003e94:	d106      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x2f0>
 8003e96:	4b81      	ldr	r3, [pc, #516]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	4a80      	ldr	r2, [pc, #512]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea2:	e01c      	b.n	8003ede <HAL_RCC_OscConfig+0x32a>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d10c      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x312>
 8003eac:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb0:	4a7a      	ldr	r2, [pc, #488]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003eb2:	f043 0304 	orr.w	r3, r3, #4
 8003eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb8:	4b78      	ldr	r3, [pc, #480]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	4a77      	ldr	r2, [pc, #476]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003ebe:	f043 0301 	orr.w	r3, r3, #1
 8003ec2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec4:	e00b      	b.n	8003ede <HAL_RCC_OscConfig+0x32a>
 8003ec6:	4b75      	ldr	r3, [pc, #468]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a74      	ldr	r2, [pc, #464]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003ecc:	f023 0301 	bic.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	4b72      	ldr	r3, [pc, #456]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed6:	4a71      	ldr	r2, [pc, #452]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003ed8:	f023 0304 	bic.w	r3, r3, #4
 8003edc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d015      	beq.n	8003f12 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ee6:	f7fd fdff 	bl	8001ae8 <HAL_GetTick>
 8003eea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eec:	e00a      	b.n	8003f04 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fdfb 	bl	8001ae8 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e0c5      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f04:	4b65      	ldr	r3, [pc, #404]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f08:	f003 0302 	and.w	r3, r3, #2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0ee      	beq.n	8003eee <HAL_RCC_OscConfig+0x33a>
 8003f10:	e014      	b.n	8003f3c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f12:	f7fd fde9 	bl	8001ae8 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f18:	e00a      	b.n	8003f30 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f1a:	f7fd fde5 	bl	8001ae8 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d901      	bls.n	8003f30 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	e0af      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f30:	4b5a      	ldr	r3, [pc, #360]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f34:	f003 0302 	and.w	r3, r3, #2
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d1ee      	bne.n	8003f1a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f3c:	7dfb      	ldrb	r3, [r7, #23]
 8003f3e:	2b01      	cmp	r3, #1
 8003f40:	d105      	bne.n	8003f4e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f42:	4b56      	ldr	r3, [pc, #344]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	4a55      	ldr	r2, [pc, #340]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	699b      	ldr	r3, [r3, #24]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f000 809b 	beq.w	800408e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f58:	4b50      	ldr	r3, [pc, #320]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f5a:	689b      	ldr	r3, [r3, #8]
 8003f5c:	f003 030c 	and.w	r3, r3, #12
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d05c      	beq.n	800401e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	2b02      	cmp	r3, #2
 8003f6a:	d141      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6c:	4b4c      	ldr	r3, [pc, #304]	; (80040a0 <HAL_RCC_OscConfig+0x4ec>)
 8003f6e:	2200      	movs	r2, #0
 8003f70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f72:	f7fd fdb9 	bl	8001ae8 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7a:	f7fd fdb5 	bl	8001ae8 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e081      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8c:	4b43      	ldr	r3, [pc, #268]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d1f0      	bne.n	8003f7a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	69da      	ldr	r2, [r3, #28]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	019b      	lsls	r3, r3, #6
 8003fa8:	431a      	orrs	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fae:	085b      	lsrs	r3, r3, #1
 8003fb0:	3b01      	subs	r3, #1
 8003fb2:	041b      	lsls	r3, r3, #16
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fba:	061b      	lsls	r3, r3, #24
 8003fbc:	4937      	ldr	r1, [pc, #220]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fc2:	4b37      	ldr	r3, [pc, #220]	; (80040a0 <HAL_RCC_OscConfig+0x4ec>)
 8003fc4:	2201      	movs	r2, #1
 8003fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fc8:	f7fd fd8e 	bl	8001ae8 <HAL_GetTick>
 8003fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fce:	e008      	b.n	8003fe2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd0:	f7fd fd8a 	bl	8001ae8 <HAL_GetTick>
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	1ad3      	subs	r3, r2, r3
 8003fda:	2b02      	cmp	r3, #2
 8003fdc:	d901      	bls.n	8003fe2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e056      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fe2:	4b2e      	ldr	r3, [pc, #184]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d0f0      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x41c>
 8003fee:	e04e      	b.n	800408e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ff0:	4b2b      	ldr	r3, [pc, #172]	; (80040a0 <HAL_RCC_OscConfig+0x4ec>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ff6:	f7fd fd77 	bl	8001ae8 <HAL_GetTick>
 8003ffa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ffc:	e008      	b.n	8004010 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ffe:	f7fd fd73 	bl	8001ae8 <HAL_GetTick>
 8004002:	4602      	mov	r2, r0
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	1ad3      	subs	r3, r2, r3
 8004008:	2b02      	cmp	r3, #2
 800400a:	d901      	bls.n	8004010 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e03f      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004010:	4b22      	ldr	r3, [pc, #136]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d1f0      	bne.n	8003ffe <HAL_RCC_OscConfig+0x44a>
 800401c:	e037      	b.n	800408e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d101      	bne.n	800402a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e032      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800402a:	4b1c      	ldr	r3, [pc, #112]	; (800409c <HAL_RCC_OscConfig+0x4e8>)
 800402c:	685b      	ldr	r3, [r3, #4]
 800402e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	699b      	ldr	r3, [r3, #24]
 8004034:	2b01      	cmp	r3, #1
 8004036:	d028      	beq.n	800408a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004042:	429a      	cmp	r2, r3
 8004044:	d121      	bne.n	800408a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004050:	429a      	cmp	r2, r3
 8004052:	d11a      	bne.n	800408a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004054:	68fa      	ldr	r2, [r7, #12]
 8004056:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800405a:	4013      	ands	r3, r2
 800405c:	687a      	ldr	r2, [r7, #4]
 800405e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004060:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004062:	4293      	cmp	r3, r2
 8004064:	d111      	bne.n	800408a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004070:	085b      	lsrs	r3, r3, #1
 8004072:	3b01      	subs	r3, #1
 8004074:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004076:	429a      	cmp	r2, r3
 8004078:	d107      	bne.n	800408a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004084:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004086:	429a      	cmp	r2, r3
 8004088:	d001      	beq.n	800408e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e000      	b.n	8004090 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3718      	adds	r7, #24
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40007000 	.word	0x40007000
 800409c:	40023800 	.word	0x40023800
 80040a0:	42470060 	.word	0x42470060

080040a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b084      	sub	sp, #16
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e0cc      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040b8:	4b68      	ldr	r3, [pc, #416]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 030f 	and.w	r3, r3, #15
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d90c      	bls.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040c6:	4b65      	ldr	r3, [pc, #404]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040c8:	683a      	ldr	r2, [r7, #0]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ce:	4b63      	ldr	r3, [pc, #396]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 030f 	and.w	r3, r3, #15
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	429a      	cmp	r2, r3
 80040da:	d001      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e0b8      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0302 	and.w	r3, r3, #2
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d020      	beq.n	800412e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d005      	beq.n	8004104 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040f8:	4b59      	ldr	r3, [pc, #356]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	4a58      	ldr	r2, [pc, #352]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80040fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004102:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0308 	and.w	r3, r3, #8
 800410c:	2b00      	cmp	r3, #0
 800410e:	d005      	beq.n	800411c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004110:	4b53      	ldr	r3, [pc, #332]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	4a52      	ldr	r2, [pc, #328]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800411a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800411e:	689b      	ldr	r3, [r3, #8]
 8004120:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	494d      	ldr	r1, [pc, #308]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	4313      	orrs	r3, r2
 800412c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 0301 	and.w	r3, r3, #1
 8004136:	2b00      	cmp	r3, #0
 8004138:	d044      	beq.n	80041c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	2b01      	cmp	r3, #1
 8004140:	d107      	bne.n	8004152 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004142:	4b47      	ldr	r3, [pc, #284]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d119      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e07f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	2b02      	cmp	r3, #2
 8004158:	d003      	beq.n	8004162 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800415e:	2b03      	cmp	r3, #3
 8004160:	d107      	bne.n	8004172 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004162:	4b3f      	ldr	r3, [pc, #252]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800416a:	2b00      	cmp	r3, #0
 800416c:	d109      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e06f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004172:	4b3b      	ldr	r3, [pc, #236]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 0302 	and.w	r3, r3, #2
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800417e:	2301      	movs	r3, #1
 8004180:	e067      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004182:	4b37      	ldr	r3, [pc, #220]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f023 0203 	bic.w	r2, r3, #3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4934      	ldr	r1, [pc, #208]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	4313      	orrs	r3, r2
 8004192:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004194:	f7fd fca8 	bl	8001ae8 <HAL_GetTick>
 8004198:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800419a:	e00a      	b.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800419c:	f7fd fca4 	bl	8001ae8 <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d901      	bls.n	80041b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041ae:	2303      	movs	r3, #3
 80041b0:	e04f      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041b2:	4b2b      	ldr	r3, [pc, #172]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	f003 020c 	and.w	r2, r3, #12
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	009b      	lsls	r3, r3, #2
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d1eb      	bne.n	800419c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f003 030f 	and.w	r3, r3, #15
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d20c      	bcs.n	80041ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d2:	4b22      	ldr	r3, [pc, #136]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041d4:	683a      	ldr	r2, [r7, #0]
 80041d6:	b2d2      	uxtb	r2, r2
 80041d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041da:	4b20      	ldr	r3, [pc, #128]	; (800425c <HAL_RCC_ClockConfig+0x1b8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	683a      	ldr	r2, [r7, #0]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d001      	beq.n	80041ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e032      	b.n	8004252 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f003 0304 	and.w	r3, r3, #4
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d008      	beq.n	800420a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	4916      	ldr	r1, [pc, #88]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b00      	cmp	r3, #0
 8004214:	d009      	beq.n	800422a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004216:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	691b      	ldr	r3, [r3, #16]
 8004222:	00db      	lsls	r3, r3, #3
 8004224:	490e      	ldr	r1, [pc, #56]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	4313      	orrs	r3, r2
 8004228:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800422a:	f000 f821 	bl	8004270 <HAL_RCC_GetSysClockFreq>
 800422e:	4602      	mov	r2, r0
 8004230:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_ClockConfig+0x1bc>)
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	091b      	lsrs	r3, r3, #4
 8004236:	f003 030f 	and.w	r3, r3, #15
 800423a:	490a      	ldr	r1, [pc, #40]	; (8004264 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	5ccb      	ldrb	r3, [r1, r3]
 800423e:	fa22 f303 	lsr.w	r3, r2, r3
 8004242:	4a09      	ldr	r2, [pc, #36]	; (8004268 <HAL_RCC_ClockConfig+0x1c4>)
 8004244:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004246:	4b09      	ldr	r3, [pc, #36]	; (800426c <HAL_RCC_ClockConfig+0x1c8>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4618      	mov	r0, r3
 800424c:	f7fd fc08 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 8004250:	2300      	movs	r3, #0
}
 8004252:	4618      	mov	r0, r3
 8004254:	3710      	adds	r7, #16
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	40023c00 	.word	0x40023c00
 8004260:	40023800 	.word	0x40023800
 8004264:	08006c00 	.word	0x08006c00
 8004268:	20000000 	.word	0x20000000
 800426c:	20000004 	.word	0x20000004

08004270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004270:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004274:	b084      	sub	sp, #16
 8004276:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004278:	2300      	movs	r3, #0
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	2300      	movs	r3, #0
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	2300      	movs	r3, #0
 8004282:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004284:	2300      	movs	r3, #0
 8004286:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004288:	4b67      	ldr	r3, [pc, #412]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	f003 030c 	and.w	r3, r3, #12
 8004290:	2b08      	cmp	r3, #8
 8004292:	d00d      	beq.n	80042b0 <HAL_RCC_GetSysClockFreq+0x40>
 8004294:	2b08      	cmp	r3, #8
 8004296:	f200 80bd 	bhi.w	8004414 <HAL_RCC_GetSysClockFreq+0x1a4>
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_RCC_GetSysClockFreq+0x34>
 800429e:	2b04      	cmp	r3, #4
 80042a0:	d003      	beq.n	80042aa <HAL_RCC_GetSysClockFreq+0x3a>
 80042a2:	e0b7      	b.n	8004414 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042a4:	4b61      	ldr	r3, [pc, #388]	; (800442c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042a6:	60bb      	str	r3, [r7, #8]
       break;
 80042a8:	e0b7      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042aa:	4b61      	ldr	r3, [pc, #388]	; (8004430 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80042ac:	60bb      	str	r3, [r7, #8]
      break;
 80042ae:	e0b4      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042b0:	4b5d      	ldr	r3, [pc, #372]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ba:	4b5b      	ldr	r3, [pc, #364]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04d      	beq.n	8004362 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042c6:	4b58      	ldr	r3, [pc, #352]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	099b      	lsrs	r3, r3, #6
 80042cc:	461a      	mov	r2, r3
 80042ce:	f04f 0300 	mov.w	r3, #0
 80042d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042d6:	f04f 0100 	mov.w	r1, #0
 80042da:	ea02 0800 	and.w	r8, r2, r0
 80042de:	ea03 0901 	and.w	r9, r3, r1
 80042e2:	4640      	mov	r0, r8
 80042e4:	4649      	mov	r1, r9
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	f04f 0300 	mov.w	r3, #0
 80042ee:	014b      	lsls	r3, r1, #5
 80042f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80042f4:	0142      	lsls	r2, r0, #5
 80042f6:	4610      	mov	r0, r2
 80042f8:	4619      	mov	r1, r3
 80042fa:	ebb0 0008 	subs.w	r0, r0, r8
 80042fe:	eb61 0109 	sbc.w	r1, r1, r9
 8004302:	f04f 0200 	mov.w	r2, #0
 8004306:	f04f 0300 	mov.w	r3, #0
 800430a:	018b      	lsls	r3, r1, #6
 800430c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004310:	0182      	lsls	r2, r0, #6
 8004312:	1a12      	subs	r2, r2, r0
 8004314:	eb63 0301 	sbc.w	r3, r3, r1
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	00d9      	lsls	r1, r3, #3
 8004322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004326:	00d0      	lsls	r0, r2, #3
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	eb12 0208 	adds.w	r2, r2, r8
 8004330:	eb43 0309 	adc.w	r3, r3, r9
 8004334:	f04f 0000 	mov.w	r0, #0
 8004338:	f04f 0100 	mov.w	r1, #0
 800433c:	0259      	lsls	r1, r3, #9
 800433e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004342:	0250      	lsls	r0, r2, #9
 8004344:	4602      	mov	r2, r0
 8004346:	460b      	mov	r3, r1
 8004348:	4610      	mov	r0, r2
 800434a:	4619      	mov	r1, r3
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	461a      	mov	r2, r3
 8004350:	f04f 0300 	mov.w	r3, #0
 8004354:	f7fb ff4a 	bl	80001ec <__aeabi_uldivmod>
 8004358:	4602      	mov	r2, r0
 800435a:	460b      	mov	r3, r1
 800435c:	4613      	mov	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]
 8004360:	e04a      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004362:	4b31      	ldr	r3, [pc, #196]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	099b      	lsrs	r3, r3, #6
 8004368:	461a      	mov	r2, r3
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004372:	f04f 0100 	mov.w	r1, #0
 8004376:	ea02 0400 	and.w	r4, r2, r0
 800437a:	ea03 0501 	and.w	r5, r3, r1
 800437e:	4620      	mov	r0, r4
 8004380:	4629      	mov	r1, r5
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	f04f 0300 	mov.w	r3, #0
 800438a:	014b      	lsls	r3, r1, #5
 800438c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004390:	0142      	lsls	r2, r0, #5
 8004392:	4610      	mov	r0, r2
 8004394:	4619      	mov	r1, r3
 8004396:	1b00      	subs	r0, r0, r4
 8004398:	eb61 0105 	sbc.w	r1, r1, r5
 800439c:	f04f 0200 	mov.w	r2, #0
 80043a0:	f04f 0300 	mov.w	r3, #0
 80043a4:	018b      	lsls	r3, r1, #6
 80043a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80043aa:	0182      	lsls	r2, r0, #6
 80043ac:	1a12      	subs	r2, r2, r0
 80043ae:	eb63 0301 	sbc.w	r3, r3, r1
 80043b2:	f04f 0000 	mov.w	r0, #0
 80043b6:	f04f 0100 	mov.w	r1, #0
 80043ba:	00d9      	lsls	r1, r3, #3
 80043bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80043c0:	00d0      	lsls	r0, r2, #3
 80043c2:	4602      	mov	r2, r0
 80043c4:	460b      	mov	r3, r1
 80043c6:	1912      	adds	r2, r2, r4
 80043c8:	eb45 0303 	adc.w	r3, r5, r3
 80043cc:	f04f 0000 	mov.w	r0, #0
 80043d0:	f04f 0100 	mov.w	r1, #0
 80043d4:	0299      	lsls	r1, r3, #10
 80043d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80043da:	0290      	lsls	r0, r2, #10
 80043dc:	4602      	mov	r2, r0
 80043de:	460b      	mov	r3, r1
 80043e0:	4610      	mov	r0, r2
 80043e2:	4619      	mov	r1, r3
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	461a      	mov	r2, r3
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	f7fb fefe 	bl	80001ec <__aeabi_uldivmod>
 80043f0:	4602      	mov	r2, r0
 80043f2:	460b      	mov	r3, r1
 80043f4:	4613      	mov	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043f8:	4b0b      	ldr	r3, [pc, #44]	; (8004428 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	0c1b      	lsrs	r3, r3, #16
 80043fe:	f003 0303 	and.w	r3, r3, #3
 8004402:	3301      	adds	r3, #1
 8004404:	005b      	lsls	r3, r3, #1
 8004406:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004408:	68fa      	ldr	r2, [r7, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	60bb      	str	r3, [r7, #8]
      break;
 8004412:	e002      	b.n	800441a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004414:	4b05      	ldr	r3, [pc, #20]	; (800442c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004416:	60bb      	str	r3, [r7, #8]
      break;
 8004418:	bf00      	nop
    }
  }
  return sysclockfreq;
 800441a:	68bb      	ldr	r3, [r7, #8]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3710      	adds	r7, #16
 8004420:	46bd      	mov	sp, r7
 8004422:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004426:	bf00      	nop
 8004428:	40023800 	.word	0x40023800
 800442c:	00f42400 	.word	0x00f42400
 8004430:	007a1200 	.word	0x007a1200

08004434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004434:	b480      	push	{r7}
 8004436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004438:	4b03      	ldr	r3, [pc, #12]	; (8004448 <HAL_RCC_GetHCLKFreq+0x14>)
 800443a:	681b      	ldr	r3, [r3, #0]
}
 800443c:	4618      	mov	r0, r3
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000000 	.word	0x20000000

0800444c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004450:	f7ff fff0 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 8004454:	4602      	mov	r2, r0
 8004456:	4b05      	ldr	r3, [pc, #20]	; (800446c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	0a9b      	lsrs	r3, r3, #10
 800445c:	f003 0307 	and.w	r3, r3, #7
 8004460:	4903      	ldr	r1, [pc, #12]	; (8004470 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004462:	5ccb      	ldrb	r3, [r1, r3]
 8004464:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004468:	4618      	mov	r0, r3
 800446a:	bd80      	pop	{r7, pc}
 800446c:	40023800 	.word	0x40023800
 8004470:	08006c10 	.word	0x08006c10

08004474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004478:	f7ff ffdc 	bl	8004434 <HAL_RCC_GetHCLKFreq>
 800447c:	4602      	mov	r2, r0
 800447e:	4b05      	ldr	r3, [pc, #20]	; (8004494 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	0b5b      	lsrs	r3, r3, #13
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	4903      	ldr	r1, [pc, #12]	; (8004498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800448a:	5ccb      	ldrb	r3, [r1, r3]
 800448c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004490:	4618      	mov	r0, r3
 8004492:	bd80      	pop	{r7, pc}
 8004494:	40023800 	.word	0x40023800
 8004498:	08006c10 	.word	0x08006c10

0800449c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e041      	b.n	8004532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fd f894 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fb4a 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3708      	adds	r7, #8
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}

0800453a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800453a:	b580      	push	{r7, lr}
 800453c:	b082      	sub	sp, #8
 800453e:	af00      	add	r7, sp, #0
 8004540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e041      	b.n	80045d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004552:	b2db      	uxtb	r3, r3
 8004554:	2b00      	cmp	r3, #0
 8004556:	d106      	bne.n	8004566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004560:	6878      	ldr	r0, [r7, #4]
 8004562:	f000 f839 	bl	80045d8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2202      	movs	r2, #2
 800456a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	3304      	adds	r3, #4
 8004576:	4619      	mov	r1, r3
 8004578:	4610      	mov	r0, r2
 800457a:	f000 fafb 	bl	8004b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2201      	movs	r2, #1
 8004582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2201      	movs	r2, #1
 800458a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	2201      	movs	r2, #1
 8004592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2201      	movs	r2, #1
 800459a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2201      	movs	r2, #1
 80045a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2201      	movs	r2, #1
 80045aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2201      	movs	r2, #1
 80045b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	2201      	movs	r2, #1
 80045ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2201      	movs	r2, #1
 80045c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2201      	movs	r2, #1
 80045ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr

080045ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	f003 0302 	and.w	r3, r3, #2
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d122      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	68db      	ldr	r3, [r3, #12]
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b02      	cmp	r3, #2
 800460e:	d11b      	bne.n	8004648 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f06f 0202 	mvn.w	r2, #2
 8004618:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	f003 0303 	and.w	r3, r3, #3
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 fa81 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004634:	e005      	b.n	8004642 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 fa73 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 fa84 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b04      	cmp	r3, #4
 8004654:	d122      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b04      	cmp	r3, #4
 8004662:	d11b      	bne.n	800469c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f06f 0204 	mvn.w	r2, #4
 800466c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2202      	movs	r2, #2
 8004672:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 fa57 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004688:	e005      	b.n	8004696 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 fa49 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa5a 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	f003 0308 	and.w	r3, r3, #8
 80046a6:	2b08      	cmp	r3, #8
 80046a8:	d122      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	68db      	ldr	r3, [r3, #12]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b08      	cmp	r3, #8
 80046b6:	d11b      	bne.n	80046f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0208 	mvn.w	r2, #8
 80046c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2204      	movs	r2, #4
 80046c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	f003 0303 	and.w	r3, r3, #3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d003      	beq.n	80046de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fa2d 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 80046dc:	e005      	b.n	80046ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046de:	6878      	ldr	r0, [r7, #4]
 80046e0:	f000 fa1f 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fa30 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2200      	movs	r2, #0
 80046ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	691b      	ldr	r3, [r3, #16]
 80046f6:	f003 0310 	and.w	r3, r3, #16
 80046fa:	2b10      	cmp	r3, #16
 80046fc:	d122      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	68db      	ldr	r3, [r3, #12]
 8004704:	f003 0310 	and.w	r3, r3, #16
 8004708:	2b10      	cmp	r3, #16
 800470a:	d11b      	bne.n	8004744 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f06f 0210 	mvn.w	r2, #16
 8004714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2208      	movs	r2, #8
 800471a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fa03 	bl	8004b36 <HAL_TIM_IC_CaptureCallback>
 8004730:	e005      	b.n	800473e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9f5 	bl	8004b22 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f000 fa06 	bl	8004b4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	2b01      	cmp	r3, #1
 8004750:	d10e      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	68db      	ldr	r3, [r3, #12]
 8004758:	f003 0301 	and.w	r3, r3, #1
 800475c:	2b01      	cmp	r3, #1
 800475e:	d107      	bne.n	8004770 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f06f 0201 	mvn.w	r2, #1
 8004768:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f9cf 	bl	8004b0e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	691b      	ldr	r3, [r3, #16]
 8004776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800477a:	2b80      	cmp	r3, #128	; 0x80
 800477c:	d10e      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004788:	2b80      	cmp	r3, #128	; 0x80
 800478a:	d107      	bne.n	800479c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004794:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f000 fd5c 	bl	8005254 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	691b      	ldr	r3, [r3, #16]
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b40      	cmp	r3, #64	; 0x40
 80047a8:	d10e      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	68db      	ldr	r3, [r3, #12]
 80047b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b4:	2b40      	cmp	r3, #64	; 0x40
 80047b6:	d107      	bne.n	80047c8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80047c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80047c2:	6878      	ldr	r0, [r7, #4]
 80047c4:	f000 f9cb 	bl	8004b5e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	f003 0320 	and.w	r3, r3, #32
 80047d2:	2b20      	cmp	r3, #32
 80047d4:	d10e      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f003 0320 	and.w	r3, r3, #32
 80047e0:	2b20      	cmp	r3, #32
 80047e2:	d107      	bne.n	80047f4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f06f 0220 	mvn.w	r2, #32
 80047ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80047ee:	6878      	ldr	r0, [r7, #4]
 80047f0:	f000 fd26 	bl	8005240 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80047f4:	bf00      	nop
 80047f6:	3708      	adds	r7, #8
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b086      	sub	sp, #24
 8004800:	af00      	add	r7, sp, #0
 8004802:	60f8      	str	r0, [r7, #12]
 8004804:	60b9      	str	r1, [r7, #8]
 8004806:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004808:	2300      	movs	r3, #0
 800480a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004812:	2b01      	cmp	r3, #1
 8004814:	d101      	bne.n	800481a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004816:	2302      	movs	r3, #2
 8004818:	e0ae      	b.n	8004978 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2201      	movs	r2, #1
 800481e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2b0c      	cmp	r3, #12
 8004826:	f200 809f 	bhi.w	8004968 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800482a:	a201      	add	r2, pc, #4	; (adr r2, 8004830 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800482c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004830:	08004865 	.word	0x08004865
 8004834:	08004969 	.word	0x08004969
 8004838:	08004969 	.word	0x08004969
 800483c:	08004969 	.word	0x08004969
 8004840:	080048a5 	.word	0x080048a5
 8004844:	08004969 	.word	0x08004969
 8004848:	08004969 	.word	0x08004969
 800484c:	08004969 	.word	0x08004969
 8004850:	080048e7 	.word	0x080048e7
 8004854:	08004969 	.word	0x08004969
 8004858:	08004969 	.word	0x08004969
 800485c:	08004969 	.word	0x08004969
 8004860:	08004927 	.word	0x08004927
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	4618      	mov	r0, r3
 800486c:	f000 fa22 	bl	8004cb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0208 	orr.w	r2, r2, #8
 800487e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	699a      	ldr	r2, [r3, #24]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f022 0204 	bic.w	r2, r2, #4
 800488e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	691a      	ldr	r2, [r3, #16]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	619a      	str	r2, [r3, #24]
      break;
 80048a2:	e064      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68b9      	ldr	r1, [r7, #8]
 80048aa:	4618      	mov	r0, r3
 80048ac:	f000 fa72 	bl	8004d94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	699a      	ldr	r2, [r3, #24]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	699a      	ldr	r2, [r3, #24]
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	6999      	ldr	r1, [r3, #24]
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	691b      	ldr	r3, [r3, #16]
 80048da:	021a      	lsls	r2, r3, #8
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	430a      	orrs	r2, r1
 80048e2:	619a      	str	r2, [r3, #24]
      break;
 80048e4:	e043      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68b9      	ldr	r1, [r7, #8]
 80048ec:	4618      	mov	r0, r3
 80048ee:	f000 fac7 	bl	8004e80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f042 0208 	orr.w	r2, r2, #8
 8004900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	69da      	ldr	r2, [r3, #28]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0204 	bic.w	r2, r2, #4
 8004910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	69d9      	ldr	r1, [r3, #28]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	691a      	ldr	r2, [r3, #16]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	430a      	orrs	r2, r1
 8004922:	61da      	str	r2, [r3, #28]
      break;
 8004924:	e023      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	68b9      	ldr	r1, [r7, #8]
 800492c:	4618      	mov	r0, r3
 800492e:	f000 fb1b 	bl	8004f68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	69da      	ldr	r2, [r3, #28]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	69d9      	ldr	r1, [r3, #28]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	021a      	lsls	r2, r3, #8
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	430a      	orrs	r2, r1
 8004964:	61da      	str	r2, [r3, #28]
      break;
 8004966:	e002      	b.n	800496e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	75fb      	strb	r3, [r7, #23]
      break;
 800496c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004976:	7dfb      	ldrb	r3, [r7, #23]
}
 8004978:	4618      	mov	r0, r3
 800497a:	3718      	adds	r7, #24
 800497c:	46bd      	mov	sp, r7
 800497e:	bd80      	pop	{r7, pc}

08004980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004980:	b580      	push	{r7, lr}
 8004982:	b084      	sub	sp, #16
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004994:	2b01      	cmp	r3, #1
 8004996:	d101      	bne.n	800499c <HAL_TIM_ConfigClockSource+0x1c>
 8004998:	2302      	movs	r3, #2
 800499a:	e0b4      	b.n	8004b06 <HAL_TIM_ConfigClockSource+0x186>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2202      	movs	r2, #2
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80049ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d03e      	beq.n	8004a54 <HAL_TIM_ConfigClockSource+0xd4>
 80049d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049da:	f200 8087 	bhi.w	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049e2:	f000 8086 	beq.w	8004af2 <HAL_TIM_ConfigClockSource+0x172>
 80049e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ea:	d87f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049ec:	2b70      	cmp	r3, #112	; 0x70
 80049ee:	d01a      	beq.n	8004a26 <HAL_TIM_ConfigClockSource+0xa6>
 80049f0:	2b70      	cmp	r3, #112	; 0x70
 80049f2:	d87b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049f4:	2b60      	cmp	r3, #96	; 0x60
 80049f6:	d050      	beq.n	8004a9a <HAL_TIM_ConfigClockSource+0x11a>
 80049f8:	2b60      	cmp	r3, #96	; 0x60
 80049fa:	d877      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 80049fc:	2b50      	cmp	r3, #80	; 0x50
 80049fe:	d03c      	beq.n	8004a7a <HAL_TIM_ConfigClockSource+0xfa>
 8004a00:	2b50      	cmp	r3, #80	; 0x50
 8004a02:	d873      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a04:	2b40      	cmp	r3, #64	; 0x40
 8004a06:	d058      	beq.n	8004aba <HAL_TIM_ConfigClockSource+0x13a>
 8004a08:	2b40      	cmp	r3, #64	; 0x40
 8004a0a:	d86f      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a0c:	2b30      	cmp	r3, #48	; 0x30
 8004a0e:	d064      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a10:	2b30      	cmp	r3, #48	; 0x30
 8004a12:	d86b      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a14:	2b20      	cmp	r3, #32
 8004a16:	d060      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d867      	bhi.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d05c      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d05a      	beq.n	8004ada <HAL_TIM_ConfigClockSource+0x15a>
 8004a24:	e062      	b.n	8004aec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6818      	ldr	r0, [r3, #0]
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	6899      	ldr	r1, [r3, #8]
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685a      	ldr	r2, [r3, #4]
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68db      	ldr	r3, [r3, #12]
 8004a36:	f000 fb67 	bl	8005108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	689b      	ldr	r3, [r3, #8]
 8004a40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004a48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	609a      	str	r2, [r3, #8]
      break;
 8004a52:	e04f      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6818      	ldr	r0, [r3, #0]
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	6899      	ldr	r1, [r3, #8]
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	685a      	ldr	r2, [r3, #4]
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f000 fb50 	bl	8005108 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	689a      	ldr	r2, [r3, #8]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a76:	609a      	str	r2, [r3, #8]
      break;
 8004a78:	e03c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	6818      	ldr	r0, [r3, #0]
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	6859      	ldr	r1, [r3, #4]
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	461a      	mov	r2, r3
 8004a88:	f000 fac4 	bl	8005014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2150      	movs	r1, #80	; 0x50
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb1d 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004a98:	e02c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	6859      	ldr	r1, [r3, #4]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	68db      	ldr	r3, [r3, #12]
 8004aa6:	461a      	mov	r2, r3
 8004aa8:	f000 fae3 	bl	8005072 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2160      	movs	r1, #96	; 0x60
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 fb0d 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004ab8:	e01c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6818      	ldr	r0, [r3, #0]
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	6859      	ldr	r1, [r3, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	f000 faa4 	bl	8005014 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2140      	movs	r1, #64	; 0x40
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fafd 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004ad8:	e00c      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4610      	mov	r0, r2
 8004ae6:	f000 faf4 	bl	80050d2 <TIM_ITRx_SetConfig>
      break;
 8004aea:	e003      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004aec:	2301      	movs	r3, #1
 8004aee:	73fb      	strb	r3, [r7, #15]
      break;
 8004af0:	e000      	b.n	8004af4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004af2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2201      	movs	r2, #1
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2200      	movs	r2, #0
 8004b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3710      	adds	r7, #16
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b0e:	b480      	push	{r7}
 8004b10:	b083      	sub	sp, #12
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr

08004b22 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004b22:	b480      	push	{r7}
 8004b24:	b083      	sub	sp, #12
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004b2a:	bf00      	nop
 8004b2c:	370c      	adds	r7, #12
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr

08004b36 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004b36:	b480      	push	{r7}
 8004b38:	b083      	sub	sp, #12
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004b3e:	bf00      	nop
 8004b40:	370c      	adds	r7, #12
 8004b42:	46bd      	mov	sp, r7
 8004b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b48:	4770      	bx	lr

08004b4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004b4a:	b480      	push	{r7}
 8004b4c:	b083      	sub	sp, #12
 8004b4e:	af00      	add	r7, sp, #0
 8004b50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b083      	sub	sp, #12
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004b66:	bf00      	nop
 8004b68:	370c      	adds	r7, #12
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b70:	4770      	bx	lr
	...

08004b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b085      	sub	sp, #20
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a40      	ldr	r2, [pc, #256]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d013      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b92:	d00f      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a3d      	ldr	r2, [pc, #244]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a3c      	ldr	r2, [pc, #240]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a3b      	ldr	r2, [pc, #236]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_Base_SetConfig+0x40>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a3a      	ldr	r2, [pc, #232]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d108      	bne.n	8004bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	4a2f      	ldr	r2, [pc, #188]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d02b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bd4:	d027      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a2c      	ldr	r2, [pc, #176]	; (8004c8c <TIM_Base_SetConfig+0x118>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d023      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a2b      	ldr	r2, [pc, #172]	; (8004c90 <TIM_Base_SetConfig+0x11c>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01f      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <TIM_Base_SetConfig+0x120>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d01b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d017      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <TIM_Base_SetConfig+0x128>)
 8004bfa:	4293      	cmp	r3, r2
 8004bfc:	d013      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	4a27      	ldr	r2, [pc, #156]	; (8004ca0 <TIM_Base_SetConfig+0x12c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d00f      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	4a26      	ldr	r2, [pc, #152]	; (8004ca4 <TIM_Base_SetConfig+0x130>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d00b      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	4a25      	ldr	r2, [pc, #148]	; (8004ca8 <TIM_Base_SetConfig+0x134>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d007      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <TIM_Base_SetConfig+0x138>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d003      	beq.n	8004c26 <TIM_Base_SetConfig+0xb2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	4a23      	ldr	r2, [pc, #140]	; (8004cb0 <TIM_Base_SetConfig+0x13c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d108      	bne.n	8004c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004c54:	683b      	ldr	r3, [r7, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a0a      	ldr	r2, [pc, #40]	; (8004c88 <TIM_Base_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d003      	beq.n	8004c6c <TIM_Base_SetConfig+0xf8>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	4a0c      	ldr	r2, [pc, #48]	; (8004c98 <TIM_Base_SetConfig+0x124>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d103      	bne.n	8004c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	691a      	ldr	r2, [r3, #16]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	615a      	str	r2, [r3, #20]
}
 8004c7a:	bf00      	nop
 8004c7c:	3714      	adds	r7, #20
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
 8004c86:	bf00      	nop
 8004c88:	40010000 	.word	0x40010000
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40000800 	.word	0x40000800
 8004c94:	40000c00 	.word	0x40000c00
 8004c98:	40010400 	.word	0x40010400
 8004c9c:	40014000 	.word	0x40014000
 8004ca0:	40014400 	.word	0x40014400
 8004ca4:	40014800 	.word	0x40014800
 8004ca8:	40001800 	.word	0x40001800
 8004cac:	40001c00 	.word	0x40001c00
 8004cb0:	40002000 	.word	0x40002000

08004cb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	6a1b      	ldr	r3, [r3, #32]
 8004cc2:	f023 0201 	bic.w	r2, r3, #1
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a1b      	ldr	r3, [r3, #32]
 8004cce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ce2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0303 	bic.w	r3, r3, #3
 8004cea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	f023 0302 	bic.w	r3, r3, #2
 8004cfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	697a      	ldr	r2, [r7, #20]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a20      	ldr	r2, [pc, #128]	; (8004d8c <TIM_OC1_SetConfig+0xd8>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d003      	beq.n	8004d18 <TIM_OC1_SetConfig+0x64>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a1f      	ldr	r2, [pc, #124]	; (8004d90 <TIM_OC1_SetConfig+0xdc>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d10c      	bne.n	8004d32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	f023 0308 	bic.w	r3, r3, #8
 8004d1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f023 0304 	bic.w	r3, r3, #4
 8004d30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <TIM_OC1_SetConfig+0xd8>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_OC1_SetConfig+0x8e>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a14      	ldr	r2, [pc, #80]	; (8004d90 <TIM_OC1_SetConfig+0xdc>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d111      	bne.n	8004d66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	695b      	ldr	r3, [r3, #20]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	4313      	orrs	r3, r2
 8004d5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	699b      	ldr	r3, [r3, #24]
 8004d60:	693a      	ldr	r2, [r7, #16]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	621a      	str	r2, [r3, #32]
}
 8004d80:	bf00      	nop
 8004d82:	371c      	adds	r7, #28
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr
 8004d8c:	40010000 	.word	0x40010000
 8004d90:	40010400 	.word	0x40010400

08004d94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f023 0210 	bic.w	r2, r3, #16
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a1b      	ldr	r3, [r3, #32]
 8004dae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	685b      	ldr	r3, [r3, #4]
 8004db4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	699b      	ldr	r3, [r3, #24]
 8004dba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	f023 0320 	bic.w	r3, r3, #32
 8004dde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	011b      	lsls	r3, r3, #4
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a22      	ldr	r2, [pc, #136]	; (8004e78 <TIM_OC2_SetConfig+0xe4>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d003      	beq.n	8004dfc <TIM_OC2_SetConfig+0x68>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <TIM_OC2_SetConfig+0xe8>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d10d      	bne.n	8004e18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	68db      	ldr	r3, [r3, #12]
 8004e08:	011b      	lsls	r3, r3, #4
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a17      	ldr	r2, [pc, #92]	; (8004e78 <TIM_OC2_SetConfig+0xe4>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d003      	beq.n	8004e28 <TIM_OC2_SetConfig+0x94>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a16      	ldr	r2, [pc, #88]	; (8004e7c <TIM_OC2_SetConfig+0xe8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d113      	bne.n	8004e50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004e28:	693b      	ldr	r3, [r7, #16]
 8004e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004e2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004e36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	695b      	ldr	r3, [r3, #20]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	693a      	ldr	r2, [r7, #16]
 8004e40:	4313      	orrs	r3, r2
 8004e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	693a      	ldr	r2, [r7, #16]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	693a      	ldr	r2, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68fa      	ldr	r2, [r7, #12]
 8004e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	697a      	ldr	r2, [r7, #20]
 8004e68:	621a      	str	r2, [r3, #32]
}
 8004e6a:	bf00      	nop
 8004e6c:	371c      	adds	r7, #28
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000
 8004e7c:	40010400 	.word	0x40010400

08004e80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a1b      	ldr	r3, [r3, #32]
 8004e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	685b      	ldr	r3, [r3, #4]
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	69db      	ldr	r3, [r3, #28]
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f023 0303 	bic.w	r3, r3, #3
 8004eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	021b      	lsls	r3, r3, #8
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a21      	ldr	r2, [pc, #132]	; (8004f60 <TIM_OC3_SetConfig+0xe0>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d003      	beq.n	8004ee6 <TIM_OC3_SetConfig+0x66>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a20      	ldr	r2, [pc, #128]	; (8004f64 <TIM_OC3_SetConfig+0xe4>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10d      	bne.n	8004f02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ee6:	697b      	ldr	r3, [r7, #20]
 8004ee8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	68db      	ldr	r3, [r3, #12]
 8004ef2:	021b      	lsls	r3, r3, #8
 8004ef4:	697a      	ldr	r2, [r7, #20]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a16      	ldr	r2, [pc, #88]	; (8004f60 <TIM_OC3_SetConfig+0xe0>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d003      	beq.n	8004f12 <TIM_OC3_SetConfig+0x92>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a15      	ldr	r2, [pc, #84]	; (8004f64 <TIM_OC3_SetConfig+0xe4>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d113      	bne.n	8004f3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004f18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004f20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	695b      	ldr	r3, [r3, #20]
 8004f26:	011b      	lsls	r3, r3, #4
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	699b      	ldr	r3, [r3, #24]
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	693a      	ldr	r2, [r7, #16]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	685a      	ldr	r2, [r3, #4]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	697a      	ldr	r2, [r7, #20]
 8004f52:	621a      	str	r2, [r3, #32]
}
 8004f54:	bf00      	nop
 8004f56:	371c      	adds	r7, #28
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr
 8004f60:	40010000 	.word	0x40010000
 8004f64:	40010400 	.word	0x40010400

08004f68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b087      	sub	sp, #28
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6a1b      	ldr	r3, [r3, #32]
 8004f82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	69db      	ldr	r3, [r3, #28]
 8004f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	021b      	lsls	r3, r3, #8
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	4313      	orrs	r3, r2
 8004faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	689b      	ldr	r3, [r3, #8]
 8004fb8:	031b      	lsls	r3, r3, #12
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a12      	ldr	r2, [pc, #72]	; (800500c <TIM_OC4_SetConfig+0xa4>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d003      	beq.n	8004fd0 <TIM_OC4_SetConfig+0x68>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a11      	ldr	r2, [pc, #68]	; (8005010 <TIM_OC4_SetConfig+0xa8>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d109      	bne.n	8004fe4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fd6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	695b      	ldr	r3, [r3, #20]
 8004fdc:	019b      	lsls	r3, r3, #6
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685a      	ldr	r2, [r3, #4]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	621a      	str	r2, [r3, #32]
}
 8004ffe:	bf00      	nop
 8005000:	371c      	adds	r7, #28
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	40010000 	.word	0x40010000
 8005010:	40010400 	.word	0x40010400

08005014 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	6a1b      	ldr	r3, [r3, #32]
 800502a:	f023 0201 	bic.w	r2, r3, #1
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	699b      	ldr	r3, [r3, #24]
 8005036:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800503e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	f023 030a 	bic.w	r3, r3, #10
 8005050:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005052:	697a      	ldr	r2, [r7, #20]
 8005054:	68bb      	ldr	r3, [r7, #8]
 8005056:	4313      	orrs	r3, r2
 8005058:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	621a      	str	r2, [r3, #32]
}
 8005066:	bf00      	nop
 8005068:	371c      	adds	r7, #28
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005072:	b480      	push	{r7}
 8005074:	b087      	sub	sp, #28
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0210 	bic.w	r2, r3, #16
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800509c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	031b      	lsls	r3, r3, #12
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80050ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80050b0:	68bb      	ldr	r3, [r7, #8]
 80050b2:	011b      	lsls	r3, r3, #4
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	693a      	ldr	r2, [r7, #16]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b085      	sub	sp, #20
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	6078      	str	r0, [r7, #4]
 80050da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050ea:	683a      	ldr	r2, [r7, #0]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	f043 0307 	orr.w	r3, r3, #7
 80050f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	609a      	str	r2, [r3, #8]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005108:	b480      	push	{r7}
 800510a:	b087      	sub	sp, #28
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	689b      	ldr	r3, [r3, #8]
 800511a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005122:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	021a      	lsls	r2, r3, #8
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	431a      	orrs	r2, r3
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	4313      	orrs	r3, r2
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	697a      	ldr	r2, [r7, #20]
 800513a:	609a      	str	r2, [r3, #8]
}
 800513c:	bf00      	nop
 800513e:	371c      	adds	r7, #28
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005148:	b480      	push	{r7}
 800514a:	b085      	sub	sp, #20
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005158:	2b01      	cmp	r3, #1
 800515a:	d101      	bne.n	8005160 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800515c:	2302      	movs	r3, #2
 800515e:	e05a      	b.n	8005216 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005186:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68fa      	ldr	r2, [r7, #12]
 800518e:	4313      	orrs	r3, r2
 8005190:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a21      	ldr	r2, [pc, #132]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d022      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ac:	d01d      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1d      	ldr	r2, [pc, #116]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d018      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1b      	ldr	r2, [pc, #108]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d013      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a1a      	ldr	r2, [pc, #104]	; (8005230 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d00e      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a18      	ldr	r2, [pc, #96]	; (8005234 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d009      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a17      	ldr	r2, [pc, #92]	; (8005238 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d004      	beq.n	80051ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a15      	ldr	r2, [pc, #84]	; (800523c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d10c      	bne.n	8005204 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3714      	adds	r7, #20
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	40010000 	.word	0x40010000
 8005228:	40000400 	.word	0x40000400
 800522c:	40000800 	.word	0x40000800
 8005230:	40000c00 	.word	0x40000c00
 8005234:	40010400 	.word	0x40010400
 8005238:	40014000 	.word	0x40014000
 800523c:	40001800 	.word	0x40001800

08005240 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005240:	b480      	push	{r7}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005248:	bf00      	nop
 800524a:	370c      	adds	r7, #12
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005254:	b480      	push	{r7}
 8005256:	b083      	sub	sp, #12
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800525c:	bf00      	nop
 800525e:	370c      	adds	r7, #12
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr

08005268 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e03f      	b.n	80052fa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005280:	b2db      	uxtb	r3, r3
 8005282:	2b00      	cmp	r3, #0
 8005284:	d106      	bne.n	8005294 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f7fc fb4a 	bl	8001928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2224      	movs	r2, #36	; 0x24
 8005298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80052aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 fd7b 	bl	8005da8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	691a      	ldr	r2, [r3, #16]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	695a      	ldr	r2, [r3, #20]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2220      	movs	r2, #32
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2220      	movs	r2, #32
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b08a      	sub	sp, #40	; 0x28
 8005306:	af02      	add	r7, sp, #8
 8005308:	60f8      	str	r0, [r7, #12]
 800530a:	60b9      	str	r1, [r7, #8]
 800530c:	603b      	str	r3, [r7, #0]
 800530e:	4613      	mov	r3, r2
 8005310:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800531c:	b2db      	uxtb	r3, r3
 800531e:	2b20      	cmp	r3, #32
 8005320:	d17c      	bne.n	800541c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_UART_Transmit+0x2c>
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d101      	bne.n	8005332 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	e075      	b.n	800541e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005338:	2b01      	cmp	r3, #1
 800533a:	d101      	bne.n	8005340 <HAL_UART_Transmit+0x3e>
 800533c:	2302      	movs	r3, #2
 800533e:	e06e      	b.n	800541e <HAL_UART_Transmit+0x11c>
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2201      	movs	r2, #1
 8005344:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	2200      	movs	r2, #0
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2221      	movs	r2, #33	; 0x21
 8005352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005356:	f7fc fbc7 	bl	8001ae8 <HAL_GetTick>
 800535a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	88fa      	ldrh	r2, [r7, #6]
 8005360:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	88fa      	ldrh	r2, [r7, #6]
 8005366:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005370:	d108      	bne.n	8005384 <HAL_UART_Transmit+0x82>
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	691b      	ldr	r3, [r3, #16]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d104      	bne.n	8005384 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800537a:	2300      	movs	r3, #0
 800537c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	e003      	b.n	800538c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005388:	2300      	movs	r3, #0
 800538a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2200      	movs	r2, #0
 8005390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005394:	e02a      	b.n	80053ec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	9300      	str	r3, [sp, #0]
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	2200      	movs	r2, #0
 800539e:	2180      	movs	r1, #128	; 0x80
 80053a0:	68f8      	ldr	r0, [r7, #12]
 80053a2:	f000 faf9 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 80053a6:	4603      	mov	r3, r0
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d001      	beq.n	80053b0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e036      	b.n	800541e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10b      	bne.n	80053ce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053b6:	69bb      	ldr	r3, [r7, #24]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80053c6:	69bb      	ldr	r3, [r7, #24]
 80053c8:	3302      	adds	r3, #2
 80053ca:	61bb      	str	r3, [r7, #24]
 80053cc:	e007      	b.n	80053de <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80053ce:	69fb      	ldr	r3, [r7, #28]
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	3301      	adds	r3, #1
 80053dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	3b01      	subs	r3, #1
 80053e6:	b29a      	uxth	r2, r3
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d1cf      	bne.n	8005396 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	9300      	str	r3, [sp, #0]
 80053fa:	697b      	ldr	r3, [r7, #20]
 80053fc:	2200      	movs	r2, #0
 80053fe:	2140      	movs	r1, #64	; 0x40
 8005400:	68f8      	ldr	r0, [r7, #12]
 8005402:	f000 fac9 	bl	8005998 <UART_WaitOnFlagUntilTimeout>
 8005406:	4603      	mov	r3, r0
 8005408:	2b00      	cmp	r3, #0
 800540a:	d001      	beq.n	8005410 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800540c:	2303      	movs	r3, #3
 800540e:	e006      	b.n	800541e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2220      	movs	r2, #32
 8005414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3720      	adds	r7, #32
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
	...

08005428 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b0ba      	sub	sp, #232	; 0xe8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	68db      	ldr	r3, [r3, #12]
 8005440:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005454:	2300      	movs	r3, #0
 8005456:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10f      	bne.n	800548e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800546e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005472:	f003 0320 	and.w	r3, r3, #32
 8005476:	2b00      	cmp	r3, #0
 8005478:	d009      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
 800547a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800547e:	f003 0320 	and.w	r3, r3, #32
 8005482:	2b00      	cmp	r3, #0
 8005484:	d003      	beq.n	800548e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f000 fbd3 	bl	8005c32 <UART_Receive_IT>
      return;
 800548c:	e256      	b.n	800593c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800548e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005492:	2b00      	cmp	r3, #0
 8005494:	f000 80de 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f000 80d1 	beq.w	8005654 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054b6:	f003 0301 	and.w	r3, r3, #1
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00b      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
 80054be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d005      	beq.n	80054d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ce:	f043 0201 	orr.w	r2, r3, #1
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00b      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
 80054e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054e6:	f003 0301 	and.w	r3, r3, #1
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	f043 0202 	orr.w	r2, r3, #2
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d00b      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
 8005506:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d005      	beq.n	800551e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	f043 0204 	orr.w	r2, r3, #4
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800551e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d011      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
 800552a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	2b00      	cmp	r3, #0
 8005534:	d105      	bne.n	8005542 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005536:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553a:	f003 0301 	and.w	r3, r3, #1
 800553e:	2b00      	cmp	r3, #0
 8005540:	d005      	beq.n	800554e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f043 0208 	orr.w	r2, r3, #8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 81ed 	beq.w	8005932 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800555c:	f003 0320 	and.w	r3, r3, #32
 8005560:	2b00      	cmp	r3, #0
 8005562:	d008      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005568:	f003 0320 	and.w	r3, r3, #32
 800556c:	2b00      	cmp	r3, #0
 800556e:	d002      	beq.n	8005576 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005570:	6878      	ldr	r0, [r7, #4]
 8005572:	f000 fb5e 	bl	8005c32 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	695b      	ldr	r3, [r3, #20]
 800557c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005580:	2b40      	cmp	r3, #64	; 0x40
 8005582:	bf0c      	ite	eq
 8005584:	2301      	moveq	r3, #1
 8005586:	2300      	movne	r3, #0
 8005588:	b2db      	uxtb	r3, r3
 800558a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_UART_IRQHandler+0x17a>
 800559a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d04f      	beq.n	8005642 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f000 fa66 	bl	8005a74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	695b      	ldr	r3, [r3, #20]
 80055ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b2:	2b40      	cmp	r3, #64	; 0x40
 80055b4:	d141      	bne.n	800563a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c4:	e853 3f00 	ldrex	r3, [r3]
 80055c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	3314      	adds	r3, #20
 80055de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055f2:	e841 2300 	strex	r3, r2, [r1]
 80055f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d1d9      	bne.n	80055b6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005606:	2b00      	cmp	r3, #0
 8005608:	d013      	beq.n	8005632 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800560e:	4a7d      	ldr	r2, [pc, #500]	; (8005804 <HAL_UART_IRQHandler+0x3dc>)
 8005610:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005616:	4618      	mov	r0, r3
 8005618:	f7fd f940 	bl	800289c <HAL_DMA_Abort_IT>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d016      	beq.n	8005650 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005626:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800562c:	4610      	mov	r0, r2
 800562e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005630:	e00e      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005632:	6878      	ldr	r0, [r7, #4]
 8005634:	f000 f99a 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005638:	e00a      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f000 f996 	bl	800596c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e006      	b.n	8005650 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f992 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800564e:	e170      	b.n	8005932 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	bf00      	nop
    return;
 8005652:	e16e      	b.n	8005932 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 814a 	bne.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800565e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005662:	f003 0310 	and.w	r3, r3, #16
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 8143 	beq.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800566c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005670:	f003 0310 	and.w	r3, r3, #16
 8005674:	2b00      	cmp	r3, #0
 8005676:	f000 813c 	beq.w	80058f2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567a:	2300      	movs	r3, #0
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	60bb      	str	r3, [r7, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	60bb      	str	r3, [r7, #8]
 800568e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	695b      	ldr	r3, [r3, #20]
 8005696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569a:	2b40      	cmp	r3, #64	; 0x40
 800569c:	f040 80b4 	bne.w	8005808 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	685b      	ldr	r3, [r3, #4]
 80056a8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ac:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 8140 	beq.w	8005936 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056be:	429a      	cmp	r2, r3
 80056c0:	f080 8139 	bcs.w	8005936 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ca:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	69db      	ldr	r3, [r3, #28]
 80056d2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d6:	f000 8088 	beq.w	80057ea <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	330c      	adds	r3, #12
 80056e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056e8:	e853 3f00 	ldrex	r3, [r3]
 80056ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056f0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005706:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800570a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800570e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005712:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005716:	e841 2300 	strex	r3, r2, [r1]
 800571a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800571e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005722:	2b00      	cmp	r3, #0
 8005724:	d1d9      	bne.n	80056da <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	3314      	adds	r3, #20
 800572c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800572e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005730:	e853 3f00 	ldrex	r3, [r3]
 8005734:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005736:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005738:	f023 0301 	bic.w	r3, r3, #1
 800573c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800574a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800574e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005750:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005756:	e841 2300 	strex	r3, r2, [r1]
 800575a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800575c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800575e:	2b00      	cmp	r3, #0
 8005760:	d1e1      	bne.n	8005726 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3314      	adds	r3, #20
 8005768:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576c:	e853 3f00 	ldrex	r3, [r3]
 8005770:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005772:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005778:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3314      	adds	r3, #20
 8005782:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005786:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005788:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800578c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800578e:	e841 2300 	strex	r3, r2, [r1]
 8005792:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005794:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005796:	2b00      	cmp	r3, #0
 8005798:	d1e3      	bne.n	8005762 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2220      	movs	r2, #32
 800579e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	330c      	adds	r3, #12
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b2:	e853 3f00 	ldrex	r3, [r3]
 80057b6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057ba:	f023 0310 	bic.w	r3, r3, #16
 80057be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	330c      	adds	r3, #12
 80057c8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057cc:	65ba      	str	r2, [r7, #88]	; 0x58
 80057ce:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d4:	e841 2300 	strex	r3, r2, [r1]
 80057d8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d1e3      	bne.n	80057a8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fc ffe9 	bl	80027bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057f2:	b29b      	uxth	r3, r3
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	4619      	mov	r1, r3
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8c0 	bl	8005980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005800:	e099      	b.n	8005936 <HAL_UART_IRQHandler+0x50e>
 8005802:	bf00      	nop
 8005804:	08005b3b 	.word	0x08005b3b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005810:	b29b      	uxth	r3, r3
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800581c:	b29b      	uxth	r3, r3
 800581e:	2b00      	cmp	r3, #0
 8005820:	f000 808b 	beq.w	800593a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005824:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005828:	2b00      	cmp	r3, #0
 800582a:	f000 8086 	beq.w	800593a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	330c      	adds	r3, #12
 8005834:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005836:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005838:	e853 3f00 	ldrex	r3, [r3]
 800583c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800583e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005844:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	330c      	adds	r3, #12
 800584e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005852:	647a      	str	r2, [r7, #68]	; 0x44
 8005854:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005858:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800585a:	e841 2300 	strex	r3, r2, [r1]
 800585e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005860:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1e3      	bne.n	800582e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	3314      	adds	r3, #20
 800586c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800586e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005870:	e853 3f00 	ldrex	r3, [r3]
 8005874:	623b      	str	r3, [r7, #32]
   return(result);
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	f023 0301 	bic.w	r3, r3, #1
 800587c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	3314      	adds	r3, #20
 8005886:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800588a:	633a      	str	r2, [r7, #48]	; 0x30
 800588c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589a:	2b00      	cmp	r3, #0
 800589c:	d1e3      	bne.n	8005866 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2220      	movs	r2, #32
 80058a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2200      	movs	r2, #0
 80058aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	330c      	adds	r3, #12
 80058b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	e853 3f00 	ldrex	r3, [r3]
 80058ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f023 0310 	bic.w	r3, r3, #16
 80058c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	330c      	adds	r3, #12
 80058cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058d0:	61fa      	str	r2, [r7, #28]
 80058d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	e841 2300 	strex	r3, r2, [r1]
 80058dc:	617b      	str	r3, [r7, #20]
   return(result);
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d1e3      	bne.n	80058ac <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058e8:	4619      	mov	r1, r3
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f000 f848 	bl	8005980 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058f0:	e023      	b.n	800593a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80058f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d009      	beq.n	8005912 <HAL_UART_IRQHandler+0x4ea>
 80058fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f929 	bl	8005b62 <UART_Transmit_IT>
    return;
 8005910:	e014      	b.n	800593c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <HAL_UART_IRQHandler+0x514>
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f000 f969 	bl	8005c02 <UART_EndTransmit_IT>
    return;
 8005930:	e004      	b.n	800593c <HAL_UART_IRQHandler+0x514>
    return;
 8005932:	bf00      	nop
 8005934:	e002      	b.n	800593c <HAL_UART_IRQHandler+0x514>
      return;
 8005936:	bf00      	nop
 8005938:	e000      	b.n	800593c <HAL_UART_IRQHandler+0x514>
      return;
 800593a:	bf00      	nop
  }
}
 800593c:	37e8      	adds	r7, #232	; 0xe8
 800593e:	46bd      	mov	sp, r7
 8005940:	bd80      	pop	{r7, pc}
 8005942:	bf00      	nop

08005944 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800596c:	b480      	push	{r7}
 800596e:	b083      	sub	sp, #12
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005974:	bf00      	nop
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr

08005980 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
 8005988:	460b      	mov	r3, r1
 800598a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800598c:	bf00      	nop
 800598e:	370c      	adds	r7, #12
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b090      	sub	sp, #64	; 0x40
 800599c:	af00      	add	r7, sp, #0
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	60b9      	str	r1, [r7, #8]
 80059a2:	603b      	str	r3, [r7, #0]
 80059a4:	4613      	mov	r3, r2
 80059a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059a8:	e050      	b.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059aa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b0:	d04c      	beq.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80059b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d007      	beq.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
 80059b8:	f7fc f896 	bl	8001ae8 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d241      	bcs.n	8005a4c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	330c      	adds	r3, #12
 80059ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	e853 3f00 	ldrex	r3, [r3]
 80059d6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80059d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059da:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	330c      	adds	r3, #12
 80059e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059e8:	637a      	str	r2, [r7, #52]	; 0x34
 80059ea:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80059ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059f0:	e841 2300 	strex	r3, r2, [r1]
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80059f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d1e5      	bne.n	80059c8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	3314      	adds	r3, #20
 8005a02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	613b      	str	r3, [r7, #16]
   return(result);
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	f023 0301 	bic.w	r3, r3, #1
 8005a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a1c:	623a      	str	r2, [r7, #32]
 8005a1e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a20:	69f9      	ldr	r1, [r7, #28]
 8005a22:	6a3a      	ldr	r2, [r7, #32]
 8005a24:	e841 2300 	strex	r3, r2, [r1]
 8005a28:	61bb      	str	r3, [r7, #24]
   return(result);
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d1e5      	bne.n	80059fc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	2220      	movs	r2, #32
 8005a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e00f      	b.n	8005a6c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	4013      	ands	r3, r2
 8005a56:	68ba      	ldr	r2, [r7, #8]
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	bf0c      	ite	eq
 8005a5c:	2301      	moveq	r3, #1
 8005a5e:	2300      	movne	r3, #0
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	461a      	mov	r2, r3
 8005a64:	79fb      	ldrb	r3, [r7, #7]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d09f      	beq.n	80059aa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3740      	adds	r7, #64	; 0x40
 8005a70:	46bd      	mov	sp, r7
 8005a72:	bd80      	pop	{r7, pc}

08005a74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b095      	sub	sp, #84	; 0x54
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	330c      	adds	r3, #12
 8005a9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005aa2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005aa4:	e841 2300 	strex	r3, r2, [r1]
 8005aa8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d1e5      	bne.n	8005a7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	e853 3f00 	ldrex	r3, [r3]
 8005abe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	f023 0301 	bic.w	r3, r3, #1
 8005ac6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	3314      	adds	r3, #20
 8005ace:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ad2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ad6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ad8:	e841 2300 	strex	r3, r2, [r1]
 8005adc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d1e5      	bne.n	8005ab0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae8:	2b01      	cmp	r3, #1
 8005aea:	d119      	bne.n	8005b20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	e853 3f00 	ldrex	r3, [r3]
 8005afa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	f023 0310 	bic.w	r3, r3, #16
 8005b02:	647b      	str	r3, [r7, #68]	; 0x44
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	330c      	adds	r3, #12
 8005b0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b0c:	61ba      	str	r2, [r7, #24]
 8005b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b10:	6979      	ldr	r1, [r7, #20]
 8005b12:	69ba      	ldr	r2, [r7, #24]
 8005b14:	e841 2300 	strex	r3, r2, [r1]
 8005b18:	613b      	str	r3, [r7, #16]
   return(result);
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d1e5      	bne.n	8005aec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b2e:	bf00      	nop
 8005b30:	3754      	adds	r7, #84	; 0x54
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f7ff ff09 	bl	800596c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b21      	cmp	r3, #33	; 0x21
 8005b74:	d13e      	bne.n	8005bf4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b7e:	d114      	bne.n	8005baa <UART_Transmit_IT+0x48>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	691b      	ldr	r3, [r3, #16]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d110      	bne.n	8005baa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a1b      	ldr	r3, [r3, #32]
 8005b8c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	881b      	ldrh	r3, [r3, #0]
 8005b92:	461a      	mov	r2, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b9c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	1c9a      	adds	r2, r3, #2
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	621a      	str	r2, [r3, #32]
 8005ba8:	e008      	b.n	8005bbc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	1c59      	adds	r1, r3, #1
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6211      	str	r1, [r2, #32]
 8005bb4:	781a      	ldrb	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005bc0:	b29b      	uxth	r3, r3
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	687a      	ldr	r2, [r7, #4]
 8005bc8:	4619      	mov	r1, r3
 8005bca:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d10f      	bne.n	8005bf0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	68da      	ldr	r2, [r3, #12]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bde:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	e000      	b.n	8005bf6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bf4:	2302      	movs	r3, #2
  }
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	3714      	adds	r7, #20
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b082      	sub	sp, #8
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68da      	ldr	r2, [r3, #12]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c18:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c22:	6878      	ldr	r0, [r7, #4]
 8005c24:	f7ff fe8e 	bl	8005944 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3708      	adds	r7, #8
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c32:	b580      	push	{r7, lr}
 8005c34:	b08c      	sub	sp, #48	; 0x30
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	2b22      	cmp	r3, #34	; 0x22
 8005c44:	f040 80ab 	bne.w	8005d9e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c50:	d117      	bne.n	8005c82 <UART_Receive_IT+0x50>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	691b      	ldr	r3, [r3, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d113      	bne.n	8005c82 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c62:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c74:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c7a:	1c9a      	adds	r2, r3, #2
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c80:	e026      	b.n	8005cd0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c88:	2300      	movs	r3, #0
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c94:	d007      	beq.n	8005ca6 <UART_Receive_IT+0x74>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d10a      	bne.n	8005cb4 <UART_Receive_IT+0x82>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	691b      	ldr	r3, [r3, #16]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d106      	bne.n	8005cb4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
 8005cb2:	e008      	b.n	8005cc6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cca:	1c5a      	adds	r2, r3, #1
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cd4:	b29b      	uxth	r3, r3
 8005cd6:	3b01      	subs	r3, #1
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	4619      	mov	r1, r3
 8005cde:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d15a      	bne.n	8005d9a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0220 	bic.w	r2, r2, #32
 8005cf2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	695a      	ldr	r2, [r3, #20]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f022 0201 	bic.w	r2, r2, #1
 8005d12:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2220      	movs	r2, #32
 8005d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d135      	bne.n	8005d90 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	2200      	movs	r2, #0
 8005d28:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	330c      	adds	r3, #12
 8005d30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	613b      	str	r3, [r7, #16]
   return(result);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	f023 0310 	bic.w	r3, r3, #16
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4a:	623a      	str	r2, [r7, #32]
 8005d4c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	69f9      	ldr	r1, [r7, #28]
 8005d50:	6a3a      	ldr	r2, [r7, #32]
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d58:	69bb      	ldr	r3, [r7, #24]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e5      	bne.n	8005d2a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 0310 	and.w	r3, r3, #16
 8005d68:	2b10      	cmp	r3, #16
 8005d6a:	d10a      	bne.n	8005d82 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	60fb      	str	r3, [r7, #12]
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]
 8005d80:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d86:	4619      	mov	r1, r3
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f7ff fdf9 	bl	8005980 <HAL_UARTEx_RxEventCallback>
 8005d8e:	e002      	b.n	8005d96 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fde1 	bl	8005958 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d96:	2300      	movs	r3, #0
 8005d98:	e002      	b.n	8005da0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3730      	adds	r7, #48	; 0x30
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}

08005da8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005da8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dac:	b09f      	sub	sp, #124	; 0x7c
 8005dae:	af00      	add	r7, sp, #0
 8005db0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dbe:	68d9      	ldr	r1, [r3, #12]
 8005dc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	ea40 0301 	orr.w	r3, r0, r1
 8005dc8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dcc:	689a      	ldr	r2, [r3, #8]
 8005dce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dd6:	695b      	ldr	r3, [r3, #20]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68db      	ldr	r3, [r3, #12]
 8005de8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005dec:	f021 010c 	bic.w	r1, r1, #12
 8005df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005df6:	430b      	orrs	r3, r1
 8005df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005dfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005e04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e06:	6999      	ldr	r1, [r3, #24]
 8005e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	ea40 0301 	orr.w	r3, r0, r1
 8005e10:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4bc5      	ldr	r3, [pc, #788]	; (800612c <UART_SetConfig+0x384>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d004      	beq.n	8005e26 <UART_SetConfig+0x7e>
 8005e1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	4bc3      	ldr	r3, [pc, #780]	; (8006130 <UART_SetConfig+0x388>)
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d103      	bne.n	8005e2e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e26:	f7fe fb25 	bl	8004474 <HAL_RCC_GetPCLK2Freq>
 8005e2a:	6778      	str	r0, [r7, #116]	; 0x74
 8005e2c:	e002      	b.n	8005e34 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e2e:	f7fe fb0d 	bl	800444c <HAL_RCC_GetPCLK1Freq>
 8005e32:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	f040 80b6 	bne.w	8005fac <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e42:	461c      	mov	r4, r3
 8005e44:	f04f 0500 	mov.w	r5, #0
 8005e48:	4622      	mov	r2, r4
 8005e4a:	462b      	mov	r3, r5
 8005e4c:	1891      	adds	r1, r2, r2
 8005e4e:	6439      	str	r1, [r7, #64]	; 0x40
 8005e50:	415b      	adcs	r3, r3
 8005e52:	647b      	str	r3, [r7, #68]	; 0x44
 8005e54:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005e58:	1912      	adds	r2, r2, r4
 8005e5a:	eb45 0303 	adc.w	r3, r5, r3
 8005e5e:	f04f 0000 	mov.w	r0, #0
 8005e62:	f04f 0100 	mov.w	r1, #0
 8005e66:	00d9      	lsls	r1, r3, #3
 8005e68:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005e6c:	00d0      	lsls	r0, r2, #3
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	1911      	adds	r1, r2, r4
 8005e74:	6639      	str	r1, [r7, #96]	; 0x60
 8005e76:	416b      	adcs	r3, r5
 8005e78:	667b      	str	r3, [r7, #100]	; 0x64
 8005e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	461a      	mov	r2, r3
 8005e80:	f04f 0300 	mov.w	r3, #0
 8005e84:	1891      	adds	r1, r2, r2
 8005e86:	63b9      	str	r1, [r7, #56]	; 0x38
 8005e88:	415b      	adcs	r3, r3
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005e90:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005e94:	f7fa f9aa 	bl	80001ec <__aeabi_uldivmod>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	4ba5      	ldr	r3, [pc, #660]	; (8006134 <UART_SetConfig+0x38c>)
 8005e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8005ea2:	095b      	lsrs	r3, r3, #5
 8005ea4:	011e      	lsls	r6, r3, #4
 8005ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ea8:	461c      	mov	r4, r3
 8005eaa:	f04f 0500 	mov.w	r5, #0
 8005eae:	4622      	mov	r2, r4
 8005eb0:	462b      	mov	r3, r5
 8005eb2:	1891      	adds	r1, r2, r2
 8005eb4:	6339      	str	r1, [r7, #48]	; 0x30
 8005eb6:	415b      	adcs	r3, r3
 8005eb8:	637b      	str	r3, [r7, #52]	; 0x34
 8005eba:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005ebe:	1912      	adds	r2, r2, r4
 8005ec0:	eb45 0303 	adc.w	r3, r5, r3
 8005ec4:	f04f 0000 	mov.w	r0, #0
 8005ec8:	f04f 0100 	mov.w	r1, #0
 8005ecc:	00d9      	lsls	r1, r3, #3
 8005ece:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005ed2:	00d0      	lsls	r0, r2, #3
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	1911      	adds	r1, r2, r4
 8005eda:	65b9      	str	r1, [r7, #88]	; 0x58
 8005edc:	416b      	adcs	r3, r5
 8005ede:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee2:	685b      	ldr	r3, [r3, #4]
 8005ee4:	461a      	mov	r2, r3
 8005ee6:	f04f 0300 	mov.w	r3, #0
 8005eea:	1891      	adds	r1, r2, r2
 8005eec:	62b9      	str	r1, [r7, #40]	; 0x28
 8005eee:	415b      	adcs	r3, r3
 8005ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ef2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ef6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005efa:	f7fa f977 	bl	80001ec <__aeabi_uldivmod>
 8005efe:	4602      	mov	r2, r0
 8005f00:	460b      	mov	r3, r1
 8005f02:	4b8c      	ldr	r3, [pc, #560]	; (8006134 <UART_SetConfig+0x38c>)
 8005f04:	fba3 1302 	umull	r1, r3, r3, r2
 8005f08:	095b      	lsrs	r3, r3, #5
 8005f0a:	2164      	movs	r1, #100	; 0x64
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	3332      	adds	r3, #50	; 0x32
 8005f16:	4a87      	ldr	r2, [pc, #540]	; (8006134 <UART_SetConfig+0x38c>)
 8005f18:	fba2 2303 	umull	r2, r3, r2, r3
 8005f1c:	095b      	lsrs	r3, r3, #5
 8005f1e:	005b      	lsls	r3, r3, #1
 8005f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f24:	441e      	add	r6, r3
 8005f26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f04f 0100 	mov.w	r1, #0
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	1894      	adds	r4, r2, r2
 8005f34:	623c      	str	r4, [r7, #32]
 8005f36:	415b      	adcs	r3, r3
 8005f38:	627b      	str	r3, [r7, #36]	; 0x24
 8005f3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f3e:	1812      	adds	r2, r2, r0
 8005f40:	eb41 0303 	adc.w	r3, r1, r3
 8005f44:	f04f 0400 	mov.w	r4, #0
 8005f48:	f04f 0500 	mov.w	r5, #0
 8005f4c:	00dd      	lsls	r5, r3, #3
 8005f4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005f52:	00d4      	lsls	r4, r2, #3
 8005f54:	4622      	mov	r2, r4
 8005f56:	462b      	mov	r3, r5
 8005f58:	1814      	adds	r4, r2, r0
 8005f5a:	653c      	str	r4, [r7, #80]	; 0x50
 8005f5c:	414b      	adcs	r3, r1
 8005f5e:	657b      	str	r3, [r7, #84]	; 0x54
 8005f60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	461a      	mov	r2, r3
 8005f66:	f04f 0300 	mov.w	r3, #0
 8005f6a:	1891      	adds	r1, r2, r2
 8005f6c:	61b9      	str	r1, [r7, #24]
 8005f6e:	415b      	adcs	r3, r3
 8005f70:	61fb      	str	r3, [r7, #28]
 8005f72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f76:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005f7a:	f7fa f937 	bl	80001ec <__aeabi_uldivmod>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	4b6c      	ldr	r3, [pc, #432]	; (8006134 <UART_SetConfig+0x38c>)
 8005f84:	fba3 1302 	umull	r1, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	2164      	movs	r1, #100	; 0x64
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	1ad3      	subs	r3, r2, r3
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	3332      	adds	r3, #50	; 0x32
 8005f96:	4a67      	ldr	r2, [pc, #412]	; (8006134 <UART_SetConfig+0x38c>)
 8005f98:	fba2 2303 	umull	r2, r3, r2, r3
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	f003 0207 	and.w	r2, r3, #7
 8005fa2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4432      	add	r2, r6
 8005fa8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005faa:	e0b9      	b.n	8006120 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005fac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005fae:	461c      	mov	r4, r3
 8005fb0:	f04f 0500 	mov.w	r5, #0
 8005fb4:	4622      	mov	r2, r4
 8005fb6:	462b      	mov	r3, r5
 8005fb8:	1891      	adds	r1, r2, r2
 8005fba:	6139      	str	r1, [r7, #16]
 8005fbc:	415b      	adcs	r3, r3
 8005fbe:	617b      	str	r3, [r7, #20]
 8005fc0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005fc4:	1912      	adds	r2, r2, r4
 8005fc6:	eb45 0303 	adc.w	r3, r5, r3
 8005fca:	f04f 0000 	mov.w	r0, #0
 8005fce:	f04f 0100 	mov.w	r1, #0
 8005fd2:	00d9      	lsls	r1, r3, #3
 8005fd4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005fd8:	00d0      	lsls	r0, r2, #3
 8005fda:	4602      	mov	r2, r0
 8005fdc:	460b      	mov	r3, r1
 8005fde:	eb12 0804 	adds.w	r8, r2, r4
 8005fe2:	eb43 0905 	adc.w	r9, r3, r5
 8005fe6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	4618      	mov	r0, r3
 8005fec:	f04f 0100 	mov.w	r1, #0
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	008b      	lsls	r3, r1, #2
 8005ffa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005ffe:	0082      	lsls	r2, r0, #2
 8006000:	4640      	mov	r0, r8
 8006002:	4649      	mov	r1, r9
 8006004:	f7fa f8f2 	bl	80001ec <__aeabi_uldivmod>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4b49      	ldr	r3, [pc, #292]	; (8006134 <UART_SetConfig+0x38c>)
 800600e:	fba3 2302 	umull	r2, r3, r3, r2
 8006012:	095b      	lsrs	r3, r3, #5
 8006014:	011e      	lsls	r6, r3, #4
 8006016:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006018:	4618      	mov	r0, r3
 800601a:	f04f 0100 	mov.w	r1, #0
 800601e:	4602      	mov	r2, r0
 8006020:	460b      	mov	r3, r1
 8006022:	1894      	adds	r4, r2, r2
 8006024:	60bc      	str	r4, [r7, #8]
 8006026:	415b      	adcs	r3, r3
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800602e:	1812      	adds	r2, r2, r0
 8006030:	eb41 0303 	adc.w	r3, r1, r3
 8006034:	f04f 0400 	mov.w	r4, #0
 8006038:	f04f 0500 	mov.w	r5, #0
 800603c:	00dd      	lsls	r5, r3, #3
 800603e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006042:	00d4      	lsls	r4, r2, #3
 8006044:	4622      	mov	r2, r4
 8006046:	462b      	mov	r3, r5
 8006048:	1814      	adds	r4, r2, r0
 800604a:	64bc      	str	r4, [r7, #72]	; 0x48
 800604c:	414b      	adcs	r3, r1
 800604e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006050:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	4618      	mov	r0, r3
 8006056:	f04f 0100 	mov.w	r1, #0
 800605a:	f04f 0200 	mov.w	r2, #0
 800605e:	f04f 0300 	mov.w	r3, #0
 8006062:	008b      	lsls	r3, r1, #2
 8006064:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006068:	0082      	lsls	r2, r0, #2
 800606a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800606e:	f7fa f8bd 	bl	80001ec <__aeabi_uldivmod>
 8006072:	4602      	mov	r2, r0
 8006074:	460b      	mov	r3, r1
 8006076:	4b2f      	ldr	r3, [pc, #188]	; (8006134 <UART_SetConfig+0x38c>)
 8006078:	fba3 1302 	umull	r1, r3, r3, r2
 800607c:	095b      	lsrs	r3, r3, #5
 800607e:	2164      	movs	r1, #100	; 0x64
 8006080:	fb01 f303 	mul.w	r3, r1, r3
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	3332      	adds	r3, #50	; 0x32
 800608a:	4a2a      	ldr	r2, [pc, #168]	; (8006134 <UART_SetConfig+0x38c>)
 800608c:	fba2 2303 	umull	r2, r3, r2, r3
 8006090:	095b      	lsrs	r3, r3, #5
 8006092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006096:	441e      	add	r6, r3
 8006098:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800609a:	4618      	mov	r0, r3
 800609c:	f04f 0100 	mov.w	r1, #0
 80060a0:	4602      	mov	r2, r0
 80060a2:	460b      	mov	r3, r1
 80060a4:	1894      	adds	r4, r2, r2
 80060a6:	603c      	str	r4, [r7, #0]
 80060a8:	415b      	adcs	r3, r3
 80060aa:	607b      	str	r3, [r7, #4]
 80060ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 80060b0:	1812      	adds	r2, r2, r0
 80060b2:	eb41 0303 	adc.w	r3, r1, r3
 80060b6:	f04f 0400 	mov.w	r4, #0
 80060ba:	f04f 0500 	mov.w	r5, #0
 80060be:	00dd      	lsls	r5, r3, #3
 80060c0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80060c4:	00d4      	lsls	r4, r2, #3
 80060c6:	4622      	mov	r2, r4
 80060c8:	462b      	mov	r3, r5
 80060ca:	eb12 0a00 	adds.w	sl, r2, r0
 80060ce:	eb43 0b01 	adc.w	fp, r3, r1
 80060d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4618      	mov	r0, r3
 80060d8:	f04f 0100 	mov.w	r1, #0
 80060dc:	f04f 0200 	mov.w	r2, #0
 80060e0:	f04f 0300 	mov.w	r3, #0
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80060ea:	0082      	lsls	r2, r0, #2
 80060ec:	4650      	mov	r0, sl
 80060ee:	4659      	mov	r1, fp
 80060f0:	f7fa f87c 	bl	80001ec <__aeabi_uldivmod>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4b0e      	ldr	r3, [pc, #56]	; (8006134 <UART_SetConfig+0x38c>)
 80060fa:	fba3 1302 	umull	r1, r3, r3, r2
 80060fe:	095b      	lsrs	r3, r3, #5
 8006100:	2164      	movs	r1, #100	; 0x64
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	1ad3      	subs	r3, r2, r3
 8006108:	011b      	lsls	r3, r3, #4
 800610a:	3332      	adds	r3, #50	; 0x32
 800610c:	4a09      	ldr	r2, [pc, #36]	; (8006134 <UART_SetConfig+0x38c>)
 800610e:	fba2 2303 	umull	r2, r3, r2, r3
 8006112:	095b      	lsrs	r3, r3, #5
 8006114:	f003 020f 	and.w	r2, r3, #15
 8006118:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4432      	add	r2, r6
 800611e:	609a      	str	r2, [r3, #8]
}
 8006120:	bf00      	nop
 8006122:	377c      	adds	r7, #124	; 0x7c
 8006124:	46bd      	mov	sp, r7
 8006126:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800612a:	bf00      	nop
 800612c:	40011000 	.word	0x40011000
 8006130:	40011400 	.word	0x40011400
 8006134:	51eb851f 	.word	0x51eb851f

08006138 <__errno>:
 8006138:	4b01      	ldr	r3, [pc, #4]	; (8006140 <__errno+0x8>)
 800613a:	6818      	ldr	r0, [r3, #0]
 800613c:	4770      	bx	lr
 800613e:	bf00      	nop
 8006140:	2000000c 	.word	0x2000000c

08006144 <__libc_init_array>:
 8006144:	b570      	push	{r4, r5, r6, lr}
 8006146:	4d0d      	ldr	r5, [pc, #52]	; (800617c <__libc_init_array+0x38>)
 8006148:	4c0d      	ldr	r4, [pc, #52]	; (8006180 <__libc_init_array+0x3c>)
 800614a:	1b64      	subs	r4, r4, r5
 800614c:	10a4      	asrs	r4, r4, #2
 800614e:	2600      	movs	r6, #0
 8006150:	42a6      	cmp	r6, r4
 8006152:	d109      	bne.n	8006168 <__libc_init_array+0x24>
 8006154:	4d0b      	ldr	r5, [pc, #44]	; (8006184 <__libc_init_array+0x40>)
 8006156:	4c0c      	ldr	r4, [pc, #48]	; (8006188 <__libc_init_array+0x44>)
 8006158:	f000 fd44 	bl	8006be4 <_init>
 800615c:	1b64      	subs	r4, r4, r5
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	2600      	movs	r6, #0
 8006162:	42a6      	cmp	r6, r4
 8006164:	d105      	bne.n	8006172 <__libc_init_array+0x2e>
 8006166:	bd70      	pop	{r4, r5, r6, pc}
 8006168:	f855 3b04 	ldr.w	r3, [r5], #4
 800616c:	4798      	blx	r3
 800616e:	3601      	adds	r6, #1
 8006170:	e7ee      	b.n	8006150 <__libc_init_array+0xc>
 8006172:	f855 3b04 	ldr.w	r3, [r5], #4
 8006176:	4798      	blx	r3
 8006178:	3601      	adds	r6, #1
 800617a:	e7f2      	b.n	8006162 <__libc_init_array+0x1e>
 800617c:	08006c8c 	.word	0x08006c8c
 8006180:	08006c8c 	.word	0x08006c8c
 8006184:	08006c8c 	.word	0x08006c8c
 8006188:	08006c90 	.word	0x08006c90

0800618c <memset>:
 800618c:	4402      	add	r2, r0
 800618e:	4603      	mov	r3, r0
 8006190:	4293      	cmp	r3, r2
 8006192:	d100      	bne.n	8006196 <memset+0xa>
 8006194:	4770      	bx	lr
 8006196:	f803 1b01 	strb.w	r1, [r3], #1
 800619a:	e7f9      	b.n	8006190 <memset+0x4>

0800619c <putchar>:
 800619c:	4b09      	ldr	r3, [pc, #36]	; (80061c4 <putchar+0x28>)
 800619e:	b513      	push	{r0, r1, r4, lr}
 80061a0:	681c      	ldr	r4, [r3, #0]
 80061a2:	4601      	mov	r1, r0
 80061a4:	b134      	cbz	r4, 80061b4 <putchar+0x18>
 80061a6:	69a3      	ldr	r3, [r4, #24]
 80061a8:	b923      	cbnz	r3, 80061b4 <putchar+0x18>
 80061aa:	9001      	str	r0, [sp, #4]
 80061ac:	4620      	mov	r0, r4
 80061ae:	f000 fa5b 	bl	8006668 <__sinit>
 80061b2:	9901      	ldr	r1, [sp, #4]
 80061b4:	68a2      	ldr	r2, [r4, #8]
 80061b6:	4620      	mov	r0, r4
 80061b8:	b002      	add	sp, #8
 80061ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061be:	f000 bc01 	b.w	80069c4 <_putc_r>
 80061c2:	bf00      	nop
 80061c4:	2000000c 	.word	0x2000000c

080061c8 <_puts_r>:
 80061c8:	b570      	push	{r4, r5, r6, lr}
 80061ca:	460e      	mov	r6, r1
 80061cc:	4605      	mov	r5, r0
 80061ce:	b118      	cbz	r0, 80061d8 <_puts_r+0x10>
 80061d0:	6983      	ldr	r3, [r0, #24]
 80061d2:	b90b      	cbnz	r3, 80061d8 <_puts_r+0x10>
 80061d4:	f000 fa48 	bl	8006668 <__sinit>
 80061d8:	69ab      	ldr	r3, [r5, #24]
 80061da:	68ac      	ldr	r4, [r5, #8]
 80061dc:	b913      	cbnz	r3, 80061e4 <_puts_r+0x1c>
 80061de:	4628      	mov	r0, r5
 80061e0:	f000 fa42 	bl	8006668 <__sinit>
 80061e4:	4b2c      	ldr	r3, [pc, #176]	; (8006298 <_puts_r+0xd0>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d120      	bne.n	800622c <_puts_r+0x64>
 80061ea:	686c      	ldr	r4, [r5, #4]
 80061ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061ee:	07db      	lsls	r3, r3, #31
 80061f0:	d405      	bmi.n	80061fe <_puts_r+0x36>
 80061f2:	89a3      	ldrh	r3, [r4, #12]
 80061f4:	0598      	lsls	r0, r3, #22
 80061f6:	d402      	bmi.n	80061fe <_puts_r+0x36>
 80061f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061fa:	f000 fad3 	bl	80067a4 <__retarget_lock_acquire_recursive>
 80061fe:	89a3      	ldrh	r3, [r4, #12]
 8006200:	0719      	lsls	r1, r3, #28
 8006202:	d51d      	bpl.n	8006240 <_puts_r+0x78>
 8006204:	6923      	ldr	r3, [r4, #16]
 8006206:	b1db      	cbz	r3, 8006240 <_puts_r+0x78>
 8006208:	3e01      	subs	r6, #1
 800620a:	68a3      	ldr	r3, [r4, #8]
 800620c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006210:	3b01      	subs	r3, #1
 8006212:	60a3      	str	r3, [r4, #8]
 8006214:	bb39      	cbnz	r1, 8006266 <_puts_r+0x9e>
 8006216:	2b00      	cmp	r3, #0
 8006218:	da38      	bge.n	800628c <_puts_r+0xc4>
 800621a:	4622      	mov	r2, r4
 800621c:	210a      	movs	r1, #10
 800621e:	4628      	mov	r0, r5
 8006220:	f000 f848 	bl	80062b4 <__swbuf_r>
 8006224:	3001      	adds	r0, #1
 8006226:	d011      	beq.n	800624c <_puts_r+0x84>
 8006228:	250a      	movs	r5, #10
 800622a:	e011      	b.n	8006250 <_puts_r+0x88>
 800622c:	4b1b      	ldr	r3, [pc, #108]	; (800629c <_puts_r+0xd4>)
 800622e:	429c      	cmp	r4, r3
 8006230:	d101      	bne.n	8006236 <_puts_r+0x6e>
 8006232:	68ac      	ldr	r4, [r5, #8]
 8006234:	e7da      	b.n	80061ec <_puts_r+0x24>
 8006236:	4b1a      	ldr	r3, [pc, #104]	; (80062a0 <_puts_r+0xd8>)
 8006238:	429c      	cmp	r4, r3
 800623a:	bf08      	it	eq
 800623c:	68ec      	ldreq	r4, [r5, #12]
 800623e:	e7d5      	b.n	80061ec <_puts_r+0x24>
 8006240:	4621      	mov	r1, r4
 8006242:	4628      	mov	r0, r5
 8006244:	f000 f888 	bl	8006358 <__swsetup_r>
 8006248:	2800      	cmp	r0, #0
 800624a:	d0dd      	beq.n	8006208 <_puts_r+0x40>
 800624c:	f04f 35ff 	mov.w	r5, #4294967295
 8006250:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006252:	07da      	lsls	r2, r3, #31
 8006254:	d405      	bmi.n	8006262 <_puts_r+0x9a>
 8006256:	89a3      	ldrh	r3, [r4, #12]
 8006258:	059b      	lsls	r3, r3, #22
 800625a:	d402      	bmi.n	8006262 <_puts_r+0x9a>
 800625c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800625e:	f000 faa2 	bl	80067a6 <__retarget_lock_release_recursive>
 8006262:	4628      	mov	r0, r5
 8006264:	bd70      	pop	{r4, r5, r6, pc}
 8006266:	2b00      	cmp	r3, #0
 8006268:	da04      	bge.n	8006274 <_puts_r+0xac>
 800626a:	69a2      	ldr	r2, [r4, #24]
 800626c:	429a      	cmp	r2, r3
 800626e:	dc06      	bgt.n	800627e <_puts_r+0xb6>
 8006270:	290a      	cmp	r1, #10
 8006272:	d004      	beq.n	800627e <_puts_r+0xb6>
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	1c5a      	adds	r2, r3, #1
 8006278:	6022      	str	r2, [r4, #0]
 800627a:	7019      	strb	r1, [r3, #0]
 800627c:	e7c5      	b.n	800620a <_puts_r+0x42>
 800627e:	4622      	mov	r2, r4
 8006280:	4628      	mov	r0, r5
 8006282:	f000 f817 	bl	80062b4 <__swbuf_r>
 8006286:	3001      	adds	r0, #1
 8006288:	d1bf      	bne.n	800620a <_puts_r+0x42>
 800628a:	e7df      	b.n	800624c <_puts_r+0x84>
 800628c:	6823      	ldr	r3, [r4, #0]
 800628e:	250a      	movs	r5, #10
 8006290:	1c5a      	adds	r2, r3, #1
 8006292:	6022      	str	r2, [r4, #0]
 8006294:	701d      	strb	r5, [r3, #0]
 8006296:	e7db      	b.n	8006250 <_puts_r+0x88>
 8006298:	08006c44 	.word	0x08006c44
 800629c:	08006c64 	.word	0x08006c64
 80062a0:	08006c24 	.word	0x08006c24

080062a4 <puts>:
 80062a4:	4b02      	ldr	r3, [pc, #8]	; (80062b0 <puts+0xc>)
 80062a6:	4601      	mov	r1, r0
 80062a8:	6818      	ldr	r0, [r3, #0]
 80062aa:	f7ff bf8d 	b.w	80061c8 <_puts_r>
 80062ae:	bf00      	nop
 80062b0:	2000000c 	.word	0x2000000c

080062b4 <__swbuf_r>:
 80062b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062b6:	460e      	mov	r6, r1
 80062b8:	4614      	mov	r4, r2
 80062ba:	4605      	mov	r5, r0
 80062bc:	b118      	cbz	r0, 80062c6 <__swbuf_r+0x12>
 80062be:	6983      	ldr	r3, [r0, #24]
 80062c0:	b90b      	cbnz	r3, 80062c6 <__swbuf_r+0x12>
 80062c2:	f000 f9d1 	bl	8006668 <__sinit>
 80062c6:	4b21      	ldr	r3, [pc, #132]	; (800634c <__swbuf_r+0x98>)
 80062c8:	429c      	cmp	r4, r3
 80062ca:	d12b      	bne.n	8006324 <__swbuf_r+0x70>
 80062cc:	686c      	ldr	r4, [r5, #4]
 80062ce:	69a3      	ldr	r3, [r4, #24]
 80062d0:	60a3      	str	r3, [r4, #8]
 80062d2:	89a3      	ldrh	r3, [r4, #12]
 80062d4:	071a      	lsls	r2, r3, #28
 80062d6:	d52f      	bpl.n	8006338 <__swbuf_r+0x84>
 80062d8:	6923      	ldr	r3, [r4, #16]
 80062da:	b36b      	cbz	r3, 8006338 <__swbuf_r+0x84>
 80062dc:	6923      	ldr	r3, [r4, #16]
 80062de:	6820      	ldr	r0, [r4, #0]
 80062e0:	1ac0      	subs	r0, r0, r3
 80062e2:	6963      	ldr	r3, [r4, #20]
 80062e4:	b2f6      	uxtb	r6, r6
 80062e6:	4283      	cmp	r3, r0
 80062e8:	4637      	mov	r7, r6
 80062ea:	dc04      	bgt.n	80062f6 <__swbuf_r+0x42>
 80062ec:	4621      	mov	r1, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 f926 	bl	8006540 <_fflush_r>
 80062f4:	bb30      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 80062f6:	68a3      	ldr	r3, [r4, #8]
 80062f8:	3b01      	subs	r3, #1
 80062fa:	60a3      	str	r3, [r4, #8]
 80062fc:	6823      	ldr	r3, [r4, #0]
 80062fe:	1c5a      	adds	r2, r3, #1
 8006300:	6022      	str	r2, [r4, #0]
 8006302:	701e      	strb	r6, [r3, #0]
 8006304:	6963      	ldr	r3, [r4, #20]
 8006306:	3001      	adds	r0, #1
 8006308:	4283      	cmp	r3, r0
 800630a:	d004      	beq.n	8006316 <__swbuf_r+0x62>
 800630c:	89a3      	ldrh	r3, [r4, #12]
 800630e:	07db      	lsls	r3, r3, #31
 8006310:	d506      	bpl.n	8006320 <__swbuf_r+0x6c>
 8006312:	2e0a      	cmp	r6, #10
 8006314:	d104      	bne.n	8006320 <__swbuf_r+0x6c>
 8006316:	4621      	mov	r1, r4
 8006318:	4628      	mov	r0, r5
 800631a:	f000 f911 	bl	8006540 <_fflush_r>
 800631e:	b988      	cbnz	r0, 8006344 <__swbuf_r+0x90>
 8006320:	4638      	mov	r0, r7
 8006322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <__swbuf_r+0x9c>)
 8006326:	429c      	cmp	r4, r3
 8006328:	d101      	bne.n	800632e <__swbuf_r+0x7a>
 800632a:	68ac      	ldr	r4, [r5, #8]
 800632c:	e7cf      	b.n	80062ce <__swbuf_r+0x1a>
 800632e:	4b09      	ldr	r3, [pc, #36]	; (8006354 <__swbuf_r+0xa0>)
 8006330:	429c      	cmp	r4, r3
 8006332:	bf08      	it	eq
 8006334:	68ec      	ldreq	r4, [r5, #12]
 8006336:	e7ca      	b.n	80062ce <__swbuf_r+0x1a>
 8006338:	4621      	mov	r1, r4
 800633a:	4628      	mov	r0, r5
 800633c:	f000 f80c 	bl	8006358 <__swsetup_r>
 8006340:	2800      	cmp	r0, #0
 8006342:	d0cb      	beq.n	80062dc <__swbuf_r+0x28>
 8006344:	f04f 37ff 	mov.w	r7, #4294967295
 8006348:	e7ea      	b.n	8006320 <__swbuf_r+0x6c>
 800634a:	bf00      	nop
 800634c:	08006c44 	.word	0x08006c44
 8006350:	08006c64 	.word	0x08006c64
 8006354:	08006c24 	.word	0x08006c24

08006358 <__swsetup_r>:
 8006358:	4b32      	ldr	r3, [pc, #200]	; (8006424 <__swsetup_r+0xcc>)
 800635a:	b570      	push	{r4, r5, r6, lr}
 800635c:	681d      	ldr	r5, [r3, #0]
 800635e:	4606      	mov	r6, r0
 8006360:	460c      	mov	r4, r1
 8006362:	b125      	cbz	r5, 800636e <__swsetup_r+0x16>
 8006364:	69ab      	ldr	r3, [r5, #24]
 8006366:	b913      	cbnz	r3, 800636e <__swsetup_r+0x16>
 8006368:	4628      	mov	r0, r5
 800636a:	f000 f97d 	bl	8006668 <__sinit>
 800636e:	4b2e      	ldr	r3, [pc, #184]	; (8006428 <__swsetup_r+0xd0>)
 8006370:	429c      	cmp	r4, r3
 8006372:	d10f      	bne.n	8006394 <__swsetup_r+0x3c>
 8006374:	686c      	ldr	r4, [r5, #4]
 8006376:	89a3      	ldrh	r3, [r4, #12]
 8006378:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800637c:	0719      	lsls	r1, r3, #28
 800637e:	d42c      	bmi.n	80063da <__swsetup_r+0x82>
 8006380:	06dd      	lsls	r5, r3, #27
 8006382:	d411      	bmi.n	80063a8 <__swsetup_r+0x50>
 8006384:	2309      	movs	r3, #9
 8006386:	6033      	str	r3, [r6, #0]
 8006388:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800638c:	81a3      	strh	r3, [r4, #12]
 800638e:	f04f 30ff 	mov.w	r0, #4294967295
 8006392:	e03e      	b.n	8006412 <__swsetup_r+0xba>
 8006394:	4b25      	ldr	r3, [pc, #148]	; (800642c <__swsetup_r+0xd4>)
 8006396:	429c      	cmp	r4, r3
 8006398:	d101      	bne.n	800639e <__swsetup_r+0x46>
 800639a:	68ac      	ldr	r4, [r5, #8]
 800639c:	e7eb      	b.n	8006376 <__swsetup_r+0x1e>
 800639e:	4b24      	ldr	r3, [pc, #144]	; (8006430 <__swsetup_r+0xd8>)
 80063a0:	429c      	cmp	r4, r3
 80063a2:	bf08      	it	eq
 80063a4:	68ec      	ldreq	r4, [r5, #12]
 80063a6:	e7e6      	b.n	8006376 <__swsetup_r+0x1e>
 80063a8:	0758      	lsls	r0, r3, #29
 80063aa:	d512      	bpl.n	80063d2 <__swsetup_r+0x7a>
 80063ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80063ae:	b141      	cbz	r1, 80063c2 <__swsetup_r+0x6a>
 80063b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80063b4:	4299      	cmp	r1, r3
 80063b6:	d002      	beq.n	80063be <__swsetup_r+0x66>
 80063b8:	4630      	mov	r0, r6
 80063ba:	f000 fa59 	bl	8006870 <_free_r>
 80063be:	2300      	movs	r3, #0
 80063c0:	6363      	str	r3, [r4, #52]	; 0x34
 80063c2:	89a3      	ldrh	r3, [r4, #12]
 80063c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80063c8:	81a3      	strh	r3, [r4, #12]
 80063ca:	2300      	movs	r3, #0
 80063cc:	6063      	str	r3, [r4, #4]
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	6023      	str	r3, [r4, #0]
 80063d2:	89a3      	ldrh	r3, [r4, #12]
 80063d4:	f043 0308 	orr.w	r3, r3, #8
 80063d8:	81a3      	strh	r3, [r4, #12]
 80063da:	6923      	ldr	r3, [r4, #16]
 80063dc:	b94b      	cbnz	r3, 80063f2 <__swsetup_r+0x9a>
 80063de:	89a3      	ldrh	r3, [r4, #12]
 80063e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80063e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80063e8:	d003      	beq.n	80063f2 <__swsetup_r+0x9a>
 80063ea:	4621      	mov	r1, r4
 80063ec:	4630      	mov	r0, r6
 80063ee:	f000 f9ff 	bl	80067f0 <__smakebuf_r>
 80063f2:	89a0      	ldrh	r0, [r4, #12]
 80063f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80063f8:	f010 0301 	ands.w	r3, r0, #1
 80063fc:	d00a      	beq.n	8006414 <__swsetup_r+0xbc>
 80063fe:	2300      	movs	r3, #0
 8006400:	60a3      	str	r3, [r4, #8]
 8006402:	6963      	ldr	r3, [r4, #20]
 8006404:	425b      	negs	r3, r3
 8006406:	61a3      	str	r3, [r4, #24]
 8006408:	6923      	ldr	r3, [r4, #16]
 800640a:	b943      	cbnz	r3, 800641e <__swsetup_r+0xc6>
 800640c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006410:	d1ba      	bne.n	8006388 <__swsetup_r+0x30>
 8006412:	bd70      	pop	{r4, r5, r6, pc}
 8006414:	0781      	lsls	r1, r0, #30
 8006416:	bf58      	it	pl
 8006418:	6963      	ldrpl	r3, [r4, #20]
 800641a:	60a3      	str	r3, [r4, #8]
 800641c:	e7f4      	b.n	8006408 <__swsetup_r+0xb0>
 800641e:	2000      	movs	r0, #0
 8006420:	e7f7      	b.n	8006412 <__swsetup_r+0xba>
 8006422:	bf00      	nop
 8006424:	2000000c 	.word	0x2000000c
 8006428:	08006c44 	.word	0x08006c44
 800642c:	08006c64 	.word	0x08006c64
 8006430:	08006c24 	.word	0x08006c24

08006434 <__sflush_r>:
 8006434:	898a      	ldrh	r2, [r1, #12]
 8006436:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800643a:	4605      	mov	r5, r0
 800643c:	0710      	lsls	r0, r2, #28
 800643e:	460c      	mov	r4, r1
 8006440:	d458      	bmi.n	80064f4 <__sflush_r+0xc0>
 8006442:	684b      	ldr	r3, [r1, #4]
 8006444:	2b00      	cmp	r3, #0
 8006446:	dc05      	bgt.n	8006454 <__sflush_r+0x20>
 8006448:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	dc02      	bgt.n	8006454 <__sflush_r+0x20>
 800644e:	2000      	movs	r0, #0
 8006450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006454:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006456:	2e00      	cmp	r6, #0
 8006458:	d0f9      	beq.n	800644e <__sflush_r+0x1a>
 800645a:	2300      	movs	r3, #0
 800645c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006460:	682f      	ldr	r7, [r5, #0]
 8006462:	602b      	str	r3, [r5, #0]
 8006464:	d032      	beq.n	80064cc <__sflush_r+0x98>
 8006466:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	075a      	lsls	r2, r3, #29
 800646c:	d505      	bpl.n	800647a <__sflush_r+0x46>
 800646e:	6863      	ldr	r3, [r4, #4]
 8006470:	1ac0      	subs	r0, r0, r3
 8006472:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006474:	b10b      	cbz	r3, 800647a <__sflush_r+0x46>
 8006476:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006478:	1ac0      	subs	r0, r0, r3
 800647a:	2300      	movs	r3, #0
 800647c:	4602      	mov	r2, r0
 800647e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006480:	6a21      	ldr	r1, [r4, #32]
 8006482:	4628      	mov	r0, r5
 8006484:	47b0      	blx	r6
 8006486:	1c43      	adds	r3, r0, #1
 8006488:	89a3      	ldrh	r3, [r4, #12]
 800648a:	d106      	bne.n	800649a <__sflush_r+0x66>
 800648c:	6829      	ldr	r1, [r5, #0]
 800648e:	291d      	cmp	r1, #29
 8006490:	d82c      	bhi.n	80064ec <__sflush_r+0xb8>
 8006492:	4a2a      	ldr	r2, [pc, #168]	; (800653c <__sflush_r+0x108>)
 8006494:	40ca      	lsrs	r2, r1
 8006496:	07d6      	lsls	r6, r2, #31
 8006498:	d528      	bpl.n	80064ec <__sflush_r+0xb8>
 800649a:	2200      	movs	r2, #0
 800649c:	6062      	str	r2, [r4, #4]
 800649e:	04d9      	lsls	r1, r3, #19
 80064a0:	6922      	ldr	r2, [r4, #16]
 80064a2:	6022      	str	r2, [r4, #0]
 80064a4:	d504      	bpl.n	80064b0 <__sflush_r+0x7c>
 80064a6:	1c42      	adds	r2, r0, #1
 80064a8:	d101      	bne.n	80064ae <__sflush_r+0x7a>
 80064aa:	682b      	ldr	r3, [r5, #0]
 80064ac:	b903      	cbnz	r3, 80064b0 <__sflush_r+0x7c>
 80064ae:	6560      	str	r0, [r4, #84]	; 0x54
 80064b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064b2:	602f      	str	r7, [r5, #0]
 80064b4:	2900      	cmp	r1, #0
 80064b6:	d0ca      	beq.n	800644e <__sflush_r+0x1a>
 80064b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064bc:	4299      	cmp	r1, r3
 80064be:	d002      	beq.n	80064c6 <__sflush_r+0x92>
 80064c0:	4628      	mov	r0, r5
 80064c2:	f000 f9d5 	bl	8006870 <_free_r>
 80064c6:	2000      	movs	r0, #0
 80064c8:	6360      	str	r0, [r4, #52]	; 0x34
 80064ca:	e7c1      	b.n	8006450 <__sflush_r+0x1c>
 80064cc:	6a21      	ldr	r1, [r4, #32]
 80064ce:	2301      	movs	r3, #1
 80064d0:	4628      	mov	r0, r5
 80064d2:	47b0      	blx	r6
 80064d4:	1c41      	adds	r1, r0, #1
 80064d6:	d1c7      	bne.n	8006468 <__sflush_r+0x34>
 80064d8:	682b      	ldr	r3, [r5, #0]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d0c4      	beq.n	8006468 <__sflush_r+0x34>
 80064de:	2b1d      	cmp	r3, #29
 80064e0:	d001      	beq.n	80064e6 <__sflush_r+0xb2>
 80064e2:	2b16      	cmp	r3, #22
 80064e4:	d101      	bne.n	80064ea <__sflush_r+0xb6>
 80064e6:	602f      	str	r7, [r5, #0]
 80064e8:	e7b1      	b.n	800644e <__sflush_r+0x1a>
 80064ea:	89a3      	ldrh	r3, [r4, #12]
 80064ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e7ad      	b.n	8006450 <__sflush_r+0x1c>
 80064f4:	690f      	ldr	r7, [r1, #16]
 80064f6:	2f00      	cmp	r7, #0
 80064f8:	d0a9      	beq.n	800644e <__sflush_r+0x1a>
 80064fa:	0793      	lsls	r3, r2, #30
 80064fc:	680e      	ldr	r6, [r1, #0]
 80064fe:	bf08      	it	eq
 8006500:	694b      	ldreq	r3, [r1, #20]
 8006502:	600f      	str	r7, [r1, #0]
 8006504:	bf18      	it	ne
 8006506:	2300      	movne	r3, #0
 8006508:	eba6 0807 	sub.w	r8, r6, r7
 800650c:	608b      	str	r3, [r1, #8]
 800650e:	f1b8 0f00 	cmp.w	r8, #0
 8006512:	dd9c      	ble.n	800644e <__sflush_r+0x1a>
 8006514:	6a21      	ldr	r1, [r4, #32]
 8006516:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006518:	4643      	mov	r3, r8
 800651a:	463a      	mov	r2, r7
 800651c:	4628      	mov	r0, r5
 800651e:	47b0      	blx	r6
 8006520:	2800      	cmp	r0, #0
 8006522:	dc06      	bgt.n	8006532 <__sflush_r+0xfe>
 8006524:	89a3      	ldrh	r3, [r4, #12]
 8006526:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800652a:	81a3      	strh	r3, [r4, #12]
 800652c:	f04f 30ff 	mov.w	r0, #4294967295
 8006530:	e78e      	b.n	8006450 <__sflush_r+0x1c>
 8006532:	4407      	add	r7, r0
 8006534:	eba8 0800 	sub.w	r8, r8, r0
 8006538:	e7e9      	b.n	800650e <__sflush_r+0xda>
 800653a:	bf00      	nop
 800653c:	20400001 	.word	0x20400001

08006540 <_fflush_r>:
 8006540:	b538      	push	{r3, r4, r5, lr}
 8006542:	690b      	ldr	r3, [r1, #16]
 8006544:	4605      	mov	r5, r0
 8006546:	460c      	mov	r4, r1
 8006548:	b913      	cbnz	r3, 8006550 <_fflush_r+0x10>
 800654a:	2500      	movs	r5, #0
 800654c:	4628      	mov	r0, r5
 800654e:	bd38      	pop	{r3, r4, r5, pc}
 8006550:	b118      	cbz	r0, 800655a <_fflush_r+0x1a>
 8006552:	6983      	ldr	r3, [r0, #24]
 8006554:	b90b      	cbnz	r3, 800655a <_fflush_r+0x1a>
 8006556:	f000 f887 	bl	8006668 <__sinit>
 800655a:	4b14      	ldr	r3, [pc, #80]	; (80065ac <_fflush_r+0x6c>)
 800655c:	429c      	cmp	r4, r3
 800655e:	d11b      	bne.n	8006598 <_fflush_r+0x58>
 8006560:	686c      	ldr	r4, [r5, #4]
 8006562:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d0ef      	beq.n	800654a <_fflush_r+0xa>
 800656a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800656c:	07d0      	lsls	r0, r2, #31
 800656e:	d404      	bmi.n	800657a <_fflush_r+0x3a>
 8006570:	0599      	lsls	r1, r3, #22
 8006572:	d402      	bmi.n	800657a <_fflush_r+0x3a>
 8006574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006576:	f000 f915 	bl	80067a4 <__retarget_lock_acquire_recursive>
 800657a:	4628      	mov	r0, r5
 800657c:	4621      	mov	r1, r4
 800657e:	f7ff ff59 	bl	8006434 <__sflush_r>
 8006582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006584:	07da      	lsls	r2, r3, #31
 8006586:	4605      	mov	r5, r0
 8006588:	d4e0      	bmi.n	800654c <_fflush_r+0xc>
 800658a:	89a3      	ldrh	r3, [r4, #12]
 800658c:	059b      	lsls	r3, r3, #22
 800658e:	d4dd      	bmi.n	800654c <_fflush_r+0xc>
 8006590:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006592:	f000 f908 	bl	80067a6 <__retarget_lock_release_recursive>
 8006596:	e7d9      	b.n	800654c <_fflush_r+0xc>
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <_fflush_r+0x70>)
 800659a:	429c      	cmp	r4, r3
 800659c:	d101      	bne.n	80065a2 <_fflush_r+0x62>
 800659e:	68ac      	ldr	r4, [r5, #8]
 80065a0:	e7df      	b.n	8006562 <_fflush_r+0x22>
 80065a2:	4b04      	ldr	r3, [pc, #16]	; (80065b4 <_fflush_r+0x74>)
 80065a4:	429c      	cmp	r4, r3
 80065a6:	bf08      	it	eq
 80065a8:	68ec      	ldreq	r4, [r5, #12]
 80065aa:	e7da      	b.n	8006562 <_fflush_r+0x22>
 80065ac:	08006c44 	.word	0x08006c44
 80065b0:	08006c64 	.word	0x08006c64
 80065b4:	08006c24 	.word	0x08006c24

080065b8 <std>:
 80065b8:	2300      	movs	r3, #0
 80065ba:	b510      	push	{r4, lr}
 80065bc:	4604      	mov	r4, r0
 80065be:	e9c0 3300 	strd	r3, r3, [r0]
 80065c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065c6:	6083      	str	r3, [r0, #8]
 80065c8:	8181      	strh	r1, [r0, #12]
 80065ca:	6643      	str	r3, [r0, #100]	; 0x64
 80065cc:	81c2      	strh	r2, [r0, #14]
 80065ce:	6183      	str	r3, [r0, #24]
 80065d0:	4619      	mov	r1, r3
 80065d2:	2208      	movs	r2, #8
 80065d4:	305c      	adds	r0, #92	; 0x5c
 80065d6:	f7ff fdd9 	bl	800618c <memset>
 80065da:	4b05      	ldr	r3, [pc, #20]	; (80065f0 <std+0x38>)
 80065dc:	6263      	str	r3, [r4, #36]	; 0x24
 80065de:	4b05      	ldr	r3, [pc, #20]	; (80065f4 <std+0x3c>)
 80065e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80065e2:	4b05      	ldr	r3, [pc, #20]	; (80065f8 <std+0x40>)
 80065e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065e6:	4b05      	ldr	r3, [pc, #20]	; (80065fc <std+0x44>)
 80065e8:	6224      	str	r4, [r4, #32]
 80065ea:	6323      	str	r3, [r4, #48]	; 0x30
 80065ec:	bd10      	pop	{r4, pc}
 80065ee:	bf00      	nop
 80065f0:	08006a75 	.word	0x08006a75
 80065f4:	08006a97 	.word	0x08006a97
 80065f8:	08006acf 	.word	0x08006acf
 80065fc:	08006af3 	.word	0x08006af3

08006600 <_cleanup_r>:
 8006600:	4901      	ldr	r1, [pc, #4]	; (8006608 <_cleanup_r+0x8>)
 8006602:	f000 b8af 	b.w	8006764 <_fwalk_reent>
 8006606:	bf00      	nop
 8006608:	08006541 	.word	0x08006541

0800660c <__sfmoreglue>:
 800660c:	b570      	push	{r4, r5, r6, lr}
 800660e:	1e4a      	subs	r2, r1, #1
 8006610:	2568      	movs	r5, #104	; 0x68
 8006612:	4355      	muls	r5, r2
 8006614:	460e      	mov	r6, r1
 8006616:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800661a:	f000 f979 	bl	8006910 <_malloc_r>
 800661e:	4604      	mov	r4, r0
 8006620:	b140      	cbz	r0, 8006634 <__sfmoreglue+0x28>
 8006622:	2100      	movs	r1, #0
 8006624:	e9c0 1600 	strd	r1, r6, [r0]
 8006628:	300c      	adds	r0, #12
 800662a:	60a0      	str	r0, [r4, #8]
 800662c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006630:	f7ff fdac 	bl	800618c <memset>
 8006634:	4620      	mov	r0, r4
 8006636:	bd70      	pop	{r4, r5, r6, pc}

08006638 <__sfp_lock_acquire>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__sfp_lock_acquire+0x8>)
 800663a:	f000 b8b3 	b.w	80067a4 <__retarget_lock_acquire_recursive>
 800663e:	bf00      	nop
 8006640:	2000039c 	.word	0x2000039c

08006644 <__sfp_lock_release>:
 8006644:	4801      	ldr	r0, [pc, #4]	; (800664c <__sfp_lock_release+0x8>)
 8006646:	f000 b8ae 	b.w	80067a6 <__retarget_lock_release_recursive>
 800664a:	bf00      	nop
 800664c:	2000039c 	.word	0x2000039c

08006650 <__sinit_lock_acquire>:
 8006650:	4801      	ldr	r0, [pc, #4]	; (8006658 <__sinit_lock_acquire+0x8>)
 8006652:	f000 b8a7 	b.w	80067a4 <__retarget_lock_acquire_recursive>
 8006656:	bf00      	nop
 8006658:	20000397 	.word	0x20000397

0800665c <__sinit_lock_release>:
 800665c:	4801      	ldr	r0, [pc, #4]	; (8006664 <__sinit_lock_release+0x8>)
 800665e:	f000 b8a2 	b.w	80067a6 <__retarget_lock_release_recursive>
 8006662:	bf00      	nop
 8006664:	20000397 	.word	0x20000397

08006668 <__sinit>:
 8006668:	b510      	push	{r4, lr}
 800666a:	4604      	mov	r4, r0
 800666c:	f7ff fff0 	bl	8006650 <__sinit_lock_acquire>
 8006670:	69a3      	ldr	r3, [r4, #24]
 8006672:	b11b      	cbz	r3, 800667c <__sinit+0x14>
 8006674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006678:	f7ff bff0 	b.w	800665c <__sinit_lock_release>
 800667c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006680:	6523      	str	r3, [r4, #80]	; 0x50
 8006682:	4b13      	ldr	r3, [pc, #76]	; (80066d0 <__sinit+0x68>)
 8006684:	4a13      	ldr	r2, [pc, #76]	; (80066d4 <__sinit+0x6c>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	62a2      	str	r2, [r4, #40]	; 0x28
 800668a:	42a3      	cmp	r3, r4
 800668c:	bf04      	itt	eq
 800668e:	2301      	moveq	r3, #1
 8006690:	61a3      	streq	r3, [r4, #24]
 8006692:	4620      	mov	r0, r4
 8006694:	f000 f820 	bl	80066d8 <__sfp>
 8006698:	6060      	str	r0, [r4, #4]
 800669a:	4620      	mov	r0, r4
 800669c:	f000 f81c 	bl	80066d8 <__sfp>
 80066a0:	60a0      	str	r0, [r4, #8]
 80066a2:	4620      	mov	r0, r4
 80066a4:	f000 f818 	bl	80066d8 <__sfp>
 80066a8:	2200      	movs	r2, #0
 80066aa:	60e0      	str	r0, [r4, #12]
 80066ac:	2104      	movs	r1, #4
 80066ae:	6860      	ldr	r0, [r4, #4]
 80066b0:	f7ff ff82 	bl	80065b8 <std>
 80066b4:	68a0      	ldr	r0, [r4, #8]
 80066b6:	2201      	movs	r2, #1
 80066b8:	2109      	movs	r1, #9
 80066ba:	f7ff ff7d 	bl	80065b8 <std>
 80066be:	68e0      	ldr	r0, [r4, #12]
 80066c0:	2202      	movs	r2, #2
 80066c2:	2112      	movs	r1, #18
 80066c4:	f7ff ff78 	bl	80065b8 <std>
 80066c8:	2301      	movs	r3, #1
 80066ca:	61a3      	str	r3, [r4, #24]
 80066cc:	e7d2      	b.n	8006674 <__sinit+0xc>
 80066ce:	bf00      	nop
 80066d0:	08006c20 	.word	0x08006c20
 80066d4:	08006601 	.word	0x08006601

080066d8 <__sfp>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	4607      	mov	r7, r0
 80066dc:	f7ff ffac 	bl	8006638 <__sfp_lock_acquire>
 80066e0:	4b1e      	ldr	r3, [pc, #120]	; (800675c <__sfp+0x84>)
 80066e2:	681e      	ldr	r6, [r3, #0]
 80066e4:	69b3      	ldr	r3, [r6, #24]
 80066e6:	b913      	cbnz	r3, 80066ee <__sfp+0x16>
 80066e8:	4630      	mov	r0, r6
 80066ea:	f7ff ffbd 	bl	8006668 <__sinit>
 80066ee:	3648      	adds	r6, #72	; 0x48
 80066f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80066f4:	3b01      	subs	r3, #1
 80066f6:	d503      	bpl.n	8006700 <__sfp+0x28>
 80066f8:	6833      	ldr	r3, [r6, #0]
 80066fa:	b30b      	cbz	r3, 8006740 <__sfp+0x68>
 80066fc:	6836      	ldr	r6, [r6, #0]
 80066fe:	e7f7      	b.n	80066f0 <__sfp+0x18>
 8006700:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006704:	b9d5      	cbnz	r5, 800673c <__sfp+0x64>
 8006706:	4b16      	ldr	r3, [pc, #88]	; (8006760 <__sfp+0x88>)
 8006708:	60e3      	str	r3, [r4, #12]
 800670a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800670e:	6665      	str	r5, [r4, #100]	; 0x64
 8006710:	f000 f847 	bl	80067a2 <__retarget_lock_init_recursive>
 8006714:	f7ff ff96 	bl	8006644 <__sfp_lock_release>
 8006718:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800671c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006720:	6025      	str	r5, [r4, #0]
 8006722:	61a5      	str	r5, [r4, #24]
 8006724:	2208      	movs	r2, #8
 8006726:	4629      	mov	r1, r5
 8006728:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800672c:	f7ff fd2e 	bl	800618c <memset>
 8006730:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006734:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006738:	4620      	mov	r0, r4
 800673a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800673c:	3468      	adds	r4, #104	; 0x68
 800673e:	e7d9      	b.n	80066f4 <__sfp+0x1c>
 8006740:	2104      	movs	r1, #4
 8006742:	4638      	mov	r0, r7
 8006744:	f7ff ff62 	bl	800660c <__sfmoreglue>
 8006748:	4604      	mov	r4, r0
 800674a:	6030      	str	r0, [r6, #0]
 800674c:	2800      	cmp	r0, #0
 800674e:	d1d5      	bne.n	80066fc <__sfp+0x24>
 8006750:	f7ff ff78 	bl	8006644 <__sfp_lock_release>
 8006754:	230c      	movs	r3, #12
 8006756:	603b      	str	r3, [r7, #0]
 8006758:	e7ee      	b.n	8006738 <__sfp+0x60>
 800675a:	bf00      	nop
 800675c:	08006c20 	.word	0x08006c20
 8006760:	ffff0001 	.word	0xffff0001

08006764 <_fwalk_reent>:
 8006764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006768:	4606      	mov	r6, r0
 800676a:	4688      	mov	r8, r1
 800676c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006770:	2700      	movs	r7, #0
 8006772:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006776:	f1b9 0901 	subs.w	r9, r9, #1
 800677a:	d505      	bpl.n	8006788 <_fwalk_reent+0x24>
 800677c:	6824      	ldr	r4, [r4, #0]
 800677e:	2c00      	cmp	r4, #0
 8006780:	d1f7      	bne.n	8006772 <_fwalk_reent+0xe>
 8006782:	4638      	mov	r0, r7
 8006784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006788:	89ab      	ldrh	r3, [r5, #12]
 800678a:	2b01      	cmp	r3, #1
 800678c:	d907      	bls.n	800679e <_fwalk_reent+0x3a>
 800678e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006792:	3301      	adds	r3, #1
 8006794:	d003      	beq.n	800679e <_fwalk_reent+0x3a>
 8006796:	4629      	mov	r1, r5
 8006798:	4630      	mov	r0, r6
 800679a:	47c0      	blx	r8
 800679c:	4307      	orrs	r7, r0
 800679e:	3568      	adds	r5, #104	; 0x68
 80067a0:	e7e9      	b.n	8006776 <_fwalk_reent+0x12>

080067a2 <__retarget_lock_init_recursive>:
 80067a2:	4770      	bx	lr

080067a4 <__retarget_lock_acquire_recursive>:
 80067a4:	4770      	bx	lr

080067a6 <__retarget_lock_release_recursive>:
 80067a6:	4770      	bx	lr

080067a8 <__swhatbuf_r>:
 80067a8:	b570      	push	{r4, r5, r6, lr}
 80067aa:	460e      	mov	r6, r1
 80067ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067b0:	2900      	cmp	r1, #0
 80067b2:	b096      	sub	sp, #88	; 0x58
 80067b4:	4614      	mov	r4, r2
 80067b6:	461d      	mov	r5, r3
 80067b8:	da07      	bge.n	80067ca <__swhatbuf_r+0x22>
 80067ba:	2300      	movs	r3, #0
 80067bc:	602b      	str	r3, [r5, #0]
 80067be:	89b3      	ldrh	r3, [r6, #12]
 80067c0:	061a      	lsls	r2, r3, #24
 80067c2:	d410      	bmi.n	80067e6 <__swhatbuf_r+0x3e>
 80067c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80067c8:	e00e      	b.n	80067e8 <__swhatbuf_r+0x40>
 80067ca:	466a      	mov	r2, sp
 80067cc:	f000 f9b8 	bl	8006b40 <_fstat_r>
 80067d0:	2800      	cmp	r0, #0
 80067d2:	dbf2      	blt.n	80067ba <__swhatbuf_r+0x12>
 80067d4:	9a01      	ldr	r2, [sp, #4]
 80067d6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80067da:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80067de:	425a      	negs	r2, r3
 80067e0:	415a      	adcs	r2, r3
 80067e2:	602a      	str	r2, [r5, #0]
 80067e4:	e7ee      	b.n	80067c4 <__swhatbuf_r+0x1c>
 80067e6:	2340      	movs	r3, #64	; 0x40
 80067e8:	2000      	movs	r0, #0
 80067ea:	6023      	str	r3, [r4, #0]
 80067ec:	b016      	add	sp, #88	; 0x58
 80067ee:	bd70      	pop	{r4, r5, r6, pc}

080067f0 <__smakebuf_r>:
 80067f0:	898b      	ldrh	r3, [r1, #12]
 80067f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80067f4:	079d      	lsls	r5, r3, #30
 80067f6:	4606      	mov	r6, r0
 80067f8:	460c      	mov	r4, r1
 80067fa:	d507      	bpl.n	800680c <__smakebuf_r+0x1c>
 80067fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006800:	6023      	str	r3, [r4, #0]
 8006802:	6123      	str	r3, [r4, #16]
 8006804:	2301      	movs	r3, #1
 8006806:	6163      	str	r3, [r4, #20]
 8006808:	b002      	add	sp, #8
 800680a:	bd70      	pop	{r4, r5, r6, pc}
 800680c:	ab01      	add	r3, sp, #4
 800680e:	466a      	mov	r2, sp
 8006810:	f7ff ffca 	bl	80067a8 <__swhatbuf_r>
 8006814:	9900      	ldr	r1, [sp, #0]
 8006816:	4605      	mov	r5, r0
 8006818:	4630      	mov	r0, r6
 800681a:	f000 f879 	bl	8006910 <_malloc_r>
 800681e:	b948      	cbnz	r0, 8006834 <__smakebuf_r+0x44>
 8006820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006824:	059a      	lsls	r2, r3, #22
 8006826:	d4ef      	bmi.n	8006808 <__smakebuf_r+0x18>
 8006828:	f023 0303 	bic.w	r3, r3, #3
 800682c:	f043 0302 	orr.w	r3, r3, #2
 8006830:	81a3      	strh	r3, [r4, #12]
 8006832:	e7e3      	b.n	80067fc <__smakebuf_r+0xc>
 8006834:	4b0d      	ldr	r3, [pc, #52]	; (800686c <__smakebuf_r+0x7c>)
 8006836:	62b3      	str	r3, [r6, #40]	; 0x28
 8006838:	89a3      	ldrh	r3, [r4, #12]
 800683a:	6020      	str	r0, [r4, #0]
 800683c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006840:	81a3      	strh	r3, [r4, #12]
 8006842:	9b00      	ldr	r3, [sp, #0]
 8006844:	6163      	str	r3, [r4, #20]
 8006846:	9b01      	ldr	r3, [sp, #4]
 8006848:	6120      	str	r0, [r4, #16]
 800684a:	b15b      	cbz	r3, 8006864 <__smakebuf_r+0x74>
 800684c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006850:	4630      	mov	r0, r6
 8006852:	f000 f987 	bl	8006b64 <_isatty_r>
 8006856:	b128      	cbz	r0, 8006864 <__smakebuf_r+0x74>
 8006858:	89a3      	ldrh	r3, [r4, #12]
 800685a:	f023 0303 	bic.w	r3, r3, #3
 800685e:	f043 0301 	orr.w	r3, r3, #1
 8006862:	81a3      	strh	r3, [r4, #12]
 8006864:	89a0      	ldrh	r0, [r4, #12]
 8006866:	4305      	orrs	r5, r0
 8006868:	81a5      	strh	r5, [r4, #12]
 800686a:	e7cd      	b.n	8006808 <__smakebuf_r+0x18>
 800686c:	08006601 	.word	0x08006601

08006870 <_free_r>:
 8006870:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006872:	2900      	cmp	r1, #0
 8006874:	d048      	beq.n	8006908 <_free_r+0x98>
 8006876:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800687a:	9001      	str	r0, [sp, #4]
 800687c:	2b00      	cmp	r3, #0
 800687e:	f1a1 0404 	sub.w	r4, r1, #4
 8006882:	bfb8      	it	lt
 8006884:	18e4      	addlt	r4, r4, r3
 8006886:	f000 f98f 	bl	8006ba8 <__malloc_lock>
 800688a:	4a20      	ldr	r2, [pc, #128]	; (800690c <_free_r+0x9c>)
 800688c:	9801      	ldr	r0, [sp, #4]
 800688e:	6813      	ldr	r3, [r2, #0]
 8006890:	4615      	mov	r5, r2
 8006892:	b933      	cbnz	r3, 80068a2 <_free_r+0x32>
 8006894:	6063      	str	r3, [r4, #4]
 8006896:	6014      	str	r4, [r2, #0]
 8006898:	b003      	add	sp, #12
 800689a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800689e:	f000 b989 	b.w	8006bb4 <__malloc_unlock>
 80068a2:	42a3      	cmp	r3, r4
 80068a4:	d90b      	bls.n	80068be <_free_r+0x4e>
 80068a6:	6821      	ldr	r1, [r4, #0]
 80068a8:	1862      	adds	r2, r4, r1
 80068aa:	4293      	cmp	r3, r2
 80068ac:	bf04      	itt	eq
 80068ae:	681a      	ldreq	r2, [r3, #0]
 80068b0:	685b      	ldreq	r3, [r3, #4]
 80068b2:	6063      	str	r3, [r4, #4]
 80068b4:	bf04      	itt	eq
 80068b6:	1852      	addeq	r2, r2, r1
 80068b8:	6022      	streq	r2, [r4, #0]
 80068ba:	602c      	str	r4, [r5, #0]
 80068bc:	e7ec      	b.n	8006898 <_free_r+0x28>
 80068be:	461a      	mov	r2, r3
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	b10b      	cbz	r3, 80068c8 <_free_r+0x58>
 80068c4:	42a3      	cmp	r3, r4
 80068c6:	d9fa      	bls.n	80068be <_free_r+0x4e>
 80068c8:	6811      	ldr	r1, [r2, #0]
 80068ca:	1855      	adds	r5, r2, r1
 80068cc:	42a5      	cmp	r5, r4
 80068ce:	d10b      	bne.n	80068e8 <_free_r+0x78>
 80068d0:	6824      	ldr	r4, [r4, #0]
 80068d2:	4421      	add	r1, r4
 80068d4:	1854      	adds	r4, r2, r1
 80068d6:	42a3      	cmp	r3, r4
 80068d8:	6011      	str	r1, [r2, #0]
 80068da:	d1dd      	bne.n	8006898 <_free_r+0x28>
 80068dc:	681c      	ldr	r4, [r3, #0]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	6053      	str	r3, [r2, #4]
 80068e2:	4421      	add	r1, r4
 80068e4:	6011      	str	r1, [r2, #0]
 80068e6:	e7d7      	b.n	8006898 <_free_r+0x28>
 80068e8:	d902      	bls.n	80068f0 <_free_r+0x80>
 80068ea:	230c      	movs	r3, #12
 80068ec:	6003      	str	r3, [r0, #0]
 80068ee:	e7d3      	b.n	8006898 <_free_r+0x28>
 80068f0:	6825      	ldr	r5, [r4, #0]
 80068f2:	1961      	adds	r1, r4, r5
 80068f4:	428b      	cmp	r3, r1
 80068f6:	bf04      	itt	eq
 80068f8:	6819      	ldreq	r1, [r3, #0]
 80068fa:	685b      	ldreq	r3, [r3, #4]
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	bf04      	itt	eq
 8006900:	1949      	addeq	r1, r1, r5
 8006902:	6021      	streq	r1, [r4, #0]
 8006904:	6054      	str	r4, [r2, #4]
 8006906:	e7c7      	b.n	8006898 <_free_r+0x28>
 8006908:	b003      	add	sp, #12
 800690a:	bd30      	pop	{r4, r5, pc}
 800690c:	20000094 	.word	0x20000094

08006910 <_malloc_r>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	1ccd      	adds	r5, r1, #3
 8006914:	f025 0503 	bic.w	r5, r5, #3
 8006918:	3508      	adds	r5, #8
 800691a:	2d0c      	cmp	r5, #12
 800691c:	bf38      	it	cc
 800691e:	250c      	movcc	r5, #12
 8006920:	2d00      	cmp	r5, #0
 8006922:	4606      	mov	r6, r0
 8006924:	db01      	blt.n	800692a <_malloc_r+0x1a>
 8006926:	42a9      	cmp	r1, r5
 8006928:	d903      	bls.n	8006932 <_malloc_r+0x22>
 800692a:	230c      	movs	r3, #12
 800692c:	6033      	str	r3, [r6, #0]
 800692e:	2000      	movs	r0, #0
 8006930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006932:	f000 f939 	bl	8006ba8 <__malloc_lock>
 8006936:	4921      	ldr	r1, [pc, #132]	; (80069bc <_malloc_r+0xac>)
 8006938:	680a      	ldr	r2, [r1, #0]
 800693a:	4614      	mov	r4, r2
 800693c:	b99c      	cbnz	r4, 8006966 <_malloc_r+0x56>
 800693e:	4f20      	ldr	r7, [pc, #128]	; (80069c0 <_malloc_r+0xb0>)
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	b923      	cbnz	r3, 800694e <_malloc_r+0x3e>
 8006944:	4621      	mov	r1, r4
 8006946:	4630      	mov	r0, r6
 8006948:	f000 f884 	bl	8006a54 <_sbrk_r>
 800694c:	6038      	str	r0, [r7, #0]
 800694e:	4629      	mov	r1, r5
 8006950:	4630      	mov	r0, r6
 8006952:	f000 f87f 	bl	8006a54 <_sbrk_r>
 8006956:	1c43      	adds	r3, r0, #1
 8006958:	d123      	bne.n	80069a2 <_malloc_r+0x92>
 800695a:	230c      	movs	r3, #12
 800695c:	6033      	str	r3, [r6, #0]
 800695e:	4630      	mov	r0, r6
 8006960:	f000 f928 	bl	8006bb4 <__malloc_unlock>
 8006964:	e7e3      	b.n	800692e <_malloc_r+0x1e>
 8006966:	6823      	ldr	r3, [r4, #0]
 8006968:	1b5b      	subs	r3, r3, r5
 800696a:	d417      	bmi.n	800699c <_malloc_r+0x8c>
 800696c:	2b0b      	cmp	r3, #11
 800696e:	d903      	bls.n	8006978 <_malloc_r+0x68>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	441c      	add	r4, r3
 8006974:	6025      	str	r5, [r4, #0]
 8006976:	e004      	b.n	8006982 <_malloc_r+0x72>
 8006978:	6863      	ldr	r3, [r4, #4]
 800697a:	42a2      	cmp	r2, r4
 800697c:	bf0c      	ite	eq
 800697e:	600b      	streq	r3, [r1, #0]
 8006980:	6053      	strne	r3, [r2, #4]
 8006982:	4630      	mov	r0, r6
 8006984:	f000 f916 	bl	8006bb4 <__malloc_unlock>
 8006988:	f104 000b 	add.w	r0, r4, #11
 800698c:	1d23      	adds	r3, r4, #4
 800698e:	f020 0007 	bic.w	r0, r0, #7
 8006992:	1ac2      	subs	r2, r0, r3
 8006994:	d0cc      	beq.n	8006930 <_malloc_r+0x20>
 8006996:	1a1b      	subs	r3, r3, r0
 8006998:	50a3      	str	r3, [r4, r2]
 800699a:	e7c9      	b.n	8006930 <_malloc_r+0x20>
 800699c:	4622      	mov	r2, r4
 800699e:	6864      	ldr	r4, [r4, #4]
 80069a0:	e7cc      	b.n	800693c <_malloc_r+0x2c>
 80069a2:	1cc4      	adds	r4, r0, #3
 80069a4:	f024 0403 	bic.w	r4, r4, #3
 80069a8:	42a0      	cmp	r0, r4
 80069aa:	d0e3      	beq.n	8006974 <_malloc_r+0x64>
 80069ac:	1a21      	subs	r1, r4, r0
 80069ae:	4630      	mov	r0, r6
 80069b0:	f000 f850 	bl	8006a54 <_sbrk_r>
 80069b4:	3001      	adds	r0, #1
 80069b6:	d1dd      	bne.n	8006974 <_malloc_r+0x64>
 80069b8:	e7cf      	b.n	800695a <_malloc_r+0x4a>
 80069ba:	bf00      	nop
 80069bc:	20000094 	.word	0x20000094
 80069c0:	20000098 	.word	0x20000098

080069c4 <_putc_r>:
 80069c4:	b570      	push	{r4, r5, r6, lr}
 80069c6:	460d      	mov	r5, r1
 80069c8:	4614      	mov	r4, r2
 80069ca:	4606      	mov	r6, r0
 80069cc:	b118      	cbz	r0, 80069d6 <_putc_r+0x12>
 80069ce:	6983      	ldr	r3, [r0, #24]
 80069d0:	b90b      	cbnz	r3, 80069d6 <_putc_r+0x12>
 80069d2:	f7ff fe49 	bl	8006668 <__sinit>
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <_putc_r+0x84>)
 80069d8:	429c      	cmp	r4, r3
 80069da:	d124      	bne.n	8006a26 <_putc_r+0x62>
 80069dc:	6874      	ldr	r4, [r6, #4]
 80069de:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e0:	07d8      	lsls	r0, r3, #31
 80069e2:	d405      	bmi.n	80069f0 <_putc_r+0x2c>
 80069e4:	89a3      	ldrh	r3, [r4, #12]
 80069e6:	0599      	lsls	r1, r3, #22
 80069e8:	d402      	bmi.n	80069f0 <_putc_r+0x2c>
 80069ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069ec:	f7ff feda 	bl	80067a4 <__retarget_lock_acquire_recursive>
 80069f0:	68a3      	ldr	r3, [r4, #8]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	60a3      	str	r3, [r4, #8]
 80069f8:	da05      	bge.n	8006a06 <_putc_r+0x42>
 80069fa:	69a2      	ldr	r2, [r4, #24]
 80069fc:	4293      	cmp	r3, r2
 80069fe:	db1c      	blt.n	8006a3a <_putc_r+0x76>
 8006a00:	b2eb      	uxtb	r3, r5
 8006a02:	2b0a      	cmp	r3, #10
 8006a04:	d019      	beq.n	8006a3a <_putc_r+0x76>
 8006a06:	6823      	ldr	r3, [r4, #0]
 8006a08:	1c5a      	adds	r2, r3, #1
 8006a0a:	6022      	str	r2, [r4, #0]
 8006a0c:	701d      	strb	r5, [r3, #0]
 8006a0e:	b2ed      	uxtb	r5, r5
 8006a10:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a12:	07da      	lsls	r2, r3, #31
 8006a14:	d405      	bmi.n	8006a22 <_putc_r+0x5e>
 8006a16:	89a3      	ldrh	r3, [r4, #12]
 8006a18:	059b      	lsls	r3, r3, #22
 8006a1a:	d402      	bmi.n	8006a22 <_putc_r+0x5e>
 8006a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a1e:	f7ff fec2 	bl	80067a6 <__retarget_lock_release_recursive>
 8006a22:	4628      	mov	r0, r5
 8006a24:	bd70      	pop	{r4, r5, r6, pc}
 8006a26:	4b09      	ldr	r3, [pc, #36]	; (8006a4c <_putc_r+0x88>)
 8006a28:	429c      	cmp	r4, r3
 8006a2a:	d101      	bne.n	8006a30 <_putc_r+0x6c>
 8006a2c:	68b4      	ldr	r4, [r6, #8]
 8006a2e:	e7d6      	b.n	80069de <_putc_r+0x1a>
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <_putc_r+0x8c>)
 8006a32:	429c      	cmp	r4, r3
 8006a34:	bf08      	it	eq
 8006a36:	68f4      	ldreq	r4, [r6, #12]
 8006a38:	e7d1      	b.n	80069de <_putc_r+0x1a>
 8006a3a:	4629      	mov	r1, r5
 8006a3c:	4622      	mov	r2, r4
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff fc38 	bl	80062b4 <__swbuf_r>
 8006a44:	4605      	mov	r5, r0
 8006a46:	e7e3      	b.n	8006a10 <_putc_r+0x4c>
 8006a48:	08006c44 	.word	0x08006c44
 8006a4c:	08006c64 	.word	0x08006c64
 8006a50:	08006c24 	.word	0x08006c24

08006a54 <_sbrk_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d06      	ldr	r5, [pc, #24]	; (8006a70 <_sbrk_r+0x1c>)
 8006a58:	2300      	movs	r3, #0
 8006a5a:	4604      	mov	r4, r0
 8006a5c:	4608      	mov	r0, r1
 8006a5e:	602b      	str	r3, [r5, #0]
 8006a60:	f7fa faf8 	bl	8001054 <_sbrk>
 8006a64:	1c43      	adds	r3, r0, #1
 8006a66:	d102      	bne.n	8006a6e <_sbrk_r+0x1a>
 8006a68:	682b      	ldr	r3, [r5, #0]
 8006a6a:	b103      	cbz	r3, 8006a6e <_sbrk_r+0x1a>
 8006a6c:	6023      	str	r3, [r4, #0]
 8006a6e:	bd38      	pop	{r3, r4, r5, pc}
 8006a70:	200003a0 	.word	0x200003a0

08006a74 <__sread>:
 8006a74:	b510      	push	{r4, lr}
 8006a76:	460c      	mov	r4, r1
 8006a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a7c:	f000 f8a0 	bl	8006bc0 <_read_r>
 8006a80:	2800      	cmp	r0, #0
 8006a82:	bfab      	itete	ge
 8006a84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006a86:	89a3      	ldrhlt	r3, [r4, #12]
 8006a88:	181b      	addge	r3, r3, r0
 8006a8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006a8e:	bfac      	ite	ge
 8006a90:	6563      	strge	r3, [r4, #84]	; 0x54
 8006a92:	81a3      	strhlt	r3, [r4, #12]
 8006a94:	bd10      	pop	{r4, pc}

08006a96 <__swrite>:
 8006a96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a9a:	461f      	mov	r7, r3
 8006a9c:	898b      	ldrh	r3, [r1, #12]
 8006a9e:	05db      	lsls	r3, r3, #23
 8006aa0:	4605      	mov	r5, r0
 8006aa2:	460c      	mov	r4, r1
 8006aa4:	4616      	mov	r6, r2
 8006aa6:	d505      	bpl.n	8006ab4 <__swrite+0x1e>
 8006aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006aac:	2302      	movs	r3, #2
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f000 f868 	bl	8006b84 <_lseek_r>
 8006ab4:	89a3      	ldrh	r3, [r4, #12]
 8006ab6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	4632      	mov	r2, r6
 8006ac2:	463b      	mov	r3, r7
 8006ac4:	4628      	mov	r0, r5
 8006ac6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006aca:	f000 b817 	b.w	8006afc <_write_r>

08006ace <__sseek>:
 8006ace:	b510      	push	{r4, lr}
 8006ad0:	460c      	mov	r4, r1
 8006ad2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ad6:	f000 f855 	bl	8006b84 <_lseek_r>
 8006ada:	1c43      	adds	r3, r0, #1
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	bf15      	itete	ne
 8006ae0:	6560      	strne	r0, [r4, #84]	; 0x54
 8006ae2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006ae6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006aea:	81a3      	strheq	r3, [r4, #12]
 8006aec:	bf18      	it	ne
 8006aee:	81a3      	strhne	r3, [r4, #12]
 8006af0:	bd10      	pop	{r4, pc}

08006af2 <__sclose>:
 8006af2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006af6:	f000 b813 	b.w	8006b20 <_close_r>
	...

08006afc <_write_r>:
 8006afc:	b538      	push	{r3, r4, r5, lr}
 8006afe:	4d07      	ldr	r5, [pc, #28]	; (8006b1c <_write_r+0x20>)
 8006b00:	4604      	mov	r4, r0
 8006b02:	4608      	mov	r0, r1
 8006b04:	4611      	mov	r1, r2
 8006b06:	2200      	movs	r2, #0
 8006b08:	602a      	str	r2, [r5, #0]
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	f7f9 ffca 	bl	8000aa4 <_write>
 8006b10:	1c43      	adds	r3, r0, #1
 8006b12:	d102      	bne.n	8006b1a <_write_r+0x1e>
 8006b14:	682b      	ldr	r3, [r5, #0]
 8006b16:	b103      	cbz	r3, 8006b1a <_write_r+0x1e>
 8006b18:	6023      	str	r3, [r4, #0]
 8006b1a:	bd38      	pop	{r3, r4, r5, pc}
 8006b1c:	200003a0 	.word	0x200003a0

08006b20 <_close_r>:
 8006b20:	b538      	push	{r3, r4, r5, lr}
 8006b22:	4d06      	ldr	r5, [pc, #24]	; (8006b3c <_close_r+0x1c>)
 8006b24:	2300      	movs	r3, #0
 8006b26:	4604      	mov	r4, r0
 8006b28:	4608      	mov	r0, r1
 8006b2a:	602b      	str	r3, [r5, #0]
 8006b2c:	f7fa fa5d 	bl	8000fea <_close>
 8006b30:	1c43      	adds	r3, r0, #1
 8006b32:	d102      	bne.n	8006b3a <_close_r+0x1a>
 8006b34:	682b      	ldr	r3, [r5, #0]
 8006b36:	b103      	cbz	r3, 8006b3a <_close_r+0x1a>
 8006b38:	6023      	str	r3, [r4, #0]
 8006b3a:	bd38      	pop	{r3, r4, r5, pc}
 8006b3c:	200003a0 	.word	0x200003a0

08006b40 <_fstat_r>:
 8006b40:	b538      	push	{r3, r4, r5, lr}
 8006b42:	4d07      	ldr	r5, [pc, #28]	; (8006b60 <_fstat_r+0x20>)
 8006b44:	2300      	movs	r3, #0
 8006b46:	4604      	mov	r4, r0
 8006b48:	4608      	mov	r0, r1
 8006b4a:	4611      	mov	r1, r2
 8006b4c:	602b      	str	r3, [r5, #0]
 8006b4e:	f7fa fa58 	bl	8001002 <_fstat>
 8006b52:	1c43      	adds	r3, r0, #1
 8006b54:	d102      	bne.n	8006b5c <_fstat_r+0x1c>
 8006b56:	682b      	ldr	r3, [r5, #0]
 8006b58:	b103      	cbz	r3, 8006b5c <_fstat_r+0x1c>
 8006b5a:	6023      	str	r3, [r4, #0]
 8006b5c:	bd38      	pop	{r3, r4, r5, pc}
 8006b5e:	bf00      	nop
 8006b60:	200003a0 	.word	0x200003a0

08006b64 <_isatty_r>:
 8006b64:	b538      	push	{r3, r4, r5, lr}
 8006b66:	4d06      	ldr	r5, [pc, #24]	; (8006b80 <_isatty_r+0x1c>)
 8006b68:	2300      	movs	r3, #0
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	4608      	mov	r0, r1
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	f7fa fa57 	bl	8001022 <_isatty>
 8006b74:	1c43      	adds	r3, r0, #1
 8006b76:	d102      	bne.n	8006b7e <_isatty_r+0x1a>
 8006b78:	682b      	ldr	r3, [r5, #0]
 8006b7a:	b103      	cbz	r3, 8006b7e <_isatty_r+0x1a>
 8006b7c:	6023      	str	r3, [r4, #0]
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	200003a0 	.word	0x200003a0

08006b84 <_lseek_r>:
 8006b84:	b538      	push	{r3, r4, r5, lr}
 8006b86:	4d07      	ldr	r5, [pc, #28]	; (8006ba4 <_lseek_r+0x20>)
 8006b88:	4604      	mov	r4, r0
 8006b8a:	4608      	mov	r0, r1
 8006b8c:	4611      	mov	r1, r2
 8006b8e:	2200      	movs	r2, #0
 8006b90:	602a      	str	r2, [r5, #0]
 8006b92:	461a      	mov	r2, r3
 8006b94:	f7fa fa50 	bl	8001038 <_lseek>
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d102      	bne.n	8006ba2 <_lseek_r+0x1e>
 8006b9c:	682b      	ldr	r3, [r5, #0]
 8006b9e:	b103      	cbz	r3, 8006ba2 <_lseek_r+0x1e>
 8006ba0:	6023      	str	r3, [r4, #0]
 8006ba2:	bd38      	pop	{r3, r4, r5, pc}
 8006ba4:	200003a0 	.word	0x200003a0

08006ba8 <__malloc_lock>:
 8006ba8:	4801      	ldr	r0, [pc, #4]	; (8006bb0 <__malloc_lock+0x8>)
 8006baa:	f7ff bdfb 	b.w	80067a4 <__retarget_lock_acquire_recursive>
 8006bae:	bf00      	nop
 8006bb0:	20000398 	.word	0x20000398

08006bb4 <__malloc_unlock>:
 8006bb4:	4801      	ldr	r0, [pc, #4]	; (8006bbc <__malloc_unlock+0x8>)
 8006bb6:	f7ff bdf6 	b.w	80067a6 <__retarget_lock_release_recursive>
 8006bba:	bf00      	nop
 8006bbc:	20000398 	.word	0x20000398

08006bc0 <_read_r>:
 8006bc0:	b538      	push	{r3, r4, r5, lr}
 8006bc2:	4d07      	ldr	r5, [pc, #28]	; (8006be0 <_read_r+0x20>)
 8006bc4:	4604      	mov	r4, r0
 8006bc6:	4608      	mov	r0, r1
 8006bc8:	4611      	mov	r1, r2
 8006bca:	2200      	movs	r2, #0
 8006bcc:	602a      	str	r2, [r5, #0]
 8006bce:	461a      	mov	r2, r3
 8006bd0:	f7fa f9ee 	bl	8000fb0 <_read>
 8006bd4:	1c43      	adds	r3, r0, #1
 8006bd6:	d102      	bne.n	8006bde <_read_r+0x1e>
 8006bd8:	682b      	ldr	r3, [r5, #0]
 8006bda:	b103      	cbz	r3, 8006bde <_read_r+0x1e>
 8006bdc:	6023      	str	r3, [r4, #0]
 8006bde:	bd38      	pop	{r3, r4, r5, pc}
 8006be0:	200003a0 	.word	0x200003a0

08006be4 <_init>:
 8006be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006be6:	bf00      	nop
 8006be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bea:	bc08      	pop	{r3}
 8006bec:	469e      	mov	lr, r3
 8006bee:	4770      	bx	lr

08006bf0 <_fini>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	bf00      	nop
 8006bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006bf6:	bc08      	pop	{r3}
 8006bf8:	469e      	mov	lr, r3
 8006bfa:	4770      	bx	lr
