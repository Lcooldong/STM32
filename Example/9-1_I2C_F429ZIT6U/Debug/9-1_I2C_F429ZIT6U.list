
9-1_I2C_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007528  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080076d8  080076d8  000176d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077bc  080077bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c4  080077c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c8  080077c8  000177c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080077cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000394  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000404  20000404  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e7d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033f5  00000000  00000000  00038f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f8  00000000  00000000  0003c318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000011a8  00000000  00000000  0003d610  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279fe  00000000  00000000  0003e7b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001928c  00000000  00000000  000661b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ebf0b  00000000  00000000  0007f442  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0016b34d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000057b8  00000000  00000000  0016b3a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000070 	.word	0x20000070
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080076c0 	.word	0x080076c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000074 	.word	0x20000074
 80001ec:	080076c0 	.word	0x080076c0

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ea:	f001 fa69 	bl	8001ac0 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f4:	f000 fc2c 	bl	8000e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000600:	2304      	movs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <MX_ADC1_Init+0xec>)
 800060a:	f001 fa9d 	bl	8001b48 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000614:	f000 fc1c 	bl	8000e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_ADC1_Init+0xec>)
 8000626:	f001 fa8f 	bl	8001b48 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000630:	f000 fc0e 	bl	8000e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000634:	230d      	movs	r3, #13
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xec>)
 8000642:	f001 fa81 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800064c:	f000 fc00 	bl	8000e50 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000650:	2309      	movs	r3, #9
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xec>)
 800065e:	f001 fa73 	bl	8001b48 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000668:	f000 fbf2 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000098 	.word	0x20000098
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230d      	movs	r3, #13
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f002 f949 	bl	80029a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f002 f93d 	bl	80029a0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f001 fd9c 	bl	80022a8 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f000 fb6b 	bl	8000e50 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	200000e0 	.word	0x200000e0
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_DAC_Init+0x50>)
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007be:	f001 fd02 	bl	80021c6 <HAL_DAC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c8:	f000 fb42 	bl	8000e50 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007dc:	f001 fd15 	bl	800220a <HAL_DAC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e6:	f000 fb33 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000140 	.word	0x20000140
 80007f8:	40007400 	.word	0x40007400

080007fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_DAC_MspInit+0x7c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d127      	bne.n	800086e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_DAC_MspInit+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000856:	2310      	movs	r3, #16
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_DAC_MspInit+0x84>)
 800086a:	f002 f899 	bl	80029a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40007400 	.word	0x40007400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <MX_DMA_Init+0x3c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b09      	ldr	r3, [pc, #36]	; (80008c0 <MX_DMA_Init+0x3c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2038      	movs	r0, #56	; 0x38
 80008ac:	f001 fc55 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b0:	2038      	movs	r0, #56	; 0x38
 80008b2:	f001 fc6e 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	40023800 	.word	0x40023800

080008c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b08c      	sub	sp, #48	; 0x30
 80008c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	61bb      	str	r3, [r7, #24]
 80008de:	4b52      	ldr	r3, [pc, #328]	; (8000a28 <MX_GPIO_Init+0x164>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	4a51      	ldr	r2, [pc, #324]	; (8000a28 <MX_GPIO_Init+0x164>)
 80008e4:	f043 0310 	orr.w	r3, r3, #16
 80008e8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ea:	4b4f      	ldr	r3, [pc, #316]	; (8000a28 <MX_GPIO_Init+0x164>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	f003 0310 	and.w	r3, r3, #16
 80008f2:	61bb      	str	r3, [r7, #24]
 80008f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	4b4b      	ldr	r3, [pc, #300]	; (8000a28 <MX_GPIO_Init+0x164>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	4a4a      	ldr	r2, [pc, #296]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000900:	f043 0320 	orr.w	r3, r3, #32
 8000904:	6313      	str	r3, [r2, #48]	; 0x30
 8000906:	4b48      	ldr	r3, [pc, #288]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	f003 0320 	and.w	r3, r3, #32
 800090e:	617b      	str	r3, [r7, #20]
 8000910:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b44      	ldr	r3, [pc, #272]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a43      	ldr	r2, [pc, #268]	; (8000a28 <MX_GPIO_Init+0x164>)
 800091c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b3d      	ldr	r3, [pc, #244]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b3a      	ldr	r3, [pc, #232]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b36      	ldr	r3, [pc, #216]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a35      	ldr	r2, [pc, #212]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b33      	ldr	r3, [pc, #204]	; (8000a28 <MX_GPIO_Init+0x164>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <MX_GPIO_Init+0x164>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a2e      	ldr	r2, [pc, #184]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	603b      	str	r3, [r7, #0]
 8000986:	4b28      	ldr	r3, [pc, #160]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a27      	ldr	r2, [pc, #156]	; (8000a28 <MX_GPIO_Init+0x164>)
 800098c:	f043 0308 	orr.w	r3, r3, #8
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <MX_GPIO_Init+0x164>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0308 	and.w	r3, r3, #8
 800099a:	603b      	str	r3, [r7, #0]
 800099c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	f244 0181 	movw	r1, #16513	; 0x4081
 80009a4:	4821      	ldr	r0, [pc, #132]	; (8000a2c <MX_GPIO_Init+0x168>)
 80009a6:	f002 f9a7 	bl	8002cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80009aa:	2308      	movs	r3, #8
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ae:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009b8:	f107 031c 	add.w	r3, r7, #28
 80009bc:	4619      	mov	r1, r3
 80009be:	481c      	ldr	r0, [pc, #112]	; (8000a30 <MX_GPIO_Init+0x16c>)
 80009c0:	f001 ffee 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80009c4:	f244 0381 	movw	r3, #16513	; 0x4081
 80009c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ca:	2301      	movs	r3, #1
 80009cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ce:	2300      	movs	r3, #0
 80009d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d2:	2300      	movs	r3, #0
 80009d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d6:	f107 031c 	add.w	r3, r7, #28
 80009da:	4619      	mov	r1, r3
 80009dc:	4813      	ldr	r0, [pc, #76]	; (8000a2c <MX_GPIO_Init+0x168>)
 80009de:	f001 ffdf 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009e8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009ee:	2302      	movs	r3, #2
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009f2:	f107 031c 	add.w	r3, r7, #28
 80009f6:	4619      	mov	r1, r3
 80009f8:	480e      	ldr	r0, [pc, #56]	; (8000a34 <MX_GPIO_Init+0x170>)
 80009fa:	f001 ffd1 	bl	80029a0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80009fe:	2200      	movs	r2, #0
 8000a00:	2100      	movs	r1, #0
 8000a02:	2009      	movs	r0, #9
 8000a04:	f001 fba9 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a08:	2009      	movs	r0, #9
 8000a0a:	f001 fbc2 	bl	8002192 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	2028      	movs	r0, #40	; 0x28
 8000a14:	f001 fba1 	bl	800215a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a18:	2028      	movs	r0, #40	; 0x28
 8000a1a:	f001 fbba 	bl	8002192 <HAL_NVIC_EnableIRQ>

}
 8000a1e:	bf00      	nop
 8000a20:	3730      	adds	r7, #48	; 0x30
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020400 	.word	0x40020400
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40020c00 	.word	0x40020c00

08000a38 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a3c:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a3e:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <MX_I2C1_Init+0x78>)
 8000a40:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a42:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a44:	4a1b      	ldr	r2, [pc, #108]	; (8000ab4 <MX_I2C1_Init+0x7c>)
 8000a46:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a48:	4b18      	ldr	r3, [pc, #96]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a4e:	4b17      	ldr	r3, [pc, #92]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a54:	4b15      	ldr	r3, [pc, #84]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a56:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a5a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a5c:	4b13      	ldr	r3, [pc, #76]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a62:	4b12      	ldr	r3, [pc, #72]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a68:	4b10      	ldr	r3, [pc, #64]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a6e:	4b0f      	ldr	r3, [pc, #60]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a74:	480d      	ldr	r0, [pc, #52]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a76:	f002 f97d 	bl	8002d74 <HAL_I2C_Init>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a80:	f000 f9e6 	bl	8000e50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a84:	2100      	movs	r1, #0
 8000a86:	4809      	ldr	r0, [pc, #36]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a88:	f003 f933 	bl	8003cf2 <HAL_I2CEx_ConfigAnalogFilter>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000a92:	f000 f9dd 	bl	8000e50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a96:	2100      	movs	r1, #0
 8000a98:	4804      	ldr	r0, [pc, #16]	; (8000aac <MX_I2C1_Init+0x74>)
 8000a9a:	f003 f966 	bl	8003d6a <HAL_I2CEx_ConfigDigitalFilter>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d001      	beq.n	8000aa8 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000aa4:	f000 f9d4 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000aa8:	bf00      	nop
 8000aaa:	bd80      	pop	{r7, pc}
 8000aac:	20000154 	.word	0x20000154
 8000ab0:	40005400 	.word	0x40005400
 8000ab4:	00061a80 	.word	0x00061a80

08000ab8 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000abc:	4b1b      	ldr	r3, [pc, #108]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000abe:	4a1c      	ldr	r2, [pc, #112]	; (8000b30 <MX_I2C2_Init+0x78>)
 8000ac0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ac2:	4b1a      	ldr	r3, [pc, #104]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000ac4:	4a1b      	ldr	r2, [pc, #108]	; (8000b34 <MX_I2C2_Init+0x7c>)
 8000ac6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ac8:	4b18      	ldr	r3, [pc, #96]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ace:	4b17      	ldr	r3, [pc, #92]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ad4:	4b15      	ldr	r3, [pc, #84]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000ad6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ada:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000adc:	4b13      	ldr	r3, [pc, #76]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000ae2:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ae8:	4b10      	ldr	r3, [pc, #64]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aee:	4b0f      	ldr	r3, [pc, #60]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000af4:	480d      	ldr	r0, [pc, #52]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000af6:	f002 f93d 	bl	8002d74 <HAL_I2C_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b00:	f000 f9a6 	bl	8000e50 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	4809      	ldr	r0, [pc, #36]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000b08:	f003 f8f3 	bl	8003cf2 <HAL_I2CEx_ConfigAnalogFilter>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b12:	f000 f99d 	bl	8000e50 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4804      	ldr	r0, [pc, #16]	; (8000b2c <MX_I2C2_Init+0x74>)
 8000b1a:	f003 f926 	bl	8003d6a <HAL_I2CEx_ConfigDigitalFilter>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b24:	f000 f994 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	200001a8 	.word	0x200001a8
 8000b30:	40005800 	.word	0x40005800
 8000b34:	000186a0 	.word	0x000186a0

08000b38 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08c      	sub	sp, #48	; 0x30
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b40:	f107 031c 	add.w	r3, r7, #28
 8000b44:	2200      	movs	r2, #0
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	605a      	str	r2, [r3, #4]
 8000b4a:	609a      	str	r2, [r3, #8]
 8000b4c:	60da      	str	r2, [r3, #12]
 8000b4e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a32      	ldr	r2, [pc, #200]	; (8000c20 <HAL_I2C_MspInit+0xe8>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d12d      	bne.n	8000bb6 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
 8000b5e:	4b31      	ldr	r3, [pc, #196]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	4a30      	ldr	r2, [pc, #192]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	; 0x30
 8000b6a:	4b2e      	ldr	r3, [pc, #184]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]
 8000b74:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b76:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b7c:	2312      	movs	r3, #18
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b88:	2304      	movs	r3, #4
 8000b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 031c 	add.w	r3, r7, #28
 8000b90:	4619      	mov	r1, r3
 8000b92:	4825      	ldr	r0, [pc, #148]	; (8000c28 <HAL_I2C_MspInit+0xf0>)
 8000b94:	f001 ff04 	bl	80029a0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b98:	2300      	movs	r3, #0
 8000b9a:	617b      	str	r3, [r7, #20]
 8000b9c:	4b21      	ldr	r3, [pc, #132]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	4a20      	ldr	r2, [pc, #128]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba8:	4b1e      	ldr	r3, [pc, #120]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bb4:	e030      	b.n	8000c18 <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a1c      	ldr	r2, [pc, #112]	; (8000c2c <HAL_I2C_MspInit+0xf4>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d12b      	bne.n	8000c18 <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	613b      	str	r3, [r7, #16]
 8000bc4:	4b17      	ldr	r3, [pc, #92]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a16      	ldr	r2, [pc, #88]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000bca:	f043 0320 	orr.w	r3, r3, #32
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b14      	ldr	r3, [pc, #80]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0320 	and.w	r3, r3, #32
 8000bd8:	613b      	str	r3, [r7, #16]
 8000bda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000be0:	2312      	movs	r3, #18
 8000be2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bec:	2304      	movs	r3, #4
 8000bee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bf0:	f107 031c 	add.w	r3, r7, #28
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480e      	ldr	r0, [pc, #56]	; (8000c30 <HAL_I2C_MspInit+0xf8>)
 8000bf8:	f001 fed2 	bl	80029a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	60fb      	str	r3, [r7, #12]
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c04:	4a07      	ldr	r2, [pc, #28]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000c06:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c0a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c0c:	4b05      	ldr	r3, [pc, #20]	; (8000c24 <HAL_I2C_MspInit+0xec>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c10:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
}
 8000c18:	bf00      	nop
 8000c1a:	3730      	adds	r7, #48	; 0x30
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40005400 	.word	0x40005400
 8000c24:	40023800 	.word	0x40023800
 8000c28:	40020400 	.word	0x40020400
 8000c2c:	40005800 	.word	0x40005800
 8000c30:	40021400 	.word	0x40021400

08000c34 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10)==HAL_OK) return len;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	230a      	movs	r3, #10
 8000c46:	68b9      	ldr	r1, [r7, #8]
 8000c48:	4806      	ldr	r0, [pc, #24]	; (8000c64 <_write+0x30>)
 8000c4a:	f004 fcc4 	bl	80055d6 <HAL_UART_Transmit>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d101      	bne.n	8000c58 <_write+0x24>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	e000      	b.n	8000c5a <_write+0x26>
	else return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	3710      	adds	r7, #16
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	200003ac 	.word	0x200003ac

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b5b0      	push	{r4, r5, r7, lr}
 8000c6a:	b08e      	sub	sp, #56	; 0x38
 8000c6c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6e:	f000 feb5 	bl	80019dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c72:	f000 f87d 	bl	8000d70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c76:	f7ff fe25 	bl	80008c4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c7a:	f000 fe0b 	bl	8001894 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000c7e:	f7ff fedb 	bl	8000a38 <MX_I2C1_Init>
  MX_TIM7_Init();
 8000c82:	f000 fc11 	bl	80014a8 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000c86:	f000 fa83 	bl	8001190 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c8a:	f000 faf7 	bl	800127c <MX_TIM4_Init>
  MX_TIM10_Init();
 8000c8e:	f000 fc41 	bl	8001514 <MX_TIM10_Init>
  MX_TIM2_Init();
 8000c92:	f000 fa07 	bl	80010a4 <MX_TIM2_Init>
  MX_DMA_Init();
 8000c96:	f7ff fdf5 	bl	8000884 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c9a:	f7ff fc75 	bl	8000588 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000c9e:	f000 fb81 	bl	80013a4 <MX_TIM5_Init>
  MX_DAC_Init();
 8000ca2:	f7ff fd81 	bl	80007a8 <MX_DAC_Init>
  MX_I2C2_Init();
 8000ca6:	f7ff ff07 	bl	8000ab8 <MX_I2C2_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t str[20];
  uint8_t eeprom[10] = {0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99};
 8000caa:	4a2d      	ldr	r2, [pc, #180]	; (8000d60 <main+0xf8>)
 8000cac:	1d3b      	adds	r3, r7, #4
 8000cae:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cb0:	c303      	stmia	r3!, {r0, r1}
 8000cb2:	801a      	strh	r2, [r3, #0]

  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 8000cb4:	230a      	movs	r3, #10
 8000cb6:	9302      	str	r3, [sp, #8]
 8000cb8:	230a      	movs	r3, #10
 8000cba:	9301      	str	r3, [sp, #4]
 8000cbc:	1d3b      	adds	r3, r7, #4
 8000cbe:	9300      	str	r3, [sp, #0]
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	21a0      	movs	r1, #160	; 0xa0
 8000cc6:	4827      	ldr	r0, [pc, #156]	; (8000d64 <main+0xfc>)
 8000cc8:	f002 f998 	bl	8002ffc <HAL_I2C_Mem_Write>

  for(int i=0; i< 10; i++) eeprom[i] = 0x00;	// initialize
 8000ccc:	2300      	movs	r3, #0
 8000cce:	627b      	str	r3, [r7, #36]	; 0x24
 8000cd0:	e007      	b.n	8000ce2 <main+0x7a>
 8000cd2:	1d3a      	adds	r2, r7, #4
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	4413      	add	r3, r2
 8000cd8:	2200      	movs	r2, #0
 8000cda:	701a      	strb	r2, [r3, #0]
 8000cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cde:	3301      	adds	r3, #1
 8000ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8000ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	ddf4      	ble.n	8000cd2 <main+0x6a>

  sprintf((char*)str, "%02x %02x %02x %02x %02x" ,eeprom[0], eeprom[1], eeprom[2], eeprom[3], eeprom[4]);
 8000ce8:	793b      	ldrb	r3, [r7, #4]
 8000cea:	461c      	mov	r4, r3
 8000cec:	797b      	ldrb	r3, [r7, #5]
 8000cee:	461d      	mov	r5, r3
 8000cf0:	79bb      	ldrb	r3, [r7, #6]
 8000cf2:	79fa      	ldrb	r2, [r7, #7]
 8000cf4:	7a39      	ldrb	r1, [r7, #8]
 8000cf6:	f107 0010 	add.w	r0, r7, #16
 8000cfa:	9102      	str	r1, [sp, #8]
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	462b      	mov	r3, r5
 8000d02:	4622      	mov	r2, r4
 8000d04:	4918      	ldr	r1, [pc, #96]	; (8000d68 <main+0x100>)
 8000d06:	f005 fbcb 	bl	80064a0 <siprintf>

  printf("%s", str);
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4619      	mov	r1, r3
 8000d10:	4816      	ldr	r0, [pc, #88]	; (8000d6c <main+0x104>)
 8000d12:	f005 fbad 	bl	8006470 <iprintf>

  sprintf((char*)str, "%02x %02x %02x %02x %02x" ,eeprom[5], eeprom[6], eeprom[7], eeprom[8], eeprom[9]);
 8000d16:	7a7b      	ldrb	r3, [r7, #9]
 8000d18:	461c      	mov	r4, r3
 8000d1a:	7abb      	ldrb	r3, [r7, #10]
 8000d1c:	461d      	mov	r5, r3
 8000d1e:	7afb      	ldrb	r3, [r7, #11]
 8000d20:	7b3a      	ldrb	r2, [r7, #12]
 8000d22:	7b79      	ldrb	r1, [r7, #13]
 8000d24:	f107 0010 	add.w	r0, r7, #16
 8000d28:	9102      	str	r1, [sp, #8]
 8000d2a:	9201      	str	r2, [sp, #4]
 8000d2c:	9300      	str	r3, [sp, #0]
 8000d2e:	462b      	mov	r3, r5
 8000d30:	4622      	mov	r2, r4
 8000d32:	490d      	ldr	r1, [pc, #52]	; (8000d68 <main+0x100>)
 8000d34:	f005 fbb4 	bl	80064a0 <siprintf>

  printf("%s", str);
 8000d38:	f107 0310 	add.w	r3, r7, #16
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480b      	ldr	r0, [pc, #44]	; (8000d6c <main+0x104>)
 8000d40:	f005 fb96 	bl	8006470 <iprintf>

  HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0x00, I2C_MEMADD_SIZE_8BIT, &eeprom[0], 10, 10);
 8000d44:	230a      	movs	r3, #10
 8000d46:	9302      	str	r3, [sp, #8]
 8000d48:	230a      	movs	r3, #10
 8000d4a:	9301      	str	r3, [sp, #4]
 8000d4c:	1d3b      	adds	r3, r7, #4
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	2301      	movs	r3, #1
 8000d52:	2200      	movs	r2, #0
 8000d54:	21a0      	movs	r1, #160	; 0xa0
 8000d56:	4803      	ldr	r0, [pc, #12]	; (8000d64 <main+0xfc>)
 8000d58:	f002 fa4a 	bl	80031f0 <HAL_I2C_Mem_Read>
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <main+0xf4>
 8000d5e:	bf00      	nop
 8000d60:	080076f8 	.word	0x080076f8
 8000d64:	20000154 	.word	0x20000154
 8000d68:	080076d8 	.word	0x080076d8
 8000d6c:	080076f4 	.word	0x080076f4

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b094      	sub	sp, #80	; 0x50
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0320 	add.w	r3, r7, #32
 8000d7a:	2230      	movs	r2, #48	; 0x30
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f005 fb6e 	bl	8006460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	f107 030c 	add.w	r3, r7, #12
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
 8000d92:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d94:	2300      	movs	r3, #0
 8000d96:	60bb      	str	r3, [r7, #8]
 8000d98:	4b2b      	ldr	r3, [pc, #172]	; (8000e48 <SystemClock_Config+0xd8>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	4a2a      	ldr	r2, [pc, #168]	; (8000e48 <SystemClock_Config+0xd8>)
 8000d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000da2:	6413      	str	r3, [r2, #64]	; 0x40
 8000da4:	4b28      	ldr	r3, [pc, #160]	; (8000e48 <SystemClock_Config+0xd8>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dac:	60bb      	str	r3, [r7, #8]
 8000dae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b25      	ldr	r3, [pc, #148]	; (8000e4c <SystemClock_Config+0xdc>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <SystemClock_Config+0xdc>)
 8000dba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dbe:	6013      	str	r3, [r2, #0]
 8000dc0:	4b22      	ldr	r3, [pc, #136]	; (8000e4c <SystemClock_Config+0xdc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000dd0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000de0:	2304      	movs	r3, #4
 8000de2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000de4:	23b4      	movs	r3, #180	; 0xb4
 8000de6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000de8:	2302      	movs	r3, #2
 8000dea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dec:	2304      	movs	r3, #4
 8000dee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000df0:	f107 0320 	add.w	r3, r7, #32
 8000df4:	4618      	mov	r0, r3
 8000df6:	f003 f847 	bl	8003e88 <HAL_RCC_OscConfig>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000e00:	f000 f826 	bl	8000e50 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e04:	f002 fff0 	bl	8003de8 <HAL_PWREx_EnableOverDrive>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000e0e:	f000 f81f 	bl	8000e50 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e12:	230f      	movs	r3, #15
 8000e14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e16:	2302      	movs	r3, #2
 8000e18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2105      	movs	r1, #5
 8000e30:	4618      	mov	r0, r3
 8000e32:	f003 faa1 	bl	8004378 <HAL_RCC_ClockConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000e3c:	f000 f808 	bl	8000e50 <Error_Handler>
  }
}
 8000e40:	bf00      	nop
 8000e42:	3750      	adds	r7, #80	; 0x50
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40007000 	.word	0x40007000

08000e50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e54:	b672      	cpsid	i
}
 8000e56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e58:	e7fe      	b.n	8000e58 <Error_Handler+0x8>
	...

08000e5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e70:	6453      	str	r3, [r2, #68]	; 0x44
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	2300      	movs	r3, #0
 8000e80:	603b      	str	r3, [r7, #0]
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e86:	4a08      	ldr	r2, [pc, #32]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8e:	4b06      	ldr	r3, [pc, #24]	; (8000ea8 <HAL_MspInit+0x4c>)
 8000e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e96:	603b      	str	r3, [r7, #0]
 8000e98:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <NMI_Handler+0x4>

08000eb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb6:	e7fe      	b.n	8000eb6 <HardFault_Handler+0x4>

08000eb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ebc:	e7fe      	b.n	8000ebc <MemManage_Handler+0x4>

08000ebe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ec2:	e7fe      	b.n	8000ec2 <BusFault_Handler+0x4>

08000ec4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec8:	e7fe      	b.n	8000ec8 <UsageFault_Handler+0x4>

08000eca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ece:	bf00      	nop
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef8:	f000 fdc2 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}

08000f00 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000f04:	2008      	movs	r0, #8
 8000f06:	f001 ff11 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000f14:	4802      	ldr	r0, [pc, #8]	; (8000f20 <TIM4_IRQHandler+0x10>)
 8000f16:	f003 fcd3 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	200001fc 	.word	0x200001fc

08000f24 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <USART3_IRQHandler+0x10>)
 8000f2a:	f004 fbe7 	bl	80056fc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200003ac 	.word	0x200003ac

08000f38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8000f3c:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000f40:	f001 fef4 	bl	8002d2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8000f4c:	4802      	ldr	r0, [pc, #8]	; (8000f58 <TIM7_IRQHandler+0x10>)
 8000f4e:	f003 fcb7 	bl	80048c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	20000364 	.word	0x20000364

08000f5c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <DMA2_Stream0_IRQHandler+0x10>)
 8000f62:	f001 fae1 	bl	8002528 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200000e0 	.word	0x200000e0

08000f70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
	}

return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
	return -1;
 8000fb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	370c      	adds	r7, #12
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc0:	4770      	bx	lr

08000fc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fc2:	b480      	push	{r7}
 8000fc4:	b083      	sub	sp, #12
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
 8000fca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fd2:	605a      	str	r2, [r3, #4]
	return 0;
 8000fd4:	2300      	movs	r3, #0
}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	370c      	adds	r7, #12
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <_isatty>:

int _isatty(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
	return 1;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff6:	4770      	bx	lr

08000ff8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
	return 0;
 8001004:	2300      	movs	r3, #0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3714      	adds	r7, #20
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
	...

08001014 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800101c:	4a14      	ldr	r2, [pc, #80]	; (8001070 <_sbrk+0x5c>)
 800101e:	4b15      	ldr	r3, [pc, #84]	; (8001074 <_sbrk+0x60>)
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001028:	4b13      	ldr	r3, [pc, #76]	; (8001078 <_sbrk+0x64>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2b00      	cmp	r3, #0
 800102e:	d102      	bne.n	8001036 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001030:	4b11      	ldr	r3, [pc, #68]	; (8001078 <_sbrk+0x64>)
 8001032:	4a12      	ldr	r2, [pc, #72]	; (800107c <_sbrk+0x68>)
 8001034:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001036:	4b10      	ldr	r3, [pc, #64]	; (8001078 <_sbrk+0x64>)
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4413      	add	r3, r2
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	429a      	cmp	r2, r3
 8001042:	d207      	bcs.n	8001054 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001044:	f005 f9e2 	bl	800640c <__errno>
 8001048:	4603      	mov	r3, r0
 800104a:	220c      	movs	r2, #12
 800104c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800104e:	f04f 33ff 	mov.w	r3, #4294967295
 8001052:	e009      	b.n	8001068 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001054:	4b08      	ldr	r3, [pc, #32]	; (8001078 <_sbrk+0x64>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105a:	4b07      	ldr	r3, [pc, #28]	; (8001078 <_sbrk+0x64>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4413      	add	r3, r2
 8001062:	4a05      	ldr	r2, [pc, #20]	; (8001078 <_sbrk+0x64>)
 8001064:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001066:	68fb      	ldr	r3, [r7, #12]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3718      	adds	r7, #24
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	20030000 	.word	0x20030000
 8001074:	00000400 	.word	0x00000400
 8001078:	2000008c 	.word	0x2000008c
 800107c:	20000408 	.word	0x20000408

08001080 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <SystemInit+0x20>)
 8001086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108a:	4a05      	ldr	r2, [pc, #20]	; (80010a0 <SystemInit+0x20>)
 800108c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001090:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	e000ed00 	.word	0xe000ed00

080010a4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	; 0x38
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	f107 0320 	add.w	r3, r7, #32
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c2:	1d3b      	adds	r3, r7, #4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
 80010d0:	615a      	str	r2, [r3, #20]
 80010d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010d4:	4b2d      	ldr	r3, [pc, #180]	; (800118c <MX_TIM2_Init+0xe8>)
 80010d6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010da:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80010dc:	4b2b      	ldr	r3, [pc, #172]	; (800118c <MX_TIM2_Init+0xe8>)
 80010de:	22b3      	movs	r2, #179	; 0xb3
 80010e0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e2:	4b2a      	ldr	r3, [pc, #168]	; (800118c <MX_TIM2_Init+0xe8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80010e8:	4b28      	ldr	r3, [pc, #160]	; (800118c <MX_TIM2_Init+0xe8>)
 80010ea:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010ee:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b26      	ldr	r3, [pc, #152]	; (800118c <MX_TIM2_Init+0xe8>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f6:	4b25      	ldr	r3, [pc, #148]	; (800118c <MX_TIM2_Init+0xe8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010fc:	4823      	ldr	r0, [pc, #140]	; (800118c <MX_TIM2_Init+0xe8>)
 80010fe:	f003 fb37 	bl	8004770 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001108:	f7ff fea2 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001116:	4619      	mov	r1, r3
 8001118:	481c      	ldr	r0, [pc, #112]	; (800118c <MX_TIM2_Init+0xe8>)
 800111a:	f003 fd9b 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001124:	f7ff fe94 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001128:	4818      	ldr	r0, [pc, #96]	; (800118c <MX_TIM2_Init+0xe8>)
 800112a:	f003 fb70 	bl	800480e <HAL_TIM_PWM_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001134:	f7ff fe8c 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001140:	f107 0320 	add.w	r3, r7, #32
 8001144:	4619      	mov	r1, r3
 8001146:	4811      	ldr	r0, [pc, #68]	; (800118c <MX_TIM2_Init+0xe8>)
 8001148:	f004 f968 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001152:	f7ff fe7d 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2360      	movs	r3, #96	; 0x60
 8001158:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800115a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800115e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001160:	2300      	movs	r3, #0
 8001162:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001164:	2300      	movs	r3, #0
 8001166:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001168:	1d3b      	adds	r3, r7, #4
 800116a:	2200      	movs	r2, #0
 800116c:	4619      	mov	r1, r3
 800116e:	4807      	ldr	r0, [pc, #28]	; (800118c <MX_TIM2_Init+0xe8>)
 8001170:	f003 fcae 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800117a:	f7ff fe69 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800117e:	4803      	ldr	r0, [pc, #12]	; (800118c <MX_TIM2_Init+0xe8>)
 8001180:	f000 fab2 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 8001184:	bf00      	nop
 8001186:	3738      	adds	r7, #56	; 0x38
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	2000031c 	.word	0x2000031c

08001190 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001196:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]
 800119e:	605a      	str	r2, [r3, #4]
 80011a0:	609a      	str	r2, [r3, #8]
 80011a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011a4:	f107 0320 	add.w	r3, r7, #32
 80011a8:	2200      	movs	r2, #0
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011ae:	1d3b      	adds	r3, r7, #4
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
 80011b6:	609a      	str	r2, [r3, #8]
 80011b8:	60da      	str	r2, [r3, #12]
 80011ba:	611a      	str	r2, [r3, #16]
 80011bc:	615a      	str	r2, [r3, #20]
 80011be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80011c0:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011c2:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <MX_TIM3_Init+0xe8>)
 80011c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011c8:	2208      	movs	r2, #8
 80011ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011cc:	4b29      	ldr	r3, [pc, #164]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011d4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80011d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011da:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80011e6:	4823      	ldr	r0, [pc, #140]	; (8001274 <MX_TIM3_Init+0xe4>)
 80011e8:	f003 fac2 	bl	8004770 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80011f2:	f7ff fe2d 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001200:	4619      	mov	r1, r3
 8001202:	481c      	ldr	r0, [pc, #112]	; (8001274 <MX_TIM3_Init+0xe4>)
 8001204:	f003 fd26 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800120e:	f7ff fe1f 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001212:	4818      	ldr	r0, [pc, #96]	; (8001274 <MX_TIM3_Init+0xe4>)
 8001214:	f003 fafb 	bl	800480e <HAL_TIM_PWM_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800121e:	f7ff fe17 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001222:	2300      	movs	r3, #0
 8001224:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800122a:	f107 0320 	add.w	r3, r7, #32
 800122e:	4619      	mov	r1, r3
 8001230:	4810      	ldr	r0, [pc, #64]	; (8001274 <MX_TIM3_Init+0xe4>)
 8001232:	f004 f8f3 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800123c:	f7ff fe08 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001240:	2360      	movs	r3, #96	; 0x60
 8001242:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	2200      	movs	r2, #0
 8001254:	4619      	mov	r1, r3
 8001256:	4807      	ldr	r0, [pc, #28]	; (8001274 <MX_TIM3_Init+0xe4>)
 8001258:	f003 fc3a 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001262:	f7ff fdf5 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001266:	4803      	ldr	r0, [pc, #12]	; (8001274 <MX_TIM3_Init+0xe4>)
 8001268:	f000 fa3e 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 800126c:	bf00      	nop
 800126e:	3738      	adds	r7, #56	; 0x38
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	200002d4 	.word	0x200002d4
 8001278:	40000400 	.word	0x40000400

0800127c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08e      	sub	sp, #56	; 0x38
 8001280:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001290:	f107 0320 	add.w	r3, r7, #32
 8001294:	2200      	movs	r2, #0
 8001296:	601a      	str	r2, [r3, #0]
 8001298:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800129a:	1d3b      	adds	r3, r7, #4
 800129c:	2200      	movs	r2, #0
 800129e:	601a      	str	r2, [r3, #0]
 80012a0:	605a      	str	r2, [r3, #4]
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	60da      	str	r2, [r3, #12]
 80012a6:	611a      	str	r2, [r3, #16]
 80012a8:	615a      	str	r2, [r3, #20]
 80012aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <MX_TIM4_Init+0x120>)
 80012ae:	4a3c      	ldr	r2, [pc, #240]	; (80013a0 <MX_TIM4_Init+0x124>)
 80012b0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80012b2:	4b3a      	ldr	r3, [pc, #232]	; (800139c <MX_TIM4_Init+0x120>)
 80012b4:	2211      	movs	r2, #17
 80012b6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <MX_TIM4_Init+0x120>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80012be:	4b37      	ldr	r3, [pc, #220]	; (800139c <MX_TIM4_Init+0x120>)
 80012c0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80012c4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c6:	4b35      	ldr	r3, [pc, #212]	; (800139c <MX_TIM4_Init+0x120>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012cc:	4b33      	ldr	r3, [pc, #204]	; (800139c <MX_TIM4_Init+0x120>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80012d2:	4832      	ldr	r0, [pc, #200]	; (800139c <MX_TIM4_Init+0x120>)
 80012d4:	f003 fa4c 	bl	8004770 <HAL_TIM_Base_Init>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80012de:	f7ff fdb7 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80012e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012ec:	4619      	mov	r1, r3
 80012ee:	482b      	ldr	r0, [pc, #172]	; (800139c <MX_TIM4_Init+0x120>)
 80012f0:	f003 fcb0 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80012fa:	f7ff fda9 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80012fe:	4827      	ldr	r0, [pc, #156]	; (800139c <MX_TIM4_Init+0x120>)
 8001300:	f003 fa85 	bl	800480e <HAL_TIM_PWM_Init>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800130a:	f7ff fda1 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001316:	f107 0320 	add.w	r3, r7, #32
 800131a:	4619      	mov	r1, r3
 800131c:	481f      	ldr	r0, [pc, #124]	; (800139c <MX_TIM4_Init+0x120>)
 800131e:	f004 f87d 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001328:	f7ff fd92 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800132c:	2360      	movs	r3, #96	; 0x60
 800132e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001330:	f246 13a7 	movw	r3, #24999	; 0x61a7
 8001334:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001336:	2300      	movs	r3, #0
 8001338:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800133e:	1d3b      	adds	r3, r7, #4
 8001340:	2200      	movs	r2, #0
 8001342:	4619      	mov	r1, r3
 8001344:	4815      	ldr	r0, [pc, #84]	; (800139c <MX_TIM4_Init+0x120>)
 8001346:	f003 fbc3 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001350:	f7ff fd7e 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8001354:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001358:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800135a:	1d3b      	adds	r3, r7, #4
 800135c:	2204      	movs	r2, #4
 800135e:	4619      	mov	r1, r3
 8001360:	480e      	ldr	r0, [pc, #56]	; (800139c <MX_TIM4_Init+0x120>)
 8001362:	f003 fbb5 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 800136c:	f7ff fd70 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001370:	f641 4351 	movw	r3, #7249	; 0x1c51
 8001374:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2208      	movs	r2, #8
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	; (800139c <MX_TIM4_Init+0x120>)
 800137e:	f003 fba7 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001388:	f7ff fd62 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800138c:	4803      	ldr	r0, [pc, #12]	; (800139c <MX_TIM4_Init+0x120>)
 800138e:	f000 f9ab 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	; 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001fc 	.word	0x200001fc
 80013a0:	40000800 	.word	0x40000800

080013a4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	; 0x38
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	f107 0320 	add.w	r3, r7, #32
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013c2:	1d3b      	adds	r3, r7, #4
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
 80013ca:	609a      	str	r2, [r3, #8]
 80013cc:	60da      	str	r2, [r3, #12]
 80013ce:	611a      	str	r2, [r3, #16]
 80013d0:	615a      	str	r2, [r3, #20]
 80013d2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80013d4:	4b31      	ldr	r3, [pc, #196]	; (800149c <MX_TIM5_Init+0xf8>)
 80013d6:	4a32      	ldr	r2, [pc, #200]	; (80014a0 <MX_TIM5_Init+0xfc>)
 80013d8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80013da:	4b30      	ldr	r3, [pc, #192]	; (800149c <MX_TIM5_Init+0xf8>)
 80013dc:	2209      	movs	r2, #9
 80013de:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e0:	4b2e      	ldr	r3, [pc, #184]	; (800149c <MX_TIM5_Init+0xf8>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80013e6:	4b2d      	ldr	r3, [pc, #180]	; (800149c <MX_TIM5_Init+0xf8>)
 80013e8:	4a2e      	ldr	r2, [pc, #184]	; (80014a4 <MX_TIM5_Init+0x100>)
 80013ea:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ec:	4b2b      	ldr	r3, [pc, #172]	; (800149c <MX_TIM5_Init+0xf8>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	4b2a      	ldr	r3, [pc, #168]	; (800149c <MX_TIM5_Init+0xf8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80013f8:	4828      	ldr	r0, [pc, #160]	; (800149c <MX_TIM5_Init+0xf8>)
 80013fa:	f003 f9b9 	bl	8004770 <HAL_TIM_Base_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001404:	f7ff fd24 	bl	8000e50 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001408:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	4619      	mov	r1, r3
 8001414:	4821      	ldr	r0, [pc, #132]	; (800149c <MX_TIM5_Init+0xf8>)
 8001416:	f003 fc1d 	bl	8004c54 <HAL_TIM_ConfigClockSource>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001420:	f7ff fd16 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001424:	481d      	ldr	r0, [pc, #116]	; (800149c <MX_TIM5_Init+0xf8>)
 8001426:	f003 f9f2 	bl	800480e <HAL_TIM_PWM_Init>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001430:	f7ff fd0e 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800143c:	f107 0320 	add.w	r3, r7, #32
 8001440:	4619      	mov	r1, r3
 8001442:	4816      	ldr	r0, [pc, #88]	; (800149c <MX_TIM5_Init+0xf8>)
 8001444:	f003 ffea 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 800144e:	f7ff fcff 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001452:	2360      	movs	r3, #96	; 0x60
 8001454:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800145a:	2300      	movs	r3, #0
 800145c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001462:	1d3b      	adds	r3, r7, #4
 8001464:	2200      	movs	r2, #0
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <MX_TIM5_Init+0xf8>)
 800146a:	f003 fb31 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001474:	f7ff fcec 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001478:	1d3b      	adds	r3, r7, #4
 800147a:	220c      	movs	r2, #12
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	; (800149c <MX_TIM5_Init+0xf8>)
 8001480:	f003 fb26 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 800148a:	f7ff fce1 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <MX_TIM5_Init+0xf8>)
 8001490:	f000 f92a 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3738      	adds	r7, #56	; 0x38
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	2000028c 	.word	0x2000028c
 80014a0:	40000c00 	.word	0x40000c00
 80014a4:	0001869f 	.word	0x0001869f

080014a8 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ae:	463b      	mov	r3, r7
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80014b6:	4b15      	ldr	r3, [pc, #84]	; (800150c <MX_TIM7_Init+0x64>)
 80014b8:	4a15      	ldr	r2, [pc, #84]	; (8001510 <MX_TIM7_Init+0x68>)
 80014ba:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 80014bc:	4b13      	ldr	r3, [pc, #76]	; (800150c <MX_TIM7_Init+0x64>)
 80014be:	2208      	movs	r2, #8
 80014c0:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c2:	4b12      	ldr	r3, [pc, #72]	; (800150c <MX_TIM7_Init+0x64>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80014c8:	4b10      	ldr	r3, [pc, #64]	; (800150c <MX_TIM7_Init+0x64>)
 80014ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ce:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <MX_TIM7_Init+0x64>)
 80014d2:	2280      	movs	r2, #128	; 0x80
 80014d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80014d6:	480d      	ldr	r0, [pc, #52]	; (800150c <MX_TIM7_Init+0x64>)
 80014d8:	f003 f94a 	bl	8004770 <HAL_TIM_Base_Init>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80014e2:	f7ff fcb5 	bl	8000e50 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014e6:	2300      	movs	r3, #0
 80014e8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014ee:	463b      	mov	r3, r7
 80014f0:	4619      	mov	r1, r3
 80014f2:	4806      	ldr	r0, [pc, #24]	; (800150c <MX_TIM7_Init+0x64>)
 80014f4:	f003 ff92 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80014fe:	f7ff fca7 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	20000364 	.word	0x20000364
 8001510:	40001400 	.word	0x40001400

08001514 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b088      	sub	sp, #32
 8001518:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
 8001520:	605a      	str	r2, [r3, #4]
 8001522:	609a      	str	r2, [r3, #8]
 8001524:	60da      	str	r2, [r3, #12]
 8001526:	611a      	str	r2, [r3, #16]
 8001528:	615a      	str	r2, [r3, #20]
 800152a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 800152c:	4b1e      	ldr	r3, [pc, #120]	; (80015a8 <MX_TIM10_Init+0x94>)
 800152e:	4a1f      	ldr	r2, [pc, #124]	; (80015ac <MX_TIM10_Init+0x98>)
 8001530:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001532:	4b1d      	ldr	r3, [pc, #116]	; (80015a8 <MX_TIM10_Init+0x94>)
 8001534:	2247      	movs	r2, #71	; 0x47
 8001536:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001538:	4b1b      	ldr	r3, [pc, #108]	; (80015a8 <MX_TIM10_Init+0x94>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 800153e:	4b1a      	ldr	r3, [pc, #104]	; (80015a8 <MX_TIM10_Init+0x94>)
 8001540:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001544:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001546:	4b18      	ldr	r3, [pc, #96]	; (80015a8 <MX_TIM10_Init+0x94>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800154c:	4b16      	ldr	r3, [pc, #88]	; (80015a8 <MX_TIM10_Init+0x94>)
 800154e:	2200      	movs	r2, #0
 8001550:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001552:	4815      	ldr	r0, [pc, #84]	; (80015a8 <MX_TIM10_Init+0x94>)
 8001554:	f003 f90c 	bl	8004770 <HAL_TIM_Base_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800155e:	f7ff fc77 	bl	8000e50 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_TIM10_Init+0x94>)
 8001564:	f003 f953 	bl	800480e <HAL_TIM_PWM_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800156e:	f7ff fc6f 	bl	8000e50 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001576:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM10_Init+0x94>)
 800158c:	f003 faa0 	bl	8004ad0 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001596:	f7ff fc5b 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM10_Init+0x94>)
 800159c:	f000 f8a4 	bl	80016e8 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3720      	adds	r7, #32
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20000244 	.word	0x20000244
 80015ac:	40014400 	.word	0x40014400

080015b0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b088      	sub	sp, #32
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015c0:	d10e      	bne.n	80015e0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	4b42      	ldr	r3, [pc, #264]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	4a41      	ldr	r2, [pc, #260]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6413      	str	r3, [r2, #64]	; 0x40
 80015d2:	4b3f      	ldr	r3, [pc, #252]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	61fb      	str	r3, [r7, #28]
 80015dc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80015de:	e072      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a3b      	ldr	r2, [pc, #236]	; (80016d4 <HAL_TIM_Base_MspInit+0x124>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d10e      	bne.n	8001608 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
 80015ee:	4b38      	ldr	r3, [pc, #224]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	4a37      	ldr	r2, [pc, #220]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6413      	str	r3, [r2, #64]	; 0x40
 80015fa:	4b35      	ldr	r3, [pc, #212]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	61bb      	str	r3, [r7, #24]
 8001604:	69bb      	ldr	r3, [r7, #24]
}
 8001606:	e05e      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a32      	ldr	r2, [pc, #200]	; (80016d8 <HAL_TIM_Base_MspInit+0x128>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d116      	bne.n	8001640 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	617b      	str	r3, [r7, #20]
 8001616:	4b2e      	ldr	r3, [pc, #184]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161a:	4a2d      	ldr	r2, [pc, #180]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	6413      	str	r3, [r2, #64]	; 0x40
 8001622:	4b2b      	ldr	r3, [pc, #172]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	f003 0304 	and.w	r3, r3, #4
 800162a:	617b      	str	r3, [r7, #20]
 800162c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800162e:	2200      	movs	r2, #0
 8001630:	2100      	movs	r1, #0
 8001632:	201e      	movs	r0, #30
 8001634:	f000 fd91 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001638:	201e      	movs	r0, #30
 800163a:	f000 fdaa 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 800163e:	e042      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a25      	ldr	r2, [pc, #148]	; (80016dc <HAL_TIM_Base_MspInit+0x12c>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d10e      	bne.n	8001668 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800164a:	2300      	movs	r3, #0
 800164c:	613b      	str	r3, [r7, #16]
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	4a1f      	ldr	r2, [pc, #124]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001654:	f043 0308 	orr.w	r3, r3, #8
 8001658:	6413      	str	r3, [r2, #64]	; 0x40
 800165a:	4b1d      	ldr	r3, [pc, #116]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f003 0308 	and.w	r3, r3, #8
 8001662:	613b      	str	r3, [r7, #16]
 8001664:	693b      	ldr	r3, [r7, #16]
}
 8001666:	e02e      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a1c      	ldr	r2, [pc, #112]	; (80016e0 <HAL_TIM_Base_MspInit+0x130>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d116      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
 8001676:	4b16      	ldr	r3, [pc, #88]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	4a15      	ldr	r2, [pc, #84]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 800167c:	f043 0320 	orr.w	r3, r3, #32
 8001680:	6413      	str	r3, [r2, #64]	; 0x40
 8001682:	4b13      	ldr	r3, [pc, #76]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	f003 0320 	and.w	r3, r3, #32
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	2037      	movs	r0, #55	; 0x37
 8001694:	f000 fd61 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001698:	2037      	movs	r0, #55	; 0x37
 800169a:	f000 fd7a 	bl	8002192 <HAL_NVIC_EnableIRQ>
}
 800169e:	e012      	b.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0f      	ldr	r2, [pc, #60]	; (80016e4 <HAL_TIM_Base_MspInit+0x134>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10d      	bne.n	80016c6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_TIM_Base_MspInit+0x120>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
}
 80016c6:	bf00      	nop
 80016c8:	3720      	adds	r7, #32
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40000400 	.word	0x40000400
 80016d8:	40000800 	.word	0x40000800
 80016dc:	40000c00 	.word	0x40000c00
 80016e0:	40001400 	.word	0x40001400
 80016e4:	40014400 	.word	0x40014400

080016e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b08c      	sub	sp, #48	; 0x30
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001708:	d11e      	bne.n	8001748 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	61bb      	str	r3, [r7, #24]
 800170e:	4b58      	ldr	r3, [pc, #352]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a57      	ldr	r2, [pc, #348]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b55      	ldr	r3, [pc, #340]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	61bb      	str	r3, [r7, #24]
 8001724:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001726:	2320      	movs	r3, #32
 8001728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800172e:	2300      	movs	r3, #0
 8001730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001732:	2300      	movs	r3, #0
 8001734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001736:	2301      	movs	r3, #1
 8001738:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 031c 	add.w	r3, r7, #28
 800173e:	4619      	mov	r1, r3
 8001740:	484c      	ldr	r0, [pc, #304]	; (8001874 <HAL_TIM_MspPostInit+0x18c>)
 8001742:	f001 f92d 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001746:	e08f      	b.n	8001868 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4a      	ldr	r2, [pc, #296]	; (8001878 <HAL_TIM_MspPostInit+0x190>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d11e      	bne.n	8001790 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	617b      	str	r3, [r7, #20]
 8001756:	4b46      	ldr	r3, [pc, #280]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a45      	ldr	r2, [pc, #276]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 800175c:	f043 0304 	orr.w	r3, r3, #4
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0304 	and.w	r3, r3, #4
 800176a:	617b      	str	r3, [r7, #20]
 800176c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800176e:	2340      	movs	r3, #64	; 0x40
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800177e:	2302      	movs	r3, #2
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	483c      	ldr	r0, [pc, #240]	; (800187c <HAL_TIM_MspPostInit+0x194>)
 800178a:	f001 f909 	bl	80029a0 <HAL_GPIO_Init>
}
 800178e:	e06b      	b.n	8001868 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a3a      	ldr	r2, [pc, #232]	; (8001880 <HAL_TIM_MspPostInit+0x198>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d11f      	bne.n	80017da <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
 800179e:	4b34      	ldr	r3, [pc, #208]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	4a33      	ldr	r2, [pc, #204]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017a4:	f043 0308 	orr.w	r3, r3, #8
 80017a8:	6313      	str	r3, [r2, #48]	; 0x30
 80017aa:	4b31      	ldr	r3, [pc, #196]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ae:	f003 0308 	and.w	r3, r3, #8
 80017b2:	613b      	str	r3, [r7, #16]
 80017b4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80017b6:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017bc:	2302      	movs	r3, #2
 80017be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017c4:	2300      	movs	r3, #0
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80017c8:	2302      	movs	r3, #2
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017cc:	f107 031c 	add.w	r3, r7, #28
 80017d0:	4619      	mov	r1, r3
 80017d2:	482c      	ldr	r0, [pc, #176]	; (8001884 <HAL_TIM_MspPostInit+0x19c>)
 80017d4:	f001 f8e4 	bl	80029a0 <HAL_GPIO_Init>
}
 80017d8:	e046      	b.n	8001868 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a2a      	ldr	r2, [pc, #168]	; (8001888 <HAL_TIM_MspPostInit+0x1a0>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d11e      	bne.n	8001822 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017e4:	2300      	movs	r3, #0
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	4b21      	ldr	r3, [pc, #132]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ec:	4a20      	ldr	r2, [pc, #128]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017ee:	f043 0301 	orr.w	r3, r3, #1
 80017f2:	6313      	str	r3, [r2, #48]	; 0x30
 80017f4:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 80017f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f8:	f003 0301 	and.w	r3, r3, #1
 80017fc:	60fb      	str	r3, [r7, #12]
 80017fe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001800:	2309      	movs	r3, #9
 8001802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001804:	2302      	movs	r3, #2
 8001806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001810:	2302      	movs	r3, #2
 8001812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001814:	f107 031c 	add.w	r3, r7, #28
 8001818:	4619      	mov	r1, r3
 800181a:	4816      	ldr	r0, [pc, #88]	; (8001874 <HAL_TIM_MspPostInit+0x18c>)
 800181c:	f001 f8c0 	bl	80029a0 <HAL_GPIO_Init>
}
 8001820:	e022      	b.n	8001868 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_TIM_MspPostInit+0x1a4>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d11d      	bne.n	8001868 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	4a0e      	ldr	r2, [pc, #56]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	6313      	str	r3, [r2, #48]	; 0x30
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_TIM_MspPostInit+0x188>)
 800183e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001848:	2340      	movs	r3, #64	; 0x40
 800184a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001858:	2303      	movs	r3, #3
 800185a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	4619      	mov	r1, r3
 8001862:	480b      	ldr	r0, [pc, #44]	; (8001890 <HAL_TIM_MspPostInit+0x1a8>)
 8001864:	f001 f89c 	bl	80029a0 <HAL_GPIO_Init>
}
 8001868:	bf00      	nop
 800186a:	3730      	adds	r7, #48	; 0x30
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000
 8001878:	40000400 	.word	0x40000400
 800187c:	40020800 	.word	0x40020800
 8001880:	40000800 	.word	0x40000800
 8001884:	40020c00 	.word	0x40020c00
 8001888:	40000c00 	.word	0x40000c00
 800188c:	40014400 	.word	0x40014400
 8001890:	40021400 	.word	0x40021400

08001894 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 800189a:	4a12      	ldr	r2, [pc, #72]	; (80018e4 <MX_USART3_UART_Init+0x50>)
 800189c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800189e:	4b10      	ldr	r3, [pc, #64]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018a4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018ba:	220c      	movs	r2, #12
 80018bc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_USART3_UART_Init+0x4c>)
 80018cc:	f003 fe36 	bl	800553c <HAL_UART_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80018d6:	f7ff fabb 	bl	8000e50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200003ac 	.word	0x200003ac
 80018e4:	40004800 	.word	0x40004800

080018e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08a      	sub	sp, #40	; 0x28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 0314 	add.w	r3, r7, #20
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a1d      	ldr	r2, [pc, #116]	; (800197c <HAL_UART_MspInit+0x94>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d134      	bne.n	8001974 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b1c      	ldr	r3, [pc, #112]	; (8001980 <HAL_UART_MspInit+0x98>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a1b      	ldr	r2, [pc, #108]	; (8001980 <HAL_UART_MspInit+0x98>)
 8001914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b19      	ldr	r3, [pc, #100]	; (8001980 <HAL_UART_MspInit+0x98>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_UART_MspInit+0x98>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a14      	ldr	r2, [pc, #80]	; (8001980 <HAL_UART_MspInit+0x98>)
 8001930:	f043 0308 	orr.w	r3, r3, #8
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b12      	ldr	r3, [pc, #72]	; (8001980 <HAL_UART_MspInit+0x98>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0308 	and.w	r3, r3, #8
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001942:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001946:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001948:	2302      	movs	r3, #2
 800194a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194c:	2300      	movs	r3, #0
 800194e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001950:	2303      	movs	r3, #3
 8001952:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001954:	2307      	movs	r3, #7
 8001956:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001958:	f107 0314 	add.w	r3, r7, #20
 800195c:	4619      	mov	r1, r3
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <HAL_UART_MspInit+0x9c>)
 8001960:	f001 f81e 	bl	80029a0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001964:	2200      	movs	r2, #0
 8001966:	2100      	movs	r1, #0
 8001968:	2027      	movs	r0, #39	; 0x27
 800196a:	f000 fbf6 	bl	800215a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800196e:	2027      	movs	r0, #39	; 0x27
 8001970:	f000 fc0f 	bl	8002192 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001974:	bf00      	nop
 8001976:	3728      	adds	r7, #40	; 0x28
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	40004800 	.word	0x40004800
 8001980:	40023800 	.word	0x40023800
 8001984:	40020c00 	.word	0x40020c00

08001988 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001988:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019c0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800198c:	480d      	ldr	r0, [pc, #52]	; (80019c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800198e:	490e      	ldr	r1, [pc, #56]	; (80019c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001990:	4a0e      	ldr	r2, [pc, #56]	; (80019cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a0b      	ldr	r2, [pc, #44]	; (80019d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019a4:	4c0b      	ldr	r4, [pc, #44]	; (80019d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80019b2:	f7ff fb65 	bl	8001080 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019b6:	f004 fd2f 	bl	8006418 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80019ba:	f7ff f955 	bl	8000c68 <main>
  bx  lr    
 80019be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80019c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80019c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019cc:	080077cc 	.word	0x080077cc
  ldr r2, =_sbss
 80019d0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019d4:	20000404 	.word	0x20000404

080019d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80019d8:	e7fe      	b.n	80019d8 <ADC_IRQHandler>
	...

080019dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80019e0:	4b0e      	ldr	r3, [pc, #56]	; (8001a1c <HAL_Init+0x40>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a0d      	ldr	r2, [pc, #52]	; (8001a1c <HAL_Init+0x40>)
 80019e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80019ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019ec:	4b0b      	ldr	r3, [pc, #44]	; (8001a1c <HAL_Init+0x40>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <HAL_Init+0x40>)
 80019f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	; (8001a1c <HAL_Init+0x40>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	; (8001a1c <HAL_Init+0x40>)
 80019fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 fb9d 	bl	8002144 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fa24 	bl	8000e5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	; (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	; (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fbb5 	bl	80021ae <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 fb7d 	bl	800215a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	; (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_IncTick+0x20>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b06      	ldr	r3, [pc, #24]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a04      	ldr	r2, [pc, #16]	; (8001aa4 <HAL_IncTick+0x24>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	20000008 	.word	0x20000008
 8001aa4:	200003f0 	.word	0x200003f0

08001aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001aac:	4b03      	ldr	r3, [pc, #12]	; (8001abc <HAL_GetTick+0x14>)
 8001aae:	681b      	ldr	r3, [r3, #0]
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200003f0 	.word	0x200003f0

08001ac0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b084      	sub	sp, #16
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d101      	bne.n	8001ad6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e033      	b.n	8001b3e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d109      	bne.n	8001af2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7fe fdce 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2200      	movs	r2, #0
 8001aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d118      	bne.n	8001b30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001b06:	f023 0302 	bic.w	r3, r3, #2
 8001b0a:	f043 0202 	orr.w	r2, r3, #2
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f94a 	bl	8001dac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f023 0303 	bic.w	r3, r3, #3
 8001b26:	f043 0201 	orr.w	r2, r3, #1
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	641a      	str	r2, [r3, #64]	; 0x40
 8001b2e:	e001      	b.n	8001b34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d101      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1c>
 8001b60:	2302      	movs	r3, #2
 8001b62:	e113      	b.n	8001d8c <HAL_ADC_ConfigChannel+0x244>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	2b09      	cmp	r3, #9
 8001b72:	d925      	bls.n	8001bc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	68d9      	ldr	r1, [r3, #12]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	461a      	mov	r2, r3
 8001b82:	4613      	mov	r3, r2
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	4413      	add	r3, r2
 8001b88:	3b1e      	subs	r3, #30
 8001b8a:	2207      	movs	r2, #7
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43da      	mvns	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	400a      	ands	r2, r1
 8001b98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68d9      	ldr	r1, [r3, #12]
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	689a      	ldr	r2, [r3, #8]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	b29b      	uxth	r3, r3
 8001baa:	4618      	mov	r0, r3
 8001bac:	4603      	mov	r3, r0
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4403      	add	r3, r0
 8001bb2:	3b1e      	subs	r3, #30
 8001bb4:	409a      	lsls	r2, r3
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	430a      	orrs	r2, r1
 8001bbc:	60da      	str	r2, [r3, #12]
 8001bbe:	e022      	b.n	8001c06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	6919      	ldr	r1, [r3, #16]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	b29b      	uxth	r3, r3
 8001bcc:	461a      	mov	r2, r3
 8001bce:	4613      	mov	r3, r2
 8001bd0:	005b      	lsls	r3, r3, #1
 8001bd2:	4413      	add	r3, r2
 8001bd4:	2207      	movs	r2, #7
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	43da      	mvns	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	400a      	ands	r2, r1
 8001be2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	6919      	ldr	r1, [r3, #16]
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	689a      	ldr	r2, [r3, #8]
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4403      	add	r3, r0
 8001bfc:	409a      	lsls	r2, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b06      	cmp	r3, #6
 8001c0c:	d824      	bhi.n	8001c58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685a      	ldr	r2, [r3, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	4413      	add	r3, r2
 8001c1e:	3b05      	subs	r3, #5
 8001c20:	221f      	movs	r2, #31
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	400a      	ands	r2, r1
 8001c2e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685a      	ldr	r2, [r3, #4]
 8001c42:	4613      	mov	r3, r2
 8001c44:	009b      	lsls	r3, r3, #2
 8001c46:	4413      	add	r3, r2
 8001c48:	3b05      	subs	r3, #5
 8001c4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	430a      	orrs	r2, r1
 8001c54:	635a      	str	r2, [r3, #52]	; 0x34
 8001c56:	e04c      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	2b0c      	cmp	r3, #12
 8001c5e:	d824      	bhi.n	8001caa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685a      	ldr	r2, [r3, #4]
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	3b23      	subs	r3, #35	; 0x23
 8001c72:	221f      	movs	r2, #31
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43da      	mvns	r2, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	400a      	ands	r2, r1
 8001c80:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	4618      	mov	r0, r3
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	4413      	add	r3, r2
 8001c9a:	3b23      	subs	r3, #35	; 0x23
 8001c9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	430a      	orrs	r2, r1
 8001ca6:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca8:	e023      	b.n	8001cf2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685a      	ldr	r2, [r3, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	3b41      	subs	r3, #65	; 0x41
 8001cbc:	221f      	movs	r2, #31
 8001cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc2:	43da      	mvns	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	b29b      	uxth	r3, r3
 8001cd8:	4618      	mov	r0, r3
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	4613      	mov	r3, r2
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	3b41      	subs	r3, #65	; 0x41
 8001ce6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001cf2:	4b29      	ldr	r3, [pc, #164]	; (8001d98 <HAL_ADC_ConfigChannel+0x250>)
 8001cf4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a28      	ldr	r2, [pc, #160]	; (8001d9c <HAL_ADC_ConfigChannel+0x254>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d10f      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1d8>
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2b12      	cmp	r3, #18
 8001d06:	d10b      	bne.n	8001d20 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a1d      	ldr	r2, [pc, #116]	; (8001d9c <HAL_ADC_ConfigChannel+0x254>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d12b      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1c      	ldr	r2, [pc, #112]	; (8001da0 <HAL_ADC_ConfigChannel+0x258>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d003      	beq.n	8001d3c <HAL_ADC_ConfigChannel+0x1f4>
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2b11      	cmp	r3, #17
 8001d3a:	d122      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a11      	ldr	r2, [pc, #68]	; (8001da0 <HAL_ADC_ConfigChannel+0x258>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <HAL_ADC_ConfigChannel+0x25c>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a11      	ldr	r2, [pc, #68]	; (8001da8 <HAL_ADC_ConfigChannel+0x260>)
 8001d64:	fba2 2303 	umull	r2, r3, r2, r3
 8001d68:	0c9a      	lsrs	r2, r3, #18
 8001d6a:	4613      	mov	r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4413      	add	r3, r2
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d74:	e002      	b.n	8001d7c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001d76:	68bb      	ldr	r3, [r7, #8]
 8001d78:	3b01      	subs	r3, #1
 8001d7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d1f9      	bne.n	8001d76 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001d8a:	2300      	movs	r3, #0
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40012300 	.word	0x40012300
 8001d9c:	40012000 	.word	0x40012000
 8001da0:	10000012 	.word	0x10000012
 8001da4:	20000000 	.word	0x20000000
 8001da8:	431bde83 	.word	0x431bde83

08001dac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b085      	sub	sp, #20
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001db4:	4b79      	ldr	r3, [pc, #484]	; (8001f9c <ADC_Init+0x1f0>)
 8001db6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	431a      	orrs	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685a      	ldr	r2, [r3, #4]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001de0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	6859      	ldr	r1, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	021a      	lsls	r2, r3, #8
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	430a      	orrs	r2, r1
 8001df4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	430a      	orrs	r2, r1
 8001e16:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	689a      	ldr	r2, [r3, #8]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	6899      	ldr	r1, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	68da      	ldr	r2, [r3, #12]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e3e:	4a58      	ldr	r2, [pc, #352]	; (8001fa0 <ADC_Init+0x1f4>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d022      	beq.n	8001e8a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	689a      	ldr	r2, [r3, #8]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e52:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	6899      	ldr	r1, [r3, #8]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	430a      	orrs	r2, r1
 8001e64:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	689a      	ldr	r2, [r3, #8]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e74:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	6899      	ldr	r1, [r3, #8]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	430a      	orrs	r2, r1
 8001e86:	609a      	str	r2, [r3, #8]
 8001e88:	e00f      	b.n	8001eaa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689a      	ldr	r2, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f022 0202 	bic.w	r2, r2, #2
 8001eb8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	7e1b      	ldrb	r3, [r3, #24]
 8001ec4:	005a      	lsls	r2, r3, #1
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	430a      	orrs	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d01b      	beq.n	8001f10 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ee6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	685a      	ldr	r2, [r3, #4]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001ef6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	6859      	ldr	r1, [r3, #4]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f02:	3b01      	subs	r3, #1
 8001f04:	035a      	lsls	r2, r3, #13
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	430a      	orrs	r2, r1
 8001f0c:	605a      	str	r2, [r3, #4]
 8001f0e:	e007      	b.n	8001f20 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	685a      	ldr	r2, [r3, #4]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f1e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69db      	ldr	r3, [r3, #28]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	051a      	lsls	r2, r3, #20
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	430a      	orrs	r2, r1
 8001f44:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	689a      	ldr	r2, [r3, #8]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f54:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	6899      	ldr	r1, [r3, #8]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f62:	025a      	lsls	r2, r3, #9
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	689a      	ldr	r2, [r3, #8]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	6899      	ldr	r1, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	695b      	ldr	r3, [r3, #20]
 8001f86:	029a      	lsls	r2, r3, #10
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	609a      	str	r2, [r3, #8]
}
 8001f90:	bf00      	nop
 8001f92:	3714      	adds	r7, #20
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	40012300 	.word	0x40012300
 8001fa0:	0f000001 	.word	0x0f000001

08001fa4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b085      	sub	sp, #20
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fd6:	4a04      	ldr	r2, [pc, #16]	; (8001fe8 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	60d3      	str	r3, [r2, #12]
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fec:	b480      	push	{r7}
 8001fee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ff0:	4b04      	ldr	r3, [pc, #16]	; (8002004 <__NVIC_GetPriorityGrouping+0x18>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	0a1b      	lsrs	r3, r3, #8
 8001ff6:	f003 0307 	and.w	r3, r3, #7
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr
 8002004:	e000ed00 	.word	0xe000ed00

08002008 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002012:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002016:	2b00      	cmp	r3, #0
 8002018:	db0b      	blt.n	8002032 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800201a:	79fb      	ldrb	r3, [r7, #7]
 800201c:	f003 021f 	and.w	r2, r3, #31
 8002020:	4907      	ldr	r1, [pc, #28]	; (8002040 <__NVIC_EnableIRQ+0x38>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	095b      	lsrs	r3, r3, #5
 8002028:	2001      	movs	r0, #1
 800202a:	fa00 f202 	lsl.w	r2, r0, r2
 800202e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	e000e100 	.word	0xe000e100

08002044 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002044:	b480      	push	{r7}
 8002046:	b083      	sub	sp, #12
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	6039      	str	r1, [r7, #0]
 800204e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002054:	2b00      	cmp	r3, #0
 8002056:	db0a      	blt.n	800206e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	b2da      	uxtb	r2, r3
 800205c:	490c      	ldr	r1, [pc, #48]	; (8002090 <__NVIC_SetPriority+0x4c>)
 800205e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002062:	0112      	lsls	r2, r2, #4
 8002064:	b2d2      	uxtb	r2, r2
 8002066:	440b      	add	r3, r1
 8002068:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800206c:	e00a      	b.n	8002084 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	b2da      	uxtb	r2, r3
 8002072:	4908      	ldr	r1, [pc, #32]	; (8002094 <__NVIC_SetPriority+0x50>)
 8002074:	79fb      	ldrb	r3, [r7, #7]
 8002076:	f003 030f 	and.w	r3, r3, #15
 800207a:	3b04      	subs	r3, #4
 800207c:	0112      	lsls	r2, r2, #4
 800207e:	b2d2      	uxtb	r2, r2
 8002080:	440b      	add	r3, r1
 8002082:	761a      	strb	r2, [r3, #24]
}
 8002084:	bf00      	nop
 8002086:	370c      	adds	r7, #12
 8002088:	46bd      	mov	sp, r7
 800208a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208e:	4770      	bx	lr
 8002090:	e000e100 	.word	0xe000e100
 8002094:	e000ed00 	.word	0xe000ed00

08002098 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020ac:	69fb      	ldr	r3, [r7, #28]
 80020ae:	f1c3 0307 	rsb	r3, r3, #7
 80020b2:	2b04      	cmp	r3, #4
 80020b4:	bf28      	it	cs
 80020b6:	2304      	movcs	r3, #4
 80020b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3304      	adds	r3, #4
 80020be:	2b06      	cmp	r3, #6
 80020c0:	d902      	bls.n	80020c8 <NVIC_EncodePriority+0x30>
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	3b03      	subs	r3, #3
 80020c6:	e000      	b.n	80020ca <NVIC_EncodePriority+0x32>
 80020c8:	2300      	movs	r3, #0
 80020ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020cc:	f04f 32ff 	mov.w	r2, #4294967295
 80020d0:	69bb      	ldr	r3, [r7, #24]
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43da      	mvns	r2, r3
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	401a      	ands	r2, r3
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020e0:	f04f 31ff 	mov.w	r1, #4294967295
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	fa01 f303 	lsl.w	r3, r1, r3
 80020ea:	43d9      	mvns	r1, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020f0:	4313      	orrs	r3, r2
         );
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3724      	adds	r7, #36	; 0x24
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr
	...

08002100 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3b01      	subs	r3, #1
 800210c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002110:	d301      	bcc.n	8002116 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002112:	2301      	movs	r3, #1
 8002114:	e00f      	b.n	8002136 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002116:	4a0a      	ldr	r2, [pc, #40]	; (8002140 <SysTick_Config+0x40>)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3b01      	subs	r3, #1
 800211c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800211e:	210f      	movs	r1, #15
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f7ff ff8e 	bl	8002044 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002128:	4b05      	ldr	r3, [pc, #20]	; (8002140 <SysTick_Config+0x40>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800212e:	4b04      	ldr	r3, [pc, #16]	; (8002140 <SysTick_Config+0x40>)
 8002130:	2207      	movs	r2, #7
 8002132:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3708      	adds	r7, #8
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	e000e010 	.word	0xe000e010

08002144 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f7ff ff29 	bl	8001fa4 <__NVIC_SetPriorityGrouping>
}
 8002152:	bf00      	nop
 8002154:	3708      	adds	r7, #8
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800215a:	b580      	push	{r7, lr}
 800215c:	b086      	sub	sp, #24
 800215e:	af00      	add	r7, sp, #0
 8002160:	4603      	mov	r3, r0
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	607a      	str	r2, [r7, #4]
 8002166:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800216c:	f7ff ff3e 	bl	8001fec <__NVIC_GetPriorityGrouping>
 8002170:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	68b9      	ldr	r1, [r7, #8]
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f7ff ff8e 	bl	8002098 <NVIC_EncodePriority>
 800217c:	4602      	mov	r2, r0
 800217e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002182:	4611      	mov	r1, r2
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff ff5d 	bl	8002044 <__NVIC_SetPriority>
}
 800218a:	bf00      	nop
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b082      	sub	sp, #8
 8002196:	af00      	add	r7, sp, #0
 8002198:	4603      	mov	r3, r0
 800219a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7ff ff31 	bl	8002008 <__NVIC_EnableIRQ>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b082      	sub	sp, #8
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff ffa2 	bl	8002100 <SysTick_Config>
 80021bc:	4603      	mov	r3, r0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}

080021c6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80021c6:	b580      	push	{r7, lr}
 80021c8:	b082      	sub	sp, #8
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e014      	b.n	8002202 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	791b      	ldrb	r3, [r3, #4]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d105      	bne.n	80021ee <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2200      	movs	r2, #0
 80021e6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	f7fe fb07 	bl	80007fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2202      	movs	r2, #2
 80021f2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2200      	movs	r2, #0
 80021f8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2201      	movs	r2, #1
 80021fe:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002200:	2300      	movs	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800220a:	b480      	push	{r7}
 800220c:	b087      	sub	sp, #28
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	60b9      	str	r1, [r7, #8]
 8002214:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	795b      	ldrb	r3, [r3, #5]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_DAC_ConfigChannel+0x18>
 800221e:	2302      	movs	r3, #2
 8002220:	e03c      	b.n	800229c <HAL_DAC_ConfigChannel+0x92>
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2201      	movs	r2, #1
 8002226:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2202      	movs	r2, #2
 800222c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f003 0310 	and.w	r3, r3, #16
 800223c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002240:	fa02 f303 	lsl.w	r3, r2, r3
 8002244:	43db      	mvns	r3, r3
 8002246:	697a      	ldr	r2, [r7, #20]
 8002248:	4013      	ands	r3, r2
 800224a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68bb      	ldr	r3, [r7, #8]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	f003 0310 	and.w	r3, r3, #16
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	fa02 f303 	lsl.w	r3, r2, r3
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	4313      	orrs	r3, r2
 8002268:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	697a      	ldr	r2, [r7, #20]
 8002270:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6819      	ldr	r1, [r3, #0]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	f003 0310 	and.w	r3, r3, #16
 800227e:	22c0      	movs	r2, #192	; 0xc0
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2201      	movs	r2, #1
 8002292:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800229a:	2300      	movs	r3, #0
}
 800229c:	4618      	mov	r0, r3
 800229e:	371c      	adds	r7, #28
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022b0:	2300      	movs	r3, #0
 80022b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022b4:	f7ff fbf8 	bl	8001aa8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d101      	bne.n	80022c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
 80022c2:	e099      	b.n	80023f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2202      	movs	r2, #2
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0201 	bic.w	r2, r2, #1
 80022e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022e4:	e00f      	b.n	8002306 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80022e6:	f7ff fbdf 	bl	8001aa8 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d908      	bls.n	8002306 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2220      	movs	r2, #32
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2203      	movs	r2, #3
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e078      	b.n	80023f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0301 	and.w	r3, r3, #1
 8002310:	2b00      	cmp	r3, #0
 8002312:	d1e8      	bne.n	80022e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800231c:	697a      	ldr	r2, [r7, #20]
 800231e:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_DMA_Init+0x158>)
 8002320:	4013      	ands	r3, r2
 8002322:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002332:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	691b      	ldr	r3, [r3, #16]
 8002338:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800233e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800234a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	4313      	orrs	r3, r2
 8002356:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	2b04      	cmp	r3, #4
 800235e:	d107      	bne.n	8002370 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002368:	4313      	orrs	r3, r2
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	4313      	orrs	r3, r2
 800236e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	697a      	ldr	r2, [r7, #20]
 8002376:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	695b      	ldr	r3, [r3, #20]
 800237e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	f023 0307 	bic.w	r3, r3, #7
 8002386:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	2b04      	cmp	r3, #4
 8002398:	d117      	bne.n	80023ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239e:	697a      	ldr	r2, [r7, #20]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00e      	beq.n	80023ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fa7b 	bl	80028a8 <DMA_CheckFifoParam>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d008      	beq.n	80023ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2240      	movs	r2, #64	; 0x40
 80023bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2201      	movs	r2, #1
 80023c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80023c6:	2301      	movs	r3, #1
 80023c8:	e016      	b.n	80023f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f000 fa32 	bl	800283c <DMA_CalcBaseAndBitshift>
 80023d8:	4603      	mov	r3, r0
 80023da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023e0:	223f      	movs	r2, #63	; 0x3f
 80023e2:	409a      	lsls	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2201      	movs	r2, #1
 80023f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023f6:	2300      	movs	r3, #0
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	3718      	adds	r7, #24
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	f010803f 	.word	0xf010803f

08002404 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002410:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002412:	f7ff fb49 	bl	8001aa8 <HAL_GetTick>
 8002416:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800241e:	b2db      	uxtb	r3, r3
 8002420:	2b02      	cmp	r3, #2
 8002422:	d008      	beq.n	8002436 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2280      	movs	r2, #128	; 0x80
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e052      	b.n	80024dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	681a      	ldr	r2, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f022 0216 	bic.w	r2, r2, #22
 8002444:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	695a      	ldr	r2, [r3, #20]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002454:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_DMA_Abort+0x62>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002462:	2b00      	cmp	r3, #0
 8002464:	d007      	beq.n	8002476 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f022 0208 	bic.w	r2, r2, #8
 8002474:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 0201 	bic.w	r2, r2, #1
 8002484:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002486:	e013      	b.n	80024b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002488:	f7ff fb0e 	bl	8001aa8 <HAL_GetTick>
 800248c:	4602      	mov	r2, r0
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	1ad3      	subs	r3, r2, r3
 8002492:	2b05      	cmp	r3, #5
 8002494:	d90c      	bls.n	80024b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2203      	movs	r2, #3
 80024a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80024ac:	2303      	movs	r3, #3
 80024ae:	e015      	b.n	80024dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d1e4      	bne.n	8002488 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c2:	223f      	movs	r2, #63	; 0x3f
 80024c4:	409a      	lsls	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2201      	movs	r2, #1
 80024ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}

080024e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024f2:	b2db      	uxtb	r3, r3
 80024f4:	2b02      	cmp	r3, #2
 80024f6:	d004      	beq.n	8002502 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2280      	movs	r2, #128	; 0x80
 80024fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00c      	b.n	800251c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	2205      	movs	r2, #5
 8002506:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f022 0201 	bic.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b086      	sub	sp, #24
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002534:	4b92      	ldr	r3, [pc, #584]	; (8002780 <HAL_DMA_IRQHandler+0x258>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a92      	ldr	r2, [pc, #584]	; (8002784 <HAL_DMA_IRQHandler+0x25c>)
 800253a:	fba2 2303 	umull	r2, r3, r2, r3
 800253e:	0a9b      	lsrs	r3, r3, #10
 8002540:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002546:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	2208      	movs	r2, #8
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d01a      	beq.n	8002594 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d013      	beq.n	8002594 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f022 0204 	bic.w	r2, r2, #4
 800257a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002580:	2208      	movs	r2, #8
 8002582:	409a      	lsls	r2, r3
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	4013      	ands	r3, r2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d012      	beq.n	80025ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d00b      	beq.n	80025ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b6:	2201      	movs	r2, #1
 80025b8:	409a      	lsls	r2, r3
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025c2:	f043 0202 	orr.w	r2, r3, #2
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ce:	2204      	movs	r2, #4
 80025d0:	409a      	lsls	r2, r3
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	4013      	ands	r3, r2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d012      	beq.n	8002600 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00b      	beq.n	8002600 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	2204      	movs	r2, #4
 80025ee:	409a      	lsls	r2, r3
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025f8:	f043 0204 	orr.w	r2, r3, #4
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002604:	2210      	movs	r2, #16
 8002606:	409a      	lsls	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	4013      	ands	r3, r2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d043      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0308 	and.w	r3, r3, #8
 800261a:	2b00      	cmp	r3, #0
 800261c:	d03c      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	2210      	movs	r2, #16
 8002624:	409a      	lsls	r2, r3
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002634:	2b00      	cmp	r3, #0
 8002636:	d018      	beq.n	800266a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002642:	2b00      	cmp	r3, #0
 8002644:	d108      	bne.n	8002658 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d024      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
 8002656:	e01f      	b.n	8002698 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800265c:	2b00      	cmp	r3, #0
 800265e:	d01b      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002664:	6878      	ldr	r0, [r7, #4]
 8002666:	4798      	blx	r3
 8002668:	e016      	b.n	8002698 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d107      	bne.n	8002688 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0208 	bic.w	r2, r2, #8
 8002686:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002694:	6878      	ldr	r0, [r7, #4]
 8002696:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269c:	2220      	movs	r2, #32
 800269e:	409a      	lsls	r2, r3
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	f000 808e 	beq.w	80027c6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f003 0310 	and.w	r3, r3, #16
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f000 8086 	beq.w	80027c6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026be:	2220      	movs	r2, #32
 80026c0:	409a      	lsls	r2, r3
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	2b05      	cmp	r3, #5
 80026d0:	d136      	bne.n	8002740 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0216 	bic.w	r2, r2, #22
 80026e0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	695a      	ldr	r2, [r3, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026f0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d103      	bne.n	8002702 <HAL_DMA_IRQHandler+0x1da>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d007      	beq.n	8002712 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0208 	bic.w	r2, r2, #8
 8002710:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002716:	223f      	movs	r2, #63	; 0x3f
 8002718:	409a      	lsls	r2, r3
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2200      	movs	r2, #0
 800272a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002732:	2b00      	cmp	r3, #0
 8002734:	d07d      	beq.n	8002832 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	4798      	blx	r3
        }
        return;
 800273e:	e078      	b.n	8002832 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d01c      	beq.n	8002788 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d108      	bne.n	800276e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	2b00      	cmp	r3, #0
 8002762:	d030      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	4798      	blx	r3
 800276c:	e02b      	b.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d027      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	4798      	blx	r3
 800277e:	e022      	b.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
 8002780:	20000000 	.word	0x20000000
 8002784:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002792:	2b00      	cmp	r3, #0
 8002794:	d10f      	bne.n	80027b6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	681a      	ldr	r2, [r3, #0]
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f022 0210 	bic.w	r2, r2, #16
 80027a4:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2200      	movs	r2, #0
 80027b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d003      	beq.n	80027c6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d032      	beq.n	8002834 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	f003 0301 	and.w	r3, r3, #1
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d022      	beq.n	8002820 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2205      	movs	r2, #5
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f022 0201 	bic.w	r2, r2, #1
 80027f0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	3301      	adds	r3, #1
 80027f6:	60bb      	str	r3, [r7, #8]
 80027f8:	697a      	ldr	r2, [r7, #20]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d307      	bcc.n	800280e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0301 	and.w	r3, r3, #1
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f2      	bne.n	80027f2 <HAL_DMA_IRQHandler+0x2ca>
 800280c:	e000      	b.n	8002810 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800280e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002824:	2b00      	cmp	r3, #0
 8002826:	d005      	beq.n	8002834 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	4798      	blx	r3
 8002830:	e000      	b.n	8002834 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002832:	bf00      	nop
    }
  }
}
 8002834:	3718      	adds	r7, #24
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop

0800283c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	b2db      	uxtb	r3, r3
 800284a:	3b10      	subs	r3, #16
 800284c:	4a14      	ldr	r2, [pc, #80]	; (80028a0 <DMA_CalcBaseAndBitshift+0x64>)
 800284e:	fba2 2303 	umull	r2, r3, r2, r3
 8002852:	091b      	lsrs	r3, r3, #4
 8002854:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002856:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4413      	add	r3, r2
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	461a      	mov	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2b03      	cmp	r3, #3
 8002868:	d909      	bls.n	800287e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002872:	f023 0303 	bic.w	r3, r3, #3
 8002876:	1d1a      	adds	r2, r3, #4
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
 800287c:	e007      	b.n	800288e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002892:	4618      	mov	r0, r3
 8002894:	3714      	adds	r7, #20
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	aaaaaaab 	.word	0xaaaaaaab
 80028a4:	0800771c 	.word	0x0800771c

080028a8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028b0:	2300      	movs	r3, #0
 80028b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	699b      	ldr	r3, [r3, #24]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d11f      	bne.n	8002902 <DMA_CheckFifoParam+0x5a>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d856      	bhi.n	8002976 <DMA_CheckFifoParam+0xce>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <DMA_CheckFifoParam+0x28>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	080028f3 	.word	0x080028f3
 80028d8:	080028e1 	.word	0x080028e1
 80028dc:	08002977 	.word	0x08002977
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d046      	beq.n	800297a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028f0:	e043      	b.n	800297a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028fa:	d140      	bne.n	800297e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002900:	e03d      	b.n	800297e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	699b      	ldr	r3, [r3, #24]
 8002906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800290a:	d121      	bne.n	8002950 <DMA_CheckFifoParam+0xa8>
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b03      	cmp	r3, #3
 8002910:	d837      	bhi.n	8002982 <DMA_CheckFifoParam+0xda>
 8002912:	a201      	add	r2, pc, #4	; (adr r2, 8002918 <DMA_CheckFifoParam+0x70>)
 8002914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002918:	08002929 	.word	0x08002929
 800291c:	0800292f 	.word	0x0800292f
 8002920:	08002929 	.word	0x08002929
 8002924:	08002941 	.word	0x08002941
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	73fb      	strb	r3, [r7, #15]
      break;
 800292c:	e030      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002932:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d025      	beq.n	8002986 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800293e:	e022      	b.n	8002986 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002948:	d11f      	bne.n	800298a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800294e:	e01c      	b.n	800298a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2b02      	cmp	r3, #2
 8002954:	d903      	bls.n	800295e <DMA_CheckFifoParam+0xb6>
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	2b03      	cmp	r3, #3
 800295a:	d003      	beq.n	8002964 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800295c:	e018      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
      break;
 8002962:	e015      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00e      	beq.n	800298e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002970:	2301      	movs	r3, #1
 8002972:	73fb      	strb	r3, [r7, #15]
      break;
 8002974:	e00b      	b.n	800298e <DMA_CheckFifoParam+0xe6>
      break;
 8002976:	bf00      	nop
 8002978:	e00a      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297a:	bf00      	nop
 800297c:	e008      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800297e:	bf00      	nop
 8002980:	e006      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002982:	bf00      	nop
 8002984:	e004      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 8002986:	bf00      	nop
 8002988:	e002      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;   
 800298a:	bf00      	nop
 800298c:	e000      	b.n	8002990 <DMA_CheckFifoParam+0xe8>
      break;
 800298e:	bf00      	nop
    }
  } 
  
  return status; 
 8002990:	7bfb      	ldrb	r3, [r7, #15]
}
 8002992:	4618      	mov	r0, r3
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e177      	b.n	8002cac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 8166 	bne.w	8002ca6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80c0 	beq.w	8002ca6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b66      	ldr	r3, [pc, #408]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a65      	ldr	r2, [pc, #404]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b63      	ldr	r3, [pc, #396]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a61      	ldr	r2, [pc, #388]	; (8002cc8 <HAL_GPIO_Init+0x328>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a58      	ldr	r2, [pc, #352]	; (8002ccc <HAL_GPIO_Init+0x32c>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d037      	beq.n	8002bde <HAL_GPIO_Init+0x23e>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a57      	ldr	r2, [pc, #348]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_GPIO_Init+0x23a>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a56      	ldr	r2, [pc, #344]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <HAL_GPIO_Init+0x236>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a55      	ldr	r2, [pc, #340]	; (8002cd8 <HAL_GPIO_Init+0x338>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x232>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a54      	ldr	r2, [pc, #336]	; (8002cdc <HAL_GPIO_Init+0x33c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x22e>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a53      	ldr	r2, [pc, #332]	; (8002ce0 <HAL_GPIO_Init+0x340>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x22a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a52      	ldr	r2, [pc, #328]	; (8002ce4 <HAL_GPIO_Init+0x344>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x226>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a51      	ldr	r2, [pc, #324]	; (8002ce8 <HAL_GPIO_Init+0x348>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x222>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a50      	ldr	r2, [pc, #320]	; (8002cec <HAL_GPIO_Init+0x34c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x21e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a4f      	ldr	r2, [pc, #316]	; (8002cf0 <HAL_GPIO_Init+0x350>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x21a>
 8002bb6:	2309      	movs	r3, #9
 8002bb8:	e012      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bba:	230a      	movs	r3, #10
 8002bbc:	e010      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	e00e      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bc2:	2307      	movs	r3, #7
 8002bc4:	e00c      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e00a      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bca:	2305      	movs	r3, #5
 8002bcc:	e008      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bce:	2304      	movs	r3, #4
 8002bd0:	e006      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	e004      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bd6:	2302      	movs	r3, #2
 8002bd8:	e002      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e000      	b.n	8002be0 <HAL_GPIO_Init+0x240>
 8002bde:	2300      	movs	r3, #0
 8002be0:	69fa      	ldr	r2, [r7, #28]
 8002be2:	f002 0203 	and.w	r2, r2, #3
 8002be6:	0092      	lsls	r2, r2, #2
 8002be8:	4093      	lsls	r3, r2
 8002bea:	69ba      	ldr	r2, [r7, #24]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bf0:	4935      	ldr	r1, [pc, #212]	; (8002cc8 <HAL_GPIO_Init+0x328>)
 8002bf2:	69fb      	ldr	r3, [r7, #28]
 8002bf4:	089b      	lsrs	r3, r3, #2
 8002bf6:	3302      	adds	r3, #2
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	43db      	mvns	r3, r3
 8002c08:	69ba      	ldr	r2, [r7, #24]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d003      	beq.n	8002c22 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c22:	4a34      	ldr	r2, [pc, #208]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c28:	4b32      	ldr	r3, [pc, #200]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4c:	4a29      	ldr	r2, [pc, #164]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c4e:	69bb      	ldr	r3, [r7, #24]
 8002c50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c52:	4b28      	ldr	r3, [pc, #160]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	43db      	mvns	r3, r3
 8002c5c:	69ba      	ldr	r2, [r7, #24]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d003      	beq.n	8002c76 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c76:	4a1f      	ldr	r2, [pc, #124]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c7c:	4b1d      	ldr	r3, [pc, #116]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	43db      	mvns	r3, r3
 8002c86:	69ba      	ldr	r2, [r7, #24]
 8002c88:	4013      	ands	r3, r2
 8002c8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002c98:	69ba      	ldr	r2, [r7, #24]
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ca0:	4a14      	ldr	r2, [pc, #80]	; (8002cf4 <HAL_GPIO_Init+0x354>)
 8002ca2:	69bb      	ldr	r3, [r7, #24]
 8002ca4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3301      	adds	r3, #1
 8002caa:	61fb      	str	r3, [r7, #28]
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b0f      	cmp	r3, #15
 8002cb0:	f67f ae84 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	bf00      	nop
 8002cb8:	3724      	adds	r7, #36	; 0x24
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40013800 	.word	0x40013800
 8002ccc:	40020000 	.word	0x40020000
 8002cd0:	40020400 	.word	0x40020400
 8002cd4:	40020800 	.word	0x40020800
 8002cd8:	40020c00 	.word	0x40020c00
 8002cdc:	40021000 	.word	0x40021000
 8002ce0:	40021400 	.word	0x40021400
 8002ce4:	40021800 	.word	0x40021800
 8002ce8:	40021c00 	.word	0x40021c00
 8002cec:	40022000 	.word	0x40022000
 8002cf0:	40022400 	.word	0x40022400
 8002cf4:	40013c00 	.word	0x40013c00

08002cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b083      	sub	sp, #12
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	460b      	mov	r3, r1
 8002d02:	807b      	strh	r3, [r7, #2]
 8002d04:	4613      	mov	r3, r2
 8002d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d08:	787b      	ldrb	r3, [r7, #1]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d003      	beq.n	8002d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d0e:	887a      	ldrh	r2, [r7, #2]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d14:	e003      	b.n	8002d1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d16:	887b      	ldrh	r3, [r7, #2]
 8002d18:	041a      	lsls	r2, r3, #16
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	370c      	adds	r7, #12
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	4603      	mov	r3, r0
 8002d34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002d36:	4b08      	ldr	r3, [pc, #32]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d38:	695a      	ldr	r2, [r3, #20]
 8002d3a:	88fb      	ldrh	r3, [r7, #6]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d006      	beq.n	8002d50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002d42:	4a05      	ldr	r2, [pc, #20]	; (8002d58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002d44:	88fb      	ldrh	r3, [r7, #6]
 8002d46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f000 f806 	bl	8002d5c <HAL_GPIO_EXTI_Callback>
  }
}
 8002d50:	bf00      	nop
 8002d52:	3708      	adds	r7, #8
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	40013c00 	.word	0x40013c00

08002d5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e12b      	b.n	8002fde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d106      	bne.n	8002da0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2200      	movs	r2, #0
 8002d96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f7fd fecc 	bl	8000b38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2224      	movs	r2, #36	; 0x24
 8002da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 0201 	bic.w	r2, r2, #1
 8002db6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002dc6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002dd8:	f001 fca2 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8002ddc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	4a81      	ldr	r2, [pc, #516]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d807      	bhi.n	8002df8 <HAL_I2C_Init+0x84>
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4a80      	ldr	r2, [pc, #512]	; (8002fec <HAL_I2C_Init+0x278>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	bf94      	ite	ls
 8002df0:	2301      	movls	r3, #1
 8002df2:	2300      	movhi	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e006      	b.n	8002e06 <HAL_I2C_Init+0x92>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4a7d      	ldr	r2, [pc, #500]	; (8002ff0 <HAL_I2C_Init+0x27c>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	bf94      	ite	ls
 8002e00:	2301      	movls	r3, #1
 8002e02:	2300      	movhi	r3, #0
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e0e7      	b.n	8002fde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	4a78      	ldr	r2, [pc, #480]	; (8002ff4 <HAL_I2C_Init+0x280>)
 8002e12:	fba2 2303 	umull	r2, r3, r2, r3
 8002e16:	0c9b      	lsrs	r3, r3, #18
 8002e18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4a6a      	ldr	r2, [pc, #424]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d802      	bhi.n	8002e48 <HAL_I2C_Init+0xd4>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	3301      	adds	r3, #1
 8002e46:	e009      	b.n	8002e5c <HAL_I2C_Init+0xe8>
 8002e48:	68bb      	ldr	r3, [r7, #8]
 8002e4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	4a69      	ldr	r2, [pc, #420]	; (8002ff8 <HAL_I2C_Init+0x284>)
 8002e54:	fba2 2303 	umull	r2, r3, r2, r3
 8002e58:	099b      	lsrs	r3, r3, #6
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	6812      	ldr	r2, [r2, #0]
 8002e60:	430b      	orrs	r3, r1
 8002e62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	69db      	ldr	r3, [r3, #28]
 8002e6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	495c      	ldr	r1, [pc, #368]	; (8002fe8 <HAL_I2C_Init+0x274>)
 8002e78:	428b      	cmp	r3, r1
 8002e7a:	d819      	bhi.n	8002eb0 <HAL_I2C_Init+0x13c>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e59      	subs	r1, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	005b      	lsls	r3, r3, #1
 8002e86:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e90:	400b      	ands	r3, r1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_I2C_Init+0x138>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1e59      	subs	r1, r3, #1
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eaa:	e051      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eac:	2304      	movs	r3, #4
 8002eae:	e04f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d111      	bne.n	8002edc <HAL_I2C_Init+0x168>
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	1e58      	subs	r0, r3, #1
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6859      	ldr	r1, [r3, #4]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	440b      	add	r3, r1
 8002ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002eca:	3301      	adds	r3, #1
 8002ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	bf0c      	ite	eq
 8002ed4:	2301      	moveq	r3, #1
 8002ed6:	2300      	movne	r3, #0
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	e012      	b.n	8002f02 <HAL_I2C_Init+0x18e>
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	1e58      	subs	r0, r3, #1
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6859      	ldr	r1, [r3, #4]
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	440b      	add	r3, r1
 8002eea:	0099      	lsls	r1, r3, #2
 8002eec:	440b      	add	r3, r1
 8002eee:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	bf0c      	ite	eq
 8002efc:	2301      	moveq	r3, #1
 8002efe:	2300      	movne	r3, #0
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d001      	beq.n	8002f0a <HAL_I2C_Init+0x196>
 8002f06:	2301      	movs	r3, #1
 8002f08:	e022      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	689b      	ldr	r3, [r3, #8]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d10e      	bne.n	8002f30 <HAL_I2C_Init+0x1bc>
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	1e58      	subs	r0, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6859      	ldr	r1, [r3, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	440b      	add	r3, r1
 8002f20:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f24:	3301      	adds	r3, #1
 8002f26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f2e:	e00f      	b.n	8002f50 <HAL_I2C_Init+0x1dc>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	1e58      	subs	r0, r3, #1
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6859      	ldr	r1, [r3, #4]
 8002f38:	460b      	mov	r3, r1
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	0099      	lsls	r1, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f46:	3301      	adds	r3, #1
 8002f48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6809      	ldr	r1, [r1, #0]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	69da      	ldr	r2, [r3, #28]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	431a      	orrs	r2, r3
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6911      	ldr	r1, [r2, #16]
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	68d2      	ldr	r2, [r2, #12]
 8002f8a:	4311      	orrs	r1, r2
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6812      	ldr	r2, [r2, #0]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	699b      	ldr	r3, [r3, #24]
 8002fa6:	431a      	orrs	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	430a      	orrs	r2, r1
 8002fae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	681a      	ldr	r2, [r3, #0]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f042 0201 	orr.w	r2, r2, #1
 8002fbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2220      	movs	r2, #32
 8002fca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002fdc:	2300      	movs	r3, #0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	000186a0 	.word	0x000186a0
 8002fec:	001e847f 	.word	0x001e847f
 8002ff0:	003d08ff 	.word	0x003d08ff
 8002ff4:	431bde83 	.word	0x431bde83
 8002ff8:	10624dd3 	.word	0x10624dd3

08002ffc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b088      	sub	sp, #32
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	4608      	mov	r0, r1
 8003006:	4611      	mov	r1, r2
 8003008:	461a      	mov	r2, r3
 800300a:	4603      	mov	r3, r0
 800300c:	817b      	strh	r3, [r7, #10]
 800300e:	460b      	mov	r3, r1
 8003010:	813b      	strh	r3, [r7, #8]
 8003012:	4613      	mov	r3, r2
 8003014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003016:	f7fe fd47 	bl	8001aa8 <HAL_GetTick>
 800301a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003022:	b2db      	uxtb	r3, r3
 8003024:	2b20      	cmp	r3, #32
 8003026:	f040 80d9 	bne.w	80031dc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2319      	movs	r3, #25
 8003030:	2201      	movs	r2, #1
 8003032:	496d      	ldr	r1, [pc, #436]	; (80031e8 <HAL_I2C_Mem_Write+0x1ec>)
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fc7f 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003040:	2302      	movs	r3, #2
 8003042:	e0cc      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304a:	2b01      	cmp	r3, #1
 800304c:	d101      	bne.n	8003052 <HAL_I2C_Mem_Write+0x56>
 800304e:	2302      	movs	r3, #2
 8003050:	e0c5      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 0301 	and.w	r3, r3, #1
 8003064:	2b01      	cmp	r3, #1
 8003066:	d007      	beq.n	8003078 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f042 0201 	orr.w	r2, r2, #1
 8003076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2221      	movs	r2, #33	; 0x21
 800308c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2240      	movs	r2, #64	; 0x40
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2200      	movs	r2, #0
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6a3a      	ldr	r2, [r7, #32]
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80030a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ae:	b29a      	uxth	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4a4d      	ldr	r2, [pc, #308]	; (80031ec <HAL_I2C_Mem_Write+0x1f0>)
 80030b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030ba:	88f8      	ldrh	r0, [r7, #6]
 80030bc:	893a      	ldrh	r2, [r7, #8]
 80030be:	8979      	ldrh	r1, [r7, #10]
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c6:	9300      	str	r3, [sp, #0]
 80030c8:	4603      	mov	r3, r0
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 fab6 	bl	800363c <I2C_RequestMemoryWrite>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d052      	beq.n	800317c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e081      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fd00 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00d      	beq.n	8003106 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ee:	2b04      	cmp	r3, #4
 80030f0:	d107      	bne.n	8003102 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003100:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e06b      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800310a:	781a      	ldrb	r2, [r3, #0]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003116:	1c5a      	adds	r2, r3, #1
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800312c:	b29b      	uxth	r3, r3
 800312e:	3b01      	subs	r3, #1
 8003130:	b29a      	uxth	r2, r3
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f003 0304 	and.w	r3, r3, #4
 8003140:	2b04      	cmp	r3, #4
 8003142:	d11b      	bne.n	800317c <HAL_I2C_Mem_Write+0x180>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003148:	2b00      	cmp	r3, #0
 800314a:	d017      	beq.n	800317c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315c:	1c5a      	adds	r2, r3, #1
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003166:	3b01      	subs	r3, #1
 8003168:	b29a      	uxth	r2, r3
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003180:	2b00      	cmp	r3, #0
 8003182:	d1aa      	bne.n	80030da <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003184:	697a      	ldr	r2, [r7, #20]
 8003186:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003188:	68f8      	ldr	r0, [r7, #12]
 800318a:	f000 fcec 	bl	8003b66 <I2C_WaitOnBTFFlagUntilTimeout>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00d      	beq.n	80031b0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003198:	2b04      	cmp	r3, #4
 800319a:	d107      	bne.n	80031ac <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031aa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ac:	2301      	movs	r3, #1
 80031ae:	e016      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2200      	movs	r2, #0
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80031d8:	2300      	movs	r3, #0
 80031da:	e000      	b.n	80031de <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80031dc:	2302      	movs	r3, #2
  }
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3718      	adds	r7, #24
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	00100002 	.word	0x00100002
 80031ec:	ffff0000 	.word	0xffff0000

080031f0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b08c      	sub	sp, #48	; 0x30
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	4608      	mov	r0, r1
 80031fa:	4611      	mov	r1, r2
 80031fc:	461a      	mov	r2, r3
 80031fe:	4603      	mov	r3, r0
 8003200:	817b      	strh	r3, [r7, #10]
 8003202:	460b      	mov	r3, r1
 8003204:	813b      	strh	r3, [r7, #8]
 8003206:	4613      	mov	r3, r2
 8003208:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800320a:	f7fe fc4d 	bl	8001aa8 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2b20      	cmp	r3, #32
 800321a:	f040 8208 	bne.w	800362e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800321e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003220:	9300      	str	r3, [sp, #0]
 8003222:	2319      	movs	r3, #25
 8003224:	2201      	movs	r2, #1
 8003226:	497b      	ldr	r1, [pc, #492]	; (8003414 <HAL_I2C_Mem_Read+0x224>)
 8003228:	68f8      	ldr	r0, [r7, #12]
 800322a:	f000 fb85 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 800322e:	4603      	mov	r3, r0
 8003230:	2b00      	cmp	r3, #0
 8003232:	d001      	beq.n	8003238 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003234:	2302      	movs	r3, #2
 8003236:	e1fb      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800323e:	2b01      	cmp	r3, #1
 8003240:	d101      	bne.n	8003246 <HAL_I2C_Mem_Read+0x56>
 8003242:	2302      	movs	r3, #2
 8003244:	e1f4      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2201      	movs	r2, #1
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d007      	beq.n	800326c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f042 0201 	orr.w	r2, r2, #1
 800326a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800327a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2222      	movs	r2, #34	; 0x22
 8003280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	2240      	movs	r2, #64	; 0x40
 8003288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	2200      	movs	r2, #0
 8003290:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003296:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800329c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29a      	uxth	r2, r3
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	4a5b      	ldr	r2, [pc, #364]	; (8003418 <HAL_I2C_Mem_Read+0x228>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032ae:	88f8      	ldrh	r0, [r7, #6]
 80032b0:	893a      	ldrh	r2, [r7, #8]
 80032b2:	8979      	ldrh	r1, [r7, #10]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	9301      	str	r3, [sp, #4]
 80032b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	4603      	mov	r3, r0
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fa52 	bl	8003768 <I2C_RequestMemoryRead>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e1b0      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d113      	bne.n	80032fe <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	623b      	str	r3, [r7, #32]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	699b      	ldr	r3, [r3, #24]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032fa:	601a      	str	r2, [r3, #0]
 80032fc:	e184      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003302:	2b01      	cmp	r3, #1
 8003304:	d11b      	bne.n	800333e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003314:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003316:	2300      	movs	r3, #0
 8003318:	61fb      	str	r3, [r7, #28]
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	695b      	ldr	r3, [r3, #20]
 8003320:	61fb      	str	r3, [r7, #28]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699b      	ldr	r3, [r3, #24]
 8003328:	61fb      	str	r3, [r7, #28]
 800332a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
 800333c:	e164      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b02      	cmp	r3, #2
 8003344:	d11b      	bne.n	800337e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	681a      	ldr	r2, [r3, #0]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003354:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	681a      	ldr	r2, [r3, #0]
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003364:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003366:	2300      	movs	r3, #0
 8003368:	61bb      	str	r3, [r7, #24]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	695b      	ldr	r3, [r3, #20]
 8003370:	61bb      	str	r3, [r7, #24]
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	699b      	ldr	r3, [r3, #24]
 8003378:	61bb      	str	r3, [r7, #24]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	e144      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800337e:	2300      	movs	r3, #0
 8003380:	617b      	str	r3, [r7, #20]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	695b      	ldr	r3, [r3, #20]
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003394:	e138      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339a:	2b03      	cmp	r3, #3
 800339c:	f200 80f1 	bhi.w	8003582 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d123      	bne.n	80033f0 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f000 fc1b 	bl	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d001      	beq.n	80033bc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e139      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	691a      	ldr	r2, [r3, #16]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c6:	b2d2      	uxtb	r2, r2
 80033c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ce:	1c5a      	adds	r2, r3, #1
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	3b01      	subs	r3, #1
 80033e8:	b29a      	uxth	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 80033ee:	e10b      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d14e      	bne.n	8003496 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033fe:	2200      	movs	r2, #0
 8003400:	4906      	ldr	r1, [pc, #24]	; (800341c <HAL_I2C_Mem_Read+0x22c>)
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fa98 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d008      	beq.n	8003420 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e10e      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000
 800341c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800342e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	691a      	ldr	r2, [r3, #16]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	b2d2      	uxtb	r2, r2
 800343c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003442:	1c5a      	adds	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800344c:	3b01      	subs	r3, #1
 800344e:	b29a      	uxth	r2, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003458:	b29b      	uxth	r3, r3
 800345a:	3b01      	subs	r3, #1
 800345c:	b29a      	uxth	r2, r3
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	691a      	ldr	r2, [r3, #16]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003474:	1c5a      	adds	r2, r3, #1
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	3b01      	subs	r3, #1
 8003480:	b29a      	uxth	r2, r3
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800348a:	b29b      	uxth	r3, r3
 800348c:	3b01      	subs	r3, #1
 800348e:	b29a      	uxth	r2, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003494:	e0b8      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800349c:	2200      	movs	r2, #0
 800349e:	4966      	ldr	r1, [pc, #408]	; (8003638 <HAL_I2C_Mem_Read+0x448>)
 80034a0:	68f8      	ldr	r0, [r7, #12]
 80034a2:	f000 fa49 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d001      	beq.n	80034b0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0bf      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034be:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	691a      	ldr	r2, [r3, #16]
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	1c5a      	adds	r2, r3, #1
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29a      	uxth	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b29a      	uxth	r2, r3
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80034f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034f8:	2200      	movs	r2, #0
 80034fa:	494f      	ldr	r1, [pc, #316]	; (8003638 <HAL_I2C_Mem_Read+0x448>)
 80034fc:	68f8      	ldr	r0, [r7, #12]
 80034fe:	f000 fa1b 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d001      	beq.n	800350c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e091      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800351a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	691a      	ldr	r2, [r3, #16]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003538:	3b01      	subs	r3, #1
 800353a:	b29a      	uxth	r2, r3
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003544:	b29b      	uxth	r3, r3
 8003546:	3b01      	subs	r3, #1
 8003548:	b29a      	uxth	r2, r3
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	691a      	ldr	r2, [r3, #16]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	3b01      	subs	r3, #1
 800356c:	b29a      	uxth	r2, r3
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003576:	b29b      	uxth	r3, r3
 8003578:	3b01      	subs	r3, #1
 800357a:	b29a      	uxth	r2, r3
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003580:	e042      	b.n	8003608 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003584:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 fb2e 	bl	8003be8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003592:	2301      	movs	r3, #1
 8003594:	e04c      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	691a      	ldr	r2, [r3, #16]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	b2d2      	uxtb	r2, r2
 80035a2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b2:	3b01      	subs	r3, #1
 80035b4:	b29a      	uxth	r2, r3
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035be:	b29b      	uxth	r3, r3
 80035c0:	3b01      	subs	r3, #1
 80035c2:	b29a      	uxth	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f003 0304 	and.w	r3, r3, #4
 80035d2:	2b04      	cmp	r3, #4
 80035d4:	d118      	bne.n	8003608 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	691a      	ldr	r2, [r3, #16]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e8:	1c5a      	adds	r2, r3, #1
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035fe:	b29b      	uxth	r3, r3
 8003600:	3b01      	subs	r3, #1
 8003602:	b29a      	uxth	r2, r3
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800360c:	2b00      	cmp	r3, #0
 800360e:	f47f aec2 	bne.w	8003396 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	2220      	movs	r2, #32
 8003616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800362e:	2302      	movs	r3, #2
  }
}
 8003630:	4618      	mov	r0, r3
 8003632:	3728      	adds	r7, #40	; 0x28
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	00010004 	.word	0x00010004

0800363c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003664:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	2200      	movs	r2, #0
 800366e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 f960 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00d      	beq.n	800369a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003688:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800368c:	d103      	bne.n	8003696 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e05f      	b.n	800375a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800369a:	897b      	ldrh	r3, [r7, #10]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	461a      	mov	r2, r3
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80036a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	6a3a      	ldr	r2, [r7, #32]
 80036ae:	492d      	ldr	r1, [pc, #180]	; (8003764 <I2C_RequestMemoryWrite+0x128>)
 80036b0:	68f8      	ldr	r0, [r7, #12]
 80036b2:	f000 f998 	bl	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036b6:	4603      	mov	r3, r0
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d001      	beq.n	80036c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e04c      	b.n	800375a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	617b      	str	r3, [r7, #20]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	699b      	ldr	r3, [r3, #24]
 80036d2:	617b      	str	r3, [r7, #20]
 80036d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036d8:	6a39      	ldr	r1, [r7, #32]
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f000 fa02 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e02b      	b.n	800375a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003702:	88fb      	ldrh	r3, [r7, #6]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d105      	bne.n	8003714 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003708:	893b      	ldrh	r3, [r7, #8]
 800370a:	b2da      	uxtb	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	611a      	str	r2, [r3, #16]
 8003712:	e021      	b.n	8003758 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003714:	893b      	ldrh	r3, [r7, #8]
 8003716:	0a1b      	lsrs	r3, r3, #8
 8003718:	b29b      	uxth	r3, r3
 800371a:	b2da      	uxtb	r2, r3
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	6a39      	ldr	r1, [r7, #32]
 8003726:	68f8      	ldr	r0, [r7, #12]
 8003728:	f000 f9dc 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800372c:	4603      	mov	r3, r0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00d      	beq.n	800374e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003736:	2b04      	cmp	r3, #4
 8003738:	d107      	bne.n	800374a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003748:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	e005      	b.n	800375a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800374e:	893b      	ldrh	r3, [r7, #8]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003758:	2300      	movs	r3, #0
}
 800375a:	4618      	mov	r0, r3
 800375c:	3718      	adds	r7, #24
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	00010002 	.word	0x00010002

08003768 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af02      	add	r7, sp, #8
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	4608      	mov	r0, r1
 8003772:	4611      	mov	r1, r2
 8003774:	461a      	mov	r2, r3
 8003776:	4603      	mov	r3, r0
 8003778:	817b      	strh	r3, [r7, #10]
 800377a:	460b      	mov	r3, r1
 800377c:	813b      	strh	r3, [r7, #8]
 800377e:	4613      	mov	r3, r2
 8003780:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	681a      	ldr	r2, [r3, #0]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003790:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a4:	9300      	str	r3, [sp, #0]
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 f8c2 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d00d      	beq.n	80037d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037c8:	d103      	bne.n	80037d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e0aa      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80037d6:	897b      	ldrh	r3, [r7, #10]
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	461a      	mov	r2, r3
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037e8:	6a3a      	ldr	r2, [r7, #32]
 80037ea:	4952      	ldr	r1, [pc, #328]	; (8003934 <I2C_RequestMemoryRead+0x1cc>)
 80037ec:	68f8      	ldr	r0, [r7, #12]
 80037ee:	f000 f8fa 	bl	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80037f8:	2301      	movs	r3, #1
 80037fa:	e097      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037fc:	2300      	movs	r3, #0
 80037fe:	617b      	str	r3, [r7, #20]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	617b      	str	r3, [r7, #20]
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	699b      	ldr	r3, [r3, #24]
 800380e:	617b      	str	r3, [r7, #20]
 8003810:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003814:	6a39      	ldr	r1, [r7, #32]
 8003816:	68f8      	ldr	r0, [r7, #12]
 8003818:	f000 f964 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00d      	beq.n	800383e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003826:	2b04      	cmp	r3, #4
 8003828:	d107      	bne.n	800383a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003838:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e076      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800383e:	88fb      	ldrh	r3, [r7, #6]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d105      	bne.n	8003850 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003844:	893b      	ldrh	r3, [r7, #8]
 8003846:	b2da      	uxtb	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]
 800384e:	e021      	b.n	8003894 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003850:	893b      	ldrh	r3, [r7, #8]
 8003852:	0a1b      	lsrs	r3, r3, #8
 8003854:	b29b      	uxth	r3, r3
 8003856:	b2da      	uxtb	r2, r3
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800385e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003860:	6a39      	ldr	r1, [r7, #32]
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f93e 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00d      	beq.n	800388a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003872:	2b04      	cmp	r3, #4
 8003874:	d107      	bne.n	8003886 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681a      	ldr	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003884:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e050      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800388a:	893b      	ldrh	r3, [r7, #8]
 800388c:	b2da      	uxtb	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003896:	6a39      	ldr	r1, [r7, #32]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 f923 	bl	8003ae4 <I2C_WaitOnTXEFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00d      	beq.n	80038c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a8:	2b04      	cmp	r3, #4
 80038aa:	d107      	bne.n	80038bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e035      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80038d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038d2:	9300      	str	r3, [sp, #0]
 80038d4:	6a3b      	ldr	r3, [r7, #32]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f82b 	bl	8003938 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d00d      	beq.n	8003904 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038f6:	d103      	bne.n	8003900 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003900:	2303      	movs	r3, #3
 8003902:	e013      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003904:	897b      	ldrh	r3, [r7, #10]
 8003906:	b2db      	uxtb	r3, r3
 8003908:	f043 0301 	orr.w	r3, r3, #1
 800390c:	b2da      	uxtb	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003916:	6a3a      	ldr	r2, [r7, #32]
 8003918:	4906      	ldr	r1, [pc, #24]	; (8003934 <I2C_RequestMemoryRead+0x1cc>)
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f863 	bl	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003920:	4603      	mov	r3, r0
 8003922:	2b00      	cmp	r3, #0
 8003924:	d001      	beq.n	800392a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e000      	b.n	800392c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800392a:	2300      	movs	r3, #0
}
 800392c:	4618      	mov	r0, r3
 800392e:	3718      	adds	r7, #24
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	00010002 	.word	0x00010002

08003938 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	60f8      	str	r0, [r7, #12]
 8003940:	60b9      	str	r1, [r7, #8]
 8003942:	603b      	str	r3, [r7, #0]
 8003944:	4613      	mov	r3, r2
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003948:	e025      	b.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003950:	d021      	beq.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003952:	f7fe f8a9 	bl	8001aa8 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d302      	bcc.n	8003968 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d116      	bne.n	8003996 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2200      	movs	r2, #0
 800396c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2220      	movs	r2, #32
 8003972:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003982:	f043 0220 	orr.w	r2, r3, #32
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e023      	b.n	80039de <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	0c1b      	lsrs	r3, r3, #16
 800399a:	b2db      	uxtb	r3, r3
 800399c:	2b01      	cmp	r3, #1
 800399e:	d10d      	bne.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x84>
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	695b      	ldr	r3, [r3, #20]
 80039a6:	43da      	mvns	r2, r3
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	4013      	ands	r3, r2
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	bf0c      	ite	eq
 80039b2:	2301      	moveq	r3, #1
 80039b4:	2300      	movne	r3, #0
 80039b6:	b2db      	uxtb	r3, r3
 80039b8:	461a      	mov	r2, r3
 80039ba:	e00c      	b.n	80039d6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	43da      	mvns	r2, r3
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	4013      	ands	r3, r2
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	bf0c      	ite	eq
 80039ce:	2301      	moveq	r3, #1
 80039d0:	2300      	movne	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	79fb      	ldrb	r3, [r7, #7]
 80039d8:	429a      	cmp	r2, r3
 80039da:	d0b6      	beq.n	800394a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3710      	adds	r7, #16
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b084      	sub	sp, #16
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	60f8      	str	r0, [r7, #12]
 80039ee:	60b9      	str	r1, [r7, #8]
 80039f0:	607a      	str	r2, [r7, #4]
 80039f2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039f4:	e051      	b.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695b      	ldr	r3, [r3, #20]
 80039fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a04:	d123      	bne.n	8003a4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a14:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a1e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2220      	movs	r2, #32
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2200      	movs	r2, #0
 8003a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f043 0204 	orr.w	r2, r3, #4
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e046      	b.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d021      	beq.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe f827 	bl	8001aa8 <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d116      	bne.n	8003a9a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e020      	b.n	8003adc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	0c1b      	lsrs	r3, r3, #16
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	2b01      	cmp	r3, #1
 8003aa2:	d10c      	bne.n	8003abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	43da      	mvns	r2, r3
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	2301      	movne	r3, #1
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	e00b      	b.n	8003ad6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	43da      	mvns	r2, r3
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	4013      	ands	r3, r2
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d18d      	bne.n	80039f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ada:	2300      	movs	r3, #0
}
 8003adc:	4618      	mov	r0, r3
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b084      	sub	sp, #16
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	60f8      	str	r0, [r7, #12]
 8003aec:	60b9      	str	r1, [r7, #8]
 8003aee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003af0:	e02d      	b.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 f8ce 	bl	8003c94 <I2C_IsAcknowledgeFailed>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d001      	beq.n	8003b02 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003afe:	2301      	movs	r3, #1
 8003b00:	e02d      	b.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b08:	d021      	beq.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b0a:	f7fd ffcd 	bl	8001aa8 <HAL_GetTick>
 8003b0e:	4602      	mov	r2, r0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d302      	bcc.n	8003b20 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003b1a:	68bb      	ldr	r3, [r7, #8]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d116      	bne.n	8003b4e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b3a:	f043 0220 	orr.w	r2, r3, #32
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e007      	b.n	8003b5e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b58:	2b80      	cmp	r3, #128	; 0x80
 8003b5a:	d1ca      	bne.n	8003af2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}

08003b66 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b66:	b580      	push	{r7, lr}
 8003b68:	b084      	sub	sp, #16
 8003b6a:	af00      	add	r7, sp, #0
 8003b6c:	60f8      	str	r0, [r7, #12]
 8003b6e:	60b9      	str	r1, [r7, #8]
 8003b70:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b72:	e02d      	b.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f88d 	bl	8003c94 <I2C_IsAcknowledgeFailed>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e02d      	b.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d021      	beq.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8c:	f7fd ff8c 	bl	8001aa8 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	68ba      	ldr	r2, [r7, #8]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d302      	bcc.n	8003ba2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d116      	bne.n	8003bd0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2220      	movs	r2, #32
 8003bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bbc:	f043 0220 	orr.w	r2, r3, #32
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e007      	b.n	8003be0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	f003 0304 	and.w	r3, r3, #4
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d1ca      	bne.n	8003b74 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003bde:	2300      	movs	r3, #0
}
 8003be0:	4618      	mov	r0, r3
 8003be2:	3710      	adds	r7, #16
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}

08003be8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b084      	sub	sp, #16
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bf4:	e042      	b.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	695b      	ldr	r3, [r3, #20]
 8003bfc:	f003 0310 	and.w	r3, r3, #16
 8003c00:	2b10      	cmp	r3, #16
 8003c02:	d119      	bne.n	8003c38 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f06f 0210 	mvn.w	r2, #16
 8003c0c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2220      	movs	r2, #32
 8003c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c34:	2301      	movs	r3, #1
 8003c36:	e029      	b.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c38:	f7fd ff36 	bl	8001aa8 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	429a      	cmp	r2, r3
 8003c46:	d302      	bcc.n	8003c4e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d116      	bne.n	8003c7c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	2200      	movs	r2, #0
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	2220      	movs	r2, #32
 8003c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c68:	f043 0220 	orr.w	r2, r3, #32
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e007      	b.n	8003c8c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c86:	2b40      	cmp	r3, #64	; 0x40
 8003c88:	d1b5      	bne.n	8003bf6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003c8a:	2300      	movs	r3, #0
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	3710      	adds	r7, #16
 8003c90:	46bd      	mov	sp, r7
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b083      	sub	sp, #12
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	695b      	ldr	r3, [r3, #20]
 8003ca2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ca6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003caa:	d11b      	bne.n	8003ce4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cb4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cd0:	f043 0204 	orr.w	r2, r3, #4
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e000      	b.n	8003ce6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003ce4:	2300      	movs	r3, #0
}
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	370c      	adds	r7, #12
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr

08003cf2 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003cf2:	b480      	push	{r7}
 8003cf4:	b083      	sub	sp, #12
 8003cf6:	af00      	add	r7, sp, #0
 8003cf8:	6078      	str	r0, [r7, #4]
 8003cfa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	2b20      	cmp	r3, #32
 8003d06:	d129      	bne.n	8003d5c <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2224      	movs	r2, #36	; 0x24
 8003d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f022 0201 	bic.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0210 	bic.w	r2, r2, #16
 8003d2e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681a      	ldr	r2, [r3, #0]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f042 0201 	orr.w	r2, r2, #1
 8003d4e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	e000      	b.n	8003d5e <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8003d5c:	2302      	movs	r3, #2
  }
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003d6a:	b480      	push	{r7}
 8003d6c:	b085      	sub	sp, #20
 8003d6e:	af00      	add	r7, sp, #0
 8003d70:	6078      	str	r0, [r7, #4]
 8003d72:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	2b20      	cmp	r3, #32
 8003d82:	d12a      	bne.n	8003dda <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2224      	movs	r2, #36	; 0x24
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f022 0201 	bic.w	r2, r2, #1
 8003d9a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8003da4:	89fb      	ldrh	r3, [r7, #14]
 8003da6:	f023 030f 	bic.w	r3, r3, #15
 8003daa:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	89fb      	ldrh	r3, [r7, #14]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	89fa      	ldrh	r2, [r7, #14]
 8003dbc:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f042 0201 	orr.w	r2, r2, #1
 8003dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e000      	b.n	8003ddc <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003dda:	2302      	movs	r3, #2
  }
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003dee:	2300      	movs	r3, #0
 8003df0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	603b      	str	r3, [r7, #0]
 8003df6:	4b20      	ldr	r3, [pc, #128]	; (8003e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfa:	4a1f      	ldr	r2, [pc, #124]	; (8003e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e00:	6413      	str	r3, [r2, #64]	; 0x40
 8003e02:	4b1d      	ldr	r3, [pc, #116]	; (8003e78 <HAL_PWREx_EnableOverDrive+0x90>)
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	603b      	str	r3, [r7, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003e0e:	4b1b      	ldr	r3, [pc, #108]	; (8003e7c <HAL_PWREx_EnableOverDrive+0x94>)
 8003e10:	2201      	movs	r2, #1
 8003e12:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e14:	f7fd fe48 	bl	8001aa8 <HAL_GetTick>
 8003e18:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e1a:	e009      	b.n	8003e30 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e1c:	f7fd fe44 	bl	8001aa8 <HAL_GetTick>
 8003e20:	4602      	mov	r2, r0
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	1ad3      	subs	r3, r2, r3
 8003e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e2a:	d901      	bls.n	8003e30 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003e2c:	2303      	movs	r3, #3
 8003e2e:	e01f      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003e30:	4b13      	ldr	r3, [pc, #76]	; (8003e80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e3c:	d1ee      	bne.n	8003e1c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003e3e:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003e40:	2201      	movs	r2, #1
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003e44:	f7fd fe30 	bl	8001aa8 <HAL_GetTick>
 8003e48:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e4a:	e009      	b.n	8003e60 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003e4c:	f7fd fe2c 	bl	8001aa8 <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003e5a:	d901      	bls.n	8003e60 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003e5c:	2303      	movs	r3, #3
 8003e5e:	e007      	b.n	8003e70 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003e60:	4b07      	ldr	r3, [pc, #28]	; (8003e80 <HAL_PWREx_EnableOverDrive+0x98>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e6c:	d1ee      	bne.n	8003e4c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003e6e:	2300      	movs	r3, #0
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3708      	adds	r7, #8
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	420e0040 	.word	0x420e0040
 8003e80:	40007000 	.word	0x40007000
 8003e84:	420e0044 	.word	0x420e0044

08003e88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b086      	sub	sp, #24
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d101      	bne.n	8003e9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e96:	2301      	movs	r3, #1
 8003e98:	e264      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f003 0301 	and.w	r3, r3, #1
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d075      	beq.n	8003f92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ea6:	4ba3      	ldr	r3, [pc, #652]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 030c 	and.w	r3, r3, #12
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	d00c      	beq.n	8003ecc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003eb2:	4ba0      	ldr	r3, [pc, #640]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003eba:	2b08      	cmp	r3, #8
 8003ebc:	d112      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ebe:	4b9d      	ldr	r3, [pc, #628]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ec6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003eca:	d10b      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ecc:	4b99      	ldr	r3, [pc, #612]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d05b      	beq.n	8003f90 <HAL_RCC_OscConfig+0x108>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d157      	bne.n	8003f90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e23f      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003eec:	d106      	bne.n	8003efc <HAL_RCC_OscConfig+0x74>
 8003eee:	4b91      	ldr	r3, [pc, #580]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a90      	ldr	r2, [pc, #576]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	e01d      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003f04:	d10c      	bne.n	8003f20 <HAL_RCC_OscConfig+0x98>
 8003f06:	4b8b      	ldr	r3, [pc, #556]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a8a      	ldr	r2, [pc, #552]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a87      	ldr	r2, [pc, #540]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	6013      	str	r3, [r2, #0]
 8003f1e:	e00b      	b.n	8003f38 <HAL_RCC_OscConfig+0xb0>
 8003f20:	4b84      	ldr	r3, [pc, #528]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a83      	ldr	r2, [pc, #524]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f2a:	6013      	str	r3, [r2, #0]
 8003f2c:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	4a80      	ldr	r2, [pc, #512]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d013      	beq.n	8003f68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f40:	f7fd fdb2 	bl	8001aa8 <HAL_GetTick>
 8003f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f46:	e008      	b.n	8003f5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f48:	f7fd fdae 	bl	8001aa8 <HAL_GetTick>
 8003f4c:	4602      	mov	r2, r0
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	1ad3      	subs	r3, r2, r3
 8003f52:	2b64      	cmp	r3, #100	; 0x64
 8003f54:	d901      	bls.n	8003f5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003f56:	2303      	movs	r3, #3
 8003f58:	e204      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f5a:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d0f0      	beq.n	8003f48 <HAL_RCC_OscConfig+0xc0>
 8003f66:	e014      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f68:	f7fd fd9e 	bl	8001aa8 <HAL_GetTick>
 8003f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f6e:	e008      	b.n	8003f82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f70:	f7fd fd9a 	bl	8001aa8 <HAL_GetTick>
 8003f74:	4602      	mov	r2, r0
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	2b64      	cmp	r3, #100	; 0x64
 8003f7c:	d901      	bls.n	8003f82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e1f0      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f82:	4b6c      	ldr	r3, [pc, #432]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d1f0      	bne.n	8003f70 <HAL_RCC_OscConfig+0xe8>
 8003f8e:	e000      	b.n	8003f92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d063      	beq.n	8004066 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003f9e:	4b65      	ldr	r3, [pc, #404]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00b      	beq.n	8003fc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003faa:	4b62      	ldr	r3, [pc, #392]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d11c      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d116      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d005      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d001      	beq.n	8003fda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e1c4      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fda:	4b56      	ldr	r3, [pc, #344]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	691b      	ldr	r3, [r3, #16]
 8003fe6:	00db      	lsls	r3, r3, #3
 8003fe8:	4952      	ldr	r1, [pc, #328]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fee:	e03a      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d020      	beq.n	800403a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	; (8004138 <HAL_RCC_OscConfig+0x2b0>)
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ffe:	f7fd fd53 	bl	8001aa8 <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004004:	e008      	b.n	8004018 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004006:	f7fd fd4f 	bl	8001aa8 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d901      	bls.n	8004018 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e1a5      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004018:	4b46      	ldr	r3, [pc, #280]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0302 	and.w	r3, r3, #2
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0f0      	beq.n	8004006 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004024:	4b43      	ldr	r3, [pc, #268]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	00db      	lsls	r3, r3, #3
 8004032:	4940      	ldr	r1, [pc, #256]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	4313      	orrs	r3, r2
 8004036:	600b      	str	r3, [r1, #0]
 8004038:	e015      	b.n	8004066 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800403a:	4b3f      	ldr	r3, [pc, #252]	; (8004138 <HAL_RCC_OscConfig+0x2b0>)
 800403c:	2200      	movs	r2, #0
 800403e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004040:	f7fd fd32 	bl	8001aa8 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004048:	f7fd fd2e 	bl	8001aa8 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e184      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800405a:	4b36      	ldr	r3, [pc, #216]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 0302 	and.w	r3, r3, #2
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0308 	and.w	r3, r3, #8
 800406e:	2b00      	cmp	r3, #0
 8004070:	d030      	beq.n	80040d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d016      	beq.n	80040a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800407a:	4b30      	ldr	r3, [pc, #192]	; (800413c <HAL_RCC_OscConfig+0x2b4>)
 800407c:	2201      	movs	r2, #1
 800407e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fd fd12 	bl	8001aa8 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004086:	e008      	b.n	800409a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004088:	f7fd fd0e 	bl	8001aa8 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	2b02      	cmp	r3, #2
 8004094:	d901      	bls.n	800409a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004096:	2303      	movs	r3, #3
 8004098:	e164      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800409a:	4b26      	ldr	r3, [pc, #152]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 800409c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800409e:	f003 0302 	and.w	r3, r3, #2
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d0f0      	beq.n	8004088 <HAL_RCC_OscConfig+0x200>
 80040a6:	e015      	b.n	80040d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80040a8:	4b24      	ldr	r3, [pc, #144]	; (800413c <HAL_RCC_OscConfig+0x2b4>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80040ae:	f7fd fcfb 	bl	8001aa8 <HAL_GetTick>
 80040b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040b4:	e008      	b.n	80040c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80040b6:	f7fd fcf7 	bl	8001aa8 <HAL_GetTick>
 80040ba:	4602      	mov	r2, r0
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	1ad3      	subs	r3, r2, r3
 80040c0:	2b02      	cmp	r3, #2
 80040c2:	d901      	bls.n	80040c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e14d      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040c8:	4b1a      	ldr	r3, [pc, #104]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1f0      	bne.n	80040b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80a0 	beq.w	8004222 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040e2:	2300      	movs	r3, #0
 80040e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040e6:	4b13      	ldr	r3, [pc, #76]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10f      	bne.n	8004112 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040f2:	2300      	movs	r3, #0
 80040f4:	60bb      	str	r3, [r7, #8]
 80040f6:	4b0f      	ldr	r3, [pc, #60]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 80040f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040fa:	4a0e      	ldr	r2, [pc, #56]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004100:	6413      	str	r3, [r2, #64]	; 0x40
 8004102:	4b0c      	ldr	r3, [pc, #48]	; (8004134 <HAL_RCC_OscConfig+0x2ac>)
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800410a:	60bb      	str	r3, [r7, #8]
 800410c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800410e:	2301      	movs	r3, #1
 8004110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004112:	4b0b      	ldr	r3, [pc, #44]	; (8004140 <HAL_RCC_OscConfig+0x2b8>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800411a:	2b00      	cmp	r3, #0
 800411c:	d121      	bne.n	8004162 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800411e:	4b08      	ldr	r3, [pc, #32]	; (8004140 <HAL_RCC_OscConfig+0x2b8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a07      	ldr	r2, [pc, #28]	; (8004140 <HAL_RCC_OscConfig+0x2b8>)
 8004124:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800412a:	f7fd fcbd 	bl	8001aa8 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004130:	e011      	b.n	8004156 <HAL_RCC_OscConfig+0x2ce>
 8004132:	bf00      	nop
 8004134:	40023800 	.word	0x40023800
 8004138:	42470000 	.word	0x42470000
 800413c:	42470e80 	.word	0x42470e80
 8004140:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004144:	f7fd fcb0 	bl	8001aa8 <HAL_GetTick>
 8004148:	4602      	mov	r2, r0
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	1ad3      	subs	r3, r2, r3
 800414e:	2b02      	cmp	r3, #2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e106      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004156:	4b85      	ldr	r3, [pc, #532]	; (800436c <HAL_RCC_OscConfig+0x4e4>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0f0      	beq.n	8004144 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d106      	bne.n	8004178 <HAL_RCC_OscConfig+0x2f0>
 800416a:	4b81      	ldr	r3, [pc, #516]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800416c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800416e:	4a80      	ldr	r2, [pc, #512]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	6713      	str	r3, [r2, #112]	; 0x70
 8004176:	e01c      	b.n	80041b2 <HAL_RCC_OscConfig+0x32a>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	2b05      	cmp	r3, #5
 800417e:	d10c      	bne.n	800419a <HAL_RCC_OscConfig+0x312>
 8004180:	4b7b      	ldr	r3, [pc, #492]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004184:	4a7a      	ldr	r2, [pc, #488]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004186:	f043 0304 	orr.w	r3, r3, #4
 800418a:	6713      	str	r3, [r2, #112]	; 0x70
 800418c:	4b78      	ldr	r3, [pc, #480]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800418e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004190:	4a77      	ldr	r2, [pc, #476]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004192:	f043 0301 	orr.w	r3, r3, #1
 8004196:	6713      	str	r3, [r2, #112]	; 0x70
 8004198:	e00b      	b.n	80041b2 <HAL_RCC_OscConfig+0x32a>
 800419a:	4b75      	ldr	r3, [pc, #468]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800419c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419e:	4a74      	ldr	r2, [pc, #464]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80041a0:	f023 0301 	bic.w	r3, r3, #1
 80041a4:	6713      	str	r3, [r2, #112]	; 0x70
 80041a6:	4b72      	ldr	r3, [pc, #456]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80041a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041aa:	4a71      	ldr	r2, [pc, #452]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80041ac:	f023 0304 	bic.w	r3, r3, #4
 80041b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d015      	beq.n	80041e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ba:	f7fd fc75 	bl	8001aa8 <HAL_GetTick>
 80041be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041c0:	e00a      	b.n	80041d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041c2:	f7fd fc71 	bl	8001aa8 <HAL_GetTick>
 80041c6:	4602      	mov	r2, r0
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e0c5      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041d8:	4b65      	ldr	r3, [pc, #404]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	f003 0302 	and.w	r3, r3, #2
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d0ee      	beq.n	80041c2 <HAL_RCC_OscConfig+0x33a>
 80041e4:	e014      	b.n	8004210 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041e6:	f7fd fc5f 	bl	8001aa8 <HAL_GetTick>
 80041ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ec:	e00a      	b.n	8004204 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041ee:	f7fd fc5b 	bl	8001aa8 <HAL_GetTick>
 80041f2:	4602      	mov	r2, r0
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d901      	bls.n	8004204 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e0af      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004204:	4b5a      	ldr	r3, [pc, #360]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004208:	f003 0302 	and.w	r3, r3, #2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1ee      	bne.n	80041ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004210:	7dfb      	ldrb	r3, [r7, #23]
 8004212:	2b01      	cmp	r3, #1
 8004214:	d105      	bne.n	8004222 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004216:	4b56      	ldr	r3, [pc, #344]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a55      	ldr	r2, [pc, #340]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800421c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	2b00      	cmp	r3, #0
 8004228:	f000 809b 	beq.w	8004362 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f003 030c 	and.w	r3, r3, #12
 8004234:	2b08      	cmp	r3, #8
 8004236:	d05c      	beq.n	80042f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	699b      	ldr	r3, [r3, #24]
 800423c:	2b02      	cmp	r3, #2
 800423e:	d141      	bne.n	80042c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004240:	4b4c      	ldr	r3, [pc, #304]	; (8004374 <HAL_RCC_OscConfig+0x4ec>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004246:	f7fd fc2f 	bl	8001aa8 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800424e:	f7fd fc2b 	bl	8001aa8 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e081      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004260:	4b43      	ldr	r3, [pc, #268]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6a1b      	ldr	r3, [r3, #32]
 8004274:	431a      	orrs	r2, r3
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427a:	019b      	lsls	r3, r3, #6
 800427c:	431a      	orrs	r2, r3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
 8004288:	431a      	orrs	r2, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800428e:	061b      	lsls	r3, r3, #24
 8004290:	4937      	ldr	r1, [pc, #220]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004292:	4313      	orrs	r3, r2
 8004294:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004296:	4b37      	ldr	r3, [pc, #220]	; (8004374 <HAL_RCC_OscConfig+0x4ec>)
 8004298:	2201      	movs	r2, #1
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800429c:	f7fd fc04 	bl	8001aa8 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd fc00 	bl	8001aa8 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e056      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042b6:	4b2e      	ldr	r3, [pc, #184]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d0f0      	beq.n	80042a4 <HAL_RCC_OscConfig+0x41c>
 80042c2:	e04e      	b.n	8004362 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <HAL_RCC_OscConfig+0x4ec>)
 80042c6:	2200      	movs	r2, #0
 80042c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ca:	f7fd fbed 	bl	8001aa8 <HAL_GetTick>
 80042ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042d0:	e008      	b.n	80042e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042d2:	f7fd fbe9 	bl	8001aa8 <HAL_GetTick>
 80042d6:	4602      	mov	r2, r0
 80042d8:	693b      	ldr	r3, [r7, #16]
 80042da:	1ad3      	subs	r3, r2, r3
 80042dc:	2b02      	cmp	r3, #2
 80042de:	d901      	bls.n	80042e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80042e0:	2303      	movs	r3, #3
 80042e2:	e03f      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042e4:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d1f0      	bne.n	80042d2 <HAL_RCC_OscConfig+0x44a>
 80042f0:	e037      	b.n	8004362 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d101      	bne.n	80042fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e032      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042fe:	4b1c      	ldr	r3, [pc, #112]	; (8004370 <HAL_RCC_OscConfig+0x4e8>)
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d028      	beq.n	800435e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004316:	429a      	cmp	r2, r3
 8004318:	d121      	bne.n	800435e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004324:	429a      	cmp	r2, r3
 8004326:	d11a      	bne.n	800435e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800432e:	4013      	ands	r3, r2
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004334:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004336:	4293      	cmp	r3, r2
 8004338:	d111      	bne.n	800435e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004344:	085b      	lsrs	r3, r3, #1
 8004346:	3b01      	subs	r3, #1
 8004348:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800434a:	429a      	cmp	r2, r3
 800434c:	d107      	bne.n	800435e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004358:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800435a:	429a      	cmp	r2, r3
 800435c:	d001      	beq.n	8004362 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3718      	adds	r7, #24
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}
 800436c:	40007000 	.word	0x40007000
 8004370:	40023800 	.word	0x40023800
 8004374:	42470060 	.word	0x42470060

08004378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2b00      	cmp	r3, #0
 8004386:	d101      	bne.n	800438c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0cc      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800438c:	4b68      	ldr	r3, [pc, #416]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	683a      	ldr	r2, [r7, #0]
 8004396:	429a      	cmp	r2, r3
 8004398:	d90c      	bls.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800439c:	683a      	ldr	r2, [r7, #0]
 800439e:	b2d2      	uxtb	r2, r2
 80043a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043a2:	4b63      	ldr	r3, [pc, #396]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 030f 	and.w	r3, r3, #15
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d001      	beq.n	80043b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	e0b8      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d020      	beq.n	8004402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0304 	and.w	r3, r3, #4
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80043cc:	4b59      	ldr	r3, [pc, #356]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	4a58      	ldr	r2, [pc, #352]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80043d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0308 	and.w	r3, r3, #8
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d005      	beq.n	80043f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80043e4:	4b53      	ldr	r3, [pc, #332]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4a52      	ldr	r2, [pc, #328]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80043ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043f0:	4b50      	ldr	r3, [pc, #320]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	494d      	ldr	r1, [pc, #308]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80043fe:	4313      	orrs	r3, r2
 8004400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d044      	beq.n	8004498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d107      	bne.n	8004426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004416:	4b47      	ldr	r3, [pc, #284]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441e:	2b00      	cmp	r3, #0
 8004420:	d119      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e07f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d003      	beq.n	8004436 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004432:	2b03      	cmp	r3, #3
 8004434:	d107      	bne.n	8004446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004436:	4b3f      	ldr	r3, [pc, #252]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d109      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e06f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004446:	4b3b      	ldr	r3, [pc, #236]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0302 	and.w	r3, r3, #2
 800444e:	2b00      	cmp	r3, #0
 8004450:	d101      	bne.n	8004456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e067      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004456:	4b37      	ldr	r3, [pc, #220]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f023 0203 	bic.w	r2, r3, #3
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	4934      	ldr	r1, [pc, #208]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004468:	f7fd fb1e 	bl	8001aa8 <HAL_GetTick>
 800446c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800446e:	e00a      	b.n	8004486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004470:	f7fd fb1a 	bl	8001aa8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	; 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e04f      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004486:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f003 020c 	and.w	r2, r3, #12
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	429a      	cmp	r2, r3
 8004496:	d1eb      	bne.n	8004470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004498:	4b25      	ldr	r3, [pc, #148]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 030f 	and.w	r3, r3, #15
 80044a0:	683a      	ldr	r2, [r7, #0]
 80044a2:	429a      	cmp	r2, r3
 80044a4:	d20c      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044a6:	4b22      	ldr	r3, [pc, #136]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x1b8>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d001      	beq.n	80044c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	e032      	b.n	8004526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f003 0304 	and.w	r3, r3, #4
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d008      	beq.n	80044de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044cc:	4b19      	ldr	r3, [pc, #100]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	4916      	ldr	r1, [pc, #88]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044da:	4313      	orrs	r3, r2
 80044dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0308 	and.w	r3, r3, #8
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d009      	beq.n	80044fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ea:	4b12      	ldr	r3, [pc, #72]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044ec:	689b      	ldr	r3, [r3, #8]
 80044ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	00db      	lsls	r3, r3, #3
 80044f8:	490e      	ldr	r1, [pc, #56]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	4313      	orrs	r3, r2
 80044fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80044fe:	f000 f821 	bl	8004544 <HAL_RCC_GetSysClockFreq>
 8004502:	4602      	mov	r2, r0
 8004504:	4b0b      	ldr	r3, [pc, #44]	; (8004534 <HAL_RCC_ClockConfig+0x1bc>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	091b      	lsrs	r3, r3, #4
 800450a:	f003 030f 	and.w	r3, r3, #15
 800450e:	490a      	ldr	r1, [pc, #40]	; (8004538 <HAL_RCC_ClockConfig+0x1c0>)
 8004510:	5ccb      	ldrb	r3, [r1, r3]
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a09      	ldr	r2, [pc, #36]	; (800453c <HAL_RCC_ClockConfig+0x1c4>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <HAL_RCC_ClockConfig+0x1c8>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fa7e 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40023c00 	.word	0x40023c00
 8004534:	40023800 	.word	0x40023800
 8004538:	08007704 	.word	0x08007704
 800453c:	20000000 	.word	0x20000000
 8004540:	20000004 	.word	0x20000004

08004544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004544:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800454c:	2300      	movs	r3, #0
 800454e:	607b      	str	r3, [r7, #4]
 8004550:	2300      	movs	r3, #0
 8004552:	60fb      	str	r3, [r7, #12]
 8004554:	2300      	movs	r3, #0
 8004556:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004558:	2300      	movs	r3, #0
 800455a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800455c:	4b67      	ldr	r3, [pc, #412]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f003 030c 	and.w	r3, r3, #12
 8004564:	2b08      	cmp	r3, #8
 8004566:	d00d      	beq.n	8004584 <HAL_RCC_GetSysClockFreq+0x40>
 8004568:	2b08      	cmp	r3, #8
 800456a:	f200 80bd 	bhi.w	80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800456e:	2b00      	cmp	r3, #0
 8004570:	d002      	beq.n	8004578 <HAL_RCC_GetSysClockFreq+0x34>
 8004572:	2b04      	cmp	r3, #4
 8004574:	d003      	beq.n	800457e <HAL_RCC_GetSysClockFreq+0x3a>
 8004576:	e0b7      	b.n	80046e8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004578:	4b61      	ldr	r3, [pc, #388]	; (8004700 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800457a:	60bb      	str	r3, [r7, #8]
       break;
 800457c:	e0b7      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800457e:	4b61      	ldr	r3, [pc, #388]	; (8004704 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004580:	60bb      	str	r3, [r7, #8]
      break;
 8004582:	e0b4      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004584:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800458c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800458e:	4b5b      	ldr	r3, [pc, #364]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d04d      	beq.n	8004636 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b58      	ldr	r3, [pc, #352]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	461a      	mov	r2, r3
 80045a2:	f04f 0300 	mov.w	r3, #0
 80045a6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045aa:	f04f 0100 	mov.w	r1, #0
 80045ae:	ea02 0800 	and.w	r8, r2, r0
 80045b2:	ea03 0901 	and.w	r9, r3, r1
 80045b6:	4640      	mov	r0, r8
 80045b8:	4649      	mov	r1, r9
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	f04f 0300 	mov.w	r3, #0
 80045c2:	014b      	lsls	r3, r1, #5
 80045c4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045c8:	0142      	lsls	r2, r0, #5
 80045ca:	4610      	mov	r0, r2
 80045cc:	4619      	mov	r1, r3
 80045ce:	ebb0 0008 	subs.w	r0, r0, r8
 80045d2:	eb61 0109 	sbc.w	r1, r1, r9
 80045d6:	f04f 0200 	mov.w	r2, #0
 80045da:	f04f 0300 	mov.w	r3, #0
 80045de:	018b      	lsls	r3, r1, #6
 80045e0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80045e4:	0182      	lsls	r2, r0, #6
 80045e6:	1a12      	subs	r2, r2, r0
 80045e8:	eb63 0301 	sbc.w	r3, r3, r1
 80045ec:	f04f 0000 	mov.w	r0, #0
 80045f0:	f04f 0100 	mov.w	r1, #0
 80045f4:	00d9      	lsls	r1, r3, #3
 80045f6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80045fa:	00d0      	lsls	r0, r2, #3
 80045fc:	4602      	mov	r2, r0
 80045fe:	460b      	mov	r3, r1
 8004600:	eb12 0208 	adds.w	r2, r2, r8
 8004604:	eb43 0309 	adc.w	r3, r3, r9
 8004608:	f04f 0000 	mov.w	r0, #0
 800460c:	f04f 0100 	mov.w	r1, #0
 8004610:	0259      	lsls	r1, r3, #9
 8004612:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004616:	0250      	lsls	r0, r2, #9
 8004618:	4602      	mov	r2, r0
 800461a:	460b      	mov	r3, r1
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	461a      	mov	r2, r3
 8004624:	f04f 0300 	mov.w	r3, #0
 8004628:	f7fb fe32 	bl	8000290 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4613      	mov	r3, r2
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e04a      	b.n	80046cc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004636:	4b31      	ldr	r3, [pc, #196]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	099b      	lsrs	r3, r3, #6
 800463c:	461a      	mov	r2, r3
 800463e:	f04f 0300 	mov.w	r3, #0
 8004642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004646:	f04f 0100 	mov.w	r1, #0
 800464a:	ea02 0400 	and.w	r4, r2, r0
 800464e:	ea03 0501 	and.w	r5, r3, r1
 8004652:	4620      	mov	r0, r4
 8004654:	4629      	mov	r1, r5
 8004656:	f04f 0200 	mov.w	r2, #0
 800465a:	f04f 0300 	mov.w	r3, #0
 800465e:	014b      	lsls	r3, r1, #5
 8004660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004664:	0142      	lsls	r2, r0, #5
 8004666:	4610      	mov	r0, r2
 8004668:	4619      	mov	r1, r3
 800466a:	1b00      	subs	r0, r0, r4
 800466c:	eb61 0105 	sbc.w	r1, r1, r5
 8004670:	f04f 0200 	mov.w	r2, #0
 8004674:	f04f 0300 	mov.w	r3, #0
 8004678:	018b      	lsls	r3, r1, #6
 800467a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800467e:	0182      	lsls	r2, r0, #6
 8004680:	1a12      	subs	r2, r2, r0
 8004682:	eb63 0301 	sbc.w	r3, r3, r1
 8004686:	f04f 0000 	mov.w	r0, #0
 800468a:	f04f 0100 	mov.w	r1, #0
 800468e:	00d9      	lsls	r1, r3, #3
 8004690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004694:	00d0      	lsls	r0, r2, #3
 8004696:	4602      	mov	r2, r0
 8004698:	460b      	mov	r3, r1
 800469a:	1912      	adds	r2, r2, r4
 800469c:	eb45 0303 	adc.w	r3, r5, r3
 80046a0:	f04f 0000 	mov.w	r0, #0
 80046a4:	f04f 0100 	mov.w	r1, #0
 80046a8:	0299      	lsls	r1, r3, #10
 80046aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80046ae:	0290      	lsls	r0, r2, #10
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4610      	mov	r0, r2
 80046b6:	4619      	mov	r1, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	461a      	mov	r2, r3
 80046bc:	f04f 0300 	mov.w	r3, #0
 80046c0:	f7fb fde6 	bl	8000290 <__aeabi_uldivmod>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4613      	mov	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80046cc:	4b0b      	ldr	r3, [pc, #44]	; (80046fc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	0c1b      	lsrs	r3, r3, #16
 80046d2:	f003 0303 	and.w	r3, r3, #3
 80046d6:	3301      	adds	r3, #1
 80046d8:	005b      	lsls	r3, r3, #1
 80046da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80046e4:	60bb      	str	r3, [r7, #8]
      break;
 80046e6:	e002      	b.n	80046ee <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80046ea:	60bb      	str	r3, [r7, #8]
      break;
 80046ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ee:	68bb      	ldr	r3, [r7, #8]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80046fa:	bf00      	nop
 80046fc:	40023800 	.word	0x40023800
 8004700:	00f42400 	.word	0x00f42400
 8004704:	007a1200 	.word	0x007a1200

08004708 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004708:	b480      	push	{r7}
 800470a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800470c:	4b03      	ldr	r3, [pc, #12]	; (800471c <HAL_RCC_GetHCLKFreq+0x14>)
 800470e:	681b      	ldr	r3, [r3, #0]
}
 8004710:	4618      	mov	r0, r3
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
 800471a:	bf00      	nop
 800471c:	20000000 	.word	0x20000000

08004720 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004724:	f7ff fff0 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b05      	ldr	r3, [pc, #20]	; (8004740 <HAL_RCC_GetPCLK1Freq+0x20>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	0a9b      	lsrs	r3, r3, #10
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4903      	ldr	r1, [pc, #12]	; (8004744 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	fa22 f303 	lsr.w	r3, r2, r3
}
 800473c:	4618      	mov	r0, r3
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40023800 	.word	0x40023800
 8004744:	08007714 	.word	0x08007714

08004748 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800474c:	f7ff ffdc 	bl	8004708 <HAL_RCC_GetHCLKFreq>
 8004750:	4602      	mov	r2, r0
 8004752:	4b05      	ldr	r3, [pc, #20]	; (8004768 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	0b5b      	lsrs	r3, r3, #13
 8004758:	f003 0307 	and.w	r3, r3, #7
 800475c:	4903      	ldr	r1, [pc, #12]	; (800476c <HAL_RCC_GetPCLK2Freq+0x24>)
 800475e:	5ccb      	ldrb	r3, [r1, r3]
 8004760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004764:	4618      	mov	r0, r3
 8004766:	bd80      	pop	{r7, pc}
 8004768:	40023800 	.word	0x40023800
 800476c:	08007714 	.word	0x08007714

08004770 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e041      	b.n	8004806 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d106      	bne.n	800479c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	f7fc ff0a 	bl	80015b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f000 fb4a 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2201      	movs	r2, #1
 80047b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2201      	movs	r2, #1
 80047c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2201      	movs	r2, #1
 80047d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2201      	movs	r2, #1
 80047e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2201      	movs	r2, #1
 8004800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e041      	b.n	80048a4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b00      	cmp	r3, #0
 800482a:	d106      	bne.n	800483a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f000 f839 	bl	80048ac <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2202      	movs	r2, #2
 800483e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4610      	mov	r0, r2
 800484e:	f000 fafb 	bl	8004e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2201      	movs	r2, #1
 800485e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3708      	adds	r7, #8
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048b4:	bf00      	nop
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d122      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d11b      	bne.n	800491c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0202 	mvn.w	r2, #2
 80048ec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	f003 0303 	and.w	r3, r3, #3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d003      	beq.n	800490a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f000 fa81 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004908:	e005      	b.n	8004916 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f000 fa73 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 fa84 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	691b      	ldr	r3, [r3, #16]
 8004922:	f003 0304 	and.w	r3, r3, #4
 8004926:	2b04      	cmp	r3, #4
 8004928:	d122      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d11b      	bne.n	8004970 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f06f 0204 	mvn.w	r2, #4
 8004940:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2202      	movs	r2, #2
 8004946:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699b      	ldr	r3, [r3, #24]
 800494e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fa57 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 800495c:	e005      	b.n	800496a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 fa49 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fa5a 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	691b      	ldr	r3, [r3, #16]
 8004976:	f003 0308 	and.w	r3, r3, #8
 800497a:	2b08      	cmp	r3, #8
 800497c:	d122      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d11b      	bne.n	80049c4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f06f 0208 	mvn.w	r2, #8
 8004994:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2204      	movs	r2, #4
 800499a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	69db      	ldr	r3, [r3, #28]
 80049a2:	f003 0303 	and.w	r3, r3, #3
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d003      	beq.n	80049b2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049aa:	6878      	ldr	r0, [r7, #4]
 80049ac:	f000 fa2d 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 80049b0:	e005      	b.n	80049be <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 fa1f 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 fa30 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b10      	cmp	r3, #16
 80049d0:	d122      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0310 	and.w	r3, r3, #16
 80049dc:	2b10      	cmp	r3, #16
 80049de:	d11b      	bne.n	8004a18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f06f 0210 	mvn.w	r2, #16
 80049e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2208      	movs	r2, #8
 80049ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d003      	beq.n	8004a06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fe:	6878      	ldr	r0, [r7, #4]
 8004a00:	f000 fa03 	bl	8004e0a <HAL_TIM_IC_CaptureCallback>
 8004a04:	e005      	b.n	8004a12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f000 f9f5 	bl	8004df6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 fa06 	bl	8004e1e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0301 	and.w	r3, r3, #1
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d10e      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0301 	and.w	r3, r3, #1
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d107      	bne.n	8004a44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0201 	mvn.w	r2, #1
 8004a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f9cf 	bl	8004de2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a4e:	2b80      	cmp	r3, #128	; 0x80
 8004a50:	d10e      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d107      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004a68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 fd5c 	bl	8005528 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a7a:	2b40      	cmp	r3, #64	; 0x40
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a88:	2b40      	cmp	r3, #64	; 0x40
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f000 f9cb 	bl	8004e32 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0320 	and.w	r3, r3, #32
 8004aa6:	2b20      	cmp	r3, #32
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0320 	and.w	r3, r3, #32
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0220 	mvn.w	r2, #32
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fd26 	bl	8005514 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ac8:	bf00      	nop
 8004aca:	3708      	adds	r7, #8
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b086      	sub	sp, #24
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004adc:	2300      	movs	r3, #0
 8004ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae6:	2b01      	cmp	r3, #1
 8004ae8:	d101      	bne.n	8004aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004aea:	2302      	movs	r3, #2
 8004aec:	e0ae      	b.n	8004c4c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2b0c      	cmp	r3, #12
 8004afa:	f200 809f 	bhi.w	8004c3c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b39 	.word	0x08004b39
 8004b08:	08004c3d 	.word	0x08004c3d
 8004b0c:	08004c3d 	.word	0x08004c3d
 8004b10:	08004c3d 	.word	0x08004c3d
 8004b14:	08004b79 	.word	0x08004b79
 8004b18:	08004c3d 	.word	0x08004c3d
 8004b1c:	08004c3d 	.word	0x08004c3d
 8004b20:	08004c3d 	.word	0x08004c3d
 8004b24:	08004bbb 	.word	0x08004bbb
 8004b28:	08004c3d 	.word	0x08004c3d
 8004b2c:	08004c3d 	.word	0x08004c3d
 8004b30:	08004c3d 	.word	0x08004c3d
 8004b34:	08004bfb 	.word	0x08004bfb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fa22 	bl	8004f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f042 0208 	orr.w	r2, r2, #8
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f022 0204 	bic.w	r2, r2, #4
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691a      	ldr	r2, [r3, #16]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	430a      	orrs	r2, r1
 8004b74:	619a      	str	r2, [r3, #24]
      break;
 8004b76:	e064      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 fa72 	bl	8005068 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	699a      	ldr	r2, [r3, #24]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	699a      	ldr	r2, [r3, #24]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6999      	ldr	r1, [r3, #24]
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	021a      	lsls	r2, r3, #8
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	619a      	str	r2, [r3, #24]
      break;
 8004bb8:	e043      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 fac7 	bl	8005154 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0208 	orr.w	r2, r2, #8
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0204 	bic.w	r2, r2, #4
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691a      	ldr	r2, [r3, #16]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	61da      	str	r2, [r3, #28]
      break;
 8004bf8:	e023      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68b9      	ldr	r1, [r7, #8]
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 fb1b 	bl	800523c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	69da      	ldr	r2, [r3, #28]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	69da      	ldr	r2, [r3, #28]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	69d9      	ldr	r1, [r3, #28]
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	021a      	lsls	r2, r3, #8
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	61da      	str	r2, [r3, #28]
      break;
 8004c3a:	e002      	b.n	8004c42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	75fb      	strb	r3, [r7, #23]
      break;
 8004c40:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b084      	sub	sp, #16
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d101      	bne.n	8004c70 <HAL_TIM_ConfigClockSource+0x1c>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e0b4      	b.n	8004dda <HAL_TIM_ConfigClockSource+0x186>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2202      	movs	r2, #2
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	689b      	ldr	r3, [r3, #8]
 8004c86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004c8e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c90:	68bb      	ldr	r3, [r7, #8]
 8004c92:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004c96:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	68ba      	ldr	r2, [r7, #8]
 8004c9e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ca8:	d03e      	beq.n	8004d28 <HAL_TIM_ConfigClockSource+0xd4>
 8004caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cae:	f200 8087 	bhi.w	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cb2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cb6:	f000 8086 	beq.w	8004dc6 <HAL_TIM_ConfigClockSource+0x172>
 8004cba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cbe:	d87f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc0:	2b70      	cmp	r3, #112	; 0x70
 8004cc2:	d01a      	beq.n	8004cfa <HAL_TIM_ConfigClockSource+0xa6>
 8004cc4:	2b70      	cmp	r3, #112	; 0x70
 8004cc6:	d87b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cc8:	2b60      	cmp	r3, #96	; 0x60
 8004cca:	d050      	beq.n	8004d6e <HAL_TIM_ConfigClockSource+0x11a>
 8004ccc:	2b60      	cmp	r3, #96	; 0x60
 8004cce:	d877      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd0:	2b50      	cmp	r3, #80	; 0x50
 8004cd2:	d03c      	beq.n	8004d4e <HAL_TIM_ConfigClockSource+0xfa>
 8004cd4:	2b50      	cmp	r3, #80	; 0x50
 8004cd6:	d873      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d058      	beq.n	8004d8e <HAL_TIM_ConfigClockSource+0x13a>
 8004cdc:	2b40      	cmp	r3, #64	; 0x40
 8004cde:	d86f      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce0:	2b30      	cmp	r3, #48	; 0x30
 8004ce2:	d064      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004ce4:	2b30      	cmp	r3, #48	; 0x30
 8004ce6:	d86b      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004ce8:	2b20      	cmp	r3, #32
 8004cea:	d060      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cec:	2b20      	cmp	r3, #32
 8004cee:	d867      	bhi.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d05c      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf4:	2b10      	cmp	r3, #16
 8004cf6:	d05a      	beq.n	8004dae <HAL_TIM_ConfigClockSource+0x15a>
 8004cf8:	e062      	b.n	8004dc0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6818      	ldr	r0, [r3, #0]
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	6899      	ldr	r1, [r3, #8]
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	685a      	ldr	r2, [r3, #4]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	f000 fb67 	bl	80053dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d1c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	68ba      	ldr	r2, [r7, #8]
 8004d24:	609a      	str	r2, [r3, #8]
      break;
 8004d26:	e04f      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6818      	ldr	r0, [r3, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	6899      	ldr	r1, [r3, #8]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685a      	ldr	r2, [r3, #4]
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f000 fb50 	bl	80053dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d4a:	609a      	str	r2, [r3, #8]
      break;
 8004d4c:	e03c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6818      	ldr	r0, [r3, #0]
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	6859      	ldr	r1, [r3, #4]
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	461a      	mov	r2, r3
 8004d5c:	f000 fac4 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2150      	movs	r1, #80	; 0x50
 8004d66:	4618      	mov	r0, r3
 8004d68:	f000 fb1d 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004d6c:	e02c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6818      	ldr	r0, [r3, #0]
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	6859      	ldr	r1, [r3, #4]
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	f000 fae3 	bl	8005346 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2160      	movs	r1, #96	; 0x60
 8004d86:	4618      	mov	r0, r3
 8004d88:	f000 fb0d 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004d8c:	e01c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6818      	ldr	r0, [r3, #0]
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	6859      	ldr	r1, [r3, #4]
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f000 faa4 	bl	80052e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	2140      	movs	r1, #64	; 0x40
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 fafd 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004dac:	e00c      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	4619      	mov	r1, r3
 8004db8:	4610      	mov	r0, r2
 8004dba:	f000 faf4 	bl	80053a6 <TIM_ITRx_SetConfig>
      break;
 8004dbe:	e003      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dc4:	e000      	b.n	8004dc8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004dc6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3710      	adds	r7, #16
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b083      	sub	sp, #12
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dfe:	bf00      	nop
 8004e00:	370c      	adds	r7, #12
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr

08004e0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e0a:	b480      	push	{r7}
 8004e0c:	b083      	sub	sp, #12
 8004e0e:	af00      	add	r7, sp, #0
 8004e10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr

08004e1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e3a:	bf00      	nop
 8004e3c:	370c      	adds	r7, #12
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
	...

08004e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b085      	sub	sp, #20
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	4a40      	ldr	r2, [pc, #256]	; (8004f5c <TIM_Base_SetConfig+0x114>)
 8004e5c:	4293      	cmp	r3, r2
 8004e5e:	d013      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e66:	d00f      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	4a3d      	ldr	r2, [pc, #244]	; (8004f60 <TIM_Base_SetConfig+0x118>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00b      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3c      	ldr	r2, [pc, #240]	; (8004f64 <TIM_Base_SetConfig+0x11c>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d007      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3b      	ldr	r2, [pc, #236]	; (8004f68 <TIM_Base_SetConfig+0x120>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d003      	beq.n	8004e88 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3a      	ldr	r2, [pc, #232]	; (8004f6c <TIM_Base_SetConfig+0x124>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d108      	bne.n	8004e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	68fa      	ldr	r2, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	4a2f      	ldr	r2, [pc, #188]	; (8004f5c <TIM_Base_SetConfig+0x114>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d02b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea8:	d027      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	; (8004f60 <TIM_Base_SetConfig+0x118>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d023      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2b      	ldr	r2, [pc, #172]	; (8004f64 <TIM_Base_SetConfig+0x11c>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d01f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2a      	ldr	r2, [pc, #168]	; (8004f68 <TIM_Base_SetConfig+0x120>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a29      	ldr	r2, [pc, #164]	; (8004f6c <TIM_Base_SetConfig+0x124>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d017      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a28      	ldr	r2, [pc, #160]	; (8004f70 <TIM_Base_SetConfig+0x128>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d013      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a27      	ldr	r2, [pc, #156]	; (8004f74 <TIM_Base_SetConfig+0x12c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d00f      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a26      	ldr	r2, [pc, #152]	; (8004f78 <TIM_Base_SetConfig+0x130>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00b      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a25      	ldr	r2, [pc, #148]	; (8004f7c <TIM_Base_SetConfig+0x134>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d007      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a24      	ldr	r2, [pc, #144]	; (8004f80 <TIM_Base_SetConfig+0x138>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d003      	beq.n	8004efa <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a23      	ldr	r2, [pc, #140]	; (8004f84 <TIM_Base_SetConfig+0x13c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d108      	bne.n	8004f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	68db      	ldr	r3, [r3, #12]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	695b      	ldr	r3, [r3, #20]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	689a      	ldr	r2, [r3, #8]
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681a      	ldr	r2, [r3, #0]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <TIM_Base_SetConfig+0x114>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_Base_SetConfig+0xf8>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0c      	ldr	r2, [pc, #48]	; (8004f6c <TIM_Base_SetConfig+0x124>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d103      	bne.n	8004f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	691a      	ldr	r2, [r3, #16]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	615a      	str	r2, [r3, #20]
}
 8004f4e:	bf00      	nop
 8004f50:	3714      	adds	r7, #20
 8004f52:	46bd      	mov	sp, r7
 8004f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f58:	4770      	bx	lr
 8004f5a:	bf00      	nop
 8004f5c:	40010000 	.word	0x40010000
 8004f60:	40000400 	.word	0x40000400
 8004f64:	40000800 	.word	0x40000800
 8004f68:	40000c00 	.word	0x40000c00
 8004f6c:	40010400 	.word	0x40010400
 8004f70:	40014000 	.word	0x40014000
 8004f74:	40014400 	.word	0x40014400
 8004f78:	40014800 	.word	0x40014800
 8004f7c:	40001800 	.word	0x40001800
 8004f80:	40001c00 	.word	0x40001c00
 8004f84:	40002000 	.word	0x40002000

08004f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b087      	sub	sp, #28
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
 8004f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a1b      	ldr	r3, [r3, #32]
 8004f96:	f023 0201 	bic.w	r2, r3, #1
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	699b      	ldr	r3, [r3, #24]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	f023 0303 	bic.w	r3, r3, #3
 8004fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004fca:	697b      	ldr	r3, [r7, #20]
 8004fcc:	f023 0302 	bic.w	r3, r3, #2
 8004fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	689b      	ldr	r3, [r3, #8]
 8004fd6:	697a      	ldr	r2, [r7, #20]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4a20      	ldr	r2, [pc, #128]	; (8005060 <TIM_OC1_SetConfig+0xd8>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d003      	beq.n	8004fec <TIM_OC1_SetConfig+0x64>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a1f      	ldr	r2, [pc, #124]	; (8005064 <TIM_OC1_SetConfig+0xdc>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d10c      	bne.n	8005006 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f023 0308 	bic.w	r3, r3, #8
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	697a      	ldr	r2, [r7, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f023 0304 	bic.w	r3, r3, #4
 8005004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a15      	ldr	r2, [pc, #84]	; (8005060 <TIM_OC1_SetConfig+0xd8>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d003      	beq.n	8005016 <TIM_OC1_SetConfig+0x8e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a14      	ldr	r2, [pc, #80]	; (8005064 <TIM_OC1_SetConfig+0xdc>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d111      	bne.n	800503a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005016:	693b      	ldr	r3, [r7, #16]
 8005018:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800501c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005024:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	693a      	ldr	r2, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	699b      	ldr	r3, [r3, #24]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	685a      	ldr	r2, [r3, #4]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	697a      	ldr	r2, [r7, #20]
 8005052:	621a      	str	r2, [r3, #32]
}
 8005054:	bf00      	nop
 8005056:	371c      	adds	r7, #28
 8005058:	46bd      	mov	sp, r7
 800505a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505e:	4770      	bx	lr
 8005060:	40010000 	.word	0x40010000
 8005064:	40010400 	.word	0x40010400

08005068 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005068:	b480      	push	{r7}
 800506a:	b087      	sub	sp, #28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	f023 0210 	bic.w	r2, r3, #16
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800509e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	021b      	lsls	r3, r3, #8
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	4313      	orrs	r3, r2
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80050ac:	697b      	ldr	r3, [r7, #20]
 80050ae:	f023 0320 	bic.w	r3, r3, #32
 80050b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	697a      	ldr	r2, [r7, #20]
 80050bc:	4313      	orrs	r3, r2
 80050be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a22      	ldr	r2, [pc, #136]	; (800514c <TIM_OC2_SetConfig+0xe4>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d003      	beq.n	80050d0 <TIM_OC2_SetConfig+0x68>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a21      	ldr	r2, [pc, #132]	; (8005150 <TIM_OC2_SetConfig+0xe8>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d10d      	bne.n	80050ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80050d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	68db      	ldr	r3, [r3, #12]
 80050dc:	011b      	lsls	r3, r3, #4
 80050de:	697a      	ldr	r2, [r7, #20]
 80050e0:	4313      	orrs	r3, r2
 80050e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a17      	ldr	r2, [pc, #92]	; (800514c <TIM_OC2_SetConfig+0xe4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d003      	beq.n	80050fc <TIM_OC2_SetConfig+0x94>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	4a16      	ldr	r2, [pc, #88]	; (8005150 <TIM_OC2_SetConfig+0xe8>)
 80050f8:	4293      	cmp	r3, r2
 80050fa:	d113      	bne.n	8005124 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005102:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	699b      	ldr	r3, [r3, #24]
 800511c:	009b      	lsls	r3, r3, #2
 800511e:	693a      	ldr	r2, [r7, #16]
 8005120:	4313      	orrs	r3, r2
 8005122:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	bf00      	nop
 8005140:	371c      	adds	r7, #28
 8005142:	46bd      	mov	sp, r7
 8005144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005148:	4770      	bx	lr
 800514a:	bf00      	nop
 800514c:	40010000 	.word	0x40010000
 8005150:	40010400 	.word	0x40010400

08005154 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005154:	b480      	push	{r7}
 8005156:	b087      	sub	sp, #28
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
 800515c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a1b      	ldr	r3, [r3, #32]
 8005162:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a1b      	ldr	r3, [r3, #32]
 800516e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	f023 0303 	bic.w	r3, r3, #3
 800518a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	4313      	orrs	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800519c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	021b      	lsls	r3, r3, #8
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a21      	ldr	r2, [pc, #132]	; (8005234 <TIM_OC3_SetConfig+0xe0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d003      	beq.n	80051ba <TIM_OC3_SetConfig+0x66>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a20      	ldr	r2, [pc, #128]	; (8005238 <TIM_OC3_SetConfig+0xe4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d10d      	bne.n	80051d6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80051c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	021b      	lsls	r3, r3, #8
 80051c8:	697a      	ldr	r2, [r7, #20]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a16      	ldr	r2, [pc, #88]	; (8005234 <TIM_OC3_SetConfig+0xe0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d003      	beq.n	80051e6 <TIM_OC3_SetConfig+0x92>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a15      	ldr	r2, [pc, #84]	; (8005238 <TIM_OC3_SetConfig+0xe4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d113      	bne.n	800520e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80051ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	4313      	orrs	r3, r2
 8005200:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	699b      	ldr	r3, [r3, #24]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	4313      	orrs	r3, r2
 800520c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	693a      	ldr	r2, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	68fa      	ldr	r2, [r7, #12]
 8005218:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685a      	ldr	r2, [r3, #4]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	697a      	ldr	r2, [r7, #20]
 8005226:	621a      	str	r2, [r3, #32]
}
 8005228:	bf00      	nop
 800522a:	371c      	adds	r7, #28
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	40010000 	.word	0x40010000
 8005238:	40010400 	.word	0x40010400

0800523c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
 8005244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a1b      	ldr	r3, [r3, #32]
 800524a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6a1b      	ldr	r3, [r3, #32]
 8005256:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	69db      	ldr	r3, [r3, #28]
 8005262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005272:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	68fa      	ldr	r2, [r7, #12]
 800527c:	4313      	orrs	r3, r2
 800527e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005286:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	031b      	lsls	r3, r3, #12
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <TIM_OC4_SetConfig+0xa4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d003      	beq.n	80052a4 <TIM_OC4_SetConfig+0x68>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <TIM_OC4_SetConfig+0xa8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d109      	bne.n	80052b8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80052aa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	695b      	ldr	r3, [r3, #20]
 80052b0:	019b      	lsls	r3, r3, #6
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	4313      	orrs	r3, r2
 80052b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68fa      	ldr	r2, [r7, #12]
 80052c2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	685a      	ldr	r2, [r3, #4]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	621a      	str	r2, [r3, #32]
}
 80052d2:	bf00      	nop
 80052d4:	371c      	adds	r7, #28
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40010000 	.word	0x40010000
 80052e4:	40010400 	.word	0x40010400

080052e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b087      	sub	sp, #28
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	60f8      	str	r0, [r7, #12]
 80052f0:	60b9      	str	r1, [r7, #8]
 80052f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6a1b      	ldr	r3, [r3, #32]
 80052f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	6a1b      	ldr	r3, [r3, #32]
 80052fe:	f023 0201 	bic.w	r2, r3, #1
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005312:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	4313      	orrs	r3, r2
 800531c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800531e:	697b      	ldr	r3, [r7, #20]
 8005320:	f023 030a 	bic.w	r3, r3, #10
 8005324:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005326:	697a      	ldr	r2, [r7, #20]
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	4313      	orrs	r3, r2
 800532c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	693a      	ldr	r2, [r7, #16]
 8005332:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	621a      	str	r2, [r3, #32]
}
 800533a:	bf00      	nop
 800533c:	371c      	adds	r7, #28
 800533e:	46bd      	mov	sp, r7
 8005340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005344:	4770      	bx	lr

08005346 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005346:	b480      	push	{r7}
 8005348:	b087      	sub	sp, #28
 800534a:	af00      	add	r7, sp, #0
 800534c:	60f8      	str	r0, [r7, #12]
 800534e:	60b9      	str	r1, [r7, #8]
 8005350:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	f023 0210 	bic.w	r2, r3, #16
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	699b      	ldr	r3, [r3, #24]
 8005362:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6a1b      	ldr	r3, [r3, #32]
 8005368:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005370:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	031b      	lsls	r3, r3, #12
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005382:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	011b      	lsls	r3, r3, #4
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4313      	orrs	r3, r2
 800538c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	697a      	ldr	r2, [r7, #20]
 8005392:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	621a      	str	r2, [r3, #32]
}
 800539a:	bf00      	nop
 800539c:	371c      	adds	r7, #28
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr

080053a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053a6:	b480      	push	{r7}
 80053a8:	b085      	sub	sp, #20
 80053aa:	af00      	add	r7, sp, #0
 80053ac:	6078      	str	r0, [r7, #4]
 80053ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053be:	683a      	ldr	r2, [r7, #0]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	f043 0307 	orr.w	r3, r3, #7
 80053c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	609a      	str	r2, [r3, #8]
}
 80053d0:	bf00      	nop
 80053d2:	3714      	adds	r7, #20
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr

080053dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	689b      	ldr	r3, [r3, #8]
 80053ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	021a      	lsls	r2, r3, #8
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	431a      	orrs	r2, r3
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	4313      	orrs	r3, r2
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	697a      	ldr	r2, [r7, #20]
 800540e:	609a      	str	r2, [r3, #8]
}
 8005410:	bf00      	nop
 8005412:	371c      	adds	r7, #28
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e05a      	b.n	80054ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a21      	ldr	r2, [pc, #132]	; (80054f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d022      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d01d      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a1d      	ldr	r2, [pc, #116]	; (80054fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d018      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a1b      	ldr	r2, [pc, #108]	; (8005500 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d013      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a1a      	ldr	r2, [pc, #104]	; (8005504 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d00e      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a18      	ldr	r2, [pc, #96]	; (8005508 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d009      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a17      	ldr	r2, [pc, #92]	; (800550c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d004      	beq.n	80054be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a15      	ldr	r2, [pc, #84]	; (8005510 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d10c      	bne.n	80054d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80054be:	68bb      	ldr	r3, [r7, #8]
 80054c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2201      	movs	r2, #1
 80054dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3714      	adds	r7, #20
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40000400 	.word	0x40000400
 8005500:	40000800 	.word	0x40000800
 8005504:	40000c00 	.word	0x40000c00
 8005508:	40010400 	.word	0x40010400
 800550c:	40014000 	.word	0x40014000
 8005510:	40001800 	.word	0x40001800

08005514 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e03f      	b.n	80055ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005554:	b2db      	uxtb	r3, r3
 8005556:	2b00      	cmp	r3, #0
 8005558:	d106      	bne.n	8005568 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2200      	movs	r2, #0
 800555e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f7fc f9c0 	bl	80018e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2224      	movs	r2, #36	; 0x24
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68da      	ldr	r2, [r3, #12]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800557e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005580:	6878      	ldr	r0, [r7, #4]
 8005582:	f000 fd7b 	bl	800607c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	691a      	ldr	r2, [r3, #16]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005594:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	695a      	ldr	r2, [r3, #20]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80055a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80055b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2220      	movs	r2, #32
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055cc:	2300      	movs	r3, #0
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3708      	adds	r7, #8
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b08a      	sub	sp, #40	; 0x28
 80055da:	af02      	add	r7, sp, #8
 80055dc:	60f8      	str	r0, [r7, #12]
 80055de:	60b9      	str	r1, [r7, #8]
 80055e0:	603b      	str	r3, [r7, #0]
 80055e2:	4613      	mov	r3, r2
 80055e4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80055e6:	2300      	movs	r3, #0
 80055e8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	2b20      	cmp	r3, #32
 80055f4:	d17c      	bne.n	80056f0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d002      	beq.n	8005602 <HAL_UART_Transmit+0x2c>
 80055fc:	88fb      	ldrh	r3, [r7, #6]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e075      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800560c:	2b01      	cmp	r3, #1
 800560e:	d101      	bne.n	8005614 <HAL_UART_Transmit+0x3e>
 8005610:	2302      	movs	r3, #2
 8005612:	e06e      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2221      	movs	r2, #33	; 0x21
 8005626:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800562a:	f7fc fa3d 	bl	8001aa8 <HAL_GetTick>
 800562e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	88fa      	ldrh	r2, [r7, #6]
 8005634:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	88fa      	ldrh	r2, [r7, #6]
 800563a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005644:	d108      	bne.n	8005658 <HAL_UART_Transmit+0x82>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d104      	bne.n	8005658 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800564e:	2300      	movs	r3, #0
 8005650:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005652:	68bb      	ldr	r3, [r7, #8]
 8005654:	61bb      	str	r3, [r7, #24]
 8005656:	e003      	b.n	8005660 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800565c:	2300      	movs	r3, #0
 800565e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005668:	e02a      	b.n	80056c0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	9300      	str	r3, [sp, #0]
 800566e:	697b      	ldr	r3, [r7, #20]
 8005670:	2200      	movs	r2, #0
 8005672:	2180      	movs	r1, #128	; 0x80
 8005674:	68f8      	ldr	r0, [r7, #12]
 8005676:	f000 faf9 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 800567a:	4603      	mov	r3, r0
 800567c:	2b00      	cmp	r3, #0
 800567e:	d001      	beq.n	8005684 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e036      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d10b      	bne.n	80056a2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	881b      	ldrh	r3, [r3, #0]
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005698:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800569a:	69bb      	ldr	r3, [r7, #24]
 800569c:	3302      	adds	r3, #2
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e007      	b.n	80056b2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056a2:	69fb      	ldr	r3, [r7, #28]
 80056a4:	781a      	ldrb	r2, [r3, #0]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	3301      	adds	r3, #1
 80056b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056b6:	b29b      	uxth	r3, r3
 80056b8:	3b01      	subs	r3, #1
 80056ba:	b29a      	uxth	r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1cf      	bne.n	800566a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2200      	movs	r2, #0
 80056d2:	2140      	movs	r1, #64	; 0x40
 80056d4:	68f8      	ldr	r0, [r7, #12]
 80056d6:	f000 fac9 	bl	8005c6c <UART_WaitOnFlagUntilTimeout>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d001      	beq.n	80056e4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e006      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80056ec:	2300      	movs	r3, #0
 80056ee:	e000      	b.n	80056f2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80056f0:	2302      	movs	r3, #2
  }
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3720      	adds	r7, #32
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
	...

080056fc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b0ba      	sub	sp, #232	; 0xe8
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	695b      	ldr	r3, [r3, #20]
 800571e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005722:	2300      	movs	r3, #0
 8005724:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005728:	2300      	movs	r3, #0
 800572a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800572e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800573a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10f      	bne.n	8005762 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005742:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005746:	f003 0320 	and.w	r3, r3, #32
 800574a:	2b00      	cmp	r3, #0
 800574c:	d009      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
 800574e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d003      	beq.n	8005762 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f000 fbd3 	bl	8005f06 <UART_Receive_IT>
      return;
 8005760:	e256      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005762:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005766:	2b00      	cmp	r3, #0
 8005768:	f000 80de 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
 800576c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005770:	f003 0301 	and.w	r3, r3, #1
 8005774:	2b00      	cmp	r3, #0
 8005776:	d106      	bne.n	8005786 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005778:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800577c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005780:	2b00      	cmp	r3, #0
 8005782:	f000 80d1 	beq.w	8005928 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005786:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800578a:	f003 0301 	and.w	r3, r3, #1
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00b      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
 8005792:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800579a:	2b00      	cmp	r3, #0
 800579c:	d005      	beq.n	80057aa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a2:	f043 0201 	orr.w	r2, r3, #1
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d00b      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
 80057b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d005      	beq.n	80057ce <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c6:	f043 0202 	orr.w	r2, r3, #2
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80057ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057d2:	f003 0302 	and.w	r3, r3, #2
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d00b      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
 80057da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057de:	f003 0301 	and.w	r3, r3, #1
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d005      	beq.n	80057f2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ea:	f043 0204 	orr.w	r2, r3, #4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d011      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
 80057fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005802:	f003 0320 	and.w	r3, r3, #32
 8005806:	2b00      	cmp	r3, #0
 8005808:	d105      	bne.n	8005816 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800580a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580e:	f003 0301 	and.w	r3, r3, #1
 8005812:	2b00      	cmp	r3, #0
 8005814:	d005      	beq.n	8005822 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581a:	f043 0208 	orr.w	r2, r3, #8
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 81ed 	beq.w	8005c06 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800582c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b00      	cmp	r3, #0
 8005836:	d008      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
 8005838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800583c:	f003 0320 	and.w	r3, r3, #32
 8005840:	2b00      	cmp	r3, #0
 8005842:	d002      	beq.n	800584a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 fb5e 	bl	8005f06 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005854:	2b40      	cmp	r3, #64	; 0x40
 8005856:	bf0c      	ite	eq
 8005858:	2301      	moveq	r3, #1
 800585a:	2300      	movne	r3, #0
 800585c:	b2db      	uxtb	r3, r3
 800585e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005866:	f003 0308 	and.w	r3, r3, #8
 800586a:	2b00      	cmp	r3, #0
 800586c:	d103      	bne.n	8005876 <HAL_UART_IRQHandler+0x17a>
 800586e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04f      	beq.n	8005916 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f000 fa66 	bl	8005d48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005886:	2b40      	cmp	r3, #64	; 0x40
 8005888:	d141      	bne.n	800590e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3314      	adds	r3, #20
 8005890:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005894:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	3314      	adds	r3, #20
 80058b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80058b6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80058ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80058c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80058c6:	e841 2300 	strex	r3, r2, [r1]
 80058ca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80058ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d1d9      	bne.n	800588a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d013      	beq.n	8005906 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e2:	4a7d      	ldr	r2, [pc, #500]	; (8005ad8 <HAL_UART_IRQHandler+0x3dc>)
 80058e4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fc fdfa 	bl	80024e4 <HAL_DMA_Abort_IT>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d016      	beq.n	8005924 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058fc:	687a      	ldr	r2, [r7, #4]
 80058fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005904:	e00e      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 f99a 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800590c:	e00a      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f000 f996 	bl	8005c40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005914:	e006      	b.n	8005924 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f992 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005922:	e170      	b.n	8005c06 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005924:	bf00      	nop
    return;
 8005926:	e16e      	b.n	8005c06 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800592c:	2b01      	cmp	r3, #1
 800592e:	f040 814a 	bne.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005932:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005936:	f003 0310 	and.w	r3, r3, #16
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 8143 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f003 0310 	and.w	r3, r3, #16
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 813c 	beq.w	8005bc6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800594e:	2300      	movs	r3, #0
 8005950:	60bb      	str	r3, [r7, #8]
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	60bb      	str	r3, [r7, #8]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	60bb      	str	r3, [r7, #8]
 8005962:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	695b      	ldr	r3, [r3, #20]
 800596a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800596e:	2b40      	cmp	r3, #64	; 0x40
 8005970:	f040 80b4 	bne.w	8005adc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005980:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005984:	2b00      	cmp	r3, #0
 8005986:	f000 8140 	beq.w	8005c0a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800598e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005992:	429a      	cmp	r2, r3
 8005994:	f080 8139 	bcs.w	8005c0a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800599e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a4:	69db      	ldr	r3, [r3, #28]
 80059a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059aa:	f000 8088 	beq.w	8005abe <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	330c      	adds	r3, #12
 80059b4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80059bc:	e853 3f00 	ldrex	r3, [r3]
 80059c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80059c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	330c      	adds	r3, #12
 80059d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059de:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059ea:	e841 2300 	strex	r3, r2, [r1]
 80059ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d1d9      	bne.n	80059ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	3314      	adds	r3, #20
 8005a00:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a04:	e853 3f00 	ldrex	r3, [r3]
 8005a08:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a0a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a0c:	f023 0301 	bic.w	r3, r3, #1
 8005a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	3314      	adds	r3, #20
 8005a1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a1e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a22:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a26:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a2a:	e841 2300 	strex	r3, r2, [r1]
 8005a2e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1e1      	bne.n	80059fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3314      	adds	r3, #20
 8005a3c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a3e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a40:	e853 3f00 	ldrex	r3, [r3]
 8005a44:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a5a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a5c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a60:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e3      	bne.n	8005a36 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2220      	movs	r2, #32
 8005a72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	330c      	adds	r3, #12
 8005a82:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a84:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a86:	e853 3f00 	ldrex	r3, [r3]
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a8e:	f023 0310 	bic.w	r3, r3, #16
 8005a92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005aa0:	65ba      	str	r2, [r7, #88]	; 0x58
 8005aa2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aa4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005aa6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005aa8:	e841 2300 	strex	r3, r2, [r1]
 8005aac:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005aae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d1e3      	bne.n	8005a7c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f7fc fca3 	bl	8002404 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac6:	b29b      	uxth	r3, r3
 8005ac8:	1ad3      	subs	r3, r2, r3
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	4619      	mov	r1, r3
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 f8c0 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005ad4:	e099      	b.n	8005c0a <HAL_UART_IRQHandler+0x50e>
 8005ad6:	bf00      	nop
 8005ad8:	08005e0f 	.word	0x08005e0f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ae4:	b29b      	uxth	r3, r3
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005af0:	b29b      	uxth	r3, r3
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	f000 808b 	beq.w	8005c0e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005af8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	f000 8086 	beq.w	8005c0e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	330c      	adds	r3, #12
 8005b08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b0c:	e853 3f00 	ldrex	r3, [r3]
 8005b10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	330c      	adds	r3, #12
 8005b22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005b26:	647a      	str	r2, [r7, #68]	; 0x44
 8005b28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b2e:	e841 2300 	strex	r3, r2, [r1]
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d1e3      	bne.n	8005b02 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	3314      	adds	r3, #20
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b44:	e853 3f00 	ldrex	r3, [r3]
 8005b48:	623b      	str	r3, [r7, #32]
   return(result);
 8005b4a:	6a3b      	ldr	r3, [r7, #32]
 8005b4c:	f023 0301 	bic.w	r3, r3, #1
 8005b50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b5e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e3      	bne.n	8005b3a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	330c      	adds	r3, #12
 8005b86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	e853 3f00 	ldrex	r3, [r3]
 8005b8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f023 0310 	bic.w	r3, r3, #16
 8005b96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	330c      	adds	r3, #12
 8005ba0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005ba4:	61fa      	str	r2, [r7, #28]
 8005ba6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba8:	69b9      	ldr	r1, [r7, #24]
 8005baa:	69fa      	ldr	r2, [r7, #28]
 8005bac:	e841 2300 	strex	r3, r2, [r1]
 8005bb0:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d1e3      	bne.n	8005b80 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f848 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005bc4:	e023      	b.n	8005c0e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <HAL_UART_IRQHandler+0x4ea>
 8005bd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d003      	beq.n	8005be6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f000 f929 	bl	8005e36 <UART_Transmit_IT>
    return;
 8005be4:	e014      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d00e      	beq.n	8005c10 <HAL_UART_IRQHandler+0x514>
 8005bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d008      	beq.n	8005c10 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 f969 	bl	8005ed6 <UART_EndTransmit_IT>
    return;
 8005c04:	e004      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
    return;
 8005c06:	bf00      	nop
 8005c08:	e002      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
      return;
 8005c0a:	bf00      	nop
 8005c0c:	e000      	b.n	8005c10 <HAL_UART_IRQHandler+0x514>
      return;
 8005c0e:	bf00      	nop
  }
}
 8005c10:	37e8      	adds	r7, #232	; 0xe8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop

08005c18 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b083      	sub	sp, #12
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005c20:	bf00      	nop
 8005c22:	370c      	adds	r7, #12
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr

08005c2c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c2c:	b480      	push	{r7}
 8005c2e:	b083      	sub	sp, #12
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005c34:	bf00      	nop
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b083      	sub	sp, #12
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c48:	bf00      	nop
 8005c4a:	370c      	adds	r7, #12
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b083      	sub	sp, #12
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	460b      	mov	r3, r1
 8005c5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b090      	sub	sp, #64	; 0x40
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	603b      	str	r3, [r7, #0]
 8005c78:	4613      	mov	r3, r2
 8005c7a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c7c:	e050      	b.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d04c      	beq.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d007      	beq.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
 8005c8c:	f7fb ff0c 	bl	8001aa8 <HAL_GetTick>
 8005c90:	4602      	mov	r2, r0
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	1ad3      	subs	r3, r2, r3
 8005c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d241      	bcs.n	8005d20 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	330c      	adds	r3, #12
 8005ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ca6:	e853 3f00 	ldrex	r3, [r3]
 8005caa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005cb2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cbc:	637a      	str	r2, [r7, #52]	; 0x34
 8005cbe:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cc4:	e841 2300 	strex	r3, r2, [r1]
 8005cc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e5      	bne.n	8005c9c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3314      	adds	r3, #20
 8005cd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd8:	697b      	ldr	r3, [r7, #20]
 8005cda:	e853 3f00 	ldrex	r3, [r3]
 8005cde:	613b      	str	r3, [r7, #16]
   return(result);
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	f023 0301 	bic.w	r3, r3, #1
 8005ce6:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3314      	adds	r3, #20
 8005cee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005cf0:	623a      	str	r2, [r7, #32]
 8005cf2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cf4:	69f9      	ldr	r1, [r7, #28]
 8005cf6:	6a3a      	ldr	r2, [r7, #32]
 8005cf8:	e841 2300 	strex	r3, r2, [r1]
 8005cfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cfe:	69bb      	ldr	r3, [r7, #24]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e5      	bne.n	8005cd0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	2220      	movs	r2, #32
 8005d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2200      	movs	r2, #0
 8005d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	e00f      	b.n	8005d40 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	681a      	ldr	r2, [r3, #0]
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	4013      	ands	r3, r2
 8005d2a:	68ba      	ldr	r2, [r7, #8]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	bf0c      	ite	eq
 8005d30:	2301      	moveq	r3, #1
 8005d32:	2300      	movne	r3, #0
 8005d34:	b2db      	uxtb	r3, r3
 8005d36:	461a      	mov	r2, r3
 8005d38:	79fb      	ldrb	r3, [r7, #7]
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d09f      	beq.n	8005c7e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
}
 8005d40:	4618      	mov	r0, r3
 8005d42:	3740      	adds	r7, #64	; 0x40
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b095      	sub	sp, #84	; 0x54
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	330c      	adds	r3, #12
 8005d56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	e853 3f00 	ldrex	r3, [r3]
 8005d5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	330c      	adds	r3, #12
 8005d6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d70:	643a      	str	r2, [r7, #64]	; 0x40
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e5      	bne.n	8005d50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3314      	adds	r3, #20
 8005d8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d8c:	6a3b      	ldr	r3, [r7, #32]
 8005d8e:	e853 3f00 	ldrex	r3, [r3]
 8005d92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	f023 0301 	bic.w	r3, r3, #1
 8005d9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	3314      	adds	r3, #20
 8005da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005da4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dac:	e841 2300 	strex	r3, r2, [r1]
 8005db0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1e5      	bne.n	8005d84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d119      	bne.n	8005df4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	330c      	adds	r3, #12
 8005dc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	e853 3f00 	ldrex	r3, [r3]
 8005dce:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f023 0310 	bic.w	r3, r3, #16
 8005dd6:	647b      	str	r3, [r7, #68]	; 0x44
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	330c      	adds	r3, #12
 8005dde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005de0:	61ba      	str	r2, [r7, #24]
 8005de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de4:	6979      	ldr	r1, [r7, #20]
 8005de6:	69ba      	ldr	r2, [r7, #24]
 8005de8:	e841 2300 	strex	r3, r2, [r1]
 8005dec:	613b      	str	r3, [r7, #16]
   return(result);
 8005dee:	693b      	ldr	r3, [r7, #16]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1e5      	bne.n	8005dc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2220      	movs	r2, #32
 8005df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e02:	bf00      	nop
 8005e04:	3754      	adds	r7, #84	; 0x54
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr

08005e0e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e0e:	b580      	push	{r7, lr}
 8005e10:	b084      	sub	sp, #16
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f7ff ff09 	bl	8005c40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e2e:	bf00      	nop
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}

08005e36 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b085      	sub	sp, #20
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e44:	b2db      	uxtb	r3, r3
 8005e46:	2b21      	cmp	r3, #33	; 0x21
 8005e48:	d13e      	bne.n	8005ec8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	689b      	ldr	r3, [r3, #8]
 8005e4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e52:	d114      	bne.n	8005e7e <UART_Transmit_IT+0x48>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d110      	bne.n	8005e7e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a1b      	ldr	r3, [r3, #32]
 8005e60:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	881b      	ldrh	r3, [r3, #0]
 8005e66:	461a      	mov	r2, r3
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e70:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	621a      	str	r2, [r3, #32]
 8005e7c:	e008      	b.n	8005e90 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a1b      	ldr	r3, [r3, #32]
 8005e82:	1c59      	adds	r1, r3, #1
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	6211      	str	r1, [r2, #32]
 8005e88:	781a      	ldrb	r2, [r3, #0]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	687a      	ldr	r2, [r7, #4]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d10f      	bne.n	8005ec4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005eb2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	68da      	ldr	r2, [r3, #12]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ec2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	e000      	b.n	8005eca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ec8:	2302      	movs	r3, #2
  }
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr

08005ed6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005eec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7ff fe8e 	bl	8005c18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005efc:	2300      	movs	r3, #0
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3708      	adds	r7, #8
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd80      	pop	{r7, pc}

08005f06 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f06:	b580      	push	{r7, lr}
 8005f08:	b08c      	sub	sp, #48	; 0x30
 8005f0a:	af00      	add	r7, sp, #0
 8005f0c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f14:	b2db      	uxtb	r3, r3
 8005f16:	2b22      	cmp	r3, #34	; 0x22
 8005f18:	f040 80ab 	bne.w	8006072 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	689b      	ldr	r3, [r3, #8]
 8005f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f24:	d117      	bne.n	8005f56 <UART_Receive_IT+0x50>
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d113      	bne.n	8005f56 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f36:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f44:	b29a      	uxth	r2, r3
 8005f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f48:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f4e:	1c9a      	adds	r2, r3, #2
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	629a      	str	r2, [r3, #40]	; 0x28
 8005f54:	e026      	b.n	8005fa4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f68:	d007      	beq.n	8005f7a <UART_Receive_IT+0x74>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d10a      	bne.n	8005f88 <UART_Receive_IT+0x82>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	691b      	ldr	r3, [r3, #16]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b2da      	uxtb	r2, r3
 8005f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f84:	701a      	strb	r2, [r3, #0]
 8005f86:	e008      	b.n	8005f9a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f98:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9e:	1c5a      	adds	r2, r3, #1
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	687a      	ldr	r2, [r7, #4]
 8005fb0:	4619      	mov	r1, r3
 8005fb2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d15a      	bne.n	800606e <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0220 	bic.w	r2, r2, #32
 8005fc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68da      	ldr	r2, [r3, #12]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	695a      	ldr	r2, [r3, #20]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f022 0201 	bic.w	r2, r2, #1
 8005fe6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2220      	movs	r2, #32
 8005fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d135      	bne.n	8006064 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	330c      	adds	r3, #12
 8006004:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	e853 3f00 	ldrex	r3, [r3]
 800600c:	613b      	str	r3, [r7, #16]
   return(result);
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f023 0310 	bic.w	r3, r3, #16
 8006014:	627b      	str	r3, [r7, #36]	; 0x24
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	330c      	adds	r3, #12
 800601c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800601e:	623a      	str	r2, [r7, #32]
 8006020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	69f9      	ldr	r1, [r7, #28]
 8006024:	6a3a      	ldr	r2, [r7, #32]
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	61bb      	str	r3, [r7, #24]
   return(result);
 800602c:	69bb      	ldr	r3, [r7, #24]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e5      	bne.n	8005ffe <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0310 	and.w	r3, r3, #16
 800603c:	2b10      	cmp	r3, #16
 800603e:	d10a      	bne.n	8006056 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006040:	2300      	movs	r3, #0
 8006042:	60fb      	str	r3, [r7, #12]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	60fb      	str	r3, [r7, #12]
 8006054:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f7ff fdf9 	bl	8005c54 <HAL_UARTEx_RxEventCallback>
 8006062:	e002      	b.n	800606a <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f7ff fde1 	bl	8005c2c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e002      	b.n	8006074 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	e000      	b.n	8006074 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006072:	2302      	movs	r3, #2
  }
}
 8006074:	4618      	mov	r0, r3
 8006076:	3730      	adds	r7, #48	; 0x30
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800607c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006080:	b09f      	sub	sp, #124	; 0x7c
 8006082:	af00      	add	r7, sp, #0
 8006084:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006092:	68d9      	ldr	r1, [r3, #12]
 8006094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	ea40 0301 	orr.w	r3, r0, r1
 800609c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800609e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a0:	689a      	ldr	r2, [r3, #8]
 80060a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	431a      	orrs	r2, r3
 80060a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060aa:	695b      	ldr	r3, [r3, #20]
 80060ac:	431a      	orrs	r2, r3
 80060ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b0:	69db      	ldr	r3, [r3, #28]
 80060b2:	4313      	orrs	r3, r2
 80060b4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80060b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80060c0:	f021 010c 	bic.w	r1, r1, #12
 80060c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060ca:	430b      	orrs	r3, r1
 80060cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	695b      	ldr	r3, [r3, #20]
 80060d4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80060d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060da:	6999      	ldr	r1, [r3, #24]
 80060dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	ea40 0301 	orr.w	r3, r0, r1
 80060e4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80060e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	4bc5      	ldr	r3, [pc, #788]	; (8006400 <UART_SetConfig+0x384>)
 80060ec:	429a      	cmp	r2, r3
 80060ee:	d004      	beq.n	80060fa <UART_SetConfig+0x7e>
 80060f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80060f2:	681a      	ldr	r2, [r3, #0]
 80060f4:	4bc3      	ldr	r3, [pc, #780]	; (8006404 <UART_SetConfig+0x388>)
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d103      	bne.n	8006102 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80060fa:	f7fe fb25 	bl	8004748 <HAL_RCC_GetPCLK2Freq>
 80060fe:	6778      	str	r0, [r7, #116]	; 0x74
 8006100:	e002      	b.n	8006108 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006102:	f7fe fb0d 	bl	8004720 <HAL_RCC_GetPCLK1Freq>
 8006106:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006108:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800610a:	69db      	ldr	r3, [r3, #28]
 800610c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006110:	f040 80b6 	bne.w	8006280 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006114:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006116:	461c      	mov	r4, r3
 8006118:	f04f 0500 	mov.w	r5, #0
 800611c:	4622      	mov	r2, r4
 800611e:	462b      	mov	r3, r5
 8006120:	1891      	adds	r1, r2, r2
 8006122:	6439      	str	r1, [r7, #64]	; 0x40
 8006124:	415b      	adcs	r3, r3
 8006126:	647b      	str	r3, [r7, #68]	; 0x44
 8006128:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800612c:	1912      	adds	r2, r2, r4
 800612e:	eb45 0303 	adc.w	r3, r5, r3
 8006132:	f04f 0000 	mov.w	r0, #0
 8006136:	f04f 0100 	mov.w	r1, #0
 800613a:	00d9      	lsls	r1, r3, #3
 800613c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006140:	00d0      	lsls	r0, r2, #3
 8006142:	4602      	mov	r2, r0
 8006144:	460b      	mov	r3, r1
 8006146:	1911      	adds	r1, r2, r4
 8006148:	6639      	str	r1, [r7, #96]	; 0x60
 800614a:	416b      	adcs	r3, r5
 800614c:	667b      	str	r3, [r7, #100]	; 0x64
 800614e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	461a      	mov	r2, r3
 8006154:	f04f 0300 	mov.w	r3, #0
 8006158:	1891      	adds	r1, r2, r2
 800615a:	63b9      	str	r1, [r7, #56]	; 0x38
 800615c:	415b      	adcs	r3, r3
 800615e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006160:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006164:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006168:	f7fa f892 	bl	8000290 <__aeabi_uldivmod>
 800616c:	4602      	mov	r2, r0
 800616e:	460b      	mov	r3, r1
 8006170:	4ba5      	ldr	r3, [pc, #660]	; (8006408 <UART_SetConfig+0x38c>)
 8006172:	fba3 2302 	umull	r2, r3, r3, r2
 8006176:	095b      	lsrs	r3, r3, #5
 8006178:	011e      	lsls	r6, r3, #4
 800617a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800617c:	461c      	mov	r4, r3
 800617e:	f04f 0500 	mov.w	r5, #0
 8006182:	4622      	mov	r2, r4
 8006184:	462b      	mov	r3, r5
 8006186:	1891      	adds	r1, r2, r2
 8006188:	6339      	str	r1, [r7, #48]	; 0x30
 800618a:	415b      	adcs	r3, r3
 800618c:	637b      	str	r3, [r7, #52]	; 0x34
 800618e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006192:	1912      	adds	r2, r2, r4
 8006194:	eb45 0303 	adc.w	r3, r5, r3
 8006198:	f04f 0000 	mov.w	r0, #0
 800619c:	f04f 0100 	mov.w	r1, #0
 80061a0:	00d9      	lsls	r1, r3, #3
 80061a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80061a6:	00d0      	lsls	r0, r2, #3
 80061a8:	4602      	mov	r2, r0
 80061aa:	460b      	mov	r3, r1
 80061ac:	1911      	adds	r1, r2, r4
 80061ae:	65b9      	str	r1, [r7, #88]	; 0x58
 80061b0:	416b      	adcs	r3, r5
 80061b2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80061b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	461a      	mov	r2, r3
 80061ba:	f04f 0300 	mov.w	r3, #0
 80061be:	1891      	adds	r1, r2, r2
 80061c0:	62b9      	str	r1, [r7, #40]	; 0x28
 80061c2:	415b      	adcs	r3, r3
 80061c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80061c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80061ca:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80061ce:	f7fa f85f 	bl	8000290 <__aeabi_uldivmod>
 80061d2:	4602      	mov	r2, r0
 80061d4:	460b      	mov	r3, r1
 80061d6:	4b8c      	ldr	r3, [pc, #560]	; (8006408 <UART_SetConfig+0x38c>)
 80061d8:	fba3 1302 	umull	r1, r3, r3, r2
 80061dc:	095b      	lsrs	r3, r3, #5
 80061de:	2164      	movs	r1, #100	; 0x64
 80061e0:	fb01 f303 	mul.w	r3, r1, r3
 80061e4:	1ad3      	subs	r3, r2, r3
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	3332      	adds	r3, #50	; 0x32
 80061ea:	4a87      	ldr	r2, [pc, #540]	; (8006408 <UART_SetConfig+0x38c>)
 80061ec:	fba2 2303 	umull	r2, r3, r2, r3
 80061f0:	095b      	lsrs	r3, r3, #5
 80061f2:	005b      	lsls	r3, r3, #1
 80061f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80061f8:	441e      	add	r6, r3
 80061fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061fc:	4618      	mov	r0, r3
 80061fe:	f04f 0100 	mov.w	r1, #0
 8006202:	4602      	mov	r2, r0
 8006204:	460b      	mov	r3, r1
 8006206:	1894      	adds	r4, r2, r2
 8006208:	623c      	str	r4, [r7, #32]
 800620a:	415b      	adcs	r3, r3
 800620c:	627b      	str	r3, [r7, #36]	; 0x24
 800620e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006212:	1812      	adds	r2, r2, r0
 8006214:	eb41 0303 	adc.w	r3, r1, r3
 8006218:	f04f 0400 	mov.w	r4, #0
 800621c:	f04f 0500 	mov.w	r5, #0
 8006220:	00dd      	lsls	r5, r3, #3
 8006222:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006226:	00d4      	lsls	r4, r2, #3
 8006228:	4622      	mov	r2, r4
 800622a:	462b      	mov	r3, r5
 800622c:	1814      	adds	r4, r2, r0
 800622e:	653c      	str	r4, [r7, #80]	; 0x50
 8006230:	414b      	adcs	r3, r1
 8006232:	657b      	str	r3, [r7, #84]	; 0x54
 8006234:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	461a      	mov	r2, r3
 800623a:	f04f 0300 	mov.w	r3, #0
 800623e:	1891      	adds	r1, r2, r2
 8006240:	61b9      	str	r1, [r7, #24]
 8006242:	415b      	adcs	r3, r3
 8006244:	61fb      	str	r3, [r7, #28]
 8006246:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800624a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800624e:	f7fa f81f 	bl	8000290 <__aeabi_uldivmod>
 8006252:	4602      	mov	r2, r0
 8006254:	460b      	mov	r3, r1
 8006256:	4b6c      	ldr	r3, [pc, #432]	; (8006408 <UART_SetConfig+0x38c>)
 8006258:	fba3 1302 	umull	r1, r3, r3, r2
 800625c:	095b      	lsrs	r3, r3, #5
 800625e:	2164      	movs	r1, #100	; 0x64
 8006260:	fb01 f303 	mul.w	r3, r1, r3
 8006264:	1ad3      	subs	r3, r2, r3
 8006266:	00db      	lsls	r3, r3, #3
 8006268:	3332      	adds	r3, #50	; 0x32
 800626a:	4a67      	ldr	r2, [pc, #412]	; (8006408 <UART_SetConfig+0x38c>)
 800626c:	fba2 2303 	umull	r2, r3, r2, r3
 8006270:	095b      	lsrs	r3, r3, #5
 8006272:	f003 0207 	and.w	r2, r3, #7
 8006276:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4432      	add	r2, r6
 800627c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800627e:	e0b9      	b.n	80063f4 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006280:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006282:	461c      	mov	r4, r3
 8006284:	f04f 0500 	mov.w	r5, #0
 8006288:	4622      	mov	r2, r4
 800628a:	462b      	mov	r3, r5
 800628c:	1891      	adds	r1, r2, r2
 800628e:	6139      	str	r1, [r7, #16]
 8006290:	415b      	adcs	r3, r3
 8006292:	617b      	str	r3, [r7, #20]
 8006294:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006298:	1912      	adds	r2, r2, r4
 800629a:	eb45 0303 	adc.w	r3, r5, r3
 800629e:	f04f 0000 	mov.w	r0, #0
 80062a2:	f04f 0100 	mov.w	r1, #0
 80062a6:	00d9      	lsls	r1, r3, #3
 80062a8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80062ac:	00d0      	lsls	r0, r2, #3
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	eb12 0804 	adds.w	r8, r2, r4
 80062b6:	eb43 0905 	adc.w	r9, r3, r5
 80062ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	4618      	mov	r0, r3
 80062c0:	f04f 0100 	mov.w	r1, #0
 80062c4:	f04f 0200 	mov.w	r2, #0
 80062c8:	f04f 0300 	mov.w	r3, #0
 80062cc:	008b      	lsls	r3, r1, #2
 80062ce:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80062d2:	0082      	lsls	r2, r0, #2
 80062d4:	4640      	mov	r0, r8
 80062d6:	4649      	mov	r1, r9
 80062d8:	f7f9 ffda 	bl	8000290 <__aeabi_uldivmod>
 80062dc:	4602      	mov	r2, r0
 80062de:	460b      	mov	r3, r1
 80062e0:	4b49      	ldr	r3, [pc, #292]	; (8006408 <UART_SetConfig+0x38c>)
 80062e2:	fba3 2302 	umull	r2, r3, r3, r2
 80062e6:	095b      	lsrs	r3, r3, #5
 80062e8:	011e      	lsls	r6, r3, #4
 80062ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80062ec:	4618      	mov	r0, r3
 80062ee:	f04f 0100 	mov.w	r1, #0
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	1894      	adds	r4, r2, r2
 80062f8:	60bc      	str	r4, [r7, #8]
 80062fa:	415b      	adcs	r3, r3
 80062fc:	60fb      	str	r3, [r7, #12]
 80062fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006302:	1812      	adds	r2, r2, r0
 8006304:	eb41 0303 	adc.w	r3, r1, r3
 8006308:	f04f 0400 	mov.w	r4, #0
 800630c:	f04f 0500 	mov.w	r5, #0
 8006310:	00dd      	lsls	r5, r3, #3
 8006312:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006316:	00d4      	lsls	r4, r2, #3
 8006318:	4622      	mov	r2, r4
 800631a:	462b      	mov	r3, r5
 800631c:	1814      	adds	r4, r2, r0
 800631e:	64bc      	str	r4, [r7, #72]	; 0x48
 8006320:	414b      	adcs	r3, r1
 8006322:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	4618      	mov	r0, r3
 800632a:	f04f 0100 	mov.w	r1, #0
 800632e:	f04f 0200 	mov.w	r2, #0
 8006332:	f04f 0300 	mov.w	r3, #0
 8006336:	008b      	lsls	r3, r1, #2
 8006338:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800633c:	0082      	lsls	r2, r0, #2
 800633e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006342:	f7f9 ffa5 	bl	8000290 <__aeabi_uldivmod>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4b2f      	ldr	r3, [pc, #188]	; (8006408 <UART_SetConfig+0x38c>)
 800634c:	fba3 1302 	umull	r1, r3, r3, r2
 8006350:	095b      	lsrs	r3, r3, #5
 8006352:	2164      	movs	r1, #100	; 0x64
 8006354:	fb01 f303 	mul.w	r3, r1, r3
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	3332      	adds	r3, #50	; 0x32
 800635e:	4a2a      	ldr	r2, [pc, #168]	; (8006408 <UART_SetConfig+0x38c>)
 8006360:	fba2 2303 	umull	r2, r3, r2, r3
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800636a:	441e      	add	r6, r3
 800636c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800636e:	4618      	mov	r0, r3
 8006370:	f04f 0100 	mov.w	r1, #0
 8006374:	4602      	mov	r2, r0
 8006376:	460b      	mov	r3, r1
 8006378:	1894      	adds	r4, r2, r2
 800637a:	603c      	str	r4, [r7, #0]
 800637c:	415b      	adcs	r3, r3
 800637e:	607b      	str	r3, [r7, #4]
 8006380:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006384:	1812      	adds	r2, r2, r0
 8006386:	eb41 0303 	adc.w	r3, r1, r3
 800638a:	f04f 0400 	mov.w	r4, #0
 800638e:	f04f 0500 	mov.w	r5, #0
 8006392:	00dd      	lsls	r5, r3, #3
 8006394:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006398:	00d4      	lsls	r4, r2, #3
 800639a:	4622      	mov	r2, r4
 800639c:	462b      	mov	r3, r5
 800639e:	eb12 0a00 	adds.w	sl, r2, r0
 80063a2:	eb43 0b01 	adc.w	fp, r3, r1
 80063a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a8:	685b      	ldr	r3, [r3, #4]
 80063aa:	4618      	mov	r0, r3
 80063ac:	f04f 0100 	mov.w	r1, #0
 80063b0:	f04f 0200 	mov.w	r2, #0
 80063b4:	f04f 0300 	mov.w	r3, #0
 80063b8:	008b      	lsls	r3, r1, #2
 80063ba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80063be:	0082      	lsls	r2, r0, #2
 80063c0:	4650      	mov	r0, sl
 80063c2:	4659      	mov	r1, fp
 80063c4:	f7f9 ff64 	bl	8000290 <__aeabi_uldivmod>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	4b0e      	ldr	r3, [pc, #56]	; (8006408 <UART_SetConfig+0x38c>)
 80063ce:	fba3 1302 	umull	r1, r3, r3, r2
 80063d2:	095b      	lsrs	r3, r3, #5
 80063d4:	2164      	movs	r1, #100	; 0x64
 80063d6:	fb01 f303 	mul.w	r3, r1, r3
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	011b      	lsls	r3, r3, #4
 80063de:	3332      	adds	r3, #50	; 0x32
 80063e0:	4a09      	ldr	r2, [pc, #36]	; (8006408 <UART_SetConfig+0x38c>)
 80063e2:	fba2 2303 	umull	r2, r3, r2, r3
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	f003 020f 	and.w	r2, r3, #15
 80063ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	4432      	add	r2, r6
 80063f2:	609a      	str	r2, [r3, #8]
}
 80063f4:	bf00      	nop
 80063f6:	377c      	adds	r7, #124	; 0x7c
 80063f8:	46bd      	mov	sp, r7
 80063fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063fe:	bf00      	nop
 8006400:	40011000 	.word	0x40011000
 8006404:	40011400 	.word	0x40011400
 8006408:	51eb851f 	.word	0x51eb851f

0800640c <__errno>:
 800640c:	4b01      	ldr	r3, [pc, #4]	; (8006414 <__errno+0x8>)
 800640e:	6818      	ldr	r0, [r3, #0]
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	2000000c 	.word	0x2000000c

08006418 <__libc_init_array>:
 8006418:	b570      	push	{r4, r5, r6, lr}
 800641a:	4d0d      	ldr	r5, [pc, #52]	; (8006450 <__libc_init_array+0x38>)
 800641c:	4c0d      	ldr	r4, [pc, #52]	; (8006454 <__libc_init_array+0x3c>)
 800641e:	1b64      	subs	r4, r4, r5
 8006420:	10a4      	asrs	r4, r4, #2
 8006422:	2600      	movs	r6, #0
 8006424:	42a6      	cmp	r6, r4
 8006426:	d109      	bne.n	800643c <__libc_init_array+0x24>
 8006428:	4d0b      	ldr	r5, [pc, #44]	; (8006458 <__libc_init_array+0x40>)
 800642a:	4c0c      	ldr	r4, [pc, #48]	; (800645c <__libc_init_array+0x44>)
 800642c:	f001 f948 	bl	80076c0 <_init>
 8006430:	1b64      	subs	r4, r4, r5
 8006432:	10a4      	asrs	r4, r4, #2
 8006434:	2600      	movs	r6, #0
 8006436:	42a6      	cmp	r6, r4
 8006438:	d105      	bne.n	8006446 <__libc_init_array+0x2e>
 800643a:	bd70      	pop	{r4, r5, r6, pc}
 800643c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006440:	4798      	blx	r3
 8006442:	3601      	adds	r6, #1
 8006444:	e7ee      	b.n	8006424 <__libc_init_array+0xc>
 8006446:	f855 3b04 	ldr.w	r3, [r5], #4
 800644a:	4798      	blx	r3
 800644c:	3601      	adds	r6, #1
 800644e:	e7f2      	b.n	8006436 <__libc_init_array+0x1e>
 8006450:	080077c4 	.word	0x080077c4
 8006454:	080077c4 	.word	0x080077c4
 8006458:	080077c4 	.word	0x080077c4
 800645c:	080077c8 	.word	0x080077c8

08006460 <memset>:
 8006460:	4402      	add	r2, r0
 8006462:	4603      	mov	r3, r0
 8006464:	4293      	cmp	r3, r2
 8006466:	d100      	bne.n	800646a <memset+0xa>
 8006468:	4770      	bx	lr
 800646a:	f803 1b01 	strb.w	r1, [r3], #1
 800646e:	e7f9      	b.n	8006464 <memset+0x4>

08006470 <iprintf>:
 8006470:	b40f      	push	{r0, r1, r2, r3}
 8006472:	4b0a      	ldr	r3, [pc, #40]	; (800649c <iprintf+0x2c>)
 8006474:	b513      	push	{r0, r1, r4, lr}
 8006476:	681c      	ldr	r4, [r3, #0]
 8006478:	b124      	cbz	r4, 8006484 <iprintf+0x14>
 800647a:	69a3      	ldr	r3, [r4, #24]
 800647c:	b913      	cbnz	r3, 8006484 <iprintf+0x14>
 800647e:	4620      	mov	r0, r4
 8006480:	f000 f886 	bl	8006590 <__sinit>
 8006484:	ab05      	add	r3, sp, #20
 8006486:	9a04      	ldr	r2, [sp, #16]
 8006488:	68a1      	ldr	r1, [r4, #8]
 800648a:	9301      	str	r3, [sp, #4]
 800648c:	4620      	mov	r0, r4
 800648e:	f000 faff 	bl	8006a90 <_vfiprintf_r>
 8006492:	b002      	add	sp, #8
 8006494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006498:	b004      	add	sp, #16
 800649a:	4770      	bx	lr
 800649c:	2000000c 	.word	0x2000000c

080064a0 <siprintf>:
 80064a0:	b40e      	push	{r1, r2, r3}
 80064a2:	b500      	push	{lr}
 80064a4:	b09c      	sub	sp, #112	; 0x70
 80064a6:	ab1d      	add	r3, sp, #116	; 0x74
 80064a8:	9002      	str	r0, [sp, #8]
 80064aa:	9006      	str	r0, [sp, #24]
 80064ac:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064b0:	4809      	ldr	r0, [pc, #36]	; (80064d8 <siprintf+0x38>)
 80064b2:	9107      	str	r1, [sp, #28]
 80064b4:	9104      	str	r1, [sp, #16]
 80064b6:	4909      	ldr	r1, [pc, #36]	; (80064dc <siprintf+0x3c>)
 80064b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80064bc:	9105      	str	r1, [sp, #20]
 80064be:	6800      	ldr	r0, [r0, #0]
 80064c0:	9301      	str	r3, [sp, #4]
 80064c2:	a902      	add	r1, sp, #8
 80064c4:	f000 f9ba 	bl	800683c <_svfiprintf_r>
 80064c8:	9b02      	ldr	r3, [sp, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	701a      	strb	r2, [r3, #0]
 80064ce:	b01c      	add	sp, #112	; 0x70
 80064d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064d4:	b003      	add	sp, #12
 80064d6:	4770      	bx	lr
 80064d8:	2000000c 	.word	0x2000000c
 80064dc:	ffff0208 	.word	0xffff0208

080064e0 <std>:
 80064e0:	2300      	movs	r3, #0
 80064e2:	b510      	push	{r4, lr}
 80064e4:	4604      	mov	r4, r0
 80064e6:	e9c0 3300 	strd	r3, r3, [r0]
 80064ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064ee:	6083      	str	r3, [r0, #8]
 80064f0:	8181      	strh	r1, [r0, #12]
 80064f2:	6643      	str	r3, [r0, #100]	; 0x64
 80064f4:	81c2      	strh	r2, [r0, #14]
 80064f6:	6183      	str	r3, [r0, #24]
 80064f8:	4619      	mov	r1, r3
 80064fa:	2208      	movs	r2, #8
 80064fc:	305c      	adds	r0, #92	; 0x5c
 80064fe:	f7ff ffaf 	bl	8006460 <memset>
 8006502:	4b05      	ldr	r3, [pc, #20]	; (8006518 <std+0x38>)
 8006504:	6263      	str	r3, [r4, #36]	; 0x24
 8006506:	4b05      	ldr	r3, [pc, #20]	; (800651c <std+0x3c>)
 8006508:	62a3      	str	r3, [r4, #40]	; 0x28
 800650a:	4b05      	ldr	r3, [pc, #20]	; (8006520 <std+0x40>)
 800650c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <std+0x44>)
 8006510:	6224      	str	r4, [r4, #32]
 8006512:	6323      	str	r3, [r4, #48]	; 0x30
 8006514:	bd10      	pop	{r4, pc}
 8006516:	bf00      	nop
 8006518:	08007039 	.word	0x08007039
 800651c:	0800705b 	.word	0x0800705b
 8006520:	08007093 	.word	0x08007093
 8006524:	080070b7 	.word	0x080070b7

08006528 <_cleanup_r>:
 8006528:	4901      	ldr	r1, [pc, #4]	; (8006530 <_cleanup_r+0x8>)
 800652a:	f000 b8af 	b.w	800668c <_fwalk_reent>
 800652e:	bf00      	nop
 8006530:	08007391 	.word	0x08007391

08006534 <__sfmoreglue>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	1e4a      	subs	r2, r1, #1
 8006538:	2568      	movs	r5, #104	; 0x68
 800653a:	4355      	muls	r5, r2
 800653c:	460e      	mov	r6, r1
 800653e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006542:	f000 f8c5 	bl	80066d0 <_malloc_r>
 8006546:	4604      	mov	r4, r0
 8006548:	b140      	cbz	r0, 800655c <__sfmoreglue+0x28>
 800654a:	2100      	movs	r1, #0
 800654c:	e9c0 1600 	strd	r1, r6, [r0]
 8006550:	300c      	adds	r0, #12
 8006552:	60a0      	str	r0, [r4, #8]
 8006554:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006558:	f7ff ff82 	bl	8006460 <memset>
 800655c:	4620      	mov	r0, r4
 800655e:	bd70      	pop	{r4, r5, r6, pc}

08006560 <__sfp_lock_acquire>:
 8006560:	4801      	ldr	r0, [pc, #4]	; (8006568 <__sfp_lock_acquire+0x8>)
 8006562:	f000 b8b3 	b.w	80066cc <__retarget_lock_acquire_recursive>
 8006566:	bf00      	nop
 8006568:	200003fc 	.word	0x200003fc

0800656c <__sfp_lock_release>:
 800656c:	4801      	ldr	r0, [pc, #4]	; (8006574 <__sfp_lock_release+0x8>)
 800656e:	f000 b8ae 	b.w	80066ce <__retarget_lock_release_recursive>
 8006572:	bf00      	nop
 8006574:	200003fc 	.word	0x200003fc

08006578 <__sinit_lock_acquire>:
 8006578:	4801      	ldr	r0, [pc, #4]	; (8006580 <__sinit_lock_acquire+0x8>)
 800657a:	f000 b8a7 	b.w	80066cc <__retarget_lock_acquire_recursive>
 800657e:	bf00      	nop
 8006580:	200003f7 	.word	0x200003f7

08006584 <__sinit_lock_release>:
 8006584:	4801      	ldr	r0, [pc, #4]	; (800658c <__sinit_lock_release+0x8>)
 8006586:	f000 b8a2 	b.w	80066ce <__retarget_lock_release_recursive>
 800658a:	bf00      	nop
 800658c:	200003f7 	.word	0x200003f7

08006590 <__sinit>:
 8006590:	b510      	push	{r4, lr}
 8006592:	4604      	mov	r4, r0
 8006594:	f7ff fff0 	bl	8006578 <__sinit_lock_acquire>
 8006598:	69a3      	ldr	r3, [r4, #24]
 800659a:	b11b      	cbz	r3, 80065a4 <__sinit+0x14>
 800659c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065a0:	f7ff bff0 	b.w	8006584 <__sinit_lock_release>
 80065a4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80065a8:	6523      	str	r3, [r4, #80]	; 0x50
 80065aa:	4b13      	ldr	r3, [pc, #76]	; (80065f8 <__sinit+0x68>)
 80065ac:	4a13      	ldr	r2, [pc, #76]	; (80065fc <__sinit+0x6c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	62a2      	str	r2, [r4, #40]	; 0x28
 80065b2:	42a3      	cmp	r3, r4
 80065b4:	bf04      	itt	eq
 80065b6:	2301      	moveq	r3, #1
 80065b8:	61a3      	streq	r3, [r4, #24]
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 f820 	bl	8006600 <__sfp>
 80065c0:	6060      	str	r0, [r4, #4]
 80065c2:	4620      	mov	r0, r4
 80065c4:	f000 f81c 	bl	8006600 <__sfp>
 80065c8:	60a0      	str	r0, [r4, #8]
 80065ca:	4620      	mov	r0, r4
 80065cc:	f000 f818 	bl	8006600 <__sfp>
 80065d0:	2200      	movs	r2, #0
 80065d2:	60e0      	str	r0, [r4, #12]
 80065d4:	2104      	movs	r1, #4
 80065d6:	6860      	ldr	r0, [r4, #4]
 80065d8:	f7ff ff82 	bl	80064e0 <std>
 80065dc:	68a0      	ldr	r0, [r4, #8]
 80065de:	2201      	movs	r2, #1
 80065e0:	2109      	movs	r1, #9
 80065e2:	f7ff ff7d 	bl	80064e0 <std>
 80065e6:	68e0      	ldr	r0, [r4, #12]
 80065e8:	2202      	movs	r2, #2
 80065ea:	2112      	movs	r1, #18
 80065ec:	f7ff ff78 	bl	80064e0 <std>
 80065f0:	2301      	movs	r3, #1
 80065f2:	61a3      	str	r3, [r4, #24]
 80065f4:	e7d2      	b.n	800659c <__sinit+0xc>
 80065f6:	bf00      	nop
 80065f8:	08007724 	.word	0x08007724
 80065fc:	08006529 	.word	0x08006529

08006600 <__sfp>:
 8006600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006602:	4607      	mov	r7, r0
 8006604:	f7ff ffac 	bl	8006560 <__sfp_lock_acquire>
 8006608:	4b1e      	ldr	r3, [pc, #120]	; (8006684 <__sfp+0x84>)
 800660a:	681e      	ldr	r6, [r3, #0]
 800660c:	69b3      	ldr	r3, [r6, #24]
 800660e:	b913      	cbnz	r3, 8006616 <__sfp+0x16>
 8006610:	4630      	mov	r0, r6
 8006612:	f7ff ffbd 	bl	8006590 <__sinit>
 8006616:	3648      	adds	r6, #72	; 0x48
 8006618:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800661c:	3b01      	subs	r3, #1
 800661e:	d503      	bpl.n	8006628 <__sfp+0x28>
 8006620:	6833      	ldr	r3, [r6, #0]
 8006622:	b30b      	cbz	r3, 8006668 <__sfp+0x68>
 8006624:	6836      	ldr	r6, [r6, #0]
 8006626:	e7f7      	b.n	8006618 <__sfp+0x18>
 8006628:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800662c:	b9d5      	cbnz	r5, 8006664 <__sfp+0x64>
 800662e:	4b16      	ldr	r3, [pc, #88]	; (8006688 <__sfp+0x88>)
 8006630:	60e3      	str	r3, [r4, #12]
 8006632:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006636:	6665      	str	r5, [r4, #100]	; 0x64
 8006638:	f000 f847 	bl	80066ca <__retarget_lock_init_recursive>
 800663c:	f7ff ff96 	bl	800656c <__sfp_lock_release>
 8006640:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006644:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006648:	6025      	str	r5, [r4, #0]
 800664a:	61a5      	str	r5, [r4, #24]
 800664c:	2208      	movs	r2, #8
 800664e:	4629      	mov	r1, r5
 8006650:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006654:	f7ff ff04 	bl	8006460 <memset>
 8006658:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800665c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006660:	4620      	mov	r0, r4
 8006662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006664:	3468      	adds	r4, #104	; 0x68
 8006666:	e7d9      	b.n	800661c <__sfp+0x1c>
 8006668:	2104      	movs	r1, #4
 800666a:	4638      	mov	r0, r7
 800666c:	f7ff ff62 	bl	8006534 <__sfmoreglue>
 8006670:	4604      	mov	r4, r0
 8006672:	6030      	str	r0, [r6, #0]
 8006674:	2800      	cmp	r0, #0
 8006676:	d1d5      	bne.n	8006624 <__sfp+0x24>
 8006678:	f7ff ff78 	bl	800656c <__sfp_lock_release>
 800667c:	230c      	movs	r3, #12
 800667e:	603b      	str	r3, [r7, #0]
 8006680:	e7ee      	b.n	8006660 <__sfp+0x60>
 8006682:	bf00      	nop
 8006684:	08007724 	.word	0x08007724
 8006688:	ffff0001 	.word	0xffff0001

0800668c <_fwalk_reent>:
 800668c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006690:	4606      	mov	r6, r0
 8006692:	4688      	mov	r8, r1
 8006694:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006698:	2700      	movs	r7, #0
 800669a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800669e:	f1b9 0901 	subs.w	r9, r9, #1
 80066a2:	d505      	bpl.n	80066b0 <_fwalk_reent+0x24>
 80066a4:	6824      	ldr	r4, [r4, #0]
 80066a6:	2c00      	cmp	r4, #0
 80066a8:	d1f7      	bne.n	800669a <_fwalk_reent+0xe>
 80066aa:	4638      	mov	r0, r7
 80066ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066b0:	89ab      	ldrh	r3, [r5, #12]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d907      	bls.n	80066c6 <_fwalk_reent+0x3a>
 80066b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80066ba:	3301      	adds	r3, #1
 80066bc:	d003      	beq.n	80066c6 <_fwalk_reent+0x3a>
 80066be:	4629      	mov	r1, r5
 80066c0:	4630      	mov	r0, r6
 80066c2:	47c0      	blx	r8
 80066c4:	4307      	orrs	r7, r0
 80066c6:	3568      	adds	r5, #104	; 0x68
 80066c8:	e7e9      	b.n	800669e <_fwalk_reent+0x12>

080066ca <__retarget_lock_init_recursive>:
 80066ca:	4770      	bx	lr

080066cc <__retarget_lock_acquire_recursive>:
 80066cc:	4770      	bx	lr

080066ce <__retarget_lock_release_recursive>:
 80066ce:	4770      	bx	lr

080066d0 <_malloc_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	1ccd      	adds	r5, r1, #3
 80066d4:	f025 0503 	bic.w	r5, r5, #3
 80066d8:	3508      	adds	r5, #8
 80066da:	2d0c      	cmp	r5, #12
 80066dc:	bf38      	it	cc
 80066de:	250c      	movcc	r5, #12
 80066e0:	2d00      	cmp	r5, #0
 80066e2:	4606      	mov	r6, r0
 80066e4:	db01      	blt.n	80066ea <_malloc_r+0x1a>
 80066e6:	42a9      	cmp	r1, r5
 80066e8:	d903      	bls.n	80066f2 <_malloc_r+0x22>
 80066ea:	230c      	movs	r3, #12
 80066ec:	6033      	str	r3, [r6, #0]
 80066ee:	2000      	movs	r0, #0
 80066f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066f2:	f000 ff27 	bl	8007544 <__malloc_lock>
 80066f6:	4921      	ldr	r1, [pc, #132]	; (800677c <_malloc_r+0xac>)
 80066f8:	680a      	ldr	r2, [r1, #0]
 80066fa:	4614      	mov	r4, r2
 80066fc:	b99c      	cbnz	r4, 8006726 <_malloc_r+0x56>
 80066fe:	4f20      	ldr	r7, [pc, #128]	; (8006780 <_malloc_r+0xb0>)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	b923      	cbnz	r3, 800670e <_malloc_r+0x3e>
 8006704:	4621      	mov	r1, r4
 8006706:	4630      	mov	r0, r6
 8006708:	f000 fc86 	bl	8007018 <_sbrk_r>
 800670c:	6038      	str	r0, [r7, #0]
 800670e:	4629      	mov	r1, r5
 8006710:	4630      	mov	r0, r6
 8006712:	f000 fc81 	bl	8007018 <_sbrk_r>
 8006716:	1c43      	adds	r3, r0, #1
 8006718:	d123      	bne.n	8006762 <_malloc_r+0x92>
 800671a:	230c      	movs	r3, #12
 800671c:	6033      	str	r3, [r6, #0]
 800671e:	4630      	mov	r0, r6
 8006720:	f000 ff16 	bl	8007550 <__malloc_unlock>
 8006724:	e7e3      	b.n	80066ee <_malloc_r+0x1e>
 8006726:	6823      	ldr	r3, [r4, #0]
 8006728:	1b5b      	subs	r3, r3, r5
 800672a:	d417      	bmi.n	800675c <_malloc_r+0x8c>
 800672c:	2b0b      	cmp	r3, #11
 800672e:	d903      	bls.n	8006738 <_malloc_r+0x68>
 8006730:	6023      	str	r3, [r4, #0]
 8006732:	441c      	add	r4, r3
 8006734:	6025      	str	r5, [r4, #0]
 8006736:	e004      	b.n	8006742 <_malloc_r+0x72>
 8006738:	6863      	ldr	r3, [r4, #4]
 800673a:	42a2      	cmp	r2, r4
 800673c:	bf0c      	ite	eq
 800673e:	600b      	streq	r3, [r1, #0]
 8006740:	6053      	strne	r3, [r2, #4]
 8006742:	4630      	mov	r0, r6
 8006744:	f000 ff04 	bl	8007550 <__malloc_unlock>
 8006748:	f104 000b 	add.w	r0, r4, #11
 800674c:	1d23      	adds	r3, r4, #4
 800674e:	f020 0007 	bic.w	r0, r0, #7
 8006752:	1ac2      	subs	r2, r0, r3
 8006754:	d0cc      	beq.n	80066f0 <_malloc_r+0x20>
 8006756:	1a1b      	subs	r3, r3, r0
 8006758:	50a3      	str	r3, [r4, r2]
 800675a:	e7c9      	b.n	80066f0 <_malloc_r+0x20>
 800675c:	4622      	mov	r2, r4
 800675e:	6864      	ldr	r4, [r4, #4]
 8006760:	e7cc      	b.n	80066fc <_malloc_r+0x2c>
 8006762:	1cc4      	adds	r4, r0, #3
 8006764:	f024 0403 	bic.w	r4, r4, #3
 8006768:	42a0      	cmp	r0, r4
 800676a:	d0e3      	beq.n	8006734 <_malloc_r+0x64>
 800676c:	1a21      	subs	r1, r4, r0
 800676e:	4630      	mov	r0, r6
 8006770:	f000 fc52 	bl	8007018 <_sbrk_r>
 8006774:	3001      	adds	r0, #1
 8006776:	d1dd      	bne.n	8006734 <_malloc_r+0x64>
 8006778:	e7cf      	b.n	800671a <_malloc_r+0x4a>
 800677a:	bf00      	nop
 800677c:	20000090 	.word	0x20000090
 8006780:	20000094 	.word	0x20000094

08006784 <__ssputs_r>:
 8006784:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	688e      	ldr	r6, [r1, #8]
 800678a:	429e      	cmp	r6, r3
 800678c:	4682      	mov	sl, r0
 800678e:	460c      	mov	r4, r1
 8006790:	4690      	mov	r8, r2
 8006792:	461f      	mov	r7, r3
 8006794:	d838      	bhi.n	8006808 <__ssputs_r+0x84>
 8006796:	898a      	ldrh	r2, [r1, #12]
 8006798:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800679c:	d032      	beq.n	8006804 <__ssputs_r+0x80>
 800679e:	6825      	ldr	r5, [r4, #0]
 80067a0:	6909      	ldr	r1, [r1, #16]
 80067a2:	eba5 0901 	sub.w	r9, r5, r1
 80067a6:	6965      	ldr	r5, [r4, #20]
 80067a8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067b0:	3301      	adds	r3, #1
 80067b2:	444b      	add	r3, r9
 80067b4:	106d      	asrs	r5, r5, #1
 80067b6:	429d      	cmp	r5, r3
 80067b8:	bf38      	it	cc
 80067ba:	461d      	movcc	r5, r3
 80067bc:	0553      	lsls	r3, r2, #21
 80067be:	d531      	bpl.n	8006824 <__ssputs_r+0xa0>
 80067c0:	4629      	mov	r1, r5
 80067c2:	f7ff ff85 	bl	80066d0 <_malloc_r>
 80067c6:	4606      	mov	r6, r0
 80067c8:	b950      	cbnz	r0, 80067e0 <__ssputs_r+0x5c>
 80067ca:	230c      	movs	r3, #12
 80067cc:	f8ca 3000 	str.w	r3, [sl]
 80067d0:	89a3      	ldrh	r3, [r4, #12]
 80067d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067d6:	81a3      	strh	r3, [r4, #12]
 80067d8:	f04f 30ff 	mov.w	r0, #4294967295
 80067dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e0:	6921      	ldr	r1, [r4, #16]
 80067e2:	464a      	mov	r2, r9
 80067e4:	f000 fe86 	bl	80074f4 <memcpy>
 80067e8:	89a3      	ldrh	r3, [r4, #12]
 80067ea:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80067ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067f2:	81a3      	strh	r3, [r4, #12]
 80067f4:	6126      	str	r6, [r4, #16]
 80067f6:	6165      	str	r5, [r4, #20]
 80067f8:	444e      	add	r6, r9
 80067fa:	eba5 0509 	sub.w	r5, r5, r9
 80067fe:	6026      	str	r6, [r4, #0]
 8006800:	60a5      	str	r5, [r4, #8]
 8006802:	463e      	mov	r6, r7
 8006804:	42be      	cmp	r6, r7
 8006806:	d900      	bls.n	800680a <__ssputs_r+0x86>
 8006808:	463e      	mov	r6, r7
 800680a:	4632      	mov	r2, r6
 800680c:	6820      	ldr	r0, [r4, #0]
 800680e:	4641      	mov	r1, r8
 8006810:	f000 fe7e 	bl	8007510 <memmove>
 8006814:	68a3      	ldr	r3, [r4, #8]
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	1b9b      	subs	r3, r3, r6
 800681a:	4432      	add	r2, r6
 800681c:	60a3      	str	r3, [r4, #8]
 800681e:	6022      	str	r2, [r4, #0]
 8006820:	2000      	movs	r0, #0
 8006822:	e7db      	b.n	80067dc <__ssputs_r+0x58>
 8006824:	462a      	mov	r2, r5
 8006826:	f000 fee9 	bl	80075fc <_realloc_r>
 800682a:	4606      	mov	r6, r0
 800682c:	2800      	cmp	r0, #0
 800682e:	d1e1      	bne.n	80067f4 <__ssputs_r+0x70>
 8006830:	6921      	ldr	r1, [r4, #16]
 8006832:	4650      	mov	r0, sl
 8006834:	f000 fe92 	bl	800755c <_free_r>
 8006838:	e7c7      	b.n	80067ca <__ssputs_r+0x46>
	...

0800683c <_svfiprintf_r>:
 800683c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006840:	4698      	mov	r8, r3
 8006842:	898b      	ldrh	r3, [r1, #12]
 8006844:	061b      	lsls	r3, r3, #24
 8006846:	b09d      	sub	sp, #116	; 0x74
 8006848:	4607      	mov	r7, r0
 800684a:	460d      	mov	r5, r1
 800684c:	4614      	mov	r4, r2
 800684e:	d50e      	bpl.n	800686e <_svfiprintf_r+0x32>
 8006850:	690b      	ldr	r3, [r1, #16]
 8006852:	b963      	cbnz	r3, 800686e <_svfiprintf_r+0x32>
 8006854:	2140      	movs	r1, #64	; 0x40
 8006856:	f7ff ff3b 	bl	80066d0 <_malloc_r>
 800685a:	6028      	str	r0, [r5, #0]
 800685c:	6128      	str	r0, [r5, #16]
 800685e:	b920      	cbnz	r0, 800686a <_svfiprintf_r+0x2e>
 8006860:	230c      	movs	r3, #12
 8006862:	603b      	str	r3, [r7, #0]
 8006864:	f04f 30ff 	mov.w	r0, #4294967295
 8006868:	e0d1      	b.n	8006a0e <_svfiprintf_r+0x1d2>
 800686a:	2340      	movs	r3, #64	; 0x40
 800686c:	616b      	str	r3, [r5, #20]
 800686e:	2300      	movs	r3, #0
 8006870:	9309      	str	r3, [sp, #36]	; 0x24
 8006872:	2320      	movs	r3, #32
 8006874:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006878:	f8cd 800c 	str.w	r8, [sp, #12]
 800687c:	2330      	movs	r3, #48	; 0x30
 800687e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a28 <_svfiprintf_r+0x1ec>
 8006882:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006886:	f04f 0901 	mov.w	r9, #1
 800688a:	4623      	mov	r3, r4
 800688c:	469a      	mov	sl, r3
 800688e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006892:	b10a      	cbz	r2, 8006898 <_svfiprintf_r+0x5c>
 8006894:	2a25      	cmp	r2, #37	; 0x25
 8006896:	d1f9      	bne.n	800688c <_svfiprintf_r+0x50>
 8006898:	ebba 0b04 	subs.w	fp, sl, r4
 800689c:	d00b      	beq.n	80068b6 <_svfiprintf_r+0x7a>
 800689e:	465b      	mov	r3, fp
 80068a0:	4622      	mov	r2, r4
 80068a2:	4629      	mov	r1, r5
 80068a4:	4638      	mov	r0, r7
 80068a6:	f7ff ff6d 	bl	8006784 <__ssputs_r>
 80068aa:	3001      	adds	r0, #1
 80068ac:	f000 80aa 	beq.w	8006a04 <_svfiprintf_r+0x1c8>
 80068b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068b2:	445a      	add	r2, fp
 80068b4:	9209      	str	r2, [sp, #36]	; 0x24
 80068b6:	f89a 3000 	ldrb.w	r3, [sl]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	f000 80a2 	beq.w	8006a04 <_svfiprintf_r+0x1c8>
 80068c0:	2300      	movs	r3, #0
 80068c2:	f04f 32ff 	mov.w	r2, #4294967295
 80068c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068ca:	f10a 0a01 	add.w	sl, sl, #1
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	9307      	str	r3, [sp, #28]
 80068d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068d6:	931a      	str	r3, [sp, #104]	; 0x68
 80068d8:	4654      	mov	r4, sl
 80068da:	2205      	movs	r2, #5
 80068dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e0:	4851      	ldr	r0, [pc, #324]	; (8006a28 <_svfiprintf_r+0x1ec>)
 80068e2:	f7f9 fc85 	bl	80001f0 <memchr>
 80068e6:	9a04      	ldr	r2, [sp, #16]
 80068e8:	b9d8      	cbnz	r0, 8006922 <_svfiprintf_r+0xe6>
 80068ea:	06d0      	lsls	r0, r2, #27
 80068ec:	bf44      	itt	mi
 80068ee:	2320      	movmi	r3, #32
 80068f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068f4:	0711      	lsls	r1, r2, #28
 80068f6:	bf44      	itt	mi
 80068f8:	232b      	movmi	r3, #43	; 0x2b
 80068fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80068fe:	f89a 3000 	ldrb.w	r3, [sl]
 8006902:	2b2a      	cmp	r3, #42	; 0x2a
 8006904:	d015      	beq.n	8006932 <_svfiprintf_r+0xf6>
 8006906:	9a07      	ldr	r2, [sp, #28]
 8006908:	4654      	mov	r4, sl
 800690a:	2000      	movs	r0, #0
 800690c:	f04f 0c0a 	mov.w	ip, #10
 8006910:	4621      	mov	r1, r4
 8006912:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006916:	3b30      	subs	r3, #48	; 0x30
 8006918:	2b09      	cmp	r3, #9
 800691a:	d94e      	bls.n	80069ba <_svfiprintf_r+0x17e>
 800691c:	b1b0      	cbz	r0, 800694c <_svfiprintf_r+0x110>
 800691e:	9207      	str	r2, [sp, #28]
 8006920:	e014      	b.n	800694c <_svfiprintf_r+0x110>
 8006922:	eba0 0308 	sub.w	r3, r0, r8
 8006926:	fa09 f303 	lsl.w	r3, r9, r3
 800692a:	4313      	orrs	r3, r2
 800692c:	9304      	str	r3, [sp, #16]
 800692e:	46a2      	mov	sl, r4
 8006930:	e7d2      	b.n	80068d8 <_svfiprintf_r+0x9c>
 8006932:	9b03      	ldr	r3, [sp, #12]
 8006934:	1d19      	adds	r1, r3, #4
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	9103      	str	r1, [sp, #12]
 800693a:	2b00      	cmp	r3, #0
 800693c:	bfbb      	ittet	lt
 800693e:	425b      	neglt	r3, r3
 8006940:	f042 0202 	orrlt.w	r2, r2, #2
 8006944:	9307      	strge	r3, [sp, #28]
 8006946:	9307      	strlt	r3, [sp, #28]
 8006948:	bfb8      	it	lt
 800694a:	9204      	strlt	r2, [sp, #16]
 800694c:	7823      	ldrb	r3, [r4, #0]
 800694e:	2b2e      	cmp	r3, #46	; 0x2e
 8006950:	d10c      	bne.n	800696c <_svfiprintf_r+0x130>
 8006952:	7863      	ldrb	r3, [r4, #1]
 8006954:	2b2a      	cmp	r3, #42	; 0x2a
 8006956:	d135      	bne.n	80069c4 <_svfiprintf_r+0x188>
 8006958:	9b03      	ldr	r3, [sp, #12]
 800695a:	1d1a      	adds	r2, r3, #4
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	9203      	str	r2, [sp, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bfb8      	it	lt
 8006964:	f04f 33ff 	movlt.w	r3, #4294967295
 8006968:	3402      	adds	r4, #2
 800696a:	9305      	str	r3, [sp, #20]
 800696c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a38 <_svfiprintf_r+0x1fc>
 8006970:	7821      	ldrb	r1, [r4, #0]
 8006972:	2203      	movs	r2, #3
 8006974:	4650      	mov	r0, sl
 8006976:	f7f9 fc3b 	bl	80001f0 <memchr>
 800697a:	b140      	cbz	r0, 800698e <_svfiprintf_r+0x152>
 800697c:	2340      	movs	r3, #64	; 0x40
 800697e:	eba0 000a 	sub.w	r0, r0, sl
 8006982:	fa03 f000 	lsl.w	r0, r3, r0
 8006986:	9b04      	ldr	r3, [sp, #16]
 8006988:	4303      	orrs	r3, r0
 800698a:	3401      	adds	r4, #1
 800698c:	9304      	str	r3, [sp, #16]
 800698e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006992:	4826      	ldr	r0, [pc, #152]	; (8006a2c <_svfiprintf_r+0x1f0>)
 8006994:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006998:	2206      	movs	r2, #6
 800699a:	f7f9 fc29 	bl	80001f0 <memchr>
 800699e:	2800      	cmp	r0, #0
 80069a0:	d038      	beq.n	8006a14 <_svfiprintf_r+0x1d8>
 80069a2:	4b23      	ldr	r3, [pc, #140]	; (8006a30 <_svfiprintf_r+0x1f4>)
 80069a4:	bb1b      	cbnz	r3, 80069ee <_svfiprintf_r+0x1b2>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	3307      	adds	r3, #7
 80069aa:	f023 0307 	bic.w	r3, r3, #7
 80069ae:	3308      	adds	r3, #8
 80069b0:	9303      	str	r3, [sp, #12]
 80069b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069b4:	4433      	add	r3, r6
 80069b6:	9309      	str	r3, [sp, #36]	; 0x24
 80069b8:	e767      	b.n	800688a <_svfiprintf_r+0x4e>
 80069ba:	fb0c 3202 	mla	r2, ip, r2, r3
 80069be:	460c      	mov	r4, r1
 80069c0:	2001      	movs	r0, #1
 80069c2:	e7a5      	b.n	8006910 <_svfiprintf_r+0xd4>
 80069c4:	2300      	movs	r3, #0
 80069c6:	3401      	adds	r4, #1
 80069c8:	9305      	str	r3, [sp, #20]
 80069ca:	4619      	mov	r1, r3
 80069cc:	f04f 0c0a 	mov.w	ip, #10
 80069d0:	4620      	mov	r0, r4
 80069d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069d6:	3a30      	subs	r2, #48	; 0x30
 80069d8:	2a09      	cmp	r2, #9
 80069da:	d903      	bls.n	80069e4 <_svfiprintf_r+0x1a8>
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d0c5      	beq.n	800696c <_svfiprintf_r+0x130>
 80069e0:	9105      	str	r1, [sp, #20]
 80069e2:	e7c3      	b.n	800696c <_svfiprintf_r+0x130>
 80069e4:	fb0c 2101 	mla	r1, ip, r1, r2
 80069e8:	4604      	mov	r4, r0
 80069ea:	2301      	movs	r3, #1
 80069ec:	e7f0      	b.n	80069d0 <_svfiprintf_r+0x194>
 80069ee:	ab03      	add	r3, sp, #12
 80069f0:	9300      	str	r3, [sp, #0]
 80069f2:	462a      	mov	r2, r5
 80069f4:	4b0f      	ldr	r3, [pc, #60]	; (8006a34 <_svfiprintf_r+0x1f8>)
 80069f6:	a904      	add	r1, sp, #16
 80069f8:	4638      	mov	r0, r7
 80069fa:	f3af 8000 	nop.w
 80069fe:	1c42      	adds	r2, r0, #1
 8006a00:	4606      	mov	r6, r0
 8006a02:	d1d6      	bne.n	80069b2 <_svfiprintf_r+0x176>
 8006a04:	89ab      	ldrh	r3, [r5, #12]
 8006a06:	065b      	lsls	r3, r3, #25
 8006a08:	f53f af2c 	bmi.w	8006864 <_svfiprintf_r+0x28>
 8006a0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a0e:	b01d      	add	sp, #116	; 0x74
 8006a10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a14:	ab03      	add	r3, sp, #12
 8006a16:	9300      	str	r3, [sp, #0]
 8006a18:	462a      	mov	r2, r5
 8006a1a:	4b06      	ldr	r3, [pc, #24]	; (8006a34 <_svfiprintf_r+0x1f8>)
 8006a1c:	a904      	add	r1, sp, #16
 8006a1e:	4638      	mov	r0, r7
 8006a20:	f000 f9d4 	bl	8006dcc <_printf_i>
 8006a24:	e7eb      	b.n	80069fe <_svfiprintf_r+0x1c2>
 8006a26:	bf00      	nop
 8006a28:	08007788 	.word	0x08007788
 8006a2c:	08007792 	.word	0x08007792
 8006a30:	00000000 	.word	0x00000000
 8006a34:	08006785 	.word	0x08006785
 8006a38:	0800778e 	.word	0x0800778e

08006a3c <__sfputc_r>:
 8006a3c:	6893      	ldr	r3, [r2, #8]
 8006a3e:	3b01      	subs	r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	b410      	push	{r4}
 8006a44:	6093      	str	r3, [r2, #8]
 8006a46:	da08      	bge.n	8006a5a <__sfputc_r+0x1e>
 8006a48:	6994      	ldr	r4, [r2, #24]
 8006a4a:	42a3      	cmp	r3, r4
 8006a4c:	db01      	blt.n	8006a52 <__sfputc_r+0x16>
 8006a4e:	290a      	cmp	r1, #10
 8006a50:	d103      	bne.n	8006a5a <__sfputc_r+0x1e>
 8006a52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a56:	f000 bb33 	b.w	80070c0 <__swbuf_r>
 8006a5a:	6813      	ldr	r3, [r2, #0]
 8006a5c:	1c58      	adds	r0, r3, #1
 8006a5e:	6010      	str	r0, [r2, #0]
 8006a60:	7019      	strb	r1, [r3, #0]
 8006a62:	4608      	mov	r0, r1
 8006a64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <__sfputs_r>:
 8006a6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a6c:	4606      	mov	r6, r0
 8006a6e:	460f      	mov	r7, r1
 8006a70:	4614      	mov	r4, r2
 8006a72:	18d5      	adds	r5, r2, r3
 8006a74:	42ac      	cmp	r4, r5
 8006a76:	d101      	bne.n	8006a7c <__sfputs_r+0x12>
 8006a78:	2000      	movs	r0, #0
 8006a7a:	e007      	b.n	8006a8c <__sfputs_r+0x22>
 8006a7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a80:	463a      	mov	r2, r7
 8006a82:	4630      	mov	r0, r6
 8006a84:	f7ff ffda 	bl	8006a3c <__sfputc_r>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d1f3      	bne.n	8006a74 <__sfputs_r+0xa>
 8006a8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006a90 <_vfiprintf_r>:
 8006a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a94:	460d      	mov	r5, r1
 8006a96:	b09d      	sub	sp, #116	; 0x74
 8006a98:	4614      	mov	r4, r2
 8006a9a:	4698      	mov	r8, r3
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	b118      	cbz	r0, 8006aa8 <_vfiprintf_r+0x18>
 8006aa0:	6983      	ldr	r3, [r0, #24]
 8006aa2:	b90b      	cbnz	r3, 8006aa8 <_vfiprintf_r+0x18>
 8006aa4:	f7ff fd74 	bl	8006590 <__sinit>
 8006aa8:	4b89      	ldr	r3, [pc, #548]	; (8006cd0 <_vfiprintf_r+0x240>)
 8006aaa:	429d      	cmp	r5, r3
 8006aac:	d11b      	bne.n	8006ae6 <_vfiprintf_r+0x56>
 8006aae:	6875      	ldr	r5, [r6, #4]
 8006ab0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ab2:	07d9      	lsls	r1, r3, #31
 8006ab4:	d405      	bmi.n	8006ac2 <_vfiprintf_r+0x32>
 8006ab6:	89ab      	ldrh	r3, [r5, #12]
 8006ab8:	059a      	lsls	r2, r3, #22
 8006aba:	d402      	bmi.n	8006ac2 <_vfiprintf_r+0x32>
 8006abc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006abe:	f7ff fe05 	bl	80066cc <__retarget_lock_acquire_recursive>
 8006ac2:	89ab      	ldrh	r3, [r5, #12]
 8006ac4:	071b      	lsls	r3, r3, #28
 8006ac6:	d501      	bpl.n	8006acc <_vfiprintf_r+0x3c>
 8006ac8:	692b      	ldr	r3, [r5, #16]
 8006aca:	b9eb      	cbnz	r3, 8006b08 <_vfiprintf_r+0x78>
 8006acc:	4629      	mov	r1, r5
 8006ace:	4630      	mov	r0, r6
 8006ad0:	f000 fb5a 	bl	8007188 <__swsetup_r>
 8006ad4:	b1c0      	cbz	r0, 8006b08 <_vfiprintf_r+0x78>
 8006ad6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ad8:	07dc      	lsls	r4, r3, #31
 8006ada:	d50e      	bpl.n	8006afa <_vfiprintf_r+0x6a>
 8006adc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae0:	b01d      	add	sp, #116	; 0x74
 8006ae2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae6:	4b7b      	ldr	r3, [pc, #492]	; (8006cd4 <_vfiprintf_r+0x244>)
 8006ae8:	429d      	cmp	r5, r3
 8006aea:	d101      	bne.n	8006af0 <_vfiprintf_r+0x60>
 8006aec:	68b5      	ldr	r5, [r6, #8]
 8006aee:	e7df      	b.n	8006ab0 <_vfiprintf_r+0x20>
 8006af0:	4b79      	ldr	r3, [pc, #484]	; (8006cd8 <_vfiprintf_r+0x248>)
 8006af2:	429d      	cmp	r5, r3
 8006af4:	bf08      	it	eq
 8006af6:	68f5      	ldreq	r5, [r6, #12]
 8006af8:	e7da      	b.n	8006ab0 <_vfiprintf_r+0x20>
 8006afa:	89ab      	ldrh	r3, [r5, #12]
 8006afc:	0598      	lsls	r0, r3, #22
 8006afe:	d4ed      	bmi.n	8006adc <_vfiprintf_r+0x4c>
 8006b00:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b02:	f7ff fde4 	bl	80066ce <__retarget_lock_release_recursive>
 8006b06:	e7e9      	b.n	8006adc <_vfiprintf_r+0x4c>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b0c:	2320      	movs	r3, #32
 8006b0e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b12:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b16:	2330      	movs	r3, #48	; 0x30
 8006b18:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006cdc <_vfiprintf_r+0x24c>
 8006b1c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b20:	f04f 0901 	mov.w	r9, #1
 8006b24:	4623      	mov	r3, r4
 8006b26:	469a      	mov	sl, r3
 8006b28:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006b2c:	b10a      	cbz	r2, 8006b32 <_vfiprintf_r+0xa2>
 8006b2e:	2a25      	cmp	r2, #37	; 0x25
 8006b30:	d1f9      	bne.n	8006b26 <_vfiprintf_r+0x96>
 8006b32:	ebba 0b04 	subs.w	fp, sl, r4
 8006b36:	d00b      	beq.n	8006b50 <_vfiprintf_r+0xc0>
 8006b38:	465b      	mov	r3, fp
 8006b3a:	4622      	mov	r2, r4
 8006b3c:	4629      	mov	r1, r5
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f7ff ff93 	bl	8006a6a <__sfputs_r>
 8006b44:	3001      	adds	r0, #1
 8006b46:	f000 80aa 	beq.w	8006c9e <_vfiprintf_r+0x20e>
 8006b4a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b4c:	445a      	add	r2, fp
 8006b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b50:	f89a 3000 	ldrb.w	r3, [sl]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80a2 	beq.w	8006c9e <_vfiprintf_r+0x20e>
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b64:	f10a 0a01 	add.w	sl, sl, #1
 8006b68:	9304      	str	r3, [sp, #16]
 8006b6a:	9307      	str	r3, [sp, #28]
 8006b6c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006b70:	931a      	str	r3, [sp, #104]	; 0x68
 8006b72:	4654      	mov	r4, sl
 8006b74:	2205      	movs	r2, #5
 8006b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b7a:	4858      	ldr	r0, [pc, #352]	; (8006cdc <_vfiprintf_r+0x24c>)
 8006b7c:	f7f9 fb38 	bl	80001f0 <memchr>
 8006b80:	9a04      	ldr	r2, [sp, #16]
 8006b82:	b9d8      	cbnz	r0, 8006bbc <_vfiprintf_r+0x12c>
 8006b84:	06d1      	lsls	r1, r2, #27
 8006b86:	bf44      	itt	mi
 8006b88:	2320      	movmi	r3, #32
 8006b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b8e:	0713      	lsls	r3, r2, #28
 8006b90:	bf44      	itt	mi
 8006b92:	232b      	movmi	r3, #43	; 0x2b
 8006b94:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006b98:	f89a 3000 	ldrb.w	r3, [sl]
 8006b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8006b9e:	d015      	beq.n	8006bcc <_vfiprintf_r+0x13c>
 8006ba0:	9a07      	ldr	r2, [sp, #28]
 8006ba2:	4654      	mov	r4, sl
 8006ba4:	2000      	movs	r0, #0
 8006ba6:	f04f 0c0a 	mov.w	ip, #10
 8006baa:	4621      	mov	r1, r4
 8006bac:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006bb0:	3b30      	subs	r3, #48	; 0x30
 8006bb2:	2b09      	cmp	r3, #9
 8006bb4:	d94e      	bls.n	8006c54 <_vfiprintf_r+0x1c4>
 8006bb6:	b1b0      	cbz	r0, 8006be6 <_vfiprintf_r+0x156>
 8006bb8:	9207      	str	r2, [sp, #28]
 8006bba:	e014      	b.n	8006be6 <_vfiprintf_r+0x156>
 8006bbc:	eba0 0308 	sub.w	r3, r0, r8
 8006bc0:	fa09 f303 	lsl.w	r3, r9, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	9304      	str	r3, [sp, #16]
 8006bc8:	46a2      	mov	sl, r4
 8006bca:	e7d2      	b.n	8006b72 <_vfiprintf_r+0xe2>
 8006bcc:	9b03      	ldr	r3, [sp, #12]
 8006bce:	1d19      	adds	r1, r3, #4
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	9103      	str	r1, [sp, #12]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	bfbb      	ittet	lt
 8006bd8:	425b      	neglt	r3, r3
 8006bda:	f042 0202 	orrlt.w	r2, r2, #2
 8006bde:	9307      	strge	r3, [sp, #28]
 8006be0:	9307      	strlt	r3, [sp, #28]
 8006be2:	bfb8      	it	lt
 8006be4:	9204      	strlt	r2, [sp, #16]
 8006be6:	7823      	ldrb	r3, [r4, #0]
 8006be8:	2b2e      	cmp	r3, #46	; 0x2e
 8006bea:	d10c      	bne.n	8006c06 <_vfiprintf_r+0x176>
 8006bec:	7863      	ldrb	r3, [r4, #1]
 8006bee:	2b2a      	cmp	r3, #42	; 0x2a
 8006bf0:	d135      	bne.n	8006c5e <_vfiprintf_r+0x1ce>
 8006bf2:	9b03      	ldr	r3, [sp, #12]
 8006bf4:	1d1a      	adds	r2, r3, #4
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	9203      	str	r2, [sp, #12]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	bfb8      	it	lt
 8006bfe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c02:	3402      	adds	r4, #2
 8006c04:	9305      	str	r3, [sp, #20]
 8006c06:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006cec <_vfiprintf_r+0x25c>
 8006c0a:	7821      	ldrb	r1, [r4, #0]
 8006c0c:	2203      	movs	r2, #3
 8006c0e:	4650      	mov	r0, sl
 8006c10:	f7f9 faee 	bl	80001f0 <memchr>
 8006c14:	b140      	cbz	r0, 8006c28 <_vfiprintf_r+0x198>
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	eba0 000a 	sub.w	r0, r0, sl
 8006c1c:	fa03 f000 	lsl.w	r0, r3, r0
 8006c20:	9b04      	ldr	r3, [sp, #16]
 8006c22:	4303      	orrs	r3, r0
 8006c24:	3401      	adds	r4, #1
 8006c26:	9304      	str	r3, [sp, #16]
 8006c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c2c:	482c      	ldr	r0, [pc, #176]	; (8006ce0 <_vfiprintf_r+0x250>)
 8006c2e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006c32:	2206      	movs	r2, #6
 8006c34:	f7f9 fadc 	bl	80001f0 <memchr>
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d03f      	beq.n	8006cbc <_vfiprintf_r+0x22c>
 8006c3c:	4b29      	ldr	r3, [pc, #164]	; (8006ce4 <_vfiprintf_r+0x254>)
 8006c3e:	bb1b      	cbnz	r3, 8006c88 <_vfiprintf_r+0x1f8>
 8006c40:	9b03      	ldr	r3, [sp, #12]
 8006c42:	3307      	adds	r3, #7
 8006c44:	f023 0307 	bic.w	r3, r3, #7
 8006c48:	3308      	adds	r3, #8
 8006c4a:	9303      	str	r3, [sp, #12]
 8006c4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c4e:	443b      	add	r3, r7
 8006c50:	9309      	str	r3, [sp, #36]	; 0x24
 8006c52:	e767      	b.n	8006b24 <_vfiprintf_r+0x94>
 8006c54:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c58:	460c      	mov	r4, r1
 8006c5a:	2001      	movs	r0, #1
 8006c5c:	e7a5      	b.n	8006baa <_vfiprintf_r+0x11a>
 8006c5e:	2300      	movs	r3, #0
 8006c60:	3401      	adds	r4, #1
 8006c62:	9305      	str	r3, [sp, #20]
 8006c64:	4619      	mov	r1, r3
 8006c66:	f04f 0c0a 	mov.w	ip, #10
 8006c6a:	4620      	mov	r0, r4
 8006c6c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c70:	3a30      	subs	r2, #48	; 0x30
 8006c72:	2a09      	cmp	r2, #9
 8006c74:	d903      	bls.n	8006c7e <_vfiprintf_r+0x1ee>
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0c5      	beq.n	8006c06 <_vfiprintf_r+0x176>
 8006c7a:	9105      	str	r1, [sp, #20]
 8006c7c:	e7c3      	b.n	8006c06 <_vfiprintf_r+0x176>
 8006c7e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c82:	4604      	mov	r4, r0
 8006c84:	2301      	movs	r3, #1
 8006c86:	e7f0      	b.n	8006c6a <_vfiprintf_r+0x1da>
 8006c88:	ab03      	add	r3, sp, #12
 8006c8a:	9300      	str	r3, [sp, #0]
 8006c8c:	462a      	mov	r2, r5
 8006c8e:	4b16      	ldr	r3, [pc, #88]	; (8006ce8 <_vfiprintf_r+0x258>)
 8006c90:	a904      	add	r1, sp, #16
 8006c92:	4630      	mov	r0, r6
 8006c94:	f3af 8000 	nop.w
 8006c98:	4607      	mov	r7, r0
 8006c9a:	1c78      	adds	r0, r7, #1
 8006c9c:	d1d6      	bne.n	8006c4c <_vfiprintf_r+0x1bc>
 8006c9e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ca0:	07d9      	lsls	r1, r3, #31
 8006ca2:	d405      	bmi.n	8006cb0 <_vfiprintf_r+0x220>
 8006ca4:	89ab      	ldrh	r3, [r5, #12]
 8006ca6:	059a      	lsls	r2, r3, #22
 8006ca8:	d402      	bmi.n	8006cb0 <_vfiprintf_r+0x220>
 8006caa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006cac:	f7ff fd0f 	bl	80066ce <__retarget_lock_release_recursive>
 8006cb0:	89ab      	ldrh	r3, [r5, #12]
 8006cb2:	065b      	lsls	r3, r3, #25
 8006cb4:	f53f af12 	bmi.w	8006adc <_vfiprintf_r+0x4c>
 8006cb8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006cba:	e711      	b.n	8006ae0 <_vfiprintf_r+0x50>
 8006cbc:	ab03      	add	r3, sp, #12
 8006cbe:	9300      	str	r3, [sp, #0]
 8006cc0:	462a      	mov	r2, r5
 8006cc2:	4b09      	ldr	r3, [pc, #36]	; (8006ce8 <_vfiprintf_r+0x258>)
 8006cc4:	a904      	add	r1, sp, #16
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f000 f880 	bl	8006dcc <_printf_i>
 8006ccc:	e7e4      	b.n	8006c98 <_vfiprintf_r+0x208>
 8006cce:	bf00      	nop
 8006cd0:	08007748 	.word	0x08007748
 8006cd4:	08007768 	.word	0x08007768
 8006cd8:	08007728 	.word	0x08007728
 8006cdc:	08007788 	.word	0x08007788
 8006ce0:	08007792 	.word	0x08007792
 8006ce4:	00000000 	.word	0x00000000
 8006ce8:	08006a6b 	.word	0x08006a6b
 8006cec:	0800778e 	.word	0x0800778e

08006cf0 <_printf_common>:
 8006cf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf4:	4616      	mov	r6, r2
 8006cf6:	4699      	mov	r9, r3
 8006cf8:	688a      	ldr	r2, [r1, #8]
 8006cfa:	690b      	ldr	r3, [r1, #16]
 8006cfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d00:	4293      	cmp	r3, r2
 8006d02:	bfb8      	it	lt
 8006d04:	4613      	movlt	r3, r2
 8006d06:	6033      	str	r3, [r6, #0]
 8006d08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d0c:	4607      	mov	r7, r0
 8006d0e:	460c      	mov	r4, r1
 8006d10:	b10a      	cbz	r2, 8006d16 <_printf_common+0x26>
 8006d12:	3301      	adds	r3, #1
 8006d14:	6033      	str	r3, [r6, #0]
 8006d16:	6823      	ldr	r3, [r4, #0]
 8006d18:	0699      	lsls	r1, r3, #26
 8006d1a:	bf42      	ittt	mi
 8006d1c:	6833      	ldrmi	r3, [r6, #0]
 8006d1e:	3302      	addmi	r3, #2
 8006d20:	6033      	strmi	r3, [r6, #0]
 8006d22:	6825      	ldr	r5, [r4, #0]
 8006d24:	f015 0506 	ands.w	r5, r5, #6
 8006d28:	d106      	bne.n	8006d38 <_printf_common+0x48>
 8006d2a:	f104 0a19 	add.w	sl, r4, #25
 8006d2e:	68e3      	ldr	r3, [r4, #12]
 8006d30:	6832      	ldr	r2, [r6, #0]
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	42ab      	cmp	r3, r5
 8006d36:	dc26      	bgt.n	8006d86 <_printf_common+0x96>
 8006d38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006d3c:	1e13      	subs	r3, r2, #0
 8006d3e:	6822      	ldr	r2, [r4, #0]
 8006d40:	bf18      	it	ne
 8006d42:	2301      	movne	r3, #1
 8006d44:	0692      	lsls	r2, r2, #26
 8006d46:	d42b      	bmi.n	8006da0 <_printf_common+0xb0>
 8006d48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006d4c:	4649      	mov	r1, r9
 8006d4e:	4638      	mov	r0, r7
 8006d50:	47c0      	blx	r8
 8006d52:	3001      	adds	r0, #1
 8006d54:	d01e      	beq.n	8006d94 <_printf_common+0xa4>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	68e5      	ldr	r5, [r4, #12]
 8006d5a:	6832      	ldr	r2, [r6, #0]
 8006d5c:	f003 0306 	and.w	r3, r3, #6
 8006d60:	2b04      	cmp	r3, #4
 8006d62:	bf08      	it	eq
 8006d64:	1aad      	subeq	r5, r5, r2
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	6922      	ldr	r2, [r4, #16]
 8006d6a:	bf0c      	ite	eq
 8006d6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d70:	2500      	movne	r5, #0
 8006d72:	4293      	cmp	r3, r2
 8006d74:	bfc4      	itt	gt
 8006d76:	1a9b      	subgt	r3, r3, r2
 8006d78:	18ed      	addgt	r5, r5, r3
 8006d7a:	2600      	movs	r6, #0
 8006d7c:	341a      	adds	r4, #26
 8006d7e:	42b5      	cmp	r5, r6
 8006d80:	d11a      	bne.n	8006db8 <_printf_common+0xc8>
 8006d82:	2000      	movs	r0, #0
 8006d84:	e008      	b.n	8006d98 <_printf_common+0xa8>
 8006d86:	2301      	movs	r3, #1
 8006d88:	4652      	mov	r2, sl
 8006d8a:	4649      	mov	r1, r9
 8006d8c:	4638      	mov	r0, r7
 8006d8e:	47c0      	blx	r8
 8006d90:	3001      	adds	r0, #1
 8006d92:	d103      	bne.n	8006d9c <_printf_common+0xac>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295
 8006d98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9c:	3501      	adds	r5, #1
 8006d9e:	e7c6      	b.n	8006d2e <_printf_common+0x3e>
 8006da0:	18e1      	adds	r1, r4, r3
 8006da2:	1c5a      	adds	r2, r3, #1
 8006da4:	2030      	movs	r0, #48	; 0x30
 8006da6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006daa:	4422      	add	r2, r4
 8006dac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006db0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006db4:	3302      	adds	r3, #2
 8006db6:	e7c7      	b.n	8006d48 <_printf_common+0x58>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4622      	mov	r2, r4
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4638      	mov	r0, r7
 8006dc0:	47c0      	blx	r8
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d0e6      	beq.n	8006d94 <_printf_common+0xa4>
 8006dc6:	3601      	adds	r6, #1
 8006dc8:	e7d9      	b.n	8006d7e <_printf_common+0x8e>
	...

08006dcc <_printf_i>:
 8006dcc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	4691      	mov	r9, r2
 8006dd4:	7e27      	ldrb	r7, [r4, #24]
 8006dd6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006dd8:	2f78      	cmp	r7, #120	; 0x78
 8006dda:	4680      	mov	r8, r0
 8006ddc:	469a      	mov	sl, r3
 8006dde:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006de2:	d807      	bhi.n	8006df4 <_printf_i+0x28>
 8006de4:	2f62      	cmp	r7, #98	; 0x62
 8006de6:	d80a      	bhi.n	8006dfe <_printf_i+0x32>
 8006de8:	2f00      	cmp	r7, #0
 8006dea:	f000 80d8 	beq.w	8006f9e <_printf_i+0x1d2>
 8006dee:	2f58      	cmp	r7, #88	; 0x58
 8006df0:	f000 80a3 	beq.w	8006f3a <_printf_i+0x16e>
 8006df4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006df8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006dfc:	e03a      	b.n	8006e74 <_printf_i+0xa8>
 8006dfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e02:	2b15      	cmp	r3, #21
 8006e04:	d8f6      	bhi.n	8006df4 <_printf_i+0x28>
 8006e06:	a001      	add	r0, pc, #4	; (adr r0, 8006e0c <_printf_i+0x40>)
 8006e08:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e0c:	08006e65 	.word	0x08006e65
 8006e10:	08006e79 	.word	0x08006e79
 8006e14:	08006df5 	.word	0x08006df5
 8006e18:	08006df5 	.word	0x08006df5
 8006e1c:	08006df5 	.word	0x08006df5
 8006e20:	08006df5 	.word	0x08006df5
 8006e24:	08006e79 	.word	0x08006e79
 8006e28:	08006df5 	.word	0x08006df5
 8006e2c:	08006df5 	.word	0x08006df5
 8006e30:	08006df5 	.word	0x08006df5
 8006e34:	08006df5 	.word	0x08006df5
 8006e38:	08006f85 	.word	0x08006f85
 8006e3c:	08006ea9 	.word	0x08006ea9
 8006e40:	08006f67 	.word	0x08006f67
 8006e44:	08006df5 	.word	0x08006df5
 8006e48:	08006df5 	.word	0x08006df5
 8006e4c:	08006fa7 	.word	0x08006fa7
 8006e50:	08006df5 	.word	0x08006df5
 8006e54:	08006ea9 	.word	0x08006ea9
 8006e58:	08006df5 	.word	0x08006df5
 8006e5c:	08006df5 	.word	0x08006df5
 8006e60:	08006f6f 	.word	0x08006f6f
 8006e64:	680b      	ldr	r3, [r1, #0]
 8006e66:	1d1a      	adds	r2, r3, #4
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	600a      	str	r2, [r1, #0]
 8006e6c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006e74:	2301      	movs	r3, #1
 8006e76:	e0a3      	b.n	8006fc0 <_printf_i+0x1f4>
 8006e78:	6825      	ldr	r5, [r4, #0]
 8006e7a:	6808      	ldr	r0, [r1, #0]
 8006e7c:	062e      	lsls	r6, r5, #24
 8006e7e:	f100 0304 	add.w	r3, r0, #4
 8006e82:	d50a      	bpl.n	8006e9a <_printf_i+0xce>
 8006e84:	6805      	ldr	r5, [r0, #0]
 8006e86:	600b      	str	r3, [r1, #0]
 8006e88:	2d00      	cmp	r5, #0
 8006e8a:	da03      	bge.n	8006e94 <_printf_i+0xc8>
 8006e8c:	232d      	movs	r3, #45	; 0x2d
 8006e8e:	426d      	negs	r5, r5
 8006e90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e94:	485e      	ldr	r0, [pc, #376]	; (8007010 <_printf_i+0x244>)
 8006e96:	230a      	movs	r3, #10
 8006e98:	e019      	b.n	8006ece <_printf_i+0x102>
 8006e9a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006e9e:	6805      	ldr	r5, [r0, #0]
 8006ea0:	600b      	str	r3, [r1, #0]
 8006ea2:	bf18      	it	ne
 8006ea4:	b22d      	sxthne	r5, r5
 8006ea6:	e7ef      	b.n	8006e88 <_printf_i+0xbc>
 8006ea8:	680b      	ldr	r3, [r1, #0]
 8006eaa:	6825      	ldr	r5, [r4, #0]
 8006eac:	1d18      	adds	r0, r3, #4
 8006eae:	6008      	str	r0, [r1, #0]
 8006eb0:	0628      	lsls	r0, r5, #24
 8006eb2:	d501      	bpl.n	8006eb8 <_printf_i+0xec>
 8006eb4:	681d      	ldr	r5, [r3, #0]
 8006eb6:	e002      	b.n	8006ebe <_printf_i+0xf2>
 8006eb8:	0669      	lsls	r1, r5, #25
 8006eba:	d5fb      	bpl.n	8006eb4 <_printf_i+0xe8>
 8006ebc:	881d      	ldrh	r5, [r3, #0]
 8006ebe:	4854      	ldr	r0, [pc, #336]	; (8007010 <_printf_i+0x244>)
 8006ec0:	2f6f      	cmp	r7, #111	; 0x6f
 8006ec2:	bf0c      	ite	eq
 8006ec4:	2308      	moveq	r3, #8
 8006ec6:	230a      	movne	r3, #10
 8006ec8:	2100      	movs	r1, #0
 8006eca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006ece:	6866      	ldr	r6, [r4, #4]
 8006ed0:	60a6      	str	r6, [r4, #8]
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	bfa2      	ittt	ge
 8006ed6:	6821      	ldrge	r1, [r4, #0]
 8006ed8:	f021 0104 	bicge.w	r1, r1, #4
 8006edc:	6021      	strge	r1, [r4, #0]
 8006ede:	b90d      	cbnz	r5, 8006ee4 <_printf_i+0x118>
 8006ee0:	2e00      	cmp	r6, #0
 8006ee2:	d04d      	beq.n	8006f80 <_printf_i+0x1b4>
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eea:	fb03 5711 	mls	r7, r3, r1, r5
 8006eee:	5dc7      	ldrb	r7, [r0, r7]
 8006ef0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ef4:	462f      	mov	r7, r5
 8006ef6:	42bb      	cmp	r3, r7
 8006ef8:	460d      	mov	r5, r1
 8006efa:	d9f4      	bls.n	8006ee6 <_printf_i+0x11a>
 8006efc:	2b08      	cmp	r3, #8
 8006efe:	d10b      	bne.n	8006f18 <_printf_i+0x14c>
 8006f00:	6823      	ldr	r3, [r4, #0]
 8006f02:	07df      	lsls	r7, r3, #31
 8006f04:	d508      	bpl.n	8006f18 <_printf_i+0x14c>
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	6861      	ldr	r1, [r4, #4]
 8006f0a:	4299      	cmp	r1, r3
 8006f0c:	bfde      	ittt	le
 8006f0e:	2330      	movle	r3, #48	; 0x30
 8006f10:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006f14:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006f18:	1b92      	subs	r2, r2, r6
 8006f1a:	6122      	str	r2, [r4, #16]
 8006f1c:	f8cd a000 	str.w	sl, [sp]
 8006f20:	464b      	mov	r3, r9
 8006f22:	aa03      	add	r2, sp, #12
 8006f24:	4621      	mov	r1, r4
 8006f26:	4640      	mov	r0, r8
 8006f28:	f7ff fee2 	bl	8006cf0 <_printf_common>
 8006f2c:	3001      	adds	r0, #1
 8006f2e:	d14c      	bne.n	8006fca <_printf_i+0x1fe>
 8006f30:	f04f 30ff 	mov.w	r0, #4294967295
 8006f34:	b004      	add	sp, #16
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	4835      	ldr	r0, [pc, #212]	; (8007010 <_printf_i+0x244>)
 8006f3c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006f40:	6823      	ldr	r3, [r4, #0]
 8006f42:	680e      	ldr	r6, [r1, #0]
 8006f44:	061f      	lsls	r7, r3, #24
 8006f46:	f856 5b04 	ldr.w	r5, [r6], #4
 8006f4a:	600e      	str	r6, [r1, #0]
 8006f4c:	d514      	bpl.n	8006f78 <_printf_i+0x1ac>
 8006f4e:	07d9      	lsls	r1, r3, #31
 8006f50:	bf44      	itt	mi
 8006f52:	f043 0320 	orrmi.w	r3, r3, #32
 8006f56:	6023      	strmi	r3, [r4, #0]
 8006f58:	b91d      	cbnz	r5, 8006f62 <_printf_i+0x196>
 8006f5a:	6823      	ldr	r3, [r4, #0]
 8006f5c:	f023 0320 	bic.w	r3, r3, #32
 8006f60:	6023      	str	r3, [r4, #0]
 8006f62:	2310      	movs	r3, #16
 8006f64:	e7b0      	b.n	8006ec8 <_printf_i+0xfc>
 8006f66:	6823      	ldr	r3, [r4, #0]
 8006f68:	f043 0320 	orr.w	r3, r3, #32
 8006f6c:	6023      	str	r3, [r4, #0]
 8006f6e:	2378      	movs	r3, #120	; 0x78
 8006f70:	4828      	ldr	r0, [pc, #160]	; (8007014 <_printf_i+0x248>)
 8006f72:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006f76:	e7e3      	b.n	8006f40 <_printf_i+0x174>
 8006f78:	065e      	lsls	r6, r3, #25
 8006f7a:	bf48      	it	mi
 8006f7c:	b2ad      	uxthmi	r5, r5
 8006f7e:	e7e6      	b.n	8006f4e <_printf_i+0x182>
 8006f80:	4616      	mov	r6, r2
 8006f82:	e7bb      	b.n	8006efc <_printf_i+0x130>
 8006f84:	680b      	ldr	r3, [r1, #0]
 8006f86:	6826      	ldr	r6, [r4, #0]
 8006f88:	6960      	ldr	r0, [r4, #20]
 8006f8a:	1d1d      	adds	r5, r3, #4
 8006f8c:	600d      	str	r5, [r1, #0]
 8006f8e:	0635      	lsls	r5, r6, #24
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	d501      	bpl.n	8006f98 <_printf_i+0x1cc>
 8006f94:	6018      	str	r0, [r3, #0]
 8006f96:	e002      	b.n	8006f9e <_printf_i+0x1d2>
 8006f98:	0671      	lsls	r1, r6, #25
 8006f9a:	d5fb      	bpl.n	8006f94 <_printf_i+0x1c8>
 8006f9c:	8018      	strh	r0, [r3, #0]
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	6123      	str	r3, [r4, #16]
 8006fa2:	4616      	mov	r6, r2
 8006fa4:	e7ba      	b.n	8006f1c <_printf_i+0x150>
 8006fa6:	680b      	ldr	r3, [r1, #0]
 8006fa8:	1d1a      	adds	r2, r3, #4
 8006faa:	600a      	str	r2, [r1, #0]
 8006fac:	681e      	ldr	r6, [r3, #0]
 8006fae:	6862      	ldr	r2, [r4, #4]
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	4630      	mov	r0, r6
 8006fb4:	f7f9 f91c 	bl	80001f0 <memchr>
 8006fb8:	b108      	cbz	r0, 8006fbe <_printf_i+0x1f2>
 8006fba:	1b80      	subs	r0, r0, r6
 8006fbc:	6060      	str	r0, [r4, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	6123      	str	r3, [r4, #16]
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fc8:	e7a8      	b.n	8006f1c <_printf_i+0x150>
 8006fca:	6923      	ldr	r3, [r4, #16]
 8006fcc:	4632      	mov	r2, r6
 8006fce:	4649      	mov	r1, r9
 8006fd0:	4640      	mov	r0, r8
 8006fd2:	47d0      	blx	sl
 8006fd4:	3001      	adds	r0, #1
 8006fd6:	d0ab      	beq.n	8006f30 <_printf_i+0x164>
 8006fd8:	6823      	ldr	r3, [r4, #0]
 8006fda:	079b      	lsls	r3, r3, #30
 8006fdc:	d413      	bmi.n	8007006 <_printf_i+0x23a>
 8006fde:	68e0      	ldr	r0, [r4, #12]
 8006fe0:	9b03      	ldr	r3, [sp, #12]
 8006fe2:	4298      	cmp	r0, r3
 8006fe4:	bfb8      	it	lt
 8006fe6:	4618      	movlt	r0, r3
 8006fe8:	e7a4      	b.n	8006f34 <_printf_i+0x168>
 8006fea:	2301      	movs	r3, #1
 8006fec:	4632      	mov	r2, r6
 8006fee:	4649      	mov	r1, r9
 8006ff0:	4640      	mov	r0, r8
 8006ff2:	47d0      	blx	sl
 8006ff4:	3001      	adds	r0, #1
 8006ff6:	d09b      	beq.n	8006f30 <_printf_i+0x164>
 8006ff8:	3501      	adds	r5, #1
 8006ffa:	68e3      	ldr	r3, [r4, #12]
 8006ffc:	9903      	ldr	r1, [sp, #12]
 8006ffe:	1a5b      	subs	r3, r3, r1
 8007000:	42ab      	cmp	r3, r5
 8007002:	dcf2      	bgt.n	8006fea <_printf_i+0x21e>
 8007004:	e7eb      	b.n	8006fde <_printf_i+0x212>
 8007006:	2500      	movs	r5, #0
 8007008:	f104 0619 	add.w	r6, r4, #25
 800700c:	e7f5      	b.n	8006ffa <_printf_i+0x22e>
 800700e:	bf00      	nop
 8007010:	08007799 	.word	0x08007799
 8007014:	080077aa 	.word	0x080077aa

08007018 <_sbrk_r>:
 8007018:	b538      	push	{r3, r4, r5, lr}
 800701a:	4d06      	ldr	r5, [pc, #24]	; (8007034 <_sbrk_r+0x1c>)
 800701c:	2300      	movs	r3, #0
 800701e:	4604      	mov	r4, r0
 8007020:	4608      	mov	r0, r1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	f7f9 fff6 	bl	8001014 <_sbrk>
 8007028:	1c43      	adds	r3, r0, #1
 800702a:	d102      	bne.n	8007032 <_sbrk_r+0x1a>
 800702c:	682b      	ldr	r3, [r5, #0]
 800702e:	b103      	cbz	r3, 8007032 <_sbrk_r+0x1a>
 8007030:	6023      	str	r3, [r4, #0]
 8007032:	bd38      	pop	{r3, r4, r5, pc}
 8007034:	20000400 	.word	0x20000400

08007038 <__sread>:
 8007038:	b510      	push	{r4, lr}
 800703a:	460c      	mov	r4, r1
 800703c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007040:	f000 fb02 	bl	8007648 <_read_r>
 8007044:	2800      	cmp	r0, #0
 8007046:	bfab      	itete	ge
 8007048:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800704a:	89a3      	ldrhlt	r3, [r4, #12]
 800704c:	181b      	addge	r3, r3, r0
 800704e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007052:	bfac      	ite	ge
 8007054:	6563      	strge	r3, [r4, #84]	; 0x54
 8007056:	81a3      	strhlt	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__swrite>:
 800705a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800705e:	461f      	mov	r7, r3
 8007060:	898b      	ldrh	r3, [r1, #12]
 8007062:	05db      	lsls	r3, r3, #23
 8007064:	4605      	mov	r5, r0
 8007066:	460c      	mov	r4, r1
 8007068:	4616      	mov	r6, r2
 800706a:	d505      	bpl.n	8007078 <__swrite+0x1e>
 800706c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007070:	2302      	movs	r3, #2
 8007072:	2200      	movs	r2, #0
 8007074:	f000 f9c8 	bl	8007408 <_lseek_r>
 8007078:	89a3      	ldrh	r3, [r4, #12]
 800707a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800707e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007082:	81a3      	strh	r3, [r4, #12]
 8007084:	4632      	mov	r2, r6
 8007086:	463b      	mov	r3, r7
 8007088:	4628      	mov	r0, r5
 800708a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800708e:	f000 b869 	b.w	8007164 <_write_r>

08007092 <__sseek>:
 8007092:	b510      	push	{r4, lr}
 8007094:	460c      	mov	r4, r1
 8007096:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800709a:	f000 f9b5 	bl	8007408 <_lseek_r>
 800709e:	1c43      	adds	r3, r0, #1
 80070a0:	89a3      	ldrh	r3, [r4, #12]
 80070a2:	bf15      	itete	ne
 80070a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80070a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070ae:	81a3      	strheq	r3, [r4, #12]
 80070b0:	bf18      	it	ne
 80070b2:	81a3      	strhne	r3, [r4, #12]
 80070b4:	bd10      	pop	{r4, pc}

080070b6 <__sclose>:
 80070b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ba:	f000 b8d3 	b.w	8007264 <_close_r>
	...

080070c0 <__swbuf_r>:
 80070c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070c2:	460e      	mov	r6, r1
 80070c4:	4614      	mov	r4, r2
 80070c6:	4605      	mov	r5, r0
 80070c8:	b118      	cbz	r0, 80070d2 <__swbuf_r+0x12>
 80070ca:	6983      	ldr	r3, [r0, #24]
 80070cc:	b90b      	cbnz	r3, 80070d2 <__swbuf_r+0x12>
 80070ce:	f7ff fa5f 	bl	8006590 <__sinit>
 80070d2:	4b21      	ldr	r3, [pc, #132]	; (8007158 <__swbuf_r+0x98>)
 80070d4:	429c      	cmp	r4, r3
 80070d6:	d12b      	bne.n	8007130 <__swbuf_r+0x70>
 80070d8:	686c      	ldr	r4, [r5, #4]
 80070da:	69a3      	ldr	r3, [r4, #24]
 80070dc:	60a3      	str	r3, [r4, #8]
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	071a      	lsls	r2, r3, #28
 80070e2:	d52f      	bpl.n	8007144 <__swbuf_r+0x84>
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	b36b      	cbz	r3, 8007144 <__swbuf_r+0x84>
 80070e8:	6923      	ldr	r3, [r4, #16]
 80070ea:	6820      	ldr	r0, [r4, #0]
 80070ec:	1ac0      	subs	r0, r0, r3
 80070ee:	6963      	ldr	r3, [r4, #20]
 80070f0:	b2f6      	uxtb	r6, r6
 80070f2:	4283      	cmp	r3, r0
 80070f4:	4637      	mov	r7, r6
 80070f6:	dc04      	bgt.n	8007102 <__swbuf_r+0x42>
 80070f8:	4621      	mov	r1, r4
 80070fa:	4628      	mov	r0, r5
 80070fc:	f000 f948 	bl	8007390 <_fflush_r>
 8007100:	bb30      	cbnz	r0, 8007150 <__swbuf_r+0x90>
 8007102:	68a3      	ldr	r3, [r4, #8]
 8007104:	3b01      	subs	r3, #1
 8007106:	60a3      	str	r3, [r4, #8]
 8007108:	6823      	ldr	r3, [r4, #0]
 800710a:	1c5a      	adds	r2, r3, #1
 800710c:	6022      	str	r2, [r4, #0]
 800710e:	701e      	strb	r6, [r3, #0]
 8007110:	6963      	ldr	r3, [r4, #20]
 8007112:	3001      	adds	r0, #1
 8007114:	4283      	cmp	r3, r0
 8007116:	d004      	beq.n	8007122 <__swbuf_r+0x62>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	07db      	lsls	r3, r3, #31
 800711c:	d506      	bpl.n	800712c <__swbuf_r+0x6c>
 800711e:	2e0a      	cmp	r6, #10
 8007120:	d104      	bne.n	800712c <__swbuf_r+0x6c>
 8007122:	4621      	mov	r1, r4
 8007124:	4628      	mov	r0, r5
 8007126:	f000 f933 	bl	8007390 <_fflush_r>
 800712a:	b988      	cbnz	r0, 8007150 <__swbuf_r+0x90>
 800712c:	4638      	mov	r0, r7
 800712e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007130:	4b0a      	ldr	r3, [pc, #40]	; (800715c <__swbuf_r+0x9c>)
 8007132:	429c      	cmp	r4, r3
 8007134:	d101      	bne.n	800713a <__swbuf_r+0x7a>
 8007136:	68ac      	ldr	r4, [r5, #8]
 8007138:	e7cf      	b.n	80070da <__swbuf_r+0x1a>
 800713a:	4b09      	ldr	r3, [pc, #36]	; (8007160 <__swbuf_r+0xa0>)
 800713c:	429c      	cmp	r4, r3
 800713e:	bf08      	it	eq
 8007140:	68ec      	ldreq	r4, [r5, #12]
 8007142:	e7ca      	b.n	80070da <__swbuf_r+0x1a>
 8007144:	4621      	mov	r1, r4
 8007146:	4628      	mov	r0, r5
 8007148:	f000 f81e 	bl	8007188 <__swsetup_r>
 800714c:	2800      	cmp	r0, #0
 800714e:	d0cb      	beq.n	80070e8 <__swbuf_r+0x28>
 8007150:	f04f 37ff 	mov.w	r7, #4294967295
 8007154:	e7ea      	b.n	800712c <__swbuf_r+0x6c>
 8007156:	bf00      	nop
 8007158:	08007748 	.word	0x08007748
 800715c:	08007768 	.word	0x08007768
 8007160:	08007728 	.word	0x08007728

08007164 <_write_r>:
 8007164:	b538      	push	{r3, r4, r5, lr}
 8007166:	4d07      	ldr	r5, [pc, #28]	; (8007184 <_write_r+0x20>)
 8007168:	4604      	mov	r4, r0
 800716a:	4608      	mov	r0, r1
 800716c:	4611      	mov	r1, r2
 800716e:	2200      	movs	r2, #0
 8007170:	602a      	str	r2, [r5, #0]
 8007172:	461a      	mov	r2, r3
 8007174:	f7f9 fd5e 	bl	8000c34 <_write>
 8007178:	1c43      	adds	r3, r0, #1
 800717a:	d102      	bne.n	8007182 <_write_r+0x1e>
 800717c:	682b      	ldr	r3, [r5, #0]
 800717e:	b103      	cbz	r3, 8007182 <_write_r+0x1e>
 8007180:	6023      	str	r3, [r4, #0]
 8007182:	bd38      	pop	{r3, r4, r5, pc}
 8007184:	20000400 	.word	0x20000400

08007188 <__swsetup_r>:
 8007188:	4b32      	ldr	r3, [pc, #200]	; (8007254 <__swsetup_r+0xcc>)
 800718a:	b570      	push	{r4, r5, r6, lr}
 800718c:	681d      	ldr	r5, [r3, #0]
 800718e:	4606      	mov	r6, r0
 8007190:	460c      	mov	r4, r1
 8007192:	b125      	cbz	r5, 800719e <__swsetup_r+0x16>
 8007194:	69ab      	ldr	r3, [r5, #24]
 8007196:	b913      	cbnz	r3, 800719e <__swsetup_r+0x16>
 8007198:	4628      	mov	r0, r5
 800719a:	f7ff f9f9 	bl	8006590 <__sinit>
 800719e:	4b2e      	ldr	r3, [pc, #184]	; (8007258 <__swsetup_r+0xd0>)
 80071a0:	429c      	cmp	r4, r3
 80071a2:	d10f      	bne.n	80071c4 <__swsetup_r+0x3c>
 80071a4:	686c      	ldr	r4, [r5, #4]
 80071a6:	89a3      	ldrh	r3, [r4, #12]
 80071a8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80071ac:	0719      	lsls	r1, r3, #28
 80071ae:	d42c      	bmi.n	800720a <__swsetup_r+0x82>
 80071b0:	06dd      	lsls	r5, r3, #27
 80071b2:	d411      	bmi.n	80071d8 <__swsetup_r+0x50>
 80071b4:	2309      	movs	r3, #9
 80071b6:	6033      	str	r3, [r6, #0]
 80071b8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80071bc:	81a3      	strh	r3, [r4, #12]
 80071be:	f04f 30ff 	mov.w	r0, #4294967295
 80071c2:	e03e      	b.n	8007242 <__swsetup_r+0xba>
 80071c4:	4b25      	ldr	r3, [pc, #148]	; (800725c <__swsetup_r+0xd4>)
 80071c6:	429c      	cmp	r4, r3
 80071c8:	d101      	bne.n	80071ce <__swsetup_r+0x46>
 80071ca:	68ac      	ldr	r4, [r5, #8]
 80071cc:	e7eb      	b.n	80071a6 <__swsetup_r+0x1e>
 80071ce:	4b24      	ldr	r3, [pc, #144]	; (8007260 <__swsetup_r+0xd8>)
 80071d0:	429c      	cmp	r4, r3
 80071d2:	bf08      	it	eq
 80071d4:	68ec      	ldreq	r4, [r5, #12]
 80071d6:	e7e6      	b.n	80071a6 <__swsetup_r+0x1e>
 80071d8:	0758      	lsls	r0, r3, #29
 80071da:	d512      	bpl.n	8007202 <__swsetup_r+0x7a>
 80071dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071de:	b141      	cbz	r1, 80071f2 <__swsetup_r+0x6a>
 80071e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071e4:	4299      	cmp	r1, r3
 80071e6:	d002      	beq.n	80071ee <__swsetup_r+0x66>
 80071e8:	4630      	mov	r0, r6
 80071ea:	f000 f9b7 	bl	800755c <_free_r>
 80071ee:	2300      	movs	r3, #0
 80071f0:	6363      	str	r3, [r4, #52]	; 0x34
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80071f8:	81a3      	strh	r3, [r4, #12]
 80071fa:	2300      	movs	r3, #0
 80071fc:	6063      	str	r3, [r4, #4]
 80071fe:	6923      	ldr	r3, [r4, #16]
 8007200:	6023      	str	r3, [r4, #0]
 8007202:	89a3      	ldrh	r3, [r4, #12]
 8007204:	f043 0308 	orr.w	r3, r3, #8
 8007208:	81a3      	strh	r3, [r4, #12]
 800720a:	6923      	ldr	r3, [r4, #16]
 800720c:	b94b      	cbnz	r3, 8007222 <__swsetup_r+0x9a>
 800720e:	89a3      	ldrh	r3, [r4, #12]
 8007210:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007218:	d003      	beq.n	8007222 <__swsetup_r+0x9a>
 800721a:	4621      	mov	r1, r4
 800721c:	4630      	mov	r0, r6
 800721e:	f000 f929 	bl	8007474 <__smakebuf_r>
 8007222:	89a0      	ldrh	r0, [r4, #12]
 8007224:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007228:	f010 0301 	ands.w	r3, r0, #1
 800722c:	d00a      	beq.n	8007244 <__swsetup_r+0xbc>
 800722e:	2300      	movs	r3, #0
 8007230:	60a3      	str	r3, [r4, #8]
 8007232:	6963      	ldr	r3, [r4, #20]
 8007234:	425b      	negs	r3, r3
 8007236:	61a3      	str	r3, [r4, #24]
 8007238:	6923      	ldr	r3, [r4, #16]
 800723a:	b943      	cbnz	r3, 800724e <__swsetup_r+0xc6>
 800723c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007240:	d1ba      	bne.n	80071b8 <__swsetup_r+0x30>
 8007242:	bd70      	pop	{r4, r5, r6, pc}
 8007244:	0781      	lsls	r1, r0, #30
 8007246:	bf58      	it	pl
 8007248:	6963      	ldrpl	r3, [r4, #20]
 800724a:	60a3      	str	r3, [r4, #8]
 800724c:	e7f4      	b.n	8007238 <__swsetup_r+0xb0>
 800724e:	2000      	movs	r0, #0
 8007250:	e7f7      	b.n	8007242 <__swsetup_r+0xba>
 8007252:	bf00      	nop
 8007254:	2000000c 	.word	0x2000000c
 8007258:	08007748 	.word	0x08007748
 800725c:	08007768 	.word	0x08007768
 8007260:	08007728 	.word	0x08007728

08007264 <_close_r>:
 8007264:	b538      	push	{r3, r4, r5, lr}
 8007266:	4d06      	ldr	r5, [pc, #24]	; (8007280 <_close_r+0x1c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4604      	mov	r4, r0
 800726c:	4608      	mov	r0, r1
 800726e:	602b      	str	r3, [r5, #0]
 8007270:	f7f9 fe9b 	bl	8000faa <_close>
 8007274:	1c43      	adds	r3, r0, #1
 8007276:	d102      	bne.n	800727e <_close_r+0x1a>
 8007278:	682b      	ldr	r3, [r5, #0]
 800727a:	b103      	cbz	r3, 800727e <_close_r+0x1a>
 800727c:	6023      	str	r3, [r4, #0]
 800727e:	bd38      	pop	{r3, r4, r5, pc}
 8007280:	20000400 	.word	0x20000400

08007284 <__sflush_r>:
 8007284:	898a      	ldrh	r2, [r1, #12]
 8007286:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800728a:	4605      	mov	r5, r0
 800728c:	0710      	lsls	r0, r2, #28
 800728e:	460c      	mov	r4, r1
 8007290:	d458      	bmi.n	8007344 <__sflush_r+0xc0>
 8007292:	684b      	ldr	r3, [r1, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	dc05      	bgt.n	80072a4 <__sflush_r+0x20>
 8007298:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800729a:	2b00      	cmp	r3, #0
 800729c:	dc02      	bgt.n	80072a4 <__sflush_r+0x20>
 800729e:	2000      	movs	r0, #0
 80072a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072a6:	2e00      	cmp	r6, #0
 80072a8:	d0f9      	beq.n	800729e <__sflush_r+0x1a>
 80072aa:	2300      	movs	r3, #0
 80072ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072b0:	682f      	ldr	r7, [r5, #0]
 80072b2:	602b      	str	r3, [r5, #0]
 80072b4:	d032      	beq.n	800731c <__sflush_r+0x98>
 80072b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072b8:	89a3      	ldrh	r3, [r4, #12]
 80072ba:	075a      	lsls	r2, r3, #29
 80072bc:	d505      	bpl.n	80072ca <__sflush_r+0x46>
 80072be:	6863      	ldr	r3, [r4, #4]
 80072c0:	1ac0      	subs	r0, r0, r3
 80072c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072c4:	b10b      	cbz	r3, 80072ca <__sflush_r+0x46>
 80072c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80072c8:	1ac0      	subs	r0, r0, r3
 80072ca:	2300      	movs	r3, #0
 80072cc:	4602      	mov	r2, r0
 80072ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072d0:	6a21      	ldr	r1, [r4, #32]
 80072d2:	4628      	mov	r0, r5
 80072d4:	47b0      	blx	r6
 80072d6:	1c43      	adds	r3, r0, #1
 80072d8:	89a3      	ldrh	r3, [r4, #12]
 80072da:	d106      	bne.n	80072ea <__sflush_r+0x66>
 80072dc:	6829      	ldr	r1, [r5, #0]
 80072de:	291d      	cmp	r1, #29
 80072e0:	d82c      	bhi.n	800733c <__sflush_r+0xb8>
 80072e2:	4a2a      	ldr	r2, [pc, #168]	; (800738c <__sflush_r+0x108>)
 80072e4:	40ca      	lsrs	r2, r1
 80072e6:	07d6      	lsls	r6, r2, #31
 80072e8:	d528      	bpl.n	800733c <__sflush_r+0xb8>
 80072ea:	2200      	movs	r2, #0
 80072ec:	6062      	str	r2, [r4, #4]
 80072ee:	04d9      	lsls	r1, r3, #19
 80072f0:	6922      	ldr	r2, [r4, #16]
 80072f2:	6022      	str	r2, [r4, #0]
 80072f4:	d504      	bpl.n	8007300 <__sflush_r+0x7c>
 80072f6:	1c42      	adds	r2, r0, #1
 80072f8:	d101      	bne.n	80072fe <__sflush_r+0x7a>
 80072fa:	682b      	ldr	r3, [r5, #0]
 80072fc:	b903      	cbnz	r3, 8007300 <__sflush_r+0x7c>
 80072fe:	6560      	str	r0, [r4, #84]	; 0x54
 8007300:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007302:	602f      	str	r7, [r5, #0]
 8007304:	2900      	cmp	r1, #0
 8007306:	d0ca      	beq.n	800729e <__sflush_r+0x1a>
 8007308:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800730c:	4299      	cmp	r1, r3
 800730e:	d002      	beq.n	8007316 <__sflush_r+0x92>
 8007310:	4628      	mov	r0, r5
 8007312:	f000 f923 	bl	800755c <_free_r>
 8007316:	2000      	movs	r0, #0
 8007318:	6360      	str	r0, [r4, #52]	; 0x34
 800731a:	e7c1      	b.n	80072a0 <__sflush_r+0x1c>
 800731c:	6a21      	ldr	r1, [r4, #32]
 800731e:	2301      	movs	r3, #1
 8007320:	4628      	mov	r0, r5
 8007322:	47b0      	blx	r6
 8007324:	1c41      	adds	r1, r0, #1
 8007326:	d1c7      	bne.n	80072b8 <__sflush_r+0x34>
 8007328:	682b      	ldr	r3, [r5, #0]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d0c4      	beq.n	80072b8 <__sflush_r+0x34>
 800732e:	2b1d      	cmp	r3, #29
 8007330:	d001      	beq.n	8007336 <__sflush_r+0xb2>
 8007332:	2b16      	cmp	r3, #22
 8007334:	d101      	bne.n	800733a <__sflush_r+0xb6>
 8007336:	602f      	str	r7, [r5, #0]
 8007338:	e7b1      	b.n	800729e <__sflush_r+0x1a>
 800733a:	89a3      	ldrh	r3, [r4, #12]
 800733c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007340:	81a3      	strh	r3, [r4, #12]
 8007342:	e7ad      	b.n	80072a0 <__sflush_r+0x1c>
 8007344:	690f      	ldr	r7, [r1, #16]
 8007346:	2f00      	cmp	r7, #0
 8007348:	d0a9      	beq.n	800729e <__sflush_r+0x1a>
 800734a:	0793      	lsls	r3, r2, #30
 800734c:	680e      	ldr	r6, [r1, #0]
 800734e:	bf08      	it	eq
 8007350:	694b      	ldreq	r3, [r1, #20]
 8007352:	600f      	str	r7, [r1, #0]
 8007354:	bf18      	it	ne
 8007356:	2300      	movne	r3, #0
 8007358:	eba6 0807 	sub.w	r8, r6, r7
 800735c:	608b      	str	r3, [r1, #8]
 800735e:	f1b8 0f00 	cmp.w	r8, #0
 8007362:	dd9c      	ble.n	800729e <__sflush_r+0x1a>
 8007364:	6a21      	ldr	r1, [r4, #32]
 8007366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007368:	4643      	mov	r3, r8
 800736a:	463a      	mov	r2, r7
 800736c:	4628      	mov	r0, r5
 800736e:	47b0      	blx	r6
 8007370:	2800      	cmp	r0, #0
 8007372:	dc06      	bgt.n	8007382 <__sflush_r+0xfe>
 8007374:	89a3      	ldrh	r3, [r4, #12]
 8007376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800737a:	81a3      	strh	r3, [r4, #12]
 800737c:	f04f 30ff 	mov.w	r0, #4294967295
 8007380:	e78e      	b.n	80072a0 <__sflush_r+0x1c>
 8007382:	4407      	add	r7, r0
 8007384:	eba8 0800 	sub.w	r8, r8, r0
 8007388:	e7e9      	b.n	800735e <__sflush_r+0xda>
 800738a:	bf00      	nop
 800738c:	20400001 	.word	0x20400001

08007390 <_fflush_r>:
 8007390:	b538      	push	{r3, r4, r5, lr}
 8007392:	690b      	ldr	r3, [r1, #16]
 8007394:	4605      	mov	r5, r0
 8007396:	460c      	mov	r4, r1
 8007398:	b913      	cbnz	r3, 80073a0 <_fflush_r+0x10>
 800739a:	2500      	movs	r5, #0
 800739c:	4628      	mov	r0, r5
 800739e:	bd38      	pop	{r3, r4, r5, pc}
 80073a0:	b118      	cbz	r0, 80073aa <_fflush_r+0x1a>
 80073a2:	6983      	ldr	r3, [r0, #24]
 80073a4:	b90b      	cbnz	r3, 80073aa <_fflush_r+0x1a>
 80073a6:	f7ff f8f3 	bl	8006590 <__sinit>
 80073aa:	4b14      	ldr	r3, [pc, #80]	; (80073fc <_fflush_r+0x6c>)
 80073ac:	429c      	cmp	r4, r3
 80073ae:	d11b      	bne.n	80073e8 <_fflush_r+0x58>
 80073b0:	686c      	ldr	r4, [r5, #4]
 80073b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d0ef      	beq.n	800739a <_fflush_r+0xa>
 80073ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073bc:	07d0      	lsls	r0, r2, #31
 80073be:	d404      	bmi.n	80073ca <_fflush_r+0x3a>
 80073c0:	0599      	lsls	r1, r3, #22
 80073c2:	d402      	bmi.n	80073ca <_fflush_r+0x3a>
 80073c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073c6:	f7ff f981 	bl	80066cc <__retarget_lock_acquire_recursive>
 80073ca:	4628      	mov	r0, r5
 80073cc:	4621      	mov	r1, r4
 80073ce:	f7ff ff59 	bl	8007284 <__sflush_r>
 80073d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80073d4:	07da      	lsls	r2, r3, #31
 80073d6:	4605      	mov	r5, r0
 80073d8:	d4e0      	bmi.n	800739c <_fflush_r+0xc>
 80073da:	89a3      	ldrh	r3, [r4, #12]
 80073dc:	059b      	lsls	r3, r3, #22
 80073de:	d4dd      	bmi.n	800739c <_fflush_r+0xc>
 80073e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073e2:	f7ff f974 	bl	80066ce <__retarget_lock_release_recursive>
 80073e6:	e7d9      	b.n	800739c <_fflush_r+0xc>
 80073e8:	4b05      	ldr	r3, [pc, #20]	; (8007400 <_fflush_r+0x70>)
 80073ea:	429c      	cmp	r4, r3
 80073ec:	d101      	bne.n	80073f2 <_fflush_r+0x62>
 80073ee:	68ac      	ldr	r4, [r5, #8]
 80073f0:	e7df      	b.n	80073b2 <_fflush_r+0x22>
 80073f2:	4b04      	ldr	r3, [pc, #16]	; (8007404 <_fflush_r+0x74>)
 80073f4:	429c      	cmp	r4, r3
 80073f6:	bf08      	it	eq
 80073f8:	68ec      	ldreq	r4, [r5, #12]
 80073fa:	e7da      	b.n	80073b2 <_fflush_r+0x22>
 80073fc:	08007748 	.word	0x08007748
 8007400:	08007768 	.word	0x08007768
 8007404:	08007728 	.word	0x08007728

08007408 <_lseek_r>:
 8007408:	b538      	push	{r3, r4, r5, lr}
 800740a:	4d07      	ldr	r5, [pc, #28]	; (8007428 <_lseek_r+0x20>)
 800740c:	4604      	mov	r4, r0
 800740e:	4608      	mov	r0, r1
 8007410:	4611      	mov	r1, r2
 8007412:	2200      	movs	r2, #0
 8007414:	602a      	str	r2, [r5, #0]
 8007416:	461a      	mov	r2, r3
 8007418:	f7f9 fdee 	bl	8000ff8 <_lseek>
 800741c:	1c43      	adds	r3, r0, #1
 800741e:	d102      	bne.n	8007426 <_lseek_r+0x1e>
 8007420:	682b      	ldr	r3, [r5, #0]
 8007422:	b103      	cbz	r3, 8007426 <_lseek_r+0x1e>
 8007424:	6023      	str	r3, [r4, #0]
 8007426:	bd38      	pop	{r3, r4, r5, pc}
 8007428:	20000400 	.word	0x20000400

0800742c <__swhatbuf_r>:
 800742c:	b570      	push	{r4, r5, r6, lr}
 800742e:	460e      	mov	r6, r1
 8007430:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007434:	2900      	cmp	r1, #0
 8007436:	b096      	sub	sp, #88	; 0x58
 8007438:	4614      	mov	r4, r2
 800743a:	461d      	mov	r5, r3
 800743c:	da07      	bge.n	800744e <__swhatbuf_r+0x22>
 800743e:	2300      	movs	r3, #0
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	89b3      	ldrh	r3, [r6, #12]
 8007444:	061a      	lsls	r2, r3, #24
 8007446:	d410      	bmi.n	800746a <__swhatbuf_r+0x3e>
 8007448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800744c:	e00e      	b.n	800746c <__swhatbuf_r+0x40>
 800744e:	466a      	mov	r2, sp
 8007450:	f000 f90c 	bl	800766c <_fstat_r>
 8007454:	2800      	cmp	r0, #0
 8007456:	dbf2      	blt.n	800743e <__swhatbuf_r+0x12>
 8007458:	9a01      	ldr	r2, [sp, #4]
 800745a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800745e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007462:	425a      	negs	r2, r3
 8007464:	415a      	adcs	r2, r3
 8007466:	602a      	str	r2, [r5, #0]
 8007468:	e7ee      	b.n	8007448 <__swhatbuf_r+0x1c>
 800746a:	2340      	movs	r3, #64	; 0x40
 800746c:	2000      	movs	r0, #0
 800746e:	6023      	str	r3, [r4, #0]
 8007470:	b016      	add	sp, #88	; 0x58
 8007472:	bd70      	pop	{r4, r5, r6, pc}

08007474 <__smakebuf_r>:
 8007474:	898b      	ldrh	r3, [r1, #12]
 8007476:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007478:	079d      	lsls	r5, r3, #30
 800747a:	4606      	mov	r6, r0
 800747c:	460c      	mov	r4, r1
 800747e:	d507      	bpl.n	8007490 <__smakebuf_r+0x1c>
 8007480:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007484:	6023      	str	r3, [r4, #0]
 8007486:	6123      	str	r3, [r4, #16]
 8007488:	2301      	movs	r3, #1
 800748a:	6163      	str	r3, [r4, #20]
 800748c:	b002      	add	sp, #8
 800748e:	bd70      	pop	{r4, r5, r6, pc}
 8007490:	ab01      	add	r3, sp, #4
 8007492:	466a      	mov	r2, sp
 8007494:	f7ff ffca 	bl	800742c <__swhatbuf_r>
 8007498:	9900      	ldr	r1, [sp, #0]
 800749a:	4605      	mov	r5, r0
 800749c:	4630      	mov	r0, r6
 800749e:	f7ff f917 	bl	80066d0 <_malloc_r>
 80074a2:	b948      	cbnz	r0, 80074b8 <__smakebuf_r+0x44>
 80074a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80074a8:	059a      	lsls	r2, r3, #22
 80074aa:	d4ef      	bmi.n	800748c <__smakebuf_r+0x18>
 80074ac:	f023 0303 	bic.w	r3, r3, #3
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	81a3      	strh	r3, [r4, #12]
 80074b6:	e7e3      	b.n	8007480 <__smakebuf_r+0xc>
 80074b8:	4b0d      	ldr	r3, [pc, #52]	; (80074f0 <__smakebuf_r+0x7c>)
 80074ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80074bc:	89a3      	ldrh	r3, [r4, #12]
 80074be:	6020      	str	r0, [r4, #0]
 80074c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80074c4:	81a3      	strh	r3, [r4, #12]
 80074c6:	9b00      	ldr	r3, [sp, #0]
 80074c8:	6163      	str	r3, [r4, #20]
 80074ca:	9b01      	ldr	r3, [sp, #4]
 80074cc:	6120      	str	r0, [r4, #16]
 80074ce:	b15b      	cbz	r3, 80074e8 <__smakebuf_r+0x74>
 80074d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074d4:	4630      	mov	r0, r6
 80074d6:	f000 f8db 	bl	8007690 <_isatty_r>
 80074da:	b128      	cbz	r0, 80074e8 <__smakebuf_r+0x74>
 80074dc:	89a3      	ldrh	r3, [r4, #12]
 80074de:	f023 0303 	bic.w	r3, r3, #3
 80074e2:	f043 0301 	orr.w	r3, r3, #1
 80074e6:	81a3      	strh	r3, [r4, #12]
 80074e8:	89a0      	ldrh	r0, [r4, #12]
 80074ea:	4305      	orrs	r5, r0
 80074ec:	81a5      	strh	r5, [r4, #12]
 80074ee:	e7cd      	b.n	800748c <__smakebuf_r+0x18>
 80074f0:	08006529 	.word	0x08006529

080074f4 <memcpy>:
 80074f4:	440a      	add	r2, r1
 80074f6:	4291      	cmp	r1, r2
 80074f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80074fc:	d100      	bne.n	8007500 <memcpy+0xc>
 80074fe:	4770      	bx	lr
 8007500:	b510      	push	{r4, lr}
 8007502:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007506:	f803 4f01 	strb.w	r4, [r3, #1]!
 800750a:	4291      	cmp	r1, r2
 800750c:	d1f9      	bne.n	8007502 <memcpy+0xe>
 800750e:	bd10      	pop	{r4, pc}

08007510 <memmove>:
 8007510:	4288      	cmp	r0, r1
 8007512:	b510      	push	{r4, lr}
 8007514:	eb01 0402 	add.w	r4, r1, r2
 8007518:	d902      	bls.n	8007520 <memmove+0x10>
 800751a:	4284      	cmp	r4, r0
 800751c:	4623      	mov	r3, r4
 800751e:	d807      	bhi.n	8007530 <memmove+0x20>
 8007520:	1e43      	subs	r3, r0, #1
 8007522:	42a1      	cmp	r1, r4
 8007524:	d008      	beq.n	8007538 <memmove+0x28>
 8007526:	f811 2b01 	ldrb.w	r2, [r1], #1
 800752a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800752e:	e7f8      	b.n	8007522 <memmove+0x12>
 8007530:	4402      	add	r2, r0
 8007532:	4601      	mov	r1, r0
 8007534:	428a      	cmp	r2, r1
 8007536:	d100      	bne.n	800753a <memmove+0x2a>
 8007538:	bd10      	pop	{r4, pc}
 800753a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800753e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007542:	e7f7      	b.n	8007534 <memmove+0x24>

08007544 <__malloc_lock>:
 8007544:	4801      	ldr	r0, [pc, #4]	; (800754c <__malloc_lock+0x8>)
 8007546:	f7ff b8c1 	b.w	80066cc <__retarget_lock_acquire_recursive>
 800754a:	bf00      	nop
 800754c:	200003f8 	.word	0x200003f8

08007550 <__malloc_unlock>:
 8007550:	4801      	ldr	r0, [pc, #4]	; (8007558 <__malloc_unlock+0x8>)
 8007552:	f7ff b8bc 	b.w	80066ce <__retarget_lock_release_recursive>
 8007556:	bf00      	nop
 8007558:	200003f8 	.word	0x200003f8

0800755c <_free_r>:
 800755c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800755e:	2900      	cmp	r1, #0
 8007560:	d048      	beq.n	80075f4 <_free_r+0x98>
 8007562:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007566:	9001      	str	r0, [sp, #4]
 8007568:	2b00      	cmp	r3, #0
 800756a:	f1a1 0404 	sub.w	r4, r1, #4
 800756e:	bfb8      	it	lt
 8007570:	18e4      	addlt	r4, r4, r3
 8007572:	f7ff ffe7 	bl	8007544 <__malloc_lock>
 8007576:	4a20      	ldr	r2, [pc, #128]	; (80075f8 <_free_r+0x9c>)
 8007578:	9801      	ldr	r0, [sp, #4]
 800757a:	6813      	ldr	r3, [r2, #0]
 800757c:	4615      	mov	r5, r2
 800757e:	b933      	cbnz	r3, 800758e <_free_r+0x32>
 8007580:	6063      	str	r3, [r4, #4]
 8007582:	6014      	str	r4, [r2, #0]
 8007584:	b003      	add	sp, #12
 8007586:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800758a:	f7ff bfe1 	b.w	8007550 <__malloc_unlock>
 800758e:	42a3      	cmp	r3, r4
 8007590:	d90b      	bls.n	80075aa <_free_r+0x4e>
 8007592:	6821      	ldr	r1, [r4, #0]
 8007594:	1862      	adds	r2, r4, r1
 8007596:	4293      	cmp	r3, r2
 8007598:	bf04      	itt	eq
 800759a:	681a      	ldreq	r2, [r3, #0]
 800759c:	685b      	ldreq	r3, [r3, #4]
 800759e:	6063      	str	r3, [r4, #4]
 80075a0:	bf04      	itt	eq
 80075a2:	1852      	addeq	r2, r2, r1
 80075a4:	6022      	streq	r2, [r4, #0]
 80075a6:	602c      	str	r4, [r5, #0]
 80075a8:	e7ec      	b.n	8007584 <_free_r+0x28>
 80075aa:	461a      	mov	r2, r3
 80075ac:	685b      	ldr	r3, [r3, #4]
 80075ae:	b10b      	cbz	r3, 80075b4 <_free_r+0x58>
 80075b0:	42a3      	cmp	r3, r4
 80075b2:	d9fa      	bls.n	80075aa <_free_r+0x4e>
 80075b4:	6811      	ldr	r1, [r2, #0]
 80075b6:	1855      	adds	r5, r2, r1
 80075b8:	42a5      	cmp	r5, r4
 80075ba:	d10b      	bne.n	80075d4 <_free_r+0x78>
 80075bc:	6824      	ldr	r4, [r4, #0]
 80075be:	4421      	add	r1, r4
 80075c0:	1854      	adds	r4, r2, r1
 80075c2:	42a3      	cmp	r3, r4
 80075c4:	6011      	str	r1, [r2, #0]
 80075c6:	d1dd      	bne.n	8007584 <_free_r+0x28>
 80075c8:	681c      	ldr	r4, [r3, #0]
 80075ca:	685b      	ldr	r3, [r3, #4]
 80075cc:	6053      	str	r3, [r2, #4]
 80075ce:	4421      	add	r1, r4
 80075d0:	6011      	str	r1, [r2, #0]
 80075d2:	e7d7      	b.n	8007584 <_free_r+0x28>
 80075d4:	d902      	bls.n	80075dc <_free_r+0x80>
 80075d6:	230c      	movs	r3, #12
 80075d8:	6003      	str	r3, [r0, #0]
 80075da:	e7d3      	b.n	8007584 <_free_r+0x28>
 80075dc:	6825      	ldr	r5, [r4, #0]
 80075de:	1961      	adds	r1, r4, r5
 80075e0:	428b      	cmp	r3, r1
 80075e2:	bf04      	itt	eq
 80075e4:	6819      	ldreq	r1, [r3, #0]
 80075e6:	685b      	ldreq	r3, [r3, #4]
 80075e8:	6063      	str	r3, [r4, #4]
 80075ea:	bf04      	itt	eq
 80075ec:	1949      	addeq	r1, r1, r5
 80075ee:	6021      	streq	r1, [r4, #0]
 80075f0:	6054      	str	r4, [r2, #4]
 80075f2:	e7c7      	b.n	8007584 <_free_r+0x28>
 80075f4:	b003      	add	sp, #12
 80075f6:	bd30      	pop	{r4, r5, pc}
 80075f8:	20000090 	.word	0x20000090

080075fc <_realloc_r>:
 80075fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075fe:	4607      	mov	r7, r0
 8007600:	4614      	mov	r4, r2
 8007602:	460e      	mov	r6, r1
 8007604:	b921      	cbnz	r1, 8007610 <_realloc_r+0x14>
 8007606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800760a:	4611      	mov	r1, r2
 800760c:	f7ff b860 	b.w	80066d0 <_malloc_r>
 8007610:	b922      	cbnz	r2, 800761c <_realloc_r+0x20>
 8007612:	f7ff ffa3 	bl	800755c <_free_r>
 8007616:	4625      	mov	r5, r4
 8007618:	4628      	mov	r0, r5
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	f000 f848 	bl	80076b0 <_malloc_usable_size_r>
 8007620:	42a0      	cmp	r0, r4
 8007622:	d20f      	bcs.n	8007644 <_realloc_r+0x48>
 8007624:	4621      	mov	r1, r4
 8007626:	4638      	mov	r0, r7
 8007628:	f7ff f852 	bl	80066d0 <_malloc_r>
 800762c:	4605      	mov	r5, r0
 800762e:	2800      	cmp	r0, #0
 8007630:	d0f2      	beq.n	8007618 <_realloc_r+0x1c>
 8007632:	4631      	mov	r1, r6
 8007634:	4622      	mov	r2, r4
 8007636:	f7ff ff5d 	bl	80074f4 <memcpy>
 800763a:	4631      	mov	r1, r6
 800763c:	4638      	mov	r0, r7
 800763e:	f7ff ff8d 	bl	800755c <_free_r>
 8007642:	e7e9      	b.n	8007618 <_realloc_r+0x1c>
 8007644:	4635      	mov	r5, r6
 8007646:	e7e7      	b.n	8007618 <_realloc_r+0x1c>

08007648 <_read_r>:
 8007648:	b538      	push	{r3, r4, r5, lr}
 800764a:	4d07      	ldr	r5, [pc, #28]	; (8007668 <_read_r+0x20>)
 800764c:	4604      	mov	r4, r0
 800764e:	4608      	mov	r0, r1
 8007650:	4611      	mov	r1, r2
 8007652:	2200      	movs	r2, #0
 8007654:	602a      	str	r2, [r5, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	f7f9 fc8a 	bl	8000f70 <_read>
 800765c:	1c43      	adds	r3, r0, #1
 800765e:	d102      	bne.n	8007666 <_read_r+0x1e>
 8007660:	682b      	ldr	r3, [r5, #0]
 8007662:	b103      	cbz	r3, 8007666 <_read_r+0x1e>
 8007664:	6023      	str	r3, [r4, #0]
 8007666:	bd38      	pop	{r3, r4, r5, pc}
 8007668:	20000400 	.word	0x20000400

0800766c <_fstat_r>:
 800766c:	b538      	push	{r3, r4, r5, lr}
 800766e:	4d07      	ldr	r5, [pc, #28]	; (800768c <_fstat_r+0x20>)
 8007670:	2300      	movs	r3, #0
 8007672:	4604      	mov	r4, r0
 8007674:	4608      	mov	r0, r1
 8007676:	4611      	mov	r1, r2
 8007678:	602b      	str	r3, [r5, #0]
 800767a:	f7f9 fca2 	bl	8000fc2 <_fstat>
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	d102      	bne.n	8007688 <_fstat_r+0x1c>
 8007682:	682b      	ldr	r3, [r5, #0]
 8007684:	b103      	cbz	r3, 8007688 <_fstat_r+0x1c>
 8007686:	6023      	str	r3, [r4, #0]
 8007688:	bd38      	pop	{r3, r4, r5, pc}
 800768a:	bf00      	nop
 800768c:	20000400 	.word	0x20000400

08007690 <_isatty_r>:
 8007690:	b538      	push	{r3, r4, r5, lr}
 8007692:	4d06      	ldr	r5, [pc, #24]	; (80076ac <_isatty_r+0x1c>)
 8007694:	2300      	movs	r3, #0
 8007696:	4604      	mov	r4, r0
 8007698:	4608      	mov	r0, r1
 800769a:	602b      	str	r3, [r5, #0]
 800769c:	f7f9 fca1 	bl	8000fe2 <_isatty>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_isatty_r+0x1a>
 80076a4:	682b      	ldr	r3, [r5, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_isatty_r+0x1a>
 80076a8:	6023      	str	r3, [r4, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000400 	.word	0x20000400

080076b0 <_malloc_usable_size_r>:
 80076b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b4:	1f18      	subs	r0, r3, #4
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bfbc      	itt	lt
 80076ba:	580b      	ldrlt	r3, [r1, r0]
 80076bc:	18c0      	addlt	r0, r0, r3
 80076be:	4770      	bx	lr

080076c0 <_init>:
 80076c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076c2:	bf00      	nop
 80076c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c6:	bc08      	pop	{r3}
 80076c8:	469e      	mov	lr, r3
 80076ca:	4770      	bx	lr

080076cc <_fini>:
 80076cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ce:	bf00      	nop
 80076d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076d2:	bc08      	pop	{r3}
 80076d4:	469e      	mov	lr, r3
 80076d6:	4770      	bx	lr
