
2-1_UART_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eac  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002058  08002058  00012058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002070  08002070  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002070  08002070  00012070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002078  08002078  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002078  08002078  00012078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800207c  0800207c  0001207c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000064  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000070  20000070  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000092e0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016fd  00000000  00000000  0002931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000006a8  00000000  00000000  0002aa20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000610  00000000  00000000  0002b0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022b27  00000000  00000000  0002b6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008d13  00000000  00000000  0004e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d16ec  00000000  00000000  00056f12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001285fe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001954  00000000  00000000  00128654  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002040 	.word	0x08002040

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002040 	.word	0x08002040

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b088      	sub	sp, #32
 80004e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004ea:	f107 030c 	add.w	r3, r7, #12
 80004ee:	2200      	movs	r2, #0
 80004f0:	601a      	str	r2, [r3, #0]
 80004f2:	605a      	str	r2, [r3, #4]
 80004f4:	609a      	str	r2, [r3, #8]
 80004f6:	60da      	str	r2, [r3, #12]
 80004f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80004fa:	2300      	movs	r3, #0
 80004fc:	60bb      	str	r3, [r7, #8]
 80004fe:	4b20      	ldr	r3, [pc, #128]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	4a1f      	ldr	r2, [pc, #124]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000508:	6313      	str	r3, [r2, #48]	; 0x30
 800050a:	4b1d      	ldr	r3, [pc, #116]	; (8000580 <MX_GPIO_Init+0x9c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	60bb      	str	r3, [r7, #8]
 8000514:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000516:	2300      	movs	r3, #0
 8000518:	607b      	str	r3, [r7, #4]
 800051a:	4b19      	ldr	r3, [pc, #100]	; (8000580 <MX_GPIO_Init+0x9c>)
 800051c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051e:	4a18      	ldr	r2, [pc, #96]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000520:	f043 0302 	orr.w	r3, r3, #2
 8000524:	6313      	str	r3, [r2, #48]	; 0x30
 8000526:	4b16      	ldr	r3, [pc, #88]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	f003 0302 	and.w	r3, r3, #2
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
 8000536:	4b12      	ldr	r3, [pc, #72]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	4a11      	ldr	r2, [pc, #68]	; (8000580 <MX_GPIO_Init+0x9c>)
 800053c:	f043 0308 	orr.w	r3, r3, #8
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
 8000542:	4b0f      	ldr	r3, [pc, #60]	; (8000580 <MX_GPIO_Init+0x9c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	f003 0308 	and.w	r3, r3, #8
 800054a:	603b      	str	r3, [r7, #0]
 800054c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800054e:	2200      	movs	r2, #0
 8000550:	f244 0181 	movw	r1, #16513	; 0x4081
 8000554:	480b      	ldr	r0, [pc, #44]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000556:	f000 fcb1 	bl	8000ebc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800055a:	f244 0381 	movw	r3, #16513	; 0x4081
 800055e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000560:	2301      	movs	r3, #1
 8000562:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000568:	2300      	movs	r3, #0
 800056a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800056c:	f107 030c 	add.w	r3, r7, #12
 8000570:	4619      	mov	r1, r3
 8000572:	4804      	ldr	r0, [pc, #16]	; (8000584 <MX_GPIO_Init+0xa0>)
 8000574:	f000 faf6 	bl	8000b64 <HAL_GPIO_Init>

}
 8000578:	bf00      	nop
 800057a:	3720      	adds	r7, #32
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	40023800 	.word	0x40023800
 8000584:	40020400 	.word	0x40020400

08000588 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058e:	f000 f991 	bl	80008b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000592:	f000 f819 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000596:	f7ff ffa5 	bl	80004e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800059a:	f000 f8ef 	bl	800077c <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t a = 'a';
 800059e:	2361      	movs	r3, #97	; 0x61
 80005a0:	71fb      	strb	r3, [r7, #7]
	  //HAL_UART_Transmit(&huart3, str, 16, 1000);
	  //HAL_Delay(500);
	  //HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
	  //HAL_Delay(500);

	  if(HAL_UART_Receive(&huart3, &a, 1, 10) == HAL_OK)
 80005a2:	1df9      	adds	r1, r7, #7
 80005a4:	230a      	movs	r3, #10
 80005a6:	2201      	movs	r2, #1
 80005a8:	4806      	ldr	r0, [pc, #24]	; (80005c4 <main+0x3c>)
 80005aa:	f001 fa44 	bl	8001a36 <HAL_UART_Receive>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d1f6      	bne.n	80005a2 <main+0x1a>
	  {
		  HAL_UART_Transmit(&huart3, &a, 1, 10);
 80005b4:	1df9      	adds	r1, r7, #7
 80005b6:	230a      	movs	r3, #10
 80005b8:	2201      	movs	r2, #1
 80005ba:	4802      	ldr	r0, [pc, #8]	; (80005c4 <main+0x3c>)
 80005bc:	f001 f9a9 	bl	8001912 <HAL_UART_Transmit>
	  if(HAL_UART_Receive(&huart3, &a, 1, 10) == HAL_OK)
 80005c0:	e7ef      	b.n	80005a2 <main+0x1a>
 80005c2:	bf00      	nop
 80005c4:	20000028 	.word	0x20000028

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fd2a 	bl	8002030 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b2b      	ldr	r3, [pc, #172]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a2a      	ldr	r2, [pc, #168]	; (80006a0 <SystemClock_Config+0xd8>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b28      	ldr	r3, [pc, #160]	; (80006a0 <SystemClock_Config+0xd8>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b25      	ldr	r3, [pc, #148]	; (80006a4 <SystemClock_Config+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a24      	ldr	r2, [pc, #144]	; (80006a4 <SystemClock_Config+0xdc>)
 8000612:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b22      	ldr	r3, [pc, #136]	; (80006a4 <SystemClock_Config+0xdc>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000628:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800062c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062e:	2302      	movs	r3, #2
 8000630:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000632:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000636:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000638:	2304      	movs	r3, #4
 800063a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 800063c:	23b4      	movs	r3, #180	; 0xb4
 800063e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000644:	2304      	movs	r3, #4
 8000646:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 0320 	add.w	r3, r7, #32
 800064c:	4618      	mov	r0, r3
 800064e:	f000 fc9f 	bl	8000f90 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000658:	f000 f826 	bl	80006a8 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800065c:	f000 fc48 	bl	8000ef0 <HAL_PWREx_EnableOverDrive>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000666:	f000 f81f 	bl	80006a8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800066a:	230f      	movs	r3, #15
 800066c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800066e:	2302      	movs	r3, #2
 8000670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000676:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800067a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800067c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000680:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2105      	movs	r1, #5
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fef9 	bl	8001480 <HAL_RCC_ClockConfig>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000694:	f000 f808 	bl	80006a8 <Error_Handler>
  }
}
 8000698:	bf00      	nop
 800069a:	3750      	adds	r7, #80	; 0x50
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	40023800 	.word	0x40023800
 80006a4:	40007000 	.word	0x40007000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b083      	sub	sp, #12
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	4b10      	ldr	r3, [pc, #64]	; (8000700 <HAL_MspInit+0x4c>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	4a0f      	ldr	r2, [pc, #60]	; (8000700 <HAL_MspInit+0x4c>)
 80006c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ca:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <HAL_MspInit+0x4c>)
 80006cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d2:	607b      	str	r3, [r7, #4]
 80006d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d6:	2300      	movs	r3, #0
 80006d8:	603b      	str	r3, [r7, #0]
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <HAL_MspInit+0x4c>)
 80006dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006de:	4a08      	ldr	r2, [pc, #32]	; (8000700 <HAL_MspInit+0x4c>)
 80006e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e4:	6413      	str	r3, [r2, #64]	; 0x40
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <HAL_MspInit+0x4c>)
 80006e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ee:	603b      	str	r3, [r7, #0]
 80006f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	40023800 	.word	0x40023800

08000704 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <NMI_Handler+0x4>

0800070a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <HardFault_Handler+0x4>

08000710 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000714:	e7fe      	b.n	8000714 <MemManage_Handler+0x4>

08000716 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000716:	b480      	push	{r7}
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800071a:	e7fe      	b.n	800071a <BusFault_Handler+0x4>

0800071c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000720:	e7fe      	b.n	8000720 <UsageFault_Handler+0x4>

08000722 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000722:	b480      	push	{r7}
 8000724:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	46bd      	mov	sp, r7
 800072a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072e:	4770      	bx	lr

08000730 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr

0800073e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr

0800074c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000750:	f000 f902 	bl	8000958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}

08000758 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000780:	4b11      	ldr	r3, [pc, #68]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	; (80007cc <MX_USART3_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000786:	4b10      	ldr	r3, [pc, #64]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000788:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800078c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	; (80007c8 <MX_USART3_UART_Init+0x4c>)
 80007b4:	f001 f860 	bl	8001878 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f7ff ff73 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000028 	.word	0x20000028
 80007cc:	40004800 	.word	0x40004800

080007d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08a      	sub	sp, #40	; 0x28
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4a19      	ldr	r2, [pc, #100]	; (8000854 <HAL_UART_MspInit+0x84>)
 80007ee:	4293      	cmp	r3, r2
 80007f0:	d12c      	bne.n	800084c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b18      	ldr	r3, [pc, #96]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a17      	ldr	r2, [pc, #92]	; (8000858 <HAL_UART_MspInit+0x88>)
 80007fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b15      	ldr	r3, [pc, #84]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b11      	ldr	r3, [pc, #68]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a10      	ldr	r2, [pc, #64]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000818:	f043 0308 	orr.w	r3, r3, #8
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <HAL_UART_MspInit+0x88>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0308 	and.w	r3, r3, #8
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800082a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000830:	2302      	movs	r3, #2
 8000832:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000838:	2303      	movs	r3, #3
 800083a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800083c:	2307      	movs	r3, #7
 800083e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4805      	ldr	r0, [pc, #20]	; (800085c <HAL_UART_MspInit+0x8c>)
 8000848:	f000 f98c 	bl	8000b64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800084c:	bf00      	nop
 800084e:	3728      	adds	r7, #40	; 0x28
 8000850:	46bd      	mov	sp, r7
 8000852:	bd80      	pop	{r7, pc}
 8000854:	40004800 	.word	0x40004800
 8000858:	40023800 	.word	0x40023800
 800085c:	40020c00 	.word	0x40020c00

08000860 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000860:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000898 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000866:	490e      	ldr	r1, [pc, #56]	; (80008a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000868:	4a0e      	ldr	r2, [pc, #56]	; (80008a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800086c:	e002      	b.n	8000874 <LoopCopyDataInit>

0800086e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800086e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000870:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000872:	3304      	adds	r3, #4

08000874 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000874:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000876:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000878:	d3f9      	bcc.n	800086e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800087a:	4a0b      	ldr	r2, [pc, #44]	; (80008a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800087c:	4c0b      	ldr	r4, [pc, #44]	; (80008ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800087e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000880:	e001      	b.n	8000886 <LoopFillZerobss>

08000882 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000882:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000884:	3204      	adds	r2, #4

08000886 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000886:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000888:	d3fb      	bcc.n	8000882 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800088a:	f7ff ff65 	bl	8000758 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800088e:	f001 fbab 	bl	8001fe8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000892:	f7ff fe79 	bl	8000588 <main>
  bx  lr    
 8000896:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000898:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800089c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008a0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008a4:	08002080 	.word	0x08002080
  ldr r2, =_sbss
 80008a8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008ac:	20000070 	.word	0x20000070

080008b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008b0:	e7fe      	b.n	80008b0 <ADC_IRQHandler>
	...

080008b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008b8:	4b0e      	ldr	r3, [pc, #56]	; (80008f4 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <HAL_Init+0x40>)
 80008be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008c4:	4b0b      	ldr	r3, [pc, #44]	; (80008f4 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	; (80008f4 <HAL_Init+0x40>)
 80008ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008d0:	4b08      	ldr	r3, [pc, #32]	; (80008f4 <HAL_Init+0x40>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <HAL_Init+0x40>)
 80008d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008dc:	2003      	movs	r0, #3
 80008de:	f000 f90d 	bl	8000afc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008e2:	200f      	movs	r0, #15
 80008e4:	f000 f808 	bl	80008f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008e8:	f7ff fee4 	bl	80006b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008ec:	2300      	movs	r3, #0
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	40023c00 	.word	0x40023c00

080008f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000900:	4b12      	ldr	r3, [pc, #72]	; (800094c <HAL_InitTick+0x54>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <HAL_InitTick+0x58>)
 8000906:	781b      	ldrb	r3, [r3, #0]
 8000908:	4619      	mov	r1, r3
 800090a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800090e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000912:	fbb2 f3f3 	udiv	r3, r2, r3
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f917 	bl	8000b4a <HAL_SYSTICK_Config>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	e00e      	b.n	8000944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	2b0f      	cmp	r3, #15
 800092a:	d80a      	bhi.n	8000942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800092c:	2200      	movs	r2, #0
 800092e:	6879      	ldr	r1, [r7, #4]
 8000930:	f04f 30ff 	mov.w	r0, #4294967295
 8000934:	f000 f8ed 	bl	8000b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000938:	4a06      	ldr	r2, [pc, #24]	; (8000954 <HAL_InitTick+0x5c>)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800093e:	2300      	movs	r3, #0
 8000940:	e000      	b.n	8000944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000942:	2301      	movs	r3, #1
}
 8000944:	4618      	mov	r0, r3
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	20000000 	.word	0x20000000
 8000950:	20000008 	.word	0x20000008
 8000954:	20000004 	.word	0x20000004

08000958 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x20>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	461a      	mov	r2, r3
 8000962:	4b06      	ldr	r3, [pc, #24]	; (800097c <HAL_IncTick+0x24>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4413      	add	r3, r2
 8000968:	4a04      	ldr	r2, [pc, #16]	; (800097c <HAL_IncTick+0x24>)
 800096a:	6013      	str	r3, [r2, #0]
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008
 800097c:	2000006c 	.word	0x2000006c

08000980 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  return uwTick;
 8000984:	4b03      	ldr	r3, [pc, #12]	; (8000994 <HAL_GetTick+0x14>)
 8000986:	681b      	ldr	r3, [r3, #0]
}
 8000988:	4618      	mov	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	2000006c 	.word	0x2000006c

08000998 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f003 0307 	and.w	r3, r3, #7
 80009a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009a8:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009aa:	68db      	ldr	r3, [r3, #12]
 80009ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009ae:	68ba      	ldr	r2, [r7, #8]
 80009b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009b4:	4013      	ands	r3, r2
 80009b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009bc:	68bb      	ldr	r3, [r7, #8]
 80009be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ca:	4a04      	ldr	r2, [pc, #16]	; (80009dc <__NVIC_SetPriorityGrouping+0x44>)
 80009cc:	68bb      	ldr	r3, [r7, #8]
 80009ce:	60d3      	str	r3, [r2, #12]
}
 80009d0:	bf00      	nop
 80009d2:	3714      	adds	r7, #20
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009e4:	4b04      	ldr	r3, [pc, #16]	; (80009f8 <__NVIC_GetPriorityGrouping+0x18>)
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	0a1b      	lsrs	r3, r3, #8
 80009ea:	f003 0307 	and.w	r3, r3, #7
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	4603      	mov	r3, r0
 8000a04:	6039      	str	r1, [r7, #0]
 8000a06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	db0a      	blt.n	8000a26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	b2da      	uxtb	r2, r3
 8000a14:	490c      	ldr	r1, [pc, #48]	; (8000a48 <__NVIC_SetPriority+0x4c>)
 8000a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a1a:	0112      	lsls	r2, r2, #4
 8000a1c:	b2d2      	uxtb	r2, r2
 8000a1e:	440b      	add	r3, r1
 8000a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a24:	e00a      	b.n	8000a3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4908      	ldr	r1, [pc, #32]	; (8000a4c <__NVIC_SetPriority+0x50>)
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	f003 030f 	and.w	r3, r3, #15
 8000a32:	3b04      	subs	r3, #4
 8000a34:	0112      	lsls	r2, r2, #4
 8000a36:	b2d2      	uxtb	r2, r2
 8000a38:	440b      	add	r3, r1
 8000a3a:	761a      	strb	r2, [r3, #24]
}
 8000a3c:	bf00      	nop
 8000a3e:	370c      	adds	r7, #12
 8000a40:	46bd      	mov	sp, r7
 8000a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a46:	4770      	bx	lr
 8000a48:	e000e100 	.word	0xe000e100
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b089      	sub	sp, #36	; 0x24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a64:	69fb      	ldr	r3, [r7, #28]
 8000a66:	f1c3 0307 	rsb	r3, r3, #7
 8000a6a:	2b04      	cmp	r3, #4
 8000a6c:	bf28      	it	cs
 8000a6e:	2304      	movcs	r3, #4
 8000a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a72:	69fb      	ldr	r3, [r7, #28]
 8000a74:	3304      	adds	r3, #4
 8000a76:	2b06      	cmp	r3, #6
 8000a78:	d902      	bls.n	8000a80 <NVIC_EncodePriority+0x30>
 8000a7a:	69fb      	ldr	r3, [r7, #28]
 8000a7c:	3b03      	subs	r3, #3
 8000a7e:	e000      	b.n	8000a82 <NVIC_EncodePriority+0x32>
 8000a80:	2300      	movs	r3, #0
 8000a82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	69bb      	ldr	r3, [r7, #24]
 8000a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8e:	43da      	mvns	r2, r3
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	401a      	ands	r2, r3
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa2:	43d9      	mvns	r1, r3
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa8:	4313      	orrs	r3, r2
         );
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3724      	adds	r7, #36	; 0x24
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
	...

08000ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ac8:	d301      	bcc.n	8000ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aca:	2301      	movs	r3, #1
 8000acc:	e00f      	b.n	8000aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <SysTick_Config+0x40>)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ad6:	210f      	movs	r1, #15
 8000ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8000adc:	f7ff ff8e 	bl	80009fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <SysTick_Config+0x40>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ae6:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <SysTick_Config+0x40>)
 8000ae8:	2207      	movs	r2, #7
 8000aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000aec:	2300      	movs	r3, #0
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	3708      	adds	r7, #8
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	e000e010 	.word	0xe000e010

08000afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b04:	6878      	ldr	r0, [r7, #4]
 8000b06:	f7ff ff47 	bl	8000998 <__NVIC_SetPriorityGrouping>
}
 8000b0a:	bf00      	nop
 8000b0c:	3708      	adds	r7, #8
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}

08000b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b12:	b580      	push	{r7, lr}
 8000b14:	b086      	sub	sp, #24
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	4603      	mov	r3, r0
 8000b1a:	60b9      	str	r1, [r7, #8]
 8000b1c:	607a      	str	r2, [r7, #4]
 8000b1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b20:	2300      	movs	r3, #0
 8000b22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b24:	f7ff ff5c 	bl	80009e0 <__NVIC_GetPriorityGrouping>
 8000b28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68b9      	ldr	r1, [r7, #8]
 8000b2e:	6978      	ldr	r0, [r7, #20]
 8000b30:	f7ff ff8e 	bl	8000a50 <NVIC_EncodePriority>
 8000b34:	4602      	mov	r2, r0
 8000b36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f7ff ff5d 	bl	80009fc <__NVIC_SetPriority>
}
 8000b42:	bf00      	nop
 8000b44:	3718      	adds	r7, #24
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}

08000b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b4a:	b580      	push	{r7, lr}
 8000b4c:	b082      	sub	sp, #8
 8000b4e:	af00      	add	r7, sp, #0
 8000b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b52:	6878      	ldr	r0, [r7, #4]
 8000b54:	f7ff ffb0 	bl	8000ab8 <SysTick_Config>
 8000b58:	4603      	mov	r3, r0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
	...

08000b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b72:	2300      	movs	r3, #0
 8000b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	61fb      	str	r3, [r7, #28]
 8000b7e:	e177      	b.n	8000e70 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b80:	2201      	movs	r2, #1
 8000b82:	69fb      	ldr	r3, [r7, #28]
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	697a      	ldr	r2, [r7, #20]
 8000b90:	4013      	ands	r3, r2
 8000b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b94:	693a      	ldr	r2, [r7, #16]
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	429a      	cmp	r2, r3
 8000b9a:	f040 8166 	bne.w	8000e6a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	685b      	ldr	r3, [r3, #4]
 8000ba2:	f003 0303 	and.w	r3, r3, #3
 8000ba6:	2b01      	cmp	r3, #1
 8000ba8:	d005      	beq.n	8000bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bb2:	2b02      	cmp	r3, #2
 8000bb4:	d130      	bne.n	8000c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	689b      	ldr	r3, [r3, #8]
 8000bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bbc:	69fb      	ldr	r3, [r7, #28]
 8000bbe:	005b      	lsls	r3, r3, #1
 8000bc0:	2203      	movs	r2, #3
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	43db      	mvns	r3, r3
 8000bc8:	69ba      	ldr	r2, [r7, #24]
 8000bca:	4013      	ands	r3, r2
 8000bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000bce:	683b      	ldr	r3, [r7, #0]
 8000bd0:	68da      	ldr	r2, [r3, #12]
 8000bd2:	69fb      	ldr	r3, [r7, #28]
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bda:	69ba      	ldr	r2, [r7, #24]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	69ba      	ldr	r2, [r7, #24]
 8000be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bec:	2201      	movs	r2, #1
 8000bee:	69fb      	ldr	r3, [r7, #28]
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	091b      	lsrs	r3, r3, #4
 8000c02:	f003 0201 	and.w	r2, r3, #1
 8000c06:	69fb      	ldr	r3, [r7, #28]
 8000c08:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0c:	69ba      	ldr	r2, [r7, #24]
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	69ba      	ldr	r2, [r7, #24]
 8000c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f003 0303 	and.w	r3, r3, #3
 8000c20:	2b03      	cmp	r3, #3
 8000c22:	d017      	beq.n	8000c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	68db      	ldr	r3, [r3, #12]
 8000c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	005b      	lsls	r3, r3, #1
 8000c2e:	2203      	movs	r2, #3
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	43db      	mvns	r3, r3
 8000c36:	69ba      	ldr	r2, [r7, #24]
 8000c38:	4013      	ands	r3, r2
 8000c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	689a      	ldr	r2, [r3, #8]
 8000c40:	69fb      	ldr	r3, [r7, #28]
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d123      	bne.n	8000ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	08da      	lsrs	r2, r3, #3
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3208      	adds	r2, #8
 8000c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	f003 0307 	and.w	r3, r3, #7
 8000c74:	009b      	lsls	r3, r3, #2
 8000c76:	220f      	movs	r2, #15
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	43db      	mvns	r3, r3
 8000c7e:	69ba      	ldr	r2, [r7, #24]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	691a      	ldr	r2, [r3, #16]
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	f003 0307 	and.w	r3, r3, #7
 8000c8e:	009b      	lsls	r3, r3, #2
 8000c90:	fa02 f303 	lsl.w	r3, r2, r3
 8000c94:	69ba      	ldr	r2, [r7, #24]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	08da      	lsrs	r2, r3, #3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3208      	adds	r2, #8
 8000ca2:	69b9      	ldr	r1, [r7, #24]
 8000ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cae:	69fb      	ldr	r3, [r7, #28]
 8000cb0:	005b      	lsls	r3, r3, #1
 8000cb2:	2203      	movs	r2, #3
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	f003 0203 	and.w	r2, r3, #3
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	005b      	lsls	r3, r3, #1
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	f000 80c0 	beq.w	8000e6a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b66      	ldr	r3, [pc, #408]	; (8000e88 <HAL_GPIO_Init+0x324>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	4a65      	ldr	r2, [pc, #404]	; (8000e88 <HAL_GPIO_Init+0x324>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cfa:	4b63      	ldr	r3, [pc, #396]	; (8000e88 <HAL_GPIO_Init+0x324>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d06:	4a61      	ldr	r2, [pc, #388]	; (8000e8c <HAL_GPIO_Init+0x328>)
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	089b      	lsrs	r3, r3, #2
 8000d0c:	3302      	adds	r3, #2
 8000d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	f003 0303 	and.w	r3, r3, #3
 8000d1a:	009b      	lsls	r3, r3, #2
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4013      	ands	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4a58      	ldr	r2, [pc, #352]	; (8000e90 <HAL_GPIO_Init+0x32c>)
 8000d2e:	4293      	cmp	r3, r2
 8000d30:	d037      	beq.n	8000da2 <HAL_GPIO_Init+0x23e>
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	4a57      	ldr	r2, [pc, #348]	; (8000e94 <HAL_GPIO_Init+0x330>)
 8000d36:	4293      	cmp	r3, r2
 8000d38:	d031      	beq.n	8000d9e <HAL_GPIO_Init+0x23a>
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	4a56      	ldr	r2, [pc, #344]	; (8000e98 <HAL_GPIO_Init+0x334>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d02b      	beq.n	8000d9a <HAL_GPIO_Init+0x236>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	4a55      	ldr	r2, [pc, #340]	; (8000e9c <HAL_GPIO_Init+0x338>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d025      	beq.n	8000d96 <HAL_GPIO_Init+0x232>
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4a54      	ldr	r2, [pc, #336]	; (8000ea0 <HAL_GPIO_Init+0x33c>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d01f      	beq.n	8000d92 <HAL_GPIO_Init+0x22e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	4a53      	ldr	r2, [pc, #332]	; (8000ea4 <HAL_GPIO_Init+0x340>)
 8000d56:	4293      	cmp	r3, r2
 8000d58:	d019      	beq.n	8000d8e <HAL_GPIO_Init+0x22a>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a52      	ldr	r2, [pc, #328]	; (8000ea8 <HAL_GPIO_Init+0x344>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d013      	beq.n	8000d8a <HAL_GPIO_Init+0x226>
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	4a51      	ldr	r2, [pc, #324]	; (8000eac <HAL_GPIO_Init+0x348>)
 8000d66:	4293      	cmp	r3, r2
 8000d68:	d00d      	beq.n	8000d86 <HAL_GPIO_Init+0x222>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	4a50      	ldr	r2, [pc, #320]	; (8000eb0 <HAL_GPIO_Init+0x34c>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d007      	beq.n	8000d82 <HAL_GPIO_Init+0x21e>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	4a4f      	ldr	r2, [pc, #316]	; (8000eb4 <HAL_GPIO_Init+0x350>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d101      	bne.n	8000d7e <HAL_GPIO_Init+0x21a>
 8000d7a:	2309      	movs	r3, #9
 8000d7c:	e012      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d7e:	230a      	movs	r3, #10
 8000d80:	e010      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d82:	2308      	movs	r3, #8
 8000d84:	e00e      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d86:	2307      	movs	r3, #7
 8000d88:	e00c      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d8a:	2306      	movs	r3, #6
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d8e:	2305      	movs	r3, #5
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d92:	2304      	movs	r3, #4
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x240>
 8000da2:	2300      	movs	r3, #0
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db4:	4935      	ldr	r1, [pc, #212]	; (8000e8c <HAL_GPIO_Init+0x328>)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000dc2:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000de6:	4a34      	ldr	r2, [pc, #208]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000dec:	4b32      	ldr	r3, [pc, #200]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e10:	4a29      	ldr	r2, [pc, #164]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e16:	4b28      	ldr	r3, [pc, #160]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000e18:	689b      	ldr	r3, [r3, #8]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e3a:	4a1f      	ldr	r2, [pc, #124]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e40:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e64:	4a14      	ldr	r2, [pc, #80]	; (8000eb8 <HAL_GPIO_Init+0x354>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	f67f ae84 	bls.w	8000b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40021400 	.word	0x40021400
 8000ea8:	40021800 	.word	0x40021800
 8000eac:	40021c00 	.word	0x40021c00
 8000eb0:	40022000 	.word	0x40022000
 8000eb4:	40022400 	.word	0x40022400
 8000eb8:	40013c00 	.word	0x40013c00

08000ebc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	807b      	strh	r3, [r7, #2]
 8000ec8:	4613      	mov	r3, r2
 8000eca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ecc:	787b      	ldrb	r3, [r7, #1]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d003      	beq.n	8000eda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000ed2:	887a      	ldrh	r2, [r7, #2]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000ed8:	e003      	b.n	8000ee2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000eda:	887b      	ldrh	r3, [r7, #2]
 8000edc:	041a      	lsls	r2, r3, #16
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	619a      	str	r2, [r3, #24]
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	603b      	str	r3, [r7, #0]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f08:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <HAL_PWREx_EnableOverDrive+0x90>)
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f12:	603b      	str	r3, [r7, #0]
 8000f14:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000f16:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <HAL_PWREx_EnableOverDrive+0x94>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f1c:	f7ff fd30 	bl	8000980 <HAL_GetTick>
 8000f20:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f22:	e009      	b.n	8000f38 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f24:	f7ff fd2c 	bl	8000980 <HAL_GetTick>
 8000f28:	4602      	mov	r2, r0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	1ad3      	subs	r3, r2, r3
 8000f2e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f32:	d901      	bls.n	8000f38 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000f34:	2303      	movs	r3, #3
 8000f36:	e01f      	b.n	8000f78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f44:	d1ee      	bne.n	8000f24 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000f46:	4b11      	ldr	r3, [pc, #68]	; (8000f8c <HAL_PWREx_EnableOverDrive+0x9c>)
 8000f48:	2201      	movs	r2, #1
 8000f4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f4c:	f7ff fd18 	bl	8000980 <HAL_GetTick>
 8000f50:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f52:	e009      	b.n	8000f68 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000f54:	f7ff fd14 	bl	8000980 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000f62:	d901      	bls.n	8000f68 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e007      	b.n	8000f78 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000f68:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <HAL_PWREx_EnableOverDrive+0x98>)
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f70:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000f74:	d1ee      	bne.n	8000f54 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000f76:	2300      	movs	r3, #0
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40023800 	.word	0x40023800
 8000f84:	420e0040 	.word	0x420e0040
 8000f88:	40007000 	.word	0x40007000
 8000f8c:	420e0044 	.word	0x420e0044

08000f90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d101      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e264      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f003 0301 	and.w	r3, r3, #1
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d075      	beq.n	800109a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	4ba3      	ldr	r3, [pc, #652]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	f003 030c 	and.w	r3, r3, #12
 8000fb6:	2b04      	cmp	r3, #4
 8000fb8:	d00c      	beq.n	8000fd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fba:	4ba0      	ldr	r3, [pc, #640]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fbc:	689b      	ldr	r3, [r3, #8]
 8000fbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fc2:	2b08      	cmp	r3, #8
 8000fc4:	d112      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fc6:	4b9d      	ldr	r3, [pc, #628]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fd2:	d10b      	bne.n	8000fec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fd4:	4b99      	ldr	r3, [pc, #612]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d05b      	beq.n	8001098 <HAL_RCC_OscConfig+0x108>
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	685b      	ldr	r3, [r3, #4]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d157      	bne.n	8001098 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	e23f      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d106      	bne.n	8001004 <HAL_RCC_OscConfig+0x74>
 8000ff6:	4b91      	ldr	r3, [pc, #580]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a90      	ldr	r2, [pc, #576]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8000ffc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001000:	6013      	str	r3, [r2, #0]
 8001002:	e01d      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800100c:	d10c      	bne.n	8001028 <HAL_RCC_OscConfig+0x98>
 800100e:	4b8b      	ldr	r3, [pc, #556]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a8a      	ldr	r2, [pc, #552]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001014:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001018:	6013      	str	r3, [r2, #0]
 800101a:	4b88      	ldr	r3, [pc, #544]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a87      	ldr	r2, [pc, #540]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001020:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001024:	6013      	str	r3, [r2, #0]
 8001026:	e00b      	b.n	8001040 <HAL_RCC_OscConfig+0xb0>
 8001028:	4b84      	ldr	r3, [pc, #528]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	4a83      	ldr	r2, [pc, #524]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800102e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001032:	6013      	str	r3, [r2, #0]
 8001034:	4b81      	ldr	r3, [pc, #516]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a80      	ldr	r2, [pc, #512]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800103a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800103e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	685b      	ldr	r3, [r3, #4]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d013      	beq.n	8001070 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001048:	f7ff fc9a 	bl	8000980 <HAL_GetTick>
 800104c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	e008      	b.n	8001062 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001050:	f7ff fc96 	bl	8000980 <HAL_GetTick>
 8001054:	4602      	mov	r2, r0
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b64      	cmp	r3, #100	; 0x64
 800105c:	d901      	bls.n	8001062 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800105e:	2303      	movs	r3, #3
 8001060:	e204      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001062:	4b76      	ldr	r3, [pc, #472]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d0f0      	beq.n	8001050 <HAL_RCC_OscConfig+0xc0>
 800106e:	e014      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001070:	f7ff fc86 	bl	8000980 <HAL_GetTick>
 8001074:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	e008      	b.n	800108a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001078:	f7ff fc82 	bl	8000980 <HAL_GetTick>
 800107c:	4602      	mov	r2, r0
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	2b64      	cmp	r3, #100	; 0x64
 8001084:	d901      	bls.n	800108a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e1f0      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800108a:	4b6c      	ldr	r3, [pc, #432]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001092:	2b00      	cmp	r3, #0
 8001094:	d1f0      	bne.n	8001078 <HAL_RCC_OscConfig+0xe8>
 8001096:	e000      	b.n	800109a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001098:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d063      	beq.n	800116e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a6:	4b65      	ldr	r3, [pc, #404]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010a8:	689b      	ldr	r3, [r3, #8]
 80010aa:	f003 030c 	and.w	r3, r3, #12
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d00b      	beq.n	80010ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010b2:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010ba:	2b08      	cmp	r3, #8
 80010bc:	d11c      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010be:	4b5f      	ldr	r3, [pc, #380]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d116      	bne.n	80010f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	4b5c      	ldr	r3, [pc, #368]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d005      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d001      	beq.n	80010e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e1c4      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010e2:	4b56      	ldr	r3, [pc, #344]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	691b      	ldr	r3, [r3, #16]
 80010ee:	00db      	lsls	r3, r3, #3
 80010f0:	4952      	ldr	r1, [pc, #328]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80010f2:	4313      	orrs	r3, r2
 80010f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f6:	e03a      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	68db      	ldr	r3, [r3, #12]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d020      	beq.n	8001142 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	4b4f      	ldr	r3, [pc, #316]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001106:	f7ff fc3b 	bl	8000980 <HAL_GetTick>
 800110a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	e008      	b.n	8001120 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800110e:	f7ff fc37 	bl	8000980 <HAL_GetTick>
 8001112:	4602      	mov	r2, r0
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	1ad3      	subs	r3, r2, r3
 8001118:	2b02      	cmp	r3, #2
 800111a:	d901      	bls.n	8001120 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800111c:	2303      	movs	r3, #3
 800111e:	e1a5      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001120:	4b46      	ldr	r3, [pc, #280]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0302 	and.w	r3, r3, #2
 8001128:	2b00      	cmp	r3, #0
 800112a:	d0f0      	beq.n	800110e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800112c:	4b43      	ldr	r3, [pc, #268]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	4940      	ldr	r1, [pc, #256]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800113c:	4313      	orrs	r3, r2
 800113e:	600b      	str	r3, [r1, #0]
 8001140:	e015      	b.n	800116e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001142:	4b3f      	ldr	r3, [pc, #252]	; (8001240 <HAL_RCC_OscConfig+0x2b0>)
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001148:	f7ff fc1a 	bl	8000980 <HAL_GetTick>
 800114c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	e008      	b.n	8001162 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001150:	f7ff fc16 	bl	8000980 <HAL_GetTick>
 8001154:	4602      	mov	r2, r0
 8001156:	693b      	ldr	r3, [r7, #16]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d901      	bls.n	8001162 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e184      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001162:	4b36      	ldr	r3, [pc, #216]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f003 0302 	and.w	r3, r3, #2
 800116a:	2b00      	cmp	r3, #0
 800116c:	d1f0      	bne.n	8001150 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	2b00      	cmp	r3, #0
 8001178:	d030      	beq.n	80011dc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d016      	beq.n	80011b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001182:	4b30      	ldr	r3, [pc, #192]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 8001184:	2201      	movs	r2, #1
 8001186:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001188:	f7ff fbfa 	bl	8000980 <HAL_GetTick>
 800118c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	e008      	b.n	80011a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001190:	f7ff fbf6 	bl	8000980 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	1ad3      	subs	r3, r2, r3
 800119a:	2b02      	cmp	r3, #2
 800119c:	d901      	bls.n	80011a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800119e:	2303      	movs	r3, #3
 80011a0:	e164      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80011a2:	4b26      	ldr	r3, [pc, #152]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d0f0      	beq.n	8001190 <HAL_RCC_OscConfig+0x200>
 80011ae:	e015      	b.n	80011dc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_RCC_OscConfig+0x2b4>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011b6:	f7ff fbe3 	bl	8000980 <HAL_GetTick>
 80011ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011bc:	e008      	b.n	80011d0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011be:	f7ff fbdf 	bl	8000980 <HAL_GetTick>
 80011c2:	4602      	mov	r2, r0
 80011c4:	693b      	ldr	r3, [r7, #16]
 80011c6:	1ad3      	subs	r3, r2, r3
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d901      	bls.n	80011d0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80011cc:	2303      	movs	r3, #3
 80011ce:	e14d      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011d4:	f003 0302 	and.w	r3, r3, #2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1f0      	bne.n	80011be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f003 0304 	and.w	r3, r3, #4
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	f000 80a0 	beq.w	800132a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ea:	2300      	movs	r3, #0
 80011ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 80011f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d10f      	bne.n	800121a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	4b0f      	ldr	r3, [pc, #60]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 8001204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001208:	6413      	str	r3, [r2, #64]	; 0x40
 800120a:	4b0c      	ldr	r3, [pc, #48]	; (800123c <HAL_RCC_OscConfig+0x2ac>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001212:	60bb      	str	r3, [r7, #8]
 8001214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001216:	2301      	movs	r3, #1
 8001218:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800121a:	4b0b      	ldr	r3, [pc, #44]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001222:	2b00      	cmp	r3, #0
 8001224:	d121      	bne.n	800126a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001226:	4b08      	ldr	r3, [pc, #32]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	4a07      	ldr	r2, [pc, #28]	; (8001248 <HAL_RCC_OscConfig+0x2b8>)
 800122c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001232:	f7ff fba5 	bl	8000980 <HAL_GetTick>
 8001236:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001238:	e011      	b.n	800125e <HAL_RCC_OscConfig+0x2ce>
 800123a:	bf00      	nop
 800123c:	40023800 	.word	0x40023800
 8001240:	42470000 	.word	0x42470000
 8001244:	42470e80 	.word	0x42470e80
 8001248:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800124c:	f7ff fb98 	bl	8000980 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e106      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800125e:	4b85      	ldr	r3, [pc, #532]	; (8001474 <HAL_RCC_OscConfig+0x4e4>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	689b      	ldr	r3, [r3, #8]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d106      	bne.n	8001280 <HAL_RCC_OscConfig+0x2f0>
 8001272:	4b81      	ldr	r3, [pc, #516]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001276:	4a80      	ldr	r2, [pc, #512]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001278:	f043 0301 	orr.w	r3, r3, #1
 800127c:	6713      	str	r3, [r2, #112]	; 0x70
 800127e:	e01c      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	2b05      	cmp	r3, #5
 8001286:	d10c      	bne.n	80012a2 <HAL_RCC_OscConfig+0x312>
 8001288:	4b7b      	ldr	r3, [pc, #492]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a7a      	ldr	r2, [pc, #488]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800128e:	f043 0304 	orr.w	r3, r3, #4
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	4b78      	ldr	r3, [pc, #480]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a77      	ldr	r2, [pc, #476]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800129a:	f043 0301 	orr.w	r3, r3, #1
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
 80012a0:	e00b      	b.n	80012ba <HAL_RCC_OscConfig+0x32a>
 80012a2:	4b75      	ldr	r3, [pc, #468]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012a6:	4a74      	ldr	r2, [pc, #464]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	f023 0301 	bic.w	r3, r3, #1
 80012ac:	6713      	str	r3, [r2, #112]	; 0x70
 80012ae:	4b72      	ldr	r3, [pc, #456]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	4a71      	ldr	r2, [pc, #452]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	f023 0304 	bic.w	r3, r3, #4
 80012b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d015      	beq.n	80012ee <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012c2:	f7ff fb5d 	bl	8000980 <HAL_GetTick>
 80012c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c8:	e00a      	b.n	80012e0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012ca:	f7ff fb59 	bl	8000980 <HAL_GetTick>
 80012ce:	4602      	mov	r2, r0
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d8:	4293      	cmp	r3, r2
 80012da:	d901      	bls.n	80012e0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80012dc:	2303      	movs	r3, #3
 80012de:	e0c5      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012e0:	4b65      	ldr	r3, [pc, #404]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80012e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d0ee      	beq.n	80012ca <HAL_RCC_OscConfig+0x33a>
 80012ec:	e014      	b.n	8001318 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fb47 	bl	8000980 <HAL_GetTick>
 80012f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f4:	e00a      	b.n	800130c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012f6:	f7ff fb43 	bl	8000980 <HAL_GetTick>
 80012fa:	4602      	mov	r2, r0
 80012fc:	693b      	ldr	r3, [r7, #16]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f241 3288 	movw	r2, #5000	; 0x1388
 8001304:	4293      	cmp	r3, r2
 8001306:	d901      	bls.n	800130c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001308:	2303      	movs	r3, #3
 800130a:	e0af      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800130c:	4b5a      	ldr	r3, [pc, #360]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800130e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1ee      	bne.n	80012f6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001318:	7dfb      	ldrb	r3, [r7, #23]
 800131a:	2b01      	cmp	r3, #1
 800131c:	d105      	bne.n	800132a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800131e:	4b56      	ldr	r3, [pc, #344]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	4a55      	ldr	r2, [pc, #340]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001324:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001328:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	699b      	ldr	r3, [r3, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	f000 809b 	beq.w	800146a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001334:	4b50      	ldr	r3, [pc, #320]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f003 030c 	and.w	r3, r3, #12
 800133c:	2b08      	cmp	r3, #8
 800133e:	d05c      	beq.n	80013fa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	699b      	ldr	r3, [r3, #24]
 8001344:	2b02      	cmp	r3, #2
 8001346:	d141      	bne.n	80013cc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001348:	4b4c      	ldr	r3, [pc, #304]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800134e:	f7ff fb17 	bl	8000980 <HAL_GetTick>
 8001352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001354:	e008      	b.n	8001368 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001356:	f7ff fb13 	bl	8000980 <HAL_GetTick>
 800135a:	4602      	mov	r2, r0
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d901      	bls.n	8001368 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8001364:	2303      	movs	r3, #3
 8001366:	e081      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001368:	4b43      	ldr	r3, [pc, #268]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001370:	2b00      	cmp	r3, #0
 8001372:	d1f0      	bne.n	8001356 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	431a      	orrs	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001382:	019b      	lsls	r3, r3, #6
 8001384:	431a      	orrs	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	3b01      	subs	r3, #1
 800138e:	041b      	lsls	r3, r3, #16
 8001390:	431a      	orrs	r2, r3
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001396:	061b      	lsls	r3, r3, #24
 8001398:	4937      	ldr	r1, [pc, #220]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 800139a:	4313      	orrs	r3, r2
 800139c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 80013a0:	2201      	movs	r2, #1
 80013a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff faec 	bl	8000980 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fae8 	bl	8000980 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b02      	cmp	r3, #2
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e056      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013be:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d0f0      	beq.n	80013ac <HAL_RCC_OscConfig+0x41c>
 80013ca:	e04e      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013cc:	4b2b      	ldr	r3, [pc, #172]	; (800147c <HAL_RCC_OscConfig+0x4ec>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d2:	f7ff fad5 	bl	8000980 <HAL_GetTick>
 80013d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d8:	e008      	b.n	80013ec <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013da:	f7ff fad1 	bl	8000980 <HAL_GetTick>
 80013de:	4602      	mov	r2, r0
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d901      	bls.n	80013ec <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80013e8:	2303      	movs	r3, #3
 80013ea:	e03f      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ec:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d1f0      	bne.n	80013da <HAL_RCC_OscConfig+0x44a>
 80013f8:	e037      	b.n	800146a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e032      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001406:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_RCC_OscConfig+0x4e8>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	699b      	ldr	r3, [r3, #24]
 8001410:	2b01      	cmp	r3, #1
 8001412:	d028      	beq.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d121      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d11a      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001436:	4013      	ands	r3, r2
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800143c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800143e:	4293      	cmp	r3, r2
 8001440:	d111      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800144c:	085b      	lsrs	r3, r3, #1
 800144e:	3b01      	subs	r3, #1
 8001450:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001452:	429a      	cmp	r2, r3
 8001454:	d107      	bne.n	8001466 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001456:	68fb      	ldr	r3, [r7, #12]
 8001458:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001462:	429a      	cmp	r2, r3
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e000      	b.n	800146c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40007000 	.word	0x40007000
 8001478:	40023800 	.word	0x40023800
 800147c:	42470060 	.word	0x42470060

08001480 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b084      	sub	sp, #16
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d101      	bne.n	8001494 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0cc      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001494:	4b68      	ldr	r3, [pc, #416]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 030f 	and.w	r3, r3, #15
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	429a      	cmp	r2, r3
 80014a0:	d90c      	bls.n	80014bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a2:	4b65      	ldr	r3, [pc, #404]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014a4:	683a      	ldr	r2, [r7, #0]
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014aa:	4b63      	ldr	r3, [pc, #396]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	683a      	ldr	r2, [r7, #0]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d001      	beq.n	80014bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e0b8      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0304 	and.w	r3, r3, #4
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d005      	beq.n	80014e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014d4:	4b59      	ldr	r3, [pc, #356]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	4a58      	ldr	r2, [pc, #352]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0308 	and.w	r3, r3, #8
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d005      	beq.n	80014f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014ec:	4b53      	ldr	r3, [pc, #332]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	4a52      	ldr	r2, [pc, #328]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014f8:	4b50      	ldr	r3, [pc, #320]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	689b      	ldr	r3, [r3, #8]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	494d      	ldr	r1, [pc, #308]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	4313      	orrs	r3, r2
 8001508:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0301 	and.w	r3, r3, #1
 8001512:	2b00      	cmp	r3, #0
 8001514:	d044      	beq.n	80015a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d107      	bne.n	800152e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800151e:	4b47      	ldr	r3, [pc, #284]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001526:	2b00      	cmp	r3, #0
 8001528:	d119      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e07f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b02      	cmp	r3, #2
 8001534:	d003      	beq.n	800153e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800153a:	2b03      	cmp	r3, #3
 800153c:	d107      	bne.n	800154e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800153e:	4b3f      	ldr	r3, [pc, #252]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001546:	2b00      	cmp	r3, #0
 8001548:	d109      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e06f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154e:	4b3b      	ldr	r3, [pc, #236]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e067      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f023 0203 	bic.w	r2, r3, #3
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	4934      	ldr	r1, [pc, #208]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800156c:	4313      	orrs	r3, r2
 800156e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001570:	f7ff fa06 	bl	8000980 <HAL_GetTick>
 8001574:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001576:	e00a      	b.n	800158e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001578:	f7ff fa02 	bl	8000980 <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e04f      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800158e:	4b2b      	ldr	r3, [pc, #172]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001590:	689b      	ldr	r3, [r3, #8]
 8001592:	f003 020c 	and.w	r2, r3, #12
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	429a      	cmp	r2, r3
 800159e:	d1eb      	bne.n	8001578 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80015a0:	4b25      	ldr	r3, [pc, #148]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f003 030f 	and.w	r3, r3, #15
 80015a8:	683a      	ldr	r2, [r7, #0]
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d20c      	bcs.n	80015c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015ae:	4b22      	ldr	r3, [pc, #136]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	683a      	ldr	r2, [r7, #0]
 80015b2:	b2d2      	uxtb	r2, r2
 80015b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015b6:	4b20      	ldr	r3, [pc, #128]	; (8001638 <HAL_RCC_ClockConfig+0x1b8>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 030f 	and.w	r3, r3, #15
 80015be:	683a      	ldr	r2, [r7, #0]
 80015c0:	429a      	cmp	r2, r3
 80015c2:	d001      	beq.n	80015c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e032      	b.n	800162e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0304 	and.w	r3, r3, #4
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d008      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	68db      	ldr	r3, [r3, #12]
 80015e0:	4916      	ldr	r1, [pc, #88]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0308 	and.w	r3, r3, #8
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d009      	beq.n	8001606 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015f2:	4b12      	ldr	r3, [pc, #72]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 80015f4:	689b      	ldr	r3, [r3, #8]
 80015f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	691b      	ldr	r3, [r3, #16]
 80015fe:	00db      	lsls	r3, r3, #3
 8001600:	490e      	ldr	r1, [pc, #56]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 8001602:	4313      	orrs	r3, r2
 8001604:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001606:	f000 f821 	bl	800164c <HAL_RCC_GetSysClockFreq>
 800160a:	4602      	mov	r2, r0
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_RCC_ClockConfig+0x1bc>)
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	091b      	lsrs	r3, r3, #4
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	490a      	ldr	r1, [pc, #40]	; (8001640 <HAL_RCC_ClockConfig+0x1c0>)
 8001618:	5ccb      	ldrb	r3, [r1, r3]
 800161a:	fa22 f303 	lsr.w	r3, r2, r3
 800161e:	4a09      	ldr	r2, [pc, #36]	; (8001644 <HAL_RCC_ClockConfig+0x1c4>)
 8001620:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001622:	4b09      	ldr	r3, [pc, #36]	; (8001648 <HAL_RCC_ClockConfig+0x1c8>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4618      	mov	r0, r3
 8001628:	f7ff f966 	bl	80008f8 <HAL_InitTick>

  return HAL_OK;
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40023c00 	.word	0x40023c00
 800163c:	40023800 	.word	0x40023800
 8001640:	08002058 	.word	0x08002058
 8001644:	20000000 	.word	0x20000000
 8001648:	20000004 	.word	0x20000004

0800164c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800164c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001650:	b084      	sub	sp, #16
 8001652:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	2300      	movs	r3, #0
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	2300      	movs	r3, #0
 800165e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001660:	2300      	movs	r3, #0
 8001662:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001664:	4b67      	ldr	r3, [pc, #412]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f003 030c 	and.w	r3, r3, #12
 800166c:	2b08      	cmp	r3, #8
 800166e:	d00d      	beq.n	800168c <HAL_RCC_GetSysClockFreq+0x40>
 8001670:	2b08      	cmp	r3, #8
 8001672:	f200 80bd 	bhi.w	80017f0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001676:	2b00      	cmp	r3, #0
 8001678:	d002      	beq.n	8001680 <HAL_RCC_GetSysClockFreq+0x34>
 800167a:	2b04      	cmp	r3, #4
 800167c:	d003      	beq.n	8001686 <HAL_RCC_GetSysClockFreq+0x3a>
 800167e:	e0b7      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001680:	4b61      	ldr	r3, [pc, #388]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001682:	60bb      	str	r3, [r7, #8]
       break;
 8001684:	e0b7      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001686:	4b61      	ldr	r3, [pc, #388]	; (800180c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001688:	60bb      	str	r3, [r7, #8]
      break;
 800168a:	e0b4      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800168c:	4b5d      	ldr	r3, [pc, #372]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001696:	4b5b      	ldr	r3, [pc, #364]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d04d      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016a2:	4b58      	ldr	r3, [pc, #352]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	099b      	lsrs	r3, r3, #6
 80016a8:	461a      	mov	r2, r3
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	ea02 0800 	and.w	r8, r2, r0
 80016ba:	ea03 0901 	and.w	r9, r3, r1
 80016be:	4640      	mov	r0, r8
 80016c0:	4649      	mov	r1, r9
 80016c2:	f04f 0200 	mov.w	r2, #0
 80016c6:	f04f 0300 	mov.w	r3, #0
 80016ca:	014b      	lsls	r3, r1, #5
 80016cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80016d0:	0142      	lsls	r2, r0, #5
 80016d2:	4610      	mov	r0, r2
 80016d4:	4619      	mov	r1, r3
 80016d6:	ebb0 0008 	subs.w	r0, r0, r8
 80016da:	eb61 0109 	sbc.w	r1, r1, r9
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	018b      	lsls	r3, r1, #6
 80016e8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80016ec:	0182      	lsls	r2, r0, #6
 80016ee:	1a12      	subs	r2, r2, r0
 80016f0:	eb63 0301 	sbc.w	r3, r3, r1
 80016f4:	f04f 0000 	mov.w	r0, #0
 80016f8:	f04f 0100 	mov.w	r1, #0
 80016fc:	00d9      	lsls	r1, r3, #3
 80016fe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001702:	00d0      	lsls	r0, r2, #3
 8001704:	4602      	mov	r2, r0
 8001706:	460b      	mov	r3, r1
 8001708:	eb12 0208 	adds.w	r2, r2, r8
 800170c:	eb43 0309 	adc.w	r3, r3, r9
 8001710:	f04f 0000 	mov.w	r0, #0
 8001714:	f04f 0100 	mov.w	r1, #0
 8001718:	0259      	lsls	r1, r3, #9
 800171a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800171e:	0250      	lsls	r0, r2, #9
 8001720:	4602      	mov	r2, r0
 8001722:	460b      	mov	r3, r1
 8001724:	4610      	mov	r0, r2
 8001726:	4619      	mov	r1, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	461a      	mov	r2, r3
 800172c:	f04f 0300 	mov.w	r3, #0
 8001730:	f7fe fd5c 	bl	80001ec <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	e04a      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173e:	4b31      	ldr	r3, [pc, #196]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	461a      	mov	r2, r3
 8001746:	f04f 0300 	mov.w	r3, #0
 800174a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800174e:	f04f 0100 	mov.w	r1, #0
 8001752:	ea02 0400 	and.w	r4, r2, r0
 8001756:	ea03 0501 	and.w	r5, r3, r1
 800175a:	4620      	mov	r0, r4
 800175c:	4629      	mov	r1, r5
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	f04f 0300 	mov.w	r3, #0
 8001766:	014b      	lsls	r3, r1, #5
 8001768:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800176c:	0142      	lsls	r2, r0, #5
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	1b00      	subs	r0, r0, r4
 8001774:	eb61 0105 	sbc.w	r1, r1, r5
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	018b      	lsls	r3, r1, #6
 8001782:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001786:	0182      	lsls	r2, r0, #6
 8001788:	1a12      	subs	r2, r2, r0
 800178a:	eb63 0301 	sbc.w	r3, r3, r1
 800178e:	f04f 0000 	mov.w	r0, #0
 8001792:	f04f 0100 	mov.w	r1, #0
 8001796:	00d9      	lsls	r1, r3, #3
 8001798:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800179c:	00d0      	lsls	r0, r2, #3
 800179e:	4602      	mov	r2, r0
 80017a0:	460b      	mov	r3, r1
 80017a2:	1912      	adds	r2, r2, r4
 80017a4:	eb45 0303 	adc.w	r3, r5, r3
 80017a8:	f04f 0000 	mov.w	r0, #0
 80017ac:	f04f 0100 	mov.w	r1, #0
 80017b0:	0299      	lsls	r1, r3, #10
 80017b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80017b6:	0290      	lsls	r0, r2, #10
 80017b8:	4602      	mov	r2, r0
 80017ba:	460b      	mov	r3, r1
 80017bc:	4610      	mov	r0, r2
 80017be:	4619      	mov	r1, r3
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	461a      	mov	r2, r3
 80017c4:	f04f 0300 	mov.w	r3, #0
 80017c8:	f7fe fd10 	bl	80001ec <__aeabi_uldivmod>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4613      	mov	r3, r2
 80017d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017d4:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	0c1b      	lsrs	r3, r3, #16
 80017da:	f003 0303 	and.w	r3, r3, #3
 80017de:	3301      	adds	r3, #1
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017e4:	68fa      	ldr	r2, [r7, #12]
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	e002      	b.n	80017f6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017f0:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80017f2:	60bb      	str	r3, [r7, #8]
      break;
 80017f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f6:	68bb      	ldr	r3, [r7, #8]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001802:	bf00      	nop
 8001804:	40023800 	.word	0x40023800
 8001808:	00f42400 	.word	0x00f42400
 800180c:	007a1200 	.word	0x007a1200

08001810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_RCC_GetHCLKFreq+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000000 	.word	0x20000000

08001828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800182c:	f7ff fff0 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001830:	4602      	mov	r2, r0
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	0a9b      	lsrs	r3, r3, #10
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	4903      	ldr	r1, [pc, #12]	; (800184c <HAL_RCC_GetPCLK1Freq+0x24>)
 800183e:	5ccb      	ldrb	r3, [r1, r3]
 8001840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001844:	4618      	mov	r0, r3
 8001846:	bd80      	pop	{r7, pc}
 8001848:	40023800 	.word	0x40023800
 800184c:	08002068 	.word	0x08002068

08001850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001854:	f7ff ffdc 	bl	8001810 <HAL_RCC_GetHCLKFreq>
 8001858:	4602      	mov	r2, r0
 800185a:	4b05      	ldr	r3, [pc, #20]	; (8001870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0b5b      	lsrs	r3, r3, #13
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4903      	ldr	r1, [pc, #12]	; (8001874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001866:	5ccb      	ldrb	r3, [r1, r3]
 8001868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800186c:	4618      	mov	r0, r3
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	08002068 	.word	0x08002068

08001878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e03f      	b.n	800190a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001890:	b2db      	uxtb	r3, r3
 8001892:	2b00      	cmp	r3, #0
 8001894:	d106      	bne.n	80018a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe ff96 	bl	80007d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2224      	movs	r2, #36	; 0x24
 80018a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	68da      	ldr	r2, [r3, #12]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80018ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80018bc:	6878      	ldr	r0, [r7, #4]
 80018be:	f000 f9cb 	bl	8001c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	691a      	ldr	r2, [r3, #16]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80018d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	695a      	ldr	r2, [r3, #20]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80018e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80018f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2220      	movs	r2, #32
 80018fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2220      	movs	r2, #32
 8001904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}

08001912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001912:	b580      	push	{r7, lr}
 8001914:	b08a      	sub	sp, #40	; 0x28
 8001916:	af02      	add	r7, sp, #8
 8001918:	60f8      	str	r0, [r7, #12]
 800191a:	60b9      	str	r1, [r7, #8]
 800191c:	603b      	str	r3, [r7, #0]
 800191e:	4613      	mov	r3, r2
 8001920:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001922:	2300      	movs	r3, #0
 8001924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800192c:	b2db      	uxtb	r3, r3
 800192e:	2b20      	cmp	r3, #32
 8001930:	d17c      	bne.n	8001a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d002      	beq.n	800193e <HAL_UART_Transmit+0x2c>
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d101      	bne.n	8001942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800193e:	2301      	movs	r3, #1
 8001940:	e075      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001948:	2b01      	cmp	r3, #1
 800194a:	d101      	bne.n	8001950 <HAL_UART_Transmit+0x3e>
 800194c:	2302      	movs	r3, #2
 800194e:	e06e      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2201      	movs	r2, #1
 8001954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2200      	movs	r2, #0
 800195c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2221      	movs	r2, #33	; 0x21
 8001962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001966:	f7ff f80b 	bl	8000980 <HAL_GetTick>
 800196a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	88fa      	ldrh	r2, [r7, #6]
 8001970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	88fa      	ldrh	r2, [r7, #6]
 8001976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001980:	d108      	bne.n	8001994 <HAL_UART_Transmit+0x82>
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	691b      	ldr	r3, [r3, #16]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d104      	bne.n	8001994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800198a:	2300      	movs	r3, #0
 800198c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	61bb      	str	r3, [r7, #24]
 8001992:	e003      	b.n	800199c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80019a4:	e02a      	b.n	80019fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	9300      	str	r3, [sp, #0]
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	2200      	movs	r2, #0
 80019ae:	2180      	movs	r1, #128	; 0x80
 80019b0:	68f8      	ldr	r0, [r7, #12]
 80019b2:	f000 f8e2 	bl	8001b7a <UART_WaitOnFlagUntilTimeout>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e036      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10b      	bne.n	80019de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80019c6:	69bb      	ldr	r3, [r7, #24]
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	461a      	mov	r2, r3
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80019d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80019d6:	69bb      	ldr	r3, [r7, #24]
 80019d8:	3302      	adds	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	e007      	b.n	80019ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	781a      	ldrb	r2, [r3, #0]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	3301      	adds	r3, #1
 80019ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80019f2:	b29b      	uxth	r3, r3
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a00:	b29b      	uxth	r3, r3
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1cf      	bne.n	80019a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2140      	movs	r1, #64	; 0x40
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f000 f8b2 	bl	8001b7a <UART_WaitOnFlagUntilTimeout>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e006      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	2220      	movs	r2, #32
 8001a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	e000      	b.n	8001a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001a2c:	2302      	movs	r3, #2
  }
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3720      	adds	r7, #32
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b08a      	sub	sp, #40	; 0x28
 8001a3a:	af02      	add	r7, sp, #8
 8001a3c:	60f8      	str	r0, [r7, #12]
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	603b      	str	r3, [r7, #0]
 8001a42:	4613      	mov	r3, r2
 8001a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001a50:	b2db      	uxtb	r3, r3
 8001a52:	2b20      	cmp	r3, #32
 8001a54:	f040 808c 	bne.w	8001b70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001a58:	68bb      	ldr	r3, [r7, #8]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d002      	beq.n	8001a64 <HAL_UART_Receive+0x2e>
 8001a5e:	88fb      	ldrh	r3, [r7, #6]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d101      	bne.n	8001a68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001a64:	2301      	movs	r3, #1
 8001a66:	e084      	b.n	8001b72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a6e:	2b01      	cmp	r3, #1
 8001a70:	d101      	bne.n	8001a76 <HAL_UART_Receive+0x40>
 8001a72:	2302      	movs	r3, #2
 8001a74:	e07d      	b.n	8001b72 <HAL_UART_Receive+0x13c>
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2200      	movs	r2, #0
 8001a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2222      	movs	r2, #34	; 0x22
 8001a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001a92:	f7fe ff75 	bl	8000980 <HAL_GetTick>
 8001a96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	88fa      	ldrh	r2, [r7, #6]
 8001a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	88fa      	ldrh	r2, [r7, #6]
 8001aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001aac:	d108      	bne.n	8001ac0 <HAL_UART_Receive+0x8a>
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	691b      	ldr	r3, [r3, #16]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d104      	bne.n	8001ac0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	e003      	b.n	8001ac8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001ad0:	e043      	b.n	8001b5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	9300      	str	r3, [sp, #0]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	2120      	movs	r1, #32
 8001adc:	68f8      	ldr	r0, [r7, #12]
 8001ade:	f000 f84c 	bl	8001b7a <UART_WaitOnFlagUntilTimeout>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8001ae8:	2303      	movs	r3, #3
 8001aea:	e042      	b.n	8001b72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d10c      	bne.n	8001b0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001afe:	b29a      	uxth	r2, r3
 8001b00:	69bb      	ldr	r3, [r7, #24]
 8001b02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b04:	69bb      	ldr	r3, [r7, #24]
 8001b06:	3302      	adds	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
 8001b0a:	e01f      	b.n	8001b4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	689b      	ldr	r3, [r3, #8]
 8001b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b14:	d007      	beq.n	8001b26 <HAL_UART_Receive+0xf0>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d10a      	bne.n	8001b34 <HAL_UART_Receive+0xfe>
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	691b      	ldr	r3, [r3, #16]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d106      	bne.n	8001b34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e008      	b.n	8001b46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	69fb      	ldr	r3, [r7, #28]
 8001b44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b50:	b29b      	uxth	r3, r3
 8001b52:	3b01      	subs	r3, #1
 8001b54:	b29a      	uxth	r2, r3
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001b5e:	b29b      	uxth	r3, r3
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d1b6      	bne.n	8001ad2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2220      	movs	r2, #32
 8001b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	e000      	b.n	8001b72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8001b70:	2302      	movs	r3, #2
  }
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}

08001b7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001b7a:	b580      	push	{r7, lr}
 8001b7c:	b090      	sub	sp, #64	; 0x40
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	60f8      	str	r0, [r7, #12]
 8001b82:	60b9      	str	r1, [r7, #8]
 8001b84:	603b      	str	r3, [r7, #0]
 8001b86:	4613      	mov	r3, r2
 8001b88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001b8a:	e050      	b.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b92:	d04c      	beq.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <UART_WaitOnFlagUntilTimeout+0x30>
 8001b9a:	f7fe fef1 	bl	8000980 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d241      	bcs.n	8001c2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	330c      	adds	r3, #12
 8001bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bb4:	e853 3f00 	ldrex	r3, [r3]
 8001bb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001bc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	330c      	adds	r3, #12
 8001bc8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001bca:	637a      	str	r2, [r7, #52]	; 0x34
 8001bcc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001bce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001bd0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001bd2:	e841 2300 	strex	r3, r2, [r1]
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d1e5      	bne.n	8001baa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	3314      	adds	r3, #20
 8001be4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	e853 3f00 	ldrex	r3, [r3]
 8001bec:	613b      	str	r3, [r7, #16]
   return(result);
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	f023 0301 	bic.w	r3, r3, #1
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	3314      	adds	r3, #20
 8001bfc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001bfe:	623a      	str	r2, [r7, #32]
 8001c00:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001c02:	69f9      	ldr	r1, [r7, #28]
 8001c04:	6a3a      	ldr	r2, [r7, #32]
 8001c06:	e841 2300 	strex	r3, r2, [r1]
 8001c0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1e5      	bne.n	8001bde <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	2220      	movs	r2, #32
 8001c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	2220      	movs	r2, #32
 8001c1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e00f      	b.n	8001c4e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	4013      	ands	r3, r2
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	bf0c      	ite	eq
 8001c3e:	2301      	moveq	r3, #1
 8001c40:	2300      	movne	r3, #0
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	461a      	mov	r2, r3
 8001c46:	79fb      	ldrb	r3, [r7, #7]
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d09f      	beq.n	8001b8c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3740      	adds	r7, #64	; 0x40
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c5c:	b09f      	sub	sp, #124	; 0x7c
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001c62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001c6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c6e:	68d9      	ldr	r1, [r3, #12]
 8001c70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	ea40 0301 	orr.w	r3, r0, r1
 8001c78:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001c7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c7c:	689a      	ldr	r2, [r3, #8]
 8001c7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	431a      	orrs	r2, r3
 8001c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c8c:	69db      	ldr	r3, [r3, #28]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8001c92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001c9c:	f021 010c 	bic.w	r1, r1, #12
 8001ca0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ca6:	430b      	orrs	r3, r1
 8001ca8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	695b      	ldr	r3, [r3, #20]
 8001cb0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cb6:	6999      	ldr	r1, [r3, #24]
 8001cb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	ea40 0301 	orr.w	r3, r0, r1
 8001cc0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001cc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	4bc5      	ldr	r3, [pc, #788]	; (8001fdc <UART_SetConfig+0x384>)
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d004      	beq.n	8001cd6 <UART_SetConfig+0x7e>
 8001ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4bc3      	ldr	r3, [pc, #780]	; (8001fe0 <UART_SetConfig+0x388>)
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d103      	bne.n	8001cde <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001cd6:	f7ff fdbb 	bl	8001850 <HAL_RCC_GetPCLK2Freq>
 8001cda:	6778      	str	r0, [r7, #116]	; 0x74
 8001cdc:	e002      	b.n	8001ce4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001cde:	f7ff fda3 	bl	8001828 <HAL_RCC_GetPCLK1Freq>
 8001ce2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001ce4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001ce6:	69db      	ldr	r3, [r3, #28]
 8001ce8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001cec:	f040 80b6 	bne.w	8001e5c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001cf0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001cf2:	461c      	mov	r4, r3
 8001cf4:	f04f 0500 	mov.w	r5, #0
 8001cf8:	4622      	mov	r2, r4
 8001cfa:	462b      	mov	r3, r5
 8001cfc:	1891      	adds	r1, r2, r2
 8001cfe:	6439      	str	r1, [r7, #64]	; 0x40
 8001d00:	415b      	adcs	r3, r3
 8001d02:	647b      	str	r3, [r7, #68]	; 0x44
 8001d04:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d08:	1912      	adds	r2, r2, r4
 8001d0a:	eb45 0303 	adc.w	r3, r5, r3
 8001d0e:	f04f 0000 	mov.w	r0, #0
 8001d12:	f04f 0100 	mov.w	r1, #0
 8001d16:	00d9      	lsls	r1, r3, #3
 8001d18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d1c:	00d0      	lsls	r0, r2, #3
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	1911      	adds	r1, r2, r4
 8001d24:	6639      	str	r1, [r7, #96]	; 0x60
 8001d26:	416b      	adcs	r3, r5
 8001d28:	667b      	str	r3, [r7, #100]	; 0x64
 8001d2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	461a      	mov	r2, r3
 8001d30:	f04f 0300 	mov.w	r3, #0
 8001d34:	1891      	adds	r1, r2, r2
 8001d36:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d38:	415b      	adcs	r3, r3
 8001d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d40:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8001d44:	f7fe fa52 	bl	80001ec <__aeabi_uldivmod>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	460b      	mov	r3, r1
 8001d4c:	4ba5      	ldr	r3, [pc, #660]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001d4e:	fba3 2302 	umull	r2, r3, r3, r2
 8001d52:	095b      	lsrs	r3, r3, #5
 8001d54:	011e      	lsls	r6, r3, #4
 8001d56:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001d58:	461c      	mov	r4, r3
 8001d5a:	f04f 0500 	mov.w	r5, #0
 8001d5e:	4622      	mov	r2, r4
 8001d60:	462b      	mov	r3, r5
 8001d62:	1891      	adds	r1, r2, r2
 8001d64:	6339      	str	r1, [r7, #48]	; 0x30
 8001d66:	415b      	adcs	r3, r3
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
 8001d6a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001d6e:	1912      	adds	r2, r2, r4
 8001d70:	eb45 0303 	adc.w	r3, r5, r3
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	f04f 0100 	mov.w	r1, #0
 8001d7c:	00d9      	lsls	r1, r3, #3
 8001d7e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001d82:	00d0      	lsls	r0, r2, #3
 8001d84:	4602      	mov	r2, r0
 8001d86:	460b      	mov	r3, r1
 8001d88:	1911      	adds	r1, r2, r4
 8001d8a:	65b9      	str	r1, [r7, #88]	; 0x58
 8001d8c:	416b      	adcs	r3, r5
 8001d8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	461a      	mov	r2, r3
 8001d96:	f04f 0300 	mov.w	r3, #0
 8001d9a:	1891      	adds	r1, r2, r2
 8001d9c:	62b9      	str	r1, [r7, #40]	; 0x28
 8001d9e:	415b      	adcs	r3, r3
 8001da0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001da2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001da6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8001daa:	f7fe fa1f 	bl	80001ec <__aeabi_uldivmod>
 8001dae:	4602      	mov	r2, r0
 8001db0:	460b      	mov	r3, r1
 8001db2:	4b8c      	ldr	r3, [pc, #560]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001db4:	fba3 1302 	umull	r1, r3, r3, r2
 8001db8:	095b      	lsrs	r3, r3, #5
 8001dba:	2164      	movs	r1, #100	; 0x64
 8001dbc:	fb01 f303 	mul.w	r3, r1, r3
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	00db      	lsls	r3, r3, #3
 8001dc4:	3332      	adds	r3, #50	; 0x32
 8001dc6:	4a87      	ldr	r2, [pc, #540]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001dc8:	fba2 2303 	umull	r2, r3, r2, r3
 8001dcc:	095b      	lsrs	r3, r3, #5
 8001dce:	005b      	lsls	r3, r3, #1
 8001dd0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001dd4:	441e      	add	r6, r3
 8001dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f04f 0100 	mov.w	r1, #0
 8001dde:	4602      	mov	r2, r0
 8001de0:	460b      	mov	r3, r1
 8001de2:	1894      	adds	r4, r2, r2
 8001de4:	623c      	str	r4, [r7, #32]
 8001de6:	415b      	adcs	r3, r3
 8001de8:	627b      	str	r3, [r7, #36]	; 0x24
 8001dea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001dee:	1812      	adds	r2, r2, r0
 8001df0:	eb41 0303 	adc.w	r3, r1, r3
 8001df4:	f04f 0400 	mov.w	r4, #0
 8001df8:	f04f 0500 	mov.w	r5, #0
 8001dfc:	00dd      	lsls	r5, r3, #3
 8001dfe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001e02:	00d4      	lsls	r4, r2, #3
 8001e04:	4622      	mov	r2, r4
 8001e06:	462b      	mov	r3, r5
 8001e08:	1814      	adds	r4, r2, r0
 8001e0a:	653c      	str	r4, [r7, #80]	; 0x50
 8001e0c:	414b      	adcs	r3, r1
 8001e0e:	657b      	str	r3, [r7, #84]	; 0x54
 8001e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	461a      	mov	r2, r3
 8001e16:	f04f 0300 	mov.w	r3, #0
 8001e1a:	1891      	adds	r1, r2, r2
 8001e1c:	61b9      	str	r1, [r7, #24]
 8001e1e:	415b      	adcs	r3, r3
 8001e20:	61fb      	str	r3, [r7, #28]
 8001e22:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e26:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8001e2a:	f7fe f9df 	bl	80001ec <__aeabi_uldivmod>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4b6c      	ldr	r3, [pc, #432]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001e34:	fba3 1302 	umull	r1, r3, r3, r2
 8001e38:	095b      	lsrs	r3, r3, #5
 8001e3a:	2164      	movs	r1, #100	; 0x64
 8001e3c:	fb01 f303 	mul.w	r3, r1, r3
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	3332      	adds	r3, #50	; 0x32
 8001e46:	4a67      	ldr	r2, [pc, #412]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001e48:	fba2 2303 	umull	r2, r3, r2, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4432      	add	r2, r6
 8001e58:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e5a:	e0b9      	b.n	8001fd0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e5c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e5e:	461c      	mov	r4, r3
 8001e60:	f04f 0500 	mov.w	r5, #0
 8001e64:	4622      	mov	r2, r4
 8001e66:	462b      	mov	r3, r5
 8001e68:	1891      	adds	r1, r2, r2
 8001e6a:	6139      	str	r1, [r7, #16]
 8001e6c:	415b      	adcs	r3, r3
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e74:	1912      	adds	r2, r2, r4
 8001e76:	eb45 0303 	adc.w	r3, r5, r3
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	00d9      	lsls	r1, r3, #3
 8001e84:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e88:	00d0      	lsls	r0, r2, #3
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	460b      	mov	r3, r1
 8001e8e:	eb12 0804 	adds.w	r8, r2, r4
 8001e92:	eb43 0905 	adc.w	r9, r3, r5
 8001e96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f04f 0100 	mov.w	r1, #0
 8001ea0:	f04f 0200 	mov.w	r2, #0
 8001ea4:	f04f 0300 	mov.w	r3, #0
 8001ea8:	008b      	lsls	r3, r1, #2
 8001eaa:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001eae:	0082      	lsls	r2, r0, #2
 8001eb0:	4640      	mov	r0, r8
 8001eb2:	4649      	mov	r1, r9
 8001eb4:	f7fe f99a 	bl	80001ec <__aeabi_uldivmod>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4b49      	ldr	r3, [pc, #292]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001ebe:	fba3 2302 	umull	r2, r3, r3, r2
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	011e      	lsls	r6, r3, #4
 8001ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f04f 0100 	mov.w	r1, #0
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	1894      	adds	r4, r2, r2
 8001ed4:	60bc      	str	r4, [r7, #8]
 8001ed6:	415b      	adcs	r3, r3
 8001ed8:	60fb      	str	r3, [r7, #12]
 8001eda:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ede:	1812      	adds	r2, r2, r0
 8001ee0:	eb41 0303 	adc.w	r3, r1, r3
 8001ee4:	f04f 0400 	mov.w	r4, #0
 8001ee8:	f04f 0500 	mov.w	r5, #0
 8001eec:	00dd      	lsls	r5, r3, #3
 8001eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001ef2:	00d4      	lsls	r4, r2, #3
 8001ef4:	4622      	mov	r2, r4
 8001ef6:	462b      	mov	r3, r5
 8001ef8:	1814      	adds	r4, r2, r0
 8001efa:	64bc      	str	r4, [r7, #72]	; 0x48
 8001efc:	414b      	adcs	r3, r1
 8001efe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f04f 0100 	mov.w	r1, #0
 8001f0a:	f04f 0200 	mov.w	r2, #0
 8001f0e:	f04f 0300 	mov.w	r3, #0
 8001f12:	008b      	lsls	r3, r1, #2
 8001f14:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f18:	0082      	lsls	r2, r0, #2
 8001f1a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8001f1e:	f7fe f965 	bl	80001ec <__aeabi_uldivmod>
 8001f22:	4602      	mov	r2, r0
 8001f24:	460b      	mov	r3, r1
 8001f26:	4b2f      	ldr	r3, [pc, #188]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001f28:	fba3 1302 	umull	r1, r3, r3, r2
 8001f2c:	095b      	lsrs	r3, r3, #5
 8001f2e:	2164      	movs	r1, #100	; 0x64
 8001f30:	fb01 f303 	mul.w	r3, r1, r3
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	3332      	adds	r3, #50	; 0x32
 8001f3a:	4a2a      	ldr	r2, [pc, #168]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f40:	095b      	lsrs	r3, r3, #5
 8001f42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f46:	441e      	add	r6, r3
 8001f48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f04f 0100 	mov.w	r1, #0
 8001f50:	4602      	mov	r2, r0
 8001f52:	460b      	mov	r3, r1
 8001f54:	1894      	adds	r4, r2, r2
 8001f56:	603c      	str	r4, [r7, #0]
 8001f58:	415b      	adcs	r3, r3
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001f60:	1812      	adds	r2, r2, r0
 8001f62:	eb41 0303 	adc.w	r3, r1, r3
 8001f66:	f04f 0400 	mov.w	r4, #0
 8001f6a:	f04f 0500 	mov.w	r5, #0
 8001f6e:	00dd      	lsls	r5, r3, #3
 8001f70:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8001f74:	00d4      	lsls	r4, r2, #3
 8001f76:	4622      	mov	r2, r4
 8001f78:	462b      	mov	r3, r5
 8001f7a:	eb12 0a00 	adds.w	sl, r2, r0
 8001f7e:	eb43 0b01 	adc.w	fp, r3, r1
 8001f82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	4618      	mov	r0, r3
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	008b      	lsls	r3, r1, #2
 8001f96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8001f9a:	0082      	lsls	r2, r0, #2
 8001f9c:	4650      	mov	r0, sl
 8001f9e:	4659      	mov	r1, fp
 8001fa0:	f7fe f924 	bl	80001ec <__aeabi_uldivmod>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	4b0e      	ldr	r3, [pc, #56]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001faa:	fba3 1302 	umull	r1, r3, r3, r2
 8001fae:	095b      	lsrs	r3, r3, #5
 8001fb0:	2164      	movs	r1, #100	; 0x64
 8001fb2:	fb01 f303 	mul.w	r3, r1, r3
 8001fb6:	1ad3      	subs	r3, r2, r3
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	3332      	adds	r3, #50	; 0x32
 8001fbc:	4a09      	ldr	r2, [pc, #36]	; (8001fe4 <UART_SetConfig+0x38c>)
 8001fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001fc2:	095b      	lsrs	r3, r3, #5
 8001fc4:	f003 020f 	and.w	r2, r3, #15
 8001fc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4432      	add	r2, r6
 8001fce:	609a      	str	r2, [r3, #8]
}
 8001fd0:	bf00      	nop
 8001fd2:	377c      	adds	r7, #124	; 0x7c
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001fda:	bf00      	nop
 8001fdc:	40011000 	.word	0x40011000
 8001fe0:	40011400 	.word	0x40011400
 8001fe4:	51eb851f 	.word	0x51eb851f

08001fe8 <__libc_init_array>:
 8001fe8:	b570      	push	{r4, r5, r6, lr}
 8001fea:	4d0d      	ldr	r5, [pc, #52]	; (8002020 <__libc_init_array+0x38>)
 8001fec:	4c0d      	ldr	r4, [pc, #52]	; (8002024 <__libc_init_array+0x3c>)
 8001fee:	1b64      	subs	r4, r4, r5
 8001ff0:	10a4      	asrs	r4, r4, #2
 8001ff2:	2600      	movs	r6, #0
 8001ff4:	42a6      	cmp	r6, r4
 8001ff6:	d109      	bne.n	800200c <__libc_init_array+0x24>
 8001ff8:	4d0b      	ldr	r5, [pc, #44]	; (8002028 <__libc_init_array+0x40>)
 8001ffa:	4c0c      	ldr	r4, [pc, #48]	; (800202c <__libc_init_array+0x44>)
 8001ffc:	f000 f820 	bl	8002040 <_init>
 8002000:	1b64      	subs	r4, r4, r5
 8002002:	10a4      	asrs	r4, r4, #2
 8002004:	2600      	movs	r6, #0
 8002006:	42a6      	cmp	r6, r4
 8002008:	d105      	bne.n	8002016 <__libc_init_array+0x2e>
 800200a:	bd70      	pop	{r4, r5, r6, pc}
 800200c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002010:	4798      	blx	r3
 8002012:	3601      	adds	r6, #1
 8002014:	e7ee      	b.n	8001ff4 <__libc_init_array+0xc>
 8002016:	f855 3b04 	ldr.w	r3, [r5], #4
 800201a:	4798      	blx	r3
 800201c:	3601      	adds	r6, #1
 800201e:	e7f2      	b.n	8002006 <__libc_init_array+0x1e>
 8002020:	08002078 	.word	0x08002078
 8002024:	08002078 	.word	0x08002078
 8002028:	08002078 	.word	0x08002078
 800202c:	0800207c 	.word	0x0800207c

08002030 <memset>:
 8002030:	4402      	add	r2, r0
 8002032:	4603      	mov	r3, r0
 8002034:	4293      	cmp	r3, r2
 8002036:	d100      	bne.n	800203a <memset+0xa>
 8002038:	4770      	bx	lr
 800203a:	f803 1b01 	strb.w	r1, [r3], #1
 800203e:	e7f9      	b.n	8002034 <memset+0x4>

08002040 <_init>:
 8002040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002042:	bf00      	nop
 8002044:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002046:	bc08      	pop	{r3}
 8002048:	469e      	mov	lr, r3
 800204a:	4770      	bx	lr

0800204c <_fini>:
 800204c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800204e:	bf00      	nop
 8002050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002052:	bc08      	pop	{r3}
 8002054:	469e      	mov	lr, r3
 8002056:	4770      	bx	lr
