
6-2_PWM_SG90_BUZZER_DCmotor_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b9c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009d50  08009d50  00019d50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a244  0800a244  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a244  0800a244  0001a244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a24c  0800a24c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a24c  0800a24c  0001a24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a250  0800a250  0001a250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000284  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000464  20000464  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000156e9  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b1f  00000000  00000000  000358f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010c0  00000000  00000000  00038418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000fc0  00000000  00000000  000394d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002577a  00000000  00000000  0003a498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015309  00000000  00000000  0005fc12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddfa1  00000000  00000000  00074f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00152ebc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005bc0  00000000  00000000  00152f10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08009d34 	.word	0x08009d34

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08009d34 	.word	0x08009d34

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b08c      	sub	sp, #48	; 0x30
 8001010:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001012:	f107 031c 	add.w	r3, r7, #28
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
 800101a:	605a      	str	r2, [r3, #4]
 800101c:	609a      	str	r2, [r3, #8]
 800101e:	60da      	str	r2, [r3, #12]
 8001020:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	61bb      	str	r3, [r7, #24]
 8001026:	4b52      	ldr	r3, [pc, #328]	; (8001170 <MX_GPIO_Init+0x164>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102a:	4a51      	ldr	r2, [pc, #324]	; (8001170 <MX_GPIO_Init+0x164>)
 800102c:	f043 0310 	orr.w	r3, r3, #16
 8001030:	6313      	str	r3, [r2, #48]	; 0x30
 8001032:	4b4f      	ldr	r3, [pc, #316]	; (8001170 <MX_GPIO_Init+0x164>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	f003 0310 	and.w	r3, r3, #16
 800103a:	61bb      	str	r3, [r7, #24]
 800103c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
 8001042:	4b4b      	ldr	r3, [pc, #300]	; (8001170 <MX_GPIO_Init+0x164>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	4a4a      	ldr	r2, [pc, #296]	; (8001170 <MX_GPIO_Init+0x164>)
 8001048:	f043 0320 	orr.w	r3, r3, #32
 800104c:	6313      	str	r3, [r2, #48]	; 0x30
 800104e:	4b48      	ldr	r3, [pc, #288]	; (8001170 <MX_GPIO_Init+0x164>)
 8001050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001052:	f003 0320 	and.w	r3, r3, #32
 8001056:	617b      	str	r3, [r7, #20]
 8001058:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	613b      	str	r3, [r7, #16]
 800105e:	4b44      	ldr	r3, [pc, #272]	; (8001170 <MX_GPIO_Init+0x164>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	4a43      	ldr	r2, [pc, #268]	; (8001170 <MX_GPIO_Init+0x164>)
 8001064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001068:	6313      	str	r3, [r2, #48]	; 0x30
 800106a:	4b41      	ldr	r3, [pc, #260]	; (8001170 <MX_GPIO_Init+0x164>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
 800107a:	4b3d      	ldr	r3, [pc, #244]	; (8001170 <MX_GPIO_Init+0x164>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a3c      	ldr	r2, [pc, #240]	; (8001170 <MX_GPIO_Init+0x164>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b3a      	ldr	r3, [pc, #232]	; (8001170 <MX_GPIO_Init+0x164>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	60fb      	str	r3, [r7, #12]
 8001090:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60bb      	str	r3, [r7, #8]
 8001096:	4b36      	ldr	r3, [pc, #216]	; (8001170 <MX_GPIO_Init+0x164>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a35      	ldr	r2, [pc, #212]	; (8001170 <MX_GPIO_Init+0x164>)
 800109c:	f043 0302 	orr.w	r3, r3, #2
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b33      	ldr	r3, [pc, #204]	; (8001170 <MX_GPIO_Init+0x164>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0302 	and.w	r3, r3, #2
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	607b      	str	r3, [r7, #4]
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <MX_GPIO_Init+0x164>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a2e      	ldr	r2, [pc, #184]	; (8001170 <MX_GPIO_Init+0x164>)
 80010b8:	f043 0308 	orr.w	r3, r3, #8
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b2c      	ldr	r3, [pc, #176]	; (8001170 <MX_GPIO_Init+0x164>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0308 	and.w	r3, r3, #8
 80010c6:	607b      	str	r3, [r7, #4]
 80010c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	603b      	str	r3, [r7, #0]
 80010ce:	4b28      	ldr	r3, [pc, #160]	; (8001170 <MX_GPIO_Init+0x164>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	4a27      	ldr	r2, [pc, #156]	; (8001170 <MX_GPIO_Init+0x164>)
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	6313      	str	r3, [r2, #48]	; 0x30
 80010da:	4b25      	ldr	r3, [pc, #148]	; (8001170 <MX_GPIO_Init+0x164>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010de:	f003 0304 	and.w	r3, r3, #4
 80010e2:	603b      	str	r3, [r7, #0]
 80010e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	f244 0181 	movw	r1, #16513	; 0x4081
 80010ec:	4821      	ldr	r0, [pc, #132]	; (8001174 <MX_GPIO_Init+0x168>)
 80010ee:	f001 fbb3 	bl	8002858 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80010f2:	2308      	movs	r3, #8
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fc:	2301      	movs	r3, #1
 80010fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001100:	f107 031c 	add.w	r3, r7, #28
 8001104:	4619      	mov	r1, r3
 8001106:	481c      	ldr	r0, [pc, #112]	; (8001178 <MX_GPIO_Init+0x16c>)
 8001108:	f001 f9fa 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800110c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001110:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 031c 	add.w	r3, r7, #28
 8001122:	4619      	mov	r1, r3
 8001124:	4813      	ldr	r0, [pc, #76]	; (8001174 <MX_GPIO_Init+0x168>)
 8001126:	f001 f9eb 	bl	8002500 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800112a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800112e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001130:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001134:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001136:	2302      	movs	r3, #2
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113a:	f107 031c 	add.w	r3, r7, #28
 800113e:	4619      	mov	r1, r3
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <MX_GPIO_Init+0x170>)
 8001142:	f001 f9dd 	bl	8002500 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2009      	movs	r0, #9
 800114c:	f001 f90f 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001150:	2009      	movs	r0, #9
 8001152:	f001 f928 	bl	80023a6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2028      	movs	r0, #40	; 0x28
 800115c:	f001 f907 	bl	800236e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001160:	2028      	movs	r0, #40	; 0x28
 8001162:	f001 f920 	bl	80023a6 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3730      	adds	r7, #48	; 0x30
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40020400 	.word	0x40020400
 8001178:	40021000 	.word	0x40021000
 800117c:	40020c00 	.word	0x40020c00

08001180 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001184:	4b1b      	ldr	r3, [pc, #108]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001186:	4a1c      	ldr	r2, [pc, #112]	; (80011f8 <MX_I2C1_Init+0x78>)
 8001188:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800118a:	4b1a      	ldr	r3, [pc, #104]	; (80011f4 <MX_I2C1_Init+0x74>)
 800118c:	4a1b      	ldr	r2, [pc, #108]	; (80011fc <MX_I2C1_Init+0x7c>)
 800118e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001190:	4b18      	ldr	r3, [pc, #96]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001196:	4b17      	ldr	r3, [pc, #92]	; (80011f4 <MX_I2C1_Init+0x74>)
 8001198:	2200      	movs	r2, #0
 800119a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800119c:	4b15      	ldr	r3, [pc, #84]	; (80011f4 <MX_I2C1_Init+0x74>)
 800119e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011a2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011a4:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011aa:	4b12      	ldr	r3, [pc, #72]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b0:	4b10      	ldr	r3, [pc, #64]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011b6:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011bc:	480d      	ldr	r0, [pc, #52]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011be:	f001 fb89 	bl	80028d4 <HAL_I2C_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011c8:	f000 f982 	bl	80014d0 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80011cc:	2100      	movs	r1, #0
 80011ce:	4809      	ldr	r0, [pc, #36]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011d0:	f001 fcc4 	bl	8002b5c <HAL_I2CEx_ConfigAnalogFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80011da:	f000 f979 	bl	80014d0 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80011de:	2100      	movs	r1, #0
 80011e0:	4804      	ldr	r0, [pc, #16]	; (80011f4 <MX_I2C1_Init+0x74>)
 80011e2:	f001 fcf7 	bl	8002bd4 <HAL_I2CEx_ConfigDigitalFilter>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80011ec:	f000 f970 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011f0:	bf00      	nop
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	20000208 	.word	0x20000208
 80011f8:	40005400 	.word	0x40005400
 80011fc:	000186a0 	.word	0x000186a0

08001200 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b08a      	sub	sp, #40	; 0x28
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001208:	f107 0314 	add.w	r3, r7, #20
 800120c:	2200      	movs	r2, #0
 800120e:	601a      	str	r2, [r3, #0]
 8001210:	605a      	str	r2, [r3, #4]
 8001212:	609a      	str	r2, [r3, #8]
 8001214:	60da      	str	r2, [r3, #12]
 8001216:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4a19      	ldr	r2, [pc, #100]	; (8001284 <HAL_I2C_MspInit+0x84>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d12c      	bne.n	800127c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001222:	2300      	movs	r3, #0
 8001224:	613b      	str	r3, [r7, #16]
 8001226:	4b18      	ldr	r3, [pc, #96]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	4a17      	ldr	r2, [pc, #92]	; (8001288 <HAL_I2C_MspInit+0x88>)
 800122c:	f043 0302 	orr.w	r3, r3, #2
 8001230:	6313      	str	r3, [r2, #48]	; 0x30
 8001232:	4b15      	ldr	r3, [pc, #84]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	613b      	str	r3, [r7, #16]
 800123c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800123e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001242:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001244:	2312      	movs	r3, #18
 8001246:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001248:	2300      	movs	r3, #0
 800124a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800124c:	2303      	movs	r3, #3
 800124e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001250:	2304      	movs	r3, #4
 8001252:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001254:	f107 0314 	add.w	r3, r7, #20
 8001258:	4619      	mov	r1, r3
 800125a:	480c      	ldr	r0, [pc, #48]	; (800128c <HAL_I2C_MspInit+0x8c>)
 800125c:	f001 f950 	bl	8002500 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
 8001264:	4b08      	ldr	r3, [pc, #32]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001268:	4a07      	ldr	r2, [pc, #28]	; (8001288 <HAL_I2C_MspInit+0x88>)
 800126a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <HAL_I2C_MspInit+0x88>)
 8001272:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800127c:	bf00      	nop
 800127e:	3728      	adds	r7, #40	; 0x28
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40005400 	.word	0x40005400
 8001288:	40023800 	.word	0x40023800
 800128c:	40020400 	.word	0x40020400

08001290 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*) p, len, 10) == HAL_OK) return len;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	b29a      	uxth	r2, r3
 80012a0:	230a      	movs	r3, #10
 80012a2:	68b9      	ldr	r1, [r7, #8]
 80012a4:	4806      	ldr	r0, [pc, #24]	; (80012c0 <_write+0x30>)
 80012a6:	f003 f9ba 	bl	800461e <HAL_UART_Transmit>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <_write+0x24>
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	e000      	b.n	80012b6 <_write+0x26>
	else return 0;
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3710      	adds	r7, #16
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	2000040c 	.word	0x2000040c

080012c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012ca:	f000 fedf 	bl	800208c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012ce:	f000 f88f 	bl	80013f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d2:	f7ff fe9b 	bl	800100c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80012d6:	f000 fe35 	bl	8001f44 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 80012da:	f7ff ff51 	bl	8001180 <MX_I2C1_Init>
  MX_TIM7_Init();
 80012de:	f000 fc3b 	bl	8001b58 <MX_TIM7_Init>
  MX_TIM3_Init();
 80012e2:	f000 faad 	bl	8001840 <MX_TIM3_Init>
  MX_TIM4_Init();
 80012e6:	f000 fb21 	bl	800192c <MX_TIM4_Init>
  MX_TIM10_Init();
 80012ea:	f000 fc6b 	bl	8001bc4 <MX_TIM10_Init>
  MX_TIM2_Init();
 80012ee:	f000 fa31 	bl	8001754 <MX_TIM2_Init>
  MX_TIM5_Init();
 80012f2:	f000 fbaf 	bl	8001a54 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim10, TIM_CHANNEL_1);
 80012f6:	2100      	movs	r1, #0
 80012f8:	4838      	ldr	r0, [pc, #224]	; (80013dc <main+0x118>)
 80012fa:	f002 fa17 	bl	800372c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80012fe:	2100      	movs	r1, #0
 8001300:	4837      	ldr	r0, [pc, #220]	; (80013e0 <main+0x11c>)
 8001302:	f002 fa13 	bl	800372c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_1);
 8001306:	2100      	movs	r1, #0
 8001308:	4836      	ldr	r0, [pc, #216]	; (80013e4 <main+0x120>)
 800130a:	f002 fa0f 	bl	800372c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_4);
 800130e:	210c      	movs	r1, #12
 8001310:	4834      	ldr	r0, [pc, #208]	; (80013e4 <main+0x120>)
 8001312:	f002 fa0b 	bl	800372c <HAL_TIM_PWM_Start>

  TIM2->ARR = 500;
 8001316:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800131a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = TIM2->ARR / 2;
 8001320:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001324:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	6353      	str	r3, [r2, #52]	; 0x34
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t motorSpeed = 0;
 800132e:	2300      	movs	r3, #0
 8001330:	607b      	str	r3, [r7, #4]
  //bool direction = true;
  uint8_t direction = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	70fb      	strb	r3, [r7, #3]
  int16_t accelation = 0;
 8001336:	2300      	movs	r3, #0
 8001338:	803b      	strh	r3, [r7, #0]
  while (1)
  {

	  if (accelation == 0 && motorSpeed == 0){
 800133a:	f9b7 3000 	ldrsh.w	r3, [r7]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d105      	bne.n	800134e <main+0x8a>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d102      	bne.n	800134e <main+0x8a>
		  accelation = 1000;
 8001348:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134c:	803b      	strh	r3, [r7, #0]
	  }

	  if(motorSpeed >= (TIM5->ARR+1) / 2){
 800134e:	4b26      	ldr	r3, [pc, #152]	; (80013e8 <main+0x124>)
 8001350:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001352:	3301      	adds	r3, #1
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	687a      	ldr	r2, [r7, #4]
 8001358:	429a      	cmp	r2, r3
 800135a:	d308      	bcc.n	800136e <main+0xaa>
		  motorSpeed = (TIM5->ARR+1) / 2;
 800135c:	4b22      	ldr	r3, [pc, #136]	; (80013e8 <main+0x124>)
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	3301      	adds	r3, #1
 8001362:	085b      	lsrs	r3, r3, #1
 8001364:	607b      	str	r3, [r7, #4]
		  accelation = -1000;
 8001366:	f64f 4318 	movw	r3, #64536	; 0xfc18
 800136a:	803b      	strh	r3, [r7, #0]
 800136c:	e00e      	b.n	800138c <main+0xc8>
	  }else if (motorSpeed <= 0 ){
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d10b      	bne.n	800138c <main+0xc8>
		  motorSpeed = 0;
 8001374:	2300      	movs	r3, #0
 8001376:	607b      	str	r3, [r7, #4]
		  accelation = 1000;
 8001378:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800137c:	803b      	strh	r3, [r7, #0]
		  direction = !direction;
 800137e:	78fb      	ldrb	r3, [r7, #3]
 8001380:	2b00      	cmp	r3, #0
 8001382:	bf0c      	ite	eq
 8001384:	2301      	moveq	r3, #1
 8001386:	2300      	movne	r3, #0
 8001388:	b2db      	uxtb	r3, r3
 800138a:	70fb      	strb	r3, [r7, #3]
	  }

	  if (direction == 1){
 800138c:	78fb      	ldrb	r3, [r7, #3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10b      	bne.n	80013aa <main+0xe6>
		  motorSpeed += accelation;
 8001392:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001396:	687a      	ldr	r2, [r7, #4]
 8001398:	4413      	add	r3, r2
 800139a:	607b      	str	r3, [r7, #4]
		  TIM5->CCR1 = motorSpeed;
 800139c:	4a12      	ldr	r2, [pc, #72]	; (80013e8 <main+0x124>)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6353      	str	r3, [r2, #52]	; 0x34
		  TIM5->CCR4 = 0;
 80013a2:	4b11      	ldr	r3, [pc, #68]	; (80013e8 <main+0x124>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	641a      	str	r2, [r3, #64]	; 0x40
 80013a8:	e00d      	b.n	80013c6 <main+0x102>
	  }else if(direction == 0){
 80013aa:	78fb      	ldrb	r3, [r7, #3]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d10a      	bne.n	80013c6 <main+0x102>
		  motorSpeed += accelation;
 80013b0:	f9b7 3000 	ldrsh.w	r3, [r7]
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4413      	add	r3, r2
 80013b8:	607b      	str	r3, [r7, #4]
		  TIM5->CCR1 = 0;
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <main+0x124>)
 80013bc:	2200      	movs	r2, #0
 80013be:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM5->CCR4 = motorSpeed;
 80013c0:	4a09      	ldr	r2, [pc, #36]	; (80013e8 <main+0x124>)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6413      	str	r3, [r2, #64]	; 0x40
	  }
	  printf("MotorSpeed : %5ld | direction : %d\r\n", motorSpeed, direction);
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	461a      	mov	r2, r3
 80013ca:	6879      	ldr	r1, [r7, #4]
 80013cc:	4807      	ldr	r0, [pc, #28]	; (80013ec <main+0x128>)
 80013ce:	f004 feed 	bl	80061ac <iprintf>
	  HAL_Delay(100);
 80013d2:	2064      	movs	r0, #100	; 0x64
 80013d4:	f000 fecc 	bl	8002170 <HAL_Delay>
	  if (accelation == 0 && motorSpeed == 0){
 80013d8:	e7af      	b.n	800133a <main+0x76>
 80013da:	bf00      	nop
 80013dc:	200002a4 	.word	0x200002a4
 80013e0:	2000037c 	.word	0x2000037c
 80013e4:	200002ec 	.word	0x200002ec
 80013e8:	40000c00 	.word	0x40000c00
 80013ec:	08009d50 	.word	0x08009d50

080013f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b094      	sub	sp, #80	; 0x50
 80013f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013f6:	f107 0320 	add.w	r3, r7, #32
 80013fa:	2230      	movs	r2, #48	; 0x30
 80013fc:	2100      	movs	r1, #0
 80013fe:	4618      	mov	r0, r3
 8001400:	f004 f852 	bl	80054a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	f107 030c 	add.w	r3, r7, #12
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001414:	2300      	movs	r3, #0
 8001416:	60bb      	str	r3, [r7, #8]
 8001418:	4b2b      	ldr	r3, [pc, #172]	; (80014c8 <SystemClock_Config+0xd8>)
 800141a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141c:	4a2a      	ldr	r2, [pc, #168]	; (80014c8 <SystemClock_Config+0xd8>)
 800141e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001422:	6413      	str	r3, [r2, #64]	; 0x40
 8001424:	4b28      	ldr	r3, [pc, #160]	; (80014c8 <SystemClock_Config+0xd8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001430:	2300      	movs	r3, #0
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	4b25      	ldr	r3, [pc, #148]	; (80014cc <SystemClock_Config+0xdc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a24      	ldr	r2, [pc, #144]	; (80014cc <SystemClock_Config+0xdc>)
 800143a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800143e:	6013      	str	r3, [r2, #0]
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <SystemClock_Config+0xdc>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800144c:	2301      	movs	r3, #1
 800144e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001450:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001454:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001456:	2302      	movs	r3, #2
 8001458:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800145a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800145e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001460:	2304      	movs	r3, #4
 8001462:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001464:	23b4      	movs	r3, #180	; 0xb4
 8001466:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001468:	2302      	movs	r3, #2
 800146a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800146c:	2304      	movs	r3, #4
 800146e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	4618      	mov	r0, r3
 8001476:	f001 fc3d 	bl	8002cf4 <HAL_RCC_OscConfig>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001480:	f000 f826 	bl	80014d0 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001484:	f001 fbe6 	bl	8002c54 <HAL_PWREx_EnableOverDrive>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800148e:	f000 f81f 	bl	80014d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001492:	230f      	movs	r3, #15
 8001494:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001496:	2302      	movs	r3, #2
 8001498:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800149e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80014a2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80014a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2105      	movs	r1, #5
 80014b0:	4618      	mov	r0, r3
 80014b2:	f001 fe97 	bl	80031e4 <HAL_RCC_ClockConfig>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80014bc:	f000 f808 	bl	80014d0 <Error_Handler>
  }
}
 80014c0:	bf00      	nop
 80014c2:	3750      	adds	r7, #80	; 0x50
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800
 80014cc:	40007000 	.word	0x40007000

080014d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d4:	b672      	cpsid	i
}
 80014d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <Error_Handler+0x8>
	...

080014dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4b10      	ldr	r3, [pc, #64]	; (8001528 <HAL_MspInit+0x4c>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a0f      	ldr	r2, [pc, #60]	; (8001528 <HAL_MspInit+0x4c>)
 80014ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <HAL_MspInit+0x4c>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <HAL_MspInit+0x4c>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001506:	4a08      	ldr	r2, [pc, #32]	; (8001528 <HAL_MspInit+0x4c>)
 8001508:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800150c:	6413      	str	r3, [r2, #64]	; 0x40
 800150e:	4b06      	ldr	r3, [pc, #24]	; (8001528 <HAL_MspInit+0x4c>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	603b      	str	r3, [r7, #0]
 8001518:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40023800 	.word	0x40023800

0800152c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001530:	e7fe      	b.n	8001530 <NMI_Handler+0x4>

08001532 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001536:	e7fe      	b.n	8001536 <HardFault_Handler+0x4>

08001538 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <MemManage_Handler+0x4>

0800153e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800153e:	b480      	push	{r7}
 8001540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <BusFault_Handler+0x4>

08001544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001544:	b480      	push	{r7}
 8001546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001548:	e7fe      	b.n	8001548 <UsageFault_Handler+0x4>

0800154a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800154a:	b480      	push	{r7}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800154e:	bf00      	nop
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001578:	f000 fdda 	bl	8002130 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}

08001580 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001584:	2008      	movs	r0, #8
 8001586:	f001 f981 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800158a:	bf00      	nop
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001594:	4802      	ldr	r0, [pc, #8]	; (80015a0 <TIM4_IRQHandler+0x10>)
 8001596:	f002 f991 	bl	80038bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	2000025c 	.word	0x2000025c

080015a4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80015a8:	4802      	ldr	r0, [pc, #8]	; (80015b4 <USART3_IRQHandler+0x10>)
 80015aa:	f003 f8cb 	bl	8004744 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80015ae:	bf00      	nop
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000040c 	.word	0x2000040c

080015b8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80015bc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80015c0:	f001 f964 	bl	800288c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80015cc:	4802      	ldr	r0, [pc, #8]	; (80015d8 <TIM7_IRQHandler+0x10>)
 80015ce:	f002 f975 	bl	80038bc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	200003c4 	.word	0x200003c4

080015dc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
	return 1;
 80015e0:	2301      	movs	r3, #1
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <_kill>:

int _kill(int pid, int sig)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80015f6:	f003 ff2d 	bl	8005454 <__errno>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2216      	movs	r2, #22
 80015fe:	601a      	str	r2, [r3, #0]
	return -1;
 8001600:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001604:	4618      	mov	r0, r3
 8001606:	3708      	adds	r7, #8
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_exit>:

void _exit (int status)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001614:	f04f 31ff 	mov.w	r1, #4294967295
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff ffe7 	bl	80015ec <_kill>
	while (1) {}		/* Make sure we hang here */
 800161e:	e7fe      	b.n	800161e <_exit+0x12>

08001620 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0
 8001626:	60f8      	str	r0, [r7, #12]
 8001628:	60b9      	str	r1, [r7, #8]
 800162a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]
 8001630:	e00a      	b.n	8001648 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001632:	f3af 8000 	nop.w
 8001636:	4601      	mov	r1, r0
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	1c5a      	adds	r2, r3, #1
 800163c:	60ba      	str	r2, [r7, #8]
 800163e:	b2ca      	uxtb	r2, r1
 8001640:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	3301      	adds	r3, #1
 8001646:	617b      	str	r3, [r7, #20]
 8001648:	697a      	ldr	r2, [r7, #20]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	dbf0      	blt.n	8001632 <_read+0x12>
	}

return len;
 8001650:	687b      	ldr	r3, [r7, #4]
}
 8001652:	4618      	mov	r0, r3
 8001654:	3718      	adds	r7, #24
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}

0800165a <_close>:
	}
	return len;
}

int _close(int file)
{
 800165a:	b480      	push	{r7}
 800165c:	b083      	sub	sp, #12
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
	return -1;
 8001662:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001666:	4618      	mov	r0, r3
 8001668:	370c      	adds	r7, #12
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr

08001672 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001672:	b480      	push	{r7}
 8001674:	b083      	sub	sp, #12
 8001676:	af00      	add	r7, sp, #0
 8001678:	6078      	str	r0, [r7, #4]
 800167a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001682:	605a      	str	r2, [r3, #4]
	return 0;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <_isatty>:

int _isatty(int file)
{
 8001692:	b480      	push	{r7}
 8001694:	b083      	sub	sp, #12
 8001696:	af00      	add	r7, sp, #0
 8001698:	6078      	str	r0, [r7, #4]
	return 1;
 800169a:	2301      	movs	r3, #1
}
 800169c:	4618      	mov	r0, r3
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr

080016a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
	return 0;
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
	...

080016c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016cc:	4a14      	ldr	r2, [pc, #80]	; (8001720 <_sbrk+0x5c>)
 80016ce:	4b15      	ldr	r3, [pc, #84]	; (8001724 <_sbrk+0x60>)
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016d8:	4b13      	ldr	r3, [pc, #76]	; (8001728 <_sbrk+0x64>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d102      	bne.n	80016e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016e0:	4b11      	ldr	r3, [pc, #68]	; (8001728 <_sbrk+0x64>)
 80016e2:	4a12      	ldr	r2, [pc, #72]	; (800172c <_sbrk+0x68>)
 80016e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016e6:	4b10      	ldr	r3, [pc, #64]	; (8001728 <_sbrk+0x64>)
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4413      	add	r3, r2
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d207      	bcs.n	8001704 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016f4:	f003 feae 	bl	8005454 <__errno>
 80016f8:	4603      	mov	r3, r0
 80016fa:	220c      	movs	r2, #12
 80016fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001702:	e009      	b.n	8001718 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <_sbrk+0x64>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800170a:	4b07      	ldr	r3, [pc, #28]	; (8001728 <_sbrk+0x64>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4413      	add	r3, r2
 8001712:	4a05      	ldr	r2, [pc, #20]	; (8001728 <_sbrk+0x64>)
 8001714:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001716:	68fb      	ldr	r3, [r7, #12]
}
 8001718:	4618      	mov	r0, r3
 800171a:	3718      	adds	r7, #24
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	20030000 	.word	0x20030000
 8001724:	00000400 	.word	0x00000400
 8001728:	200001fc 	.word	0x200001fc
 800172c:	20000468 	.word	0x20000468

08001730 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <SystemInit+0x20>)
 8001736:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800173a:	4a05      	ldr	r2, [pc, #20]	; (8001750 <SystemInit+0x20>)
 800173c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001740:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b08e      	sub	sp, #56	; 0x38
 8001758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800175a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001768:	f107 0320 	add.w	r3, r7, #32
 800176c:	2200      	movs	r2, #0
 800176e:	601a      	str	r2, [r3, #0]
 8001770:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001772:	1d3b      	adds	r3, r7, #4
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
 8001780:	615a      	str	r2, [r3, #20]
 8001782:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001784:	4b2d      	ldr	r3, [pc, #180]	; (800183c <MX_TIM2_Init+0xe8>)
 8001786:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 800178c:	4b2b      	ldr	r3, [pc, #172]	; (800183c <MX_TIM2_Init+0xe8>)
 800178e:	22b3      	movs	r2, #179	; 0xb3
 8001790:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001792:	4b2a      	ldr	r3, [pc, #168]	; (800183c <MX_TIM2_Init+0xe8>)
 8001794:	2200      	movs	r2, #0
 8001796:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001798:	4b28      	ldr	r3, [pc, #160]	; (800183c <MX_TIM2_Init+0xe8>)
 800179a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800179e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b26      	ldr	r3, [pc, #152]	; (800183c <MX_TIM2_Init+0xe8>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b25      	ldr	r3, [pc, #148]	; (800183c <MX_TIM2_Init+0xe8>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ac:	4823      	ldr	r0, [pc, #140]	; (800183c <MX_TIM2_Init+0xe8>)
 80017ae:	f001 ff15 	bl	80035dc <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80017b8:	f7ff fe8a 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80017c6:	4619      	mov	r1, r3
 80017c8:	481c      	ldr	r0, [pc, #112]	; (800183c <MX_TIM2_Init+0xe8>)
 80017ca:	f002 fa41 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80017d4:	f7ff fe7c 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80017d8:	4818      	ldr	r0, [pc, #96]	; (800183c <MX_TIM2_Init+0xe8>)
 80017da:	f001 ff4e 	bl	800367a <HAL_TIM_PWM_Init>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80017e4:	f7ff fe74 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017e8:	2300      	movs	r3, #0
 80017ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017f0:	f107 0320 	add.w	r3, r7, #32
 80017f4:	4619      	mov	r1, r3
 80017f6:	4811      	ldr	r0, [pc, #68]	; (800183c <MX_TIM2_Init+0xe8>)
 80017f8:	f002 fe34 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d001      	beq.n	8001806 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001802:	f7ff fe65 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001806:	2360      	movs	r3, #96	; 0x60
 8001808:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800180a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800180e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001810:	2300      	movs	r3, #0
 8001812:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001818:	1d3b      	adds	r3, r7, #4
 800181a:	2200      	movs	r2, #0
 800181c:	4619      	mov	r1, r3
 800181e:	4807      	ldr	r0, [pc, #28]	; (800183c <MX_TIM2_Init+0xe8>)
 8001820:	f002 f954 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800182a:	f7ff fe51 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800182e:	4803      	ldr	r0, [pc, #12]	; (800183c <MX_TIM2_Init+0xe8>)
 8001830:	f000 fab2 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001834:	bf00      	nop
 8001836:	3738      	adds	r7, #56	; 0x38
 8001838:	46bd      	mov	sp, r7
 800183a:	bd80      	pop	{r7, pc}
 800183c:	2000037c 	.word	0x2000037c

08001840 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b08e      	sub	sp, #56	; 0x38
 8001844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001846:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001854:	f107 0320 	add.w	r3, r7, #32
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
 800185c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800185e:	1d3b      	adds	r3, r7, #4
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
 800186a:	611a      	str	r2, [r3, #16]
 800186c:	615a      	str	r2, [r3, #20]
 800186e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001870:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001872:	4a2d      	ldr	r2, [pc, #180]	; (8001928 <MX_TIM3_Init+0xe8>)
 8001874:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 8001876:	4b2b      	ldr	r3, [pc, #172]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001878:	2208      	movs	r2, #8
 800187a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800187c:	4b29      	ldr	r3, [pc, #164]	; (8001924 <MX_TIM3_Init+0xe4>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 8001882:	4b28      	ldr	r3, [pc, #160]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001884:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001888:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800188a:	4b26      	ldr	r3, [pc, #152]	; (8001924 <MX_TIM3_Init+0xe4>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001896:	4823      	ldr	r0, [pc, #140]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001898:	f001 fea0 	bl	80035dc <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80018a2:	f7ff fe15 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018aa:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80018ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018b0:	4619      	mov	r1, r3
 80018b2:	481c      	ldr	r0, [pc, #112]	; (8001924 <MX_TIM3_Init+0xe4>)
 80018b4:	f002 f9cc 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80018be:	f7ff fe07 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80018c2:	4818      	ldr	r0, [pc, #96]	; (8001924 <MX_TIM3_Init+0xe4>)
 80018c4:	f001 fed9 	bl	800367a <HAL_TIM_PWM_Init>
 80018c8:	4603      	mov	r3, r0
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80018ce:	f7ff fdff 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d2:	2300      	movs	r3, #0
 80018d4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d6:	2300      	movs	r3, #0
 80018d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	4619      	mov	r1, r3
 80018e0:	4810      	ldr	r0, [pc, #64]	; (8001924 <MX_TIM3_Init+0xe4>)
 80018e2:	f002 fdbf 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80018ec:	f7ff fdf0 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018f0:	2360      	movs	r3, #96	; 0x60
 80018f2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018f4:	2300      	movs	r3, #0
 80018f6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018fc:	2300      	movs	r3, #0
 80018fe:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2200      	movs	r2, #0
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001908:	f002 f8e0 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001912:	f7ff fddd 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001916:	4803      	ldr	r0, [pc, #12]	; (8001924 <MX_TIM3_Init+0xe4>)
 8001918:	f000 fa3e 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	; 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000334 	.word	0x20000334
 8001928:	40000400 	.word	0x40000400

0800192c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	; 0x38
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <MX_TIM4_Init+0x120>)
 800195e:	4a3c      	ldr	r2, [pc, #240]	; (8001a50 <MX_TIM4_Init+0x124>)
 8001960:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 8001962:	4b3a      	ldr	r3, [pc, #232]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001964:	2211      	movs	r2, #17
 8001966:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b38      	ldr	r3, [pc, #224]	; (8001a4c <MX_TIM4_Init+0x120>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 800196e:	4b37      	ldr	r3, [pc, #220]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001970:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001974:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b35      	ldr	r3, [pc, #212]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b33      	ldr	r3, [pc, #204]	; (8001a4c <MX_TIM4_Init+0x120>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001982:	4832      	ldr	r0, [pc, #200]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001984:	f001 fe2a 	bl	80035dc <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800198e:	f7ff fd9f 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001996:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001998:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800199c:	4619      	mov	r1, r3
 800199e:	482b      	ldr	r0, [pc, #172]	; (8001a4c <MX_TIM4_Init+0x120>)
 80019a0:	f002 f956 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80019aa:	f7ff fd91 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80019ae:	4827      	ldr	r0, [pc, #156]	; (8001a4c <MX_TIM4_Init+0x120>)
 80019b0:	f001 fe63 	bl	800367a <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80019ba:	f7ff fd89 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	4619      	mov	r1, r3
 80019cc:	481f      	ldr	r0, [pc, #124]	; (8001a4c <MX_TIM4_Init+0x120>)
 80019ce:	f002 fd49 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80019d8:	f7ff fd7a 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019dc:	2360      	movs	r3, #96	; 0x60
 80019de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 80019e0:	f246 13a7 	movw	r3, #24999	; 0x61a7
 80019e4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ee:	1d3b      	adds	r3, r7, #4
 80019f0:	2200      	movs	r2, #0
 80019f2:	4619      	mov	r1, r3
 80019f4:	4815      	ldr	r0, [pc, #84]	; (8001a4c <MX_TIM4_Init+0x120>)
 80019f6:	f002 f869 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001a00:	f7ff fd66 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 8001a04:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001a08:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a0a:	1d3b      	adds	r3, r7, #4
 8001a0c:	2204      	movs	r2, #4
 8001a0e:	4619      	mov	r1, r3
 8001a10:	480e      	ldr	r0, [pc, #56]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001a12:	f002 f85b 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001a1c:	f7ff fd58 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001a20:	f641 4351 	movw	r3, #7249	; 0x1c51
 8001a24:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a26:	1d3b      	adds	r3, r7, #4
 8001a28:	2208      	movs	r2, #8
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001a2e:	f002 f84d 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001a32:	4603      	mov	r3, r0
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d001      	beq.n	8001a3c <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001a38:	f7ff fd4a 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001a3c:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM4_Init+0x120>)
 8001a3e:	f000 f9ab 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001a42:	bf00      	nop
 8001a44:	3738      	adds	r7, #56	; 0x38
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	2000025c 	.word	0x2000025c
 8001a50:	40000800 	.word	0x40000800

08001a54 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b08e      	sub	sp, #56	; 0x38
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	f107 0320 	add.w	r3, r7, #32
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a72:	1d3b      	adds	r3, r7, #4
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	609a      	str	r2, [r3, #8]
 8001a7c:	60da      	str	r2, [r3, #12]
 8001a7e:	611a      	str	r2, [r3, #16]
 8001a80:	615a      	str	r2, [r3, #20]
 8001a82:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001a84:	4b31      	ldr	r3, [pc, #196]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001a86:	4a32      	ldr	r2, [pc, #200]	; (8001b50 <MX_TIM5_Init+0xfc>)
 8001a88:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 8001a8a:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001a8c:	2209      	movs	r2, #9
 8001a8e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001a98:	4a2e      	ldr	r2, [pc, #184]	; (8001b54 <MX_TIM5_Init+0x100>)
 8001a9a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a9c:	4b2b      	ldr	r3, [pc, #172]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa2:	4b2a      	ldr	r3, [pc, #168]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001aa8:	4828      	ldr	r0, [pc, #160]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001aaa:	f001 fd97 	bl	80035dc <HAL_TIM_Base_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 8001ab4:	f7ff fd0c 	bl	80014d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ab8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001abc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001abe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001ac6:	f002 f8c3 	bl	8003c50 <HAL_TIM_ConfigClockSource>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001ad0:	f7ff fcfe 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ad4:	481d      	ldr	r0, [pc, #116]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001ad6:	f001 fdd0 	bl	800367a <HAL_TIM_PWM_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f7ff fcf6 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001aec:	f107 0320 	add.w	r3, r7, #32
 8001af0:	4619      	mov	r1, r3
 8001af2:	4816      	ldr	r0, [pc, #88]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001af4:	f002 fcb6 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001afe:	f7ff fce7 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b02:	2360      	movs	r3, #96	; 0x60
 8001b04:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b06:	2300      	movs	r3, #0
 8001b08:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b12:	1d3b      	adds	r3, r7, #4
 8001b14:	2200      	movs	r2, #0
 8001b16:	4619      	mov	r1, r3
 8001b18:	480c      	ldr	r0, [pc, #48]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001b1a:	f001 ffd7 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 8001b24:	f7ff fcd4 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b28:	1d3b      	adds	r3, r7, #4
 8001b2a:	220c      	movs	r2, #12
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001b30:	f001 ffcc 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d001      	beq.n	8001b3e <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001b3a:	f7ff fcc9 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001b3e:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM5_Init+0xf8>)
 8001b40:	f000 f92a 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001b44:	bf00      	nop
 8001b46:	3738      	adds	r7, #56	; 0x38
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	200002ec 	.word	0x200002ec
 8001b50:	40000c00 	.word	0x40000c00
 8001b54:	0001869f 	.word	0x0001869f

08001b58 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5e:	463b      	mov	r3, r7
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001b66:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b68:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <MX_TIM7_Init+0x68>)
 8001b6a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 8001b6c:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b6e:	f242 3227 	movw	r2, #8999	; 0x2327
 8001b72:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b11      	ldr	r3, [pc, #68]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 8001b7a:	4b10      	ldr	r3, [pc, #64]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b7c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001b80:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001b82:	4b0e      	ldr	r3, [pc, #56]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b84:	2280      	movs	r2, #128	; 0x80
 8001b86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001b88:	480c      	ldr	r0, [pc, #48]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001b8a:	f001 fd27 	bl	80035dc <HAL_TIM_Base_Init>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d001      	beq.n	8001b98 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001b94:	f7ff fc9c 	bl	80014d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001ba0:	463b      	mov	r3, r7
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4805      	ldr	r0, [pc, #20]	; (8001bbc <MX_TIM7_Init+0x64>)
 8001ba6:	f002 fc5d 	bl	8004464 <HAL_TIMEx_MasterConfigSynchronization>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001bb0:	f7ff fc8e 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001bb4:	bf00      	nop
 8001bb6:	3708      	adds	r7, #8
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	200003c4 	.word	0x200003c4
 8001bc0:	40001400 	.word	0x40001400

08001bc4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b088      	sub	sp, #32
 8001bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bca:	1d3b      	adds	r3, r7, #4
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
 8001bd6:	611a      	str	r2, [r3, #16]
 8001bd8:	615a      	str	r2, [r3, #20]
 8001bda:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001bde:	4a1f      	ldr	r2, [pc, #124]	; (8001c5c <MX_TIM10_Init+0x98>)
 8001be0:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 8001be2:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001be4:	2247      	movs	r2, #71	; 0x47
 8001be6:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001bee:	4b1a      	ldr	r3, [pc, #104]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001bf0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001bf4:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001c02:	4815      	ldr	r0, [pc, #84]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001c04:	f001 fcea 	bl	80035dc <HAL_TIM_Base_Init>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001c0e:	f7ff fc5f 	bl	80014d0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001c12:	4811      	ldr	r0, [pc, #68]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001c14:	f001 fd31 	bl	800367a <HAL_TIM_PWM_Init>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d001      	beq.n	8001c22 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001c1e:	f7ff fc57 	bl	80014d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c22:	2360      	movs	r3, #96	; 0x60
 8001c24:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001c26:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c2a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c30:	2300      	movs	r3, #0
 8001c32:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2200      	movs	r2, #0
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4807      	ldr	r0, [pc, #28]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001c3c:	f001 ff46 	bl	8003acc <HAL_TIM_PWM_ConfigChannel>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001c46:	f7ff fc43 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001c4a:	4803      	ldr	r0, [pc, #12]	; (8001c58 <MX_TIM10_Init+0x94>)
 8001c4c:	f000 f8a4 	bl	8001d98 <HAL_TIM_MspPostInit>

}
 8001c50:	bf00      	nop
 8001c52:	3720      	adds	r7, #32
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	200002a4 	.word	0x200002a4
 8001c5c:	40014400 	.word	0x40014400

08001c60 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c70:	d10e      	bne.n	8001c90 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	4b42      	ldr	r3, [pc, #264]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	4a41      	ldr	r2, [pc, #260]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001c7c:	f043 0301 	orr.w	r3, r3, #1
 8001c80:	6413      	str	r3, [r2, #64]	; 0x40
 8001c82:	4b3f      	ldr	r3, [pc, #252]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	61fb      	str	r3, [r7, #28]
 8001c8c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 8001c8e:	e072      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a3b      	ldr	r2, [pc, #236]	; (8001d84 <HAL_TIM_Base_MspInit+0x124>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d10e      	bne.n	8001cb8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	61bb      	str	r3, [r7, #24]
 8001c9e:	4b38      	ldr	r3, [pc, #224]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca2:	4a37      	ldr	r2, [pc, #220]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001ca4:	f043 0302 	orr.w	r3, r3, #2
 8001ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8001caa:	4b35      	ldr	r3, [pc, #212]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	61bb      	str	r3, [r7, #24]
 8001cb4:	69bb      	ldr	r3, [r7, #24]
}
 8001cb6:	e05e      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a32      	ldr	r2, [pc, #200]	; (8001d88 <HAL_TIM_Base_MspInit+0x128>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d116      	bne.n	8001cf0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
 8001cc6:	4b2e      	ldr	r3, [pc, #184]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cca:	4a2d      	ldr	r2, [pc, #180]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001ccc:	f043 0304 	orr.w	r3, r3, #4
 8001cd0:	6413      	str	r3, [r2, #64]	; 0x40
 8001cd2:	4b2b      	ldr	r3, [pc, #172]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	617b      	str	r3, [r7, #20]
 8001cdc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2100      	movs	r1, #0
 8001ce2:	201e      	movs	r0, #30
 8001ce4:	f000 fb43 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ce8:	201e      	movs	r0, #30
 8001cea:	f000 fb5c 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001cee:	e042      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a25      	ldr	r2, [pc, #148]	; (8001d8c <HAL_TIM_Base_MspInit+0x12c>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d10e      	bne.n	8001d18 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
 8001cfe:	4b20      	ldr	r3, [pc, #128]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d02:	4a1f      	ldr	r2, [pc, #124]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d04:	f043 0308 	orr.w	r3, r3, #8
 8001d08:	6413      	str	r3, [r2, #64]	; 0x40
 8001d0a:	4b1d      	ldr	r3, [pc, #116]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	613b      	str	r3, [r7, #16]
 8001d14:	693b      	ldr	r3, [r7, #16]
}
 8001d16:	e02e      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a1c      	ldr	r2, [pc, #112]	; (8001d90 <HAL_TIM_Base_MspInit+0x130>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d116      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	60fb      	str	r3, [r7, #12]
 8001d26:	4b16      	ldr	r3, [pc, #88]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d2a:	4a15      	ldr	r2, [pc, #84]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d2c:	f043 0320 	orr.w	r3, r3, #32
 8001d30:	6413      	str	r3, [r2, #64]	; 0x40
 8001d32:	4b13      	ldr	r3, [pc, #76]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d36:	f003 0320 	and.w	r3, r3, #32
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2037      	movs	r0, #55	; 0x37
 8001d44:	f000 fb13 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001d48:	2037      	movs	r0, #55	; 0x37
 8001d4a:	f000 fb2c 	bl	80023a6 <HAL_NVIC_EnableIRQ>
}
 8001d4e:	e012      	b.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a0f      	ldr	r2, [pc, #60]	; (8001d94 <HAL_TIM_Base_MspInit+0x134>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10d      	bne.n	8001d76 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	4b08      	ldr	r3, [pc, #32]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b05      	ldr	r3, [pc, #20]	; (8001d80 <HAL_TIM_Base_MspInit+0x120>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d72:	60bb      	str	r3, [r7, #8]
 8001d74:	68bb      	ldr	r3, [r7, #8]
}
 8001d76:	bf00      	nop
 8001d78:	3720      	adds	r7, #32
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}
 8001d7e:	bf00      	nop
 8001d80:	40023800 	.word	0x40023800
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800
 8001d8c:	40000c00 	.word	0x40000c00
 8001d90:	40001400 	.word	0x40001400
 8001d94:	40014400 	.word	0x40014400

08001d98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08c      	sub	sp, #48	; 0x30
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 031c 	add.w	r3, r7, #28
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db8:	d11e      	bne.n	8001df8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	4b58      	ldr	r3, [pc, #352]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001dc4:	f043 0301 	orr.w	r3, r3, #1
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b55      	ldr	r3, [pc, #340]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0301 	and.w	r3, r3, #1
 8001dd2:	61bb      	str	r3, [r7, #24]
 8001dd4:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001dd6:	2320      	movs	r3, #32
 8001dd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dde:	2300      	movs	r3, #0
 8001de0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de2:	2300      	movs	r3, #0
 8001de4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001de6:	2301      	movs	r3, #1
 8001de8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dea:	f107 031c 	add.w	r3, r7, #28
 8001dee:	4619      	mov	r1, r3
 8001df0:	484c      	ldr	r0, [pc, #304]	; (8001f24 <HAL_TIM_MspPostInit+0x18c>)
 8001df2:	f000 fb85 	bl	8002500 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001df6:	e08f      	b.n	8001f18 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a4a      	ldr	r2, [pc, #296]	; (8001f28 <HAL_TIM_MspPostInit+0x190>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d11e      	bne.n	8001e40 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	617b      	str	r3, [r7, #20]
 8001e06:	4b46      	ldr	r3, [pc, #280]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0a:	4a45      	ldr	r2, [pc, #276]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e0c:	f043 0304 	orr.w	r3, r3, #4
 8001e10:	6313      	str	r3, [r2, #48]	; 0x30
 8001e12:	4b43      	ldr	r3, [pc, #268]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e16:	f003 0304 	and.w	r3, r3, #4
 8001e1a:	617b      	str	r3, [r7, #20]
 8001e1c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e1e:	2340      	movs	r3, #64	; 0x40
 8001e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e2e:	2302      	movs	r3, #2
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	483c      	ldr	r0, [pc, #240]	; (8001f2c <HAL_TIM_MspPostInit+0x194>)
 8001e3a:	f000 fb61 	bl	8002500 <HAL_GPIO_Init>
}
 8001e3e:	e06b      	b.n	8001f18 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a3a      	ldr	r2, [pc, #232]	; (8001f30 <HAL_TIM_MspPostInit+0x198>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d11f      	bne.n	8001e8a <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b34      	ldr	r3, [pc, #208]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e52:	4a33      	ldr	r2, [pc, #204]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e54:	f043 0308 	orr.w	r3, r3, #8
 8001e58:	6313      	str	r3, [r2, #48]	; 0x30
 8001e5a:	4b31      	ldr	r3, [pc, #196]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5e:	f003 0308 	and.w	r3, r3, #8
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001e66:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e74:	2300      	movs	r3, #0
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e7c:	f107 031c 	add.w	r3, r7, #28
 8001e80:	4619      	mov	r1, r3
 8001e82:	482c      	ldr	r0, [pc, #176]	; (8001f34 <HAL_TIM_MspPostInit+0x19c>)
 8001e84:	f000 fb3c 	bl	8002500 <HAL_GPIO_Init>
}
 8001e88:	e046      	b.n	8001f18 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a2a      	ldr	r2, [pc, #168]	; (8001f38 <HAL_TIM_MspPostInit+0x1a0>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d11e      	bne.n	8001ed2 <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]
 8001e98:	4b21      	ldr	r3, [pc, #132]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9c:	4a20      	ldr	r2, [pc, #128]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001e9e:	f043 0301 	orr.w	r3, r3, #1
 8001ea2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea4:	4b1e      	ldr	r3, [pc, #120]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea8:	f003 0301 	and.w	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
 8001eae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001eb0:	2309      	movs	r3, #9
 8001eb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec4:	f107 031c 	add.w	r3, r7, #28
 8001ec8:	4619      	mov	r1, r3
 8001eca:	4816      	ldr	r0, [pc, #88]	; (8001f24 <HAL_TIM_MspPostInit+0x18c>)
 8001ecc:	f000 fb18 	bl	8002500 <HAL_GPIO_Init>
}
 8001ed0:	e022      	b.n	8001f18 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a19      	ldr	r2, [pc, #100]	; (8001f3c <HAL_TIM_MspPostInit+0x1a4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d11d      	bne.n	8001f18 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	4b0f      	ldr	r3, [pc, #60]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	4a0e      	ldr	r2, [pc, #56]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001ee6:	f043 0320 	orr.w	r3, r3, #32
 8001eea:	6313      	str	r3, [r2, #48]	; 0x30
 8001eec:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_TIM_MspPostInit+0x188>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef0:	f003 0320 	and.w	r3, r3, #32
 8001ef4:	60bb      	str	r3, [r7, #8]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001ef8:	2340      	movs	r3, #64	; 0x40
 8001efa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f00:	2300      	movs	r3, #0
 8001f02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	2300      	movs	r3, #0
 8001f06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001f0c:	f107 031c 	add.w	r3, r7, #28
 8001f10:	4619      	mov	r1, r3
 8001f12:	480b      	ldr	r0, [pc, #44]	; (8001f40 <HAL_TIM_MspPostInit+0x1a8>)
 8001f14:	f000 faf4 	bl	8002500 <HAL_GPIO_Init>
}
 8001f18:	bf00      	nop
 8001f1a:	3730      	adds	r7, #48	; 0x30
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}
 8001f20:	40023800 	.word	0x40023800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40000400 	.word	0x40000400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40000800 	.word	0x40000800
 8001f34:	40020c00 	.word	0x40020c00
 8001f38:	40000c00 	.word	0x40000c00
 8001f3c:	40014400 	.word	0x40014400
 8001f40:	40021400 	.word	0x40021400

08001f44 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f48:	4b11      	ldr	r3, [pc, #68]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f4a:	4a12      	ldr	r2, [pc, #72]	; (8001f94 <MX_USART3_UART_Init+0x50>)
 8001f4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f4e:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f56:	4b0e      	ldr	r3, [pc, #56]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001f62:	4b0b      	ldr	r3, [pc, #44]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f6a:	220c      	movs	r2, #12
 8001f6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6e:	4b08      	ldr	r3, [pc, #32]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f7a:	4805      	ldr	r0, [pc, #20]	; (8001f90 <MX_USART3_UART_Init+0x4c>)
 8001f7c:	f002 fb02 	bl	8004584 <HAL_UART_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001f86:	f7ff faa3 	bl	80014d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001f8a:	bf00      	nop
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	2000040c 	.word	0x2000040c
 8001f94:	40004800 	.word	0x40004800

08001f98 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b08a      	sub	sp, #40	; 0x28
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa0:	f107 0314 	add.w	r3, r7, #20
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	605a      	str	r2, [r3, #4]
 8001faa:	609a      	str	r2, [r3, #8]
 8001fac:	60da      	str	r2, [r3, #12]
 8001fae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a1d      	ldr	r2, [pc, #116]	; (800202c <HAL_UART_MspInit+0x94>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d134      	bne.n	8002024 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b1c      	ldr	r3, [pc, #112]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	4a1b      	ldr	r2, [pc, #108]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fca:	4b19      	ldr	r3, [pc, #100]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b15      	ldr	r3, [pc, #84]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a14      	ldr	r2, [pc, #80]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fe0:	f043 0308 	orr.w	r3, r3, #8
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b12      	ldr	r3, [pc, #72]	; (8002030 <HAL_UART_MspInit+0x98>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ff2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002000:	2303      	movs	r3, #3
 8002002:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002004:	2307      	movs	r3, #7
 8002006:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	4619      	mov	r1, r3
 800200e:	4809      	ldr	r0, [pc, #36]	; (8002034 <HAL_UART_MspInit+0x9c>)
 8002010:	f000 fa76 	bl	8002500 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002014:	2200      	movs	r2, #0
 8002016:	2100      	movs	r1, #0
 8002018:	2027      	movs	r0, #39	; 0x27
 800201a:	f000 f9a8 	bl	800236e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800201e:	2027      	movs	r0, #39	; 0x27
 8002020:	f000 f9c1 	bl	80023a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002024:	bf00      	nop
 8002026:	3728      	adds	r7, #40	; 0x28
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40004800 	.word	0x40004800
 8002030:	40023800 	.word	0x40023800
 8002034:	40020c00 	.word	0x40020c00

08002038 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002038:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002070 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800203c:	480d      	ldr	r0, [pc, #52]	; (8002074 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203e:	490e      	ldr	r1, [pc, #56]	; (8002078 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002042:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002044:	e002      	b.n	800204c <LoopCopyDataInit>

08002046 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002046:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002048:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800204a:	3304      	adds	r3, #4

0800204c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800204c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002050:	d3f9      	bcc.n	8002046 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002052:	4a0b      	ldr	r2, [pc, #44]	; (8002080 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002054:	4c0b      	ldr	r4, [pc, #44]	; (8002084 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002056:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002058:	e001      	b.n	800205e <LoopFillZerobss>

0800205a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800205a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800205c:	3204      	adds	r2, #4

0800205e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002060:	d3fb      	bcc.n	800205a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002062:	f7ff fb65 	bl	8001730 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002066:	f003 f9fb 	bl	8005460 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800206a:	f7ff f92b 	bl	80012c4 <main>
  bx  lr    
 800206e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002070:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002074:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002078:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 800207c:	0800a254 	.word	0x0800a254
  ldr r2, =_sbss
 8002080:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002084:	20000464 	.word	0x20000464

08002088 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002088:	e7fe      	b.n	8002088 <ADC_IRQHandler>
	...

0800208c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002090:	4b0e      	ldr	r3, [pc, #56]	; (80020cc <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a0d      	ldr	r2, [pc, #52]	; (80020cc <HAL_Init+0x40>)
 8002096:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800209a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800209c:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <HAL_Init+0x40>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a0a      	ldr	r2, [pc, #40]	; (80020cc <HAL_Init+0x40>)
 80020a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a07      	ldr	r2, [pc, #28]	; (80020cc <HAL_Init+0x40>)
 80020ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b4:	2003      	movs	r0, #3
 80020b6:	f000 f94f 	bl	8002358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020ba:	200f      	movs	r0, #15
 80020bc:	f000 f808 	bl	80020d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020c0:	f7ff fa0c 	bl	80014dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40023c00 	.word	0x40023c00

080020d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x54>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4b12      	ldr	r3, [pc, #72]	; (8002128 <HAL_InitTick+0x58>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	4619      	mov	r1, r3
 80020e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80020ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ee:	4618      	mov	r0, r3
 80020f0:	f000 f967 	bl	80023c2 <HAL_SYSTICK_Config>
 80020f4:	4603      	mov	r3, r0
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d001      	beq.n	80020fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e00e      	b.n	800211c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b0f      	cmp	r3, #15
 8002102:	d80a      	bhi.n	800211a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002104:	2200      	movs	r2, #0
 8002106:	6879      	ldr	r1, [r7, #4]
 8002108:	f04f 30ff 	mov.w	r0, #4294967295
 800210c:	f000 f92f 	bl	800236e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <HAL_InitTick+0x5c>)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002116:	2300      	movs	r3, #0
 8002118:	e000      	b.n	800211c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
}
 800211c:	4618      	mov	r0, r3
 800211e:	3708      	adds	r7, #8
 8002120:	46bd      	mov	sp, r7
 8002122:	bd80      	pop	{r7, pc}
 8002124:	20000000 	.word	0x20000000
 8002128:	20000008 	.word	0x20000008
 800212c:	20000004 	.word	0x20000004

08002130 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002130:	b480      	push	{r7}
 8002132:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002134:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x20>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b06      	ldr	r3, [pc, #24]	; (8002154 <HAL_IncTick+0x24>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4413      	add	r3, r2
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <HAL_IncTick+0x24>)
 8002142:	6013      	str	r3, [r2, #0]
}
 8002144:	bf00      	nop
 8002146:	46bd      	mov	sp, r7
 8002148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214c:	4770      	bx	lr
 800214e:	bf00      	nop
 8002150:	20000008 	.word	0x20000008
 8002154:	20000450 	.word	0x20000450

08002158 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  return uwTick;
 800215c:	4b03      	ldr	r3, [pc, #12]	; (800216c <HAL_GetTick+0x14>)
 800215e:	681b      	ldr	r3, [r3, #0]
}
 8002160:	4618      	mov	r0, r3
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
 800216a:	bf00      	nop
 800216c:	20000450 	.word	0x20000450

08002170 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002178:	f7ff ffee 	bl	8002158 <HAL_GetTick>
 800217c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002188:	d005      	beq.n	8002196 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_Delay+0x44>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	461a      	mov	r2, r3
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	4413      	add	r3, r2
 8002194:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002196:	bf00      	nop
 8002198:	f7ff ffde 	bl	8002158 <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d8f7      	bhi.n	8002198 <HAL_Delay+0x28>
  {
  }
}
 80021a8:	bf00      	nop
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000008 	.word	0x20000008

080021b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f003 0307 	and.w	r3, r3, #7
 80021c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021ce:	68ba      	ldr	r2, [r7, #8]
 80021d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021d4:	4013      	ands	r3, r2
 80021d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021ea:	4a04      	ldr	r2, [pc, #16]	; (80021fc <__NVIC_SetPriorityGrouping+0x44>)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	60d3      	str	r3, [r2, #12]
}
 80021f0:	bf00      	nop
 80021f2:	3714      	adds	r7, #20
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	e000ed00 	.word	0xe000ed00

08002200 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002204:	4b04      	ldr	r3, [pc, #16]	; (8002218 <__NVIC_GetPriorityGrouping+0x18>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	0a1b      	lsrs	r3, r3, #8
 800220a:	f003 0307 	and.w	r3, r3, #7
}
 800220e:	4618      	mov	r0, r3
 8002210:	46bd      	mov	sp, r7
 8002212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002216:	4770      	bx	lr
 8002218:	e000ed00 	.word	0xe000ed00

0800221c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	4603      	mov	r3, r0
 8002224:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800222a:	2b00      	cmp	r3, #0
 800222c:	db0b      	blt.n	8002246 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800222e:	79fb      	ldrb	r3, [r7, #7]
 8002230:	f003 021f 	and.w	r2, r3, #31
 8002234:	4907      	ldr	r1, [pc, #28]	; (8002254 <__NVIC_EnableIRQ+0x38>)
 8002236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800223a:	095b      	lsrs	r3, r3, #5
 800223c:	2001      	movs	r0, #1
 800223e:	fa00 f202 	lsl.w	r2, r0, r2
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	e000e100 	.word	0xe000e100

08002258 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	6039      	str	r1, [r7, #0]
 8002262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002268:	2b00      	cmp	r3, #0
 800226a:	db0a      	blt.n	8002282 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	b2da      	uxtb	r2, r3
 8002270:	490c      	ldr	r1, [pc, #48]	; (80022a4 <__NVIC_SetPriority+0x4c>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	0112      	lsls	r2, r2, #4
 8002278:	b2d2      	uxtb	r2, r2
 800227a:	440b      	add	r3, r1
 800227c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002280:	e00a      	b.n	8002298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	b2da      	uxtb	r2, r3
 8002286:	4908      	ldr	r1, [pc, #32]	; (80022a8 <__NVIC_SetPriority+0x50>)
 8002288:	79fb      	ldrb	r3, [r7, #7]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	3b04      	subs	r3, #4
 8002290:	0112      	lsls	r2, r2, #4
 8002292:	b2d2      	uxtb	r2, r2
 8002294:	440b      	add	r3, r1
 8002296:	761a      	strb	r2, [r3, #24]
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr
 80022a4:	e000e100 	.word	0xe000e100
 80022a8:	e000ed00 	.word	0xe000ed00

080022ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b089      	sub	sp, #36	; 0x24
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	f003 0307 	and.w	r3, r3, #7
 80022be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	f1c3 0307 	rsb	r3, r3, #7
 80022c6:	2b04      	cmp	r3, #4
 80022c8:	bf28      	it	cs
 80022ca:	2304      	movcs	r3, #4
 80022cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	3304      	adds	r3, #4
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d902      	bls.n	80022dc <NVIC_EncodePriority+0x30>
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	3b03      	subs	r3, #3
 80022da:	e000      	b.n	80022de <NVIC_EncodePriority+0x32>
 80022dc:	2300      	movs	r3, #0
 80022de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022e0:	f04f 32ff 	mov.w	r2, #4294967295
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43da      	mvns	r2, r3
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	401a      	ands	r2, r3
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022f4:	f04f 31ff 	mov.w	r1, #4294967295
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	fa01 f303 	lsl.w	r3, r1, r3
 80022fe:	43d9      	mvns	r1, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002304:	4313      	orrs	r3, r2
         );
}
 8002306:	4618      	mov	r0, r3
 8002308:	3724      	adds	r7, #36	; 0x24
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
	...

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	3b01      	subs	r3, #1
 8002320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002324:	d301      	bcc.n	800232a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002326:	2301      	movs	r3, #1
 8002328:	e00f      	b.n	800234a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232a:	4a0a      	ldr	r2, [pc, #40]	; (8002354 <SysTick_Config+0x40>)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	3b01      	subs	r3, #1
 8002330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002332:	210f      	movs	r1, #15
 8002334:	f04f 30ff 	mov.w	r0, #4294967295
 8002338:	f7ff ff8e 	bl	8002258 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800233c:	4b05      	ldr	r3, [pc, #20]	; (8002354 <SysTick_Config+0x40>)
 800233e:	2200      	movs	r2, #0
 8002340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002342:	4b04      	ldr	r3, [pc, #16]	; (8002354 <SysTick_Config+0x40>)
 8002344:	2207      	movs	r2, #7
 8002346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	e000e010 	.word	0xe000e010

08002358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f7ff ff29 	bl	80021b8 <__NVIC_SetPriorityGrouping>
}
 8002366:	bf00      	nop
 8002368:	3708      	adds	r7, #8
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800236e:	b580      	push	{r7, lr}
 8002370:	b086      	sub	sp, #24
 8002372:	af00      	add	r7, sp, #0
 8002374:	4603      	mov	r3, r0
 8002376:	60b9      	str	r1, [r7, #8]
 8002378:	607a      	str	r2, [r7, #4]
 800237a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800237c:	2300      	movs	r3, #0
 800237e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002380:	f7ff ff3e 	bl	8002200 <__NVIC_GetPriorityGrouping>
 8002384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	6978      	ldr	r0, [r7, #20]
 800238c:	f7ff ff8e 	bl	80022ac <NVIC_EncodePriority>
 8002390:	4602      	mov	r2, r0
 8002392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff ff5d 	bl	8002258 <__NVIC_SetPriority>
}
 800239e:	bf00      	nop
 80023a0:	3718      	adds	r7, #24
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	4603      	mov	r3, r0
 80023ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff ff31 	bl	800221c <__NVIC_EnableIRQ>
}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}

080023c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff ffa2 	bl	8002314 <SysTick_Config>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}

080023da <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023da:	b580      	push	{r7, lr}
 80023dc:	b084      	sub	sp, #16
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023e8:	f7ff feb6 	bl	8002158 <HAL_GetTick>
 80023ec:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d008      	beq.n	800240c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2280      	movs	r2, #128	; 0x80
 80023fe:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2200      	movs	r2, #0
 8002404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002408:	2301      	movs	r3, #1
 800240a:	e052      	b.n	80024b2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681a      	ldr	r2, [r3, #0]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f022 0216 	bic.w	r2, r2, #22
 800241a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	2b00      	cmp	r3, #0
 8002432:	d103      	bne.n	800243c <HAL_DMA_Abort+0x62>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f022 0208 	bic.w	r2, r2, #8
 800244a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800245c:	e013      	b.n	8002486 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800245e:	f7ff fe7b 	bl	8002158 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	2b05      	cmp	r3, #5
 800246a:	d90c      	bls.n	8002486 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2220      	movs	r2, #32
 8002470:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2203      	movs	r2, #3
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e015      	b.n	80024b2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0301 	and.w	r3, r3, #1
 8002490:	2b00      	cmp	r3, #0
 8002492:	d1e4      	bne.n	800245e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	223f      	movs	r2, #63	; 0x3f
 800249a:	409a      	lsls	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80024b0:	2300      	movs	r3, #0
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3710      	adds	r7, #16
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}

080024ba <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024ba:	b480      	push	{r7}
 80024bc:	b083      	sub	sp, #12
 80024be:	af00      	add	r7, sp, #0
 80024c0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024c8:	b2db      	uxtb	r3, r3
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d004      	beq.n	80024d8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2280      	movs	r2, #128	; 0x80
 80024d2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e00c      	b.n	80024f2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2205      	movs	r2, #5
 80024dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	681a      	ldr	r2, [r3, #0]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f022 0201 	bic.w	r2, r2, #1
 80024ee:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	370c      	adds	r7, #12
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
	...

08002500 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002500:	b480      	push	{r7}
 8002502:	b089      	sub	sp, #36	; 0x24
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
 8002508:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002512:	2300      	movs	r3, #0
 8002514:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
 800251a:	e177      	b.n	800280c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800251c:	2201      	movs	r2, #1
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	4013      	ands	r3, r2
 800252e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	429a      	cmp	r2, r3
 8002536:	f040 8166 	bne.w	8002806 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f003 0303 	and.w	r3, r3, #3
 8002542:	2b01      	cmp	r3, #1
 8002544:	d005      	beq.n	8002552 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800254e:	2b02      	cmp	r3, #2
 8002550:	d130      	bne.n	80025b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	2203      	movs	r2, #3
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43db      	mvns	r3, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4013      	ands	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	68da      	ldr	r2, [r3, #12]
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	fa02 f303 	lsl.w	r3, r2, r3
 8002576:	69ba      	ldr	r2, [r7, #24]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002588:	2201      	movs	r2, #1
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	091b      	lsrs	r3, r3, #4
 800259e:	f003 0201 	and.w	r2, r3, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025b4:	683b      	ldr	r3, [r7, #0]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	2b03      	cmp	r3, #3
 80025be:	d017      	beq.n	80025f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	005b      	lsls	r3, r3, #1
 80025ca:	2203      	movs	r2, #3
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	43db      	mvns	r3, r3
 80025d2:	69ba      	ldr	r2, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	005b      	lsls	r3, r3, #1
 80025e0:	fa02 f303 	lsl.w	r3, r2, r3
 80025e4:	69ba      	ldr	r2, [r7, #24]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	69ba      	ldr	r2, [r7, #24]
 80025ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f003 0303 	and.w	r3, r3, #3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d123      	bne.n	8002644 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	08da      	lsrs	r2, r3, #3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	3208      	adds	r2, #8
 8002604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002608:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	009b      	lsls	r3, r3, #2
 8002612:	220f      	movs	r2, #15
 8002614:	fa02 f303 	lsl.w	r3, r2, r3
 8002618:	43db      	mvns	r3, r3
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	4013      	ands	r3, r2
 800261e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002620:	683b      	ldr	r3, [r7, #0]
 8002622:	691a      	ldr	r2, [r3, #16]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	08da      	lsrs	r2, r3, #3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3208      	adds	r2, #8
 800263e:	69b9      	ldr	r1, [r7, #24]
 8002640:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	2203      	movs	r2, #3
 8002650:	fa02 f303 	lsl.w	r3, r2, r3
 8002654:	43db      	mvns	r3, r3
 8002656:	69ba      	ldr	r2, [r7, #24]
 8002658:	4013      	ands	r3, r2
 800265a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	005b      	lsls	r3, r3, #1
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4313      	orrs	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	69ba      	ldr	r2, [r7, #24]
 8002676:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002680:	2b00      	cmp	r3, #0
 8002682:	f000 80c0 	beq.w	8002806 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002686:	2300      	movs	r3, #0
 8002688:	60fb      	str	r3, [r7, #12]
 800268a:	4b66      	ldr	r3, [pc, #408]	; (8002824 <HAL_GPIO_Init+0x324>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	4a65      	ldr	r2, [pc, #404]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002694:	6453      	str	r3, [r2, #68]	; 0x44
 8002696:	4b63      	ldr	r3, [pc, #396]	; (8002824 <HAL_GPIO_Init+0x324>)
 8002698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026a2:	4a61      	ldr	r2, [pc, #388]	; (8002828 <HAL_GPIO_Init+0x328>)
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	089b      	lsrs	r3, r3, #2
 80026a8:	3302      	adds	r3, #2
 80026aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	f003 0303 	and.w	r3, r3, #3
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	220f      	movs	r2, #15
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	4a58      	ldr	r2, [pc, #352]	; (800282c <HAL_GPIO_Init+0x32c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d037      	beq.n	800273e <HAL_GPIO_Init+0x23e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	4a57      	ldr	r2, [pc, #348]	; (8002830 <HAL_GPIO_Init+0x330>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d031      	beq.n	800273a <HAL_GPIO_Init+0x23a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a56      	ldr	r2, [pc, #344]	; (8002834 <HAL_GPIO_Init+0x334>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d02b      	beq.n	8002736 <HAL_GPIO_Init+0x236>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a55      	ldr	r2, [pc, #340]	; (8002838 <HAL_GPIO_Init+0x338>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d025      	beq.n	8002732 <HAL_GPIO_Init+0x232>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a54      	ldr	r2, [pc, #336]	; (800283c <HAL_GPIO_Init+0x33c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d01f      	beq.n	800272e <HAL_GPIO_Init+0x22e>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a53      	ldr	r2, [pc, #332]	; (8002840 <HAL_GPIO_Init+0x340>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d019      	beq.n	800272a <HAL_GPIO_Init+0x22a>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a52      	ldr	r2, [pc, #328]	; (8002844 <HAL_GPIO_Init+0x344>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d013      	beq.n	8002726 <HAL_GPIO_Init+0x226>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a51      	ldr	r2, [pc, #324]	; (8002848 <HAL_GPIO_Init+0x348>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d00d      	beq.n	8002722 <HAL_GPIO_Init+0x222>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a50      	ldr	r2, [pc, #320]	; (800284c <HAL_GPIO_Init+0x34c>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d007      	beq.n	800271e <HAL_GPIO_Init+0x21e>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4a4f      	ldr	r2, [pc, #316]	; (8002850 <HAL_GPIO_Init+0x350>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d101      	bne.n	800271a <HAL_GPIO_Init+0x21a>
 8002716:	2309      	movs	r3, #9
 8002718:	e012      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271a:	230a      	movs	r3, #10
 800271c:	e010      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800271e:	2308      	movs	r3, #8
 8002720:	e00e      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002722:	2307      	movs	r3, #7
 8002724:	e00c      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002726:	2306      	movs	r3, #6
 8002728:	e00a      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272a:	2305      	movs	r3, #5
 800272c:	e008      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800272e:	2304      	movs	r3, #4
 8002730:	e006      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002732:	2303      	movs	r3, #3
 8002734:	e004      	b.n	8002740 <HAL_GPIO_Init+0x240>
 8002736:	2302      	movs	r3, #2
 8002738:	e002      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273a:	2301      	movs	r3, #1
 800273c:	e000      	b.n	8002740 <HAL_GPIO_Init+0x240>
 800273e:	2300      	movs	r3, #0
 8002740:	69fa      	ldr	r2, [r7, #28]
 8002742:	f002 0203 	and.w	r2, r2, #3
 8002746:	0092      	lsls	r2, r2, #2
 8002748:	4093      	lsls	r3, r2
 800274a:	69ba      	ldr	r2, [r7, #24]
 800274c:	4313      	orrs	r3, r2
 800274e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002750:	4935      	ldr	r1, [pc, #212]	; (8002828 <HAL_GPIO_Init+0x328>)
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	089b      	lsrs	r3, r3, #2
 8002756:	3302      	adds	r3, #2
 8002758:	69ba      	ldr	r2, [r7, #24]
 800275a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800275e:	4b3d      	ldr	r3, [pc, #244]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002764:	693b      	ldr	r3, [r7, #16]
 8002766:	43db      	mvns	r3, r3
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	4013      	ands	r3, r2
 800276c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d003      	beq.n	8002782 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800277a:	69ba      	ldr	r2, [r7, #24]
 800277c:	693b      	ldr	r3, [r7, #16]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002782:	4a34      	ldr	r2, [pc, #208]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002788:	4b32      	ldr	r3, [pc, #200]	; (8002854 <HAL_GPIO_Init+0x354>)
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	43db      	mvns	r3, r3
 8002792:	69ba      	ldr	r2, [r7, #24]
 8002794:	4013      	ands	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d003      	beq.n	80027ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80027a4:	69ba      	ldr	r2, [r7, #24]
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027ac:	4a29      	ldr	r2, [pc, #164]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	43db      	mvns	r3, r3
 80027bc:	69ba      	ldr	r2, [r7, #24]
 80027be:	4013      	ands	r3, r2
 80027c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d003      	beq.n	80027d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80027ce:	69ba      	ldr	r2, [r7, #24]
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80027d6:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80027dc:	4b1d      	ldr	r3, [pc, #116]	; (8002854 <HAL_GPIO_Init+0x354>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	43db      	mvns	r3, r3
 80027e6:	69ba      	ldr	r2, [r7, #24]
 80027e8:	4013      	ands	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d003      	beq.n	8002800 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80027f8:	69ba      	ldr	r2, [r7, #24]
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002800:	4a14      	ldr	r2, [pc, #80]	; (8002854 <HAL_GPIO_Init+0x354>)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	3301      	adds	r3, #1
 800280a:	61fb      	str	r3, [r7, #28]
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	2b0f      	cmp	r3, #15
 8002810:	f67f ae84 	bls.w	800251c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002814:	bf00      	nop
 8002816:	bf00      	nop
 8002818:	3724      	adds	r7, #36	; 0x24
 800281a:	46bd      	mov	sp, r7
 800281c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	40023800 	.word	0x40023800
 8002828:	40013800 	.word	0x40013800
 800282c:	40020000 	.word	0x40020000
 8002830:	40020400 	.word	0x40020400
 8002834:	40020800 	.word	0x40020800
 8002838:	40020c00 	.word	0x40020c00
 800283c:	40021000 	.word	0x40021000
 8002840:	40021400 	.word	0x40021400
 8002844:	40021800 	.word	0x40021800
 8002848:	40021c00 	.word	0x40021c00
 800284c:	40022000 	.word	0x40022000
 8002850:	40022400 	.word	0x40022400
 8002854:	40013c00 	.word	0x40013c00

08002858 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
 8002860:	460b      	mov	r3, r1
 8002862:	807b      	strh	r3, [r7, #2]
 8002864:	4613      	mov	r3, r2
 8002866:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002868:	787b      	ldrb	r3, [r7, #1]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d003      	beq.n	8002876 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800286e:	887a      	ldrh	r2, [r7, #2]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002874:	e003      	b.n	800287e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002876:	887b      	ldrh	r3, [r7, #2]
 8002878:	041a      	lsls	r2, r3, #16
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	619a      	str	r2, [r3, #24]
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002896:	4b08      	ldr	r3, [pc, #32]	; (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002898:	695a      	ldr	r2, [r3, #20]
 800289a:	88fb      	ldrh	r3, [r7, #6]
 800289c:	4013      	ands	r3, r2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d006      	beq.n	80028b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80028a2:	4a05      	ldr	r2, [pc, #20]	; (80028b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80028a4:	88fb      	ldrh	r3, [r7, #6]
 80028a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80028a8:	88fb      	ldrh	r3, [r7, #6]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f000 f806 	bl	80028bc <HAL_GPIO_EXTI_Callback>
  }
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40013c00 	.word	0x40013c00

080028bc <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028bc:	b480      	push	{r7}
 80028be:	b083      	sub	sp, #12
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	4603      	mov	r3, r0
 80028c4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80028c6:	bf00      	nop
 80028c8:	370c      	adds	r7, #12
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d101      	bne.n	80028e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e12b      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d106      	bne.n	8002900 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2200      	movs	r2, #0
 80028f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7fe fc80 	bl	8001200 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2224      	movs	r2, #36	; 0x24
 8002904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f022 0201 	bic.w	r2, r2, #1
 8002916:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002926:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681a      	ldr	r2, [r3, #0]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002936:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002938:	f000 fe28 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 800293c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	4a81      	ldr	r2, [pc, #516]	; (8002b48 <HAL_I2C_Init+0x274>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d807      	bhi.n	8002958 <HAL_I2C_Init+0x84>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	4a80      	ldr	r2, [pc, #512]	; (8002b4c <HAL_I2C_Init+0x278>)
 800294c:	4293      	cmp	r3, r2
 800294e:	bf94      	ite	ls
 8002950:	2301      	movls	r3, #1
 8002952:	2300      	movhi	r3, #0
 8002954:	b2db      	uxtb	r3, r3
 8002956:	e006      	b.n	8002966 <HAL_I2C_Init+0x92>
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a7d      	ldr	r2, [pc, #500]	; (8002b50 <HAL_I2C_Init+0x27c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	bf94      	ite	ls
 8002960:	2301      	movls	r3, #1
 8002962:	2300      	movhi	r3, #0
 8002964:	b2db      	uxtb	r3, r3
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e0e7      	b.n	8002b3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4a78      	ldr	r2, [pc, #480]	; (8002b54 <HAL_I2C_Init+0x280>)
 8002972:	fba2 2303 	umull	r2, r3, r2, r3
 8002976:	0c9b      	lsrs	r3, r3, #18
 8002978:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	68ba      	ldr	r2, [r7, #8]
 800298a:	430a      	orrs	r2, r1
 800298c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6a1b      	ldr	r3, [r3, #32]
 8002994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	4a6a      	ldr	r2, [pc, #424]	; (8002b48 <HAL_I2C_Init+0x274>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d802      	bhi.n	80029a8 <HAL_I2C_Init+0xd4>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	3301      	adds	r3, #1
 80029a6:	e009      	b.n	80029bc <HAL_I2C_Init+0xe8>
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029ae:	fb02 f303 	mul.w	r3, r2, r3
 80029b2:	4a69      	ldr	r2, [pc, #420]	; (8002b58 <HAL_I2C_Init+0x284>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	099b      	lsrs	r3, r3, #6
 80029ba:	3301      	adds	r3, #1
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6812      	ldr	r2, [r2, #0]
 80029c0:	430b      	orrs	r3, r1
 80029c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029ce:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	495c      	ldr	r1, [pc, #368]	; (8002b48 <HAL_I2C_Init+0x274>)
 80029d8:	428b      	cmp	r3, r1
 80029da:	d819      	bhi.n	8002a10 <HAL_I2C_Init+0x13c>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	1e59      	subs	r1, r3, #1
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	005b      	lsls	r3, r3, #1
 80029e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ea:	1c59      	adds	r1, r3, #1
 80029ec:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f0:	400b      	ands	r3, r1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d00a      	beq.n	8002a0c <HAL_I2C_Init+0x138>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	1e59      	subs	r1, r3, #1
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a04:	3301      	adds	r3, #1
 8002a06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0a:	e051      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a0c:	2304      	movs	r3, #4
 8002a0e:	e04f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d111      	bne.n	8002a3c <HAL_I2C_Init+0x168>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	1e58      	subs	r0, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6859      	ldr	r1, [r3, #4]
 8002a20:	460b      	mov	r3, r1
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	440b      	add	r3, r1
 8002a26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	bf0c      	ite	eq
 8002a34:	2301      	moveq	r3, #1
 8002a36:	2300      	movne	r3, #0
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	e012      	b.n	8002a62 <HAL_I2C_Init+0x18e>
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	1e58      	subs	r0, r3, #1
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6859      	ldr	r1, [r3, #4]
 8002a44:	460b      	mov	r3, r1
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	0099      	lsls	r1, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a52:	3301      	adds	r3, #1
 8002a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	bf0c      	ite	eq
 8002a5c:	2301      	moveq	r3, #1
 8002a5e:	2300      	movne	r3, #0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_I2C_Init+0x196>
 8002a66:	2301      	movs	r3, #1
 8002a68:	e022      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10e      	bne.n	8002a90 <HAL_I2C_Init+0x1bc>
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	1e58      	subs	r0, r3, #1
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	005b      	lsls	r3, r3, #1
 8002a7e:	440b      	add	r3, r1
 8002a80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a84:	3301      	adds	r3, #1
 8002a86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a8e:	e00f      	b.n	8002ab0 <HAL_I2C_Init+0x1dc>
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	1e58      	subs	r0, r3, #1
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	460b      	mov	r3, r1
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	0099      	lsls	r1, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002aac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	6809      	ldr	r1, [r1, #0]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	69da      	ldr	r2, [r3, #28]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	431a      	orrs	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ade:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae2:	687a      	ldr	r2, [r7, #4]
 8002ae4:	6911      	ldr	r1, [r2, #16]
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68d2      	ldr	r2, [r2, #12]
 8002aea:	4311      	orrs	r1, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6812      	ldr	r2, [r2, #0]
 8002af0:	430b      	orrs	r3, r1
 8002af2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	68db      	ldr	r3, [r3, #12]
 8002afa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695a      	ldr	r2, [r3, #20]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	699b      	ldr	r3, [r3, #24]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	430a      	orrs	r2, r1
 8002b0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f042 0201 	orr.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2220      	movs	r2, #32
 8002b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3710      	adds	r7, #16
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	bf00      	nop
 8002b48:	000186a0 	.word	0x000186a0
 8002b4c:	001e847f 	.word	0x001e847f
 8002b50:	003d08ff 	.word	0x003d08ff
 8002b54:	431bde83 	.word	0x431bde83
 8002b58:	10624dd3 	.word	0x10624dd3

08002b5c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d129      	bne.n	8002bc6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2224      	movs	r2, #36	; 0x24
 8002b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0201 	bic.w	r2, r2, #1
 8002b88:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0210 	bic.w	r2, r2, #16
 8002b98:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f042 0201 	orr.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2220      	movs	r2, #32
 8002bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	e000      	b.n	8002bc8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002bc6:	2302      	movs	r3, #2
  }
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	370c      	adds	r7, #12
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr

08002bd4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b085      	sub	sp, #20
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002bde:	2300      	movs	r3, #0
 8002be0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d12a      	bne.n	8002c44 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2224      	movs	r2, #36	; 0x24
 8002bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002c0e:	89fb      	ldrh	r3, [r7, #14]
 8002c10:	f023 030f 	bic.w	r3, r3, #15
 8002c14:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	89fb      	ldrh	r3, [r7, #14]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	89fa      	ldrh	r2, [r7, #14]
 8002c26:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2220      	movs	r2, #32
 8002c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	e000      	b.n	8002c46 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002c44:	2302      	movs	r3, #2
  }
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3714      	adds	r7, #20
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c50:	4770      	bx	lr
	...

08002c54 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b082      	sub	sp, #8
 8002c58:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c5e:	2300      	movs	r3, #0
 8002c60:	603b      	str	r3, [r7, #0]
 8002c62:	4b20      	ldr	r3, [pc, #128]	; (8002ce4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c66:	4a1f      	ldr	r2, [pc, #124]	; (8002ce4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ce4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c76:	603b      	str	r3, [r7, #0]
 8002c78:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ce8 <HAL_PWREx_EnableOverDrive+0x94>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c80:	f7ff fa6a 	bl	8002158 <HAL_GetTick>
 8002c84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c86:	e009      	b.n	8002c9c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c88:	f7ff fa66 	bl	8002158 <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c96:	d901      	bls.n	8002c9c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002c98:	2303      	movs	r3, #3
 8002c9a:	e01f      	b.n	8002cdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c9c:	4b13      	ldr	r3, [pc, #76]	; (8002cec <HAL_PWREx_EnableOverDrive+0x98>)
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ca4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ca8:	d1ee      	bne.n	8002c88 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cac:	2201      	movs	r2, #1
 8002cae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb0:	f7ff fa52 	bl	8002158 <HAL_GetTick>
 8002cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cb6:	e009      	b.n	8002ccc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cb8:	f7ff fa4e 	bl	8002158 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cc6:	d901      	bls.n	8002ccc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002cc8:	2303      	movs	r3, #3
 8002cca:	e007      	b.n	8002cdc <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <HAL_PWREx_EnableOverDrive+0x98>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	420e0040 	.word	0x420e0040
 8002cec:	40007000 	.word	0x40007000
 8002cf0:	420e0044 	.word	0x420e0044

08002cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d02:	2301      	movs	r3, #1
 8002d04:	e264      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0301 	and.w	r3, r3, #1
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d075      	beq.n	8002dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d12:	4ba3      	ldr	r3, [pc, #652]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d00c      	beq.n	8002d38 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1e:	4ba0      	ldr	r3, [pc, #640]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d26:	2b08      	cmp	r3, #8
 8002d28:	d112      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d2a:	4b9d      	ldr	r3, [pc, #628]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d2c:	685b      	ldr	r3, [r3, #4]
 8002d2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d32:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d36:	d10b      	bne.n	8002d50 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d38:	4b99      	ldr	r3, [pc, #612]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d05b      	beq.n	8002dfc <HAL_RCC_OscConfig+0x108>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d157      	bne.n	8002dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e23f      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d58:	d106      	bne.n	8002d68 <HAL_RCC_OscConfig+0x74>
 8002d5a:	4b91      	ldr	r3, [pc, #580]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a90      	ldr	r2, [pc, #576]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d64:	6013      	str	r3, [r2, #0]
 8002d66:	e01d      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	685b      	ldr	r3, [r3, #4]
 8002d6c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d70:	d10c      	bne.n	8002d8c <HAL_RCC_OscConfig+0x98>
 8002d72:	4b8b      	ldr	r3, [pc, #556]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a8a      	ldr	r2, [pc, #552]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d7c:	6013      	str	r3, [r2, #0]
 8002d7e:	4b88      	ldr	r3, [pc, #544]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a87      	ldr	r2, [pc, #540]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d88:	6013      	str	r3, [r2, #0]
 8002d8a:	e00b      	b.n	8002da4 <HAL_RCC_OscConfig+0xb0>
 8002d8c:	4b84      	ldr	r3, [pc, #528]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a83      	ldr	r2, [pc, #524]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d96:	6013      	str	r3, [r2, #0]
 8002d98:	4b81      	ldr	r3, [pc, #516]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a80      	ldr	r2, [pc, #512]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002d9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d013      	beq.n	8002dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7ff f9d4 	bl	8002158 <HAL_GetTick>
 8002db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002db2:	e008      	b.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db4:	f7ff f9d0 	bl	8002158 <HAL_GetTick>
 8002db8:	4602      	mov	r2, r0
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	1ad3      	subs	r3, r2, r3
 8002dbe:	2b64      	cmp	r3, #100	; 0x64
 8002dc0:	d901      	bls.n	8002dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dc2:	2303      	movs	r3, #3
 8002dc4:	e204      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc6:	4b76      	ldr	r3, [pc, #472]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d0f0      	beq.n	8002db4 <HAL_RCC_OscConfig+0xc0>
 8002dd2:	e014      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd4:	f7ff f9c0 	bl	8002158 <HAL_GetTick>
 8002dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dda:	e008      	b.n	8002dee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ddc:	f7ff f9bc 	bl	8002158 <HAL_GetTick>
 8002de0:	4602      	mov	r2, r0
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	1ad3      	subs	r3, r2, r3
 8002de6:	2b64      	cmp	r3, #100	; 0x64
 8002de8:	d901      	bls.n	8002dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dea:	2303      	movs	r3, #3
 8002dec:	e1f0      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dee:	4b6c      	ldr	r3, [pc, #432]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d1f0      	bne.n	8002ddc <HAL_RCC_OscConfig+0xe8>
 8002dfa:	e000      	b.n	8002dfe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d063      	beq.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e0a:	4b65      	ldr	r3, [pc, #404]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e0c:	689b      	ldr	r3, [r3, #8]
 8002e0e:	f003 030c 	and.w	r3, r3, #12
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d00b      	beq.n	8002e2e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e16:	4b62      	ldr	r3, [pc, #392]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1e:	2b08      	cmp	r3, #8
 8002e20:	d11c      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e22:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d116      	bne.n	8002e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2e:	4b5c      	ldr	r3, [pc, #368]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d001      	beq.n	8002e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e1c4      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b56      	ldr	r3, [pc, #344]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4952      	ldr	r1, [pc, #328]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e5a:	e03a      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d020      	beq.n	8002ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e64:	4b4f      	ldr	r3, [pc, #316]	; (8002fa4 <HAL_RCC_OscConfig+0x2b0>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e6a:	f7ff f975 	bl	8002158 <HAL_GetTick>
 8002e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e70:	e008      	b.n	8002e84 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e72:	f7ff f971 	bl	8002158 <HAL_GetTick>
 8002e76:	4602      	mov	r2, r0
 8002e78:	693b      	ldr	r3, [r7, #16]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b02      	cmp	r3, #2
 8002e7e:	d901      	bls.n	8002e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e80:	2303      	movs	r3, #3
 8002e82:	e1a5      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e84:	4b46      	ldr	r3, [pc, #280]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0f0      	beq.n	8002e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e90:	4b43      	ldr	r3, [pc, #268]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	4940      	ldr	r1, [pc, #256]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	600b      	str	r3, [r1, #0]
 8002ea4:	e015      	b.n	8002ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea6:	4b3f      	ldr	r3, [pc, #252]	; (8002fa4 <HAL_RCC_OscConfig+0x2b0>)
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7ff f954 	bl	8002158 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb4:	f7ff f950 	bl	8002158 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b02      	cmp	r3, #2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e184      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec6:	4b36      	ldr	r3, [pc, #216]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d030      	beq.n	8002f40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	695b      	ldr	r3, [r3, #20]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d016      	beq.n	8002f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee6:	4b30      	ldr	r3, [pc, #192]	; (8002fa8 <HAL_RCC_OscConfig+0x2b4>)
 8002ee8:	2201      	movs	r2, #1
 8002eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eec:	f7ff f934 	bl	8002158 <HAL_GetTick>
 8002ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ef2:	e008      	b.n	8002f06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef4:	f7ff f930 	bl	8002158 <HAL_GetTick>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1ad3      	subs	r3, r2, r3
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d901      	bls.n	8002f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f02:	2303      	movs	r3, #3
 8002f04:	e164      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f06:	4b26      	ldr	r3, [pc, #152]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f0a:	f003 0302 	and.w	r3, r3, #2
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d0f0      	beq.n	8002ef4 <HAL_RCC_OscConfig+0x200>
 8002f12:	e015      	b.n	8002f40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f14:	4b24      	ldr	r3, [pc, #144]	; (8002fa8 <HAL_RCC_OscConfig+0x2b4>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f1a:	f7ff f91d 	bl	8002158 <HAL_GetTick>
 8002f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f20:	e008      	b.n	8002f34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f22:	f7ff f919 	bl	8002158 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b02      	cmp	r3, #2
 8002f2e:	d901      	bls.n	8002f34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	e14d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f34:	4b1a      	ldr	r3, [pc, #104]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f38:	f003 0302 	and.w	r3, r3, #2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d1f0      	bne.n	8002f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a0 	beq.w	800308e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b13      	ldr	r3, [pc, #76]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10f      	bne.n	8002f7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
 8002f62:	4b0f      	ldr	r3, [pc, #60]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f66:	4a0e      	ldr	r2, [pc, #56]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f6e:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <HAL_RCC_OscConfig+0x2ac>)
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f7e:	4b0b      	ldr	r3, [pc, #44]	; (8002fac <HAL_RCC_OscConfig+0x2b8>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d121      	bne.n	8002fce <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_RCC_OscConfig+0x2b8>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a07      	ldr	r2, [pc, #28]	; (8002fac <HAL_RCC_OscConfig+0x2b8>)
 8002f90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f96:	f7ff f8df 	bl	8002158 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f9c:	e011      	b.n	8002fc2 <HAL_RCC_OscConfig+0x2ce>
 8002f9e:	bf00      	nop
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	42470000 	.word	0x42470000
 8002fa8:	42470e80 	.word	0x42470e80
 8002fac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fb0:	f7ff f8d2 	bl	8002158 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e106      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc2:	4b85      	ldr	r3, [pc, #532]	; (80031d8 <HAL_RCC_OscConfig+0x4e4>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d106      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x2f0>
 8002fd6:	4b81      	ldr	r3, [pc, #516]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fda:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002fdc:	f043 0301 	orr.w	r3, r3, #1
 8002fe0:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe2:	e01c      	b.n	800301e <HAL_RCC_OscConfig+0x32a>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x312>
 8002fec:	4b7b      	ldr	r3, [pc, #492]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff0:	4a7a      	ldr	r2, [pc, #488]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff8:	4b78      	ldr	r3, [pc, #480]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ffc:	4a77      	ldr	r2, [pc, #476]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6713      	str	r3, [r2, #112]	; 0x70
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x32a>
 8003006:	4b75      	ldr	r3, [pc, #468]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003008:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300a:	4a74      	ldr	r2, [pc, #464]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6713      	str	r3, [r2, #112]	; 0x70
 8003012:	4b72      	ldr	r3, [pc, #456]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003014:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003016:	4a71      	ldr	r2, [pc, #452]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7ff f897 	bl	8002158 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7ff f893 	bl	8002158 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0c5      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b65      	ldr	r3, [pc, #404]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCC_OscConfig+0x33a>
 8003050:	e014      	b.n	800307c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7ff f881 	bl	8002158 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7ff f87d 	bl	8002158 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e0af      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b5a      	ldr	r3, [pc, #360]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003072:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b56      	ldr	r3, [pc, #344]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003086:	4a55      	ldr	r2, [pc, #340]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	699b      	ldr	r3, [r3, #24]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 809b 	beq.w	80031ce <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003098:	4b50      	ldr	r3, [pc, #320]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d05c      	beq.n	800315e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	699b      	ldr	r3, [r3, #24]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d141      	bne.n	8003130 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b4c      	ldr	r3, [pc, #304]	; (80031e0 <HAL_RCC_OscConfig+0x4ec>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7ff f851 	bl	8002158 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030ba:	f7ff f84d 	bl	8002158 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e081      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030cc:	4b43      	ldr	r3, [pc, #268]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69da      	ldr	r2, [r3, #28]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	431a      	orrs	r2, r3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e6:	019b      	lsls	r3, r3, #6
 80030e8:	431a      	orrs	r2, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	085b      	lsrs	r3, r3, #1
 80030f0:	3b01      	subs	r3, #1
 80030f2:	041b      	lsls	r3, r3, #16
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	061b      	lsls	r3, r3, #24
 80030fc:	4937      	ldr	r1, [pc, #220]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003102:	4b37      	ldr	r3, [pc, #220]	; (80031e0 <HAL_RCC_OscConfig+0x4ec>)
 8003104:	2201      	movs	r2, #1
 8003106:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f826 	bl	8002158 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003110:	f7ff f822 	bl	8002158 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b02      	cmp	r3, #2
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e056      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003122:	4b2e      	ldr	r3, [pc, #184]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0x41c>
 800312e:	e04e      	b.n	80031ce <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003130:	4b2b      	ldr	r3, [pc, #172]	; (80031e0 <HAL_RCC_OscConfig+0x4ec>)
 8003132:	2200      	movs	r2, #0
 8003134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003136:	f7ff f80f 	bl	8002158 <HAL_GetTick>
 800313a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313c:	e008      	b.n	8003150 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800313e:	f7ff f80b 	bl	8002158 <HAL_GetTick>
 8003142:	4602      	mov	r2, r0
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	1ad3      	subs	r3, r2, r3
 8003148:	2b02      	cmp	r3, #2
 800314a:	d901      	bls.n	8003150 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800314c:	2303      	movs	r3, #3
 800314e:	e03f      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003150:	4b22      	ldr	r3, [pc, #136]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d1f0      	bne.n	800313e <HAL_RCC_OscConfig+0x44a>
 800315c:	e037      	b.n	80031ce <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	699b      	ldr	r3, [r3, #24]
 8003162:	2b01      	cmp	r3, #1
 8003164:	d101      	bne.n	800316a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e032      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316a:	4b1c      	ldr	r3, [pc, #112]	; (80031dc <HAL_RCC_OscConfig+0x4e8>)
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d028      	beq.n	80031ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003182:	429a      	cmp	r2, r3
 8003184:	d121      	bne.n	80031ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003190:	429a      	cmp	r2, r3
 8003192:	d11a      	bne.n	80031ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319a:	4013      	ands	r3, r2
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d111      	bne.n	80031ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	3b01      	subs	r3, #1
 80031b4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d107      	bne.n	80031ca <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d001      	beq.n	80031ce <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e000      	b.n	80031d0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80031ce:	2300      	movs	r3, #0
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	3718      	adds	r7, #24
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40007000 	.word	0x40007000
 80031dc:	40023800 	.word	0x40023800
 80031e0:	42470060 	.word	0x42470060

080031e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b084      	sub	sp, #16
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
 80031ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d101      	bne.n	80031f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0cc      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f8:	4b68      	ldr	r3, [pc, #416]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 030f 	and.w	r3, r3, #15
 8003200:	683a      	ldr	r2, [r7, #0]
 8003202:	429a      	cmp	r2, r3
 8003204:	d90c      	bls.n	8003220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003206:	4b65      	ldr	r3, [pc, #404]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003208:	683a      	ldr	r2, [r7, #0]
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b63      	ldr	r3, [pc, #396]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b8      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0302 	and.w	r3, r3, #2
 8003228:	2b00      	cmp	r3, #0
 800322a:	d020      	beq.n	800326e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0304 	and.w	r3, r3, #4
 8003234:	2b00      	cmp	r3, #0
 8003236:	d005      	beq.n	8003244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003238:	4b59      	ldr	r3, [pc, #356]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	4a58      	ldr	r2, [pc, #352]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800323e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003242:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f003 0308 	and.w	r3, r3, #8
 800324c:	2b00      	cmp	r3, #0
 800324e:	d005      	beq.n	800325c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003250:	4b53      	ldr	r3, [pc, #332]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	4a52      	ldr	r2, [pc, #328]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003256:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800325a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800325c:	4b50      	ldr	r3, [pc, #320]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	689b      	ldr	r3, [r3, #8]
 8003268:	494d      	ldr	r1, [pc, #308]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800326a:	4313      	orrs	r3, r2
 800326c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0301 	and.w	r3, r3, #1
 8003276:	2b00      	cmp	r3, #0
 8003278:	d044      	beq.n	8003304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d107      	bne.n	8003292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003282:	4b47      	ldr	r3, [pc, #284]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d119      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e07f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d003      	beq.n	80032a2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329e:	2b03      	cmp	r3, #3
 80032a0:	d107      	bne.n	80032b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a2:	4b3f      	ldr	r3, [pc, #252]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d109      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e06f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032b2:	4b3b      	ldr	r3, [pc, #236]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0302 	and.w	r3, r3, #2
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e067      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032c2:	4b37      	ldr	r3, [pc, #220]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f023 0203 	bic.w	r2, r3, #3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	4934      	ldr	r1, [pc, #208]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d4:	f7fe ff40 	bl	8002158 <HAL_GetTick>
 80032d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032da:	e00a      	b.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032dc:	f7fe ff3c 	bl	8002158 <HAL_GetTick>
 80032e0:	4602      	mov	r2, r0
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1ad3      	subs	r3, r2, r3
 80032e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d901      	bls.n	80032f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	e04f      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032f2:	4b2b      	ldr	r3, [pc, #172]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 020c 	and.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	429a      	cmp	r2, r3
 8003302:	d1eb      	bne.n	80032dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003304:	4b25      	ldr	r3, [pc, #148]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 030f 	and.w	r3, r3, #15
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	429a      	cmp	r2, r3
 8003310:	d20c      	bcs.n	800332c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	683a      	ldr	r2, [r7, #0]
 8003316:	b2d2      	uxtb	r2, r2
 8003318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800331a:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_RCC_ClockConfig+0x1b8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 030f 	and.w	r3, r3, #15
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d001      	beq.n	800332c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e032      	b.n	8003392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0304 	and.w	r3, r3, #4
 8003334:	2b00      	cmp	r3, #0
 8003336:	d008      	beq.n	800334a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003338:	4b19      	ldr	r3, [pc, #100]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4916      	ldr	r1, [pc, #88]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0308 	and.w	r3, r3, #8
 8003352:	2b00      	cmp	r3, #0
 8003354:	d009      	beq.n	800336a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003356:	4b12      	ldr	r3, [pc, #72]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	490e      	ldr	r1, [pc, #56]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	4313      	orrs	r3, r2
 8003368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800336a:	f000 f821 	bl	80033b0 <HAL_RCC_GetSysClockFreq>
 800336e:	4602      	mov	r2, r0
 8003370:	4b0b      	ldr	r3, [pc, #44]	; (80033a0 <HAL_RCC_ClockConfig+0x1bc>)
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	091b      	lsrs	r3, r3, #4
 8003376:	f003 030f 	and.w	r3, r3, #15
 800337a:	490a      	ldr	r1, [pc, #40]	; (80033a4 <HAL_RCC_ClockConfig+0x1c0>)
 800337c:	5ccb      	ldrb	r3, [r1, r3]
 800337e:	fa22 f303 	lsr.w	r3, r2, r3
 8003382:	4a09      	ldr	r2, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003386:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_RCC_ClockConfig+0x1c8>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fea0 	bl	80020d0 <HAL_InitTick>

  return HAL_OK;
 8003390:	2300      	movs	r3, #0
}
 8003392:	4618      	mov	r0, r3
 8003394:	3710      	adds	r7, #16
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	40023c00 	.word	0x40023c00
 80033a0:	40023800 	.word	0x40023800
 80033a4:	08009d78 	.word	0x08009d78
 80033a8:	20000000 	.word	0x20000000
 80033ac:	20000004 	.word	0x20000004

080033b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033b4:	b084      	sub	sp, #16
 80033b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b8:	2300      	movs	r3, #0
 80033ba:	607b      	str	r3, [r7, #4]
 80033bc:	2300      	movs	r3, #0
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	2300      	movs	r3, #0
 80033c2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80033c4:	2300      	movs	r3, #0
 80033c6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c8:	4b67      	ldr	r3, [pc, #412]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f003 030c 	and.w	r3, r3, #12
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d00d      	beq.n	80033f0 <HAL_RCC_GetSysClockFreq+0x40>
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	f200 80bd 	bhi.w	8003554 <HAL_RCC_GetSysClockFreq+0x1a4>
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d002      	beq.n	80033e4 <HAL_RCC_GetSysClockFreq+0x34>
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d003      	beq.n	80033ea <HAL_RCC_GetSysClockFreq+0x3a>
 80033e2:	e0b7      	b.n	8003554 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b61      	ldr	r3, [pc, #388]	; (800356c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033e6:	60bb      	str	r3, [r7, #8]
       break;
 80033e8:	e0b7      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033ea:	4b61      	ldr	r3, [pc, #388]	; (8003570 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033ec:	60bb      	str	r3, [r7, #8]
      break;
 80033ee:	e0b4      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033f0:	4b5d      	ldr	r3, [pc, #372]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033fa:	4b5b      	ldr	r3, [pc, #364]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003402:	2b00      	cmp	r3, #0
 8003404:	d04d      	beq.n	80034a2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003406:	4b58      	ldr	r3, [pc, #352]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	099b      	lsrs	r3, r3, #6
 800340c:	461a      	mov	r2, r3
 800340e:	f04f 0300 	mov.w	r3, #0
 8003412:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003416:	f04f 0100 	mov.w	r1, #0
 800341a:	ea02 0800 	and.w	r8, r2, r0
 800341e:	ea03 0901 	and.w	r9, r3, r1
 8003422:	4640      	mov	r0, r8
 8003424:	4649      	mov	r1, r9
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	f04f 0300 	mov.w	r3, #0
 800342e:	014b      	lsls	r3, r1, #5
 8003430:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003434:	0142      	lsls	r2, r0, #5
 8003436:	4610      	mov	r0, r2
 8003438:	4619      	mov	r1, r3
 800343a:	ebb0 0008 	subs.w	r0, r0, r8
 800343e:	eb61 0109 	sbc.w	r1, r1, r9
 8003442:	f04f 0200 	mov.w	r2, #0
 8003446:	f04f 0300 	mov.w	r3, #0
 800344a:	018b      	lsls	r3, r1, #6
 800344c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003450:	0182      	lsls	r2, r0, #6
 8003452:	1a12      	subs	r2, r2, r0
 8003454:	eb63 0301 	sbc.w	r3, r3, r1
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	f04f 0100 	mov.w	r1, #0
 8003460:	00d9      	lsls	r1, r3, #3
 8003462:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003466:	00d0      	lsls	r0, r2, #3
 8003468:	4602      	mov	r2, r0
 800346a:	460b      	mov	r3, r1
 800346c:	eb12 0208 	adds.w	r2, r2, r8
 8003470:	eb43 0309 	adc.w	r3, r3, r9
 8003474:	f04f 0000 	mov.w	r0, #0
 8003478:	f04f 0100 	mov.w	r1, #0
 800347c:	0259      	lsls	r1, r3, #9
 800347e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003482:	0250      	lsls	r0, r2, #9
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4610      	mov	r0, r2
 800348a:	4619      	mov	r1, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	461a      	mov	r2, r3
 8003490:	f04f 0300 	mov.w	r3, #0
 8003494:	f7fd fc08 	bl	8000ca8 <__aeabi_uldivmod>
 8003498:	4602      	mov	r2, r0
 800349a:	460b      	mov	r3, r1
 800349c:	4613      	mov	r3, r2
 800349e:	60fb      	str	r3, [r7, #12]
 80034a0:	e04a      	b.n	8003538 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	099b      	lsrs	r3, r3, #6
 80034a8:	461a      	mov	r2, r3
 80034aa:	f04f 0300 	mov.w	r3, #0
 80034ae:	f240 10ff 	movw	r0, #511	; 0x1ff
 80034b2:	f04f 0100 	mov.w	r1, #0
 80034b6:	ea02 0400 	and.w	r4, r2, r0
 80034ba:	ea03 0501 	and.w	r5, r3, r1
 80034be:	4620      	mov	r0, r4
 80034c0:	4629      	mov	r1, r5
 80034c2:	f04f 0200 	mov.w	r2, #0
 80034c6:	f04f 0300 	mov.w	r3, #0
 80034ca:	014b      	lsls	r3, r1, #5
 80034cc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034d0:	0142      	lsls	r2, r0, #5
 80034d2:	4610      	mov	r0, r2
 80034d4:	4619      	mov	r1, r3
 80034d6:	1b00      	subs	r0, r0, r4
 80034d8:	eb61 0105 	sbc.w	r1, r1, r5
 80034dc:	f04f 0200 	mov.w	r2, #0
 80034e0:	f04f 0300 	mov.w	r3, #0
 80034e4:	018b      	lsls	r3, r1, #6
 80034e6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034ea:	0182      	lsls	r2, r0, #6
 80034ec:	1a12      	subs	r2, r2, r0
 80034ee:	eb63 0301 	sbc.w	r3, r3, r1
 80034f2:	f04f 0000 	mov.w	r0, #0
 80034f6:	f04f 0100 	mov.w	r1, #0
 80034fa:	00d9      	lsls	r1, r3, #3
 80034fc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003500:	00d0      	lsls	r0, r2, #3
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	1912      	adds	r2, r2, r4
 8003508:	eb45 0303 	adc.w	r3, r5, r3
 800350c:	f04f 0000 	mov.w	r0, #0
 8003510:	f04f 0100 	mov.w	r1, #0
 8003514:	0299      	lsls	r1, r3, #10
 8003516:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800351a:	0290      	lsls	r0, r2, #10
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4610      	mov	r0, r2
 8003522:	4619      	mov	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	461a      	mov	r2, r3
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	f7fd fbbc 	bl	8000ca8 <__aeabi_uldivmod>
 8003530:	4602      	mov	r2, r0
 8003532:	460b      	mov	r3, r1
 8003534:	4613      	mov	r3, r2
 8003536:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003538:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	f003 0303 	and.w	r3, r3, #3
 8003542:	3301      	adds	r3, #1
 8003544:	005b      	lsls	r3, r3, #1
 8003546:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003550:	60bb      	str	r3, [r7, #8]
      break;
 8003552:	e002      	b.n	800355a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003554:	4b05      	ldr	r3, [pc, #20]	; (800356c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003556:	60bb      	str	r3, [r7, #8]
      break;
 8003558:	bf00      	nop
    }
  }
  return sysclockfreq;
 800355a:	68bb      	ldr	r3, [r7, #8]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003566:	bf00      	nop
 8003568:	40023800 	.word	0x40023800
 800356c:	00f42400 	.word	0x00f42400
 8003570:	007a1200 	.word	0x007a1200

08003574 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003578:	4b03      	ldr	r3, [pc, #12]	; (8003588 <HAL_RCC_GetHCLKFreq+0x14>)
 800357a:	681b      	ldr	r3, [r3, #0]
}
 800357c:	4618      	mov	r0, r3
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	20000000 	.word	0x20000000

0800358c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003590:	f7ff fff0 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 8003594:	4602      	mov	r2, r0
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8003598:	689b      	ldr	r3, [r3, #8]
 800359a:	0a9b      	lsrs	r3, r3, #10
 800359c:	f003 0307 	and.w	r3, r3, #7
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40023800 	.word	0x40023800
 80035b0:	08009d88 	.word	0x08009d88

080035b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035b8:	f7ff ffdc 	bl	8003574 <HAL_RCC_GetHCLKFreq>
 80035bc:	4602      	mov	r2, r0
 80035be:	4b05      	ldr	r3, [pc, #20]	; (80035d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	0b5b      	lsrs	r3, r3, #13
 80035c4:	f003 0307 	and.w	r3, r3, #7
 80035c8:	4903      	ldr	r1, [pc, #12]	; (80035d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035ca:	5ccb      	ldrb	r3, [r1, r3]
 80035cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08009d88 	.word	0x08009d88

080035dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e041      	b.n	8003672 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d106      	bne.n	8003608 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2200      	movs	r2, #0
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003602:	6878      	ldr	r0, [r7, #4]
 8003604:	f7fe fb2c 	bl	8001c60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2202      	movs	r2, #2
 800360c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	3304      	adds	r3, #4
 8003618:	4619      	mov	r1, r3
 800361a:	4610      	mov	r0, r2
 800361c:	f000 fc12 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2201      	movs	r2, #1
 800363c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2201      	movs	r2, #1
 8003644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2201      	movs	r2, #1
 8003654:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2201      	movs	r2, #1
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3708      	adds	r7, #8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}

0800367a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800367a:	b580      	push	{r7, lr}
 800367c:	b082      	sub	sp, #8
 800367e:	af00      	add	r7, sp, #0
 8003680:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d101      	bne.n	800368c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003688:	2301      	movs	r3, #1
 800368a:	e041      	b.n	8003710 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003692:	b2db      	uxtb	r3, r3
 8003694:	2b00      	cmp	r3, #0
 8003696:	d106      	bne.n	80036a6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036a0:	6878      	ldr	r0, [r7, #4]
 80036a2:	f000 f839 	bl	8003718 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2202      	movs	r2, #2
 80036aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	3304      	adds	r3, #4
 80036b6:	4619      	mov	r1, r3
 80036b8:	4610      	mov	r0, r2
 80036ba:	f000 fbc3 	bl	8003e44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2201      	movs	r2, #1
 80036e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2201      	movs	r2, #1
 80036f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2201      	movs	r2, #1
 8003702:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2201      	movs	r2, #1
 800370a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800370e:	2300      	movs	r3, #0
}
 8003710:	4618      	mov	r0, r3
 8003712:	3708      	adds	r7, #8
 8003714:	46bd      	mov	sp, r7
 8003716:	bd80      	pop	{r7, pc}

08003718 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b084      	sub	sp, #16
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d109      	bne.n	8003750 <HAL_TIM_PWM_Start+0x24>
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003742:	b2db      	uxtb	r3, r3
 8003744:	2b01      	cmp	r3, #1
 8003746:	bf14      	ite	ne
 8003748:	2301      	movne	r3, #1
 800374a:	2300      	moveq	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e022      	b.n	8003796 <HAL_TIM_PWM_Start+0x6a>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	2b04      	cmp	r3, #4
 8003754:	d109      	bne.n	800376a <HAL_TIM_PWM_Start+0x3e>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b01      	cmp	r3, #1
 8003760:	bf14      	ite	ne
 8003762:	2301      	movne	r3, #1
 8003764:	2300      	moveq	r3, #0
 8003766:	b2db      	uxtb	r3, r3
 8003768:	e015      	b.n	8003796 <HAL_TIM_PWM_Start+0x6a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b08      	cmp	r3, #8
 800376e:	d109      	bne.n	8003784 <HAL_TIM_PWM_Start+0x58>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003776:	b2db      	uxtb	r3, r3
 8003778:	2b01      	cmp	r3, #1
 800377a:	bf14      	ite	ne
 800377c:	2301      	movne	r3, #1
 800377e:	2300      	moveq	r3, #0
 8003780:	b2db      	uxtb	r3, r3
 8003782:	e008      	b.n	8003796 <HAL_TIM_PWM_Start+0x6a>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378a:	b2db      	uxtb	r3, r3
 800378c:	2b01      	cmp	r3, #1
 800378e:	bf14      	ite	ne
 8003790:	2301      	movne	r3, #1
 8003792:	2300      	moveq	r3, #0
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e07c      	b.n	8003898 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_PWM_Start+0x82>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ac:	e013      	b.n	80037d6 <HAL_TIM_PWM_Start+0xaa>
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	2b04      	cmp	r3, #4
 80037b2:	d104      	bne.n	80037be <HAL_TIM_PWM_Start+0x92>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2202      	movs	r2, #2
 80037b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037bc:	e00b      	b.n	80037d6 <HAL_TIM_PWM_Start+0xaa>
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	2b08      	cmp	r3, #8
 80037c2:	d104      	bne.n	80037ce <HAL_TIM_PWM_Start+0xa2>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2202      	movs	r2, #2
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037cc:	e003      	b.n	80037d6 <HAL_TIM_PWM_Start+0xaa>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2202      	movs	r2, #2
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	6839      	ldr	r1, [r7, #0]
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe1a 	bl	8004418 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a2d      	ldr	r2, [pc, #180]	; (80038a0 <HAL_TIM_PWM_Start+0x174>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d004      	beq.n	80037f8 <HAL_TIM_PWM_Start+0xcc>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a2c      	ldr	r2, [pc, #176]	; (80038a4 <HAL_TIM_PWM_Start+0x178>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d101      	bne.n	80037fc <HAL_TIM_PWM_Start+0xd0>
 80037f8:	2301      	movs	r3, #1
 80037fa:	e000      	b.n	80037fe <HAL_TIM_PWM_Start+0xd2>
 80037fc:	2300      	movs	r3, #0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d007      	beq.n	8003812 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003810:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a22      	ldr	r2, [pc, #136]	; (80038a0 <HAL_TIM_PWM_Start+0x174>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d022      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003824:	d01d      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a1f      	ldr	r2, [pc, #124]	; (80038a8 <HAL_TIM_PWM_Start+0x17c>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d018      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a1d      	ldr	r2, [pc, #116]	; (80038ac <HAL_TIM_PWM_Start+0x180>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d013      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a1c      	ldr	r2, [pc, #112]	; (80038b0 <HAL_TIM_PWM_Start+0x184>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d00e      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a16      	ldr	r2, [pc, #88]	; (80038a4 <HAL_TIM_PWM_Start+0x178>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d009      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a18      	ldr	r2, [pc, #96]	; (80038b4 <HAL_TIM_PWM_Start+0x188>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d004      	beq.n	8003862 <HAL_TIM_PWM_Start+0x136>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a16      	ldr	r2, [pc, #88]	; (80038b8 <HAL_TIM_PWM_Start+0x18c>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d111      	bne.n	8003886 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 0307 	and.w	r3, r3, #7
 800386c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	2b06      	cmp	r3, #6
 8003872:	d010      	beq.n	8003896 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0201 	orr.w	r2, r2, #1
 8003882:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003884:	e007      	b.n	8003896 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003896:	2300      	movs	r3, #0
}
 8003898:	4618      	mov	r0, r3
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	40010000 	.word	0x40010000
 80038a4:	40010400 	.word	0x40010400
 80038a8:	40000400 	.word	0x40000400
 80038ac:	40000800 	.word	0x40000800
 80038b0:	40000c00 	.word	0x40000c00
 80038b4:	40014000 	.word	0x40014000
 80038b8:	40001800 	.word	0x40001800

080038bc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b082      	sub	sp, #8
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	d122      	bne.n	8003918 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	f003 0302 	and.w	r3, r3, #2
 80038dc:	2b02      	cmp	r3, #2
 80038de:	d11b      	bne.n	8003918 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f06f 0202 	mvn.w	r2, #2
 80038e8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699b      	ldr	r3, [r3, #24]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d003      	beq.n	8003906 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 fa81 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003904:	e005      	b.n	8003912 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fa73 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	f000 fa84 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b04      	cmp	r3, #4
 8003924:	d122      	bne.n	800396c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68db      	ldr	r3, [r3, #12]
 800392c:	f003 0304 	and.w	r3, r3, #4
 8003930:	2b04      	cmp	r3, #4
 8003932:	d11b      	bne.n	800396c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f06f 0204 	mvn.w	r2, #4
 800393c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2202      	movs	r2, #2
 8003942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	699b      	ldr	r3, [r3, #24]
 800394a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f000 fa57 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003958:	e005      	b.n	8003966 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fa49 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003960:	6878      	ldr	r0, [r7, #4]
 8003962:	f000 fa5a 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	2200      	movs	r2, #0
 800396a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	691b      	ldr	r3, [r3, #16]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b08      	cmp	r3, #8
 8003978:	d122      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	f003 0308 	and.w	r3, r3, #8
 8003984:	2b08      	cmp	r3, #8
 8003986:	d11b      	bne.n	80039c0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f06f 0208 	mvn.w	r2, #8
 8003990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2204      	movs	r2, #4
 8003996:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	69db      	ldr	r3, [r3, #28]
 800399e:	f003 0303 	and.w	r3, r3, #3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 fa2d 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 80039ac:	e005      	b.n	80039ba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f000 fa1f 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 fa30 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	691b      	ldr	r3, [r3, #16]
 80039c6:	f003 0310 	and.w	r3, r3, #16
 80039ca:	2b10      	cmp	r3, #16
 80039cc:	d122      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	f003 0310 	and.w	r3, r3, #16
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d11b      	bne.n	8003a14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f06f 0210 	mvn.w	r2, #16
 80039e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2208      	movs	r2, #8
 80039ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	69db      	ldr	r3, [r3, #28]
 80039f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	f000 fa03 	bl	8003e06 <HAL_TIM_IC_CaptureCallback>
 8003a00:	e005      	b.n	8003a0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 f9f5 	bl	8003df2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 fa06 	bl	8003e1a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	f003 0301 	and.w	r3, r3, #1
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d10e      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f003 0301 	and.w	r3, r3, #1
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d107      	bne.n	8003a40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f06f 0201 	mvn.w	r2, #1
 8003a38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 f9cf 	bl	8003dde <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a4a:	2b80      	cmp	r3, #128	; 0x80
 8003a4c:	d10e      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b80      	cmp	r3, #128	; 0x80
 8003a5a:	d107      	bne.n	8003a6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	f000 fd82 	bl	8004570 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	691b      	ldr	r3, [r3, #16]
 8003a72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a76:	2b40      	cmp	r3, #64	; 0x40
 8003a78:	d10e      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d107      	bne.n	8003a98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 f9cb 	bl	8003e2e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	f003 0320 	and.w	r3, r3, #32
 8003aa2:	2b20      	cmp	r3, #32
 8003aa4:	d10e      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	68db      	ldr	r3, [r3, #12]
 8003aac:	f003 0320 	and.w	r3, r3, #32
 8003ab0:	2b20      	cmp	r3, #32
 8003ab2:	d107      	bne.n	8003ac4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f06f 0220 	mvn.w	r2, #32
 8003abc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fd4c 	bl	800455c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ac4:	bf00      	nop
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b086      	sub	sp, #24
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ae2:	2b01      	cmp	r3, #1
 8003ae4:	d101      	bne.n	8003aea <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ae6:	2302      	movs	r3, #2
 8003ae8:	e0ae      	b.n	8003c48 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b0c      	cmp	r3, #12
 8003af6:	f200 809f 	bhi.w	8003c38 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003afa:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b00:	08003b35 	.word	0x08003b35
 8003b04:	08003c39 	.word	0x08003c39
 8003b08:	08003c39 	.word	0x08003c39
 8003b0c:	08003c39 	.word	0x08003c39
 8003b10:	08003b75 	.word	0x08003b75
 8003b14:	08003c39 	.word	0x08003c39
 8003b18:	08003c39 	.word	0x08003c39
 8003b1c:	08003c39 	.word	0x08003c39
 8003b20:	08003bb7 	.word	0x08003bb7
 8003b24:	08003c39 	.word	0x08003c39
 8003b28:	08003c39 	.word	0x08003c39
 8003b2c:	08003c39 	.word	0x08003c39
 8003b30:	08003bf7 	.word	0x08003bf7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68b9      	ldr	r1, [r7, #8]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f000 fa22 	bl	8003f84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699a      	ldr	r2, [r3, #24]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f042 0208 	orr.w	r2, r2, #8
 8003b4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	699a      	ldr	r2, [r3, #24]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0204 	bic.w	r2, r2, #4
 8003b5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	6999      	ldr	r1, [r3, #24]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	691a      	ldr	r2, [r3, #16]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	619a      	str	r2, [r3, #24]
      break;
 8003b72:	e064      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	68b9      	ldr	r1, [r7, #8]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f000 fa72 	bl	8004064 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699a      	ldr	r2, [r3, #24]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	699a      	ldr	r2, [r3, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	6999      	ldr	r1, [r3, #24]
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	021a      	lsls	r2, r3, #8
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	619a      	str	r2, [r3, #24]
      break;
 8003bb4:	e043      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68b9      	ldr	r1, [r7, #8]
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	f000 fac7 	bl	8004150 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69da      	ldr	r2, [r3, #28]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f042 0208 	orr.w	r2, r2, #8
 8003bd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	69da      	ldr	r2, [r3, #28]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f022 0204 	bic.w	r2, r2, #4
 8003be0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	69d9      	ldr	r1, [r3, #28]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	691a      	ldr	r2, [r3, #16]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	430a      	orrs	r2, r1
 8003bf2:	61da      	str	r2, [r3, #28]
      break;
 8003bf4:	e023      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	68b9      	ldr	r1, [r7, #8]
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f000 fb1b 	bl	8004238 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	69da      	ldr	r2, [r3, #28]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	69da      	ldr	r2, [r3, #28]
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69d9      	ldr	r1, [r3, #28]
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	021a      	lsls	r2, r3, #8
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	61da      	str	r2, [r3, #28]
      break;
 8003c36:	e002      	b.n	8003c3e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8003c3c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c46:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIM_ConfigClockSource+0x1c>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e0b4      	b.n	8003dd6 <HAL_TIM_ConfigClockSource+0x186>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68ba      	ldr	r2, [r7, #8]
 8003c9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ca4:	d03e      	beq.n	8003d24 <HAL_TIM_ConfigClockSource+0xd4>
 8003ca6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003caa:	f200 8087 	bhi.w	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cb2:	f000 8086 	beq.w	8003dc2 <HAL_TIM_ConfigClockSource+0x172>
 8003cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003cba:	d87f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cbc:	2b70      	cmp	r3, #112	; 0x70
 8003cbe:	d01a      	beq.n	8003cf6 <HAL_TIM_ConfigClockSource+0xa6>
 8003cc0:	2b70      	cmp	r3, #112	; 0x70
 8003cc2:	d87b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cc4:	2b60      	cmp	r3, #96	; 0x60
 8003cc6:	d050      	beq.n	8003d6a <HAL_TIM_ConfigClockSource+0x11a>
 8003cc8:	2b60      	cmp	r3, #96	; 0x60
 8003cca:	d877      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ccc:	2b50      	cmp	r3, #80	; 0x50
 8003cce:	d03c      	beq.n	8003d4a <HAL_TIM_ConfigClockSource+0xfa>
 8003cd0:	2b50      	cmp	r3, #80	; 0x50
 8003cd2:	d873      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cd4:	2b40      	cmp	r3, #64	; 0x40
 8003cd6:	d058      	beq.n	8003d8a <HAL_TIM_ConfigClockSource+0x13a>
 8003cd8:	2b40      	cmp	r3, #64	; 0x40
 8003cda:	d86f      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cdc:	2b30      	cmp	r3, #48	; 0x30
 8003cde:	d064      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce0:	2b30      	cmp	r3, #48	; 0x30
 8003ce2:	d86b      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003ce4:	2b20      	cmp	r3, #32
 8003ce6:	d060      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	d867      	bhi.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d05c      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf0:	2b10      	cmp	r3, #16
 8003cf2:	d05a      	beq.n	8003daa <HAL_TIM_ConfigClockSource+0x15a>
 8003cf4:	e062      	b.n	8003dbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6818      	ldr	r0, [r3, #0]
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685a      	ldr	r2, [r3, #4]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f000 fb67 	bl	80043d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	609a      	str	r2, [r3, #8]
      break;
 8003d22:	e04f      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6818      	ldr	r0, [r3, #0]
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	6899      	ldr	r1, [r3, #8]
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	f000 fb50 	bl	80043d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d46:	609a      	str	r2, [r3, #8]
      break;
 8003d48:	e03c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6818      	ldr	r0, [r3, #0]
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	6859      	ldr	r1, [r3, #4]
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	68db      	ldr	r3, [r3, #12]
 8003d56:	461a      	mov	r2, r3
 8003d58:	f000 fac4 	bl	80042e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2150      	movs	r1, #80	; 0x50
 8003d62:	4618      	mov	r0, r3
 8003d64:	f000 fb1d 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003d68:	e02c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6818      	ldr	r0, [r3, #0]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	6859      	ldr	r1, [r3, #4]
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	461a      	mov	r2, r3
 8003d78:	f000 fae3 	bl	8004342 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2160      	movs	r1, #96	; 0x60
 8003d82:	4618      	mov	r0, r3
 8003d84:	f000 fb0d 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003d88:	e01c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6818      	ldr	r0, [r3, #0]
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6859      	ldr	r1, [r3, #4]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	461a      	mov	r2, r3
 8003d98:	f000 faa4 	bl	80042e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	2140      	movs	r1, #64	; 0x40
 8003da2:	4618      	mov	r0, r3
 8003da4:	f000 fafd 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003da8:	e00c      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4619      	mov	r1, r3
 8003db4:	4610      	mov	r0, r2
 8003db6:	f000 faf4 	bl	80043a2 <TIM_ITRx_SetConfig>
      break;
 8003dba:	e003      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc0:	e000      	b.n	8003dc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003dc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr

08003e1a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e1a:	b480      	push	{r7}
 8003e1c:	b083      	sub	sp, #12
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b083      	sub	sp, #12
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e36:	bf00      	nop
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr
	...

08003e44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a40      	ldr	r2, [pc, #256]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d013      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e62:	d00f      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	4a3d      	ldr	r2, [pc, #244]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	4a3c      	ldr	r2, [pc, #240]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d007      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	4a3b      	ldr	r2, [pc, #236]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d003      	beq.n	8003e84 <TIM_Base_SetConfig+0x40>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a3a      	ldr	r2, [pc, #232]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d108      	bne.n	8003e96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a2f      	ldr	r2, [pc, #188]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d02b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d027      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a2c      	ldr	r2, [pc, #176]	; (8003f5c <TIM_Base_SetConfig+0x118>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d023      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <TIM_Base_SetConfig+0x11c>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d01f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a2a      	ldr	r2, [pc, #168]	; (8003f64 <TIM_Base_SetConfig+0x120>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d01b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d017      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a28      	ldr	r2, [pc, #160]	; (8003f6c <TIM_Base_SetConfig+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	4a27      	ldr	r2, [pc, #156]	; (8003f70 <TIM_Base_SetConfig+0x12c>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d00f      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a26      	ldr	r2, [pc, #152]	; (8003f74 <TIM_Base_SetConfig+0x130>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00b      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a25      	ldr	r2, [pc, #148]	; (8003f78 <TIM_Base_SetConfig+0x134>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d007      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a24      	ldr	r2, [pc, #144]	; (8003f7c <TIM_Base_SetConfig+0x138>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d003      	beq.n	8003ef6 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a23      	ldr	r2, [pc, #140]	; (8003f80 <TIM_Base_SetConfig+0x13c>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d108      	bne.n	8003f08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003efc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	68fa      	ldr	r2, [r7, #12]
 8003f1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689a      	ldr	r2, [r3, #8]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a0a      	ldr	r2, [pc, #40]	; (8003f58 <TIM_Base_SetConfig+0x114>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d003      	beq.n	8003f3c <TIM_Base_SetConfig+0xf8>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a0c      	ldr	r2, [pc, #48]	; (8003f68 <TIM_Base_SetConfig+0x124>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d103      	bne.n	8003f44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	615a      	str	r2, [r3, #20]
}
 8003f4a:	bf00      	nop
 8003f4c:	3714      	adds	r7, #20
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40000400 	.word	0x40000400
 8003f60:	40000800 	.word	0x40000800
 8003f64:	40000c00 	.word	0x40000c00
 8003f68:	40010400 	.word	0x40010400
 8003f6c:	40014000 	.word	0x40014000
 8003f70:	40014400 	.word	0x40014400
 8003f74:	40014800 	.word	0x40014800
 8003f78:	40001800 	.word	0x40001800
 8003f7c:	40001c00 	.word	0x40001c00
 8003f80:	40002000 	.word	0x40002000

08003f84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f023 0201 	bic.w	r2, r3, #1
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	f023 0303 	bic.w	r3, r3, #3
 8003fba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 0302 	bic.w	r3, r3, #2
 8003fcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	697a      	ldr	r2, [r7, #20]
 8003fd4:	4313      	orrs	r3, r2
 8003fd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	4a20      	ldr	r2, [pc, #128]	; (800405c <TIM_OC1_SetConfig+0xd8>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	d003      	beq.n	8003fe8 <TIM_OC1_SetConfig+0x64>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <TIM_OC1_SetConfig+0xdc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d10c      	bne.n	8004002 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	f023 0308 	bic.w	r3, r3, #8
 8003fee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ffa:	697b      	ldr	r3, [r7, #20]
 8003ffc:	f023 0304 	bic.w	r3, r3, #4
 8004000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a15      	ldr	r2, [pc, #84]	; (800405c <TIM_OC1_SetConfig+0xd8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_OC1_SetConfig+0x8e>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a14      	ldr	r2, [pc, #80]	; (8004060 <TIM_OC1_SetConfig+0xdc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d111      	bne.n	8004036 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	693a      	ldr	r2, [r7, #16]
 8004028:	4313      	orrs	r3, r2
 800402a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	68fa      	ldr	r2, [r7, #12]
 8004040:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	685a      	ldr	r2, [r3, #4]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	697a      	ldr	r2, [r7, #20]
 800404e:	621a      	str	r2, [r3, #32]
}
 8004050:	bf00      	nop
 8004052:	371c      	adds	r7, #28
 8004054:	46bd      	mov	sp, r7
 8004056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405a:	4770      	bx	lr
 800405c:	40010000 	.word	0x40010000
 8004060:	40010400 	.word	0x40010400

08004064 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004064:	b480      	push	{r7}
 8004066:	b087      	sub	sp, #28
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f023 0210 	bic.w	r2, r3, #16
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6a1b      	ldr	r3, [r3, #32]
 800407e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	699b      	ldr	r3, [r3, #24]
 800408a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800409a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	021b      	lsls	r3, r3, #8
 80040a2:	68fa      	ldr	r2, [r7, #12]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	f023 0320 	bic.w	r3, r3, #32
 80040ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a22      	ldr	r2, [pc, #136]	; (8004148 <TIM_OC2_SetConfig+0xe4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_OC2_SetConfig+0x68>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a21      	ldr	r2, [pc, #132]	; (800414c <TIM_OC2_SetConfig+0xe8>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d10d      	bne.n	80040e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	011b      	lsls	r3, r3, #4
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	4313      	orrs	r3, r2
 80040de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a17      	ldr	r2, [pc, #92]	; (8004148 <TIM_OC2_SetConfig+0xe4>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_OC2_SetConfig+0x94>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a16      	ldr	r2, [pc, #88]	; (800414c <TIM_OC2_SetConfig+0xe8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d113      	bne.n	8004120 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004106:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004108:	683b      	ldr	r3, [r7, #0]
 800410a:	695b      	ldr	r3, [r3, #20]
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	693a      	ldr	r2, [r7, #16]
 8004110:	4313      	orrs	r3, r2
 8004112:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	699b      	ldr	r3, [r3, #24]
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	693a      	ldr	r2, [r7, #16]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	697a      	ldr	r2, [r7, #20]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400

08004150 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6a1b      	ldr	r3, [r3, #32]
 800415e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	69db      	ldr	r3, [r3, #28]
 8004176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0303 	bic.w	r3, r3, #3
 8004186:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	4313      	orrs	r3, r2
 8004190:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004198:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	4a21      	ldr	r2, [pc, #132]	; (8004230 <TIM_OC3_SetConfig+0xe0>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d003      	beq.n	80041b6 <TIM_OC3_SetConfig+0x66>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a20      	ldr	r2, [pc, #128]	; (8004234 <TIM_OC3_SetConfig+0xe4>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d10d      	bne.n	80041d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	021b      	lsls	r3, r3, #8
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a16      	ldr	r2, [pc, #88]	; (8004230 <TIM_OC3_SetConfig+0xe0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d003      	beq.n	80041e2 <TIM_OC3_SetConfig+0x92>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	4a15      	ldr	r2, [pc, #84]	; (8004234 <TIM_OC3_SetConfig+0xe4>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d113      	bne.n	800420a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40010000 	.word	0x40010000
 8004234:	40010400 	.word	0x40010400

08004238 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a1b      	ldr	r3, [r3, #32]
 8004252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69db      	ldr	r3, [r3, #28]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004282:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	031b      	lsls	r3, r3, #12
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a12      	ldr	r2, [pc, #72]	; (80042dc <TIM_OC4_SetConfig+0xa4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC4_SetConfig+0x68>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <TIM_OC4_SetConfig+0xa8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d109      	bne.n	80042b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	695b      	ldr	r3, [r3, #20]
 80042ac:	019b      	lsls	r3, r3, #6
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	621a      	str	r2, [r3, #32]
}
 80042ce:	bf00      	nop
 80042d0:	371c      	adds	r7, #28
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	40010000 	.word	0x40010000
 80042e0:	40010400 	.word	0x40010400

080042e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 030a 	bic.w	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	f023 0210 	bic.w	r2, r3, #16
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800436c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	4313      	orrs	r3, r2
 8004376:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800437e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	693a      	ldr	r2, [r7, #16]
 8004386:	4313      	orrs	r3, r2
 8004388:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr

080043a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a2:	b480      	push	{r7}
 80043a4:	b085      	sub	sp, #20
 80043a6:	af00      	add	r7, sp, #0
 80043a8:	6078      	str	r0, [r7, #4]
 80043aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	689b      	ldr	r3, [r3, #8]
 80043b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043ba:	683a      	ldr	r2, [r7, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	4313      	orrs	r3, r2
 80043c0:	f043 0307 	orr.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043d8:	b480      	push	{r7}
 80043da:	b087      	sub	sp, #28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	60f8      	str	r0, [r7, #12]
 80043e0:	60b9      	str	r1, [r7, #8]
 80043e2:	607a      	str	r2, [r7, #4]
 80043e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80043f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	021a      	lsls	r2, r3, #8
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	4313      	orrs	r3, r2
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	609a      	str	r2, [r3, #8]
}
 800440c:	bf00      	nop
 800440e:	371c      	adds	r7, #28
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr

08004418 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004418:	b480      	push	{r7}
 800441a:	b087      	sub	sp, #28
 800441c:	af00      	add	r7, sp, #0
 800441e:	60f8      	str	r0, [r7, #12]
 8004420:	60b9      	str	r1, [r7, #8]
 8004422:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f003 031f 	and.w	r3, r3, #31
 800442a:	2201      	movs	r2, #1
 800442c:	fa02 f303 	lsl.w	r3, r2, r3
 8004430:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6a1a      	ldr	r2, [r3, #32]
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	43db      	mvns	r3, r3
 800443a:	401a      	ands	r2, r3
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	f003 031f 	and.w	r3, r3, #31
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	fa01 f303 	lsl.w	r3, r1, r3
 8004450:	431a      	orrs	r2, r3
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	621a      	str	r2, [r3, #32]
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
	...

08004464 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004464:	b480      	push	{r7}
 8004466:	b085      	sub	sp, #20
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d101      	bne.n	800447c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004478:	2302      	movs	r3, #2
 800447a:	e05a      	b.n	8004532 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	68fa      	ldr	r2, [r7, #12]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68fa      	ldr	r2, [r7, #12]
 80044b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a21      	ldr	r2, [pc, #132]	; (8004540 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d022      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044c8:	d01d      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d018      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	; (8004548 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d013      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1a      	ldr	r2, [pc, #104]	; (800454c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d00e      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d009      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a17      	ldr	r2, [pc, #92]	; (8004554 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d004      	beq.n	8004506 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a15      	ldr	r2, [pc, #84]	; (8004558 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d10c      	bne.n	8004520 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800450c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685b      	ldr	r3, [r3, #4]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	4313      	orrs	r3, r2
 8004516:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68ba      	ldr	r2, [r7, #8]
 800451e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40010400 	.word	0x40010400
 8004554:	40014000 	.word	0x40014000
 8004558:	40001800 	.word	0x40001800

0800455c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800455c:	b480      	push	{r7}
 800455e:	b083      	sub	sp, #12
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr

08004570 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr

08004584 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b082      	sub	sp, #8
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d101      	bne.n	8004596 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	e03f      	b.n	8004616 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d106      	bne.n	80045b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7fd fcf4 	bl	8001f98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2224      	movs	r2, #36	; 0x24
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68da      	ldr	r2, [r3, #12]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fd7b 	bl	80050c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80045dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	695a      	ldr	r2, [r3, #20]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80045ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80045fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b08a      	sub	sp, #40	; 0x28
 8004622:	af02      	add	r7, sp, #8
 8004624:	60f8      	str	r0, [r7, #12]
 8004626:	60b9      	str	r1, [r7, #8]
 8004628:	603b      	str	r3, [r7, #0]
 800462a:	4613      	mov	r3, r2
 800462c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800462e:	2300      	movs	r3, #0
 8004630:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b20      	cmp	r3, #32
 800463c:	d17c      	bne.n	8004738 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_UART_Transmit+0x2c>
 8004644:	88fb      	ldrh	r3, [r7, #6]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d101      	bne.n	800464e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e075      	b.n	800473a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004654:	2b01      	cmp	r3, #1
 8004656:	d101      	bne.n	800465c <HAL_UART_Transmit+0x3e>
 8004658:	2302      	movs	r3, #2
 800465a:	e06e      	b.n	800473a <HAL_UART_Transmit+0x11c>
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2221      	movs	r2, #33	; 0x21
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004672:	f7fd fd71 	bl	8002158 <HAL_GetTick>
 8004676:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	88fa      	ldrh	r2, [r7, #6]
 800467c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	88fa      	ldrh	r2, [r7, #6]
 8004682:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468c:	d108      	bne.n	80046a0 <HAL_UART_Transmit+0x82>
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004696:	2300      	movs	r3, #0
 8004698:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	61bb      	str	r3, [r7, #24]
 800469e:	e003      	b.n	80046a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80046a4:	2300      	movs	r3, #0
 80046a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80046b0:	e02a      	b.n	8004708 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	2200      	movs	r2, #0
 80046ba:	2180      	movs	r1, #128	; 0x80
 80046bc:	68f8      	ldr	r0, [r7, #12]
 80046be:	f000 faf9 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 80046c2:	4603      	mov	r3, r0
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d001      	beq.n	80046cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80046c8:	2303      	movs	r3, #3
 80046ca:	e036      	b.n	800473a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d10b      	bne.n	80046ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	881b      	ldrh	r3, [r3, #0]
 80046d6:	461a      	mov	r2, r3
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	3302      	adds	r3, #2
 80046e6:	61bb      	str	r3, [r7, #24]
 80046e8:	e007      	b.n	80046fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80046fe:	b29b      	uxth	r3, r3
 8004700:	3b01      	subs	r3, #1
 8004702:	b29a      	uxth	r2, r3
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800470c:	b29b      	uxth	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d1cf      	bne.n	80046b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2140      	movs	r1, #64	; 0x40
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fac9 	bl	8004cb4 <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e006      	b.n	800473a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004734:	2300      	movs	r3, #0
 8004736:	e000      	b.n	800473a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004738:	2302      	movs	r3, #2
  }
}
 800473a:	4618      	mov	r0, r3
 800473c:	3720      	adds	r7, #32
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
	...

08004744 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b0ba      	sub	sp, #232	; 0xe8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004770:	2300      	movs	r3, #0
 8004772:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800477a:	f003 030f 	and.w	r3, r3, #15
 800477e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800478a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800478e:	f003 0320 	and.w	r3, r3, #32
 8004792:	2b00      	cmp	r3, #0
 8004794:	d009      	beq.n	80047aa <HAL_UART_IRQHandler+0x66>
 8004796:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800479a:	f003 0320 	and.w	r3, r3, #32
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d003      	beq.n	80047aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f000 fbd3 	bl	8004f4e <UART_Receive_IT>
      return;
 80047a8:	e256      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80047aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	f000 80de 	beq.w	8004970 <HAL_UART_IRQHandler+0x22c>
 80047b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d106      	bne.n	80047ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80047c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047c4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 80d1 	beq.w	8004970 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80047ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00b      	beq.n	80047f2 <HAL_UART_IRQHandler+0xae>
 80047da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d005      	beq.n	80047f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ea:	f043 0201 	orr.w	r2, r3, #1
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80047f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047f6:	f003 0304 	and.w	r3, r3, #4
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00b      	beq.n	8004816 <HAL_UART_IRQHandler+0xd2>
 80047fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004802:	f003 0301 	and.w	r3, r3, #1
 8004806:	2b00      	cmp	r3, #0
 8004808:	d005      	beq.n	8004816 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480e:	f043 0202 	orr.w	r2, r3, #2
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800481a:	f003 0302 	and.w	r3, r3, #2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d00b      	beq.n	800483a <HAL_UART_IRQHandler+0xf6>
 8004822:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d005      	beq.n	800483a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004832:	f043 0204 	orr.w	r2, r3, #4
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800483a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800483e:	f003 0308 	and.w	r3, r3, #8
 8004842:	2b00      	cmp	r3, #0
 8004844:	d011      	beq.n	800486a <HAL_UART_IRQHandler+0x126>
 8004846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800484a:	f003 0320 	and.w	r3, r3, #32
 800484e:	2b00      	cmp	r3, #0
 8004850:	d105      	bne.n	800485e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004852:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d005      	beq.n	800486a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004862:	f043 0208 	orr.w	r2, r3, #8
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 81ed 	beq.w	8004c4e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004874:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004878:	f003 0320 	and.w	r3, r3, #32
 800487c:	2b00      	cmp	r3, #0
 800487e:	d008      	beq.n	8004892 <HAL_UART_IRQHandler+0x14e>
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004884:	f003 0320 	and.w	r3, r3, #32
 8004888:	2b00      	cmp	r3, #0
 800488a:	d002      	beq.n	8004892 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb5e 	bl	8004f4e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	695b      	ldr	r3, [r3, #20]
 8004898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800489c:	2b40      	cmp	r3, #64	; 0x40
 800489e:	bf0c      	ite	eq
 80048a0:	2301      	moveq	r3, #1
 80048a2:	2300      	movne	r3, #0
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	f003 0308 	and.w	r3, r3, #8
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d103      	bne.n	80048be <HAL_UART_IRQHandler+0x17a>
 80048b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d04f      	beq.n	800495e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f000 fa66 	bl	8004d90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ce:	2b40      	cmp	r3, #64	; 0x40
 80048d0:	d141      	bne.n	8004956 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	3314      	adds	r3, #20
 80048d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80048e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80048ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048f0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	3314      	adds	r3, #20
 80048fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80048fe:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004902:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004906:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800490a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800490e:	e841 2300 	strex	r3, r2, [r1]
 8004912:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004916:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1d9      	bne.n	80048d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	d013      	beq.n	800494e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492a:	4a7d      	ldr	r2, [pc, #500]	; (8004b20 <HAL_UART_IRQHandler+0x3dc>)
 800492c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fdc1 	bl	80024ba <HAL_DMA_Abort_IT>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d016      	beq.n	800496c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004942:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004948:	4610      	mov	r0, r2
 800494a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800494c:	e00e      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 f99a 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004954:	e00a      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f996 	bl	8004c88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800495c:	e006      	b.n	800496c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800495e:	6878      	ldr	r0, [r7, #4]
 8004960:	f000 f992 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800496a:	e170      	b.n	8004c4e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800496c:	bf00      	nop
    return;
 800496e:	e16e      	b.n	8004c4e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004974:	2b01      	cmp	r3, #1
 8004976:	f040 814a 	bne.w	8004c0e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800497a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800497e:	f003 0310 	and.w	r3, r3, #16
 8004982:	2b00      	cmp	r3, #0
 8004984:	f000 8143 	beq.w	8004c0e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004988:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800498c:	f003 0310 	and.w	r3, r3, #16
 8004990:	2b00      	cmp	r3, #0
 8004992:	f000 813c 	beq.w	8004c0e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004996:	2300      	movs	r3, #0
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	60bb      	str	r3, [r7, #8]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60bb      	str	r3, [r7, #8]
 80049aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b6:	2b40      	cmp	r3, #64	; 0x40
 80049b8:	f040 80b4 	bne.w	8004b24 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80049c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8140 	beq.w	8004c52 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80049d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049da:	429a      	cmp	r2, r3
 80049dc:	f080 8139 	bcs.w	8004c52 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80049e6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049f2:	f000 8088 	beq.w	8004b06 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004a04:	e853 3f00 	ldrex	r3, [r3]
 8004a08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004a0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004a10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	330c      	adds	r3, #12
 8004a1e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004a22:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004a26:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004a2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004a32:	e841 2300 	strex	r3, r2, [r1]
 8004a36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004a3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1d9      	bne.n	80049f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a4c:	e853 3f00 	ldrex	r3, [r3]
 8004a50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004a52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a54:	f023 0301 	bic.w	r3, r3, #1
 8004a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004a66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004a6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004a6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004a72:	e841 2300 	strex	r3, r2, [r1]
 8004a76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004a78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1e1      	bne.n	8004a42 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3314      	adds	r3, #20
 8004a84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a88:	e853 3f00 	ldrex	r3, [r3]
 8004a8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004aa2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004aa8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004aaa:	e841 2300 	strex	r3, r2, [r1]
 8004aae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004ab0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d1e3      	bne.n	8004a7e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	330c      	adds	r3, #12
 8004aca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ad6:	f023 0310 	bic.w	r3, r3, #16
 8004ada:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	330c      	adds	r3, #12
 8004ae4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004ae8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004aea:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aec:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004aee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004af0:	e841 2300 	strex	r3, r2, [r1]
 8004af4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004af6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d1e3      	bne.n	8004ac4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b00:	4618      	mov	r0, r3
 8004b02:	f7fd fc6a 	bl	80023da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	4619      	mov	r1, r3
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f8c0 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004b1c:	e099      	b.n	8004c52 <HAL_UART_IRQHandler+0x50e>
 8004b1e:	bf00      	nop
 8004b20:	08004e57 	.word	0x08004e57
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	1ad3      	subs	r3, r2, r3
 8004b30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	f000 808b 	beq.w	8004c56 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004b40:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8086 	beq.w	8004c56 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	330c      	adds	r3, #12
 8004b50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b54:	e853 3f00 	ldrex	r3, [r3]
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004b60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004b6e:	647a      	str	r2, [r7, #68]	; 0x44
 8004b70:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004b74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004b76:	e841 2300 	strex	r3, r2, [r1]
 8004b7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d1e3      	bne.n	8004b4a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3314      	adds	r3, #20
 8004b88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	e853 3f00 	ldrex	r3, [r3]
 8004b90:	623b      	str	r3, [r7, #32]
   return(result);
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	f023 0301 	bic.w	r3, r3, #1
 8004b98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	3314      	adds	r3, #20
 8004ba2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ba6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004baa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bae:	e841 2300 	strex	r3, r2, [r1]
 8004bb2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1e3      	bne.n	8004b82 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2220      	movs	r2, #32
 8004bbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	330c      	adds	r3, #12
 8004bce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	e853 3f00 	ldrex	r3, [r3]
 8004bd6:	60fb      	str	r3, [r7, #12]
   return(result);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0310 	bic.w	r3, r3, #16
 8004bde:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	330c      	adds	r3, #12
 8004be8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004bec:	61fa      	str	r2, [r7, #28]
 8004bee:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	69b9      	ldr	r1, [r7, #24]
 8004bf2:	69fa      	ldr	r2, [r7, #28]
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8004bfa:	697b      	ldr	r3, [r7, #20]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e3      	bne.n	8004bc8 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004c00:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c04:	4619      	mov	r1, r3
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f848 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c0c:	e023      	b.n	8004c56 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d009      	beq.n	8004c2e <HAL_UART_IRQHandler+0x4ea>
 8004c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d003      	beq.n	8004c2e <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f929 	bl	8004e7e <UART_Transmit_IT>
    return;
 8004c2c:	e014      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d00e      	beq.n	8004c58 <HAL_UART_IRQHandler+0x514>
 8004c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d008      	beq.n	8004c58 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f000 f969 	bl	8004f1e <UART_EndTransmit_IT>
    return;
 8004c4c:	e004      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
    return;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
      return;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_UART_IRQHandler+0x514>
      return;
 8004c56:	bf00      	nop
  }
}
 8004c58:	37e8      	adds	r7, #232	; 0xe8
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}
 8004c5e:	bf00      	nop

08004c60 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b083      	sub	sp, #12
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b083      	sub	sp, #12
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004c7c:	bf00      	nop
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004c90:	bf00      	nop
 8004c92:	370c      	adds	r7, #12
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr

08004c9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ca8:	bf00      	nop
 8004caa:	370c      	adds	r7, #12
 8004cac:	46bd      	mov	sp, r7
 8004cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb2:	4770      	bx	lr

08004cb4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b090      	sub	sp, #64	; 0x40
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	603b      	str	r3, [r7, #0]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004cc4:	e050      	b.n	8004d68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d04c      	beq.n	8004d68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x30>
 8004cd4:	f7fd fa40 	bl	8002158 <HAL_GetTick>
 8004cd8:	4602      	mov	r2, r0
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	1ad3      	subs	r3, r2, r3
 8004cde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d241      	bcs.n	8004d68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	330c      	adds	r3, #12
 8004cea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	e853 3f00 	ldrex	r3, [r3]
 8004cf2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	330c      	adds	r3, #12
 8004d02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d04:	637a      	str	r2, [r7, #52]	; 0x34
 8004d06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d0c:	e841 2300 	strex	r3, r2, [r1]
 8004d10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1e5      	bne.n	8004ce4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	697b      	ldr	r3, [r7, #20]
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	613b      	str	r3, [r7, #16]
   return(result);
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	3314      	adds	r3, #20
 8004d36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004d38:	623a      	str	r2, [r7, #32]
 8004d3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	69f9      	ldr	r1, [r7, #28]
 8004d3e:	6a3a      	ldr	r2, [r7, #32]
 8004d40:	e841 2300 	strex	r3, r2, [r1]
 8004d44:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d1e5      	bne.n	8004d18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2220      	movs	r2, #32
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e00f      	b.n	8004d88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4013      	ands	r3, r2
 8004d72:	68ba      	ldr	r2, [r7, #8]
 8004d74:	429a      	cmp	r2, r3
 8004d76:	bf0c      	ite	eq
 8004d78:	2301      	moveq	r3, #1
 8004d7a:	2300      	movne	r3, #0
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	461a      	mov	r2, r3
 8004d80:	79fb      	ldrb	r3, [r7, #7]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d09f      	beq.n	8004cc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004d86:	2300      	movs	r3, #0
}
 8004d88:	4618      	mov	r0, r3
 8004d8a:	3740      	adds	r7, #64	; 0x40
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	bd80      	pop	{r7, pc}

08004d90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b095      	sub	sp, #84	; 0x54
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da2:	e853 3f00 	ldrex	r3, [r3]
 8004da6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004daa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	330c      	adds	r3, #12
 8004db6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004db8:	643a      	str	r2, [r7, #64]	; 0x40
 8004dba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dbc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004dbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004dc0:	e841 2300 	strex	r3, r2, [r1]
 8004dc4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1e5      	bne.n	8004d98 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	3314      	adds	r3, #20
 8004dd2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd4:	6a3b      	ldr	r3, [r7, #32]
 8004dd6:	e853 3f00 	ldrex	r3, [r3]
 8004dda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	f023 0301 	bic.w	r3, r3, #1
 8004de2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3314      	adds	r3, #20
 8004dea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dec:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004df2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004df4:	e841 2300 	strex	r3, r2, [r1]
 8004df8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d1e5      	bne.n	8004dcc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d119      	bne.n	8004e3c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	330c      	adds	r3, #12
 8004e0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	e853 3f00 	ldrex	r3, [r3]
 8004e16:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 0310 	bic.w	r3, r3, #16
 8004e1e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	330c      	adds	r3, #12
 8004e26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004e28:	61ba      	str	r2, [r7, #24]
 8004e2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e2c:	6979      	ldr	r1, [r7, #20]
 8004e2e:	69ba      	ldr	r2, [r7, #24]
 8004e30:	e841 2300 	strex	r3, r2, [r1]
 8004e34:	613b      	str	r3, [r7, #16]
   return(result);
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1e5      	bne.n	8004e08 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2220      	movs	r2, #32
 8004e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e4a:	bf00      	nop
 8004e4c:	3754      	adds	r7, #84	; 0x54
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr

08004e56 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	2200      	movs	r2, #0
 8004e68:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f7ff ff09 	bl	8004c88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004e7e:	b480      	push	{r7}
 8004e80:	b085      	sub	sp, #20
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b21      	cmp	r3, #33	; 0x21
 8004e90:	d13e      	bne.n	8004f10 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9a:	d114      	bne.n	8004ec6 <UART_Transmit_IT+0x48>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d110      	bne.n	8004ec6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a1b      	ldr	r3, [r3, #32]
 8004ea8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	881b      	ldrh	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004eb8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a1b      	ldr	r3, [r3, #32]
 8004ebe:	1c9a      	adds	r2, r3, #2
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	621a      	str	r2, [r3, #32]
 8004ec4:	e008      	b.n	8004ed8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a1b      	ldr	r3, [r3, #32]
 8004eca:	1c59      	adds	r1, r3, #1
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6211      	str	r1, [r2, #32]
 8004ed0:	781a      	ldrb	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b01      	subs	r3, #1
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d10f      	bne.n	8004f0c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68da      	ldr	r2, [r3, #12]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004efa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	68da      	ldr	r2, [r3, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004f0a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e000      	b.n	8004f12 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004f10:	2302      	movs	r3, #2
  }
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr

08004f1e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b082      	sub	sp, #8
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68da      	ldr	r2, [r3, #12]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f34:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2220      	movs	r2, #32
 8004f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f7ff fe8e 	bl	8004c60 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3708      	adds	r7, #8
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b08c      	sub	sp, #48	; 0x30
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	2b22      	cmp	r3, #34	; 0x22
 8004f60:	f040 80ab 	bne.w	80050ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	689b      	ldr	r3, [r3, #8]
 8004f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f6c:	d117      	bne.n	8004f9e <UART_Receive_IT+0x50>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d113      	bne.n	8004f9e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004f76:	2300      	movs	r3, #0
 8004f78:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f7e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	b29b      	uxth	r3, r3
 8004f88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f96:	1c9a      	adds	r2, r3, #2
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	629a      	str	r2, [r3, #40]	; 0x28
 8004f9c:	e026      	b.n	8004fec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	689b      	ldr	r3, [r3, #8]
 8004fac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fb0:	d007      	beq.n	8004fc2 <UART_Receive_IT+0x74>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d10a      	bne.n	8004fd0 <UART_Receive_IT+0x82>
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	691b      	ldr	r3, [r3, #16]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	b2da      	uxtb	r2, r3
 8004fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fcc:	701a      	strb	r2, [r3, #0]
 8004fce:	e008      	b.n	8004fe2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	b2db      	uxtb	r3, r3
 8004fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fdc:	b2da      	uxtb	r2, r3
 8004fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fe0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe6:	1c5a      	adds	r2, r3, #1
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	3b01      	subs	r3, #1
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4619      	mov	r1, r3
 8004ffa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d15a      	bne.n	80050b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	68da      	ldr	r2, [r3, #12]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f022 0220 	bic.w	r2, r2, #32
 800500e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	68da      	ldr	r2, [r3, #12]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800501e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	695a      	ldr	r2, [r3, #20]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f022 0201 	bic.w	r2, r2, #1
 800502e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2220      	movs	r2, #32
 8005034:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800503c:	2b01      	cmp	r3, #1
 800503e:	d135      	bne.n	80050ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	330c      	adds	r3, #12
 800504c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	613b      	str	r3, [r7, #16]
   return(result);
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f023 0310 	bic.w	r3, r3, #16
 800505c:	627b      	str	r3, [r7, #36]	; 0x24
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	330c      	adds	r3, #12
 8005064:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005066:	623a      	str	r2, [r7, #32]
 8005068:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506a:	69f9      	ldr	r1, [r7, #28]
 800506c:	6a3a      	ldr	r2, [r7, #32]
 800506e:	e841 2300 	strex	r3, r2, [r1]
 8005072:	61bb      	str	r3, [r7, #24]
   return(result);
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d1e5      	bne.n	8005046 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0310 	and.w	r3, r3, #16
 8005084:	2b10      	cmp	r3, #16
 8005086:	d10a      	bne.n	800509e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005088:	2300      	movs	r3, #0
 800508a:	60fb      	str	r3, [r7, #12]
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	60fb      	str	r3, [r7, #12]
 800509c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80050a2:	4619      	mov	r1, r3
 80050a4:	6878      	ldr	r0, [r7, #4]
 80050a6:	f7ff fdf9 	bl	8004c9c <HAL_UARTEx_RxEventCallback>
 80050aa:	e002      	b.n	80050b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f7ff fde1 	bl	8004c74 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80050b2:	2300      	movs	r3, #0
 80050b4:	e002      	b.n	80050bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80050b6:	2300      	movs	r3, #0
 80050b8:	e000      	b.n	80050bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80050ba:	2302      	movs	r3, #2
  }
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3730      	adds	r7, #48	; 0x30
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}

080050c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80050c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050c8:	b09f      	sub	sp, #124	; 0x7c
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	691b      	ldr	r3, [r3, #16]
 80050d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80050d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050da:	68d9      	ldr	r1, [r3, #12]
 80050dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	ea40 0301 	orr.w	r3, r0, r1
 80050e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80050e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050e8:	689a      	ldr	r2, [r3, #8]
 80050ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	431a      	orrs	r2, r3
 80050f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	431a      	orrs	r2, r3
 80050f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80050f8:	69db      	ldr	r3, [r3, #28]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80050fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005108:	f021 010c 	bic.w	r1, r1, #12
 800510c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800510e:	681a      	ldr	r2, [r3, #0]
 8005110:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005112:	430b      	orrs	r3, r1
 8005114:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005116:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	695b      	ldr	r3, [r3, #20]
 800511c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005120:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005122:	6999      	ldr	r1, [r3, #24]
 8005124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005126:	681a      	ldr	r2, [r3, #0]
 8005128:	ea40 0301 	orr.w	r3, r0, r1
 800512c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800512e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	4bc5      	ldr	r3, [pc, #788]	; (8005448 <UART_SetConfig+0x384>)
 8005134:	429a      	cmp	r2, r3
 8005136:	d004      	beq.n	8005142 <UART_SetConfig+0x7e>
 8005138:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	4bc3      	ldr	r3, [pc, #780]	; (800544c <UART_SetConfig+0x388>)
 800513e:	429a      	cmp	r2, r3
 8005140:	d103      	bne.n	800514a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005142:	f7fe fa37 	bl	80035b4 <HAL_RCC_GetPCLK2Freq>
 8005146:	6778      	str	r0, [r7, #116]	; 0x74
 8005148:	e002      	b.n	8005150 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800514a:	f7fe fa1f 	bl	800358c <HAL_RCC_GetPCLK1Freq>
 800514e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005150:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005152:	69db      	ldr	r3, [r3, #28]
 8005154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005158:	f040 80b6 	bne.w	80052c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800515c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515e:	461c      	mov	r4, r3
 8005160:	f04f 0500 	mov.w	r5, #0
 8005164:	4622      	mov	r2, r4
 8005166:	462b      	mov	r3, r5
 8005168:	1891      	adds	r1, r2, r2
 800516a:	6439      	str	r1, [r7, #64]	; 0x40
 800516c:	415b      	adcs	r3, r3
 800516e:	647b      	str	r3, [r7, #68]	; 0x44
 8005170:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005174:	1912      	adds	r2, r2, r4
 8005176:	eb45 0303 	adc.w	r3, r5, r3
 800517a:	f04f 0000 	mov.w	r0, #0
 800517e:	f04f 0100 	mov.w	r1, #0
 8005182:	00d9      	lsls	r1, r3, #3
 8005184:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005188:	00d0      	lsls	r0, r2, #3
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	1911      	adds	r1, r2, r4
 8005190:	6639      	str	r1, [r7, #96]	; 0x60
 8005192:	416b      	adcs	r3, r5
 8005194:	667b      	str	r3, [r7, #100]	; 0x64
 8005196:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	461a      	mov	r2, r3
 800519c:	f04f 0300 	mov.w	r3, #0
 80051a0:	1891      	adds	r1, r2, r2
 80051a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80051a4:	415b      	adcs	r3, r3
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80051ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80051b0:	f7fb fd7a 	bl	8000ca8 <__aeabi_uldivmod>
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4ba5      	ldr	r3, [pc, #660]	; (8005450 <UART_SetConfig+0x38c>)
 80051ba:	fba3 2302 	umull	r2, r3, r3, r2
 80051be:	095b      	lsrs	r3, r3, #5
 80051c0:	011e      	lsls	r6, r3, #4
 80051c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051c4:	461c      	mov	r4, r3
 80051c6:	f04f 0500 	mov.w	r5, #0
 80051ca:	4622      	mov	r2, r4
 80051cc:	462b      	mov	r3, r5
 80051ce:	1891      	adds	r1, r2, r2
 80051d0:	6339      	str	r1, [r7, #48]	; 0x30
 80051d2:	415b      	adcs	r3, r3
 80051d4:	637b      	str	r3, [r7, #52]	; 0x34
 80051d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80051da:	1912      	adds	r2, r2, r4
 80051dc:	eb45 0303 	adc.w	r3, r5, r3
 80051e0:	f04f 0000 	mov.w	r0, #0
 80051e4:	f04f 0100 	mov.w	r1, #0
 80051e8:	00d9      	lsls	r1, r3, #3
 80051ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051ee:	00d0      	lsls	r0, r2, #3
 80051f0:	4602      	mov	r2, r0
 80051f2:	460b      	mov	r3, r1
 80051f4:	1911      	adds	r1, r2, r4
 80051f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80051f8:	416b      	adcs	r3, r5
 80051fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80051fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	461a      	mov	r2, r3
 8005202:	f04f 0300 	mov.w	r3, #0
 8005206:	1891      	adds	r1, r2, r2
 8005208:	62b9      	str	r1, [r7, #40]	; 0x28
 800520a:	415b      	adcs	r3, r3
 800520c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800520e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005212:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005216:	f7fb fd47 	bl	8000ca8 <__aeabi_uldivmod>
 800521a:	4602      	mov	r2, r0
 800521c:	460b      	mov	r3, r1
 800521e:	4b8c      	ldr	r3, [pc, #560]	; (8005450 <UART_SetConfig+0x38c>)
 8005220:	fba3 1302 	umull	r1, r3, r3, r2
 8005224:	095b      	lsrs	r3, r3, #5
 8005226:	2164      	movs	r1, #100	; 0x64
 8005228:	fb01 f303 	mul.w	r3, r1, r3
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	00db      	lsls	r3, r3, #3
 8005230:	3332      	adds	r3, #50	; 0x32
 8005232:	4a87      	ldr	r2, [pc, #540]	; (8005450 <UART_SetConfig+0x38c>)
 8005234:	fba2 2303 	umull	r2, r3, r2, r3
 8005238:	095b      	lsrs	r3, r3, #5
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005240:	441e      	add	r6, r3
 8005242:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005244:	4618      	mov	r0, r3
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	1894      	adds	r4, r2, r2
 8005250:	623c      	str	r4, [r7, #32]
 8005252:	415b      	adcs	r3, r3
 8005254:	627b      	str	r3, [r7, #36]	; 0x24
 8005256:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800525a:	1812      	adds	r2, r2, r0
 800525c:	eb41 0303 	adc.w	r3, r1, r3
 8005260:	f04f 0400 	mov.w	r4, #0
 8005264:	f04f 0500 	mov.w	r5, #0
 8005268:	00dd      	lsls	r5, r3, #3
 800526a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800526e:	00d4      	lsls	r4, r2, #3
 8005270:	4622      	mov	r2, r4
 8005272:	462b      	mov	r3, r5
 8005274:	1814      	adds	r4, r2, r0
 8005276:	653c      	str	r4, [r7, #80]	; 0x50
 8005278:	414b      	adcs	r3, r1
 800527a:	657b      	str	r3, [r7, #84]	; 0x54
 800527c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	1891      	adds	r1, r2, r2
 8005288:	61b9      	str	r1, [r7, #24]
 800528a:	415b      	adcs	r3, r3
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005292:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005296:	f7fb fd07 	bl	8000ca8 <__aeabi_uldivmod>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4b6c      	ldr	r3, [pc, #432]	; (8005450 <UART_SetConfig+0x38c>)
 80052a0:	fba3 1302 	umull	r1, r3, r3, r2
 80052a4:	095b      	lsrs	r3, r3, #5
 80052a6:	2164      	movs	r1, #100	; 0x64
 80052a8:	fb01 f303 	mul.w	r3, r1, r3
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	00db      	lsls	r3, r3, #3
 80052b0:	3332      	adds	r3, #50	; 0x32
 80052b2:	4a67      	ldr	r2, [pc, #412]	; (8005450 <UART_SetConfig+0x38c>)
 80052b4:	fba2 2303 	umull	r2, r3, r2, r3
 80052b8:	095b      	lsrs	r3, r3, #5
 80052ba:	f003 0207 	and.w	r2, r3, #7
 80052be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4432      	add	r2, r6
 80052c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052c6:	e0b9      	b.n	800543c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80052c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052ca:	461c      	mov	r4, r3
 80052cc:	f04f 0500 	mov.w	r5, #0
 80052d0:	4622      	mov	r2, r4
 80052d2:	462b      	mov	r3, r5
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	6139      	str	r1, [r7, #16]
 80052d8:	415b      	adcs	r3, r3
 80052da:	617b      	str	r3, [r7, #20]
 80052dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80052e0:	1912      	adds	r2, r2, r4
 80052e2:	eb45 0303 	adc.w	r3, r5, r3
 80052e6:	f04f 0000 	mov.w	r0, #0
 80052ea:	f04f 0100 	mov.w	r1, #0
 80052ee:	00d9      	lsls	r1, r3, #3
 80052f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052f4:	00d0      	lsls	r0, r2, #3
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	eb12 0804 	adds.w	r8, r2, r4
 80052fe:	eb43 0905 	adc.w	r9, r3, r5
 8005302:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	4618      	mov	r0, r3
 8005308:	f04f 0100 	mov.w	r1, #0
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	008b      	lsls	r3, r1, #2
 8005316:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800531a:	0082      	lsls	r2, r0, #2
 800531c:	4640      	mov	r0, r8
 800531e:	4649      	mov	r1, r9
 8005320:	f7fb fcc2 	bl	8000ca8 <__aeabi_uldivmod>
 8005324:	4602      	mov	r2, r0
 8005326:	460b      	mov	r3, r1
 8005328:	4b49      	ldr	r3, [pc, #292]	; (8005450 <UART_SetConfig+0x38c>)
 800532a:	fba3 2302 	umull	r2, r3, r3, r2
 800532e:	095b      	lsrs	r3, r3, #5
 8005330:	011e      	lsls	r6, r3, #4
 8005332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005334:	4618      	mov	r0, r3
 8005336:	f04f 0100 	mov.w	r1, #0
 800533a:	4602      	mov	r2, r0
 800533c:	460b      	mov	r3, r1
 800533e:	1894      	adds	r4, r2, r2
 8005340:	60bc      	str	r4, [r7, #8]
 8005342:	415b      	adcs	r3, r3
 8005344:	60fb      	str	r3, [r7, #12]
 8005346:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800534a:	1812      	adds	r2, r2, r0
 800534c:	eb41 0303 	adc.w	r3, r1, r3
 8005350:	f04f 0400 	mov.w	r4, #0
 8005354:	f04f 0500 	mov.w	r5, #0
 8005358:	00dd      	lsls	r5, r3, #3
 800535a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800535e:	00d4      	lsls	r4, r2, #3
 8005360:	4622      	mov	r2, r4
 8005362:	462b      	mov	r3, r5
 8005364:	1814      	adds	r4, r2, r0
 8005366:	64bc      	str	r4, [r7, #72]	; 0x48
 8005368:	414b      	adcs	r3, r1
 800536a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800536c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	4618      	mov	r0, r3
 8005372:	f04f 0100 	mov.w	r1, #0
 8005376:	f04f 0200 	mov.w	r2, #0
 800537a:	f04f 0300 	mov.w	r3, #0
 800537e:	008b      	lsls	r3, r1, #2
 8005380:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005384:	0082      	lsls	r2, r0, #2
 8005386:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800538a:	f7fb fc8d 	bl	8000ca8 <__aeabi_uldivmod>
 800538e:	4602      	mov	r2, r0
 8005390:	460b      	mov	r3, r1
 8005392:	4b2f      	ldr	r3, [pc, #188]	; (8005450 <UART_SetConfig+0x38c>)
 8005394:	fba3 1302 	umull	r1, r3, r3, r2
 8005398:	095b      	lsrs	r3, r3, #5
 800539a:	2164      	movs	r1, #100	; 0x64
 800539c:	fb01 f303 	mul.w	r3, r1, r3
 80053a0:	1ad3      	subs	r3, r2, r3
 80053a2:	011b      	lsls	r3, r3, #4
 80053a4:	3332      	adds	r3, #50	; 0x32
 80053a6:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <UART_SetConfig+0x38c>)
 80053a8:	fba2 2303 	umull	r2, r3, r2, r3
 80053ac:	095b      	lsrs	r3, r3, #5
 80053ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80053b2:	441e      	add	r6, r3
 80053b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b6:	4618      	mov	r0, r3
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	1894      	adds	r4, r2, r2
 80053c2:	603c      	str	r4, [r7, #0]
 80053c4:	415b      	adcs	r3, r3
 80053c6:	607b      	str	r3, [r7, #4]
 80053c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80053cc:	1812      	adds	r2, r2, r0
 80053ce:	eb41 0303 	adc.w	r3, r1, r3
 80053d2:	f04f 0400 	mov.w	r4, #0
 80053d6:	f04f 0500 	mov.w	r5, #0
 80053da:	00dd      	lsls	r5, r3, #3
 80053dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053e0:	00d4      	lsls	r4, r2, #3
 80053e2:	4622      	mov	r2, r4
 80053e4:	462b      	mov	r3, r5
 80053e6:	eb12 0a00 	adds.w	sl, r2, r0
 80053ea:	eb43 0b01 	adc.w	fp, r3, r1
 80053ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f04f 0100 	mov.w	r1, #0
 80053f8:	f04f 0200 	mov.w	r2, #0
 80053fc:	f04f 0300 	mov.w	r3, #0
 8005400:	008b      	lsls	r3, r1, #2
 8005402:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005406:	0082      	lsls	r2, r0, #2
 8005408:	4650      	mov	r0, sl
 800540a:	4659      	mov	r1, fp
 800540c:	f7fb fc4c 	bl	8000ca8 <__aeabi_uldivmod>
 8005410:	4602      	mov	r2, r0
 8005412:	460b      	mov	r3, r1
 8005414:	4b0e      	ldr	r3, [pc, #56]	; (8005450 <UART_SetConfig+0x38c>)
 8005416:	fba3 1302 	umull	r1, r3, r3, r2
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2164      	movs	r1, #100	; 0x64
 800541e:	fb01 f303 	mul.w	r3, r1, r3
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	011b      	lsls	r3, r3, #4
 8005426:	3332      	adds	r3, #50	; 0x32
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <UART_SetConfig+0x38c>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	f003 020f 	and.w	r2, r3, #15
 8005434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4432      	add	r2, r6
 800543a:	609a      	str	r2, [r3, #8]
}
 800543c:	bf00      	nop
 800543e:	377c      	adds	r7, #124	; 0x7c
 8005440:	46bd      	mov	sp, r7
 8005442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005446:	bf00      	nop
 8005448:	40011000 	.word	0x40011000
 800544c:	40011400 	.word	0x40011400
 8005450:	51eb851f 	.word	0x51eb851f

08005454 <__errno>:
 8005454:	4b01      	ldr	r3, [pc, #4]	; (800545c <__errno+0x8>)
 8005456:	6818      	ldr	r0, [r3, #0]
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	2000000c 	.word	0x2000000c

08005460 <__libc_init_array>:
 8005460:	b570      	push	{r4, r5, r6, lr}
 8005462:	4d0d      	ldr	r5, [pc, #52]	; (8005498 <__libc_init_array+0x38>)
 8005464:	4c0d      	ldr	r4, [pc, #52]	; (800549c <__libc_init_array+0x3c>)
 8005466:	1b64      	subs	r4, r4, r5
 8005468:	10a4      	asrs	r4, r4, #2
 800546a:	2600      	movs	r6, #0
 800546c:	42a6      	cmp	r6, r4
 800546e:	d109      	bne.n	8005484 <__libc_init_array+0x24>
 8005470:	4d0b      	ldr	r5, [pc, #44]	; (80054a0 <__libc_init_array+0x40>)
 8005472:	4c0c      	ldr	r4, [pc, #48]	; (80054a4 <__libc_init_array+0x44>)
 8005474:	f004 fc5e 	bl	8009d34 <_init>
 8005478:	1b64      	subs	r4, r4, r5
 800547a:	10a4      	asrs	r4, r4, #2
 800547c:	2600      	movs	r6, #0
 800547e:	42a6      	cmp	r6, r4
 8005480:	d105      	bne.n	800548e <__libc_init_array+0x2e>
 8005482:	bd70      	pop	{r4, r5, r6, pc}
 8005484:	f855 3b04 	ldr.w	r3, [r5], #4
 8005488:	4798      	blx	r3
 800548a:	3601      	adds	r6, #1
 800548c:	e7ee      	b.n	800546c <__libc_init_array+0xc>
 800548e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005492:	4798      	blx	r3
 8005494:	3601      	adds	r6, #1
 8005496:	e7f2      	b.n	800547e <__libc_init_array+0x1e>
 8005498:	0800a24c 	.word	0x0800a24c
 800549c:	0800a24c 	.word	0x0800a24c
 80054a0:	0800a24c 	.word	0x0800a24c
 80054a4:	0800a250 	.word	0x0800a250

080054a8 <memset>:
 80054a8:	4402      	add	r2, r0
 80054aa:	4603      	mov	r3, r0
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d100      	bne.n	80054b2 <memset+0xa>
 80054b0:	4770      	bx	lr
 80054b2:	f803 1b01 	strb.w	r1, [r3], #1
 80054b6:	e7f9      	b.n	80054ac <memset+0x4>

080054b8 <__cvt>:
 80054b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054bc:	ec55 4b10 	vmov	r4, r5, d0
 80054c0:	2d00      	cmp	r5, #0
 80054c2:	460e      	mov	r6, r1
 80054c4:	4619      	mov	r1, r3
 80054c6:	462b      	mov	r3, r5
 80054c8:	bfbb      	ittet	lt
 80054ca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80054ce:	461d      	movlt	r5, r3
 80054d0:	2300      	movge	r3, #0
 80054d2:	232d      	movlt	r3, #45	; 0x2d
 80054d4:	700b      	strb	r3, [r1, #0]
 80054d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80054d8:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80054dc:	4691      	mov	r9, r2
 80054de:	f023 0820 	bic.w	r8, r3, #32
 80054e2:	bfbc      	itt	lt
 80054e4:	4622      	movlt	r2, r4
 80054e6:	4614      	movlt	r4, r2
 80054e8:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80054ec:	d005      	beq.n	80054fa <__cvt+0x42>
 80054ee:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80054f2:	d100      	bne.n	80054f6 <__cvt+0x3e>
 80054f4:	3601      	adds	r6, #1
 80054f6:	2102      	movs	r1, #2
 80054f8:	e000      	b.n	80054fc <__cvt+0x44>
 80054fa:	2103      	movs	r1, #3
 80054fc:	ab03      	add	r3, sp, #12
 80054fe:	9301      	str	r3, [sp, #4]
 8005500:	ab02      	add	r3, sp, #8
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	ec45 4b10 	vmov	d0, r4, r5
 8005508:	4653      	mov	r3, sl
 800550a:	4632      	mov	r2, r6
 800550c:	f001 fdcc 	bl	80070a8 <_dtoa_r>
 8005510:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005514:	4607      	mov	r7, r0
 8005516:	d102      	bne.n	800551e <__cvt+0x66>
 8005518:	f019 0f01 	tst.w	r9, #1
 800551c:	d022      	beq.n	8005564 <__cvt+0xac>
 800551e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005522:	eb07 0906 	add.w	r9, r7, r6
 8005526:	d110      	bne.n	800554a <__cvt+0x92>
 8005528:	783b      	ldrb	r3, [r7, #0]
 800552a:	2b30      	cmp	r3, #48	; 0x30
 800552c:	d10a      	bne.n	8005544 <__cvt+0x8c>
 800552e:	2200      	movs	r2, #0
 8005530:	2300      	movs	r3, #0
 8005532:	4620      	mov	r0, r4
 8005534:	4629      	mov	r1, r5
 8005536:	f7fb fad7 	bl	8000ae8 <__aeabi_dcmpeq>
 800553a:	b918      	cbnz	r0, 8005544 <__cvt+0x8c>
 800553c:	f1c6 0601 	rsb	r6, r6, #1
 8005540:	f8ca 6000 	str.w	r6, [sl]
 8005544:	f8da 3000 	ldr.w	r3, [sl]
 8005548:	4499      	add	r9, r3
 800554a:	2200      	movs	r2, #0
 800554c:	2300      	movs	r3, #0
 800554e:	4620      	mov	r0, r4
 8005550:	4629      	mov	r1, r5
 8005552:	f7fb fac9 	bl	8000ae8 <__aeabi_dcmpeq>
 8005556:	b108      	cbz	r0, 800555c <__cvt+0xa4>
 8005558:	f8cd 900c 	str.w	r9, [sp, #12]
 800555c:	2230      	movs	r2, #48	; 0x30
 800555e:	9b03      	ldr	r3, [sp, #12]
 8005560:	454b      	cmp	r3, r9
 8005562:	d307      	bcc.n	8005574 <__cvt+0xbc>
 8005564:	9b03      	ldr	r3, [sp, #12]
 8005566:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005568:	1bdb      	subs	r3, r3, r7
 800556a:	4638      	mov	r0, r7
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	b004      	add	sp, #16
 8005570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005574:	1c59      	adds	r1, r3, #1
 8005576:	9103      	str	r1, [sp, #12]
 8005578:	701a      	strb	r2, [r3, #0]
 800557a:	e7f0      	b.n	800555e <__cvt+0xa6>

0800557c <__exponent>:
 800557c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800557e:	4603      	mov	r3, r0
 8005580:	2900      	cmp	r1, #0
 8005582:	bfb8      	it	lt
 8005584:	4249      	neglt	r1, r1
 8005586:	f803 2b02 	strb.w	r2, [r3], #2
 800558a:	bfb4      	ite	lt
 800558c:	222d      	movlt	r2, #45	; 0x2d
 800558e:	222b      	movge	r2, #43	; 0x2b
 8005590:	2909      	cmp	r1, #9
 8005592:	7042      	strb	r2, [r0, #1]
 8005594:	dd2a      	ble.n	80055ec <__exponent+0x70>
 8005596:	f10d 0407 	add.w	r4, sp, #7
 800559a:	46a4      	mov	ip, r4
 800559c:	270a      	movs	r7, #10
 800559e:	46a6      	mov	lr, r4
 80055a0:	460a      	mov	r2, r1
 80055a2:	fb91 f6f7 	sdiv	r6, r1, r7
 80055a6:	fb07 1516 	mls	r5, r7, r6, r1
 80055aa:	3530      	adds	r5, #48	; 0x30
 80055ac:	2a63      	cmp	r2, #99	; 0x63
 80055ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80055b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80055b6:	4631      	mov	r1, r6
 80055b8:	dcf1      	bgt.n	800559e <__exponent+0x22>
 80055ba:	3130      	adds	r1, #48	; 0x30
 80055bc:	f1ae 0502 	sub.w	r5, lr, #2
 80055c0:	f804 1c01 	strb.w	r1, [r4, #-1]
 80055c4:	1c44      	adds	r4, r0, #1
 80055c6:	4629      	mov	r1, r5
 80055c8:	4561      	cmp	r1, ip
 80055ca:	d30a      	bcc.n	80055e2 <__exponent+0x66>
 80055cc:	f10d 0209 	add.w	r2, sp, #9
 80055d0:	eba2 020e 	sub.w	r2, r2, lr
 80055d4:	4565      	cmp	r5, ip
 80055d6:	bf88      	it	hi
 80055d8:	2200      	movhi	r2, #0
 80055da:	4413      	add	r3, r2
 80055dc:	1a18      	subs	r0, r3, r0
 80055de:	b003      	add	sp, #12
 80055e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055e6:	f804 2f01 	strb.w	r2, [r4, #1]!
 80055ea:	e7ed      	b.n	80055c8 <__exponent+0x4c>
 80055ec:	2330      	movs	r3, #48	; 0x30
 80055ee:	3130      	adds	r1, #48	; 0x30
 80055f0:	7083      	strb	r3, [r0, #2]
 80055f2:	70c1      	strb	r1, [r0, #3]
 80055f4:	1d03      	adds	r3, r0, #4
 80055f6:	e7f1      	b.n	80055dc <__exponent+0x60>

080055f8 <_printf_float>:
 80055f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055fc:	ed2d 8b02 	vpush	{d8}
 8005600:	b08d      	sub	sp, #52	; 0x34
 8005602:	460c      	mov	r4, r1
 8005604:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8005608:	4616      	mov	r6, r2
 800560a:	461f      	mov	r7, r3
 800560c:	4605      	mov	r5, r0
 800560e:	f002 ff9b 	bl	8008548 <_localeconv_r>
 8005612:	f8d0 a000 	ldr.w	sl, [r0]
 8005616:	4650      	mov	r0, sl
 8005618:	f7fa fdea 	bl	80001f0 <strlen>
 800561c:	2300      	movs	r3, #0
 800561e:	930a      	str	r3, [sp, #40]	; 0x28
 8005620:	6823      	ldr	r3, [r4, #0]
 8005622:	9305      	str	r3, [sp, #20]
 8005624:	f8d8 3000 	ldr.w	r3, [r8]
 8005628:	f894 b018 	ldrb.w	fp, [r4, #24]
 800562c:	3307      	adds	r3, #7
 800562e:	f023 0307 	bic.w	r3, r3, #7
 8005632:	f103 0208 	add.w	r2, r3, #8
 8005636:	f8c8 2000 	str.w	r2, [r8]
 800563a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800563e:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005642:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8005646:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800564a:	9307      	str	r3, [sp, #28]
 800564c:	f8cd 8018 	str.w	r8, [sp, #24]
 8005650:	ee08 0a10 	vmov	s16, r0
 8005654:	4b9f      	ldr	r3, [pc, #636]	; (80058d4 <_printf_float+0x2dc>)
 8005656:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800565a:	f04f 32ff 	mov.w	r2, #4294967295
 800565e:	f7fb fa75 	bl	8000b4c <__aeabi_dcmpun>
 8005662:	bb88      	cbnz	r0, 80056c8 <_printf_float+0xd0>
 8005664:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005668:	4b9a      	ldr	r3, [pc, #616]	; (80058d4 <_printf_float+0x2dc>)
 800566a:	f04f 32ff 	mov.w	r2, #4294967295
 800566e:	f7fb fa4f 	bl	8000b10 <__aeabi_dcmple>
 8005672:	bb48      	cbnz	r0, 80056c8 <_printf_float+0xd0>
 8005674:	2200      	movs	r2, #0
 8005676:	2300      	movs	r3, #0
 8005678:	4640      	mov	r0, r8
 800567a:	4649      	mov	r1, r9
 800567c:	f7fb fa3e 	bl	8000afc <__aeabi_dcmplt>
 8005680:	b110      	cbz	r0, 8005688 <_printf_float+0x90>
 8005682:	232d      	movs	r3, #45	; 0x2d
 8005684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005688:	4b93      	ldr	r3, [pc, #588]	; (80058d8 <_printf_float+0x2e0>)
 800568a:	4894      	ldr	r0, [pc, #592]	; (80058dc <_printf_float+0x2e4>)
 800568c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8005690:	bf94      	ite	ls
 8005692:	4698      	movls	r8, r3
 8005694:	4680      	movhi	r8, r0
 8005696:	2303      	movs	r3, #3
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	9b05      	ldr	r3, [sp, #20]
 800569c:	f023 0204 	bic.w	r2, r3, #4
 80056a0:	6022      	str	r2, [r4, #0]
 80056a2:	f04f 0900 	mov.w	r9, #0
 80056a6:	9700      	str	r7, [sp, #0]
 80056a8:	4633      	mov	r3, r6
 80056aa:	aa0b      	add	r2, sp, #44	; 0x2c
 80056ac:	4621      	mov	r1, r4
 80056ae:	4628      	mov	r0, r5
 80056b0:	f000 f9d8 	bl	8005a64 <_printf_common>
 80056b4:	3001      	adds	r0, #1
 80056b6:	f040 8090 	bne.w	80057da <_printf_float+0x1e2>
 80056ba:	f04f 30ff 	mov.w	r0, #4294967295
 80056be:	b00d      	add	sp, #52	; 0x34
 80056c0:	ecbd 8b02 	vpop	{d8}
 80056c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	4640      	mov	r0, r8
 80056ce:	4649      	mov	r1, r9
 80056d0:	f7fb fa3c 	bl	8000b4c <__aeabi_dcmpun>
 80056d4:	b140      	cbz	r0, 80056e8 <_printf_float+0xf0>
 80056d6:	464b      	mov	r3, r9
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bfbc      	itt	lt
 80056dc:	232d      	movlt	r3, #45	; 0x2d
 80056de:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80056e2:	487f      	ldr	r0, [pc, #508]	; (80058e0 <_printf_float+0x2e8>)
 80056e4:	4b7f      	ldr	r3, [pc, #508]	; (80058e4 <_printf_float+0x2ec>)
 80056e6:	e7d1      	b.n	800568c <_printf_float+0x94>
 80056e8:	6863      	ldr	r3, [r4, #4]
 80056ea:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80056ee:	9206      	str	r2, [sp, #24]
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	d13f      	bne.n	8005774 <_printf_float+0x17c>
 80056f4:	2306      	movs	r3, #6
 80056f6:	6063      	str	r3, [r4, #4]
 80056f8:	9b05      	ldr	r3, [sp, #20]
 80056fa:	6861      	ldr	r1, [r4, #4]
 80056fc:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005700:	2300      	movs	r3, #0
 8005702:	9303      	str	r3, [sp, #12]
 8005704:	ab0a      	add	r3, sp, #40	; 0x28
 8005706:	e9cd b301 	strd	fp, r3, [sp, #4]
 800570a:	ab09      	add	r3, sp, #36	; 0x24
 800570c:	ec49 8b10 	vmov	d0, r8, r9
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	6022      	str	r2, [r4, #0]
 8005714:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8005718:	4628      	mov	r0, r5
 800571a:	f7ff fecd 	bl	80054b8 <__cvt>
 800571e:	9b06      	ldr	r3, [sp, #24]
 8005720:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005722:	2b47      	cmp	r3, #71	; 0x47
 8005724:	4680      	mov	r8, r0
 8005726:	d108      	bne.n	800573a <_printf_float+0x142>
 8005728:	1cc8      	adds	r0, r1, #3
 800572a:	db02      	blt.n	8005732 <_printf_float+0x13a>
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	4299      	cmp	r1, r3
 8005730:	dd41      	ble.n	80057b6 <_printf_float+0x1be>
 8005732:	f1ab 0b02 	sub.w	fp, fp, #2
 8005736:	fa5f fb8b 	uxtb.w	fp, fp
 800573a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800573e:	d820      	bhi.n	8005782 <_printf_float+0x18a>
 8005740:	3901      	subs	r1, #1
 8005742:	465a      	mov	r2, fp
 8005744:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8005748:	9109      	str	r1, [sp, #36]	; 0x24
 800574a:	f7ff ff17 	bl	800557c <__exponent>
 800574e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005750:	1813      	adds	r3, r2, r0
 8005752:	2a01      	cmp	r2, #1
 8005754:	4681      	mov	r9, r0
 8005756:	6123      	str	r3, [r4, #16]
 8005758:	dc02      	bgt.n	8005760 <_printf_float+0x168>
 800575a:	6822      	ldr	r2, [r4, #0]
 800575c:	07d2      	lsls	r2, r2, #31
 800575e:	d501      	bpl.n	8005764 <_printf_float+0x16c>
 8005760:	3301      	adds	r3, #1
 8005762:	6123      	str	r3, [r4, #16]
 8005764:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8005768:	2b00      	cmp	r3, #0
 800576a:	d09c      	beq.n	80056a6 <_printf_float+0xae>
 800576c:	232d      	movs	r3, #45	; 0x2d
 800576e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005772:	e798      	b.n	80056a6 <_printf_float+0xae>
 8005774:	9a06      	ldr	r2, [sp, #24]
 8005776:	2a47      	cmp	r2, #71	; 0x47
 8005778:	d1be      	bne.n	80056f8 <_printf_float+0x100>
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1bc      	bne.n	80056f8 <_printf_float+0x100>
 800577e:	2301      	movs	r3, #1
 8005780:	e7b9      	b.n	80056f6 <_printf_float+0xfe>
 8005782:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005786:	d118      	bne.n	80057ba <_printf_float+0x1c2>
 8005788:	2900      	cmp	r1, #0
 800578a:	6863      	ldr	r3, [r4, #4]
 800578c:	dd0b      	ble.n	80057a6 <_printf_float+0x1ae>
 800578e:	6121      	str	r1, [r4, #16]
 8005790:	b913      	cbnz	r3, 8005798 <_printf_float+0x1a0>
 8005792:	6822      	ldr	r2, [r4, #0]
 8005794:	07d0      	lsls	r0, r2, #31
 8005796:	d502      	bpl.n	800579e <_printf_float+0x1a6>
 8005798:	3301      	adds	r3, #1
 800579a:	440b      	add	r3, r1
 800579c:	6123      	str	r3, [r4, #16]
 800579e:	65a1      	str	r1, [r4, #88]	; 0x58
 80057a0:	f04f 0900 	mov.w	r9, #0
 80057a4:	e7de      	b.n	8005764 <_printf_float+0x16c>
 80057a6:	b913      	cbnz	r3, 80057ae <_printf_float+0x1b6>
 80057a8:	6822      	ldr	r2, [r4, #0]
 80057aa:	07d2      	lsls	r2, r2, #31
 80057ac:	d501      	bpl.n	80057b2 <_printf_float+0x1ba>
 80057ae:	3302      	adds	r3, #2
 80057b0:	e7f4      	b.n	800579c <_printf_float+0x1a4>
 80057b2:	2301      	movs	r3, #1
 80057b4:	e7f2      	b.n	800579c <_printf_float+0x1a4>
 80057b6:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80057ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057bc:	4299      	cmp	r1, r3
 80057be:	db05      	blt.n	80057cc <_printf_float+0x1d4>
 80057c0:	6823      	ldr	r3, [r4, #0]
 80057c2:	6121      	str	r1, [r4, #16]
 80057c4:	07d8      	lsls	r0, r3, #31
 80057c6:	d5ea      	bpl.n	800579e <_printf_float+0x1a6>
 80057c8:	1c4b      	adds	r3, r1, #1
 80057ca:	e7e7      	b.n	800579c <_printf_float+0x1a4>
 80057cc:	2900      	cmp	r1, #0
 80057ce:	bfd4      	ite	le
 80057d0:	f1c1 0202 	rsble	r2, r1, #2
 80057d4:	2201      	movgt	r2, #1
 80057d6:	4413      	add	r3, r2
 80057d8:	e7e0      	b.n	800579c <_printf_float+0x1a4>
 80057da:	6823      	ldr	r3, [r4, #0]
 80057dc:	055a      	lsls	r2, r3, #21
 80057de:	d407      	bmi.n	80057f0 <_printf_float+0x1f8>
 80057e0:	6923      	ldr	r3, [r4, #16]
 80057e2:	4642      	mov	r2, r8
 80057e4:	4631      	mov	r1, r6
 80057e6:	4628      	mov	r0, r5
 80057e8:	47b8      	blx	r7
 80057ea:	3001      	adds	r0, #1
 80057ec:	d12c      	bne.n	8005848 <_printf_float+0x250>
 80057ee:	e764      	b.n	80056ba <_printf_float+0xc2>
 80057f0:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80057f4:	f240 80e0 	bls.w	80059b8 <_printf_float+0x3c0>
 80057f8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80057fc:	2200      	movs	r2, #0
 80057fe:	2300      	movs	r3, #0
 8005800:	f7fb f972 	bl	8000ae8 <__aeabi_dcmpeq>
 8005804:	2800      	cmp	r0, #0
 8005806:	d034      	beq.n	8005872 <_printf_float+0x27a>
 8005808:	4a37      	ldr	r2, [pc, #220]	; (80058e8 <_printf_float+0x2f0>)
 800580a:	2301      	movs	r3, #1
 800580c:	4631      	mov	r1, r6
 800580e:	4628      	mov	r0, r5
 8005810:	47b8      	blx	r7
 8005812:	3001      	adds	r0, #1
 8005814:	f43f af51 	beq.w	80056ba <_printf_float+0xc2>
 8005818:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800581c:	429a      	cmp	r2, r3
 800581e:	db02      	blt.n	8005826 <_printf_float+0x22e>
 8005820:	6823      	ldr	r3, [r4, #0]
 8005822:	07d8      	lsls	r0, r3, #31
 8005824:	d510      	bpl.n	8005848 <_printf_float+0x250>
 8005826:	ee18 3a10 	vmov	r3, s16
 800582a:	4652      	mov	r2, sl
 800582c:	4631      	mov	r1, r6
 800582e:	4628      	mov	r0, r5
 8005830:	47b8      	blx	r7
 8005832:	3001      	adds	r0, #1
 8005834:	f43f af41 	beq.w	80056ba <_printf_float+0xc2>
 8005838:	f04f 0800 	mov.w	r8, #0
 800583c:	f104 091a 	add.w	r9, r4, #26
 8005840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	4543      	cmp	r3, r8
 8005846:	dc09      	bgt.n	800585c <_printf_float+0x264>
 8005848:	6823      	ldr	r3, [r4, #0]
 800584a:	079b      	lsls	r3, r3, #30
 800584c:	f100 8105 	bmi.w	8005a5a <_printf_float+0x462>
 8005850:	68e0      	ldr	r0, [r4, #12]
 8005852:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005854:	4298      	cmp	r0, r3
 8005856:	bfb8      	it	lt
 8005858:	4618      	movlt	r0, r3
 800585a:	e730      	b.n	80056be <_printf_float+0xc6>
 800585c:	2301      	movs	r3, #1
 800585e:	464a      	mov	r2, r9
 8005860:	4631      	mov	r1, r6
 8005862:	4628      	mov	r0, r5
 8005864:	47b8      	blx	r7
 8005866:	3001      	adds	r0, #1
 8005868:	f43f af27 	beq.w	80056ba <_printf_float+0xc2>
 800586c:	f108 0801 	add.w	r8, r8, #1
 8005870:	e7e6      	b.n	8005840 <_printf_float+0x248>
 8005872:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	dc39      	bgt.n	80058ec <_printf_float+0x2f4>
 8005878:	4a1b      	ldr	r2, [pc, #108]	; (80058e8 <_printf_float+0x2f0>)
 800587a:	2301      	movs	r3, #1
 800587c:	4631      	mov	r1, r6
 800587e:	4628      	mov	r0, r5
 8005880:	47b8      	blx	r7
 8005882:	3001      	adds	r0, #1
 8005884:	f43f af19 	beq.w	80056ba <_printf_float+0xc2>
 8005888:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800588c:	4313      	orrs	r3, r2
 800588e:	d102      	bne.n	8005896 <_printf_float+0x29e>
 8005890:	6823      	ldr	r3, [r4, #0]
 8005892:	07d9      	lsls	r1, r3, #31
 8005894:	d5d8      	bpl.n	8005848 <_printf_float+0x250>
 8005896:	ee18 3a10 	vmov	r3, s16
 800589a:	4652      	mov	r2, sl
 800589c:	4631      	mov	r1, r6
 800589e:	4628      	mov	r0, r5
 80058a0:	47b8      	blx	r7
 80058a2:	3001      	adds	r0, #1
 80058a4:	f43f af09 	beq.w	80056ba <_printf_float+0xc2>
 80058a8:	f04f 0900 	mov.w	r9, #0
 80058ac:	f104 0a1a 	add.w	sl, r4, #26
 80058b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80058b2:	425b      	negs	r3, r3
 80058b4:	454b      	cmp	r3, r9
 80058b6:	dc01      	bgt.n	80058bc <_printf_float+0x2c4>
 80058b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058ba:	e792      	b.n	80057e2 <_printf_float+0x1ea>
 80058bc:	2301      	movs	r3, #1
 80058be:	4652      	mov	r2, sl
 80058c0:	4631      	mov	r1, r6
 80058c2:	4628      	mov	r0, r5
 80058c4:	47b8      	blx	r7
 80058c6:	3001      	adds	r0, #1
 80058c8:	f43f aef7 	beq.w	80056ba <_printf_float+0xc2>
 80058cc:	f109 0901 	add.w	r9, r9, #1
 80058d0:	e7ee      	b.n	80058b0 <_printf_float+0x2b8>
 80058d2:	bf00      	nop
 80058d4:	7fefffff 	.word	0x7fefffff
 80058d8:	08009d94 	.word	0x08009d94
 80058dc:	08009d98 	.word	0x08009d98
 80058e0:	08009da0 	.word	0x08009da0
 80058e4:	08009d9c 	.word	0x08009d9c
 80058e8:	08009da4 	.word	0x08009da4
 80058ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058ee:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80058f0:	429a      	cmp	r2, r3
 80058f2:	bfa8      	it	ge
 80058f4:	461a      	movge	r2, r3
 80058f6:	2a00      	cmp	r2, #0
 80058f8:	4691      	mov	r9, r2
 80058fa:	dc37      	bgt.n	800596c <_printf_float+0x374>
 80058fc:	f04f 0b00 	mov.w	fp, #0
 8005900:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005904:	f104 021a 	add.w	r2, r4, #26
 8005908:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	eba3 0309 	sub.w	r3, r3, r9
 8005910:	455b      	cmp	r3, fp
 8005912:	dc33      	bgt.n	800597c <_printf_float+0x384>
 8005914:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8005918:	429a      	cmp	r2, r3
 800591a:	db3b      	blt.n	8005994 <_printf_float+0x39c>
 800591c:	6823      	ldr	r3, [r4, #0]
 800591e:	07da      	lsls	r2, r3, #31
 8005920:	d438      	bmi.n	8005994 <_printf_float+0x39c>
 8005922:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005924:	9b05      	ldr	r3, [sp, #20]
 8005926:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	eba2 0901 	sub.w	r9, r2, r1
 800592e:	4599      	cmp	r9, r3
 8005930:	bfa8      	it	ge
 8005932:	4699      	movge	r9, r3
 8005934:	f1b9 0f00 	cmp.w	r9, #0
 8005938:	dc35      	bgt.n	80059a6 <_printf_float+0x3ae>
 800593a:	f04f 0800 	mov.w	r8, #0
 800593e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005942:	f104 0a1a 	add.w	sl, r4, #26
 8005946:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800594a:	1a9b      	subs	r3, r3, r2
 800594c:	eba3 0309 	sub.w	r3, r3, r9
 8005950:	4543      	cmp	r3, r8
 8005952:	f77f af79 	ble.w	8005848 <_printf_float+0x250>
 8005956:	2301      	movs	r3, #1
 8005958:	4652      	mov	r2, sl
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f aeaa 	beq.w	80056ba <_printf_float+0xc2>
 8005966:	f108 0801 	add.w	r8, r8, #1
 800596a:	e7ec      	b.n	8005946 <_printf_float+0x34e>
 800596c:	4613      	mov	r3, r2
 800596e:	4631      	mov	r1, r6
 8005970:	4642      	mov	r2, r8
 8005972:	4628      	mov	r0, r5
 8005974:	47b8      	blx	r7
 8005976:	3001      	adds	r0, #1
 8005978:	d1c0      	bne.n	80058fc <_printf_float+0x304>
 800597a:	e69e      	b.n	80056ba <_printf_float+0xc2>
 800597c:	2301      	movs	r3, #1
 800597e:	4631      	mov	r1, r6
 8005980:	4628      	mov	r0, r5
 8005982:	9205      	str	r2, [sp, #20]
 8005984:	47b8      	blx	r7
 8005986:	3001      	adds	r0, #1
 8005988:	f43f ae97 	beq.w	80056ba <_printf_float+0xc2>
 800598c:	9a05      	ldr	r2, [sp, #20]
 800598e:	f10b 0b01 	add.w	fp, fp, #1
 8005992:	e7b9      	b.n	8005908 <_printf_float+0x310>
 8005994:	ee18 3a10 	vmov	r3, s16
 8005998:	4652      	mov	r2, sl
 800599a:	4631      	mov	r1, r6
 800599c:	4628      	mov	r0, r5
 800599e:	47b8      	blx	r7
 80059a0:	3001      	adds	r0, #1
 80059a2:	d1be      	bne.n	8005922 <_printf_float+0x32a>
 80059a4:	e689      	b.n	80056ba <_printf_float+0xc2>
 80059a6:	9a05      	ldr	r2, [sp, #20]
 80059a8:	464b      	mov	r3, r9
 80059aa:	4442      	add	r2, r8
 80059ac:	4631      	mov	r1, r6
 80059ae:	4628      	mov	r0, r5
 80059b0:	47b8      	blx	r7
 80059b2:	3001      	adds	r0, #1
 80059b4:	d1c1      	bne.n	800593a <_printf_float+0x342>
 80059b6:	e680      	b.n	80056ba <_printf_float+0xc2>
 80059b8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80059ba:	2a01      	cmp	r2, #1
 80059bc:	dc01      	bgt.n	80059c2 <_printf_float+0x3ca>
 80059be:	07db      	lsls	r3, r3, #31
 80059c0:	d538      	bpl.n	8005a34 <_printf_float+0x43c>
 80059c2:	2301      	movs	r3, #1
 80059c4:	4642      	mov	r2, r8
 80059c6:	4631      	mov	r1, r6
 80059c8:	4628      	mov	r0, r5
 80059ca:	47b8      	blx	r7
 80059cc:	3001      	adds	r0, #1
 80059ce:	f43f ae74 	beq.w	80056ba <_printf_float+0xc2>
 80059d2:	ee18 3a10 	vmov	r3, s16
 80059d6:	4652      	mov	r2, sl
 80059d8:	4631      	mov	r1, r6
 80059da:	4628      	mov	r0, r5
 80059dc:	47b8      	blx	r7
 80059de:	3001      	adds	r0, #1
 80059e0:	f43f ae6b 	beq.w	80056ba <_printf_float+0xc2>
 80059e4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80059e8:	2200      	movs	r2, #0
 80059ea:	2300      	movs	r3, #0
 80059ec:	f7fb f87c 	bl	8000ae8 <__aeabi_dcmpeq>
 80059f0:	b9d8      	cbnz	r0, 8005a2a <_printf_float+0x432>
 80059f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059f4:	f108 0201 	add.w	r2, r8, #1
 80059f8:	3b01      	subs	r3, #1
 80059fa:	4631      	mov	r1, r6
 80059fc:	4628      	mov	r0, r5
 80059fe:	47b8      	blx	r7
 8005a00:	3001      	adds	r0, #1
 8005a02:	d10e      	bne.n	8005a22 <_printf_float+0x42a>
 8005a04:	e659      	b.n	80056ba <_printf_float+0xc2>
 8005a06:	2301      	movs	r3, #1
 8005a08:	4652      	mov	r2, sl
 8005a0a:	4631      	mov	r1, r6
 8005a0c:	4628      	mov	r0, r5
 8005a0e:	47b8      	blx	r7
 8005a10:	3001      	adds	r0, #1
 8005a12:	f43f ae52 	beq.w	80056ba <_printf_float+0xc2>
 8005a16:	f108 0801 	add.w	r8, r8, #1
 8005a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	4543      	cmp	r3, r8
 8005a20:	dcf1      	bgt.n	8005a06 <_printf_float+0x40e>
 8005a22:	464b      	mov	r3, r9
 8005a24:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005a28:	e6dc      	b.n	80057e4 <_printf_float+0x1ec>
 8005a2a:	f04f 0800 	mov.w	r8, #0
 8005a2e:	f104 0a1a 	add.w	sl, r4, #26
 8005a32:	e7f2      	b.n	8005a1a <_printf_float+0x422>
 8005a34:	2301      	movs	r3, #1
 8005a36:	4642      	mov	r2, r8
 8005a38:	e7df      	b.n	80059fa <_printf_float+0x402>
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	464a      	mov	r2, r9
 8005a3e:	4631      	mov	r1, r6
 8005a40:	4628      	mov	r0, r5
 8005a42:	47b8      	blx	r7
 8005a44:	3001      	adds	r0, #1
 8005a46:	f43f ae38 	beq.w	80056ba <_printf_float+0xc2>
 8005a4a:	f108 0801 	add.w	r8, r8, #1
 8005a4e:	68e3      	ldr	r3, [r4, #12]
 8005a50:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005a52:	1a5b      	subs	r3, r3, r1
 8005a54:	4543      	cmp	r3, r8
 8005a56:	dcf0      	bgt.n	8005a3a <_printf_float+0x442>
 8005a58:	e6fa      	b.n	8005850 <_printf_float+0x258>
 8005a5a:	f04f 0800 	mov.w	r8, #0
 8005a5e:	f104 0919 	add.w	r9, r4, #25
 8005a62:	e7f4      	b.n	8005a4e <_printf_float+0x456>

08005a64 <_printf_common>:
 8005a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a68:	4616      	mov	r6, r2
 8005a6a:	4699      	mov	r9, r3
 8005a6c:	688a      	ldr	r2, [r1, #8]
 8005a6e:	690b      	ldr	r3, [r1, #16]
 8005a70:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005a74:	4293      	cmp	r3, r2
 8005a76:	bfb8      	it	lt
 8005a78:	4613      	movlt	r3, r2
 8005a7a:	6033      	str	r3, [r6, #0]
 8005a7c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005a80:	4607      	mov	r7, r0
 8005a82:	460c      	mov	r4, r1
 8005a84:	b10a      	cbz	r2, 8005a8a <_printf_common+0x26>
 8005a86:	3301      	adds	r3, #1
 8005a88:	6033      	str	r3, [r6, #0]
 8005a8a:	6823      	ldr	r3, [r4, #0]
 8005a8c:	0699      	lsls	r1, r3, #26
 8005a8e:	bf42      	ittt	mi
 8005a90:	6833      	ldrmi	r3, [r6, #0]
 8005a92:	3302      	addmi	r3, #2
 8005a94:	6033      	strmi	r3, [r6, #0]
 8005a96:	6825      	ldr	r5, [r4, #0]
 8005a98:	f015 0506 	ands.w	r5, r5, #6
 8005a9c:	d106      	bne.n	8005aac <_printf_common+0x48>
 8005a9e:	f104 0a19 	add.w	sl, r4, #25
 8005aa2:	68e3      	ldr	r3, [r4, #12]
 8005aa4:	6832      	ldr	r2, [r6, #0]
 8005aa6:	1a9b      	subs	r3, r3, r2
 8005aa8:	42ab      	cmp	r3, r5
 8005aaa:	dc26      	bgt.n	8005afa <_printf_common+0x96>
 8005aac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005ab0:	1e13      	subs	r3, r2, #0
 8005ab2:	6822      	ldr	r2, [r4, #0]
 8005ab4:	bf18      	it	ne
 8005ab6:	2301      	movne	r3, #1
 8005ab8:	0692      	lsls	r2, r2, #26
 8005aba:	d42b      	bmi.n	8005b14 <_printf_common+0xb0>
 8005abc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ac0:	4649      	mov	r1, r9
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	47c0      	blx	r8
 8005ac6:	3001      	adds	r0, #1
 8005ac8:	d01e      	beq.n	8005b08 <_printf_common+0xa4>
 8005aca:	6823      	ldr	r3, [r4, #0]
 8005acc:	68e5      	ldr	r5, [r4, #12]
 8005ace:	6832      	ldr	r2, [r6, #0]
 8005ad0:	f003 0306 	and.w	r3, r3, #6
 8005ad4:	2b04      	cmp	r3, #4
 8005ad6:	bf08      	it	eq
 8005ad8:	1aad      	subeq	r5, r5, r2
 8005ada:	68a3      	ldr	r3, [r4, #8]
 8005adc:	6922      	ldr	r2, [r4, #16]
 8005ade:	bf0c      	ite	eq
 8005ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ae4:	2500      	movne	r5, #0
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	bfc4      	itt	gt
 8005aea:	1a9b      	subgt	r3, r3, r2
 8005aec:	18ed      	addgt	r5, r5, r3
 8005aee:	2600      	movs	r6, #0
 8005af0:	341a      	adds	r4, #26
 8005af2:	42b5      	cmp	r5, r6
 8005af4:	d11a      	bne.n	8005b2c <_printf_common+0xc8>
 8005af6:	2000      	movs	r0, #0
 8005af8:	e008      	b.n	8005b0c <_printf_common+0xa8>
 8005afa:	2301      	movs	r3, #1
 8005afc:	4652      	mov	r2, sl
 8005afe:	4649      	mov	r1, r9
 8005b00:	4638      	mov	r0, r7
 8005b02:	47c0      	blx	r8
 8005b04:	3001      	adds	r0, #1
 8005b06:	d103      	bne.n	8005b10 <_printf_common+0xac>
 8005b08:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b10:	3501      	adds	r5, #1
 8005b12:	e7c6      	b.n	8005aa2 <_printf_common+0x3e>
 8005b14:	18e1      	adds	r1, r4, r3
 8005b16:	1c5a      	adds	r2, r3, #1
 8005b18:	2030      	movs	r0, #48	; 0x30
 8005b1a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b1e:	4422      	add	r2, r4
 8005b20:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b24:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b28:	3302      	adds	r3, #2
 8005b2a:	e7c7      	b.n	8005abc <_printf_common+0x58>
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	4622      	mov	r2, r4
 8005b30:	4649      	mov	r1, r9
 8005b32:	4638      	mov	r0, r7
 8005b34:	47c0      	blx	r8
 8005b36:	3001      	adds	r0, #1
 8005b38:	d0e6      	beq.n	8005b08 <_printf_common+0xa4>
 8005b3a:	3601      	adds	r6, #1
 8005b3c:	e7d9      	b.n	8005af2 <_printf_common+0x8e>
	...

08005b40 <_printf_i>:
 8005b40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b44:	460c      	mov	r4, r1
 8005b46:	4691      	mov	r9, r2
 8005b48:	7e27      	ldrb	r7, [r4, #24]
 8005b4a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b4c:	2f78      	cmp	r7, #120	; 0x78
 8005b4e:	4680      	mov	r8, r0
 8005b50:	469a      	mov	sl, r3
 8005b52:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b56:	d807      	bhi.n	8005b68 <_printf_i+0x28>
 8005b58:	2f62      	cmp	r7, #98	; 0x62
 8005b5a:	d80a      	bhi.n	8005b72 <_printf_i+0x32>
 8005b5c:	2f00      	cmp	r7, #0
 8005b5e:	f000 80d8 	beq.w	8005d12 <_printf_i+0x1d2>
 8005b62:	2f58      	cmp	r7, #88	; 0x58
 8005b64:	f000 80a3 	beq.w	8005cae <_printf_i+0x16e>
 8005b68:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005b6c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005b70:	e03a      	b.n	8005be8 <_printf_i+0xa8>
 8005b72:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005b76:	2b15      	cmp	r3, #21
 8005b78:	d8f6      	bhi.n	8005b68 <_printf_i+0x28>
 8005b7a:	a001      	add	r0, pc, #4	; (adr r0, 8005b80 <_printf_i+0x40>)
 8005b7c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005b80:	08005bd9 	.word	0x08005bd9
 8005b84:	08005bed 	.word	0x08005bed
 8005b88:	08005b69 	.word	0x08005b69
 8005b8c:	08005b69 	.word	0x08005b69
 8005b90:	08005b69 	.word	0x08005b69
 8005b94:	08005b69 	.word	0x08005b69
 8005b98:	08005bed 	.word	0x08005bed
 8005b9c:	08005b69 	.word	0x08005b69
 8005ba0:	08005b69 	.word	0x08005b69
 8005ba4:	08005b69 	.word	0x08005b69
 8005ba8:	08005b69 	.word	0x08005b69
 8005bac:	08005cf9 	.word	0x08005cf9
 8005bb0:	08005c1d 	.word	0x08005c1d
 8005bb4:	08005cdb 	.word	0x08005cdb
 8005bb8:	08005b69 	.word	0x08005b69
 8005bbc:	08005b69 	.word	0x08005b69
 8005bc0:	08005d1b 	.word	0x08005d1b
 8005bc4:	08005b69 	.word	0x08005b69
 8005bc8:	08005c1d 	.word	0x08005c1d
 8005bcc:	08005b69 	.word	0x08005b69
 8005bd0:	08005b69 	.word	0x08005b69
 8005bd4:	08005ce3 	.word	0x08005ce3
 8005bd8:	680b      	ldr	r3, [r1, #0]
 8005bda:	1d1a      	adds	r2, r3, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	600a      	str	r2, [r1, #0]
 8005be0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0a3      	b.n	8005d34 <_printf_i+0x1f4>
 8005bec:	6825      	ldr	r5, [r4, #0]
 8005bee:	6808      	ldr	r0, [r1, #0]
 8005bf0:	062e      	lsls	r6, r5, #24
 8005bf2:	f100 0304 	add.w	r3, r0, #4
 8005bf6:	d50a      	bpl.n	8005c0e <_printf_i+0xce>
 8005bf8:	6805      	ldr	r5, [r0, #0]
 8005bfa:	600b      	str	r3, [r1, #0]
 8005bfc:	2d00      	cmp	r5, #0
 8005bfe:	da03      	bge.n	8005c08 <_printf_i+0xc8>
 8005c00:	232d      	movs	r3, #45	; 0x2d
 8005c02:	426d      	negs	r5, r5
 8005c04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c08:	485e      	ldr	r0, [pc, #376]	; (8005d84 <_printf_i+0x244>)
 8005c0a:	230a      	movs	r3, #10
 8005c0c:	e019      	b.n	8005c42 <_printf_i+0x102>
 8005c0e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c12:	6805      	ldr	r5, [r0, #0]
 8005c14:	600b      	str	r3, [r1, #0]
 8005c16:	bf18      	it	ne
 8005c18:	b22d      	sxthne	r5, r5
 8005c1a:	e7ef      	b.n	8005bfc <_printf_i+0xbc>
 8005c1c:	680b      	ldr	r3, [r1, #0]
 8005c1e:	6825      	ldr	r5, [r4, #0]
 8005c20:	1d18      	adds	r0, r3, #4
 8005c22:	6008      	str	r0, [r1, #0]
 8005c24:	0628      	lsls	r0, r5, #24
 8005c26:	d501      	bpl.n	8005c2c <_printf_i+0xec>
 8005c28:	681d      	ldr	r5, [r3, #0]
 8005c2a:	e002      	b.n	8005c32 <_printf_i+0xf2>
 8005c2c:	0669      	lsls	r1, r5, #25
 8005c2e:	d5fb      	bpl.n	8005c28 <_printf_i+0xe8>
 8005c30:	881d      	ldrh	r5, [r3, #0]
 8005c32:	4854      	ldr	r0, [pc, #336]	; (8005d84 <_printf_i+0x244>)
 8005c34:	2f6f      	cmp	r7, #111	; 0x6f
 8005c36:	bf0c      	ite	eq
 8005c38:	2308      	moveq	r3, #8
 8005c3a:	230a      	movne	r3, #10
 8005c3c:	2100      	movs	r1, #0
 8005c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c42:	6866      	ldr	r6, [r4, #4]
 8005c44:	60a6      	str	r6, [r4, #8]
 8005c46:	2e00      	cmp	r6, #0
 8005c48:	bfa2      	ittt	ge
 8005c4a:	6821      	ldrge	r1, [r4, #0]
 8005c4c:	f021 0104 	bicge.w	r1, r1, #4
 8005c50:	6021      	strge	r1, [r4, #0]
 8005c52:	b90d      	cbnz	r5, 8005c58 <_printf_i+0x118>
 8005c54:	2e00      	cmp	r6, #0
 8005c56:	d04d      	beq.n	8005cf4 <_printf_i+0x1b4>
 8005c58:	4616      	mov	r6, r2
 8005c5a:	fbb5 f1f3 	udiv	r1, r5, r3
 8005c5e:	fb03 5711 	mls	r7, r3, r1, r5
 8005c62:	5dc7      	ldrb	r7, [r0, r7]
 8005c64:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005c68:	462f      	mov	r7, r5
 8005c6a:	42bb      	cmp	r3, r7
 8005c6c:	460d      	mov	r5, r1
 8005c6e:	d9f4      	bls.n	8005c5a <_printf_i+0x11a>
 8005c70:	2b08      	cmp	r3, #8
 8005c72:	d10b      	bne.n	8005c8c <_printf_i+0x14c>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	07df      	lsls	r7, r3, #31
 8005c78:	d508      	bpl.n	8005c8c <_printf_i+0x14c>
 8005c7a:	6923      	ldr	r3, [r4, #16]
 8005c7c:	6861      	ldr	r1, [r4, #4]
 8005c7e:	4299      	cmp	r1, r3
 8005c80:	bfde      	ittt	le
 8005c82:	2330      	movle	r3, #48	; 0x30
 8005c84:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c88:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c8c:	1b92      	subs	r2, r2, r6
 8005c8e:	6122      	str	r2, [r4, #16]
 8005c90:	f8cd a000 	str.w	sl, [sp]
 8005c94:	464b      	mov	r3, r9
 8005c96:	aa03      	add	r2, sp, #12
 8005c98:	4621      	mov	r1, r4
 8005c9a:	4640      	mov	r0, r8
 8005c9c:	f7ff fee2 	bl	8005a64 <_printf_common>
 8005ca0:	3001      	adds	r0, #1
 8005ca2:	d14c      	bne.n	8005d3e <_printf_i+0x1fe>
 8005ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8005ca8:	b004      	add	sp, #16
 8005caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cae:	4835      	ldr	r0, [pc, #212]	; (8005d84 <_printf_i+0x244>)
 8005cb0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005cb4:	6823      	ldr	r3, [r4, #0]
 8005cb6:	680e      	ldr	r6, [r1, #0]
 8005cb8:	061f      	lsls	r7, r3, #24
 8005cba:	f856 5b04 	ldr.w	r5, [r6], #4
 8005cbe:	600e      	str	r6, [r1, #0]
 8005cc0:	d514      	bpl.n	8005cec <_printf_i+0x1ac>
 8005cc2:	07d9      	lsls	r1, r3, #31
 8005cc4:	bf44      	itt	mi
 8005cc6:	f043 0320 	orrmi.w	r3, r3, #32
 8005cca:	6023      	strmi	r3, [r4, #0]
 8005ccc:	b91d      	cbnz	r5, 8005cd6 <_printf_i+0x196>
 8005cce:	6823      	ldr	r3, [r4, #0]
 8005cd0:	f023 0320 	bic.w	r3, r3, #32
 8005cd4:	6023      	str	r3, [r4, #0]
 8005cd6:	2310      	movs	r3, #16
 8005cd8:	e7b0      	b.n	8005c3c <_printf_i+0xfc>
 8005cda:	6823      	ldr	r3, [r4, #0]
 8005cdc:	f043 0320 	orr.w	r3, r3, #32
 8005ce0:	6023      	str	r3, [r4, #0]
 8005ce2:	2378      	movs	r3, #120	; 0x78
 8005ce4:	4828      	ldr	r0, [pc, #160]	; (8005d88 <_printf_i+0x248>)
 8005ce6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005cea:	e7e3      	b.n	8005cb4 <_printf_i+0x174>
 8005cec:	065e      	lsls	r6, r3, #25
 8005cee:	bf48      	it	mi
 8005cf0:	b2ad      	uxthmi	r5, r5
 8005cf2:	e7e6      	b.n	8005cc2 <_printf_i+0x182>
 8005cf4:	4616      	mov	r6, r2
 8005cf6:	e7bb      	b.n	8005c70 <_printf_i+0x130>
 8005cf8:	680b      	ldr	r3, [r1, #0]
 8005cfa:	6826      	ldr	r6, [r4, #0]
 8005cfc:	6960      	ldr	r0, [r4, #20]
 8005cfe:	1d1d      	adds	r5, r3, #4
 8005d00:	600d      	str	r5, [r1, #0]
 8005d02:	0635      	lsls	r5, r6, #24
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	d501      	bpl.n	8005d0c <_printf_i+0x1cc>
 8005d08:	6018      	str	r0, [r3, #0]
 8005d0a:	e002      	b.n	8005d12 <_printf_i+0x1d2>
 8005d0c:	0671      	lsls	r1, r6, #25
 8005d0e:	d5fb      	bpl.n	8005d08 <_printf_i+0x1c8>
 8005d10:	8018      	strh	r0, [r3, #0]
 8005d12:	2300      	movs	r3, #0
 8005d14:	6123      	str	r3, [r4, #16]
 8005d16:	4616      	mov	r6, r2
 8005d18:	e7ba      	b.n	8005c90 <_printf_i+0x150>
 8005d1a:	680b      	ldr	r3, [r1, #0]
 8005d1c:	1d1a      	adds	r2, r3, #4
 8005d1e:	600a      	str	r2, [r1, #0]
 8005d20:	681e      	ldr	r6, [r3, #0]
 8005d22:	6862      	ldr	r2, [r4, #4]
 8005d24:	2100      	movs	r1, #0
 8005d26:	4630      	mov	r0, r6
 8005d28:	f7fa fa6a 	bl	8000200 <memchr>
 8005d2c:	b108      	cbz	r0, 8005d32 <_printf_i+0x1f2>
 8005d2e:	1b80      	subs	r0, r0, r6
 8005d30:	6060      	str	r0, [r4, #4]
 8005d32:	6863      	ldr	r3, [r4, #4]
 8005d34:	6123      	str	r3, [r4, #16]
 8005d36:	2300      	movs	r3, #0
 8005d38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d3c:	e7a8      	b.n	8005c90 <_printf_i+0x150>
 8005d3e:	6923      	ldr	r3, [r4, #16]
 8005d40:	4632      	mov	r2, r6
 8005d42:	4649      	mov	r1, r9
 8005d44:	4640      	mov	r0, r8
 8005d46:	47d0      	blx	sl
 8005d48:	3001      	adds	r0, #1
 8005d4a:	d0ab      	beq.n	8005ca4 <_printf_i+0x164>
 8005d4c:	6823      	ldr	r3, [r4, #0]
 8005d4e:	079b      	lsls	r3, r3, #30
 8005d50:	d413      	bmi.n	8005d7a <_printf_i+0x23a>
 8005d52:	68e0      	ldr	r0, [r4, #12]
 8005d54:	9b03      	ldr	r3, [sp, #12]
 8005d56:	4298      	cmp	r0, r3
 8005d58:	bfb8      	it	lt
 8005d5a:	4618      	movlt	r0, r3
 8005d5c:	e7a4      	b.n	8005ca8 <_printf_i+0x168>
 8005d5e:	2301      	movs	r3, #1
 8005d60:	4632      	mov	r2, r6
 8005d62:	4649      	mov	r1, r9
 8005d64:	4640      	mov	r0, r8
 8005d66:	47d0      	blx	sl
 8005d68:	3001      	adds	r0, #1
 8005d6a:	d09b      	beq.n	8005ca4 <_printf_i+0x164>
 8005d6c:	3501      	adds	r5, #1
 8005d6e:	68e3      	ldr	r3, [r4, #12]
 8005d70:	9903      	ldr	r1, [sp, #12]
 8005d72:	1a5b      	subs	r3, r3, r1
 8005d74:	42ab      	cmp	r3, r5
 8005d76:	dcf2      	bgt.n	8005d5e <_printf_i+0x21e>
 8005d78:	e7eb      	b.n	8005d52 <_printf_i+0x212>
 8005d7a:	2500      	movs	r5, #0
 8005d7c:	f104 0619 	add.w	r6, r4, #25
 8005d80:	e7f5      	b.n	8005d6e <_printf_i+0x22e>
 8005d82:	bf00      	nop
 8005d84:	08009da6 	.word	0x08009da6
 8005d88:	08009db7 	.word	0x08009db7

08005d8c <_scanf_float>:
 8005d8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d90:	b087      	sub	sp, #28
 8005d92:	4617      	mov	r7, r2
 8005d94:	9303      	str	r3, [sp, #12]
 8005d96:	688b      	ldr	r3, [r1, #8]
 8005d98:	1e5a      	subs	r2, r3, #1
 8005d9a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005d9e:	bf83      	ittte	hi
 8005da0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005da4:	195b      	addhi	r3, r3, r5
 8005da6:	9302      	strhi	r3, [sp, #8]
 8005da8:	2300      	movls	r3, #0
 8005daa:	bf86      	itte	hi
 8005dac:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005db0:	608b      	strhi	r3, [r1, #8]
 8005db2:	9302      	strls	r3, [sp, #8]
 8005db4:	680b      	ldr	r3, [r1, #0]
 8005db6:	468b      	mov	fp, r1
 8005db8:	2500      	movs	r5, #0
 8005dba:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005dbe:	f84b 3b1c 	str.w	r3, [fp], #28
 8005dc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005dc6:	4680      	mov	r8, r0
 8005dc8:	460c      	mov	r4, r1
 8005dca:	465e      	mov	r6, fp
 8005dcc:	46aa      	mov	sl, r5
 8005dce:	46a9      	mov	r9, r5
 8005dd0:	9501      	str	r5, [sp, #4]
 8005dd2:	68a2      	ldr	r2, [r4, #8]
 8005dd4:	b152      	cbz	r2, 8005dec <_scanf_float+0x60>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b4e      	cmp	r3, #78	; 0x4e
 8005ddc:	d864      	bhi.n	8005ea8 <_scanf_float+0x11c>
 8005dde:	2b40      	cmp	r3, #64	; 0x40
 8005de0:	d83c      	bhi.n	8005e5c <_scanf_float+0xd0>
 8005de2:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005de6:	b2c8      	uxtb	r0, r1
 8005de8:	280e      	cmp	r0, #14
 8005dea:	d93a      	bls.n	8005e62 <_scanf_float+0xd6>
 8005dec:	f1b9 0f00 	cmp.w	r9, #0
 8005df0:	d003      	beq.n	8005dfa <_scanf_float+0x6e>
 8005df2:	6823      	ldr	r3, [r4, #0]
 8005df4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005df8:	6023      	str	r3, [r4, #0]
 8005dfa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005dfe:	f1ba 0f01 	cmp.w	sl, #1
 8005e02:	f200 8113 	bhi.w	800602c <_scanf_float+0x2a0>
 8005e06:	455e      	cmp	r6, fp
 8005e08:	f200 8105 	bhi.w	8006016 <_scanf_float+0x28a>
 8005e0c:	2501      	movs	r5, #1
 8005e0e:	4628      	mov	r0, r5
 8005e10:	b007      	add	sp, #28
 8005e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005e16:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8005e1a:	2a0d      	cmp	r2, #13
 8005e1c:	d8e6      	bhi.n	8005dec <_scanf_float+0x60>
 8005e1e:	a101      	add	r1, pc, #4	; (adr r1, 8005e24 <_scanf_float+0x98>)
 8005e20:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005e24:	08005f63 	.word	0x08005f63
 8005e28:	08005ded 	.word	0x08005ded
 8005e2c:	08005ded 	.word	0x08005ded
 8005e30:	08005ded 	.word	0x08005ded
 8005e34:	08005fc3 	.word	0x08005fc3
 8005e38:	08005f9b 	.word	0x08005f9b
 8005e3c:	08005ded 	.word	0x08005ded
 8005e40:	08005ded 	.word	0x08005ded
 8005e44:	08005f71 	.word	0x08005f71
 8005e48:	08005ded 	.word	0x08005ded
 8005e4c:	08005ded 	.word	0x08005ded
 8005e50:	08005ded 	.word	0x08005ded
 8005e54:	08005ded 	.word	0x08005ded
 8005e58:	08005f29 	.word	0x08005f29
 8005e5c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005e60:	e7db      	b.n	8005e1a <_scanf_float+0x8e>
 8005e62:	290e      	cmp	r1, #14
 8005e64:	d8c2      	bhi.n	8005dec <_scanf_float+0x60>
 8005e66:	a001      	add	r0, pc, #4	; (adr r0, 8005e6c <_scanf_float+0xe0>)
 8005e68:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005e6c:	08005f1b 	.word	0x08005f1b
 8005e70:	08005ded 	.word	0x08005ded
 8005e74:	08005f1b 	.word	0x08005f1b
 8005e78:	08005faf 	.word	0x08005faf
 8005e7c:	08005ded 	.word	0x08005ded
 8005e80:	08005ec9 	.word	0x08005ec9
 8005e84:	08005f05 	.word	0x08005f05
 8005e88:	08005f05 	.word	0x08005f05
 8005e8c:	08005f05 	.word	0x08005f05
 8005e90:	08005f05 	.word	0x08005f05
 8005e94:	08005f05 	.word	0x08005f05
 8005e98:	08005f05 	.word	0x08005f05
 8005e9c:	08005f05 	.word	0x08005f05
 8005ea0:	08005f05 	.word	0x08005f05
 8005ea4:	08005f05 	.word	0x08005f05
 8005ea8:	2b6e      	cmp	r3, #110	; 0x6e
 8005eaa:	d809      	bhi.n	8005ec0 <_scanf_float+0x134>
 8005eac:	2b60      	cmp	r3, #96	; 0x60
 8005eae:	d8b2      	bhi.n	8005e16 <_scanf_float+0x8a>
 8005eb0:	2b54      	cmp	r3, #84	; 0x54
 8005eb2:	d077      	beq.n	8005fa4 <_scanf_float+0x218>
 8005eb4:	2b59      	cmp	r3, #89	; 0x59
 8005eb6:	d199      	bne.n	8005dec <_scanf_float+0x60>
 8005eb8:	2d07      	cmp	r5, #7
 8005eba:	d197      	bne.n	8005dec <_scanf_float+0x60>
 8005ebc:	2508      	movs	r5, #8
 8005ebe:	e029      	b.n	8005f14 <_scanf_float+0x188>
 8005ec0:	2b74      	cmp	r3, #116	; 0x74
 8005ec2:	d06f      	beq.n	8005fa4 <_scanf_float+0x218>
 8005ec4:	2b79      	cmp	r3, #121	; 0x79
 8005ec6:	e7f6      	b.n	8005eb6 <_scanf_float+0x12a>
 8005ec8:	6821      	ldr	r1, [r4, #0]
 8005eca:	05c8      	lsls	r0, r1, #23
 8005ecc:	d51a      	bpl.n	8005f04 <_scanf_float+0x178>
 8005ece:	9b02      	ldr	r3, [sp, #8]
 8005ed0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005ed4:	6021      	str	r1, [r4, #0]
 8005ed6:	f109 0901 	add.w	r9, r9, #1
 8005eda:	b11b      	cbz	r3, 8005ee4 <_scanf_float+0x158>
 8005edc:	3b01      	subs	r3, #1
 8005ede:	3201      	adds	r2, #1
 8005ee0:	9302      	str	r3, [sp, #8]
 8005ee2:	60a2      	str	r2, [r4, #8]
 8005ee4:	68a3      	ldr	r3, [r4, #8]
 8005ee6:	3b01      	subs	r3, #1
 8005ee8:	60a3      	str	r3, [r4, #8]
 8005eea:	6923      	ldr	r3, [r4, #16]
 8005eec:	3301      	adds	r3, #1
 8005eee:	6123      	str	r3, [r4, #16]
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	607b      	str	r3, [r7, #4]
 8005ef8:	f340 8084 	ble.w	8006004 <_scanf_float+0x278>
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	3301      	adds	r3, #1
 8005f00:	603b      	str	r3, [r7, #0]
 8005f02:	e766      	b.n	8005dd2 <_scanf_float+0x46>
 8005f04:	eb1a 0f05 	cmn.w	sl, r5
 8005f08:	f47f af70 	bne.w	8005dec <_scanf_float+0x60>
 8005f0c:	6822      	ldr	r2, [r4, #0]
 8005f0e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005f12:	6022      	str	r2, [r4, #0]
 8005f14:	f806 3b01 	strb.w	r3, [r6], #1
 8005f18:	e7e4      	b.n	8005ee4 <_scanf_float+0x158>
 8005f1a:	6822      	ldr	r2, [r4, #0]
 8005f1c:	0610      	lsls	r0, r2, #24
 8005f1e:	f57f af65 	bpl.w	8005dec <_scanf_float+0x60>
 8005f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f26:	e7f4      	b.n	8005f12 <_scanf_float+0x186>
 8005f28:	f1ba 0f00 	cmp.w	sl, #0
 8005f2c:	d10e      	bne.n	8005f4c <_scanf_float+0x1c0>
 8005f2e:	f1b9 0f00 	cmp.w	r9, #0
 8005f32:	d10e      	bne.n	8005f52 <_scanf_float+0x1c6>
 8005f34:	6822      	ldr	r2, [r4, #0]
 8005f36:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f3a:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f3e:	d108      	bne.n	8005f52 <_scanf_float+0x1c6>
 8005f40:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f44:	6022      	str	r2, [r4, #0]
 8005f46:	f04f 0a01 	mov.w	sl, #1
 8005f4a:	e7e3      	b.n	8005f14 <_scanf_float+0x188>
 8005f4c:	f1ba 0f02 	cmp.w	sl, #2
 8005f50:	d055      	beq.n	8005ffe <_scanf_float+0x272>
 8005f52:	2d01      	cmp	r5, #1
 8005f54:	d002      	beq.n	8005f5c <_scanf_float+0x1d0>
 8005f56:	2d04      	cmp	r5, #4
 8005f58:	f47f af48 	bne.w	8005dec <_scanf_float+0x60>
 8005f5c:	3501      	adds	r5, #1
 8005f5e:	b2ed      	uxtb	r5, r5
 8005f60:	e7d8      	b.n	8005f14 <_scanf_float+0x188>
 8005f62:	f1ba 0f01 	cmp.w	sl, #1
 8005f66:	f47f af41 	bne.w	8005dec <_scanf_float+0x60>
 8005f6a:	f04f 0a02 	mov.w	sl, #2
 8005f6e:	e7d1      	b.n	8005f14 <_scanf_float+0x188>
 8005f70:	b97d      	cbnz	r5, 8005f92 <_scanf_float+0x206>
 8005f72:	f1b9 0f00 	cmp.w	r9, #0
 8005f76:	f47f af3c 	bne.w	8005df2 <_scanf_float+0x66>
 8005f7a:	6822      	ldr	r2, [r4, #0]
 8005f7c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005f80:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8005f84:	f47f af39 	bne.w	8005dfa <_scanf_float+0x6e>
 8005f88:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005f8c:	6022      	str	r2, [r4, #0]
 8005f8e:	2501      	movs	r5, #1
 8005f90:	e7c0      	b.n	8005f14 <_scanf_float+0x188>
 8005f92:	2d03      	cmp	r5, #3
 8005f94:	d0e2      	beq.n	8005f5c <_scanf_float+0x1d0>
 8005f96:	2d05      	cmp	r5, #5
 8005f98:	e7de      	b.n	8005f58 <_scanf_float+0x1cc>
 8005f9a:	2d02      	cmp	r5, #2
 8005f9c:	f47f af26 	bne.w	8005dec <_scanf_float+0x60>
 8005fa0:	2503      	movs	r5, #3
 8005fa2:	e7b7      	b.n	8005f14 <_scanf_float+0x188>
 8005fa4:	2d06      	cmp	r5, #6
 8005fa6:	f47f af21 	bne.w	8005dec <_scanf_float+0x60>
 8005faa:	2507      	movs	r5, #7
 8005fac:	e7b2      	b.n	8005f14 <_scanf_float+0x188>
 8005fae:	6822      	ldr	r2, [r4, #0]
 8005fb0:	0591      	lsls	r1, r2, #22
 8005fb2:	f57f af1b 	bpl.w	8005dec <_scanf_float+0x60>
 8005fb6:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005fba:	6022      	str	r2, [r4, #0]
 8005fbc:	f8cd 9004 	str.w	r9, [sp, #4]
 8005fc0:	e7a8      	b.n	8005f14 <_scanf_float+0x188>
 8005fc2:	6822      	ldr	r2, [r4, #0]
 8005fc4:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005fc8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005fcc:	d006      	beq.n	8005fdc <_scanf_float+0x250>
 8005fce:	0550      	lsls	r0, r2, #21
 8005fd0:	f57f af0c 	bpl.w	8005dec <_scanf_float+0x60>
 8005fd4:	f1b9 0f00 	cmp.w	r9, #0
 8005fd8:	f43f af0f 	beq.w	8005dfa <_scanf_float+0x6e>
 8005fdc:	0591      	lsls	r1, r2, #22
 8005fde:	bf58      	it	pl
 8005fe0:	9901      	ldrpl	r1, [sp, #4]
 8005fe2:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005fe6:	bf58      	it	pl
 8005fe8:	eba9 0101 	subpl.w	r1, r9, r1
 8005fec:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005ff0:	bf58      	it	pl
 8005ff2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005ff6:	6022      	str	r2, [r4, #0]
 8005ff8:	f04f 0900 	mov.w	r9, #0
 8005ffc:	e78a      	b.n	8005f14 <_scanf_float+0x188>
 8005ffe:	f04f 0a03 	mov.w	sl, #3
 8006002:	e787      	b.n	8005f14 <_scanf_float+0x188>
 8006004:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006008:	4639      	mov	r1, r7
 800600a:	4640      	mov	r0, r8
 800600c:	4798      	blx	r3
 800600e:	2800      	cmp	r0, #0
 8006010:	f43f aedf 	beq.w	8005dd2 <_scanf_float+0x46>
 8006014:	e6ea      	b.n	8005dec <_scanf_float+0x60>
 8006016:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800601a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800601e:	463a      	mov	r2, r7
 8006020:	4640      	mov	r0, r8
 8006022:	4798      	blx	r3
 8006024:	6923      	ldr	r3, [r4, #16]
 8006026:	3b01      	subs	r3, #1
 8006028:	6123      	str	r3, [r4, #16]
 800602a:	e6ec      	b.n	8005e06 <_scanf_float+0x7a>
 800602c:	1e6b      	subs	r3, r5, #1
 800602e:	2b06      	cmp	r3, #6
 8006030:	d825      	bhi.n	800607e <_scanf_float+0x2f2>
 8006032:	2d02      	cmp	r5, #2
 8006034:	d836      	bhi.n	80060a4 <_scanf_float+0x318>
 8006036:	455e      	cmp	r6, fp
 8006038:	f67f aee8 	bls.w	8005e0c <_scanf_float+0x80>
 800603c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006040:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006044:	463a      	mov	r2, r7
 8006046:	4640      	mov	r0, r8
 8006048:	4798      	blx	r3
 800604a:	6923      	ldr	r3, [r4, #16]
 800604c:	3b01      	subs	r3, #1
 800604e:	6123      	str	r3, [r4, #16]
 8006050:	e7f1      	b.n	8006036 <_scanf_float+0x2aa>
 8006052:	9802      	ldr	r0, [sp, #8]
 8006054:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006058:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800605c:	9002      	str	r0, [sp, #8]
 800605e:	463a      	mov	r2, r7
 8006060:	4640      	mov	r0, r8
 8006062:	4798      	blx	r3
 8006064:	6923      	ldr	r3, [r4, #16]
 8006066:	3b01      	subs	r3, #1
 8006068:	6123      	str	r3, [r4, #16]
 800606a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800606e:	fa5f fa8a 	uxtb.w	sl, sl
 8006072:	f1ba 0f02 	cmp.w	sl, #2
 8006076:	d1ec      	bne.n	8006052 <_scanf_float+0x2c6>
 8006078:	3d03      	subs	r5, #3
 800607a:	b2ed      	uxtb	r5, r5
 800607c:	1b76      	subs	r6, r6, r5
 800607e:	6823      	ldr	r3, [r4, #0]
 8006080:	05da      	lsls	r2, r3, #23
 8006082:	d52f      	bpl.n	80060e4 <_scanf_float+0x358>
 8006084:	055b      	lsls	r3, r3, #21
 8006086:	d510      	bpl.n	80060aa <_scanf_float+0x31e>
 8006088:	455e      	cmp	r6, fp
 800608a:	f67f aebf 	bls.w	8005e0c <_scanf_float+0x80>
 800608e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006092:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006096:	463a      	mov	r2, r7
 8006098:	4640      	mov	r0, r8
 800609a:	4798      	blx	r3
 800609c:	6923      	ldr	r3, [r4, #16]
 800609e:	3b01      	subs	r3, #1
 80060a0:	6123      	str	r3, [r4, #16]
 80060a2:	e7f1      	b.n	8006088 <_scanf_float+0x2fc>
 80060a4:	46aa      	mov	sl, r5
 80060a6:	9602      	str	r6, [sp, #8]
 80060a8:	e7df      	b.n	800606a <_scanf_float+0x2de>
 80060aa:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	2965      	cmp	r1, #101	; 0x65
 80060b2:	f103 33ff 	add.w	r3, r3, #4294967295
 80060b6:	f106 35ff 	add.w	r5, r6, #4294967295
 80060ba:	6123      	str	r3, [r4, #16]
 80060bc:	d00c      	beq.n	80060d8 <_scanf_float+0x34c>
 80060be:	2945      	cmp	r1, #69	; 0x45
 80060c0:	d00a      	beq.n	80060d8 <_scanf_float+0x34c>
 80060c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060c6:	463a      	mov	r2, r7
 80060c8:	4640      	mov	r0, r8
 80060ca:	4798      	blx	r3
 80060cc:	6923      	ldr	r3, [r4, #16]
 80060ce:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80060d2:	3b01      	subs	r3, #1
 80060d4:	1eb5      	subs	r5, r6, #2
 80060d6:	6123      	str	r3, [r4, #16]
 80060d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80060dc:	463a      	mov	r2, r7
 80060de:	4640      	mov	r0, r8
 80060e0:	4798      	blx	r3
 80060e2:	462e      	mov	r6, r5
 80060e4:	6825      	ldr	r5, [r4, #0]
 80060e6:	f015 0510 	ands.w	r5, r5, #16
 80060ea:	d158      	bne.n	800619e <_scanf_float+0x412>
 80060ec:	7035      	strb	r5, [r6, #0]
 80060ee:	6823      	ldr	r3, [r4, #0]
 80060f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80060f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060f8:	d11c      	bne.n	8006134 <_scanf_float+0x3a8>
 80060fa:	9b01      	ldr	r3, [sp, #4]
 80060fc:	454b      	cmp	r3, r9
 80060fe:	eba3 0209 	sub.w	r2, r3, r9
 8006102:	d124      	bne.n	800614e <_scanf_float+0x3c2>
 8006104:	2200      	movs	r2, #0
 8006106:	4659      	mov	r1, fp
 8006108:	4640      	mov	r0, r8
 800610a:	f000 feb3 	bl	8006e74 <_strtod_r>
 800610e:	9b03      	ldr	r3, [sp, #12]
 8006110:	6821      	ldr	r1, [r4, #0]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	f011 0f02 	tst.w	r1, #2
 8006118:	ec57 6b10 	vmov	r6, r7, d0
 800611c:	f103 0204 	add.w	r2, r3, #4
 8006120:	d020      	beq.n	8006164 <_scanf_float+0x3d8>
 8006122:	9903      	ldr	r1, [sp, #12]
 8006124:	600a      	str	r2, [r1, #0]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	e9c3 6700 	strd	r6, r7, [r3]
 800612c:	68e3      	ldr	r3, [r4, #12]
 800612e:	3301      	adds	r3, #1
 8006130:	60e3      	str	r3, [r4, #12]
 8006132:	e66c      	b.n	8005e0e <_scanf_float+0x82>
 8006134:	9b04      	ldr	r3, [sp, #16]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d0e4      	beq.n	8006104 <_scanf_float+0x378>
 800613a:	9905      	ldr	r1, [sp, #20]
 800613c:	230a      	movs	r3, #10
 800613e:	462a      	mov	r2, r5
 8006140:	3101      	adds	r1, #1
 8006142:	4640      	mov	r0, r8
 8006144:	f000 ff20 	bl	8006f88 <_strtol_r>
 8006148:	9b04      	ldr	r3, [sp, #16]
 800614a:	9e05      	ldr	r6, [sp, #20]
 800614c:	1ac2      	subs	r2, r0, r3
 800614e:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006152:	429e      	cmp	r6, r3
 8006154:	bf28      	it	cs
 8006156:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800615a:	4912      	ldr	r1, [pc, #72]	; (80061a4 <_scanf_float+0x418>)
 800615c:	4630      	mov	r0, r6
 800615e:	f000 f843 	bl	80061e8 <siprintf>
 8006162:	e7cf      	b.n	8006104 <_scanf_float+0x378>
 8006164:	f011 0f04 	tst.w	r1, #4
 8006168:	9903      	ldr	r1, [sp, #12]
 800616a:	600a      	str	r2, [r1, #0]
 800616c:	d1db      	bne.n	8006126 <_scanf_float+0x39a>
 800616e:	f8d3 8000 	ldr.w	r8, [r3]
 8006172:	ee10 2a10 	vmov	r2, s0
 8006176:	ee10 0a10 	vmov	r0, s0
 800617a:	463b      	mov	r3, r7
 800617c:	4639      	mov	r1, r7
 800617e:	f7fa fce5 	bl	8000b4c <__aeabi_dcmpun>
 8006182:	b128      	cbz	r0, 8006190 <_scanf_float+0x404>
 8006184:	4808      	ldr	r0, [pc, #32]	; (80061a8 <_scanf_float+0x41c>)
 8006186:	f000 f829 	bl	80061dc <nanf>
 800618a:	ed88 0a00 	vstr	s0, [r8]
 800618e:	e7cd      	b.n	800612c <_scanf_float+0x3a0>
 8006190:	4630      	mov	r0, r6
 8006192:	4639      	mov	r1, r7
 8006194:	f7fa fd38 	bl	8000c08 <__aeabi_d2f>
 8006198:	f8c8 0000 	str.w	r0, [r8]
 800619c:	e7c6      	b.n	800612c <_scanf_float+0x3a0>
 800619e:	2500      	movs	r5, #0
 80061a0:	e635      	b.n	8005e0e <_scanf_float+0x82>
 80061a2:	bf00      	nop
 80061a4:	08009dc8 	.word	0x08009dc8
 80061a8:	0800a240 	.word	0x0800a240

080061ac <iprintf>:
 80061ac:	b40f      	push	{r0, r1, r2, r3}
 80061ae:	4b0a      	ldr	r3, [pc, #40]	; (80061d8 <iprintf+0x2c>)
 80061b0:	b513      	push	{r0, r1, r4, lr}
 80061b2:	681c      	ldr	r4, [r3, #0]
 80061b4:	b124      	cbz	r4, 80061c0 <iprintf+0x14>
 80061b6:	69a3      	ldr	r3, [r4, #24]
 80061b8:	b913      	cbnz	r3, 80061c0 <iprintf+0x14>
 80061ba:	4620      	mov	r0, r4
 80061bc:	f001 fdb8 	bl	8007d30 <__sinit>
 80061c0:	ab05      	add	r3, sp, #20
 80061c2:	9a04      	ldr	r2, [sp, #16]
 80061c4:	68a1      	ldr	r1, [r4, #8]
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	4620      	mov	r0, r4
 80061ca:	f003 f8e7 	bl	800939c <_vfiprintf_r>
 80061ce:	b002      	add	sp, #8
 80061d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d4:	b004      	add	sp, #16
 80061d6:	4770      	bx	lr
 80061d8:	2000000c 	.word	0x2000000c

080061dc <nanf>:
 80061dc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80061e4 <nanf+0x8>
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	7fc00000 	.word	0x7fc00000

080061e8 <siprintf>:
 80061e8:	b40e      	push	{r1, r2, r3}
 80061ea:	b500      	push	{lr}
 80061ec:	b09c      	sub	sp, #112	; 0x70
 80061ee:	ab1d      	add	r3, sp, #116	; 0x74
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	9006      	str	r0, [sp, #24]
 80061f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061f8:	4809      	ldr	r0, [pc, #36]	; (8006220 <siprintf+0x38>)
 80061fa:	9107      	str	r1, [sp, #28]
 80061fc:	9104      	str	r1, [sp, #16]
 80061fe:	4909      	ldr	r1, [pc, #36]	; (8006224 <siprintf+0x3c>)
 8006200:	f853 2b04 	ldr.w	r2, [r3], #4
 8006204:	9105      	str	r1, [sp, #20]
 8006206:	6800      	ldr	r0, [r0, #0]
 8006208:	9301      	str	r3, [sp, #4]
 800620a:	a902      	add	r1, sp, #8
 800620c:	f002 ff9c 	bl	8009148 <_svfiprintf_r>
 8006210:	9b02      	ldr	r3, [sp, #8]
 8006212:	2200      	movs	r2, #0
 8006214:	701a      	strb	r2, [r3, #0]
 8006216:	b01c      	add	sp, #112	; 0x70
 8006218:	f85d eb04 	ldr.w	lr, [sp], #4
 800621c:	b003      	add	sp, #12
 800621e:	4770      	bx	lr
 8006220:	2000000c 	.word	0x2000000c
 8006224:	ffff0208 	.word	0xffff0208

08006228 <sulp>:
 8006228:	b570      	push	{r4, r5, r6, lr}
 800622a:	4604      	mov	r4, r0
 800622c:	460d      	mov	r5, r1
 800622e:	ec45 4b10 	vmov	d0, r4, r5
 8006232:	4616      	mov	r6, r2
 8006234:	f002 fd24 	bl	8008c80 <__ulp>
 8006238:	ec51 0b10 	vmov	r0, r1, d0
 800623c:	b17e      	cbz	r6, 800625e <sulp+0x36>
 800623e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006242:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006246:	2b00      	cmp	r3, #0
 8006248:	dd09      	ble.n	800625e <sulp+0x36>
 800624a:	051b      	lsls	r3, r3, #20
 800624c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006250:	2400      	movs	r4, #0
 8006252:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006256:	4622      	mov	r2, r4
 8006258:	462b      	mov	r3, r5
 800625a:	f7fa f9dd 	bl	8000618 <__aeabi_dmul>
 800625e:	bd70      	pop	{r4, r5, r6, pc}

08006260 <_strtod_l>:
 8006260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006264:	b0a3      	sub	sp, #140	; 0x8c
 8006266:	461f      	mov	r7, r3
 8006268:	2300      	movs	r3, #0
 800626a:	931e      	str	r3, [sp, #120]	; 0x78
 800626c:	4ba4      	ldr	r3, [pc, #656]	; (8006500 <_strtod_l+0x2a0>)
 800626e:	9219      	str	r2, [sp, #100]	; 0x64
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	9307      	str	r3, [sp, #28]
 8006274:	4604      	mov	r4, r0
 8006276:	4618      	mov	r0, r3
 8006278:	4688      	mov	r8, r1
 800627a:	f7f9 ffb9 	bl	80001f0 <strlen>
 800627e:	f04f 0a00 	mov.w	sl, #0
 8006282:	4605      	mov	r5, r0
 8006284:	f04f 0b00 	mov.w	fp, #0
 8006288:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800628c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800628e:	781a      	ldrb	r2, [r3, #0]
 8006290:	2a2b      	cmp	r2, #43	; 0x2b
 8006292:	d04c      	beq.n	800632e <_strtod_l+0xce>
 8006294:	d839      	bhi.n	800630a <_strtod_l+0xaa>
 8006296:	2a0d      	cmp	r2, #13
 8006298:	d832      	bhi.n	8006300 <_strtod_l+0xa0>
 800629a:	2a08      	cmp	r2, #8
 800629c:	d832      	bhi.n	8006304 <_strtod_l+0xa4>
 800629e:	2a00      	cmp	r2, #0
 80062a0:	d03c      	beq.n	800631c <_strtod_l+0xbc>
 80062a2:	2300      	movs	r3, #0
 80062a4:	930e      	str	r3, [sp, #56]	; 0x38
 80062a6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80062a8:	7833      	ldrb	r3, [r6, #0]
 80062aa:	2b30      	cmp	r3, #48	; 0x30
 80062ac:	f040 80b4 	bne.w	8006418 <_strtod_l+0x1b8>
 80062b0:	7873      	ldrb	r3, [r6, #1]
 80062b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80062b6:	2b58      	cmp	r3, #88	; 0x58
 80062b8:	d16c      	bne.n	8006394 <_strtod_l+0x134>
 80062ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062bc:	9301      	str	r3, [sp, #4]
 80062be:	ab1e      	add	r3, sp, #120	; 0x78
 80062c0:	9702      	str	r7, [sp, #8]
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4a8f      	ldr	r2, [pc, #572]	; (8006504 <_strtod_l+0x2a4>)
 80062c6:	ab1f      	add	r3, sp, #124	; 0x7c
 80062c8:	a91d      	add	r1, sp, #116	; 0x74
 80062ca:	4620      	mov	r0, r4
 80062cc:	f001 fe34 	bl	8007f38 <__gethex>
 80062d0:	f010 0707 	ands.w	r7, r0, #7
 80062d4:	4605      	mov	r5, r0
 80062d6:	d005      	beq.n	80062e4 <_strtod_l+0x84>
 80062d8:	2f06      	cmp	r7, #6
 80062da:	d12a      	bne.n	8006332 <_strtod_l+0xd2>
 80062dc:	3601      	adds	r6, #1
 80062de:	2300      	movs	r3, #0
 80062e0:	961d      	str	r6, [sp, #116]	; 0x74
 80062e2:	930e      	str	r3, [sp, #56]	; 0x38
 80062e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f040 8596 	bne.w	8006e18 <_strtod_l+0xbb8>
 80062ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80062ee:	b1db      	cbz	r3, 8006328 <_strtod_l+0xc8>
 80062f0:	4652      	mov	r2, sl
 80062f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80062f6:	ec43 2b10 	vmov	d0, r2, r3
 80062fa:	b023      	add	sp, #140	; 0x8c
 80062fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006300:	2a20      	cmp	r2, #32
 8006302:	d1ce      	bne.n	80062a2 <_strtod_l+0x42>
 8006304:	3301      	adds	r3, #1
 8006306:	931d      	str	r3, [sp, #116]	; 0x74
 8006308:	e7c0      	b.n	800628c <_strtod_l+0x2c>
 800630a:	2a2d      	cmp	r2, #45	; 0x2d
 800630c:	d1c9      	bne.n	80062a2 <_strtod_l+0x42>
 800630e:	2201      	movs	r2, #1
 8006310:	920e      	str	r2, [sp, #56]	; 0x38
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	921d      	str	r2, [sp, #116]	; 0x74
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d1c4      	bne.n	80062a6 <_strtod_l+0x46>
 800631c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800631e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006322:	2b00      	cmp	r3, #0
 8006324:	f040 8576 	bne.w	8006e14 <_strtod_l+0xbb4>
 8006328:	4652      	mov	r2, sl
 800632a:	465b      	mov	r3, fp
 800632c:	e7e3      	b.n	80062f6 <_strtod_l+0x96>
 800632e:	2200      	movs	r2, #0
 8006330:	e7ee      	b.n	8006310 <_strtod_l+0xb0>
 8006332:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8006334:	b13a      	cbz	r2, 8006346 <_strtod_l+0xe6>
 8006336:	2135      	movs	r1, #53	; 0x35
 8006338:	a820      	add	r0, sp, #128	; 0x80
 800633a:	f002 fdac 	bl	8008e96 <__copybits>
 800633e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006340:	4620      	mov	r0, r4
 8006342:	f002 f971 	bl	8008628 <_Bfree>
 8006346:	3f01      	subs	r7, #1
 8006348:	2f05      	cmp	r7, #5
 800634a:	d807      	bhi.n	800635c <_strtod_l+0xfc>
 800634c:	e8df f007 	tbb	[pc, r7]
 8006350:	1d180b0e 	.word	0x1d180b0e
 8006354:	030e      	.short	0x030e
 8006356:	f04f 0b00 	mov.w	fp, #0
 800635a:	46da      	mov	sl, fp
 800635c:	0728      	lsls	r0, r5, #28
 800635e:	d5c1      	bpl.n	80062e4 <_strtod_l+0x84>
 8006360:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006364:	e7be      	b.n	80062e4 <_strtod_l+0x84>
 8006366:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800636a:	e7f7      	b.n	800635c <_strtod_l+0xfc>
 800636c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8006370:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8006372:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006376:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800637a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800637e:	e7ed      	b.n	800635c <_strtod_l+0xfc>
 8006380:	f8df b184 	ldr.w	fp, [pc, #388]	; 8006508 <_strtod_l+0x2a8>
 8006384:	f04f 0a00 	mov.w	sl, #0
 8006388:	e7e8      	b.n	800635c <_strtod_l+0xfc>
 800638a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800638e:	f04f 3aff 	mov.w	sl, #4294967295
 8006392:	e7e3      	b.n	800635c <_strtod_l+0xfc>
 8006394:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006396:	1c5a      	adds	r2, r3, #1
 8006398:	921d      	str	r2, [sp, #116]	; 0x74
 800639a:	785b      	ldrb	r3, [r3, #1]
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d0f9      	beq.n	8006394 <_strtod_l+0x134>
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d09f      	beq.n	80062e4 <_strtod_l+0x84>
 80063a4:	2301      	movs	r3, #1
 80063a6:	f04f 0900 	mov.w	r9, #0
 80063aa:	9304      	str	r3, [sp, #16]
 80063ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80063ae:	930a      	str	r3, [sp, #40]	; 0x28
 80063b0:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80063b4:	464f      	mov	r7, r9
 80063b6:	220a      	movs	r2, #10
 80063b8:	981d      	ldr	r0, [sp, #116]	; 0x74
 80063ba:	7806      	ldrb	r6, [r0, #0]
 80063bc:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80063c0:	b2d9      	uxtb	r1, r3
 80063c2:	2909      	cmp	r1, #9
 80063c4:	d92a      	bls.n	800641c <_strtod_l+0x1bc>
 80063c6:	9907      	ldr	r1, [sp, #28]
 80063c8:	462a      	mov	r2, r5
 80063ca:	f003 f974 	bl	80096b6 <strncmp>
 80063ce:	b398      	cbz	r0, 8006438 <_strtod_l+0x1d8>
 80063d0:	2000      	movs	r0, #0
 80063d2:	4633      	mov	r3, r6
 80063d4:	463d      	mov	r5, r7
 80063d6:	9007      	str	r0, [sp, #28]
 80063d8:	4602      	mov	r2, r0
 80063da:	2b65      	cmp	r3, #101	; 0x65
 80063dc:	d001      	beq.n	80063e2 <_strtod_l+0x182>
 80063de:	2b45      	cmp	r3, #69	; 0x45
 80063e0:	d118      	bne.n	8006414 <_strtod_l+0x1b4>
 80063e2:	b91d      	cbnz	r5, 80063ec <_strtod_l+0x18c>
 80063e4:	9b04      	ldr	r3, [sp, #16]
 80063e6:	4303      	orrs	r3, r0
 80063e8:	d098      	beq.n	800631c <_strtod_l+0xbc>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 80063f0:	f108 0301 	add.w	r3, r8, #1
 80063f4:	931d      	str	r3, [sp, #116]	; 0x74
 80063f6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80063fa:	2b2b      	cmp	r3, #43	; 0x2b
 80063fc:	d075      	beq.n	80064ea <_strtod_l+0x28a>
 80063fe:	2b2d      	cmp	r3, #45	; 0x2d
 8006400:	d07b      	beq.n	80064fa <_strtod_l+0x29a>
 8006402:	f04f 0c00 	mov.w	ip, #0
 8006406:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800640a:	2909      	cmp	r1, #9
 800640c:	f240 8082 	bls.w	8006514 <_strtod_l+0x2b4>
 8006410:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8006414:	2600      	movs	r6, #0
 8006416:	e09d      	b.n	8006554 <_strtod_l+0x2f4>
 8006418:	2300      	movs	r3, #0
 800641a:	e7c4      	b.n	80063a6 <_strtod_l+0x146>
 800641c:	2f08      	cmp	r7, #8
 800641e:	bfd8      	it	le
 8006420:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8006422:	f100 0001 	add.w	r0, r0, #1
 8006426:	bfda      	itte	le
 8006428:	fb02 3301 	mlale	r3, r2, r1, r3
 800642c:	9309      	strle	r3, [sp, #36]	; 0x24
 800642e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8006432:	3701      	adds	r7, #1
 8006434:	901d      	str	r0, [sp, #116]	; 0x74
 8006436:	e7bf      	b.n	80063b8 <_strtod_l+0x158>
 8006438:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800643a:	195a      	adds	r2, r3, r5
 800643c:	921d      	str	r2, [sp, #116]	; 0x74
 800643e:	5d5b      	ldrb	r3, [r3, r5]
 8006440:	2f00      	cmp	r7, #0
 8006442:	d037      	beq.n	80064b4 <_strtod_l+0x254>
 8006444:	9007      	str	r0, [sp, #28]
 8006446:	463d      	mov	r5, r7
 8006448:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800644c:	2a09      	cmp	r2, #9
 800644e:	d912      	bls.n	8006476 <_strtod_l+0x216>
 8006450:	2201      	movs	r2, #1
 8006452:	e7c2      	b.n	80063da <_strtod_l+0x17a>
 8006454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006456:	1c5a      	adds	r2, r3, #1
 8006458:	921d      	str	r2, [sp, #116]	; 0x74
 800645a:	785b      	ldrb	r3, [r3, #1]
 800645c:	3001      	adds	r0, #1
 800645e:	2b30      	cmp	r3, #48	; 0x30
 8006460:	d0f8      	beq.n	8006454 <_strtod_l+0x1f4>
 8006462:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8006466:	2a08      	cmp	r2, #8
 8006468:	f200 84db 	bhi.w	8006e22 <_strtod_l+0xbc2>
 800646c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800646e:	9007      	str	r0, [sp, #28]
 8006470:	2000      	movs	r0, #0
 8006472:	920a      	str	r2, [sp, #40]	; 0x28
 8006474:	4605      	mov	r5, r0
 8006476:	3b30      	subs	r3, #48	; 0x30
 8006478:	f100 0201 	add.w	r2, r0, #1
 800647c:	d014      	beq.n	80064a8 <_strtod_l+0x248>
 800647e:	9907      	ldr	r1, [sp, #28]
 8006480:	4411      	add	r1, r2
 8006482:	9107      	str	r1, [sp, #28]
 8006484:	462a      	mov	r2, r5
 8006486:	eb00 0e05 	add.w	lr, r0, r5
 800648a:	210a      	movs	r1, #10
 800648c:	4572      	cmp	r2, lr
 800648e:	d113      	bne.n	80064b8 <_strtod_l+0x258>
 8006490:	182a      	adds	r2, r5, r0
 8006492:	2a08      	cmp	r2, #8
 8006494:	f105 0501 	add.w	r5, r5, #1
 8006498:	4405      	add	r5, r0
 800649a:	dc1c      	bgt.n	80064d6 <_strtod_l+0x276>
 800649c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800649e:	220a      	movs	r2, #10
 80064a0:	fb02 3301 	mla	r3, r2, r1, r3
 80064a4:	9309      	str	r3, [sp, #36]	; 0x24
 80064a6:	2200      	movs	r2, #0
 80064a8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80064aa:	1c59      	adds	r1, r3, #1
 80064ac:	911d      	str	r1, [sp, #116]	; 0x74
 80064ae:	785b      	ldrb	r3, [r3, #1]
 80064b0:	4610      	mov	r0, r2
 80064b2:	e7c9      	b.n	8006448 <_strtod_l+0x1e8>
 80064b4:	4638      	mov	r0, r7
 80064b6:	e7d2      	b.n	800645e <_strtod_l+0x1fe>
 80064b8:	2a08      	cmp	r2, #8
 80064ba:	dc04      	bgt.n	80064c6 <_strtod_l+0x266>
 80064bc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80064be:	434e      	muls	r6, r1
 80064c0:	9609      	str	r6, [sp, #36]	; 0x24
 80064c2:	3201      	adds	r2, #1
 80064c4:	e7e2      	b.n	800648c <_strtod_l+0x22c>
 80064c6:	f102 0c01 	add.w	ip, r2, #1
 80064ca:	f1bc 0f10 	cmp.w	ip, #16
 80064ce:	bfd8      	it	le
 80064d0:	fb01 f909 	mulle.w	r9, r1, r9
 80064d4:	e7f5      	b.n	80064c2 <_strtod_l+0x262>
 80064d6:	2d10      	cmp	r5, #16
 80064d8:	bfdc      	itt	le
 80064da:	220a      	movle	r2, #10
 80064dc:	fb02 3909 	mlale	r9, r2, r9, r3
 80064e0:	e7e1      	b.n	80064a6 <_strtod_l+0x246>
 80064e2:	2300      	movs	r3, #0
 80064e4:	9307      	str	r3, [sp, #28]
 80064e6:	2201      	movs	r2, #1
 80064e8:	e77c      	b.n	80063e4 <_strtod_l+0x184>
 80064ea:	f04f 0c00 	mov.w	ip, #0
 80064ee:	f108 0302 	add.w	r3, r8, #2
 80064f2:	931d      	str	r3, [sp, #116]	; 0x74
 80064f4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80064f8:	e785      	b.n	8006406 <_strtod_l+0x1a6>
 80064fa:	f04f 0c01 	mov.w	ip, #1
 80064fe:	e7f6      	b.n	80064ee <_strtod_l+0x28e>
 8006500:	0800a084 	.word	0x0800a084
 8006504:	08009dd0 	.word	0x08009dd0
 8006508:	7ff00000 	.word	0x7ff00000
 800650c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800650e:	1c59      	adds	r1, r3, #1
 8006510:	911d      	str	r1, [sp, #116]	; 0x74
 8006512:	785b      	ldrb	r3, [r3, #1]
 8006514:	2b30      	cmp	r3, #48	; 0x30
 8006516:	d0f9      	beq.n	800650c <_strtod_l+0x2ac>
 8006518:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800651c:	2908      	cmp	r1, #8
 800651e:	f63f af79 	bhi.w	8006414 <_strtod_l+0x1b4>
 8006522:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8006526:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006528:	9308      	str	r3, [sp, #32]
 800652a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800652c:	1c59      	adds	r1, r3, #1
 800652e:	911d      	str	r1, [sp, #116]	; 0x74
 8006530:	785b      	ldrb	r3, [r3, #1]
 8006532:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8006536:	2e09      	cmp	r6, #9
 8006538:	d937      	bls.n	80065aa <_strtod_l+0x34a>
 800653a:	9e08      	ldr	r6, [sp, #32]
 800653c:	1b89      	subs	r1, r1, r6
 800653e:	2908      	cmp	r1, #8
 8006540:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8006544:	dc02      	bgt.n	800654c <_strtod_l+0x2ec>
 8006546:	4576      	cmp	r6, lr
 8006548:	bfa8      	it	ge
 800654a:	4676      	movge	r6, lr
 800654c:	f1bc 0f00 	cmp.w	ip, #0
 8006550:	d000      	beq.n	8006554 <_strtod_l+0x2f4>
 8006552:	4276      	negs	r6, r6
 8006554:	2d00      	cmp	r5, #0
 8006556:	d14f      	bne.n	80065f8 <_strtod_l+0x398>
 8006558:	9904      	ldr	r1, [sp, #16]
 800655a:	4301      	orrs	r1, r0
 800655c:	f47f aec2 	bne.w	80062e4 <_strtod_l+0x84>
 8006560:	2a00      	cmp	r2, #0
 8006562:	f47f aedb 	bne.w	800631c <_strtod_l+0xbc>
 8006566:	2b69      	cmp	r3, #105	; 0x69
 8006568:	d027      	beq.n	80065ba <_strtod_l+0x35a>
 800656a:	dc24      	bgt.n	80065b6 <_strtod_l+0x356>
 800656c:	2b49      	cmp	r3, #73	; 0x49
 800656e:	d024      	beq.n	80065ba <_strtod_l+0x35a>
 8006570:	2b4e      	cmp	r3, #78	; 0x4e
 8006572:	f47f aed3 	bne.w	800631c <_strtod_l+0xbc>
 8006576:	499e      	ldr	r1, [pc, #632]	; (80067f0 <_strtod_l+0x590>)
 8006578:	a81d      	add	r0, sp, #116	; 0x74
 800657a:	f001 ff35 	bl	80083e8 <__match>
 800657e:	2800      	cmp	r0, #0
 8006580:	f43f aecc 	beq.w	800631c <_strtod_l+0xbc>
 8006584:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006586:	781b      	ldrb	r3, [r3, #0]
 8006588:	2b28      	cmp	r3, #40	; 0x28
 800658a:	d12d      	bne.n	80065e8 <_strtod_l+0x388>
 800658c:	4999      	ldr	r1, [pc, #612]	; (80067f4 <_strtod_l+0x594>)
 800658e:	aa20      	add	r2, sp, #128	; 0x80
 8006590:	a81d      	add	r0, sp, #116	; 0x74
 8006592:	f001 ff3d 	bl	8008410 <__hexnan>
 8006596:	2805      	cmp	r0, #5
 8006598:	d126      	bne.n	80065e8 <_strtod_l+0x388>
 800659a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800659c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80065a0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80065a4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80065a8:	e69c      	b.n	80062e4 <_strtod_l+0x84>
 80065aa:	210a      	movs	r1, #10
 80065ac:	fb01 3e0e 	mla	lr, r1, lr, r3
 80065b0:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80065b4:	e7b9      	b.n	800652a <_strtod_l+0x2ca>
 80065b6:	2b6e      	cmp	r3, #110	; 0x6e
 80065b8:	e7db      	b.n	8006572 <_strtod_l+0x312>
 80065ba:	498f      	ldr	r1, [pc, #572]	; (80067f8 <_strtod_l+0x598>)
 80065bc:	a81d      	add	r0, sp, #116	; 0x74
 80065be:	f001 ff13 	bl	80083e8 <__match>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	f43f aeaa 	beq.w	800631c <_strtod_l+0xbc>
 80065c8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065ca:	498c      	ldr	r1, [pc, #560]	; (80067fc <_strtod_l+0x59c>)
 80065cc:	3b01      	subs	r3, #1
 80065ce:	a81d      	add	r0, sp, #116	; 0x74
 80065d0:	931d      	str	r3, [sp, #116]	; 0x74
 80065d2:	f001 ff09 	bl	80083e8 <__match>
 80065d6:	b910      	cbnz	r0, 80065de <_strtod_l+0x37e>
 80065d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80065da:	3301      	adds	r3, #1
 80065dc:	931d      	str	r3, [sp, #116]	; 0x74
 80065de:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800680c <_strtod_l+0x5ac>
 80065e2:	f04f 0a00 	mov.w	sl, #0
 80065e6:	e67d      	b.n	80062e4 <_strtod_l+0x84>
 80065e8:	4885      	ldr	r0, [pc, #532]	; (8006800 <_strtod_l+0x5a0>)
 80065ea:	f003 f809 	bl	8009600 <nan>
 80065ee:	ed8d 0b04 	vstr	d0, [sp, #16]
 80065f2:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 80065f6:	e675      	b.n	80062e4 <_strtod_l+0x84>
 80065f8:	9b07      	ldr	r3, [sp, #28]
 80065fa:	9809      	ldr	r0, [sp, #36]	; 0x24
 80065fc:	1af3      	subs	r3, r6, r3
 80065fe:	2f00      	cmp	r7, #0
 8006600:	bf08      	it	eq
 8006602:	462f      	moveq	r7, r5
 8006604:	2d10      	cmp	r5, #16
 8006606:	9308      	str	r3, [sp, #32]
 8006608:	46a8      	mov	r8, r5
 800660a:	bfa8      	it	ge
 800660c:	f04f 0810 	movge.w	r8, #16
 8006610:	f7f9 ff88 	bl	8000524 <__aeabi_ui2d>
 8006614:	2d09      	cmp	r5, #9
 8006616:	4682      	mov	sl, r0
 8006618:	468b      	mov	fp, r1
 800661a:	dd13      	ble.n	8006644 <_strtod_l+0x3e4>
 800661c:	4b79      	ldr	r3, [pc, #484]	; (8006804 <_strtod_l+0x5a4>)
 800661e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8006622:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8006626:	f7f9 fff7 	bl	8000618 <__aeabi_dmul>
 800662a:	4682      	mov	sl, r0
 800662c:	4648      	mov	r0, r9
 800662e:	468b      	mov	fp, r1
 8006630:	f7f9 ff78 	bl	8000524 <__aeabi_ui2d>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4650      	mov	r0, sl
 800663a:	4659      	mov	r1, fp
 800663c:	f7f9 fe36 	bl	80002ac <__adddf3>
 8006640:	4682      	mov	sl, r0
 8006642:	468b      	mov	fp, r1
 8006644:	2d0f      	cmp	r5, #15
 8006646:	dc38      	bgt.n	80066ba <_strtod_l+0x45a>
 8006648:	9b08      	ldr	r3, [sp, #32]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f43f ae4a 	beq.w	80062e4 <_strtod_l+0x84>
 8006650:	dd24      	ble.n	800669c <_strtod_l+0x43c>
 8006652:	2b16      	cmp	r3, #22
 8006654:	dc0b      	bgt.n	800666e <_strtod_l+0x40e>
 8006656:	4d6b      	ldr	r5, [pc, #428]	; (8006804 <_strtod_l+0x5a4>)
 8006658:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800665c:	e9d5 0100 	ldrd	r0, r1, [r5]
 8006660:	4652      	mov	r2, sl
 8006662:	465b      	mov	r3, fp
 8006664:	f7f9 ffd8 	bl	8000618 <__aeabi_dmul>
 8006668:	4682      	mov	sl, r0
 800666a:	468b      	mov	fp, r1
 800666c:	e63a      	b.n	80062e4 <_strtod_l+0x84>
 800666e:	9a08      	ldr	r2, [sp, #32]
 8006670:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8006674:	4293      	cmp	r3, r2
 8006676:	db20      	blt.n	80066ba <_strtod_l+0x45a>
 8006678:	4c62      	ldr	r4, [pc, #392]	; (8006804 <_strtod_l+0x5a4>)
 800667a:	f1c5 050f 	rsb	r5, r5, #15
 800667e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006682:	4652      	mov	r2, sl
 8006684:	465b      	mov	r3, fp
 8006686:	e9d1 0100 	ldrd	r0, r1, [r1]
 800668a:	f7f9 ffc5 	bl	8000618 <__aeabi_dmul>
 800668e:	9b08      	ldr	r3, [sp, #32]
 8006690:	1b5d      	subs	r5, r3, r5
 8006692:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8006696:	e9d4 2300 	ldrd	r2, r3, [r4]
 800669a:	e7e3      	b.n	8006664 <_strtod_l+0x404>
 800669c:	9b08      	ldr	r3, [sp, #32]
 800669e:	3316      	adds	r3, #22
 80066a0:	db0b      	blt.n	80066ba <_strtod_l+0x45a>
 80066a2:	9b07      	ldr	r3, [sp, #28]
 80066a4:	4a57      	ldr	r2, [pc, #348]	; (8006804 <_strtod_l+0x5a4>)
 80066a6:	1b9e      	subs	r6, r3, r6
 80066a8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80066ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80066b0:	4650      	mov	r0, sl
 80066b2:	4659      	mov	r1, fp
 80066b4:	f7fa f8da 	bl	800086c <__aeabi_ddiv>
 80066b8:	e7d6      	b.n	8006668 <_strtod_l+0x408>
 80066ba:	9b08      	ldr	r3, [sp, #32]
 80066bc:	eba5 0808 	sub.w	r8, r5, r8
 80066c0:	4498      	add	r8, r3
 80066c2:	f1b8 0f00 	cmp.w	r8, #0
 80066c6:	dd71      	ble.n	80067ac <_strtod_l+0x54c>
 80066c8:	f018 030f 	ands.w	r3, r8, #15
 80066cc:	d00a      	beq.n	80066e4 <_strtod_l+0x484>
 80066ce:	494d      	ldr	r1, [pc, #308]	; (8006804 <_strtod_l+0x5a4>)
 80066d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80066d4:	4652      	mov	r2, sl
 80066d6:	465b      	mov	r3, fp
 80066d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80066dc:	f7f9 ff9c 	bl	8000618 <__aeabi_dmul>
 80066e0:	4682      	mov	sl, r0
 80066e2:	468b      	mov	fp, r1
 80066e4:	f038 080f 	bics.w	r8, r8, #15
 80066e8:	d04d      	beq.n	8006786 <_strtod_l+0x526>
 80066ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80066ee:	dd22      	ble.n	8006736 <_strtod_l+0x4d6>
 80066f0:	2500      	movs	r5, #0
 80066f2:	462e      	mov	r6, r5
 80066f4:	9509      	str	r5, [sp, #36]	; 0x24
 80066f6:	9507      	str	r5, [sp, #28]
 80066f8:	2322      	movs	r3, #34	; 0x22
 80066fa:	f8df b110 	ldr.w	fp, [pc, #272]	; 800680c <_strtod_l+0x5ac>
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	f04f 0a00 	mov.w	sl, #0
 8006704:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006706:	2b00      	cmp	r3, #0
 8006708:	f43f adec 	beq.w	80062e4 <_strtod_l+0x84>
 800670c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800670e:	4620      	mov	r0, r4
 8006710:	f001 ff8a 	bl	8008628 <_Bfree>
 8006714:	9907      	ldr	r1, [sp, #28]
 8006716:	4620      	mov	r0, r4
 8006718:	f001 ff86 	bl	8008628 <_Bfree>
 800671c:	4631      	mov	r1, r6
 800671e:	4620      	mov	r0, r4
 8006720:	f001 ff82 	bl	8008628 <_Bfree>
 8006724:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006726:	4620      	mov	r0, r4
 8006728:	f001 ff7e 	bl	8008628 <_Bfree>
 800672c:	4629      	mov	r1, r5
 800672e:	4620      	mov	r0, r4
 8006730:	f001 ff7a 	bl	8008628 <_Bfree>
 8006734:	e5d6      	b.n	80062e4 <_strtod_l+0x84>
 8006736:	2300      	movs	r3, #0
 8006738:	ea4f 1828 	mov.w	r8, r8, asr #4
 800673c:	4650      	mov	r0, sl
 800673e:	4659      	mov	r1, fp
 8006740:	4699      	mov	r9, r3
 8006742:	f1b8 0f01 	cmp.w	r8, #1
 8006746:	dc21      	bgt.n	800678c <_strtod_l+0x52c>
 8006748:	b10b      	cbz	r3, 800674e <_strtod_l+0x4ee>
 800674a:	4682      	mov	sl, r0
 800674c:	468b      	mov	fp, r1
 800674e:	4b2e      	ldr	r3, [pc, #184]	; (8006808 <_strtod_l+0x5a8>)
 8006750:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8006754:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8006758:	4652      	mov	r2, sl
 800675a:	465b      	mov	r3, fp
 800675c:	e9d9 0100 	ldrd	r0, r1, [r9]
 8006760:	f7f9 ff5a 	bl	8000618 <__aeabi_dmul>
 8006764:	4b29      	ldr	r3, [pc, #164]	; (800680c <_strtod_l+0x5ac>)
 8006766:	460a      	mov	r2, r1
 8006768:	400b      	ands	r3, r1
 800676a:	4929      	ldr	r1, [pc, #164]	; (8006810 <_strtod_l+0x5b0>)
 800676c:	428b      	cmp	r3, r1
 800676e:	4682      	mov	sl, r0
 8006770:	d8be      	bhi.n	80066f0 <_strtod_l+0x490>
 8006772:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8006776:	428b      	cmp	r3, r1
 8006778:	bf86      	itte	hi
 800677a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8006814 <_strtod_l+0x5b4>
 800677e:	f04f 3aff 	movhi.w	sl, #4294967295
 8006782:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8006786:	2300      	movs	r3, #0
 8006788:	9304      	str	r3, [sp, #16]
 800678a:	e081      	b.n	8006890 <_strtod_l+0x630>
 800678c:	f018 0f01 	tst.w	r8, #1
 8006790:	d007      	beq.n	80067a2 <_strtod_l+0x542>
 8006792:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <_strtod_l+0x5a8>)
 8006794:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8006798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800679c:	f7f9 ff3c 	bl	8000618 <__aeabi_dmul>
 80067a0:	2301      	movs	r3, #1
 80067a2:	f109 0901 	add.w	r9, r9, #1
 80067a6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80067aa:	e7ca      	b.n	8006742 <_strtod_l+0x4e2>
 80067ac:	d0eb      	beq.n	8006786 <_strtod_l+0x526>
 80067ae:	f1c8 0800 	rsb	r8, r8, #0
 80067b2:	f018 020f 	ands.w	r2, r8, #15
 80067b6:	d00a      	beq.n	80067ce <_strtod_l+0x56e>
 80067b8:	4b12      	ldr	r3, [pc, #72]	; (8006804 <_strtod_l+0x5a4>)
 80067ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80067be:	4650      	mov	r0, sl
 80067c0:	4659      	mov	r1, fp
 80067c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067c6:	f7fa f851 	bl	800086c <__aeabi_ddiv>
 80067ca:	4682      	mov	sl, r0
 80067cc:	468b      	mov	fp, r1
 80067ce:	ea5f 1828 	movs.w	r8, r8, asr #4
 80067d2:	d0d8      	beq.n	8006786 <_strtod_l+0x526>
 80067d4:	f1b8 0f1f 	cmp.w	r8, #31
 80067d8:	dd1e      	ble.n	8006818 <_strtod_l+0x5b8>
 80067da:	2500      	movs	r5, #0
 80067dc:	462e      	mov	r6, r5
 80067de:	9509      	str	r5, [sp, #36]	; 0x24
 80067e0:	9507      	str	r5, [sp, #28]
 80067e2:	2322      	movs	r3, #34	; 0x22
 80067e4:	f04f 0a00 	mov.w	sl, #0
 80067e8:	f04f 0b00 	mov.w	fp, #0
 80067ec:	6023      	str	r3, [r4, #0]
 80067ee:	e789      	b.n	8006704 <_strtod_l+0x4a4>
 80067f0:	08009da1 	.word	0x08009da1
 80067f4:	08009de4 	.word	0x08009de4
 80067f8:	08009d99 	.word	0x08009d99
 80067fc:	08009f24 	.word	0x08009f24
 8006800:	0800a240 	.word	0x0800a240
 8006804:	0800a120 	.word	0x0800a120
 8006808:	0800a0f8 	.word	0x0800a0f8
 800680c:	7ff00000 	.word	0x7ff00000
 8006810:	7ca00000 	.word	0x7ca00000
 8006814:	7fefffff 	.word	0x7fefffff
 8006818:	f018 0310 	ands.w	r3, r8, #16
 800681c:	bf18      	it	ne
 800681e:	236a      	movne	r3, #106	; 0x6a
 8006820:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8006bd8 <_strtod_l+0x978>
 8006824:	9304      	str	r3, [sp, #16]
 8006826:	4650      	mov	r0, sl
 8006828:	4659      	mov	r1, fp
 800682a:	2300      	movs	r3, #0
 800682c:	f018 0f01 	tst.w	r8, #1
 8006830:	d004      	beq.n	800683c <_strtod_l+0x5dc>
 8006832:	e9d9 2300 	ldrd	r2, r3, [r9]
 8006836:	f7f9 feef 	bl	8000618 <__aeabi_dmul>
 800683a:	2301      	movs	r3, #1
 800683c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8006840:	f109 0908 	add.w	r9, r9, #8
 8006844:	d1f2      	bne.n	800682c <_strtod_l+0x5cc>
 8006846:	b10b      	cbz	r3, 800684c <_strtod_l+0x5ec>
 8006848:	4682      	mov	sl, r0
 800684a:	468b      	mov	fp, r1
 800684c:	9b04      	ldr	r3, [sp, #16]
 800684e:	b1bb      	cbz	r3, 8006880 <_strtod_l+0x620>
 8006850:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8006854:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006858:	2b00      	cmp	r3, #0
 800685a:	4659      	mov	r1, fp
 800685c:	dd10      	ble.n	8006880 <_strtod_l+0x620>
 800685e:	2b1f      	cmp	r3, #31
 8006860:	f340 8128 	ble.w	8006ab4 <_strtod_l+0x854>
 8006864:	2b34      	cmp	r3, #52	; 0x34
 8006866:	bfde      	ittt	le
 8006868:	3b20      	suble	r3, #32
 800686a:	f04f 32ff 	movle.w	r2, #4294967295
 800686e:	fa02 f303 	lslle.w	r3, r2, r3
 8006872:	f04f 0a00 	mov.w	sl, #0
 8006876:	bfcc      	ite	gt
 8006878:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800687c:	ea03 0b01 	andle.w	fp, r3, r1
 8006880:	2200      	movs	r2, #0
 8006882:	2300      	movs	r3, #0
 8006884:	4650      	mov	r0, sl
 8006886:	4659      	mov	r1, fp
 8006888:	f7fa f92e 	bl	8000ae8 <__aeabi_dcmpeq>
 800688c:	2800      	cmp	r0, #0
 800688e:	d1a4      	bne.n	80067da <_strtod_l+0x57a>
 8006890:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006896:	462b      	mov	r3, r5
 8006898:	463a      	mov	r2, r7
 800689a:	4620      	mov	r0, r4
 800689c:	f001 ff30 	bl	8008700 <__s2b>
 80068a0:	9009      	str	r0, [sp, #36]	; 0x24
 80068a2:	2800      	cmp	r0, #0
 80068a4:	f43f af24 	beq.w	80066f0 <_strtod_l+0x490>
 80068a8:	9b07      	ldr	r3, [sp, #28]
 80068aa:	1b9e      	subs	r6, r3, r6
 80068ac:	9b08      	ldr	r3, [sp, #32]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	bfb4      	ite	lt
 80068b2:	4633      	movlt	r3, r6
 80068b4:	2300      	movge	r3, #0
 80068b6:	9310      	str	r3, [sp, #64]	; 0x40
 80068b8:	9b08      	ldr	r3, [sp, #32]
 80068ba:	2500      	movs	r5, #0
 80068bc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80068c0:	9318      	str	r3, [sp, #96]	; 0x60
 80068c2:	462e      	mov	r6, r5
 80068c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068c6:	4620      	mov	r0, r4
 80068c8:	6859      	ldr	r1, [r3, #4]
 80068ca:	f001 fe6d 	bl	80085a8 <_Balloc>
 80068ce:	9007      	str	r0, [sp, #28]
 80068d0:	2800      	cmp	r0, #0
 80068d2:	f43f af11 	beq.w	80066f8 <_strtod_l+0x498>
 80068d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d8:	691a      	ldr	r2, [r3, #16]
 80068da:	3202      	adds	r2, #2
 80068dc:	f103 010c 	add.w	r1, r3, #12
 80068e0:	0092      	lsls	r2, r2, #2
 80068e2:	300c      	adds	r0, #12
 80068e4:	f001 fe52 	bl	800858c <memcpy>
 80068e8:	ec4b ab10 	vmov	d0, sl, fp
 80068ec:	aa20      	add	r2, sp, #128	; 0x80
 80068ee:	a91f      	add	r1, sp, #124	; 0x7c
 80068f0:	4620      	mov	r0, r4
 80068f2:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 80068f6:	f002 fa3f 	bl	8008d78 <__d2b>
 80068fa:	901e      	str	r0, [sp, #120]	; 0x78
 80068fc:	2800      	cmp	r0, #0
 80068fe:	f43f aefb 	beq.w	80066f8 <_strtod_l+0x498>
 8006902:	2101      	movs	r1, #1
 8006904:	4620      	mov	r0, r4
 8006906:	f001 ff95 	bl	8008834 <__i2b>
 800690a:	4606      	mov	r6, r0
 800690c:	2800      	cmp	r0, #0
 800690e:	f43f aef3 	beq.w	80066f8 <_strtod_l+0x498>
 8006912:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8006914:	9904      	ldr	r1, [sp, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	bfab      	itete	ge
 800691a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800691c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800691e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8006920:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8006924:	bfac      	ite	ge
 8006926:	eb03 0902 	addge.w	r9, r3, r2
 800692a:	1ad7      	sublt	r7, r2, r3
 800692c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800692e:	eba3 0801 	sub.w	r8, r3, r1
 8006932:	4490      	add	r8, r2
 8006934:	4ba3      	ldr	r3, [pc, #652]	; (8006bc4 <_strtod_l+0x964>)
 8006936:	f108 38ff 	add.w	r8, r8, #4294967295
 800693a:	4598      	cmp	r8, r3
 800693c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006940:	f280 80cc 	bge.w	8006adc <_strtod_l+0x87c>
 8006944:	eba3 0308 	sub.w	r3, r3, r8
 8006948:	2b1f      	cmp	r3, #31
 800694a:	eba2 0203 	sub.w	r2, r2, r3
 800694e:	f04f 0101 	mov.w	r1, #1
 8006952:	f300 80b6 	bgt.w	8006ac2 <_strtod_l+0x862>
 8006956:	fa01 f303 	lsl.w	r3, r1, r3
 800695a:	9311      	str	r3, [sp, #68]	; 0x44
 800695c:	2300      	movs	r3, #0
 800695e:	930c      	str	r3, [sp, #48]	; 0x30
 8006960:	eb09 0802 	add.w	r8, r9, r2
 8006964:	9b04      	ldr	r3, [sp, #16]
 8006966:	45c1      	cmp	r9, r8
 8006968:	4417      	add	r7, r2
 800696a:	441f      	add	r7, r3
 800696c:	464b      	mov	r3, r9
 800696e:	bfa8      	it	ge
 8006970:	4643      	movge	r3, r8
 8006972:	42bb      	cmp	r3, r7
 8006974:	bfa8      	it	ge
 8006976:	463b      	movge	r3, r7
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfc2      	ittt	gt
 800697c:	eba8 0803 	subgt.w	r8, r8, r3
 8006980:	1aff      	subgt	r7, r7, r3
 8006982:	eba9 0903 	subgt.w	r9, r9, r3
 8006986:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006988:	2b00      	cmp	r3, #0
 800698a:	dd17      	ble.n	80069bc <_strtod_l+0x75c>
 800698c:	4631      	mov	r1, r6
 800698e:	461a      	mov	r2, r3
 8006990:	4620      	mov	r0, r4
 8006992:	f002 f80b 	bl	80089ac <__pow5mult>
 8006996:	4606      	mov	r6, r0
 8006998:	2800      	cmp	r0, #0
 800699a:	f43f aead 	beq.w	80066f8 <_strtod_l+0x498>
 800699e:	4601      	mov	r1, r0
 80069a0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80069a2:	4620      	mov	r0, r4
 80069a4:	f001 ff5c 	bl	8008860 <__multiply>
 80069a8:	900f      	str	r0, [sp, #60]	; 0x3c
 80069aa:	2800      	cmp	r0, #0
 80069ac:	f43f aea4 	beq.w	80066f8 <_strtod_l+0x498>
 80069b0:	991e      	ldr	r1, [sp, #120]	; 0x78
 80069b2:	4620      	mov	r0, r4
 80069b4:	f001 fe38 	bl	8008628 <_Bfree>
 80069b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80069ba:	931e      	str	r3, [sp, #120]	; 0x78
 80069bc:	f1b8 0f00 	cmp.w	r8, #0
 80069c0:	f300 8091 	bgt.w	8006ae6 <_strtod_l+0x886>
 80069c4:	9b08      	ldr	r3, [sp, #32]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	dd08      	ble.n	80069dc <_strtod_l+0x77c>
 80069ca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80069cc:	9907      	ldr	r1, [sp, #28]
 80069ce:	4620      	mov	r0, r4
 80069d0:	f001 ffec 	bl	80089ac <__pow5mult>
 80069d4:	9007      	str	r0, [sp, #28]
 80069d6:	2800      	cmp	r0, #0
 80069d8:	f43f ae8e 	beq.w	80066f8 <_strtod_l+0x498>
 80069dc:	2f00      	cmp	r7, #0
 80069de:	dd08      	ble.n	80069f2 <_strtod_l+0x792>
 80069e0:	9907      	ldr	r1, [sp, #28]
 80069e2:	463a      	mov	r2, r7
 80069e4:	4620      	mov	r0, r4
 80069e6:	f002 f83b 	bl	8008a60 <__lshift>
 80069ea:	9007      	str	r0, [sp, #28]
 80069ec:	2800      	cmp	r0, #0
 80069ee:	f43f ae83 	beq.w	80066f8 <_strtod_l+0x498>
 80069f2:	f1b9 0f00 	cmp.w	r9, #0
 80069f6:	dd08      	ble.n	8006a0a <_strtod_l+0x7aa>
 80069f8:	4631      	mov	r1, r6
 80069fa:	464a      	mov	r2, r9
 80069fc:	4620      	mov	r0, r4
 80069fe:	f002 f82f 	bl	8008a60 <__lshift>
 8006a02:	4606      	mov	r6, r0
 8006a04:	2800      	cmp	r0, #0
 8006a06:	f43f ae77 	beq.w	80066f8 <_strtod_l+0x498>
 8006a0a:	9a07      	ldr	r2, [sp, #28]
 8006a0c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f002 f8ae 	bl	8008b70 <__mdiff>
 8006a14:	4605      	mov	r5, r0
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f ae6e 	beq.w	80066f8 <_strtod_l+0x498>
 8006a1c:	68c3      	ldr	r3, [r0, #12]
 8006a1e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006a20:	2300      	movs	r3, #0
 8006a22:	60c3      	str	r3, [r0, #12]
 8006a24:	4631      	mov	r1, r6
 8006a26:	f002 f887 	bl	8008b38 <__mcmp>
 8006a2a:	2800      	cmp	r0, #0
 8006a2c:	da65      	bge.n	8006afa <_strtod_l+0x89a>
 8006a2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006a30:	ea53 030a 	orrs.w	r3, r3, sl
 8006a34:	f040 8087 	bne.w	8006b46 <_strtod_l+0x8e6>
 8006a38:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	f040 8082 	bne.w	8006b46 <_strtod_l+0x8e6>
 8006a42:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006a46:	0d1b      	lsrs	r3, r3, #20
 8006a48:	051b      	lsls	r3, r3, #20
 8006a4a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8006a4e:	d97a      	bls.n	8006b46 <_strtod_l+0x8e6>
 8006a50:	696b      	ldr	r3, [r5, #20]
 8006a52:	b913      	cbnz	r3, 8006a5a <_strtod_l+0x7fa>
 8006a54:	692b      	ldr	r3, [r5, #16]
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	dd75      	ble.n	8006b46 <_strtod_l+0x8e6>
 8006a5a:	4629      	mov	r1, r5
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	4620      	mov	r0, r4
 8006a60:	f001 fffe 	bl	8008a60 <__lshift>
 8006a64:	4631      	mov	r1, r6
 8006a66:	4605      	mov	r5, r0
 8006a68:	f002 f866 	bl	8008b38 <__mcmp>
 8006a6c:	2800      	cmp	r0, #0
 8006a6e:	dd6a      	ble.n	8006b46 <_strtod_l+0x8e6>
 8006a70:	9904      	ldr	r1, [sp, #16]
 8006a72:	4a55      	ldr	r2, [pc, #340]	; (8006bc8 <_strtod_l+0x968>)
 8006a74:	465b      	mov	r3, fp
 8006a76:	2900      	cmp	r1, #0
 8006a78:	f000 8085 	beq.w	8006b86 <_strtod_l+0x926>
 8006a7c:	ea02 010b 	and.w	r1, r2, fp
 8006a80:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8006a84:	dc7f      	bgt.n	8006b86 <_strtod_l+0x926>
 8006a86:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8006a8a:	f77f aeaa 	ble.w	80067e2 <_strtod_l+0x582>
 8006a8e:	4a4f      	ldr	r2, [pc, #316]	; (8006bcc <_strtod_l+0x96c>)
 8006a90:	2300      	movs	r3, #0
 8006a92:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8006a96:	4650      	mov	r0, sl
 8006a98:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8006a9c:	4659      	mov	r1, fp
 8006a9e:	f7f9 fdbb 	bl	8000618 <__aeabi_dmul>
 8006aa2:	460b      	mov	r3, r1
 8006aa4:	4303      	orrs	r3, r0
 8006aa6:	bf08      	it	eq
 8006aa8:	2322      	moveq	r3, #34	; 0x22
 8006aaa:	4682      	mov	sl, r0
 8006aac:	468b      	mov	fp, r1
 8006aae:	bf08      	it	eq
 8006ab0:	6023      	streq	r3, [r4, #0]
 8006ab2:	e62b      	b.n	800670c <_strtod_l+0x4ac>
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8006abc:	ea03 0a0a 	and.w	sl, r3, sl
 8006ac0:	e6de      	b.n	8006880 <_strtod_l+0x620>
 8006ac2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8006ac6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006aca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006ace:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8006ad2:	fa01 f308 	lsl.w	r3, r1, r8
 8006ad6:	930c      	str	r3, [sp, #48]	; 0x30
 8006ad8:	9111      	str	r1, [sp, #68]	; 0x44
 8006ada:	e741      	b.n	8006960 <_strtod_l+0x700>
 8006adc:	2300      	movs	r3, #0
 8006ade:	930c      	str	r3, [sp, #48]	; 0x30
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	9311      	str	r3, [sp, #68]	; 0x44
 8006ae4:	e73c      	b.n	8006960 <_strtod_l+0x700>
 8006ae6:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006ae8:	4642      	mov	r2, r8
 8006aea:	4620      	mov	r0, r4
 8006aec:	f001 ffb8 	bl	8008a60 <__lshift>
 8006af0:	901e      	str	r0, [sp, #120]	; 0x78
 8006af2:	2800      	cmp	r0, #0
 8006af4:	f47f af66 	bne.w	80069c4 <_strtod_l+0x764>
 8006af8:	e5fe      	b.n	80066f8 <_strtod_l+0x498>
 8006afa:	465f      	mov	r7, fp
 8006afc:	d16e      	bne.n	8006bdc <_strtod_l+0x97c>
 8006afe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006b00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006b04:	b342      	cbz	r2, 8006b58 <_strtod_l+0x8f8>
 8006b06:	4a32      	ldr	r2, [pc, #200]	; (8006bd0 <_strtod_l+0x970>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d128      	bne.n	8006b5e <_strtod_l+0x8fe>
 8006b0c:	9b04      	ldr	r3, [sp, #16]
 8006b0e:	4650      	mov	r0, sl
 8006b10:	b1eb      	cbz	r3, 8006b4e <_strtod_l+0x8ee>
 8006b12:	4a2d      	ldr	r2, [pc, #180]	; (8006bc8 <_strtod_l+0x968>)
 8006b14:	403a      	ands	r2, r7
 8006b16:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8006b1a:	f04f 31ff 	mov.w	r1, #4294967295
 8006b1e:	d819      	bhi.n	8006b54 <_strtod_l+0x8f4>
 8006b20:	0d12      	lsrs	r2, r2, #20
 8006b22:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8006b26:	fa01 f303 	lsl.w	r3, r1, r3
 8006b2a:	4298      	cmp	r0, r3
 8006b2c:	d117      	bne.n	8006b5e <_strtod_l+0x8fe>
 8006b2e:	4b29      	ldr	r3, [pc, #164]	; (8006bd4 <_strtod_l+0x974>)
 8006b30:	429f      	cmp	r7, r3
 8006b32:	d102      	bne.n	8006b3a <_strtod_l+0x8da>
 8006b34:	3001      	adds	r0, #1
 8006b36:	f43f addf 	beq.w	80066f8 <_strtod_l+0x498>
 8006b3a:	4b23      	ldr	r3, [pc, #140]	; (8006bc8 <_strtod_l+0x968>)
 8006b3c:	403b      	ands	r3, r7
 8006b3e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8006b42:	f04f 0a00 	mov.w	sl, #0
 8006b46:	9b04      	ldr	r3, [sp, #16]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d1a0      	bne.n	8006a8e <_strtod_l+0x82e>
 8006b4c:	e5de      	b.n	800670c <_strtod_l+0x4ac>
 8006b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8006b52:	e7ea      	b.n	8006b2a <_strtod_l+0x8ca>
 8006b54:	460b      	mov	r3, r1
 8006b56:	e7e8      	b.n	8006b2a <_strtod_l+0x8ca>
 8006b58:	ea53 030a 	orrs.w	r3, r3, sl
 8006b5c:	d088      	beq.n	8006a70 <_strtod_l+0x810>
 8006b5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006b60:	b1db      	cbz	r3, 8006b9a <_strtod_l+0x93a>
 8006b62:	423b      	tst	r3, r7
 8006b64:	d0ef      	beq.n	8006b46 <_strtod_l+0x8e6>
 8006b66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	4650      	mov	r0, sl
 8006b6c:	4659      	mov	r1, fp
 8006b6e:	b1c3      	cbz	r3, 8006ba2 <_strtod_l+0x942>
 8006b70:	f7ff fb5a 	bl	8006228 <sulp>
 8006b74:	4602      	mov	r2, r0
 8006b76:	460b      	mov	r3, r1
 8006b78:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006b7c:	f7f9 fb96 	bl	80002ac <__adddf3>
 8006b80:	4682      	mov	sl, r0
 8006b82:	468b      	mov	fp, r1
 8006b84:	e7df      	b.n	8006b46 <_strtod_l+0x8e6>
 8006b86:	4013      	ands	r3, r2
 8006b88:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8006b8c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006b90:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006b94:	f04f 3aff 	mov.w	sl, #4294967295
 8006b98:	e7d5      	b.n	8006b46 <_strtod_l+0x8e6>
 8006b9a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006b9c:	ea13 0f0a 	tst.w	r3, sl
 8006ba0:	e7e0      	b.n	8006b64 <_strtod_l+0x904>
 8006ba2:	f7ff fb41 	bl	8006228 <sulp>
 8006ba6:	4602      	mov	r2, r0
 8006ba8:	460b      	mov	r3, r1
 8006baa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8006bae:	f7f9 fb7b 	bl	80002a8 <__aeabi_dsub>
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	4682      	mov	sl, r0
 8006bb8:	468b      	mov	fp, r1
 8006bba:	f7f9 ff95 	bl	8000ae8 <__aeabi_dcmpeq>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d0c1      	beq.n	8006b46 <_strtod_l+0x8e6>
 8006bc2:	e60e      	b.n	80067e2 <_strtod_l+0x582>
 8006bc4:	fffffc02 	.word	0xfffffc02
 8006bc8:	7ff00000 	.word	0x7ff00000
 8006bcc:	39500000 	.word	0x39500000
 8006bd0:	000fffff 	.word	0x000fffff
 8006bd4:	7fefffff 	.word	0x7fefffff
 8006bd8:	08009df8 	.word	0x08009df8
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	f002 f926 	bl	8008e30 <__ratio>
 8006be4:	ec59 8b10 	vmov	r8, r9, d0
 8006be8:	ee10 0a10 	vmov	r0, s0
 8006bec:	2200      	movs	r2, #0
 8006bee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006bf2:	4649      	mov	r1, r9
 8006bf4:	f7f9 ff8c 	bl	8000b10 <__aeabi_dcmple>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d07c      	beq.n	8006cf6 <_strtod_l+0xa96>
 8006bfc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d04c      	beq.n	8006c9c <_strtod_l+0xa3c>
 8006c02:	4b95      	ldr	r3, [pc, #596]	; (8006e58 <_strtod_l+0xbf8>)
 8006c04:	2200      	movs	r2, #0
 8006c06:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006c0a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8006e58 <_strtod_l+0xbf8>
 8006c0e:	f04f 0800 	mov.w	r8, #0
 8006c12:	4b92      	ldr	r3, [pc, #584]	; (8006e5c <_strtod_l+0xbfc>)
 8006c14:	403b      	ands	r3, r7
 8006c16:	9311      	str	r3, [sp, #68]	; 0x44
 8006c18:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006c1a:	4b91      	ldr	r3, [pc, #580]	; (8006e60 <_strtod_l+0xc00>)
 8006c1c:	429a      	cmp	r2, r3
 8006c1e:	f040 80b2 	bne.w	8006d86 <_strtod_l+0xb26>
 8006c22:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006c26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c2a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006c2e:	ec4b ab10 	vmov	d0, sl, fp
 8006c32:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8006c36:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006c3a:	f002 f821 	bl	8008c80 <__ulp>
 8006c3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c42:	ec53 2b10 	vmov	r2, r3, d0
 8006c46:	f7f9 fce7 	bl	8000618 <__aeabi_dmul>
 8006c4a:	4652      	mov	r2, sl
 8006c4c:	465b      	mov	r3, fp
 8006c4e:	f7f9 fb2d 	bl	80002ac <__adddf3>
 8006c52:	460b      	mov	r3, r1
 8006c54:	4981      	ldr	r1, [pc, #516]	; (8006e5c <_strtod_l+0xbfc>)
 8006c56:	4a83      	ldr	r2, [pc, #524]	; (8006e64 <_strtod_l+0xc04>)
 8006c58:	4019      	ands	r1, r3
 8006c5a:	4291      	cmp	r1, r2
 8006c5c:	4682      	mov	sl, r0
 8006c5e:	d95e      	bls.n	8006d1e <_strtod_l+0xabe>
 8006c60:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006c62:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d103      	bne.n	8006c72 <_strtod_l+0xa12>
 8006c6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	f43f ad43 	beq.w	80066f8 <_strtod_l+0x498>
 8006c72:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8006e70 <_strtod_l+0xc10>
 8006c76:	f04f 3aff 	mov.w	sl, #4294967295
 8006c7a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f001 fcd3 	bl	8008628 <_Bfree>
 8006c82:	9907      	ldr	r1, [sp, #28]
 8006c84:	4620      	mov	r0, r4
 8006c86:	f001 fccf 	bl	8008628 <_Bfree>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4620      	mov	r0, r4
 8006c8e:	f001 fccb 	bl	8008628 <_Bfree>
 8006c92:	4629      	mov	r1, r5
 8006c94:	4620      	mov	r0, r4
 8006c96:	f001 fcc7 	bl	8008628 <_Bfree>
 8006c9a:	e613      	b.n	80068c4 <_strtod_l+0x664>
 8006c9c:	f1ba 0f00 	cmp.w	sl, #0
 8006ca0:	d11b      	bne.n	8006cda <_strtod_l+0xa7a>
 8006ca2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006ca6:	b9f3      	cbnz	r3, 8006ce6 <_strtod_l+0xa86>
 8006ca8:	4b6b      	ldr	r3, [pc, #428]	; (8006e58 <_strtod_l+0xbf8>)
 8006caa:	2200      	movs	r2, #0
 8006cac:	4640      	mov	r0, r8
 8006cae:	4649      	mov	r1, r9
 8006cb0:	f7f9 ff24 	bl	8000afc <__aeabi_dcmplt>
 8006cb4:	b9d0      	cbnz	r0, 8006cec <_strtod_l+0xa8c>
 8006cb6:	4640      	mov	r0, r8
 8006cb8:	4649      	mov	r1, r9
 8006cba:	4b6b      	ldr	r3, [pc, #428]	; (8006e68 <_strtod_l+0xc08>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f7f9 fcab 	bl	8000618 <__aeabi_dmul>
 8006cc2:	4680      	mov	r8, r0
 8006cc4:	4689      	mov	r9, r1
 8006cc6:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8006cca:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8006cce:	931b      	str	r3, [sp, #108]	; 0x6c
 8006cd0:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8006cd4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006cd8:	e79b      	b.n	8006c12 <_strtod_l+0x9b2>
 8006cda:	f1ba 0f01 	cmp.w	sl, #1
 8006cde:	d102      	bne.n	8006ce6 <_strtod_l+0xa86>
 8006ce0:	2f00      	cmp	r7, #0
 8006ce2:	f43f ad7e 	beq.w	80067e2 <_strtod_l+0x582>
 8006ce6:	4b61      	ldr	r3, [pc, #388]	; (8006e6c <_strtod_l+0xc0c>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	e78c      	b.n	8006c06 <_strtod_l+0x9a6>
 8006cec:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8006e68 <_strtod_l+0xc08>
 8006cf0:	f04f 0800 	mov.w	r8, #0
 8006cf4:	e7e7      	b.n	8006cc6 <_strtod_l+0xa66>
 8006cf6:	4b5c      	ldr	r3, [pc, #368]	; (8006e68 <_strtod_l+0xc08>)
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f7f9 fc8b 	bl	8000618 <__aeabi_dmul>
 8006d02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006d04:	4680      	mov	r8, r0
 8006d06:	4689      	mov	r9, r1
 8006d08:	b933      	cbnz	r3, 8006d18 <_strtod_l+0xab8>
 8006d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006d0e:	9012      	str	r0, [sp, #72]	; 0x48
 8006d10:	9313      	str	r3, [sp, #76]	; 0x4c
 8006d12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8006d16:	e7dd      	b.n	8006cd4 <_strtod_l+0xa74>
 8006d18:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8006d1c:	e7f9      	b.n	8006d12 <_strtod_l+0xab2>
 8006d1e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006d22:	9b04      	ldr	r3, [sp, #16]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1a8      	bne.n	8006c7a <_strtod_l+0xa1a>
 8006d28:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006d2c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006d2e:	0d1b      	lsrs	r3, r3, #20
 8006d30:	051b      	lsls	r3, r3, #20
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d1a1      	bne.n	8006c7a <_strtod_l+0xa1a>
 8006d36:	4640      	mov	r0, r8
 8006d38:	4649      	mov	r1, r9
 8006d3a:	f7f9 ffcd 	bl	8000cd8 <__aeabi_d2lz>
 8006d3e:	f7f9 fc3d 	bl	80005bc <__aeabi_l2d>
 8006d42:	4602      	mov	r2, r0
 8006d44:	460b      	mov	r3, r1
 8006d46:	4640      	mov	r0, r8
 8006d48:	4649      	mov	r1, r9
 8006d4a:	f7f9 faad 	bl	80002a8 <__aeabi_dsub>
 8006d4e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006d50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006d54:	ea43 030a 	orr.w	r3, r3, sl
 8006d58:	4313      	orrs	r3, r2
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	4689      	mov	r9, r1
 8006d5e:	d053      	beq.n	8006e08 <_strtod_l+0xba8>
 8006d60:	a335      	add	r3, pc, #212	; (adr r3, 8006e38 <_strtod_l+0xbd8>)
 8006d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d66:	f7f9 fec9 	bl	8000afc <__aeabi_dcmplt>
 8006d6a:	2800      	cmp	r0, #0
 8006d6c:	f47f acce 	bne.w	800670c <_strtod_l+0x4ac>
 8006d70:	a333      	add	r3, pc, #204	; (adr r3, 8006e40 <_strtod_l+0xbe0>)
 8006d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d76:	4640      	mov	r0, r8
 8006d78:	4649      	mov	r1, r9
 8006d7a:	f7f9 fedd 	bl	8000b38 <__aeabi_dcmpgt>
 8006d7e:	2800      	cmp	r0, #0
 8006d80:	f43f af7b 	beq.w	8006c7a <_strtod_l+0xa1a>
 8006d84:	e4c2      	b.n	800670c <_strtod_l+0x4ac>
 8006d86:	9b04      	ldr	r3, [sp, #16]
 8006d88:	b333      	cbz	r3, 8006dd8 <_strtod_l+0xb78>
 8006d8a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006d8c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006d90:	d822      	bhi.n	8006dd8 <_strtod_l+0xb78>
 8006d92:	a32d      	add	r3, pc, #180	; (adr r3, 8006e48 <_strtod_l+0xbe8>)
 8006d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d98:	4640      	mov	r0, r8
 8006d9a:	4649      	mov	r1, r9
 8006d9c:	f7f9 feb8 	bl	8000b10 <__aeabi_dcmple>
 8006da0:	b1a0      	cbz	r0, 8006dcc <_strtod_l+0xb6c>
 8006da2:	4649      	mov	r1, r9
 8006da4:	4640      	mov	r0, r8
 8006da6:	f7f9 ff0f 	bl	8000bc8 <__aeabi_d2uiz>
 8006daa:	2801      	cmp	r0, #1
 8006dac:	bf38      	it	cc
 8006dae:	2001      	movcc	r0, #1
 8006db0:	f7f9 fbb8 	bl	8000524 <__aeabi_ui2d>
 8006db4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006db6:	4680      	mov	r8, r0
 8006db8:	4689      	mov	r9, r1
 8006dba:	bb13      	cbnz	r3, 8006e02 <_strtod_l+0xba2>
 8006dbc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006dc0:	9014      	str	r0, [sp, #80]	; 0x50
 8006dc2:	9315      	str	r3, [sp, #84]	; 0x54
 8006dc4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006dc8:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8006dcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006dce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006dd0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006dd4:	1a9b      	subs	r3, r3, r2
 8006dd6:	930d      	str	r3, [sp, #52]	; 0x34
 8006dd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006ddc:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8006de0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8006de4:	f001 ff4c 	bl	8008c80 <__ulp>
 8006de8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006dec:	ec53 2b10 	vmov	r2, r3, d0
 8006df0:	f7f9 fc12 	bl	8000618 <__aeabi_dmul>
 8006df4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8006df8:	f7f9 fa58 	bl	80002ac <__adddf3>
 8006dfc:	4682      	mov	sl, r0
 8006dfe:	468b      	mov	fp, r1
 8006e00:	e78f      	b.n	8006d22 <_strtod_l+0xac2>
 8006e02:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8006e06:	e7dd      	b.n	8006dc4 <_strtod_l+0xb64>
 8006e08:	a311      	add	r3, pc, #68	; (adr r3, 8006e50 <_strtod_l+0xbf0>)
 8006e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e0e:	f7f9 fe75 	bl	8000afc <__aeabi_dcmplt>
 8006e12:	e7b4      	b.n	8006d7e <_strtod_l+0xb1e>
 8006e14:	2300      	movs	r3, #0
 8006e16:	930e      	str	r3, [sp, #56]	; 0x38
 8006e18:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006e1a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006e1c:	6013      	str	r3, [r2, #0]
 8006e1e:	f7ff ba65 	b.w	80062ec <_strtod_l+0x8c>
 8006e22:	2b65      	cmp	r3, #101	; 0x65
 8006e24:	f43f ab5d 	beq.w	80064e2 <_strtod_l+0x282>
 8006e28:	2b45      	cmp	r3, #69	; 0x45
 8006e2a:	f43f ab5a 	beq.w	80064e2 <_strtod_l+0x282>
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f7ff bb92 	b.w	8006558 <_strtod_l+0x2f8>
 8006e34:	f3af 8000 	nop.w
 8006e38:	94a03595 	.word	0x94a03595
 8006e3c:	3fdfffff 	.word	0x3fdfffff
 8006e40:	35afe535 	.word	0x35afe535
 8006e44:	3fe00000 	.word	0x3fe00000
 8006e48:	ffc00000 	.word	0xffc00000
 8006e4c:	41dfffff 	.word	0x41dfffff
 8006e50:	94a03595 	.word	0x94a03595
 8006e54:	3fcfffff 	.word	0x3fcfffff
 8006e58:	3ff00000 	.word	0x3ff00000
 8006e5c:	7ff00000 	.word	0x7ff00000
 8006e60:	7fe00000 	.word	0x7fe00000
 8006e64:	7c9fffff 	.word	0x7c9fffff
 8006e68:	3fe00000 	.word	0x3fe00000
 8006e6c:	bff00000 	.word	0xbff00000
 8006e70:	7fefffff 	.word	0x7fefffff

08006e74 <_strtod_r>:
 8006e74:	4b01      	ldr	r3, [pc, #4]	; (8006e7c <_strtod_r+0x8>)
 8006e76:	f7ff b9f3 	b.w	8006260 <_strtod_l>
 8006e7a:	bf00      	nop
 8006e7c:	20000074 	.word	0x20000074

08006e80 <_strtol_l.isra.0>:
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e86:	d001      	beq.n	8006e8c <_strtol_l.isra.0+0xc>
 8006e88:	2b24      	cmp	r3, #36	; 0x24
 8006e8a:	d906      	bls.n	8006e9a <_strtol_l.isra.0+0x1a>
 8006e8c:	f7fe fae2 	bl	8005454 <__errno>
 8006e90:	2316      	movs	r3, #22
 8006e92:	6003      	str	r3, [r0, #0]
 8006e94:	2000      	movs	r0, #0
 8006e96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e9a:	4f3a      	ldr	r7, [pc, #232]	; (8006f84 <_strtol_l.isra.0+0x104>)
 8006e9c:	468e      	mov	lr, r1
 8006e9e:	4676      	mov	r6, lr
 8006ea0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006ea4:	5de5      	ldrb	r5, [r4, r7]
 8006ea6:	f015 0508 	ands.w	r5, r5, #8
 8006eaa:	d1f8      	bne.n	8006e9e <_strtol_l.isra.0+0x1e>
 8006eac:	2c2d      	cmp	r4, #45	; 0x2d
 8006eae:	d134      	bne.n	8006f1a <_strtol_l.isra.0+0x9a>
 8006eb0:	f89e 4000 	ldrb.w	r4, [lr]
 8006eb4:	f04f 0801 	mov.w	r8, #1
 8006eb8:	f106 0e02 	add.w	lr, r6, #2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d05c      	beq.n	8006f7a <_strtol_l.isra.0+0xfa>
 8006ec0:	2b10      	cmp	r3, #16
 8006ec2:	d10c      	bne.n	8006ede <_strtol_l.isra.0+0x5e>
 8006ec4:	2c30      	cmp	r4, #48	; 0x30
 8006ec6:	d10a      	bne.n	8006ede <_strtol_l.isra.0+0x5e>
 8006ec8:	f89e 4000 	ldrb.w	r4, [lr]
 8006ecc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006ed0:	2c58      	cmp	r4, #88	; 0x58
 8006ed2:	d14d      	bne.n	8006f70 <_strtol_l.isra.0+0xf0>
 8006ed4:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8006ed8:	2310      	movs	r3, #16
 8006eda:	f10e 0e02 	add.w	lr, lr, #2
 8006ede:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8006ee2:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006ee6:	2600      	movs	r6, #0
 8006ee8:	fbbc f9f3 	udiv	r9, ip, r3
 8006eec:	4635      	mov	r5, r6
 8006eee:	fb03 ca19 	mls	sl, r3, r9, ip
 8006ef2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8006ef6:	2f09      	cmp	r7, #9
 8006ef8:	d818      	bhi.n	8006f2c <_strtol_l.isra.0+0xac>
 8006efa:	463c      	mov	r4, r7
 8006efc:	42a3      	cmp	r3, r4
 8006efe:	dd24      	ble.n	8006f4a <_strtol_l.isra.0+0xca>
 8006f00:	2e00      	cmp	r6, #0
 8006f02:	db1f      	blt.n	8006f44 <_strtol_l.isra.0+0xc4>
 8006f04:	45a9      	cmp	r9, r5
 8006f06:	d31d      	bcc.n	8006f44 <_strtol_l.isra.0+0xc4>
 8006f08:	d101      	bne.n	8006f0e <_strtol_l.isra.0+0x8e>
 8006f0a:	45a2      	cmp	sl, r4
 8006f0c:	db1a      	blt.n	8006f44 <_strtol_l.isra.0+0xc4>
 8006f0e:	fb05 4503 	mla	r5, r5, r3, r4
 8006f12:	2601      	movs	r6, #1
 8006f14:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8006f18:	e7eb      	b.n	8006ef2 <_strtol_l.isra.0+0x72>
 8006f1a:	2c2b      	cmp	r4, #43	; 0x2b
 8006f1c:	bf08      	it	eq
 8006f1e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8006f22:	46a8      	mov	r8, r5
 8006f24:	bf08      	it	eq
 8006f26:	f106 0e02 	addeq.w	lr, r6, #2
 8006f2a:	e7c7      	b.n	8006ebc <_strtol_l.isra.0+0x3c>
 8006f2c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8006f30:	2f19      	cmp	r7, #25
 8006f32:	d801      	bhi.n	8006f38 <_strtol_l.isra.0+0xb8>
 8006f34:	3c37      	subs	r4, #55	; 0x37
 8006f36:	e7e1      	b.n	8006efc <_strtol_l.isra.0+0x7c>
 8006f38:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8006f3c:	2f19      	cmp	r7, #25
 8006f3e:	d804      	bhi.n	8006f4a <_strtol_l.isra.0+0xca>
 8006f40:	3c57      	subs	r4, #87	; 0x57
 8006f42:	e7db      	b.n	8006efc <_strtol_l.isra.0+0x7c>
 8006f44:	f04f 36ff 	mov.w	r6, #4294967295
 8006f48:	e7e4      	b.n	8006f14 <_strtol_l.isra.0+0x94>
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	da05      	bge.n	8006f5a <_strtol_l.isra.0+0xda>
 8006f4e:	2322      	movs	r3, #34	; 0x22
 8006f50:	6003      	str	r3, [r0, #0]
 8006f52:	4665      	mov	r5, ip
 8006f54:	b942      	cbnz	r2, 8006f68 <_strtol_l.isra.0+0xe8>
 8006f56:	4628      	mov	r0, r5
 8006f58:	e79d      	b.n	8006e96 <_strtol_l.isra.0+0x16>
 8006f5a:	f1b8 0f00 	cmp.w	r8, #0
 8006f5e:	d000      	beq.n	8006f62 <_strtol_l.isra.0+0xe2>
 8006f60:	426d      	negs	r5, r5
 8006f62:	2a00      	cmp	r2, #0
 8006f64:	d0f7      	beq.n	8006f56 <_strtol_l.isra.0+0xd6>
 8006f66:	b10e      	cbz	r6, 8006f6c <_strtol_l.isra.0+0xec>
 8006f68:	f10e 31ff 	add.w	r1, lr, #4294967295
 8006f6c:	6011      	str	r1, [r2, #0]
 8006f6e:	e7f2      	b.n	8006f56 <_strtol_l.isra.0+0xd6>
 8006f70:	2430      	movs	r4, #48	; 0x30
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1b3      	bne.n	8006ede <_strtol_l.isra.0+0x5e>
 8006f76:	2308      	movs	r3, #8
 8006f78:	e7b1      	b.n	8006ede <_strtol_l.isra.0+0x5e>
 8006f7a:	2c30      	cmp	r4, #48	; 0x30
 8006f7c:	d0a4      	beq.n	8006ec8 <_strtol_l.isra.0+0x48>
 8006f7e:	230a      	movs	r3, #10
 8006f80:	e7ad      	b.n	8006ede <_strtol_l.isra.0+0x5e>
 8006f82:	bf00      	nop
 8006f84:	08009e21 	.word	0x08009e21

08006f88 <_strtol_r>:
 8006f88:	f7ff bf7a 	b.w	8006e80 <_strtol_l.isra.0>

08006f8c <quorem>:
 8006f8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f90:	6903      	ldr	r3, [r0, #16]
 8006f92:	690c      	ldr	r4, [r1, #16]
 8006f94:	42a3      	cmp	r3, r4
 8006f96:	4607      	mov	r7, r0
 8006f98:	f2c0 8081 	blt.w	800709e <quorem+0x112>
 8006f9c:	3c01      	subs	r4, #1
 8006f9e:	f101 0814 	add.w	r8, r1, #20
 8006fa2:	f100 0514 	add.w	r5, r0, #20
 8006fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006fbc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fc0:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fc4:	d331      	bcc.n	800702a <quorem+0x9e>
 8006fc6:	f04f 0e00 	mov.w	lr, #0
 8006fca:	4640      	mov	r0, r8
 8006fcc:	46ac      	mov	ip, r5
 8006fce:	46f2      	mov	sl, lr
 8006fd0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006fd4:	b293      	uxth	r3, r2
 8006fd6:	fb06 e303 	mla	r3, r6, r3, lr
 8006fda:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006fde:	b29b      	uxth	r3, r3
 8006fe0:	ebaa 0303 	sub.w	r3, sl, r3
 8006fe4:	0c12      	lsrs	r2, r2, #16
 8006fe6:	f8dc a000 	ldr.w	sl, [ip]
 8006fea:	fb06 e202 	mla	r2, r6, r2, lr
 8006fee:	fa13 f38a 	uxtah	r3, r3, sl
 8006ff2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ff6:	fa1f fa82 	uxth.w	sl, r2
 8006ffa:	f8dc 2000 	ldr.w	r2, [ip]
 8006ffe:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8007002:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007006:	b29b      	uxth	r3, r3
 8007008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800700c:	4581      	cmp	r9, r0
 800700e:	f84c 3b04 	str.w	r3, [ip], #4
 8007012:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007016:	d2db      	bcs.n	8006fd0 <quorem+0x44>
 8007018:	f855 300b 	ldr.w	r3, [r5, fp]
 800701c:	b92b      	cbnz	r3, 800702a <quorem+0x9e>
 800701e:	9b01      	ldr	r3, [sp, #4]
 8007020:	3b04      	subs	r3, #4
 8007022:	429d      	cmp	r5, r3
 8007024:	461a      	mov	r2, r3
 8007026:	d32e      	bcc.n	8007086 <quorem+0xfa>
 8007028:	613c      	str	r4, [r7, #16]
 800702a:	4638      	mov	r0, r7
 800702c:	f001 fd84 	bl	8008b38 <__mcmp>
 8007030:	2800      	cmp	r0, #0
 8007032:	db24      	blt.n	800707e <quorem+0xf2>
 8007034:	3601      	adds	r6, #1
 8007036:	4628      	mov	r0, r5
 8007038:	f04f 0c00 	mov.w	ip, #0
 800703c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007040:	f8d0 e000 	ldr.w	lr, [r0]
 8007044:	b293      	uxth	r3, r2
 8007046:	ebac 0303 	sub.w	r3, ip, r3
 800704a:	0c12      	lsrs	r2, r2, #16
 800704c:	fa13 f38e 	uxtah	r3, r3, lr
 8007050:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007054:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007058:	b29b      	uxth	r3, r3
 800705a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800705e:	45c1      	cmp	r9, r8
 8007060:	f840 3b04 	str.w	r3, [r0], #4
 8007064:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007068:	d2e8      	bcs.n	800703c <quorem+0xb0>
 800706a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800706e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007072:	b922      	cbnz	r2, 800707e <quorem+0xf2>
 8007074:	3b04      	subs	r3, #4
 8007076:	429d      	cmp	r5, r3
 8007078:	461a      	mov	r2, r3
 800707a:	d30a      	bcc.n	8007092 <quorem+0x106>
 800707c:	613c      	str	r4, [r7, #16]
 800707e:	4630      	mov	r0, r6
 8007080:	b003      	add	sp, #12
 8007082:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	3b04      	subs	r3, #4
 800708a:	2a00      	cmp	r2, #0
 800708c:	d1cc      	bne.n	8007028 <quorem+0x9c>
 800708e:	3c01      	subs	r4, #1
 8007090:	e7c7      	b.n	8007022 <quorem+0x96>
 8007092:	6812      	ldr	r2, [r2, #0]
 8007094:	3b04      	subs	r3, #4
 8007096:	2a00      	cmp	r2, #0
 8007098:	d1f0      	bne.n	800707c <quorem+0xf0>
 800709a:	3c01      	subs	r4, #1
 800709c:	e7eb      	b.n	8007076 <quorem+0xea>
 800709e:	2000      	movs	r0, #0
 80070a0:	e7ee      	b.n	8007080 <quorem+0xf4>
 80070a2:	0000      	movs	r0, r0
 80070a4:	0000      	movs	r0, r0
	...

080070a8 <_dtoa_r>:
 80070a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ac:	ed2d 8b02 	vpush	{d8}
 80070b0:	ec57 6b10 	vmov	r6, r7, d0
 80070b4:	b095      	sub	sp, #84	; 0x54
 80070b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80070b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80070bc:	9105      	str	r1, [sp, #20]
 80070be:	e9cd 6702 	strd	r6, r7, [sp, #8]
 80070c2:	4604      	mov	r4, r0
 80070c4:	9209      	str	r2, [sp, #36]	; 0x24
 80070c6:	930f      	str	r3, [sp, #60]	; 0x3c
 80070c8:	b975      	cbnz	r5, 80070e8 <_dtoa_r+0x40>
 80070ca:	2010      	movs	r0, #16
 80070cc:	f001 fa44 	bl	8008558 <malloc>
 80070d0:	4602      	mov	r2, r0
 80070d2:	6260      	str	r0, [r4, #36]	; 0x24
 80070d4:	b920      	cbnz	r0, 80070e0 <_dtoa_r+0x38>
 80070d6:	4bb2      	ldr	r3, [pc, #712]	; (80073a0 <_dtoa_r+0x2f8>)
 80070d8:	21ea      	movs	r1, #234	; 0xea
 80070da:	48b2      	ldr	r0, [pc, #712]	; (80073a4 <_dtoa_r+0x2fc>)
 80070dc:	f002 fbde 	bl	800989c <__assert_func>
 80070e0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80070e4:	6005      	str	r5, [r0, #0]
 80070e6:	60c5      	str	r5, [r0, #12]
 80070e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80070ea:	6819      	ldr	r1, [r3, #0]
 80070ec:	b151      	cbz	r1, 8007104 <_dtoa_r+0x5c>
 80070ee:	685a      	ldr	r2, [r3, #4]
 80070f0:	604a      	str	r2, [r1, #4]
 80070f2:	2301      	movs	r3, #1
 80070f4:	4093      	lsls	r3, r2
 80070f6:	608b      	str	r3, [r1, #8]
 80070f8:	4620      	mov	r0, r4
 80070fa:	f001 fa95 	bl	8008628 <_Bfree>
 80070fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007100:	2200      	movs	r2, #0
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	1e3b      	subs	r3, r7, #0
 8007106:	bfb9      	ittee	lt
 8007108:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800710c:	9303      	strlt	r3, [sp, #12]
 800710e:	2300      	movge	r3, #0
 8007110:	f8c8 3000 	strge.w	r3, [r8]
 8007114:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8007118:	4ba3      	ldr	r3, [pc, #652]	; (80073a8 <_dtoa_r+0x300>)
 800711a:	bfbc      	itt	lt
 800711c:	2201      	movlt	r2, #1
 800711e:	f8c8 2000 	strlt.w	r2, [r8]
 8007122:	ea33 0309 	bics.w	r3, r3, r9
 8007126:	d11b      	bne.n	8007160 <_dtoa_r+0xb8>
 8007128:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800712a:	f242 730f 	movw	r3, #9999	; 0x270f
 800712e:	6013      	str	r3, [r2, #0]
 8007130:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007134:	4333      	orrs	r3, r6
 8007136:	f000 857a 	beq.w	8007c2e <_dtoa_r+0xb86>
 800713a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800713c:	b963      	cbnz	r3, 8007158 <_dtoa_r+0xb0>
 800713e:	4b9b      	ldr	r3, [pc, #620]	; (80073ac <_dtoa_r+0x304>)
 8007140:	e024      	b.n	800718c <_dtoa_r+0xe4>
 8007142:	4b9b      	ldr	r3, [pc, #620]	; (80073b0 <_dtoa_r+0x308>)
 8007144:	9300      	str	r3, [sp, #0]
 8007146:	3308      	adds	r3, #8
 8007148:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	9800      	ldr	r0, [sp, #0]
 800714e:	b015      	add	sp, #84	; 0x54
 8007150:	ecbd 8b02 	vpop	{d8}
 8007154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007158:	4b94      	ldr	r3, [pc, #592]	; (80073ac <_dtoa_r+0x304>)
 800715a:	9300      	str	r3, [sp, #0]
 800715c:	3303      	adds	r3, #3
 800715e:	e7f3      	b.n	8007148 <_dtoa_r+0xa0>
 8007160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007164:	2200      	movs	r2, #0
 8007166:	ec51 0b17 	vmov	r0, r1, d7
 800716a:	2300      	movs	r3, #0
 800716c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8007170:	f7f9 fcba 	bl	8000ae8 <__aeabi_dcmpeq>
 8007174:	4680      	mov	r8, r0
 8007176:	b158      	cbz	r0, 8007190 <_dtoa_r+0xe8>
 8007178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800717a:	2301      	movs	r3, #1
 800717c:	6013      	str	r3, [r2, #0]
 800717e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007180:	2b00      	cmp	r3, #0
 8007182:	f000 8551 	beq.w	8007c28 <_dtoa_r+0xb80>
 8007186:	488b      	ldr	r0, [pc, #556]	; (80073b4 <_dtoa_r+0x30c>)
 8007188:	6018      	str	r0, [r3, #0]
 800718a:	1e43      	subs	r3, r0, #1
 800718c:	9300      	str	r3, [sp, #0]
 800718e:	e7dd      	b.n	800714c <_dtoa_r+0xa4>
 8007190:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8007194:	aa12      	add	r2, sp, #72	; 0x48
 8007196:	a913      	add	r1, sp, #76	; 0x4c
 8007198:	4620      	mov	r0, r4
 800719a:	f001 fded 	bl	8008d78 <__d2b>
 800719e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80071a2:	4683      	mov	fp, r0
 80071a4:	2d00      	cmp	r5, #0
 80071a6:	d07c      	beq.n	80072a2 <_dtoa_r+0x1fa>
 80071a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071aa:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80071ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80071b2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80071b6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80071ba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80071be:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80071c2:	4b7d      	ldr	r3, [pc, #500]	; (80073b8 <_dtoa_r+0x310>)
 80071c4:	2200      	movs	r2, #0
 80071c6:	4630      	mov	r0, r6
 80071c8:	4639      	mov	r1, r7
 80071ca:	f7f9 f86d 	bl	80002a8 <__aeabi_dsub>
 80071ce:	a36e      	add	r3, pc, #440	; (adr r3, 8007388 <_dtoa_r+0x2e0>)
 80071d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071d4:	f7f9 fa20 	bl	8000618 <__aeabi_dmul>
 80071d8:	a36d      	add	r3, pc, #436	; (adr r3, 8007390 <_dtoa_r+0x2e8>)
 80071da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071de:	f7f9 f865 	bl	80002ac <__adddf3>
 80071e2:	4606      	mov	r6, r0
 80071e4:	4628      	mov	r0, r5
 80071e6:	460f      	mov	r7, r1
 80071e8:	f7f9 f9ac 	bl	8000544 <__aeabi_i2d>
 80071ec:	a36a      	add	r3, pc, #424	; (adr r3, 8007398 <_dtoa_r+0x2f0>)
 80071ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071f2:	f7f9 fa11 	bl	8000618 <__aeabi_dmul>
 80071f6:	4602      	mov	r2, r0
 80071f8:	460b      	mov	r3, r1
 80071fa:	4630      	mov	r0, r6
 80071fc:	4639      	mov	r1, r7
 80071fe:	f7f9 f855 	bl	80002ac <__adddf3>
 8007202:	4606      	mov	r6, r0
 8007204:	460f      	mov	r7, r1
 8007206:	f7f9 fcb7 	bl	8000b78 <__aeabi_d2iz>
 800720a:	2200      	movs	r2, #0
 800720c:	4682      	mov	sl, r0
 800720e:	2300      	movs	r3, #0
 8007210:	4630      	mov	r0, r6
 8007212:	4639      	mov	r1, r7
 8007214:	f7f9 fc72 	bl	8000afc <__aeabi_dcmplt>
 8007218:	b148      	cbz	r0, 800722e <_dtoa_r+0x186>
 800721a:	4650      	mov	r0, sl
 800721c:	f7f9 f992 	bl	8000544 <__aeabi_i2d>
 8007220:	4632      	mov	r2, r6
 8007222:	463b      	mov	r3, r7
 8007224:	f7f9 fc60 	bl	8000ae8 <__aeabi_dcmpeq>
 8007228:	b908      	cbnz	r0, 800722e <_dtoa_r+0x186>
 800722a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800722e:	f1ba 0f16 	cmp.w	sl, #22
 8007232:	d854      	bhi.n	80072de <_dtoa_r+0x236>
 8007234:	4b61      	ldr	r3, [pc, #388]	; (80073bc <_dtoa_r+0x314>)
 8007236:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800723a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800723e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007242:	f7f9 fc5b 	bl	8000afc <__aeabi_dcmplt>
 8007246:	2800      	cmp	r0, #0
 8007248:	d04b      	beq.n	80072e2 <_dtoa_r+0x23a>
 800724a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800724e:	2300      	movs	r3, #0
 8007250:	930e      	str	r3, [sp, #56]	; 0x38
 8007252:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007254:	1b5d      	subs	r5, r3, r5
 8007256:	1e6b      	subs	r3, r5, #1
 8007258:	9304      	str	r3, [sp, #16]
 800725a:	bf43      	ittte	mi
 800725c:	2300      	movmi	r3, #0
 800725e:	f1c5 0801 	rsbmi	r8, r5, #1
 8007262:	9304      	strmi	r3, [sp, #16]
 8007264:	f04f 0800 	movpl.w	r8, #0
 8007268:	f1ba 0f00 	cmp.w	sl, #0
 800726c:	db3b      	blt.n	80072e6 <_dtoa_r+0x23e>
 800726e:	9b04      	ldr	r3, [sp, #16]
 8007270:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8007274:	4453      	add	r3, sl
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	2300      	movs	r3, #0
 800727a:	9306      	str	r3, [sp, #24]
 800727c:	9b05      	ldr	r3, [sp, #20]
 800727e:	2b09      	cmp	r3, #9
 8007280:	d869      	bhi.n	8007356 <_dtoa_r+0x2ae>
 8007282:	2b05      	cmp	r3, #5
 8007284:	bfc4      	itt	gt
 8007286:	3b04      	subgt	r3, #4
 8007288:	9305      	strgt	r3, [sp, #20]
 800728a:	9b05      	ldr	r3, [sp, #20]
 800728c:	f1a3 0302 	sub.w	r3, r3, #2
 8007290:	bfcc      	ite	gt
 8007292:	2500      	movgt	r5, #0
 8007294:	2501      	movle	r5, #1
 8007296:	2b03      	cmp	r3, #3
 8007298:	d869      	bhi.n	800736e <_dtoa_r+0x2c6>
 800729a:	e8df f003 	tbb	[pc, r3]
 800729e:	4e2c      	.short	0x4e2c
 80072a0:	5a4c      	.short	0x5a4c
 80072a2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80072a6:	441d      	add	r5, r3
 80072a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80072ac:	2b20      	cmp	r3, #32
 80072ae:	bfc1      	itttt	gt
 80072b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80072b4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80072b8:	fa09 f303 	lslgt.w	r3, r9, r3
 80072bc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80072c0:	bfda      	itte	le
 80072c2:	f1c3 0320 	rsble	r3, r3, #32
 80072c6:	fa06 f003 	lslle.w	r0, r6, r3
 80072ca:	4318      	orrgt	r0, r3
 80072cc:	f7f9 f92a 	bl	8000524 <__aeabi_ui2d>
 80072d0:	2301      	movs	r3, #1
 80072d2:	4606      	mov	r6, r0
 80072d4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80072d8:	3d01      	subs	r5, #1
 80072da:	9310      	str	r3, [sp, #64]	; 0x40
 80072dc:	e771      	b.n	80071c2 <_dtoa_r+0x11a>
 80072de:	2301      	movs	r3, #1
 80072e0:	e7b6      	b.n	8007250 <_dtoa_r+0x1a8>
 80072e2:	900e      	str	r0, [sp, #56]	; 0x38
 80072e4:	e7b5      	b.n	8007252 <_dtoa_r+0x1aa>
 80072e6:	f1ca 0300 	rsb	r3, sl, #0
 80072ea:	9306      	str	r3, [sp, #24]
 80072ec:	2300      	movs	r3, #0
 80072ee:	eba8 080a 	sub.w	r8, r8, sl
 80072f2:	930d      	str	r3, [sp, #52]	; 0x34
 80072f4:	e7c2      	b.n	800727c <_dtoa_r+0x1d4>
 80072f6:	2300      	movs	r3, #0
 80072f8:	9308      	str	r3, [sp, #32]
 80072fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	dc39      	bgt.n	8007374 <_dtoa_r+0x2cc>
 8007300:	f04f 0901 	mov.w	r9, #1
 8007304:	f8cd 9004 	str.w	r9, [sp, #4]
 8007308:	464b      	mov	r3, r9
 800730a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800730e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007310:	2200      	movs	r2, #0
 8007312:	6042      	str	r2, [r0, #4]
 8007314:	2204      	movs	r2, #4
 8007316:	f102 0614 	add.w	r6, r2, #20
 800731a:	429e      	cmp	r6, r3
 800731c:	6841      	ldr	r1, [r0, #4]
 800731e:	d92f      	bls.n	8007380 <_dtoa_r+0x2d8>
 8007320:	4620      	mov	r0, r4
 8007322:	f001 f941 	bl	80085a8 <_Balloc>
 8007326:	9000      	str	r0, [sp, #0]
 8007328:	2800      	cmp	r0, #0
 800732a:	d14b      	bne.n	80073c4 <_dtoa_r+0x31c>
 800732c:	4b24      	ldr	r3, [pc, #144]	; (80073c0 <_dtoa_r+0x318>)
 800732e:	4602      	mov	r2, r0
 8007330:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007334:	e6d1      	b.n	80070da <_dtoa_r+0x32>
 8007336:	2301      	movs	r3, #1
 8007338:	e7de      	b.n	80072f8 <_dtoa_r+0x250>
 800733a:	2300      	movs	r3, #0
 800733c:	9308      	str	r3, [sp, #32]
 800733e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007340:	eb0a 0903 	add.w	r9, sl, r3
 8007344:	f109 0301 	add.w	r3, r9, #1
 8007348:	2b01      	cmp	r3, #1
 800734a:	9301      	str	r3, [sp, #4]
 800734c:	bfb8      	it	lt
 800734e:	2301      	movlt	r3, #1
 8007350:	e7dd      	b.n	800730e <_dtoa_r+0x266>
 8007352:	2301      	movs	r3, #1
 8007354:	e7f2      	b.n	800733c <_dtoa_r+0x294>
 8007356:	2501      	movs	r5, #1
 8007358:	2300      	movs	r3, #0
 800735a:	9305      	str	r3, [sp, #20]
 800735c:	9508      	str	r5, [sp, #32]
 800735e:	f04f 39ff 	mov.w	r9, #4294967295
 8007362:	2200      	movs	r2, #0
 8007364:	f8cd 9004 	str.w	r9, [sp, #4]
 8007368:	2312      	movs	r3, #18
 800736a:	9209      	str	r2, [sp, #36]	; 0x24
 800736c:	e7cf      	b.n	800730e <_dtoa_r+0x266>
 800736e:	2301      	movs	r3, #1
 8007370:	9308      	str	r3, [sp, #32]
 8007372:	e7f4      	b.n	800735e <_dtoa_r+0x2b6>
 8007374:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8007378:	f8cd 9004 	str.w	r9, [sp, #4]
 800737c:	464b      	mov	r3, r9
 800737e:	e7c6      	b.n	800730e <_dtoa_r+0x266>
 8007380:	3101      	adds	r1, #1
 8007382:	6041      	str	r1, [r0, #4]
 8007384:	0052      	lsls	r2, r2, #1
 8007386:	e7c6      	b.n	8007316 <_dtoa_r+0x26e>
 8007388:	636f4361 	.word	0x636f4361
 800738c:	3fd287a7 	.word	0x3fd287a7
 8007390:	8b60c8b3 	.word	0x8b60c8b3
 8007394:	3fc68a28 	.word	0x3fc68a28
 8007398:	509f79fb 	.word	0x509f79fb
 800739c:	3fd34413 	.word	0x3fd34413
 80073a0:	08009f2e 	.word	0x08009f2e
 80073a4:	08009f45 	.word	0x08009f45
 80073a8:	7ff00000 	.word	0x7ff00000
 80073ac:	08009f2a 	.word	0x08009f2a
 80073b0:	08009f21 	.word	0x08009f21
 80073b4:	08009da5 	.word	0x08009da5
 80073b8:	3ff80000 	.word	0x3ff80000
 80073bc:	0800a120 	.word	0x0800a120
 80073c0:	08009fa4 	.word	0x08009fa4
 80073c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80073c6:	9a00      	ldr	r2, [sp, #0]
 80073c8:	601a      	str	r2, [r3, #0]
 80073ca:	9b01      	ldr	r3, [sp, #4]
 80073cc:	2b0e      	cmp	r3, #14
 80073ce:	f200 80ad 	bhi.w	800752c <_dtoa_r+0x484>
 80073d2:	2d00      	cmp	r5, #0
 80073d4:	f000 80aa 	beq.w	800752c <_dtoa_r+0x484>
 80073d8:	f1ba 0f00 	cmp.w	sl, #0
 80073dc:	dd36      	ble.n	800744c <_dtoa_r+0x3a4>
 80073de:	4ac3      	ldr	r2, [pc, #780]	; (80076ec <_dtoa_r+0x644>)
 80073e0:	f00a 030f 	and.w	r3, sl, #15
 80073e4:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80073e8:	ed93 7b00 	vldr	d7, [r3]
 80073ec:	f41a 7f80 	tst.w	sl, #256	; 0x100
 80073f0:	ea4f 172a 	mov.w	r7, sl, asr #4
 80073f4:	eeb0 8a47 	vmov.f32	s16, s14
 80073f8:	eef0 8a67 	vmov.f32	s17, s15
 80073fc:	d016      	beq.n	800742c <_dtoa_r+0x384>
 80073fe:	4bbc      	ldr	r3, [pc, #752]	; (80076f0 <_dtoa_r+0x648>)
 8007400:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007404:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007408:	f7f9 fa30 	bl	800086c <__aeabi_ddiv>
 800740c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007410:	f007 070f 	and.w	r7, r7, #15
 8007414:	2503      	movs	r5, #3
 8007416:	4eb6      	ldr	r6, [pc, #728]	; (80076f0 <_dtoa_r+0x648>)
 8007418:	b957      	cbnz	r7, 8007430 <_dtoa_r+0x388>
 800741a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741e:	ec53 2b18 	vmov	r2, r3, d8
 8007422:	f7f9 fa23 	bl	800086c <__aeabi_ddiv>
 8007426:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800742a:	e029      	b.n	8007480 <_dtoa_r+0x3d8>
 800742c:	2502      	movs	r5, #2
 800742e:	e7f2      	b.n	8007416 <_dtoa_r+0x36e>
 8007430:	07f9      	lsls	r1, r7, #31
 8007432:	d508      	bpl.n	8007446 <_dtoa_r+0x39e>
 8007434:	ec51 0b18 	vmov	r0, r1, d8
 8007438:	e9d6 2300 	ldrd	r2, r3, [r6]
 800743c:	f7f9 f8ec 	bl	8000618 <__aeabi_dmul>
 8007440:	ec41 0b18 	vmov	d8, r0, r1
 8007444:	3501      	adds	r5, #1
 8007446:	107f      	asrs	r7, r7, #1
 8007448:	3608      	adds	r6, #8
 800744a:	e7e5      	b.n	8007418 <_dtoa_r+0x370>
 800744c:	f000 80a6 	beq.w	800759c <_dtoa_r+0x4f4>
 8007450:	f1ca 0600 	rsb	r6, sl, #0
 8007454:	4ba5      	ldr	r3, [pc, #660]	; (80076ec <_dtoa_r+0x644>)
 8007456:	4fa6      	ldr	r7, [pc, #664]	; (80076f0 <_dtoa_r+0x648>)
 8007458:	f006 020f 	and.w	r2, r6, #15
 800745c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007464:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007468:	f7f9 f8d6 	bl	8000618 <__aeabi_dmul>
 800746c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007470:	1136      	asrs	r6, r6, #4
 8007472:	2300      	movs	r3, #0
 8007474:	2502      	movs	r5, #2
 8007476:	2e00      	cmp	r6, #0
 8007478:	f040 8085 	bne.w	8007586 <_dtoa_r+0x4de>
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1d2      	bne.n	8007426 <_dtoa_r+0x37e>
 8007480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007482:	2b00      	cmp	r3, #0
 8007484:	f000 808c 	beq.w	80075a0 <_dtoa_r+0x4f8>
 8007488:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800748c:	4b99      	ldr	r3, [pc, #612]	; (80076f4 <_dtoa_r+0x64c>)
 800748e:	2200      	movs	r2, #0
 8007490:	4630      	mov	r0, r6
 8007492:	4639      	mov	r1, r7
 8007494:	f7f9 fb32 	bl	8000afc <__aeabi_dcmplt>
 8007498:	2800      	cmp	r0, #0
 800749a:	f000 8081 	beq.w	80075a0 <_dtoa_r+0x4f8>
 800749e:	9b01      	ldr	r3, [sp, #4]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d07d      	beq.n	80075a0 <_dtoa_r+0x4f8>
 80074a4:	f1b9 0f00 	cmp.w	r9, #0
 80074a8:	dd3c      	ble.n	8007524 <_dtoa_r+0x47c>
 80074aa:	f10a 33ff 	add.w	r3, sl, #4294967295
 80074ae:	9307      	str	r3, [sp, #28]
 80074b0:	2200      	movs	r2, #0
 80074b2:	4b91      	ldr	r3, [pc, #580]	; (80076f8 <_dtoa_r+0x650>)
 80074b4:	4630      	mov	r0, r6
 80074b6:	4639      	mov	r1, r7
 80074b8:	f7f9 f8ae 	bl	8000618 <__aeabi_dmul>
 80074bc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074c0:	3501      	adds	r5, #1
 80074c2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80074c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074ca:	4628      	mov	r0, r5
 80074cc:	f7f9 f83a 	bl	8000544 <__aeabi_i2d>
 80074d0:	4632      	mov	r2, r6
 80074d2:	463b      	mov	r3, r7
 80074d4:	f7f9 f8a0 	bl	8000618 <__aeabi_dmul>
 80074d8:	4b88      	ldr	r3, [pc, #544]	; (80076fc <_dtoa_r+0x654>)
 80074da:	2200      	movs	r2, #0
 80074dc:	f7f8 fee6 	bl	80002ac <__adddf3>
 80074e0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 80074e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80074e8:	9303      	str	r3, [sp, #12]
 80074ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d15c      	bne.n	80075aa <_dtoa_r+0x502>
 80074f0:	4b83      	ldr	r3, [pc, #524]	; (8007700 <_dtoa_r+0x658>)
 80074f2:	2200      	movs	r2, #0
 80074f4:	4630      	mov	r0, r6
 80074f6:	4639      	mov	r1, r7
 80074f8:	f7f8 fed6 	bl	80002a8 <__aeabi_dsub>
 80074fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007500:	4606      	mov	r6, r0
 8007502:	460f      	mov	r7, r1
 8007504:	f7f9 fb18 	bl	8000b38 <__aeabi_dcmpgt>
 8007508:	2800      	cmp	r0, #0
 800750a:	f040 8296 	bne.w	8007a3a <_dtoa_r+0x992>
 800750e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8007512:	4630      	mov	r0, r6
 8007514:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007518:	4639      	mov	r1, r7
 800751a:	f7f9 faef 	bl	8000afc <__aeabi_dcmplt>
 800751e:	2800      	cmp	r0, #0
 8007520:	f040 8288 	bne.w	8007a34 <_dtoa_r+0x98c>
 8007524:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8007528:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800752c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800752e:	2b00      	cmp	r3, #0
 8007530:	f2c0 8158 	blt.w	80077e4 <_dtoa_r+0x73c>
 8007534:	f1ba 0f0e 	cmp.w	sl, #14
 8007538:	f300 8154 	bgt.w	80077e4 <_dtoa_r+0x73c>
 800753c:	4b6b      	ldr	r3, [pc, #428]	; (80076ec <_dtoa_r+0x644>)
 800753e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007542:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007546:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007548:	2b00      	cmp	r3, #0
 800754a:	f280 80e3 	bge.w	8007714 <_dtoa_r+0x66c>
 800754e:	9b01      	ldr	r3, [sp, #4]
 8007550:	2b00      	cmp	r3, #0
 8007552:	f300 80df 	bgt.w	8007714 <_dtoa_r+0x66c>
 8007556:	f040 826d 	bne.w	8007a34 <_dtoa_r+0x98c>
 800755a:	4b69      	ldr	r3, [pc, #420]	; (8007700 <_dtoa_r+0x658>)
 800755c:	2200      	movs	r2, #0
 800755e:	4640      	mov	r0, r8
 8007560:	4649      	mov	r1, r9
 8007562:	f7f9 f859 	bl	8000618 <__aeabi_dmul>
 8007566:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800756a:	f7f9 fadb 	bl	8000b24 <__aeabi_dcmpge>
 800756e:	9e01      	ldr	r6, [sp, #4]
 8007570:	4637      	mov	r7, r6
 8007572:	2800      	cmp	r0, #0
 8007574:	f040 8243 	bne.w	80079fe <_dtoa_r+0x956>
 8007578:	9d00      	ldr	r5, [sp, #0]
 800757a:	2331      	movs	r3, #49	; 0x31
 800757c:	f805 3b01 	strb.w	r3, [r5], #1
 8007580:	f10a 0a01 	add.w	sl, sl, #1
 8007584:	e23f      	b.n	8007a06 <_dtoa_r+0x95e>
 8007586:	07f2      	lsls	r2, r6, #31
 8007588:	d505      	bpl.n	8007596 <_dtoa_r+0x4ee>
 800758a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800758e:	f7f9 f843 	bl	8000618 <__aeabi_dmul>
 8007592:	3501      	adds	r5, #1
 8007594:	2301      	movs	r3, #1
 8007596:	1076      	asrs	r6, r6, #1
 8007598:	3708      	adds	r7, #8
 800759a:	e76c      	b.n	8007476 <_dtoa_r+0x3ce>
 800759c:	2502      	movs	r5, #2
 800759e:	e76f      	b.n	8007480 <_dtoa_r+0x3d8>
 80075a0:	9b01      	ldr	r3, [sp, #4]
 80075a2:	f8cd a01c 	str.w	sl, [sp, #28]
 80075a6:	930c      	str	r3, [sp, #48]	; 0x30
 80075a8:	e78d      	b.n	80074c6 <_dtoa_r+0x41e>
 80075aa:	9900      	ldr	r1, [sp, #0]
 80075ac:	980c      	ldr	r0, [sp, #48]	; 0x30
 80075ae:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075b0:	4b4e      	ldr	r3, [pc, #312]	; (80076ec <_dtoa_r+0x644>)
 80075b2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80075b6:	4401      	add	r1, r0
 80075b8:	9102      	str	r1, [sp, #8]
 80075ba:	9908      	ldr	r1, [sp, #32]
 80075bc:	eeb0 8a47 	vmov.f32	s16, s14
 80075c0:	eef0 8a67 	vmov.f32	s17, s15
 80075c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80075cc:	2900      	cmp	r1, #0
 80075ce:	d045      	beq.n	800765c <_dtoa_r+0x5b4>
 80075d0:	494c      	ldr	r1, [pc, #304]	; (8007704 <_dtoa_r+0x65c>)
 80075d2:	2000      	movs	r0, #0
 80075d4:	f7f9 f94a 	bl	800086c <__aeabi_ddiv>
 80075d8:	ec53 2b18 	vmov	r2, r3, d8
 80075dc:	f7f8 fe64 	bl	80002a8 <__aeabi_dsub>
 80075e0:	9d00      	ldr	r5, [sp, #0]
 80075e2:	ec41 0b18 	vmov	d8, r0, r1
 80075e6:	4639      	mov	r1, r7
 80075e8:	4630      	mov	r0, r6
 80075ea:	f7f9 fac5 	bl	8000b78 <__aeabi_d2iz>
 80075ee:	900c      	str	r0, [sp, #48]	; 0x30
 80075f0:	f7f8 ffa8 	bl	8000544 <__aeabi_i2d>
 80075f4:	4602      	mov	r2, r0
 80075f6:	460b      	mov	r3, r1
 80075f8:	4630      	mov	r0, r6
 80075fa:	4639      	mov	r1, r7
 80075fc:	f7f8 fe54 	bl	80002a8 <__aeabi_dsub>
 8007600:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007602:	3330      	adds	r3, #48	; 0x30
 8007604:	f805 3b01 	strb.w	r3, [r5], #1
 8007608:	ec53 2b18 	vmov	r2, r3, d8
 800760c:	4606      	mov	r6, r0
 800760e:	460f      	mov	r7, r1
 8007610:	f7f9 fa74 	bl	8000afc <__aeabi_dcmplt>
 8007614:	2800      	cmp	r0, #0
 8007616:	d165      	bne.n	80076e4 <_dtoa_r+0x63c>
 8007618:	4632      	mov	r2, r6
 800761a:	463b      	mov	r3, r7
 800761c:	4935      	ldr	r1, [pc, #212]	; (80076f4 <_dtoa_r+0x64c>)
 800761e:	2000      	movs	r0, #0
 8007620:	f7f8 fe42 	bl	80002a8 <__aeabi_dsub>
 8007624:	ec53 2b18 	vmov	r2, r3, d8
 8007628:	f7f9 fa68 	bl	8000afc <__aeabi_dcmplt>
 800762c:	2800      	cmp	r0, #0
 800762e:	f040 80b9 	bne.w	80077a4 <_dtoa_r+0x6fc>
 8007632:	9b02      	ldr	r3, [sp, #8]
 8007634:	429d      	cmp	r5, r3
 8007636:	f43f af75 	beq.w	8007524 <_dtoa_r+0x47c>
 800763a:	4b2f      	ldr	r3, [pc, #188]	; (80076f8 <_dtoa_r+0x650>)
 800763c:	ec51 0b18 	vmov	r0, r1, d8
 8007640:	2200      	movs	r2, #0
 8007642:	f7f8 ffe9 	bl	8000618 <__aeabi_dmul>
 8007646:	4b2c      	ldr	r3, [pc, #176]	; (80076f8 <_dtoa_r+0x650>)
 8007648:	ec41 0b18 	vmov	d8, r0, r1
 800764c:	2200      	movs	r2, #0
 800764e:	4630      	mov	r0, r6
 8007650:	4639      	mov	r1, r7
 8007652:	f7f8 ffe1 	bl	8000618 <__aeabi_dmul>
 8007656:	4606      	mov	r6, r0
 8007658:	460f      	mov	r7, r1
 800765a:	e7c4      	b.n	80075e6 <_dtoa_r+0x53e>
 800765c:	ec51 0b17 	vmov	r0, r1, d7
 8007660:	f7f8 ffda 	bl	8000618 <__aeabi_dmul>
 8007664:	9b02      	ldr	r3, [sp, #8]
 8007666:	9d00      	ldr	r5, [sp, #0]
 8007668:	930c      	str	r3, [sp, #48]	; 0x30
 800766a:	ec41 0b18 	vmov	d8, r0, r1
 800766e:	4639      	mov	r1, r7
 8007670:	4630      	mov	r0, r6
 8007672:	f7f9 fa81 	bl	8000b78 <__aeabi_d2iz>
 8007676:	9011      	str	r0, [sp, #68]	; 0x44
 8007678:	f7f8 ff64 	bl	8000544 <__aeabi_i2d>
 800767c:	4602      	mov	r2, r0
 800767e:	460b      	mov	r3, r1
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	f7f8 fe10 	bl	80002a8 <__aeabi_dsub>
 8007688:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800768a:	3330      	adds	r3, #48	; 0x30
 800768c:	f805 3b01 	strb.w	r3, [r5], #1
 8007690:	9b02      	ldr	r3, [sp, #8]
 8007692:	429d      	cmp	r5, r3
 8007694:	4606      	mov	r6, r0
 8007696:	460f      	mov	r7, r1
 8007698:	f04f 0200 	mov.w	r2, #0
 800769c:	d134      	bne.n	8007708 <_dtoa_r+0x660>
 800769e:	4b19      	ldr	r3, [pc, #100]	; (8007704 <_dtoa_r+0x65c>)
 80076a0:	ec51 0b18 	vmov	r0, r1, d8
 80076a4:	f7f8 fe02 	bl	80002ac <__adddf3>
 80076a8:	4602      	mov	r2, r0
 80076aa:	460b      	mov	r3, r1
 80076ac:	4630      	mov	r0, r6
 80076ae:	4639      	mov	r1, r7
 80076b0:	f7f9 fa42 	bl	8000b38 <__aeabi_dcmpgt>
 80076b4:	2800      	cmp	r0, #0
 80076b6:	d175      	bne.n	80077a4 <_dtoa_r+0x6fc>
 80076b8:	ec53 2b18 	vmov	r2, r3, d8
 80076bc:	4911      	ldr	r1, [pc, #68]	; (8007704 <_dtoa_r+0x65c>)
 80076be:	2000      	movs	r0, #0
 80076c0:	f7f8 fdf2 	bl	80002a8 <__aeabi_dsub>
 80076c4:	4602      	mov	r2, r0
 80076c6:	460b      	mov	r3, r1
 80076c8:	4630      	mov	r0, r6
 80076ca:	4639      	mov	r1, r7
 80076cc:	f7f9 fa16 	bl	8000afc <__aeabi_dcmplt>
 80076d0:	2800      	cmp	r0, #0
 80076d2:	f43f af27 	beq.w	8007524 <_dtoa_r+0x47c>
 80076d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80076d8:	1e6b      	subs	r3, r5, #1
 80076da:	930c      	str	r3, [sp, #48]	; 0x30
 80076dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80076e0:	2b30      	cmp	r3, #48	; 0x30
 80076e2:	d0f8      	beq.n	80076d6 <_dtoa_r+0x62e>
 80076e4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 80076e8:	e04a      	b.n	8007780 <_dtoa_r+0x6d8>
 80076ea:	bf00      	nop
 80076ec:	0800a120 	.word	0x0800a120
 80076f0:	0800a0f8 	.word	0x0800a0f8
 80076f4:	3ff00000 	.word	0x3ff00000
 80076f8:	40240000 	.word	0x40240000
 80076fc:	401c0000 	.word	0x401c0000
 8007700:	40140000 	.word	0x40140000
 8007704:	3fe00000 	.word	0x3fe00000
 8007708:	4baf      	ldr	r3, [pc, #700]	; (80079c8 <_dtoa_r+0x920>)
 800770a:	f7f8 ff85 	bl	8000618 <__aeabi_dmul>
 800770e:	4606      	mov	r6, r0
 8007710:	460f      	mov	r7, r1
 8007712:	e7ac      	b.n	800766e <_dtoa_r+0x5c6>
 8007714:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8007718:	9d00      	ldr	r5, [sp, #0]
 800771a:	4642      	mov	r2, r8
 800771c:	464b      	mov	r3, r9
 800771e:	4630      	mov	r0, r6
 8007720:	4639      	mov	r1, r7
 8007722:	f7f9 f8a3 	bl	800086c <__aeabi_ddiv>
 8007726:	f7f9 fa27 	bl	8000b78 <__aeabi_d2iz>
 800772a:	9002      	str	r0, [sp, #8]
 800772c:	f7f8 ff0a 	bl	8000544 <__aeabi_i2d>
 8007730:	4642      	mov	r2, r8
 8007732:	464b      	mov	r3, r9
 8007734:	f7f8 ff70 	bl	8000618 <__aeabi_dmul>
 8007738:	4602      	mov	r2, r0
 800773a:	460b      	mov	r3, r1
 800773c:	4630      	mov	r0, r6
 800773e:	4639      	mov	r1, r7
 8007740:	f7f8 fdb2 	bl	80002a8 <__aeabi_dsub>
 8007744:	9e02      	ldr	r6, [sp, #8]
 8007746:	9f01      	ldr	r7, [sp, #4]
 8007748:	3630      	adds	r6, #48	; 0x30
 800774a:	f805 6b01 	strb.w	r6, [r5], #1
 800774e:	9e00      	ldr	r6, [sp, #0]
 8007750:	1bae      	subs	r6, r5, r6
 8007752:	42b7      	cmp	r7, r6
 8007754:	4602      	mov	r2, r0
 8007756:	460b      	mov	r3, r1
 8007758:	d137      	bne.n	80077ca <_dtoa_r+0x722>
 800775a:	f7f8 fda7 	bl	80002ac <__adddf3>
 800775e:	4642      	mov	r2, r8
 8007760:	464b      	mov	r3, r9
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	f7f9 f9e7 	bl	8000b38 <__aeabi_dcmpgt>
 800776a:	b9c8      	cbnz	r0, 80077a0 <_dtoa_r+0x6f8>
 800776c:	4642      	mov	r2, r8
 800776e:	464b      	mov	r3, r9
 8007770:	4630      	mov	r0, r6
 8007772:	4639      	mov	r1, r7
 8007774:	f7f9 f9b8 	bl	8000ae8 <__aeabi_dcmpeq>
 8007778:	b110      	cbz	r0, 8007780 <_dtoa_r+0x6d8>
 800777a:	9b02      	ldr	r3, [sp, #8]
 800777c:	07d9      	lsls	r1, r3, #31
 800777e:	d40f      	bmi.n	80077a0 <_dtoa_r+0x6f8>
 8007780:	4620      	mov	r0, r4
 8007782:	4659      	mov	r1, fp
 8007784:	f000 ff50 	bl	8008628 <_Bfree>
 8007788:	2300      	movs	r3, #0
 800778a:	702b      	strb	r3, [r5, #0]
 800778c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800778e:	f10a 0001 	add.w	r0, sl, #1
 8007792:	6018      	str	r0, [r3, #0]
 8007794:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007796:	2b00      	cmp	r3, #0
 8007798:	f43f acd8 	beq.w	800714c <_dtoa_r+0xa4>
 800779c:	601d      	str	r5, [r3, #0]
 800779e:	e4d5      	b.n	800714c <_dtoa_r+0xa4>
 80077a0:	f8cd a01c 	str.w	sl, [sp, #28]
 80077a4:	462b      	mov	r3, r5
 80077a6:	461d      	mov	r5, r3
 80077a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80077ac:	2a39      	cmp	r2, #57	; 0x39
 80077ae:	d108      	bne.n	80077c2 <_dtoa_r+0x71a>
 80077b0:	9a00      	ldr	r2, [sp, #0]
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d1f7      	bne.n	80077a6 <_dtoa_r+0x6fe>
 80077b6:	9a07      	ldr	r2, [sp, #28]
 80077b8:	9900      	ldr	r1, [sp, #0]
 80077ba:	3201      	adds	r2, #1
 80077bc:	9207      	str	r2, [sp, #28]
 80077be:	2230      	movs	r2, #48	; 0x30
 80077c0:	700a      	strb	r2, [r1, #0]
 80077c2:	781a      	ldrb	r2, [r3, #0]
 80077c4:	3201      	adds	r2, #1
 80077c6:	701a      	strb	r2, [r3, #0]
 80077c8:	e78c      	b.n	80076e4 <_dtoa_r+0x63c>
 80077ca:	4b7f      	ldr	r3, [pc, #508]	; (80079c8 <_dtoa_r+0x920>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	f7f8 ff23 	bl	8000618 <__aeabi_dmul>
 80077d2:	2200      	movs	r2, #0
 80077d4:	2300      	movs	r3, #0
 80077d6:	4606      	mov	r6, r0
 80077d8:	460f      	mov	r7, r1
 80077da:	f7f9 f985 	bl	8000ae8 <__aeabi_dcmpeq>
 80077de:	2800      	cmp	r0, #0
 80077e0:	d09b      	beq.n	800771a <_dtoa_r+0x672>
 80077e2:	e7cd      	b.n	8007780 <_dtoa_r+0x6d8>
 80077e4:	9a08      	ldr	r2, [sp, #32]
 80077e6:	2a00      	cmp	r2, #0
 80077e8:	f000 80c4 	beq.w	8007974 <_dtoa_r+0x8cc>
 80077ec:	9a05      	ldr	r2, [sp, #20]
 80077ee:	2a01      	cmp	r2, #1
 80077f0:	f300 80a8 	bgt.w	8007944 <_dtoa_r+0x89c>
 80077f4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80077f6:	2a00      	cmp	r2, #0
 80077f8:	f000 80a0 	beq.w	800793c <_dtoa_r+0x894>
 80077fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8007800:	9e06      	ldr	r6, [sp, #24]
 8007802:	4645      	mov	r5, r8
 8007804:	9a04      	ldr	r2, [sp, #16]
 8007806:	2101      	movs	r1, #1
 8007808:	441a      	add	r2, r3
 800780a:	4620      	mov	r0, r4
 800780c:	4498      	add	r8, r3
 800780e:	9204      	str	r2, [sp, #16]
 8007810:	f001 f810 	bl	8008834 <__i2b>
 8007814:	4607      	mov	r7, r0
 8007816:	2d00      	cmp	r5, #0
 8007818:	dd0b      	ble.n	8007832 <_dtoa_r+0x78a>
 800781a:	9b04      	ldr	r3, [sp, #16]
 800781c:	2b00      	cmp	r3, #0
 800781e:	dd08      	ble.n	8007832 <_dtoa_r+0x78a>
 8007820:	42ab      	cmp	r3, r5
 8007822:	9a04      	ldr	r2, [sp, #16]
 8007824:	bfa8      	it	ge
 8007826:	462b      	movge	r3, r5
 8007828:	eba8 0803 	sub.w	r8, r8, r3
 800782c:	1aed      	subs	r5, r5, r3
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	9304      	str	r3, [sp, #16]
 8007832:	9b06      	ldr	r3, [sp, #24]
 8007834:	b1fb      	cbz	r3, 8007876 <_dtoa_r+0x7ce>
 8007836:	9b08      	ldr	r3, [sp, #32]
 8007838:	2b00      	cmp	r3, #0
 800783a:	f000 809f 	beq.w	800797c <_dtoa_r+0x8d4>
 800783e:	2e00      	cmp	r6, #0
 8007840:	dd11      	ble.n	8007866 <_dtoa_r+0x7be>
 8007842:	4639      	mov	r1, r7
 8007844:	4632      	mov	r2, r6
 8007846:	4620      	mov	r0, r4
 8007848:	f001 f8b0 	bl	80089ac <__pow5mult>
 800784c:	465a      	mov	r2, fp
 800784e:	4601      	mov	r1, r0
 8007850:	4607      	mov	r7, r0
 8007852:	4620      	mov	r0, r4
 8007854:	f001 f804 	bl	8008860 <__multiply>
 8007858:	4659      	mov	r1, fp
 800785a:	9007      	str	r0, [sp, #28]
 800785c:	4620      	mov	r0, r4
 800785e:	f000 fee3 	bl	8008628 <_Bfree>
 8007862:	9b07      	ldr	r3, [sp, #28]
 8007864:	469b      	mov	fp, r3
 8007866:	9b06      	ldr	r3, [sp, #24]
 8007868:	1b9a      	subs	r2, r3, r6
 800786a:	d004      	beq.n	8007876 <_dtoa_r+0x7ce>
 800786c:	4659      	mov	r1, fp
 800786e:	4620      	mov	r0, r4
 8007870:	f001 f89c 	bl	80089ac <__pow5mult>
 8007874:	4683      	mov	fp, r0
 8007876:	2101      	movs	r1, #1
 8007878:	4620      	mov	r0, r4
 800787a:	f000 ffdb 	bl	8008834 <__i2b>
 800787e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007880:	2b00      	cmp	r3, #0
 8007882:	4606      	mov	r6, r0
 8007884:	dd7c      	ble.n	8007980 <_dtoa_r+0x8d8>
 8007886:	461a      	mov	r2, r3
 8007888:	4601      	mov	r1, r0
 800788a:	4620      	mov	r0, r4
 800788c:	f001 f88e 	bl	80089ac <__pow5mult>
 8007890:	9b05      	ldr	r3, [sp, #20]
 8007892:	2b01      	cmp	r3, #1
 8007894:	4606      	mov	r6, r0
 8007896:	dd76      	ble.n	8007986 <_dtoa_r+0x8de>
 8007898:	2300      	movs	r3, #0
 800789a:	9306      	str	r3, [sp, #24]
 800789c:	6933      	ldr	r3, [r6, #16]
 800789e:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80078a2:	6918      	ldr	r0, [r3, #16]
 80078a4:	f000 ff76 	bl	8008794 <__hi0bits>
 80078a8:	f1c0 0020 	rsb	r0, r0, #32
 80078ac:	9b04      	ldr	r3, [sp, #16]
 80078ae:	4418      	add	r0, r3
 80078b0:	f010 001f 	ands.w	r0, r0, #31
 80078b4:	f000 8086 	beq.w	80079c4 <_dtoa_r+0x91c>
 80078b8:	f1c0 0320 	rsb	r3, r0, #32
 80078bc:	2b04      	cmp	r3, #4
 80078be:	dd7f      	ble.n	80079c0 <_dtoa_r+0x918>
 80078c0:	f1c0 001c 	rsb	r0, r0, #28
 80078c4:	9b04      	ldr	r3, [sp, #16]
 80078c6:	4403      	add	r3, r0
 80078c8:	4480      	add	r8, r0
 80078ca:	4405      	add	r5, r0
 80078cc:	9304      	str	r3, [sp, #16]
 80078ce:	f1b8 0f00 	cmp.w	r8, #0
 80078d2:	dd05      	ble.n	80078e0 <_dtoa_r+0x838>
 80078d4:	4659      	mov	r1, fp
 80078d6:	4642      	mov	r2, r8
 80078d8:	4620      	mov	r0, r4
 80078da:	f001 f8c1 	bl	8008a60 <__lshift>
 80078de:	4683      	mov	fp, r0
 80078e0:	9b04      	ldr	r3, [sp, #16]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	dd05      	ble.n	80078f2 <_dtoa_r+0x84a>
 80078e6:	4631      	mov	r1, r6
 80078e8:	461a      	mov	r2, r3
 80078ea:	4620      	mov	r0, r4
 80078ec:	f001 f8b8 	bl	8008a60 <__lshift>
 80078f0:	4606      	mov	r6, r0
 80078f2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d069      	beq.n	80079cc <_dtoa_r+0x924>
 80078f8:	4631      	mov	r1, r6
 80078fa:	4658      	mov	r0, fp
 80078fc:	f001 f91c 	bl	8008b38 <__mcmp>
 8007900:	2800      	cmp	r0, #0
 8007902:	da63      	bge.n	80079cc <_dtoa_r+0x924>
 8007904:	2300      	movs	r3, #0
 8007906:	4659      	mov	r1, fp
 8007908:	220a      	movs	r2, #10
 800790a:	4620      	mov	r0, r4
 800790c:	f000 feae 	bl	800866c <__multadd>
 8007910:	9b08      	ldr	r3, [sp, #32]
 8007912:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007916:	4683      	mov	fp, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	f000 818f 	beq.w	8007c3c <_dtoa_r+0xb94>
 800791e:	4639      	mov	r1, r7
 8007920:	2300      	movs	r3, #0
 8007922:	220a      	movs	r2, #10
 8007924:	4620      	mov	r0, r4
 8007926:	f000 fea1 	bl	800866c <__multadd>
 800792a:	f1b9 0f00 	cmp.w	r9, #0
 800792e:	4607      	mov	r7, r0
 8007930:	f300 808e 	bgt.w	8007a50 <_dtoa_r+0x9a8>
 8007934:	9b05      	ldr	r3, [sp, #20]
 8007936:	2b02      	cmp	r3, #2
 8007938:	dc50      	bgt.n	80079dc <_dtoa_r+0x934>
 800793a:	e089      	b.n	8007a50 <_dtoa_r+0x9a8>
 800793c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800793e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007942:	e75d      	b.n	8007800 <_dtoa_r+0x758>
 8007944:	9b01      	ldr	r3, [sp, #4]
 8007946:	1e5e      	subs	r6, r3, #1
 8007948:	9b06      	ldr	r3, [sp, #24]
 800794a:	42b3      	cmp	r3, r6
 800794c:	bfbf      	itttt	lt
 800794e:	9b06      	ldrlt	r3, [sp, #24]
 8007950:	9606      	strlt	r6, [sp, #24]
 8007952:	1af2      	sublt	r2, r6, r3
 8007954:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8007956:	bfb6      	itet	lt
 8007958:	189b      	addlt	r3, r3, r2
 800795a:	1b9e      	subge	r6, r3, r6
 800795c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800795e:	9b01      	ldr	r3, [sp, #4]
 8007960:	bfb8      	it	lt
 8007962:	2600      	movlt	r6, #0
 8007964:	2b00      	cmp	r3, #0
 8007966:	bfb5      	itete	lt
 8007968:	eba8 0503 	sublt.w	r5, r8, r3
 800796c:	9b01      	ldrge	r3, [sp, #4]
 800796e:	2300      	movlt	r3, #0
 8007970:	4645      	movge	r5, r8
 8007972:	e747      	b.n	8007804 <_dtoa_r+0x75c>
 8007974:	9e06      	ldr	r6, [sp, #24]
 8007976:	9f08      	ldr	r7, [sp, #32]
 8007978:	4645      	mov	r5, r8
 800797a:	e74c      	b.n	8007816 <_dtoa_r+0x76e>
 800797c:	9a06      	ldr	r2, [sp, #24]
 800797e:	e775      	b.n	800786c <_dtoa_r+0x7c4>
 8007980:	9b05      	ldr	r3, [sp, #20]
 8007982:	2b01      	cmp	r3, #1
 8007984:	dc18      	bgt.n	80079b8 <_dtoa_r+0x910>
 8007986:	9b02      	ldr	r3, [sp, #8]
 8007988:	b9b3      	cbnz	r3, 80079b8 <_dtoa_r+0x910>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007990:	b9a3      	cbnz	r3, 80079bc <_dtoa_r+0x914>
 8007992:	9b03      	ldr	r3, [sp, #12]
 8007994:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007998:	0d1b      	lsrs	r3, r3, #20
 800799a:	051b      	lsls	r3, r3, #20
 800799c:	b12b      	cbz	r3, 80079aa <_dtoa_r+0x902>
 800799e:	9b04      	ldr	r3, [sp, #16]
 80079a0:	3301      	adds	r3, #1
 80079a2:	9304      	str	r3, [sp, #16]
 80079a4:	f108 0801 	add.w	r8, r8, #1
 80079a8:	2301      	movs	r3, #1
 80079aa:	9306      	str	r3, [sp, #24]
 80079ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	f47f af74 	bne.w	800789c <_dtoa_r+0x7f4>
 80079b4:	2001      	movs	r0, #1
 80079b6:	e779      	b.n	80078ac <_dtoa_r+0x804>
 80079b8:	2300      	movs	r3, #0
 80079ba:	e7f6      	b.n	80079aa <_dtoa_r+0x902>
 80079bc:	9b02      	ldr	r3, [sp, #8]
 80079be:	e7f4      	b.n	80079aa <_dtoa_r+0x902>
 80079c0:	d085      	beq.n	80078ce <_dtoa_r+0x826>
 80079c2:	4618      	mov	r0, r3
 80079c4:	301c      	adds	r0, #28
 80079c6:	e77d      	b.n	80078c4 <_dtoa_r+0x81c>
 80079c8:	40240000 	.word	0x40240000
 80079cc:	9b01      	ldr	r3, [sp, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	dc38      	bgt.n	8007a44 <_dtoa_r+0x99c>
 80079d2:	9b05      	ldr	r3, [sp, #20]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	dd35      	ble.n	8007a44 <_dtoa_r+0x99c>
 80079d8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80079dc:	f1b9 0f00 	cmp.w	r9, #0
 80079e0:	d10d      	bne.n	80079fe <_dtoa_r+0x956>
 80079e2:	4631      	mov	r1, r6
 80079e4:	464b      	mov	r3, r9
 80079e6:	2205      	movs	r2, #5
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 fe3f 	bl	800866c <__multadd>
 80079ee:	4601      	mov	r1, r0
 80079f0:	4606      	mov	r6, r0
 80079f2:	4658      	mov	r0, fp
 80079f4:	f001 f8a0 	bl	8008b38 <__mcmp>
 80079f8:	2800      	cmp	r0, #0
 80079fa:	f73f adbd 	bgt.w	8007578 <_dtoa_r+0x4d0>
 80079fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a00:	9d00      	ldr	r5, [sp, #0]
 8007a02:	ea6f 0a03 	mvn.w	sl, r3
 8007a06:	f04f 0800 	mov.w	r8, #0
 8007a0a:	4631      	mov	r1, r6
 8007a0c:	4620      	mov	r0, r4
 8007a0e:	f000 fe0b 	bl	8008628 <_Bfree>
 8007a12:	2f00      	cmp	r7, #0
 8007a14:	f43f aeb4 	beq.w	8007780 <_dtoa_r+0x6d8>
 8007a18:	f1b8 0f00 	cmp.w	r8, #0
 8007a1c:	d005      	beq.n	8007a2a <_dtoa_r+0x982>
 8007a1e:	45b8      	cmp	r8, r7
 8007a20:	d003      	beq.n	8007a2a <_dtoa_r+0x982>
 8007a22:	4641      	mov	r1, r8
 8007a24:	4620      	mov	r0, r4
 8007a26:	f000 fdff 	bl	8008628 <_Bfree>
 8007a2a:	4639      	mov	r1, r7
 8007a2c:	4620      	mov	r0, r4
 8007a2e:	f000 fdfb 	bl	8008628 <_Bfree>
 8007a32:	e6a5      	b.n	8007780 <_dtoa_r+0x6d8>
 8007a34:	2600      	movs	r6, #0
 8007a36:	4637      	mov	r7, r6
 8007a38:	e7e1      	b.n	80079fe <_dtoa_r+0x956>
 8007a3a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007a3c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007a40:	4637      	mov	r7, r6
 8007a42:	e599      	b.n	8007578 <_dtoa_r+0x4d0>
 8007a44:	9b08      	ldr	r3, [sp, #32]
 8007a46:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 80fd 	beq.w	8007c4a <_dtoa_r+0xba2>
 8007a50:	2d00      	cmp	r5, #0
 8007a52:	dd05      	ble.n	8007a60 <_dtoa_r+0x9b8>
 8007a54:	4639      	mov	r1, r7
 8007a56:	462a      	mov	r2, r5
 8007a58:	4620      	mov	r0, r4
 8007a5a:	f001 f801 	bl	8008a60 <__lshift>
 8007a5e:	4607      	mov	r7, r0
 8007a60:	9b06      	ldr	r3, [sp, #24]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d05c      	beq.n	8007b20 <_dtoa_r+0xa78>
 8007a66:	6879      	ldr	r1, [r7, #4]
 8007a68:	4620      	mov	r0, r4
 8007a6a:	f000 fd9d 	bl	80085a8 <_Balloc>
 8007a6e:	4605      	mov	r5, r0
 8007a70:	b928      	cbnz	r0, 8007a7e <_dtoa_r+0x9d6>
 8007a72:	4b80      	ldr	r3, [pc, #512]	; (8007c74 <_dtoa_r+0xbcc>)
 8007a74:	4602      	mov	r2, r0
 8007a76:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007a7a:	f7ff bb2e 	b.w	80070da <_dtoa_r+0x32>
 8007a7e:	693a      	ldr	r2, [r7, #16]
 8007a80:	3202      	adds	r2, #2
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	f107 010c 	add.w	r1, r7, #12
 8007a88:	300c      	adds	r0, #12
 8007a8a:	f000 fd7f 	bl	800858c <memcpy>
 8007a8e:	2201      	movs	r2, #1
 8007a90:	4629      	mov	r1, r5
 8007a92:	4620      	mov	r0, r4
 8007a94:	f000 ffe4 	bl	8008a60 <__lshift>
 8007a98:	9b00      	ldr	r3, [sp, #0]
 8007a9a:	3301      	adds	r3, #1
 8007a9c:	9301      	str	r3, [sp, #4]
 8007a9e:	9b00      	ldr	r3, [sp, #0]
 8007aa0:	444b      	add	r3, r9
 8007aa2:	9307      	str	r3, [sp, #28]
 8007aa4:	9b02      	ldr	r3, [sp, #8]
 8007aa6:	f003 0301 	and.w	r3, r3, #1
 8007aaa:	46b8      	mov	r8, r7
 8007aac:	9306      	str	r3, [sp, #24]
 8007aae:	4607      	mov	r7, r0
 8007ab0:	9b01      	ldr	r3, [sp, #4]
 8007ab2:	4631      	mov	r1, r6
 8007ab4:	3b01      	subs	r3, #1
 8007ab6:	4658      	mov	r0, fp
 8007ab8:	9302      	str	r3, [sp, #8]
 8007aba:	f7ff fa67 	bl	8006f8c <quorem>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	3330      	adds	r3, #48	; 0x30
 8007ac2:	9004      	str	r0, [sp, #16]
 8007ac4:	4641      	mov	r1, r8
 8007ac6:	4658      	mov	r0, fp
 8007ac8:	9308      	str	r3, [sp, #32]
 8007aca:	f001 f835 	bl	8008b38 <__mcmp>
 8007ace:	463a      	mov	r2, r7
 8007ad0:	4681      	mov	r9, r0
 8007ad2:	4631      	mov	r1, r6
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f001 f84b 	bl	8008b70 <__mdiff>
 8007ada:	68c2      	ldr	r2, [r0, #12]
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	4605      	mov	r5, r0
 8007ae0:	bb02      	cbnz	r2, 8007b24 <_dtoa_r+0xa7c>
 8007ae2:	4601      	mov	r1, r0
 8007ae4:	4658      	mov	r0, fp
 8007ae6:	f001 f827 	bl	8008b38 <__mcmp>
 8007aea:	9b08      	ldr	r3, [sp, #32]
 8007aec:	4602      	mov	r2, r0
 8007aee:	4629      	mov	r1, r5
 8007af0:	4620      	mov	r0, r4
 8007af2:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8007af6:	f000 fd97 	bl	8008628 <_Bfree>
 8007afa:	9b05      	ldr	r3, [sp, #20]
 8007afc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007afe:	9d01      	ldr	r5, [sp, #4]
 8007b00:	ea43 0102 	orr.w	r1, r3, r2
 8007b04:	9b06      	ldr	r3, [sp, #24]
 8007b06:	430b      	orrs	r3, r1
 8007b08:	9b08      	ldr	r3, [sp, #32]
 8007b0a:	d10d      	bne.n	8007b28 <_dtoa_r+0xa80>
 8007b0c:	2b39      	cmp	r3, #57	; 0x39
 8007b0e:	d029      	beq.n	8007b64 <_dtoa_r+0xabc>
 8007b10:	f1b9 0f00 	cmp.w	r9, #0
 8007b14:	dd01      	ble.n	8007b1a <_dtoa_r+0xa72>
 8007b16:	9b04      	ldr	r3, [sp, #16]
 8007b18:	3331      	adds	r3, #49	; 0x31
 8007b1a:	9a02      	ldr	r2, [sp, #8]
 8007b1c:	7013      	strb	r3, [r2, #0]
 8007b1e:	e774      	b.n	8007a0a <_dtoa_r+0x962>
 8007b20:	4638      	mov	r0, r7
 8007b22:	e7b9      	b.n	8007a98 <_dtoa_r+0x9f0>
 8007b24:	2201      	movs	r2, #1
 8007b26:	e7e2      	b.n	8007aee <_dtoa_r+0xa46>
 8007b28:	f1b9 0f00 	cmp.w	r9, #0
 8007b2c:	db06      	blt.n	8007b3c <_dtoa_r+0xa94>
 8007b2e:	9905      	ldr	r1, [sp, #20]
 8007b30:	ea41 0909 	orr.w	r9, r1, r9
 8007b34:	9906      	ldr	r1, [sp, #24]
 8007b36:	ea59 0101 	orrs.w	r1, r9, r1
 8007b3a:	d120      	bne.n	8007b7e <_dtoa_r+0xad6>
 8007b3c:	2a00      	cmp	r2, #0
 8007b3e:	ddec      	ble.n	8007b1a <_dtoa_r+0xa72>
 8007b40:	4659      	mov	r1, fp
 8007b42:	2201      	movs	r2, #1
 8007b44:	4620      	mov	r0, r4
 8007b46:	9301      	str	r3, [sp, #4]
 8007b48:	f000 ff8a 	bl	8008a60 <__lshift>
 8007b4c:	4631      	mov	r1, r6
 8007b4e:	4683      	mov	fp, r0
 8007b50:	f000 fff2 	bl	8008b38 <__mcmp>
 8007b54:	2800      	cmp	r0, #0
 8007b56:	9b01      	ldr	r3, [sp, #4]
 8007b58:	dc02      	bgt.n	8007b60 <_dtoa_r+0xab8>
 8007b5a:	d1de      	bne.n	8007b1a <_dtoa_r+0xa72>
 8007b5c:	07da      	lsls	r2, r3, #31
 8007b5e:	d5dc      	bpl.n	8007b1a <_dtoa_r+0xa72>
 8007b60:	2b39      	cmp	r3, #57	; 0x39
 8007b62:	d1d8      	bne.n	8007b16 <_dtoa_r+0xa6e>
 8007b64:	9a02      	ldr	r2, [sp, #8]
 8007b66:	2339      	movs	r3, #57	; 0x39
 8007b68:	7013      	strb	r3, [r2, #0]
 8007b6a:	462b      	mov	r3, r5
 8007b6c:	461d      	mov	r5, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8007b74:	2a39      	cmp	r2, #57	; 0x39
 8007b76:	d050      	beq.n	8007c1a <_dtoa_r+0xb72>
 8007b78:	3201      	adds	r2, #1
 8007b7a:	701a      	strb	r2, [r3, #0]
 8007b7c:	e745      	b.n	8007a0a <_dtoa_r+0x962>
 8007b7e:	2a00      	cmp	r2, #0
 8007b80:	dd03      	ble.n	8007b8a <_dtoa_r+0xae2>
 8007b82:	2b39      	cmp	r3, #57	; 0x39
 8007b84:	d0ee      	beq.n	8007b64 <_dtoa_r+0xabc>
 8007b86:	3301      	adds	r3, #1
 8007b88:	e7c7      	b.n	8007b1a <_dtoa_r+0xa72>
 8007b8a:	9a01      	ldr	r2, [sp, #4]
 8007b8c:	9907      	ldr	r1, [sp, #28]
 8007b8e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b92:	428a      	cmp	r2, r1
 8007b94:	d02a      	beq.n	8007bec <_dtoa_r+0xb44>
 8007b96:	4659      	mov	r1, fp
 8007b98:	2300      	movs	r3, #0
 8007b9a:	220a      	movs	r2, #10
 8007b9c:	4620      	mov	r0, r4
 8007b9e:	f000 fd65 	bl	800866c <__multadd>
 8007ba2:	45b8      	cmp	r8, r7
 8007ba4:	4683      	mov	fp, r0
 8007ba6:	f04f 0300 	mov.w	r3, #0
 8007baa:	f04f 020a 	mov.w	r2, #10
 8007bae:	4641      	mov	r1, r8
 8007bb0:	4620      	mov	r0, r4
 8007bb2:	d107      	bne.n	8007bc4 <_dtoa_r+0xb1c>
 8007bb4:	f000 fd5a 	bl	800866c <__multadd>
 8007bb8:	4680      	mov	r8, r0
 8007bba:	4607      	mov	r7, r0
 8007bbc:	9b01      	ldr	r3, [sp, #4]
 8007bbe:	3301      	adds	r3, #1
 8007bc0:	9301      	str	r3, [sp, #4]
 8007bc2:	e775      	b.n	8007ab0 <_dtoa_r+0xa08>
 8007bc4:	f000 fd52 	bl	800866c <__multadd>
 8007bc8:	4639      	mov	r1, r7
 8007bca:	4680      	mov	r8, r0
 8007bcc:	2300      	movs	r3, #0
 8007bce:	220a      	movs	r2, #10
 8007bd0:	4620      	mov	r0, r4
 8007bd2:	f000 fd4b 	bl	800866c <__multadd>
 8007bd6:	4607      	mov	r7, r0
 8007bd8:	e7f0      	b.n	8007bbc <_dtoa_r+0xb14>
 8007bda:	f1b9 0f00 	cmp.w	r9, #0
 8007bde:	9a00      	ldr	r2, [sp, #0]
 8007be0:	bfcc      	ite	gt
 8007be2:	464d      	movgt	r5, r9
 8007be4:	2501      	movle	r5, #1
 8007be6:	4415      	add	r5, r2
 8007be8:	f04f 0800 	mov.w	r8, #0
 8007bec:	4659      	mov	r1, fp
 8007bee:	2201      	movs	r2, #1
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	9301      	str	r3, [sp, #4]
 8007bf4:	f000 ff34 	bl	8008a60 <__lshift>
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4683      	mov	fp, r0
 8007bfc:	f000 ff9c 	bl	8008b38 <__mcmp>
 8007c00:	2800      	cmp	r0, #0
 8007c02:	dcb2      	bgt.n	8007b6a <_dtoa_r+0xac2>
 8007c04:	d102      	bne.n	8007c0c <_dtoa_r+0xb64>
 8007c06:	9b01      	ldr	r3, [sp, #4]
 8007c08:	07db      	lsls	r3, r3, #31
 8007c0a:	d4ae      	bmi.n	8007b6a <_dtoa_r+0xac2>
 8007c0c:	462b      	mov	r3, r5
 8007c0e:	461d      	mov	r5, r3
 8007c10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c14:	2a30      	cmp	r2, #48	; 0x30
 8007c16:	d0fa      	beq.n	8007c0e <_dtoa_r+0xb66>
 8007c18:	e6f7      	b.n	8007a0a <_dtoa_r+0x962>
 8007c1a:	9a00      	ldr	r2, [sp, #0]
 8007c1c:	429a      	cmp	r2, r3
 8007c1e:	d1a5      	bne.n	8007b6c <_dtoa_r+0xac4>
 8007c20:	f10a 0a01 	add.w	sl, sl, #1
 8007c24:	2331      	movs	r3, #49	; 0x31
 8007c26:	e779      	b.n	8007b1c <_dtoa_r+0xa74>
 8007c28:	4b13      	ldr	r3, [pc, #76]	; (8007c78 <_dtoa_r+0xbd0>)
 8007c2a:	f7ff baaf 	b.w	800718c <_dtoa_r+0xe4>
 8007c2e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	f47f aa86 	bne.w	8007142 <_dtoa_r+0x9a>
 8007c36:	4b11      	ldr	r3, [pc, #68]	; (8007c7c <_dtoa_r+0xbd4>)
 8007c38:	f7ff baa8 	b.w	800718c <_dtoa_r+0xe4>
 8007c3c:	f1b9 0f00 	cmp.w	r9, #0
 8007c40:	dc03      	bgt.n	8007c4a <_dtoa_r+0xba2>
 8007c42:	9b05      	ldr	r3, [sp, #20]
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	f73f aec9 	bgt.w	80079dc <_dtoa_r+0x934>
 8007c4a:	9d00      	ldr	r5, [sp, #0]
 8007c4c:	4631      	mov	r1, r6
 8007c4e:	4658      	mov	r0, fp
 8007c50:	f7ff f99c 	bl	8006f8c <quorem>
 8007c54:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8007c58:	f805 3b01 	strb.w	r3, [r5], #1
 8007c5c:	9a00      	ldr	r2, [sp, #0]
 8007c5e:	1aaa      	subs	r2, r5, r2
 8007c60:	4591      	cmp	r9, r2
 8007c62:	ddba      	ble.n	8007bda <_dtoa_r+0xb32>
 8007c64:	4659      	mov	r1, fp
 8007c66:	2300      	movs	r3, #0
 8007c68:	220a      	movs	r2, #10
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 fcfe 	bl	800866c <__multadd>
 8007c70:	4683      	mov	fp, r0
 8007c72:	e7eb      	b.n	8007c4c <_dtoa_r+0xba4>
 8007c74:	08009fa4 	.word	0x08009fa4
 8007c78:	08009da4 	.word	0x08009da4
 8007c7c:	08009f21 	.word	0x08009f21

08007c80 <std>:
 8007c80:	2300      	movs	r3, #0
 8007c82:	b510      	push	{r4, lr}
 8007c84:	4604      	mov	r4, r0
 8007c86:	e9c0 3300 	strd	r3, r3, [r0]
 8007c8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c8e:	6083      	str	r3, [r0, #8]
 8007c90:	8181      	strh	r1, [r0, #12]
 8007c92:	6643      	str	r3, [r0, #100]	; 0x64
 8007c94:	81c2      	strh	r2, [r0, #14]
 8007c96:	6183      	str	r3, [r0, #24]
 8007c98:	4619      	mov	r1, r3
 8007c9a:	2208      	movs	r2, #8
 8007c9c:	305c      	adds	r0, #92	; 0x5c
 8007c9e:	f7fd fc03 	bl	80054a8 <memset>
 8007ca2:	4b05      	ldr	r3, [pc, #20]	; (8007cb8 <std+0x38>)
 8007ca4:	6263      	str	r3, [r4, #36]	; 0x24
 8007ca6:	4b05      	ldr	r3, [pc, #20]	; (8007cbc <std+0x3c>)
 8007ca8:	62a3      	str	r3, [r4, #40]	; 0x28
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <std+0x40>)
 8007cac:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007cae:	4b05      	ldr	r3, [pc, #20]	; (8007cc4 <std+0x44>)
 8007cb0:	6224      	str	r4, [r4, #32]
 8007cb2:	6323      	str	r3, [r4, #48]	; 0x30
 8007cb4:	bd10      	pop	{r4, pc}
 8007cb6:	bf00      	nop
 8007cb8:	08009631 	.word	0x08009631
 8007cbc:	08009653 	.word	0x08009653
 8007cc0:	0800968b 	.word	0x0800968b
 8007cc4:	080096af 	.word	0x080096af

08007cc8 <_cleanup_r>:
 8007cc8:	4901      	ldr	r1, [pc, #4]	; (8007cd0 <_cleanup_r+0x8>)
 8007cca:	f000 b8af 	b.w	8007e2c <_fwalk_reent>
 8007cce:	bf00      	nop
 8007cd0:	08009a05 	.word	0x08009a05

08007cd4 <__sfmoreglue>:
 8007cd4:	b570      	push	{r4, r5, r6, lr}
 8007cd6:	1e4a      	subs	r2, r1, #1
 8007cd8:	2568      	movs	r5, #104	; 0x68
 8007cda:	4355      	muls	r5, r2
 8007cdc:	460e      	mov	r6, r1
 8007cde:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ce2:	f001 f97b 	bl	8008fdc <_malloc_r>
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	b140      	cbz	r0, 8007cfc <__sfmoreglue+0x28>
 8007cea:	2100      	movs	r1, #0
 8007cec:	e9c0 1600 	strd	r1, r6, [r0]
 8007cf0:	300c      	adds	r0, #12
 8007cf2:	60a0      	str	r0, [r4, #8]
 8007cf4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007cf8:	f7fd fbd6 	bl	80054a8 <memset>
 8007cfc:	4620      	mov	r0, r4
 8007cfe:	bd70      	pop	{r4, r5, r6, pc}

08007d00 <__sfp_lock_acquire>:
 8007d00:	4801      	ldr	r0, [pc, #4]	; (8007d08 <__sfp_lock_acquire+0x8>)
 8007d02:	f000 bc26 	b.w	8008552 <__retarget_lock_acquire_recursive>
 8007d06:	bf00      	nop
 8007d08:	2000045c 	.word	0x2000045c

08007d0c <__sfp_lock_release>:
 8007d0c:	4801      	ldr	r0, [pc, #4]	; (8007d14 <__sfp_lock_release+0x8>)
 8007d0e:	f000 bc21 	b.w	8008554 <__retarget_lock_release_recursive>
 8007d12:	bf00      	nop
 8007d14:	2000045c 	.word	0x2000045c

08007d18 <__sinit_lock_acquire>:
 8007d18:	4801      	ldr	r0, [pc, #4]	; (8007d20 <__sinit_lock_acquire+0x8>)
 8007d1a:	f000 bc1a 	b.w	8008552 <__retarget_lock_acquire_recursive>
 8007d1e:	bf00      	nop
 8007d20:	20000457 	.word	0x20000457

08007d24 <__sinit_lock_release>:
 8007d24:	4801      	ldr	r0, [pc, #4]	; (8007d2c <__sinit_lock_release+0x8>)
 8007d26:	f000 bc15 	b.w	8008554 <__retarget_lock_release_recursive>
 8007d2a:	bf00      	nop
 8007d2c:	20000457 	.word	0x20000457

08007d30 <__sinit>:
 8007d30:	b510      	push	{r4, lr}
 8007d32:	4604      	mov	r4, r0
 8007d34:	f7ff fff0 	bl	8007d18 <__sinit_lock_acquire>
 8007d38:	69a3      	ldr	r3, [r4, #24]
 8007d3a:	b11b      	cbz	r3, 8007d44 <__sinit+0x14>
 8007d3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d40:	f7ff bff0 	b.w	8007d24 <__sinit_lock_release>
 8007d44:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007d48:	6523      	str	r3, [r4, #80]	; 0x50
 8007d4a:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <__sinit+0x68>)
 8007d4c:	4a13      	ldr	r2, [pc, #76]	; (8007d9c <__sinit+0x6c>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	62a2      	str	r2, [r4, #40]	; 0x28
 8007d52:	42a3      	cmp	r3, r4
 8007d54:	bf04      	itt	eq
 8007d56:	2301      	moveq	r3, #1
 8007d58:	61a3      	streq	r3, [r4, #24]
 8007d5a:	4620      	mov	r0, r4
 8007d5c:	f000 f820 	bl	8007da0 <__sfp>
 8007d60:	6060      	str	r0, [r4, #4]
 8007d62:	4620      	mov	r0, r4
 8007d64:	f000 f81c 	bl	8007da0 <__sfp>
 8007d68:	60a0      	str	r0, [r4, #8]
 8007d6a:	4620      	mov	r0, r4
 8007d6c:	f000 f818 	bl	8007da0 <__sfp>
 8007d70:	2200      	movs	r2, #0
 8007d72:	60e0      	str	r0, [r4, #12]
 8007d74:	2104      	movs	r1, #4
 8007d76:	6860      	ldr	r0, [r4, #4]
 8007d78:	f7ff ff82 	bl	8007c80 <std>
 8007d7c:	68a0      	ldr	r0, [r4, #8]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	2109      	movs	r1, #9
 8007d82:	f7ff ff7d 	bl	8007c80 <std>
 8007d86:	68e0      	ldr	r0, [r4, #12]
 8007d88:	2202      	movs	r2, #2
 8007d8a:	2112      	movs	r1, #18
 8007d8c:	f7ff ff78 	bl	8007c80 <std>
 8007d90:	2301      	movs	r3, #1
 8007d92:	61a3      	str	r3, [r4, #24]
 8007d94:	e7d2      	b.n	8007d3c <__sinit+0xc>
 8007d96:	bf00      	nop
 8007d98:	08009d90 	.word	0x08009d90
 8007d9c:	08007cc9 	.word	0x08007cc9

08007da0 <__sfp>:
 8007da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007da2:	4607      	mov	r7, r0
 8007da4:	f7ff ffac 	bl	8007d00 <__sfp_lock_acquire>
 8007da8:	4b1e      	ldr	r3, [pc, #120]	; (8007e24 <__sfp+0x84>)
 8007daa:	681e      	ldr	r6, [r3, #0]
 8007dac:	69b3      	ldr	r3, [r6, #24]
 8007dae:	b913      	cbnz	r3, 8007db6 <__sfp+0x16>
 8007db0:	4630      	mov	r0, r6
 8007db2:	f7ff ffbd 	bl	8007d30 <__sinit>
 8007db6:	3648      	adds	r6, #72	; 0x48
 8007db8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	d503      	bpl.n	8007dc8 <__sfp+0x28>
 8007dc0:	6833      	ldr	r3, [r6, #0]
 8007dc2:	b30b      	cbz	r3, 8007e08 <__sfp+0x68>
 8007dc4:	6836      	ldr	r6, [r6, #0]
 8007dc6:	e7f7      	b.n	8007db8 <__sfp+0x18>
 8007dc8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007dcc:	b9d5      	cbnz	r5, 8007e04 <__sfp+0x64>
 8007dce:	4b16      	ldr	r3, [pc, #88]	; (8007e28 <__sfp+0x88>)
 8007dd0:	60e3      	str	r3, [r4, #12]
 8007dd2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007dd6:	6665      	str	r5, [r4, #100]	; 0x64
 8007dd8:	f000 fbba 	bl	8008550 <__retarget_lock_init_recursive>
 8007ddc:	f7ff ff96 	bl	8007d0c <__sfp_lock_release>
 8007de0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007de4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007de8:	6025      	str	r5, [r4, #0]
 8007dea:	61a5      	str	r5, [r4, #24]
 8007dec:	2208      	movs	r2, #8
 8007dee:	4629      	mov	r1, r5
 8007df0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007df4:	f7fd fb58 	bl	80054a8 <memset>
 8007df8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007dfc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007e00:	4620      	mov	r0, r4
 8007e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007e04:	3468      	adds	r4, #104	; 0x68
 8007e06:	e7d9      	b.n	8007dbc <__sfp+0x1c>
 8007e08:	2104      	movs	r1, #4
 8007e0a:	4638      	mov	r0, r7
 8007e0c:	f7ff ff62 	bl	8007cd4 <__sfmoreglue>
 8007e10:	4604      	mov	r4, r0
 8007e12:	6030      	str	r0, [r6, #0]
 8007e14:	2800      	cmp	r0, #0
 8007e16:	d1d5      	bne.n	8007dc4 <__sfp+0x24>
 8007e18:	f7ff ff78 	bl	8007d0c <__sfp_lock_release>
 8007e1c:	230c      	movs	r3, #12
 8007e1e:	603b      	str	r3, [r7, #0]
 8007e20:	e7ee      	b.n	8007e00 <__sfp+0x60>
 8007e22:	bf00      	nop
 8007e24:	08009d90 	.word	0x08009d90
 8007e28:	ffff0001 	.word	0xffff0001

08007e2c <_fwalk_reent>:
 8007e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007e30:	4606      	mov	r6, r0
 8007e32:	4688      	mov	r8, r1
 8007e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007e38:	2700      	movs	r7, #0
 8007e3a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007e3e:	f1b9 0901 	subs.w	r9, r9, #1
 8007e42:	d505      	bpl.n	8007e50 <_fwalk_reent+0x24>
 8007e44:	6824      	ldr	r4, [r4, #0]
 8007e46:	2c00      	cmp	r4, #0
 8007e48:	d1f7      	bne.n	8007e3a <_fwalk_reent+0xe>
 8007e4a:	4638      	mov	r0, r7
 8007e4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e50:	89ab      	ldrh	r3, [r5, #12]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d907      	bls.n	8007e66 <_fwalk_reent+0x3a>
 8007e56:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007e5a:	3301      	adds	r3, #1
 8007e5c:	d003      	beq.n	8007e66 <_fwalk_reent+0x3a>
 8007e5e:	4629      	mov	r1, r5
 8007e60:	4630      	mov	r0, r6
 8007e62:	47c0      	blx	r8
 8007e64:	4307      	orrs	r7, r0
 8007e66:	3568      	adds	r5, #104	; 0x68
 8007e68:	e7e9      	b.n	8007e3e <_fwalk_reent+0x12>

08007e6a <rshift>:
 8007e6a:	6903      	ldr	r3, [r0, #16]
 8007e6c:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e70:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e74:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e78:	f100 0414 	add.w	r4, r0, #20
 8007e7c:	dd45      	ble.n	8007f0a <rshift+0xa0>
 8007e7e:	f011 011f 	ands.w	r1, r1, #31
 8007e82:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e86:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e8a:	d10c      	bne.n	8007ea6 <rshift+0x3c>
 8007e8c:	f100 0710 	add.w	r7, r0, #16
 8007e90:	4629      	mov	r1, r5
 8007e92:	42b1      	cmp	r1, r6
 8007e94:	d334      	bcc.n	8007f00 <rshift+0x96>
 8007e96:	1a9b      	subs	r3, r3, r2
 8007e98:	009b      	lsls	r3, r3, #2
 8007e9a:	1eea      	subs	r2, r5, #3
 8007e9c:	4296      	cmp	r6, r2
 8007e9e:	bf38      	it	cc
 8007ea0:	2300      	movcc	r3, #0
 8007ea2:	4423      	add	r3, r4
 8007ea4:	e015      	b.n	8007ed2 <rshift+0x68>
 8007ea6:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007eaa:	f1c1 0820 	rsb	r8, r1, #32
 8007eae:	40cf      	lsrs	r7, r1
 8007eb0:	f105 0e04 	add.w	lr, r5, #4
 8007eb4:	46a1      	mov	r9, r4
 8007eb6:	4576      	cmp	r6, lr
 8007eb8:	46f4      	mov	ip, lr
 8007eba:	d815      	bhi.n	8007ee8 <rshift+0x7e>
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	009a      	lsls	r2, r3, #2
 8007ec0:	3a04      	subs	r2, #4
 8007ec2:	3501      	adds	r5, #1
 8007ec4:	42ae      	cmp	r6, r5
 8007ec6:	bf38      	it	cc
 8007ec8:	2200      	movcc	r2, #0
 8007eca:	18a3      	adds	r3, r4, r2
 8007ecc:	50a7      	str	r7, [r4, r2]
 8007ece:	b107      	cbz	r7, 8007ed2 <rshift+0x68>
 8007ed0:	3304      	adds	r3, #4
 8007ed2:	1b1a      	subs	r2, r3, r4
 8007ed4:	42a3      	cmp	r3, r4
 8007ed6:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007eda:	bf08      	it	eq
 8007edc:	2300      	moveq	r3, #0
 8007ede:	6102      	str	r2, [r0, #16]
 8007ee0:	bf08      	it	eq
 8007ee2:	6143      	streq	r3, [r0, #20]
 8007ee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007ee8:	f8dc c000 	ldr.w	ip, [ip]
 8007eec:	fa0c fc08 	lsl.w	ip, ip, r8
 8007ef0:	ea4c 0707 	orr.w	r7, ip, r7
 8007ef4:	f849 7b04 	str.w	r7, [r9], #4
 8007ef8:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007efc:	40cf      	lsrs	r7, r1
 8007efe:	e7da      	b.n	8007eb6 <rshift+0x4c>
 8007f00:	f851 cb04 	ldr.w	ip, [r1], #4
 8007f04:	f847 cf04 	str.w	ip, [r7, #4]!
 8007f08:	e7c3      	b.n	8007e92 <rshift+0x28>
 8007f0a:	4623      	mov	r3, r4
 8007f0c:	e7e1      	b.n	8007ed2 <rshift+0x68>

08007f0e <__hexdig_fun>:
 8007f0e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8007f12:	2b09      	cmp	r3, #9
 8007f14:	d802      	bhi.n	8007f1c <__hexdig_fun+0xe>
 8007f16:	3820      	subs	r0, #32
 8007f18:	b2c0      	uxtb	r0, r0
 8007f1a:	4770      	bx	lr
 8007f1c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8007f20:	2b05      	cmp	r3, #5
 8007f22:	d801      	bhi.n	8007f28 <__hexdig_fun+0x1a>
 8007f24:	3847      	subs	r0, #71	; 0x47
 8007f26:	e7f7      	b.n	8007f18 <__hexdig_fun+0xa>
 8007f28:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8007f2c:	2b05      	cmp	r3, #5
 8007f2e:	d801      	bhi.n	8007f34 <__hexdig_fun+0x26>
 8007f30:	3827      	subs	r0, #39	; 0x27
 8007f32:	e7f1      	b.n	8007f18 <__hexdig_fun+0xa>
 8007f34:	2000      	movs	r0, #0
 8007f36:	4770      	bx	lr

08007f38 <__gethex>:
 8007f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f3c:	ed2d 8b02 	vpush	{d8}
 8007f40:	b089      	sub	sp, #36	; 0x24
 8007f42:	ee08 0a10 	vmov	s16, r0
 8007f46:	9304      	str	r3, [sp, #16]
 8007f48:	4bbc      	ldr	r3, [pc, #752]	; (800823c <__gethex+0x304>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9301      	str	r3, [sp, #4]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	468b      	mov	fp, r1
 8007f52:	4690      	mov	r8, r2
 8007f54:	f7f8 f94c 	bl	80001f0 <strlen>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	f8db 2000 	ldr.w	r2, [fp]
 8007f5e:	4403      	add	r3, r0
 8007f60:	4682      	mov	sl, r0
 8007f62:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8007f66:	9305      	str	r3, [sp, #20]
 8007f68:	1c93      	adds	r3, r2, #2
 8007f6a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8007f6e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8007f72:	32fe      	adds	r2, #254	; 0xfe
 8007f74:	18d1      	adds	r1, r2, r3
 8007f76:	461f      	mov	r7, r3
 8007f78:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007f7c:	9100      	str	r1, [sp, #0]
 8007f7e:	2830      	cmp	r0, #48	; 0x30
 8007f80:	d0f8      	beq.n	8007f74 <__gethex+0x3c>
 8007f82:	f7ff ffc4 	bl	8007f0e <__hexdig_fun>
 8007f86:	4604      	mov	r4, r0
 8007f88:	2800      	cmp	r0, #0
 8007f8a:	d13a      	bne.n	8008002 <__gethex+0xca>
 8007f8c:	9901      	ldr	r1, [sp, #4]
 8007f8e:	4652      	mov	r2, sl
 8007f90:	4638      	mov	r0, r7
 8007f92:	f001 fb90 	bl	80096b6 <strncmp>
 8007f96:	4605      	mov	r5, r0
 8007f98:	2800      	cmp	r0, #0
 8007f9a:	d168      	bne.n	800806e <__gethex+0x136>
 8007f9c:	f817 000a 	ldrb.w	r0, [r7, sl]
 8007fa0:	eb07 060a 	add.w	r6, r7, sl
 8007fa4:	f7ff ffb3 	bl	8007f0e <__hexdig_fun>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	d062      	beq.n	8008072 <__gethex+0x13a>
 8007fac:	4633      	mov	r3, r6
 8007fae:	7818      	ldrb	r0, [r3, #0]
 8007fb0:	2830      	cmp	r0, #48	; 0x30
 8007fb2:	461f      	mov	r7, r3
 8007fb4:	f103 0301 	add.w	r3, r3, #1
 8007fb8:	d0f9      	beq.n	8007fae <__gethex+0x76>
 8007fba:	f7ff ffa8 	bl	8007f0e <__hexdig_fun>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	fab0 f480 	clz	r4, r0
 8007fc4:	0964      	lsrs	r4, r4, #5
 8007fc6:	4635      	mov	r5, r6
 8007fc8:	9300      	str	r3, [sp, #0]
 8007fca:	463a      	mov	r2, r7
 8007fcc:	4616      	mov	r6, r2
 8007fce:	3201      	adds	r2, #1
 8007fd0:	7830      	ldrb	r0, [r6, #0]
 8007fd2:	f7ff ff9c 	bl	8007f0e <__hexdig_fun>
 8007fd6:	2800      	cmp	r0, #0
 8007fd8:	d1f8      	bne.n	8007fcc <__gethex+0x94>
 8007fda:	9901      	ldr	r1, [sp, #4]
 8007fdc:	4652      	mov	r2, sl
 8007fde:	4630      	mov	r0, r6
 8007fe0:	f001 fb69 	bl	80096b6 <strncmp>
 8007fe4:	b980      	cbnz	r0, 8008008 <__gethex+0xd0>
 8007fe6:	b94d      	cbnz	r5, 8007ffc <__gethex+0xc4>
 8007fe8:	eb06 050a 	add.w	r5, r6, sl
 8007fec:	462a      	mov	r2, r5
 8007fee:	4616      	mov	r6, r2
 8007ff0:	3201      	adds	r2, #1
 8007ff2:	7830      	ldrb	r0, [r6, #0]
 8007ff4:	f7ff ff8b 	bl	8007f0e <__hexdig_fun>
 8007ff8:	2800      	cmp	r0, #0
 8007ffa:	d1f8      	bne.n	8007fee <__gethex+0xb6>
 8007ffc:	1bad      	subs	r5, r5, r6
 8007ffe:	00ad      	lsls	r5, r5, #2
 8008000:	e004      	b.n	800800c <__gethex+0xd4>
 8008002:	2400      	movs	r4, #0
 8008004:	4625      	mov	r5, r4
 8008006:	e7e0      	b.n	8007fca <__gethex+0x92>
 8008008:	2d00      	cmp	r5, #0
 800800a:	d1f7      	bne.n	8007ffc <__gethex+0xc4>
 800800c:	7833      	ldrb	r3, [r6, #0]
 800800e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008012:	2b50      	cmp	r3, #80	; 0x50
 8008014:	d13b      	bne.n	800808e <__gethex+0x156>
 8008016:	7873      	ldrb	r3, [r6, #1]
 8008018:	2b2b      	cmp	r3, #43	; 0x2b
 800801a:	d02c      	beq.n	8008076 <__gethex+0x13e>
 800801c:	2b2d      	cmp	r3, #45	; 0x2d
 800801e:	d02e      	beq.n	800807e <__gethex+0x146>
 8008020:	1c71      	adds	r1, r6, #1
 8008022:	f04f 0900 	mov.w	r9, #0
 8008026:	7808      	ldrb	r0, [r1, #0]
 8008028:	f7ff ff71 	bl	8007f0e <__hexdig_fun>
 800802c:	1e43      	subs	r3, r0, #1
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b18      	cmp	r3, #24
 8008032:	d82c      	bhi.n	800808e <__gethex+0x156>
 8008034:	f1a0 0210 	sub.w	r2, r0, #16
 8008038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800803c:	f7ff ff67 	bl	8007f0e <__hexdig_fun>
 8008040:	1e43      	subs	r3, r0, #1
 8008042:	b2db      	uxtb	r3, r3
 8008044:	2b18      	cmp	r3, #24
 8008046:	d91d      	bls.n	8008084 <__gethex+0x14c>
 8008048:	f1b9 0f00 	cmp.w	r9, #0
 800804c:	d000      	beq.n	8008050 <__gethex+0x118>
 800804e:	4252      	negs	r2, r2
 8008050:	4415      	add	r5, r2
 8008052:	f8cb 1000 	str.w	r1, [fp]
 8008056:	b1e4      	cbz	r4, 8008092 <__gethex+0x15a>
 8008058:	9b00      	ldr	r3, [sp, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	bf14      	ite	ne
 800805e:	2700      	movne	r7, #0
 8008060:	2706      	moveq	r7, #6
 8008062:	4638      	mov	r0, r7
 8008064:	b009      	add	sp, #36	; 0x24
 8008066:	ecbd 8b02 	vpop	{d8}
 800806a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800806e:	463e      	mov	r6, r7
 8008070:	4625      	mov	r5, r4
 8008072:	2401      	movs	r4, #1
 8008074:	e7ca      	b.n	800800c <__gethex+0xd4>
 8008076:	f04f 0900 	mov.w	r9, #0
 800807a:	1cb1      	adds	r1, r6, #2
 800807c:	e7d3      	b.n	8008026 <__gethex+0xee>
 800807e:	f04f 0901 	mov.w	r9, #1
 8008082:	e7fa      	b.n	800807a <__gethex+0x142>
 8008084:	230a      	movs	r3, #10
 8008086:	fb03 0202 	mla	r2, r3, r2, r0
 800808a:	3a10      	subs	r2, #16
 800808c:	e7d4      	b.n	8008038 <__gethex+0x100>
 800808e:	4631      	mov	r1, r6
 8008090:	e7df      	b.n	8008052 <__gethex+0x11a>
 8008092:	1bf3      	subs	r3, r6, r7
 8008094:	3b01      	subs	r3, #1
 8008096:	4621      	mov	r1, r4
 8008098:	2b07      	cmp	r3, #7
 800809a:	dc0b      	bgt.n	80080b4 <__gethex+0x17c>
 800809c:	ee18 0a10 	vmov	r0, s16
 80080a0:	f000 fa82 	bl	80085a8 <_Balloc>
 80080a4:	4604      	mov	r4, r0
 80080a6:	b940      	cbnz	r0, 80080ba <__gethex+0x182>
 80080a8:	4b65      	ldr	r3, [pc, #404]	; (8008240 <__gethex+0x308>)
 80080aa:	4602      	mov	r2, r0
 80080ac:	21de      	movs	r1, #222	; 0xde
 80080ae:	4865      	ldr	r0, [pc, #404]	; (8008244 <__gethex+0x30c>)
 80080b0:	f001 fbf4 	bl	800989c <__assert_func>
 80080b4:	3101      	adds	r1, #1
 80080b6:	105b      	asrs	r3, r3, #1
 80080b8:	e7ee      	b.n	8008098 <__gethex+0x160>
 80080ba:	f100 0914 	add.w	r9, r0, #20
 80080be:	f04f 0b00 	mov.w	fp, #0
 80080c2:	f1ca 0301 	rsb	r3, sl, #1
 80080c6:	f8cd 9008 	str.w	r9, [sp, #8]
 80080ca:	f8cd b000 	str.w	fp, [sp]
 80080ce:	9306      	str	r3, [sp, #24]
 80080d0:	42b7      	cmp	r7, r6
 80080d2:	d340      	bcc.n	8008156 <__gethex+0x21e>
 80080d4:	9802      	ldr	r0, [sp, #8]
 80080d6:	9b00      	ldr	r3, [sp, #0]
 80080d8:	f840 3b04 	str.w	r3, [r0], #4
 80080dc:	eba0 0009 	sub.w	r0, r0, r9
 80080e0:	1080      	asrs	r0, r0, #2
 80080e2:	0146      	lsls	r6, r0, #5
 80080e4:	6120      	str	r0, [r4, #16]
 80080e6:	4618      	mov	r0, r3
 80080e8:	f000 fb54 	bl	8008794 <__hi0bits>
 80080ec:	1a30      	subs	r0, r6, r0
 80080ee:	f8d8 6000 	ldr.w	r6, [r8]
 80080f2:	42b0      	cmp	r0, r6
 80080f4:	dd63      	ble.n	80081be <__gethex+0x286>
 80080f6:	1b87      	subs	r7, r0, r6
 80080f8:	4639      	mov	r1, r7
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 feee 	bl	8008edc <__any_on>
 8008100:	4682      	mov	sl, r0
 8008102:	b1a8      	cbz	r0, 8008130 <__gethex+0x1f8>
 8008104:	1e7b      	subs	r3, r7, #1
 8008106:	1159      	asrs	r1, r3, #5
 8008108:	f003 021f 	and.w	r2, r3, #31
 800810c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008110:	f04f 0a01 	mov.w	sl, #1
 8008114:	fa0a f202 	lsl.w	r2, sl, r2
 8008118:	420a      	tst	r2, r1
 800811a:	d009      	beq.n	8008130 <__gethex+0x1f8>
 800811c:	4553      	cmp	r3, sl
 800811e:	dd05      	ble.n	800812c <__gethex+0x1f4>
 8008120:	1eb9      	subs	r1, r7, #2
 8008122:	4620      	mov	r0, r4
 8008124:	f000 feda 	bl	8008edc <__any_on>
 8008128:	2800      	cmp	r0, #0
 800812a:	d145      	bne.n	80081b8 <__gethex+0x280>
 800812c:	f04f 0a02 	mov.w	sl, #2
 8008130:	4639      	mov	r1, r7
 8008132:	4620      	mov	r0, r4
 8008134:	f7ff fe99 	bl	8007e6a <rshift>
 8008138:	443d      	add	r5, r7
 800813a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800813e:	42ab      	cmp	r3, r5
 8008140:	da4c      	bge.n	80081dc <__gethex+0x2a4>
 8008142:	ee18 0a10 	vmov	r0, s16
 8008146:	4621      	mov	r1, r4
 8008148:	f000 fa6e 	bl	8008628 <_Bfree>
 800814c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800814e:	2300      	movs	r3, #0
 8008150:	6013      	str	r3, [r2, #0]
 8008152:	27a3      	movs	r7, #163	; 0xa3
 8008154:	e785      	b.n	8008062 <__gethex+0x12a>
 8008156:	1e73      	subs	r3, r6, #1
 8008158:	9a05      	ldr	r2, [sp, #20]
 800815a:	9303      	str	r3, [sp, #12]
 800815c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008160:	4293      	cmp	r3, r2
 8008162:	d019      	beq.n	8008198 <__gethex+0x260>
 8008164:	f1bb 0f20 	cmp.w	fp, #32
 8008168:	d107      	bne.n	800817a <__gethex+0x242>
 800816a:	9b02      	ldr	r3, [sp, #8]
 800816c:	9a00      	ldr	r2, [sp, #0]
 800816e:	f843 2b04 	str.w	r2, [r3], #4
 8008172:	9302      	str	r3, [sp, #8]
 8008174:	2300      	movs	r3, #0
 8008176:	9300      	str	r3, [sp, #0]
 8008178:	469b      	mov	fp, r3
 800817a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800817e:	f7ff fec6 	bl	8007f0e <__hexdig_fun>
 8008182:	9b00      	ldr	r3, [sp, #0]
 8008184:	f000 000f 	and.w	r0, r0, #15
 8008188:	fa00 f00b 	lsl.w	r0, r0, fp
 800818c:	4303      	orrs	r3, r0
 800818e:	9300      	str	r3, [sp, #0]
 8008190:	f10b 0b04 	add.w	fp, fp, #4
 8008194:	9b03      	ldr	r3, [sp, #12]
 8008196:	e00d      	b.n	80081b4 <__gethex+0x27c>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	9a06      	ldr	r2, [sp, #24]
 800819c:	4413      	add	r3, r2
 800819e:	42bb      	cmp	r3, r7
 80081a0:	d3e0      	bcc.n	8008164 <__gethex+0x22c>
 80081a2:	4618      	mov	r0, r3
 80081a4:	9901      	ldr	r1, [sp, #4]
 80081a6:	9307      	str	r3, [sp, #28]
 80081a8:	4652      	mov	r2, sl
 80081aa:	f001 fa84 	bl	80096b6 <strncmp>
 80081ae:	9b07      	ldr	r3, [sp, #28]
 80081b0:	2800      	cmp	r0, #0
 80081b2:	d1d7      	bne.n	8008164 <__gethex+0x22c>
 80081b4:	461e      	mov	r6, r3
 80081b6:	e78b      	b.n	80080d0 <__gethex+0x198>
 80081b8:	f04f 0a03 	mov.w	sl, #3
 80081bc:	e7b8      	b.n	8008130 <__gethex+0x1f8>
 80081be:	da0a      	bge.n	80081d6 <__gethex+0x29e>
 80081c0:	1a37      	subs	r7, r6, r0
 80081c2:	4621      	mov	r1, r4
 80081c4:	ee18 0a10 	vmov	r0, s16
 80081c8:	463a      	mov	r2, r7
 80081ca:	f000 fc49 	bl	8008a60 <__lshift>
 80081ce:	1bed      	subs	r5, r5, r7
 80081d0:	4604      	mov	r4, r0
 80081d2:	f100 0914 	add.w	r9, r0, #20
 80081d6:	f04f 0a00 	mov.w	sl, #0
 80081da:	e7ae      	b.n	800813a <__gethex+0x202>
 80081dc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 80081e0:	42a8      	cmp	r0, r5
 80081e2:	dd72      	ble.n	80082ca <__gethex+0x392>
 80081e4:	1b45      	subs	r5, r0, r5
 80081e6:	42ae      	cmp	r6, r5
 80081e8:	dc36      	bgt.n	8008258 <__gethex+0x320>
 80081ea:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081ee:	2b02      	cmp	r3, #2
 80081f0:	d02a      	beq.n	8008248 <__gethex+0x310>
 80081f2:	2b03      	cmp	r3, #3
 80081f4:	d02c      	beq.n	8008250 <__gethex+0x318>
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d115      	bne.n	8008226 <__gethex+0x2ee>
 80081fa:	42ae      	cmp	r6, r5
 80081fc:	d113      	bne.n	8008226 <__gethex+0x2ee>
 80081fe:	2e01      	cmp	r6, #1
 8008200:	d10b      	bne.n	800821a <__gethex+0x2e2>
 8008202:	9a04      	ldr	r2, [sp, #16]
 8008204:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008208:	6013      	str	r3, [r2, #0]
 800820a:	2301      	movs	r3, #1
 800820c:	6123      	str	r3, [r4, #16]
 800820e:	f8c9 3000 	str.w	r3, [r9]
 8008212:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008214:	2762      	movs	r7, #98	; 0x62
 8008216:	601c      	str	r4, [r3, #0]
 8008218:	e723      	b.n	8008062 <__gethex+0x12a>
 800821a:	1e71      	subs	r1, r6, #1
 800821c:	4620      	mov	r0, r4
 800821e:	f000 fe5d 	bl	8008edc <__any_on>
 8008222:	2800      	cmp	r0, #0
 8008224:	d1ed      	bne.n	8008202 <__gethex+0x2ca>
 8008226:	ee18 0a10 	vmov	r0, s16
 800822a:	4621      	mov	r1, r4
 800822c:	f000 f9fc 	bl	8008628 <_Bfree>
 8008230:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008232:	2300      	movs	r3, #0
 8008234:	6013      	str	r3, [r2, #0]
 8008236:	2750      	movs	r7, #80	; 0x50
 8008238:	e713      	b.n	8008062 <__gethex+0x12a>
 800823a:	bf00      	nop
 800823c:	0800a084 	.word	0x0800a084
 8008240:	08009fa4 	.word	0x08009fa4
 8008244:	0800a018 	.word	0x0800a018
 8008248:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1eb      	bne.n	8008226 <__gethex+0x2ee>
 800824e:	e7d8      	b.n	8008202 <__gethex+0x2ca>
 8008250:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1d5      	bne.n	8008202 <__gethex+0x2ca>
 8008256:	e7e6      	b.n	8008226 <__gethex+0x2ee>
 8008258:	1e6f      	subs	r7, r5, #1
 800825a:	f1ba 0f00 	cmp.w	sl, #0
 800825e:	d131      	bne.n	80082c4 <__gethex+0x38c>
 8008260:	b127      	cbz	r7, 800826c <__gethex+0x334>
 8008262:	4639      	mov	r1, r7
 8008264:	4620      	mov	r0, r4
 8008266:	f000 fe39 	bl	8008edc <__any_on>
 800826a:	4682      	mov	sl, r0
 800826c:	117b      	asrs	r3, r7, #5
 800826e:	2101      	movs	r1, #1
 8008270:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008274:	f007 071f 	and.w	r7, r7, #31
 8008278:	fa01 f707 	lsl.w	r7, r1, r7
 800827c:	421f      	tst	r7, r3
 800827e:	4629      	mov	r1, r5
 8008280:	4620      	mov	r0, r4
 8008282:	bf18      	it	ne
 8008284:	f04a 0a02 	orrne.w	sl, sl, #2
 8008288:	1b76      	subs	r6, r6, r5
 800828a:	f7ff fdee 	bl	8007e6a <rshift>
 800828e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008292:	2702      	movs	r7, #2
 8008294:	f1ba 0f00 	cmp.w	sl, #0
 8008298:	d048      	beq.n	800832c <__gethex+0x3f4>
 800829a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d015      	beq.n	80082ce <__gethex+0x396>
 80082a2:	2b03      	cmp	r3, #3
 80082a4:	d017      	beq.n	80082d6 <__gethex+0x39e>
 80082a6:	2b01      	cmp	r3, #1
 80082a8:	d109      	bne.n	80082be <__gethex+0x386>
 80082aa:	f01a 0f02 	tst.w	sl, #2
 80082ae:	d006      	beq.n	80082be <__gethex+0x386>
 80082b0:	f8d9 0000 	ldr.w	r0, [r9]
 80082b4:	ea4a 0a00 	orr.w	sl, sl, r0
 80082b8:	f01a 0f01 	tst.w	sl, #1
 80082bc:	d10e      	bne.n	80082dc <__gethex+0x3a4>
 80082be:	f047 0710 	orr.w	r7, r7, #16
 80082c2:	e033      	b.n	800832c <__gethex+0x3f4>
 80082c4:	f04f 0a01 	mov.w	sl, #1
 80082c8:	e7d0      	b.n	800826c <__gethex+0x334>
 80082ca:	2701      	movs	r7, #1
 80082cc:	e7e2      	b.n	8008294 <__gethex+0x35c>
 80082ce:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082d0:	f1c3 0301 	rsb	r3, r3, #1
 80082d4:	9315      	str	r3, [sp, #84]	; 0x54
 80082d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d0f0      	beq.n	80082be <__gethex+0x386>
 80082dc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80082e0:	f104 0314 	add.w	r3, r4, #20
 80082e4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80082e8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80082ec:	f04f 0c00 	mov.w	ip, #0
 80082f0:	4618      	mov	r0, r3
 80082f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80082f6:	f1b2 3fff 	cmp.w	r2, #4294967295
 80082fa:	d01c      	beq.n	8008336 <__gethex+0x3fe>
 80082fc:	3201      	adds	r2, #1
 80082fe:	6002      	str	r2, [r0, #0]
 8008300:	2f02      	cmp	r7, #2
 8008302:	f104 0314 	add.w	r3, r4, #20
 8008306:	d13f      	bne.n	8008388 <__gethex+0x450>
 8008308:	f8d8 2000 	ldr.w	r2, [r8]
 800830c:	3a01      	subs	r2, #1
 800830e:	42b2      	cmp	r2, r6
 8008310:	d10a      	bne.n	8008328 <__gethex+0x3f0>
 8008312:	1171      	asrs	r1, r6, #5
 8008314:	2201      	movs	r2, #1
 8008316:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800831a:	f006 061f 	and.w	r6, r6, #31
 800831e:	fa02 f606 	lsl.w	r6, r2, r6
 8008322:	421e      	tst	r6, r3
 8008324:	bf18      	it	ne
 8008326:	4617      	movne	r7, r2
 8008328:	f047 0720 	orr.w	r7, r7, #32
 800832c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800832e:	601c      	str	r4, [r3, #0]
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	601d      	str	r5, [r3, #0]
 8008334:	e695      	b.n	8008062 <__gethex+0x12a>
 8008336:	4299      	cmp	r1, r3
 8008338:	f843 cc04 	str.w	ip, [r3, #-4]
 800833c:	d8d8      	bhi.n	80082f0 <__gethex+0x3b8>
 800833e:	68a3      	ldr	r3, [r4, #8]
 8008340:	459b      	cmp	fp, r3
 8008342:	db19      	blt.n	8008378 <__gethex+0x440>
 8008344:	6861      	ldr	r1, [r4, #4]
 8008346:	ee18 0a10 	vmov	r0, s16
 800834a:	3101      	adds	r1, #1
 800834c:	f000 f92c 	bl	80085a8 <_Balloc>
 8008350:	4681      	mov	r9, r0
 8008352:	b918      	cbnz	r0, 800835c <__gethex+0x424>
 8008354:	4b1a      	ldr	r3, [pc, #104]	; (80083c0 <__gethex+0x488>)
 8008356:	4602      	mov	r2, r0
 8008358:	2184      	movs	r1, #132	; 0x84
 800835a:	e6a8      	b.n	80080ae <__gethex+0x176>
 800835c:	6922      	ldr	r2, [r4, #16]
 800835e:	3202      	adds	r2, #2
 8008360:	f104 010c 	add.w	r1, r4, #12
 8008364:	0092      	lsls	r2, r2, #2
 8008366:	300c      	adds	r0, #12
 8008368:	f000 f910 	bl	800858c <memcpy>
 800836c:	4621      	mov	r1, r4
 800836e:	ee18 0a10 	vmov	r0, s16
 8008372:	f000 f959 	bl	8008628 <_Bfree>
 8008376:	464c      	mov	r4, r9
 8008378:	6923      	ldr	r3, [r4, #16]
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008380:	6122      	str	r2, [r4, #16]
 8008382:	2201      	movs	r2, #1
 8008384:	615a      	str	r2, [r3, #20]
 8008386:	e7bb      	b.n	8008300 <__gethex+0x3c8>
 8008388:	6922      	ldr	r2, [r4, #16]
 800838a:	455a      	cmp	r2, fp
 800838c:	dd0b      	ble.n	80083a6 <__gethex+0x46e>
 800838e:	2101      	movs	r1, #1
 8008390:	4620      	mov	r0, r4
 8008392:	f7ff fd6a 	bl	8007e6a <rshift>
 8008396:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800839a:	3501      	adds	r5, #1
 800839c:	42ab      	cmp	r3, r5
 800839e:	f6ff aed0 	blt.w	8008142 <__gethex+0x20a>
 80083a2:	2701      	movs	r7, #1
 80083a4:	e7c0      	b.n	8008328 <__gethex+0x3f0>
 80083a6:	f016 061f 	ands.w	r6, r6, #31
 80083aa:	d0fa      	beq.n	80083a2 <__gethex+0x46a>
 80083ac:	449a      	add	sl, r3
 80083ae:	f1c6 0620 	rsb	r6, r6, #32
 80083b2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 80083b6:	f000 f9ed 	bl	8008794 <__hi0bits>
 80083ba:	42b0      	cmp	r0, r6
 80083bc:	dbe7      	blt.n	800838e <__gethex+0x456>
 80083be:	e7f0      	b.n	80083a2 <__gethex+0x46a>
 80083c0:	08009fa4 	.word	0x08009fa4

080083c4 <L_shift>:
 80083c4:	f1c2 0208 	rsb	r2, r2, #8
 80083c8:	0092      	lsls	r2, r2, #2
 80083ca:	b570      	push	{r4, r5, r6, lr}
 80083cc:	f1c2 0620 	rsb	r6, r2, #32
 80083d0:	6843      	ldr	r3, [r0, #4]
 80083d2:	6804      	ldr	r4, [r0, #0]
 80083d4:	fa03 f506 	lsl.w	r5, r3, r6
 80083d8:	432c      	orrs	r4, r5
 80083da:	40d3      	lsrs	r3, r2
 80083dc:	6004      	str	r4, [r0, #0]
 80083de:	f840 3f04 	str.w	r3, [r0, #4]!
 80083e2:	4288      	cmp	r0, r1
 80083e4:	d3f4      	bcc.n	80083d0 <L_shift+0xc>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}

080083e8 <__match>:
 80083e8:	b530      	push	{r4, r5, lr}
 80083ea:	6803      	ldr	r3, [r0, #0]
 80083ec:	3301      	adds	r3, #1
 80083ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083f2:	b914      	cbnz	r4, 80083fa <__match+0x12>
 80083f4:	6003      	str	r3, [r0, #0]
 80083f6:	2001      	movs	r0, #1
 80083f8:	bd30      	pop	{r4, r5, pc}
 80083fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80083fe:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008402:	2d19      	cmp	r5, #25
 8008404:	bf98      	it	ls
 8008406:	3220      	addls	r2, #32
 8008408:	42a2      	cmp	r2, r4
 800840a:	d0f0      	beq.n	80083ee <__match+0x6>
 800840c:	2000      	movs	r0, #0
 800840e:	e7f3      	b.n	80083f8 <__match+0x10>

08008410 <__hexnan>:
 8008410:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008414:	680b      	ldr	r3, [r1, #0]
 8008416:	6801      	ldr	r1, [r0, #0]
 8008418:	115e      	asrs	r6, r3, #5
 800841a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800841e:	f013 031f 	ands.w	r3, r3, #31
 8008422:	b087      	sub	sp, #28
 8008424:	bf18      	it	ne
 8008426:	3604      	addne	r6, #4
 8008428:	2500      	movs	r5, #0
 800842a:	1f37      	subs	r7, r6, #4
 800842c:	4682      	mov	sl, r0
 800842e:	4690      	mov	r8, r2
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	f846 5c04 	str.w	r5, [r6, #-4]
 8008436:	46b9      	mov	r9, r7
 8008438:	463c      	mov	r4, r7
 800843a:	9502      	str	r5, [sp, #8]
 800843c:	46ab      	mov	fp, r5
 800843e:	784a      	ldrb	r2, [r1, #1]
 8008440:	1c4b      	adds	r3, r1, #1
 8008442:	9303      	str	r3, [sp, #12]
 8008444:	b342      	cbz	r2, 8008498 <__hexnan+0x88>
 8008446:	4610      	mov	r0, r2
 8008448:	9105      	str	r1, [sp, #20]
 800844a:	9204      	str	r2, [sp, #16]
 800844c:	f7ff fd5f 	bl	8007f0e <__hexdig_fun>
 8008450:	2800      	cmp	r0, #0
 8008452:	d14f      	bne.n	80084f4 <__hexnan+0xe4>
 8008454:	9a04      	ldr	r2, [sp, #16]
 8008456:	9905      	ldr	r1, [sp, #20]
 8008458:	2a20      	cmp	r2, #32
 800845a:	d818      	bhi.n	800848e <__hexnan+0x7e>
 800845c:	9b02      	ldr	r3, [sp, #8]
 800845e:	459b      	cmp	fp, r3
 8008460:	dd13      	ble.n	800848a <__hexnan+0x7a>
 8008462:	454c      	cmp	r4, r9
 8008464:	d206      	bcs.n	8008474 <__hexnan+0x64>
 8008466:	2d07      	cmp	r5, #7
 8008468:	dc04      	bgt.n	8008474 <__hexnan+0x64>
 800846a:	462a      	mov	r2, r5
 800846c:	4649      	mov	r1, r9
 800846e:	4620      	mov	r0, r4
 8008470:	f7ff ffa8 	bl	80083c4 <L_shift>
 8008474:	4544      	cmp	r4, r8
 8008476:	d950      	bls.n	800851a <__hexnan+0x10a>
 8008478:	2300      	movs	r3, #0
 800847a:	f1a4 0904 	sub.w	r9, r4, #4
 800847e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008482:	f8cd b008 	str.w	fp, [sp, #8]
 8008486:	464c      	mov	r4, r9
 8008488:	461d      	mov	r5, r3
 800848a:	9903      	ldr	r1, [sp, #12]
 800848c:	e7d7      	b.n	800843e <__hexnan+0x2e>
 800848e:	2a29      	cmp	r2, #41	; 0x29
 8008490:	d156      	bne.n	8008540 <__hexnan+0x130>
 8008492:	3102      	adds	r1, #2
 8008494:	f8ca 1000 	str.w	r1, [sl]
 8008498:	f1bb 0f00 	cmp.w	fp, #0
 800849c:	d050      	beq.n	8008540 <__hexnan+0x130>
 800849e:	454c      	cmp	r4, r9
 80084a0:	d206      	bcs.n	80084b0 <__hexnan+0xa0>
 80084a2:	2d07      	cmp	r5, #7
 80084a4:	dc04      	bgt.n	80084b0 <__hexnan+0xa0>
 80084a6:	462a      	mov	r2, r5
 80084a8:	4649      	mov	r1, r9
 80084aa:	4620      	mov	r0, r4
 80084ac:	f7ff ff8a 	bl	80083c4 <L_shift>
 80084b0:	4544      	cmp	r4, r8
 80084b2:	d934      	bls.n	800851e <__hexnan+0x10e>
 80084b4:	f1a8 0204 	sub.w	r2, r8, #4
 80084b8:	4623      	mov	r3, r4
 80084ba:	f853 1b04 	ldr.w	r1, [r3], #4
 80084be:	f842 1f04 	str.w	r1, [r2, #4]!
 80084c2:	429f      	cmp	r7, r3
 80084c4:	d2f9      	bcs.n	80084ba <__hexnan+0xaa>
 80084c6:	1b3b      	subs	r3, r7, r4
 80084c8:	f023 0303 	bic.w	r3, r3, #3
 80084cc:	3304      	adds	r3, #4
 80084ce:	3401      	adds	r4, #1
 80084d0:	3e03      	subs	r6, #3
 80084d2:	42b4      	cmp	r4, r6
 80084d4:	bf88      	it	hi
 80084d6:	2304      	movhi	r3, #4
 80084d8:	4443      	add	r3, r8
 80084da:	2200      	movs	r2, #0
 80084dc:	f843 2b04 	str.w	r2, [r3], #4
 80084e0:	429f      	cmp	r7, r3
 80084e2:	d2fb      	bcs.n	80084dc <__hexnan+0xcc>
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	b91b      	cbnz	r3, 80084f0 <__hexnan+0xe0>
 80084e8:	4547      	cmp	r7, r8
 80084ea:	d127      	bne.n	800853c <__hexnan+0x12c>
 80084ec:	2301      	movs	r3, #1
 80084ee:	603b      	str	r3, [r7, #0]
 80084f0:	2005      	movs	r0, #5
 80084f2:	e026      	b.n	8008542 <__hexnan+0x132>
 80084f4:	3501      	adds	r5, #1
 80084f6:	2d08      	cmp	r5, #8
 80084f8:	f10b 0b01 	add.w	fp, fp, #1
 80084fc:	dd06      	ble.n	800850c <__hexnan+0xfc>
 80084fe:	4544      	cmp	r4, r8
 8008500:	d9c3      	bls.n	800848a <__hexnan+0x7a>
 8008502:	2300      	movs	r3, #0
 8008504:	f844 3c04 	str.w	r3, [r4, #-4]
 8008508:	2501      	movs	r5, #1
 800850a:	3c04      	subs	r4, #4
 800850c:	6822      	ldr	r2, [r4, #0]
 800850e:	f000 000f 	and.w	r0, r0, #15
 8008512:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008516:	6022      	str	r2, [r4, #0]
 8008518:	e7b7      	b.n	800848a <__hexnan+0x7a>
 800851a:	2508      	movs	r5, #8
 800851c:	e7b5      	b.n	800848a <__hexnan+0x7a>
 800851e:	9b01      	ldr	r3, [sp, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d0df      	beq.n	80084e4 <__hexnan+0xd4>
 8008524:	f04f 32ff 	mov.w	r2, #4294967295
 8008528:	f1c3 0320 	rsb	r3, r3, #32
 800852c:	fa22 f303 	lsr.w	r3, r2, r3
 8008530:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008534:	401a      	ands	r2, r3
 8008536:	f846 2c04 	str.w	r2, [r6, #-4]
 800853a:	e7d3      	b.n	80084e4 <__hexnan+0xd4>
 800853c:	3f04      	subs	r7, #4
 800853e:	e7d1      	b.n	80084e4 <__hexnan+0xd4>
 8008540:	2004      	movs	r0, #4
 8008542:	b007      	add	sp, #28
 8008544:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008548 <_localeconv_r>:
 8008548:	4800      	ldr	r0, [pc, #0]	; (800854c <_localeconv_r+0x4>)
 800854a:	4770      	bx	lr
 800854c:	20000164 	.word	0x20000164

08008550 <__retarget_lock_init_recursive>:
 8008550:	4770      	bx	lr

08008552 <__retarget_lock_acquire_recursive>:
 8008552:	4770      	bx	lr

08008554 <__retarget_lock_release_recursive>:
 8008554:	4770      	bx	lr
	...

08008558 <malloc>:
 8008558:	4b02      	ldr	r3, [pc, #8]	; (8008564 <malloc+0xc>)
 800855a:	4601      	mov	r1, r0
 800855c:	6818      	ldr	r0, [r3, #0]
 800855e:	f000 bd3d 	b.w	8008fdc <_malloc_r>
 8008562:	bf00      	nop
 8008564:	2000000c 	.word	0x2000000c

08008568 <__ascii_mbtowc>:
 8008568:	b082      	sub	sp, #8
 800856a:	b901      	cbnz	r1, 800856e <__ascii_mbtowc+0x6>
 800856c:	a901      	add	r1, sp, #4
 800856e:	b142      	cbz	r2, 8008582 <__ascii_mbtowc+0x1a>
 8008570:	b14b      	cbz	r3, 8008586 <__ascii_mbtowc+0x1e>
 8008572:	7813      	ldrb	r3, [r2, #0]
 8008574:	600b      	str	r3, [r1, #0]
 8008576:	7812      	ldrb	r2, [r2, #0]
 8008578:	1e10      	subs	r0, r2, #0
 800857a:	bf18      	it	ne
 800857c:	2001      	movne	r0, #1
 800857e:	b002      	add	sp, #8
 8008580:	4770      	bx	lr
 8008582:	4610      	mov	r0, r2
 8008584:	e7fb      	b.n	800857e <__ascii_mbtowc+0x16>
 8008586:	f06f 0001 	mvn.w	r0, #1
 800858a:	e7f8      	b.n	800857e <__ascii_mbtowc+0x16>

0800858c <memcpy>:
 800858c:	440a      	add	r2, r1
 800858e:	4291      	cmp	r1, r2
 8008590:	f100 33ff 	add.w	r3, r0, #4294967295
 8008594:	d100      	bne.n	8008598 <memcpy+0xc>
 8008596:	4770      	bx	lr
 8008598:	b510      	push	{r4, lr}
 800859a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800859e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80085a2:	4291      	cmp	r1, r2
 80085a4:	d1f9      	bne.n	800859a <memcpy+0xe>
 80085a6:	bd10      	pop	{r4, pc}

080085a8 <_Balloc>:
 80085a8:	b570      	push	{r4, r5, r6, lr}
 80085aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80085ac:	4604      	mov	r4, r0
 80085ae:	460d      	mov	r5, r1
 80085b0:	b976      	cbnz	r6, 80085d0 <_Balloc+0x28>
 80085b2:	2010      	movs	r0, #16
 80085b4:	f7ff ffd0 	bl	8008558 <malloc>
 80085b8:	4602      	mov	r2, r0
 80085ba:	6260      	str	r0, [r4, #36]	; 0x24
 80085bc:	b920      	cbnz	r0, 80085c8 <_Balloc+0x20>
 80085be:	4b18      	ldr	r3, [pc, #96]	; (8008620 <_Balloc+0x78>)
 80085c0:	4818      	ldr	r0, [pc, #96]	; (8008624 <_Balloc+0x7c>)
 80085c2:	2166      	movs	r1, #102	; 0x66
 80085c4:	f001 f96a 	bl	800989c <__assert_func>
 80085c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80085cc:	6006      	str	r6, [r0, #0]
 80085ce:	60c6      	str	r6, [r0, #12]
 80085d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80085d2:	68f3      	ldr	r3, [r6, #12]
 80085d4:	b183      	cbz	r3, 80085f8 <_Balloc+0x50>
 80085d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80085de:	b9b8      	cbnz	r0, 8008610 <_Balloc+0x68>
 80085e0:	2101      	movs	r1, #1
 80085e2:	fa01 f605 	lsl.w	r6, r1, r5
 80085e6:	1d72      	adds	r2, r6, #5
 80085e8:	0092      	lsls	r2, r2, #2
 80085ea:	4620      	mov	r0, r4
 80085ec:	f000 fc97 	bl	8008f1e <_calloc_r>
 80085f0:	b160      	cbz	r0, 800860c <_Balloc+0x64>
 80085f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80085f6:	e00e      	b.n	8008616 <_Balloc+0x6e>
 80085f8:	2221      	movs	r2, #33	; 0x21
 80085fa:	2104      	movs	r1, #4
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fc8e 	bl	8008f1e <_calloc_r>
 8008602:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008604:	60f0      	str	r0, [r6, #12]
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d1e4      	bne.n	80085d6 <_Balloc+0x2e>
 800860c:	2000      	movs	r0, #0
 800860e:	bd70      	pop	{r4, r5, r6, pc}
 8008610:	6802      	ldr	r2, [r0, #0]
 8008612:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008616:	2300      	movs	r3, #0
 8008618:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800861c:	e7f7      	b.n	800860e <_Balloc+0x66>
 800861e:	bf00      	nop
 8008620:	08009f2e 	.word	0x08009f2e
 8008624:	0800a098 	.word	0x0800a098

08008628 <_Bfree>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800862c:	4605      	mov	r5, r0
 800862e:	460c      	mov	r4, r1
 8008630:	b976      	cbnz	r6, 8008650 <_Bfree+0x28>
 8008632:	2010      	movs	r0, #16
 8008634:	f7ff ff90 	bl	8008558 <malloc>
 8008638:	4602      	mov	r2, r0
 800863a:	6268      	str	r0, [r5, #36]	; 0x24
 800863c:	b920      	cbnz	r0, 8008648 <_Bfree+0x20>
 800863e:	4b09      	ldr	r3, [pc, #36]	; (8008664 <_Bfree+0x3c>)
 8008640:	4809      	ldr	r0, [pc, #36]	; (8008668 <_Bfree+0x40>)
 8008642:	218a      	movs	r1, #138	; 0x8a
 8008644:	f001 f92a 	bl	800989c <__assert_func>
 8008648:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800864c:	6006      	str	r6, [r0, #0]
 800864e:	60c6      	str	r6, [r0, #12]
 8008650:	b13c      	cbz	r4, 8008662 <_Bfree+0x3a>
 8008652:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8008654:	6862      	ldr	r2, [r4, #4]
 8008656:	68db      	ldr	r3, [r3, #12]
 8008658:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800865c:	6021      	str	r1, [r4, #0]
 800865e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	08009f2e 	.word	0x08009f2e
 8008668:	0800a098 	.word	0x0800a098

0800866c <__multadd>:
 800866c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008670:	690e      	ldr	r6, [r1, #16]
 8008672:	4607      	mov	r7, r0
 8008674:	4698      	mov	r8, r3
 8008676:	460c      	mov	r4, r1
 8008678:	f101 0014 	add.w	r0, r1, #20
 800867c:	2300      	movs	r3, #0
 800867e:	6805      	ldr	r5, [r0, #0]
 8008680:	b2a9      	uxth	r1, r5
 8008682:	fb02 8101 	mla	r1, r2, r1, r8
 8008686:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800868a:	0c2d      	lsrs	r5, r5, #16
 800868c:	fb02 c505 	mla	r5, r2, r5, ip
 8008690:	b289      	uxth	r1, r1
 8008692:	3301      	adds	r3, #1
 8008694:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8008698:	429e      	cmp	r6, r3
 800869a:	f840 1b04 	str.w	r1, [r0], #4
 800869e:	ea4f 4815 	mov.w	r8, r5, lsr #16
 80086a2:	dcec      	bgt.n	800867e <__multadd+0x12>
 80086a4:	f1b8 0f00 	cmp.w	r8, #0
 80086a8:	d022      	beq.n	80086f0 <__multadd+0x84>
 80086aa:	68a3      	ldr	r3, [r4, #8]
 80086ac:	42b3      	cmp	r3, r6
 80086ae:	dc19      	bgt.n	80086e4 <__multadd+0x78>
 80086b0:	6861      	ldr	r1, [r4, #4]
 80086b2:	4638      	mov	r0, r7
 80086b4:	3101      	adds	r1, #1
 80086b6:	f7ff ff77 	bl	80085a8 <_Balloc>
 80086ba:	4605      	mov	r5, r0
 80086bc:	b928      	cbnz	r0, 80086ca <__multadd+0x5e>
 80086be:	4602      	mov	r2, r0
 80086c0:	4b0d      	ldr	r3, [pc, #52]	; (80086f8 <__multadd+0x8c>)
 80086c2:	480e      	ldr	r0, [pc, #56]	; (80086fc <__multadd+0x90>)
 80086c4:	21b5      	movs	r1, #181	; 0xb5
 80086c6:	f001 f8e9 	bl	800989c <__assert_func>
 80086ca:	6922      	ldr	r2, [r4, #16]
 80086cc:	3202      	adds	r2, #2
 80086ce:	f104 010c 	add.w	r1, r4, #12
 80086d2:	0092      	lsls	r2, r2, #2
 80086d4:	300c      	adds	r0, #12
 80086d6:	f7ff ff59 	bl	800858c <memcpy>
 80086da:	4621      	mov	r1, r4
 80086dc:	4638      	mov	r0, r7
 80086de:	f7ff ffa3 	bl	8008628 <_Bfree>
 80086e2:	462c      	mov	r4, r5
 80086e4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 80086e8:	3601      	adds	r6, #1
 80086ea:	f8c3 8014 	str.w	r8, [r3, #20]
 80086ee:	6126      	str	r6, [r4, #16]
 80086f0:	4620      	mov	r0, r4
 80086f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086f6:	bf00      	nop
 80086f8:	08009fa4 	.word	0x08009fa4
 80086fc:	0800a098 	.word	0x0800a098

08008700 <__s2b>:
 8008700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008704:	460c      	mov	r4, r1
 8008706:	4615      	mov	r5, r2
 8008708:	461f      	mov	r7, r3
 800870a:	2209      	movs	r2, #9
 800870c:	3308      	adds	r3, #8
 800870e:	4606      	mov	r6, r0
 8008710:	fb93 f3f2 	sdiv	r3, r3, r2
 8008714:	2100      	movs	r1, #0
 8008716:	2201      	movs	r2, #1
 8008718:	429a      	cmp	r2, r3
 800871a:	db09      	blt.n	8008730 <__s2b+0x30>
 800871c:	4630      	mov	r0, r6
 800871e:	f7ff ff43 	bl	80085a8 <_Balloc>
 8008722:	b940      	cbnz	r0, 8008736 <__s2b+0x36>
 8008724:	4602      	mov	r2, r0
 8008726:	4b19      	ldr	r3, [pc, #100]	; (800878c <__s2b+0x8c>)
 8008728:	4819      	ldr	r0, [pc, #100]	; (8008790 <__s2b+0x90>)
 800872a:	21ce      	movs	r1, #206	; 0xce
 800872c:	f001 f8b6 	bl	800989c <__assert_func>
 8008730:	0052      	lsls	r2, r2, #1
 8008732:	3101      	adds	r1, #1
 8008734:	e7f0      	b.n	8008718 <__s2b+0x18>
 8008736:	9b08      	ldr	r3, [sp, #32]
 8008738:	6143      	str	r3, [r0, #20]
 800873a:	2d09      	cmp	r5, #9
 800873c:	f04f 0301 	mov.w	r3, #1
 8008740:	6103      	str	r3, [r0, #16]
 8008742:	dd16      	ble.n	8008772 <__s2b+0x72>
 8008744:	f104 0909 	add.w	r9, r4, #9
 8008748:	46c8      	mov	r8, r9
 800874a:	442c      	add	r4, r5
 800874c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008750:	4601      	mov	r1, r0
 8008752:	3b30      	subs	r3, #48	; 0x30
 8008754:	220a      	movs	r2, #10
 8008756:	4630      	mov	r0, r6
 8008758:	f7ff ff88 	bl	800866c <__multadd>
 800875c:	45a0      	cmp	r8, r4
 800875e:	d1f5      	bne.n	800874c <__s2b+0x4c>
 8008760:	f1a5 0408 	sub.w	r4, r5, #8
 8008764:	444c      	add	r4, r9
 8008766:	1b2d      	subs	r5, r5, r4
 8008768:	1963      	adds	r3, r4, r5
 800876a:	42bb      	cmp	r3, r7
 800876c:	db04      	blt.n	8008778 <__s2b+0x78>
 800876e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008772:	340a      	adds	r4, #10
 8008774:	2509      	movs	r5, #9
 8008776:	e7f6      	b.n	8008766 <__s2b+0x66>
 8008778:	f814 3b01 	ldrb.w	r3, [r4], #1
 800877c:	4601      	mov	r1, r0
 800877e:	3b30      	subs	r3, #48	; 0x30
 8008780:	220a      	movs	r2, #10
 8008782:	4630      	mov	r0, r6
 8008784:	f7ff ff72 	bl	800866c <__multadd>
 8008788:	e7ee      	b.n	8008768 <__s2b+0x68>
 800878a:	bf00      	nop
 800878c:	08009fa4 	.word	0x08009fa4
 8008790:	0800a098 	.word	0x0800a098

08008794 <__hi0bits>:
 8008794:	0c03      	lsrs	r3, r0, #16
 8008796:	041b      	lsls	r3, r3, #16
 8008798:	b9d3      	cbnz	r3, 80087d0 <__hi0bits+0x3c>
 800879a:	0400      	lsls	r0, r0, #16
 800879c:	2310      	movs	r3, #16
 800879e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80087a2:	bf04      	itt	eq
 80087a4:	0200      	lsleq	r0, r0, #8
 80087a6:	3308      	addeq	r3, #8
 80087a8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80087ac:	bf04      	itt	eq
 80087ae:	0100      	lsleq	r0, r0, #4
 80087b0:	3304      	addeq	r3, #4
 80087b2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80087b6:	bf04      	itt	eq
 80087b8:	0080      	lsleq	r0, r0, #2
 80087ba:	3302      	addeq	r3, #2
 80087bc:	2800      	cmp	r0, #0
 80087be:	db05      	blt.n	80087cc <__hi0bits+0x38>
 80087c0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80087c4:	f103 0301 	add.w	r3, r3, #1
 80087c8:	bf08      	it	eq
 80087ca:	2320      	moveq	r3, #32
 80087cc:	4618      	mov	r0, r3
 80087ce:	4770      	bx	lr
 80087d0:	2300      	movs	r3, #0
 80087d2:	e7e4      	b.n	800879e <__hi0bits+0xa>

080087d4 <__lo0bits>:
 80087d4:	6803      	ldr	r3, [r0, #0]
 80087d6:	f013 0207 	ands.w	r2, r3, #7
 80087da:	4601      	mov	r1, r0
 80087dc:	d00b      	beq.n	80087f6 <__lo0bits+0x22>
 80087de:	07da      	lsls	r2, r3, #31
 80087e0:	d424      	bmi.n	800882c <__lo0bits+0x58>
 80087e2:	0798      	lsls	r0, r3, #30
 80087e4:	bf49      	itett	mi
 80087e6:	085b      	lsrmi	r3, r3, #1
 80087e8:	089b      	lsrpl	r3, r3, #2
 80087ea:	2001      	movmi	r0, #1
 80087ec:	600b      	strmi	r3, [r1, #0]
 80087ee:	bf5c      	itt	pl
 80087f0:	600b      	strpl	r3, [r1, #0]
 80087f2:	2002      	movpl	r0, #2
 80087f4:	4770      	bx	lr
 80087f6:	b298      	uxth	r0, r3
 80087f8:	b9b0      	cbnz	r0, 8008828 <__lo0bits+0x54>
 80087fa:	0c1b      	lsrs	r3, r3, #16
 80087fc:	2010      	movs	r0, #16
 80087fe:	f013 0fff 	tst.w	r3, #255	; 0xff
 8008802:	bf04      	itt	eq
 8008804:	0a1b      	lsreq	r3, r3, #8
 8008806:	3008      	addeq	r0, #8
 8008808:	071a      	lsls	r2, r3, #28
 800880a:	bf04      	itt	eq
 800880c:	091b      	lsreq	r3, r3, #4
 800880e:	3004      	addeq	r0, #4
 8008810:	079a      	lsls	r2, r3, #30
 8008812:	bf04      	itt	eq
 8008814:	089b      	lsreq	r3, r3, #2
 8008816:	3002      	addeq	r0, #2
 8008818:	07da      	lsls	r2, r3, #31
 800881a:	d403      	bmi.n	8008824 <__lo0bits+0x50>
 800881c:	085b      	lsrs	r3, r3, #1
 800881e:	f100 0001 	add.w	r0, r0, #1
 8008822:	d005      	beq.n	8008830 <__lo0bits+0x5c>
 8008824:	600b      	str	r3, [r1, #0]
 8008826:	4770      	bx	lr
 8008828:	4610      	mov	r0, r2
 800882a:	e7e8      	b.n	80087fe <__lo0bits+0x2a>
 800882c:	2000      	movs	r0, #0
 800882e:	4770      	bx	lr
 8008830:	2020      	movs	r0, #32
 8008832:	4770      	bx	lr

08008834 <__i2b>:
 8008834:	b510      	push	{r4, lr}
 8008836:	460c      	mov	r4, r1
 8008838:	2101      	movs	r1, #1
 800883a:	f7ff feb5 	bl	80085a8 <_Balloc>
 800883e:	4602      	mov	r2, r0
 8008840:	b928      	cbnz	r0, 800884e <__i2b+0x1a>
 8008842:	4b05      	ldr	r3, [pc, #20]	; (8008858 <__i2b+0x24>)
 8008844:	4805      	ldr	r0, [pc, #20]	; (800885c <__i2b+0x28>)
 8008846:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800884a:	f001 f827 	bl	800989c <__assert_func>
 800884e:	2301      	movs	r3, #1
 8008850:	6144      	str	r4, [r0, #20]
 8008852:	6103      	str	r3, [r0, #16]
 8008854:	bd10      	pop	{r4, pc}
 8008856:	bf00      	nop
 8008858:	08009fa4 	.word	0x08009fa4
 800885c:	0800a098 	.word	0x0800a098

08008860 <__multiply>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	4614      	mov	r4, r2
 8008866:	690a      	ldr	r2, [r1, #16]
 8008868:	6923      	ldr	r3, [r4, #16]
 800886a:	429a      	cmp	r2, r3
 800886c:	bfb8      	it	lt
 800886e:	460b      	movlt	r3, r1
 8008870:	460d      	mov	r5, r1
 8008872:	bfbc      	itt	lt
 8008874:	4625      	movlt	r5, r4
 8008876:	461c      	movlt	r4, r3
 8008878:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800887c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008880:	68ab      	ldr	r3, [r5, #8]
 8008882:	6869      	ldr	r1, [r5, #4]
 8008884:	eb0a 0709 	add.w	r7, sl, r9
 8008888:	42bb      	cmp	r3, r7
 800888a:	b085      	sub	sp, #20
 800888c:	bfb8      	it	lt
 800888e:	3101      	addlt	r1, #1
 8008890:	f7ff fe8a 	bl	80085a8 <_Balloc>
 8008894:	b930      	cbnz	r0, 80088a4 <__multiply+0x44>
 8008896:	4602      	mov	r2, r0
 8008898:	4b42      	ldr	r3, [pc, #264]	; (80089a4 <__multiply+0x144>)
 800889a:	4843      	ldr	r0, [pc, #268]	; (80089a8 <__multiply+0x148>)
 800889c:	f240 115d 	movw	r1, #349	; 0x15d
 80088a0:	f000 fffc 	bl	800989c <__assert_func>
 80088a4:	f100 0614 	add.w	r6, r0, #20
 80088a8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 80088ac:	4633      	mov	r3, r6
 80088ae:	2200      	movs	r2, #0
 80088b0:	4543      	cmp	r3, r8
 80088b2:	d31e      	bcc.n	80088f2 <__multiply+0x92>
 80088b4:	f105 0c14 	add.w	ip, r5, #20
 80088b8:	f104 0314 	add.w	r3, r4, #20
 80088bc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 80088c0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 80088c4:	9202      	str	r2, [sp, #8]
 80088c6:	ebac 0205 	sub.w	r2, ip, r5
 80088ca:	3a15      	subs	r2, #21
 80088cc:	f022 0203 	bic.w	r2, r2, #3
 80088d0:	3204      	adds	r2, #4
 80088d2:	f105 0115 	add.w	r1, r5, #21
 80088d6:	458c      	cmp	ip, r1
 80088d8:	bf38      	it	cc
 80088da:	2204      	movcc	r2, #4
 80088dc:	9201      	str	r2, [sp, #4]
 80088de:	9a02      	ldr	r2, [sp, #8]
 80088e0:	9303      	str	r3, [sp, #12]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	d808      	bhi.n	80088f8 <__multiply+0x98>
 80088e6:	2f00      	cmp	r7, #0
 80088e8:	dc55      	bgt.n	8008996 <__multiply+0x136>
 80088ea:	6107      	str	r7, [r0, #16]
 80088ec:	b005      	add	sp, #20
 80088ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088f2:	f843 2b04 	str.w	r2, [r3], #4
 80088f6:	e7db      	b.n	80088b0 <__multiply+0x50>
 80088f8:	f8b3 a000 	ldrh.w	sl, [r3]
 80088fc:	f1ba 0f00 	cmp.w	sl, #0
 8008900:	d020      	beq.n	8008944 <__multiply+0xe4>
 8008902:	f105 0e14 	add.w	lr, r5, #20
 8008906:	46b1      	mov	r9, r6
 8008908:	2200      	movs	r2, #0
 800890a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800890e:	f8d9 b000 	ldr.w	fp, [r9]
 8008912:	b2a1      	uxth	r1, r4
 8008914:	fa1f fb8b 	uxth.w	fp, fp
 8008918:	fb0a b101 	mla	r1, sl, r1, fp
 800891c:	4411      	add	r1, r2
 800891e:	f8d9 2000 	ldr.w	r2, [r9]
 8008922:	0c24      	lsrs	r4, r4, #16
 8008924:	0c12      	lsrs	r2, r2, #16
 8008926:	fb0a 2404 	mla	r4, sl, r4, r2
 800892a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800892e:	b289      	uxth	r1, r1
 8008930:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8008934:	45f4      	cmp	ip, lr
 8008936:	f849 1b04 	str.w	r1, [r9], #4
 800893a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800893e:	d8e4      	bhi.n	800890a <__multiply+0xaa>
 8008940:	9901      	ldr	r1, [sp, #4]
 8008942:	5072      	str	r2, [r6, r1]
 8008944:	9a03      	ldr	r2, [sp, #12]
 8008946:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800894a:	3304      	adds	r3, #4
 800894c:	f1b9 0f00 	cmp.w	r9, #0
 8008950:	d01f      	beq.n	8008992 <__multiply+0x132>
 8008952:	6834      	ldr	r4, [r6, #0]
 8008954:	f105 0114 	add.w	r1, r5, #20
 8008958:	46b6      	mov	lr, r6
 800895a:	f04f 0a00 	mov.w	sl, #0
 800895e:	880a      	ldrh	r2, [r1, #0]
 8008960:	f8be b002 	ldrh.w	fp, [lr, #2]
 8008964:	fb09 b202 	mla	r2, r9, r2, fp
 8008968:	4492      	add	sl, r2
 800896a:	b2a4      	uxth	r4, r4
 800896c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8008970:	f84e 4b04 	str.w	r4, [lr], #4
 8008974:	f851 4b04 	ldr.w	r4, [r1], #4
 8008978:	f8be 2000 	ldrh.w	r2, [lr]
 800897c:	0c24      	lsrs	r4, r4, #16
 800897e:	fb09 2404 	mla	r4, r9, r4, r2
 8008982:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8008986:	458c      	cmp	ip, r1
 8008988:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800898c:	d8e7      	bhi.n	800895e <__multiply+0xfe>
 800898e:	9a01      	ldr	r2, [sp, #4]
 8008990:	50b4      	str	r4, [r6, r2]
 8008992:	3604      	adds	r6, #4
 8008994:	e7a3      	b.n	80088de <__multiply+0x7e>
 8008996:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800899a:	2b00      	cmp	r3, #0
 800899c:	d1a5      	bne.n	80088ea <__multiply+0x8a>
 800899e:	3f01      	subs	r7, #1
 80089a0:	e7a1      	b.n	80088e6 <__multiply+0x86>
 80089a2:	bf00      	nop
 80089a4:	08009fa4 	.word	0x08009fa4
 80089a8:	0800a098 	.word	0x0800a098

080089ac <__pow5mult>:
 80089ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089b0:	4615      	mov	r5, r2
 80089b2:	f012 0203 	ands.w	r2, r2, #3
 80089b6:	4606      	mov	r6, r0
 80089b8:	460f      	mov	r7, r1
 80089ba:	d007      	beq.n	80089cc <__pow5mult+0x20>
 80089bc:	4c25      	ldr	r4, [pc, #148]	; (8008a54 <__pow5mult+0xa8>)
 80089be:	3a01      	subs	r2, #1
 80089c0:	2300      	movs	r3, #0
 80089c2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80089c6:	f7ff fe51 	bl	800866c <__multadd>
 80089ca:	4607      	mov	r7, r0
 80089cc:	10ad      	asrs	r5, r5, #2
 80089ce:	d03d      	beq.n	8008a4c <__pow5mult+0xa0>
 80089d0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80089d2:	b97c      	cbnz	r4, 80089f4 <__pow5mult+0x48>
 80089d4:	2010      	movs	r0, #16
 80089d6:	f7ff fdbf 	bl	8008558 <malloc>
 80089da:	4602      	mov	r2, r0
 80089dc:	6270      	str	r0, [r6, #36]	; 0x24
 80089de:	b928      	cbnz	r0, 80089ec <__pow5mult+0x40>
 80089e0:	4b1d      	ldr	r3, [pc, #116]	; (8008a58 <__pow5mult+0xac>)
 80089e2:	481e      	ldr	r0, [pc, #120]	; (8008a5c <__pow5mult+0xb0>)
 80089e4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80089e8:	f000 ff58 	bl	800989c <__assert_func>
 80089ec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80089f0:	6004      	str	r4, [r0, #0]
 80089f2:	60c4      	str	r4, [r0, #12]
 80089f4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80089f8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80089fc:	b94c      	cbnz	r4, 8008a12 <__pow5mult+0x66>
 80089fe:	f240 2171 	movw	r1, #625	; 0x271
 8008a02:	4630      	mov	r0, r6
 8008a04:	f7ff ff16 	bl	8008834 <__i2b>
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a0e:	4604      	mov	r4, r0
 8008a10:	6003      	str	r3, [r0, #0]
 8008a12:	f04f 0900 	mov.w	r9, #0
 8008a16:	07eb      	lsls	r3, r5, #31
 8008a18:	d50a      	bpl.n	8008a30 <__pow5mult+0x84>
 8008a1a:	4639      	mov	r1, r7
 8008a1c:	4622      	mov	r2, r4
 8008a1e:	4630      	mov	r0, r6
 8008a20:	f7ff ff1e 	bl	8008860 <__multiply>
 8008a24:	4639      	mov	r1, r7
 8008a26:	4680      	mov	r8, r0
 8008a28:	4630      	mov	r0, r6
 8008a2a:	f7ff fdfd 	bl	8008628 <_Bfree>
 8008a2e:	4647      	mov	r7, r8
 8008a30:	106d      	asrs	r5, r5, #1
 8008a32:	d00b      	beq.n	8008a4c <__pow5mult+0xa0>
 8008a34:	6820      	ldr	r0, [r4, #0]
 8008a36:	b938      	cbnz	r0, 8008a48 <__pow5mult+0x9c>
 8008a38:	4622      	mov	r2, r4
 8008a3a:	4621      	mov	r1, r4
 8008a3c:	4630      	mov	r0, r6
 8008a3e:	f7ff ff0f 	bl	8008860 <__multiply>
 8008a42:	6020      	str	r0, [r4, #0]
 8008a44:	f8c0 9000 	str.w	r9, [r0]
 8008a48:	4604      	mov	r4, r0
 8008a4a:	e7e4      	b.n	8008a16 <__pow5mult+0x6a>
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a52:	bf00      	nop
 8008a54:	0800a1e8 	.word	0x0800a1e8
 8008a58:	08009f2e 	.word	0x08009f2e
 8008a5c:	0800a098 	.word	0x0800a098

08008a60 <__lshift>:
 8008a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a64:	460c      	mov	r4, r1
 8008a66:	6849      	ldr	r1, [r1, #4]
 8008a68:	6923      	ldr	r3, [r4, #16]
 8008a6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008a6e:	68a3      	ldr	r3, [r4, #8]
 8008a70:	4607      	mov	r7, r0
 8008a72:	4691      	mov	r9, r2
 8008a74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008a78:	f108 0601 	add.w	r6, r8, #1
 8008a7c:	42b3      	cmp	r3, r6
 8008a7e:	db0b      	blt.n	8008a98 <__lshift+0x38>
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff fd91 	bl	80085a8 <_Balloc>
 8008a86:	4605      	mov	r5, r0
 8008a88:	b948      	cbnz	r0, 8008a9e <__lshift+0x3e>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	4b28      	ldr	r3, [pc, #160]	; (8008b30 <__lshift+0xd0>)
 8008a8e:	4829      	ldr	r0, [pc, #164]	; (8008b34 <__lshift+0xd4>)
 8008a90:	f240 11d9 	movw	r1, #473	; 0x1d9
 8008a94:	f000 ff02 	bl	800989c <__assert_func>
 8008a98:	3101      	adds	r1, #1
 8008a9a:	005b      	lsls	r3, r3, #1
 8008a9c:	e7ee      	b.n	8008a7c <__lshift+0x1c>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f100 0114 	add.w	r1, r0, #20
 8008aa4:	f100 0210 	add.w	r2, r0, #16
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	4553      	cmp	r3, sl
 8008aac:	db33      	blt.n	8008b16 <__lshift+0xb6>
 8008aae:	6920      	ldr	r0, [r4, #16]
 8008ab0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008ab4:	f104 0314 	add.w	r3, r4, #20
 8008ab8:	f019 091f 	ands.w	r9, r9, #31
 8008abc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008ac0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008ac4:	d02b      	beq.n	8008b1e <__lshift+0xbe>
 8008ac6:	f1c9 0e20 	rsb	lr, r9, #32
 8008aca:	468a      	mov	sl, r1
 8008acc:	2200      	movs	r2, #0
 8008ace:	6818      	ldr	r0, [r3, #0]
 8008ad0:	fa00 f009 	lsl.w	r0, r0, r9
 8008ad4:	4302      	orrs	r2, r0
 8008ad6:	f84a 2b04 	str.w	r2, [sl], #4
 8008ada:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ade:	459c      	cmp	ip, r3
 8008ae0:	fa22 f20e 	lsr.w	r2, r2, lr
 8008ae4:	d8f3      	bhi.n	8008ace <__lshift+0x6e>
 8008ae6:	ebac 0304 	sub.w	r3, ip, r4
 8008aea:	3b15      	subs	r3, #21
 8008aec:	f023 0303 	bic.w	r3, r3, #3
 8008af0:	3304      	adds	r3, #4
 8008af2:	f104 0015 	add.w	r0, r4, #21
 8008af6:	4584      	cmp	ip, r0
 8008af8:	bf38      	it	cc
 8008afa:	2304      	movcc	r3, #4
 8008afc:	50ca      	str	r2, [r1, r3]
 8008afe:	b10a      	cbz	r2, 8008b04 <__lshift+0xa4>
 8008b00:	f108 0602 	add.w	r6, r8, #2
 8008b04:	3e01      	subs	r6, #1
 8008b06:	4638      	mov	r0, r7
 8008b08:	612e      	str	r6, [r5, #16]
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	f7ff fd8c 	bl	8008628 <_Bfree>
 8008b10:	4628      	mov	r0, r5
 8008b12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b16:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b1a:	3301      	adds	r3, #1
 8008b1c:	e7c5      	b.n	8008aaa <__lshift+0x4a>
 8008b1e:	3904      	subs	r1, #4
 8008b20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b24:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b28:	459c      	cmp	ip, r3
 8008b2a:	d8f9      	bhi.n	8008b20 <__lshift+0xc0>
 8008b2c:	e7ea      	b.n	8008b04 <__lshift+0xa4>
 8008b2e:	bf00      	nop
 8008b30:	08009fa4 	.word	0x08009fa4
 8008b34:	0800a098 	.word	0x0800a098

08008b38 <__mcmp>:
 8008b38:	b530      	push	{r4, r5, lr}
 8008b3a:	6902      	ldr	r2, [r0, #16]
 8008b3c:	690c      	ldr	r4, [r1, #16]
 8008b3e:	1b12      	subs	r2, r2, r4
 8008b40:	d10e      	bne.n	8008b60 <__mcmp+0x28>
 8008b42:	f100 0314 	add.w	r3, r0, #20
 8008b46:	3114      	adds	r1, #20
 8008b48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8008b4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008b50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8008b54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8008b58:	42a5      	cmp	r5, r4
 8008b5a:	d003      	beq.n	8008b64 <__mcmp+0x2c>
 8008b5c:	d305      	bcc.n	8008b6a <__mcmp+0x32>
 8008b5e:	2201      	movs	r2, #1
 8008b60:	4610      	mov	r0, r2
 8008b62:	bd30      	pop	{r4, r5, pc}
 8008b64:	4283      	cmp	r3, r0
 8008b66:	d3f3      	bcc.n	8008b50 <__mcmp+0x18>
 8008b68:	e7fa      	b.n	8008b60 <__mcmp+0x28>
 8008b6a:	f04f 32ff 	mov.w	r2, #4294967295
 8008b6e:	e7f7      	b.n	8008b60 <__mcmp+0x28>

08008b70 <__mdiff>:
 8008b70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b74:	460c      	mov	r4, r1
 8008b76:	4606      	mov	r6, r0
 8008b78:	4611      	mov	r1, r2
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4617      	mov	r7, r2
 8008b7e:	f7ff ffdb 	bl	8008b38 <__mcmp>
 8008b82:	1e05      	subs	r5, r0, #0
 8008b84:	d110      	bne.n	8008ba8 <__mdiff+0x38>
 8008b86:	4629      	mov	r1, r5
 8008b88:	4630      	mov	r0, r6
 8008b8a:	f7ff fd0d 	bl	80085a8 <_Balloc>
 8008b8e:	b930      	cbnz	r0, 8008b9e <__mdiff+0x2e>
 8008b90:	4b39      	ldr	r3, [pc, #228]	; (8008c78 <__mdiff+0x108>)
 8008b92:	4602      	mov	r2, r0
 8008b94:	f240 2132 	movw	r1, #562	; 0x232
 8008b98:	4838      	ldr	r0, [pc, #224]	; (8008c7c <__mdiff+0x10c>)
 8008b9a:	f000 fe7f 	bl	800989c <__assert_func>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008ba4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ba8:	bfa4      	itt	ge
 8008baa:	463b      	movge	r3, r7
 8008bac:	4627      	movge	r7, r4
 8008bae:	4630      	mov	r0, r6
 8008bb0:	6879      	ldr	r1, [r7, #4]
 8008bb2:	bfa6      	itte	ge
 8008bb4:	461c      	movge	r4, r3
 8008bb6:	2500      	movge	r5, #0
 8008bb8:	2501      	movlt	r5, #1
 8008bba:	f7ff fcf5 	bl	80085a8 <_Balloc>
 8008bbe:	b920      	cbnz	r0, 8008bca <__mdiff+0x5a>
 8008bc0:	4b2d      	ldr	r3, [pc, #180]	; (8008c78 <__mdiff+0x108>)
 8008bc2:	4602      	mov	r2, r0
 8008bc4:	f44f 7110 	mov.w	r1, #576	; 0x240
 8008bc8:	e7e6      	b.n	8008b98 <__mdiff+0x28>
 8008bca:	693e      	ldr	r6, [r7, #16]
 8008bcc:	60c5      	str	r5, [r0, #12]
 8008bce:	6925      	ldr	r5, [r4, #16]
 8008bd0:	f107 0114 	add.w	r1, r7, #20
 8008bd4:	f104 0914 	add.w	r9, r4, #20
 8008bd8:	f100 0e14 	add.w	lr, r0, #20
 8008bdc:	f107 0210 	add.w	r2, r7, #16
 8008be0:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 8008be4:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 8008be8:	46f2      	mov	sl, lr
 8008bea:	2700      	movs	r7, #0
 8008bec:	f859 3b04 	ldr.w	r3, [r9], #4
 8008bf0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8008bf4:	fa1f f883 	uxth.w	r8, r3
 8008bf8:	fa17 f78b 	uxtah	r7, r7, fp
 8008bfc:	0c1b      	lsrs	r3, r3, #16
 8008bfe:	eba7 0808 	sub.w	r8, r7, r8
 8008c02:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8008c06:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008c0a:	fa1f f888 	uxth.w	r8, r8
 8008c0e:	141f      	asrs	r7, r3, #16
 8008c10:	454d      	cmp	r5, r9
 8008c12:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8008c16:	f84a 3b04 	str.w	r3, [sl], #4
 8008c1a:	d8e7      	bhi.n	8008bec <__mdiff+0x7c>
 8008c1c:	1b2b      	subs	r3, r5, r4
 8008c1e:	3b15      	subs	r3, #21
 8008c20:	f023 0303 	bic.w	r3, r3, #3
 8008c24:	3304      	adds	r3, #4
 8008c26:	3415      	adds	r4, #21
 8008c28:	42a5      	cmp	r5, r4
 8008c2a:	bf38      	it	cc
 8008c2c:	2304      	movcc	r3, #4
 8008c2e:	4419      	add	r1, r3
 8008c30:	4473      	add	r3, lr
 8008c32:	469e      	mov	lr, r3
 8008c34:	460d      	mov	r5, r1
 8008c36:	4565      	cmp	r5, ip
 8008c38:	d30e      	bcc.n	8008c58 <__mdiff+0xe8>
 8008c3a:	f10c 0203 	add.w	r2, ip, #3
 8008c3e:	1a52      	subs	r2, r2, r1
 8008c40:	f022 0203 	bic.w	r2, r2, #3
 8008c44:	3903      	subs	r1, #3
 8008c46:	458c      	cmp	ip, r1
 8008c48:	bf38      	it	cc
 8008c4a:	2200      	movcc	r2, #0
 8008c4c:	441a      	add	r2, r3
 8008c4e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8008c52:	b17b      	cbz	r3, 8008c74 <__mdiff+0x104>
 8008c54:	6106      	str	r6, [r0, #16]
 8008c56:	e7a5      	b.n	8008ba4 <__mdiff+0x34>
 8008c58:	f855 8b04 	ldr.w	r8, [r5], #4
 8008c5c:	fa17 f488 	uxtah	r4, r7, r8
 8008c60:	1422      	asrs	r2, r4, #16
 8008c62:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 8008c66:	b2a4      	uxth	r4, r4
 8008c68:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8008c6c:	f84e 4b04 	str.w	r4, [lr], #4
 8008c70:	1417      	asrs	r7, r2, #16
 8008c72:	e7e0      	b.n	8008c36 <__mdiff+0xc6>
 8008c74:	3e01      	subs	r6, #1
 8008c76:	e7ea      	b.n	8008c4e <__mdiff+0xde>
 8008c78:	08009fa4 	.word	0x08009fa4
 8008c7c:	0800a098 	.word	0x0800a098

08008c80 <__ulp>:
 8008c80:	b082      	sub	sp, #8
 8008c82:	ed8d 0b00 	vstr	d0, [sp]
 8008c86:	9b01      	ldr	r3, [sp, #4]
 8008c88:	4912      	ldr	r1, [pc, #72]	; (8008cd4 <__ulp+0x54>)
 8008c8a:	4019      	ands	r1, r3
 8008c8c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8008c90:	2900      	cmp	r1, #0
 8008c92:	dd05      	ble.n	8008ca0 <__ulp+0x20>
 8008c94:	2200      	movs	r2, #0
 8008c96:	460b      	mov	r3, r1
 8008c98:	ec43 2b10 	vmov	d0, r2, r3
 8008c9c:	b002      	add	sp, #8
 8008c9e:	4770      	bx	lr
 8008ca0:	4249      	negs	r1, r1
 8008ca2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8008ca6:	ea4f 5021 	mov.w	r0, r1, asr #20
 8008caa:	f04f 0200 	mov.w	r2, #0
 8008cae:	f04f 0300 	mov.w	r3, #0
 8008cb2:	da04      	bge.n	8008cbe <__ulp+0x3e>
 8008cb4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8008cb8:	fa41 f300 	asr.w	r3, r1, r0
 8008cbc:	e7ec      	b.n	8008c98 <__ulp+0x18>
 8008cbe:	f1a0 0114 	sub.w	r1, r0, #20
 8008cc2:	291e      	cmp	r1, #30
 8008cc4:	bfda      	itte	le
 8008cc6:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8008cca:	fa20 f101 	lsrle.w	r1, r0, r1
 8008cce:	2101      	movgt	r1, #1
 8008cd0:	460a      	mov	r2, r1
 8008cd2:	e7e1      	b.n	8008c98 <__ulp+0x18>
 8008cd4:	7ff00000 	.word	0x7ff00000

08008cd8 <__b2d>:
 8008cd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cda:	6905      	ldr	r5, [r0, #16]
 8008cdc:	f100 0714 	add.w	r7, r0, #20
 8008ce0:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8008ce4:	1f2e      	subs	r6, r5, #4
 8008ce6:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8008cea:	4620      	mov	r0, r4
 8008cec:	f7ff fd52 	bl	8008794 <__hi0bits>
 8008cf0:	f1c0 0320 	rsb	r3, r0, #32
 8008cf4:	280a      	cmp	r0, #10
 8008cf6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8008d74 <__b2d+0x9c>
 8008cfa:	600b      	str	r3, [r1, #0]
 8008cfc:	dc14      	bgt.n	8008d28 <__b2d+0x50>
 8008cfe:	f1c0 0e0b 	rsb	lr, r0, #11
 8008d02:	fa24 f10e 	lsr.w	r1, r4, lr
 8008d06:	42b7      	cmp	r7, r6
 8008d08:	ea41 030c 	orr.w	r3, r1, ip
 8008d0c:	bf34      	ite	cc
 8008d0e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d12:	2100      	movcs	r1, #0
 8008d14:	3015      	adds	r0, #21
 8008d16:	fa04 f000 	lsl.w	r0, r4, r0
 8008d1a:	fa21 f10e 	lsr.w	r1, r1, lr
 8008d1e:	ea40 0201 	orr.w	r2, r0, r1
 8008d22:	ec43 2b10 	vmov	d0, r2, r3
 8008d26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d28:	42b7      	cmp	r7, r6
 8008d2a:	bf3a      	itte	cc
 8008d2c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8008d30:	f1a5 0608 	subcc.w	r6, r5, #8
 8008d34:	2100      	movcs	r1, #0
 8008d36:	380b      	subs	r0, #11
 8008d38:	d017      	beq.n	8008d6a <__b2d+0x92>
 8008d3a:	f1c0 0c20 	rsb	ip, r0, #32
 8008d3e:	fa04 f500 	lsl.w	r5, r4, r0
 8008d42:	42be      	cmp	r6, r7
 8008d44:	fa21 f40c 	lsr.w	r4, r1, ip
 8008d48:	ea45 0504 	orr.w	r5, r5, r4
 8008d4c:	bf8c      	ite	hi
 8008d4e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8008d52:	2400      	movls	r4, #0
 8008d54:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8008d58:	fa01 f000 	lsl.w	r0, r1, r0
 8008d5c:	fa24 f40c 	lsr.w	r4, r4, ip
 8008d60:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008d64:	ea40 0204 	orr.w	r2, r0, r4
 8008d68:	e7db      	b.n	8008d22 <__b2d+0x4a>
 8008d6a:	ea44 030c 	orr.w	r3, r4, ip
 8008d6e:	460a      	mov	r2, r1
 8008d70:	e7d7      	b.n	8008d22 <__b2d+0x4a>
 8008d72:	bf00      	nop
 8008d74:	3ff00000 	.word	0x3ff00000

08008d78 <__d2b>:
 8008d78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d7c:	4689      	mov	r9, r1
 8008d7e:	2101      	movs	r1, #1
 8008d80:	ec57 6b10 	vmov	r6, r7, d0
 8008d84:	4690      	mov	r8, r2
 8008d86:	f7ff fc0f 	bl	80085a8 <_Balloc>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	b930      	cbnz	r0, 8008d9c <__d2b+0x24>
 8008d8e:	4602      	mov	r2, r0
 8008d90:	4b25      	ldr	r3, [pc, #148]	; (8008e28 <__d2b+0xb0>)
 8008d92:	4826      	ldr	r0, [pc, #152]	; (8008e2c <__d2b+0xb4>)
 8008d94:	f240 310a 	movw	r1, #778	; 0x30a
 8008d98:	f000 fd80 	bl	800989c <__assert_func>
 8008d9c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8008da0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008da4:	bb35      	cbnz	r5, 8008df4 <__d2b+0x7c>
 8008da6:	2e00      	cmp	r6, #0
 8008da8:	9301      	str	r3, [sp, #4]
 8008daa:	d028      	beq.n	8008dfe <__d2b+0x86>
 8008dac:	4668      	mov	r0, sp
 8008dae:	9600      	str	r6, [sp, #0]
 8008db0:	f7ff fd10 	bl	80087d4 <__lo0bits>
 8008db4:	9900      	ldr	r1, [sp, #0]
 8008db6:	b300      	cbz	r0, 8008dfa <__d2b+0x82>
 8008db8:	9a01      	ldr	r2, [sp, #4]
 8008dba:	f1c0 0320 	rsb	r3, r0, #32
 8008dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8008dc2:	430b      	orrs	r3, r1
 8008dc4:	40c2      	lsrs	r2, r0
 8008dc6:	6163      	str	r3, [r4, #20]
 8008dc8:	9201      	str	r2, [sp, #4]
 8008dca:	9b01      	ldr	r3, [sp, #4]
 8008dcc:	61a3      	str	r3, [r4, #24]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	bf14      	ite	ne
 8008dd2:	2202      	movne	r2, #2
 8008dd4:	2201      	moveq	r2, #1
 8008dd6:	6122      	str	r2, [r4, #16]
 8008dd8:	b1d5      	cbz	r5, 8008e10 <__d2b+0x98>
 8008dda:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8008dde:	4405      	add	r5, r0
 8008de0:	f8c9 5000 	str.w	r5, [r9]
 8008de4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008de8:	f8c8 0000 	str.w	r0, [r8]
 8008dec:	4620      	mov	r0, r4
 8008dee:	b003      	add	sp, #12
 8008df0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008df4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008df8:	e7d5      	b.n	8008da6 <__d2b+0x2e>
 8008dfa:	6161      	str	r1, [r4, #20]
 8008dfc:	e7e5      	b.n	8008dca <__d2b+0x52>
 8008dfe:	a801      	add	r0, sp, #4
 8008e00:	f7ff fce8 	bl	80087d4 <__lo0bits>
 8008e04:	9b01      	ldr	r3, [sp, #4]
 8008e06:	6163      	str	r3, [r4, #20]
 8008e08:	2201      	movs	r2, #1
 8008e0a:	6122      	str	r2, [r4, #16]
 8008e0c:	3020      	adds	r0, #32
 8008e0e:	e7e3      	b.n	8008dd8 <__d2b+0x60>
 8008e10:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e14:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008e18:	f8c9 0000 	str.w	r0, [r9]
 8008e1c:	6918      	ldr	r0, [r3, #16]
 8008e1e:	f7ff fcb9 	bl	8008794 <__hi0bits>
 8008e22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e26:	e7df      	b.n	8008de8 <__d2b+0x70>
 8008e28:	08009fa4 	.word	0x08009fa4
 8008e2c:	0800a098 	.word	0x0800a098

08008e30 <__ratio>:
 8008e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e34:	4688      	mov	r8, r1
 8008e36:	4669      	mov	r1, sp
 8008e38:	4681      	mov	r9, r0
 8008e3a:	f7ff ff4d 	bl	8008cd8 <__b2d>
 8008e3e:	a901      	add	r1, sp, #4
 8008e40:	4640      	mov	r0, r8
 8008e42:	ec55 4b10 	vmov	r4, r5, d0
 8008e46:	f7ff ff47 	bl	8008cd8 <__b2d>
 8008e4a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8008e4e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8008e52:	eba3 0c02 	sub.w	ip, r3, r2
 8008e56:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008e5a:	1a9b      	subs	r3, r3, r2
 8008e5c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8008e60:	ec51 0b10 	vmov	r0, r1, d0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	bfd6      	itet	le
 8008e68:	460a      	movle	r2, r1
 8008e6a:	462a      	movgt	r2, r5
 8008e6c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008e70:	468b      	mov	fp, r1
 8008e72:	462f      	mov	r7, r5
 8008e74:	bfd4      	ite	le
 8008e76:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8008e7a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008e7e:	4620      	mov	r0, r4
 8008e80:	ee10 2a10 	vmov	r2, s0
 8008e84:	465b      	mov	r3, fp
 8008e86:	4639      	mov	r1, r7
 8008e88:	f7f7 fcf0 	bl	800086c <__aeabi_ddiv>
 8008e8c:	ec41 0b10 	vmov	d0, r0, r1
 8008e90:	b003      	add	sp, #12
 8008e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008e96 <__copybits>:
 8008e96:	3901      	subs	r1, #1
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	1149      	asrs	r1, r1, #5
 8008e9c:	6914      	ldr	r4, [r2, #16]
 8008e9e:	3101      	adds	r1, #1
 8008ea0:	f102 0314 	add.w	r3, r2, #20
 8008ea4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ea8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008eac:	1f05      	subs	r5, r0, #4
 8008eae:	42a3      	cmp	r3, r4
 8008eb0:	d30c      	bcc.n	8008ecc <__copybits+0x36>
 8008eb2:	1aa3      	subs	r3, r4, r2
 8008eb4:	3b11      	subs	r3, #17
 8008eb6:	f023 0303 	bic.w	r3, r3, #3
 8008eba:	3211      	adds	r2, #17
 8008ebc:	42a2      	cmp	r2, r4
 8008ebe:	bf88      	it	hi
 8008ec0:	2300      	movhi	r3, #0
 8008ec2:	4418      	add	r0, r3
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	4288      	cmp	r0, r1
 8008ec8:	d305      	bcc.n	8008ed6 <__copybits+0x40>
 8008eca:	bd70      	pop	{r4, r5, r6, pc}
 8008ecc:	f853 6b04 	ldr.w	r6, [r3], #4
 8008ed0:	f845 6f04 	str.w	r6, [r5, #4]!
 8008ed4:	e7eb      	b.n	8008eae <__copybits+0x18>
 8008ed6:	f840 3b04 	str.w	r3, [r0], #4
 8008eda:	e7f4      	b.n	8008ec6 <__copybits+0x30>

08008edc <__any_on>:
 8008edc:	f100 0214 	add.w	r2, r0, #20
 8008ee0:	6900      	ldr	r0, [r0, #16]
 8008ee2:	114b      	asrs	r3, r1, #5
 8008ee4:	4298      	cmp	r0, r3
 8008ee6:	b510      	push	{r4, lr}
 8008ee8:	db11      	blt.n	8008f0e <__any_on+0x32>
 8008eea:	dd0a      	ble.n	8008f02 <__any_on+0x26>
 8008eec:	f011 011f 	ands.w	r1, r1, #31
 8008ef0:	d007      	beq.n	8008f02 <__any_on+0x26>
 8008ef2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008ef6:	fa24 f001 	lsr.w	r0, r4, r1
 8008efa:	fa00 f101 	lsl.w	r1, r0, r1
 8008efe:	428c      	cmp	r4, r1
 8008f00:	d10b      	bne.n	8008f1a <__any_on+0x3e>
 8008f02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f06:	4293      	cmp	r3, r2
 8008f08:	d803      	bhi.n	8008f12 <__any_on+0x36>
 8008f0a:	2000      	movs	r0, #0
 8008f0c:	bd10      	pop	{r4, pc}
 8008f0e:	4603      	mov	r3, r0
 8008f10:	e7f7      	b.n	8008f02 <__any_on+0x26>
 8008f12:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f16:	2900      	cmp	r1, #0
 8008f18:	d0f5      	beq.n	8008f06 <__any_on+0x2a>
 8008f1a:	2001      	movs	r0, #1
 8008f1c:	e7f6      	b.n	8008f0c <__any_on+0x30>

08008f1e <_calloc_r>:
 8008f1e:	b513      	push	{r0, r1, r4, lr}
 8008f20:	434a      	muls	r2, r1
 8008f22:	4611      	mov	r1, r2
 8008f24:	9201      	str	r2, [sp, #4]
 8008f26:	f000 f859 	bl	8008fdc <_malloc_r>
 8008f2a:	4604      	mov	r4, r0
 8008f2c:	b118      	cbz	r0, 8008f36 <_calloc_r+0x18>
 8008f2e:	9a01      	ldr	r2, [sp, #4]
 8008f30:	2100      	movs	r1, #0
 8008f32:	f7fc fab9 	bl	80054a8 <memset>
 8008f36:	4620      	mov	r0, r4
 8008f38:	b002      	add	sp, #8
 8008f3a:	bd10      	pop	{r4, pc}

08008f3c <_free_r>:
 8008f3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	d048      	beq.n	8008fd4 <_free_r+0x98>
 8008f42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f46:	9001      	str	r0, [sp, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f4e:	bfb8      	it	lt
 8008f50:	18e4      	addlt	r4, r4, r3
 8008f52:	f000 fe35 	bl	8009bc0 <__malloc_lock>
 8008f56:	4a20      	ldr	r2, [pc, #128]	; (8008fd8 <_free_r+0x9c>)
 8008f58:	9801      	ldr	r0, [sp, #4]
 8008f5a:	6813      	ldr	r3, [r2, #0]
 8008f5c:	4615      	mov	r5, r2
 8008f5e:	b933      	cbnz	r3, 8008f6e <_free_r+0x32>
 8008f60:	6063      	str	r3, [r4, #4]
 8008f62:	6014      	str	r4, [r2, #0]
 8008f64:	b003      	add	sp, #12
 8008f66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f6a:	f000 be2f 	b.w	8009bcc <__malloc_unlock>
 8008f6e:	42a3      	cmp	r3, r4
 8008f70:	d90b      	bls.n	8008f8a <_free_r+0x4e>
 8008f72:	6821      	ldr	r1, [r4, #0]
 8008f74:	1862      	adds	r2, r4, r1
 8008f76:	4293      	cmp	r3, r2
 8008f78:	bf04      	itt	eq
 8008f7a:	681a      	ldreq	r2, [r3, #0]
 8008f7c:	685b      	ldreq	r3, [r3, #4]
 8008f7e:	6063      	str	r3, [r4, #4]
 8008f80:	bf04      	itt	eq
 8008f82:	1852      	addeq	r2, r2, r1
 8008f84:	6022      	streq	r2, [r4, #0]
 8008f86:	602c      	str	r4, [r5, #0]
 8008f88:	e7ec      	b.n	8008f64 <_free_r+0x28>
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	b10b      	cbz	r3, 8008f94 <_free_r+0x58>
 8008f90:	42a3      	cmp	r3, r4
 8008f92:	d9fa      	bls.n	8008f8a <_free_r+0x4e>
 8008f94:	6811      	ldr	r1, [r2, #0]
 8008f96:	1855      	adds	r5, r2, r1
 8008f98:	42a5      	cmp	r5, r4
 8008f9a:	d10b      	bne.n	8008fb4 <_free_r+0x78>
 8008f9c:	6824      	ldr	r4, [r4, #0]
 8008f9e:	4421      	add	r1, r4
 8008fa0:	1854      	adds	r4, r2, r1
 8008fa2:	42a3      	cmp	r3, r4
 8008fa4:	6011      	str	r1, [r2, #0]
 8008fa6:	d1dd      	bne.n	8008f64 <_free_r+0x28>
 8008fa8:	681c      	ldr	r4, [r3, #0]
 8008faa:	685b      	ldr	r3, [r3, #4]
 8008fac:	6053      	str	r3, [r2, #4]
 8008fae:	4421      	add	r1, r4
 8008fb0:	6011      	str	r1, [r2, #0]
 8008fb2:	e7d7      	b.n	8008f64 <_free_r+0x28>
 8008fb4:	d902      	bls.n	8008fbc <_free_r+0x80>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6003      	str	r3, [r0, #0]
 8008fba:	e7d3      	b.n	8008f64 <_free_r+0x28>
 8008fbc:	6825      	ldr	r5, [r4, #0]
 8008fbe:	1961      	adds	r1, r4, r5
 8008fc0:	428b      	cmp	r3, r1
 8008fc2:	bf04      	itt	eq
 8008fc4:	6819      	ldreq	r1, [r3, #0]
 8008fc6:	685b      	ldreq	r3, [r3, #4]
 8008fc8:	6063      	str	r3, [r4, #4]
 8008fca:	bf04      	itt	eq
 8008fcc:	1949      	addeq	r1, r1, r5
 8008fce:	6021      	streq	r1, [r4, #0]
 8008fd0:	6054      	str	r4, [r2, #4]
 8008fd2:	e7c7      	b.n	8008f64 <_free_r+0x28>
 8008fd4:	b003      	add	sp, #12
 8008fd6:	bd30      	pop	{r4, r5, pc}
 8008fd8:	20000200 	.word	0x20000200

08008fdc <_malloc_r>:
 8008fdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fde:	1ccd      	adds	r5, r1, #3
 8008fe0:	f025 0503 	bic.w	r5, r5, #3
 8008fe4:	3508      	adds	r5, #8
 8008fe6:	2d0c      	cmp	r5, #12
 8008fe8:	bf38      	it	cc
 8008fea:	250c      	movcc	r5, #12
 8008fec:	2d00      	cmp	r5, #0
 8008fee:	4606      	mov	r6, r0
 8008ff0:	db01      	blt.n	8008ff6 <_malloc_r+0x1a>
 8008ff2:	42a9      	cmp	r1, r5
 8008ff4:	d903      	bls.n	8008ffe <_malloc_r+0x22>
 8008ff6:	230c      	movs	r3, #12
 8008ff8:	6033      	str	r3, [r6, #0]
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffe:	f000 fddf 	bl	8009bc0 <__malloc_lock>
 8009002:	4921      	ldr	r1, [pc, #132]	; (8009088 <_malloc_r+0xac>)
 8009004:	680a      	ldr	r2, [r1, #0]
 8009006:	4614      	mov	r4, r2
 8009008:	b99c      	cbnz	r4, 8009032 <_malloc_r+0x56>
 800900a:	4f20      	ldr	r7, [pc, #128]	; (800908c <_malloc_r+0xb0>)
 800900c:	683b      	ldr	r3, [r7, #0]
 800900e:	b923      	cbnz	r3, 800901a <_malloc_r+0x3e>
 8009010:	4621      	mov	r1, r4
 8009012:	4630      	mov	r0, r6
 8009014:	f000 fafc 	bl	8009610 <_sbrk_r>
 8009018:	6038      	str	r0, [r7, #0]
 800901a:	4629      	mov	r1, r5
 800901c:	4630      	mov	r0, r6
 800901e:	f000 faf7 	bl	8009610 <_sbrk_r>
 8009022:	1c43      	adds	r3, r0, #1
 8009024:	d123      	bne.n	800906e <_malloc_r+0x92>
 8009026:	230c      	movs	r3, #12
 8009028:	6033      	str	r3, [r6, #0]
 800902a:	4630      	mov	r0, r6
 800902c:	f000 fdce 	bl	8009bcc <__malloc_unlock>
 8009030:	e7e3      	b.n	8008ffa <_malloc_r+0x1e>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	1b5b      	subs	r3, r3, r5
 8009036:	d417      	bmi.n	8009068 <_malloc_r+0x8c>
 8009038:	2b0b      	cmp	r3, #11
 800903a:	d903      	bls.n	8009044 <_malloc_r+0x68>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	441c      	add	r4, r3
 8009040:	6025      	str	r5, [r4, #0]
 8009042:	e004      	b.n	800904e <_malloc_r+0x72>
 8009044:	6863      	ldr	r3, [r4, #4]
 8009046:	42a2      	cmp	r2, r4
 8009048:	bf0c      	ite	eq
 800904a:	600b      	streq	r3, [r1, #0]
 800904c:	6053      	strne	r3, [r2, #4]
 800904e:	4630      	mov	r0, r6
 8009050:	f000 fdbc 	bl	8009bcc <__malloc_unlock>
 8009054:	f104 000b 	add.w	r0, r4, #11
 8009058:	1d23      	adds	r3, r4, #4
 800905a:	f020 0007 	bic.w	r0, r0, #7
 800905e:	1ac2      	subs	r2, r0, r3
 8009060:	d0cc      	beq.n	8008ffc <_malloc_r+0x20>
 8009062:	1a1b      	subs	r3, r3, r0
 8009064:	50a3      	str	r3, [r4, r2]
 8009066:	e7c9      	b.n	8008ffc <_malloc_r+0x20>
 8009068:	4622      	mov	r2, r4
 800906a:	6864      	ldr	r4, [r4, #4]
 800906c:	e7cc      	b.n	8009008 <_malloc_r+0x2c>
 800906e:	1cc4      	adds	r4, r0, #3
 8009070:	f024 0403 	bic.w	r4, r4, #3
 8009074:	42a0      	cmp	r0, r4
 8009076:	d0e3      	beq.n	8009040 <_malloc_r+0x64>
 8009078:	1a21      	subs	r1, r4, r0
 800907a:	4630      	mov	r0, r6
 800907c:	f000 fac8 	bl	8009610 <_sbrk_r>
 8009080:	3001      	adds	r0, #1
 8009082:	d1dd      	bne.n	8009040 <_malloc_r+0x64>
 8009084:	e7cf      	b.n	8009026 <_malloc_r+0x4a>
 8009086:	bf00      	nop
 8009088:	20000200 	.word	0x20000200
 800908c:	20000204 	.word	0x20000204

08009090 <__ssputs_r>:
 8009090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009094:	688e      	ldr	r6, [r1, #8]
 8009096:	429e      	cmp	r6, r3
 8009098:	4682      	mov	sl, r0
 800909a:	460c      	mov	r4, r1
 800909c:	4690      	mov	r8, r2
 800909e:	461f      	mov	r7, r3
 80090a0:	d838      	bhi.n	8009114 <__ssputs_r+0x84>
 80090a2:	898a      	ldrh	r2, [r1, #12]
 80090a4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80090a8:	d032      	beq.n	8009110 <__ssputs_r+0x80>
 80090aa:	6825      	ldr	r5, [r4, #0]
 80090ac:	6909      	ldr	r1, [r1, #16]
 80090ae:	eba5 0901 	sub.w	r9, r5, r1
 80090b2:	6965      	ldr	r5, [r4, #20]
 80090b4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090b8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090bc:	3301      	adds	r3, #1
 80090be:	444b      	add	r3, r9
 80090c0:	106d      	asrs	r5, r5, #1
 80090c2:	429d      	cmp	r5, r3
 80090c4:	bf38      	it	cc
 80090c6:	461d      	movcc	r5, r3
 80090c8:	0553      	lsls	r3, r2, #21
 80090ca:	d531      	bpl.n	8009130 <__ssputs_r+0xa0>
 80090cc:	4629      	mov	r1, r5
 80090ce:	f7ff ff85 	bl	8008fdc <_malloc_r>
 80090d2:	4606      	mov	r6, r0
 80090d4:	b950      	cbnz	r0, 80090ec <__ssputs_r+0x5c>
 80090d6:	230c      	movs	r3, #12
 80090d8:	f8ca 3000 	str.w	r3, [sl]
 80090dc:	89a3      	ldrh	r3, [r4, #12]
 80090de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80090e2:	81a3      	strh	r3, [r4, #12]
 80090e4:	f04f 30ff 	mov.w	r0, #4294967295
 80090e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090ec:	6921      	ldr	r1, [r4, #16]
 80090ee:	464a      	mov	r2, r9
 80090f0:	f7ff fa4c 	bl	800858c <memcpy>
 80090f4:	89a3      	ldrh	r3, [r4, #12]
 80090f6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80090fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	6126      	str	r6, [r4, #16]
 8009102:	6165      	str	r5, [r4, #20]
 8009104:	444e      	add	r6, r9
 8009106:	eba5 0509 	sub.w	r5, r5, r9
 800910a:	6026      	str	r6, [r4, #0]
 800910c:	60a5      	str	r5, [r4, #8]
 800910e:	463e      	mov	r6, r7
 8009110:	42be      	cmp	r6, r7
 8009112:	d900      	bls.n	8009116 <__ssputs_r+0x86>
 8009114:	463e      	mov	r6, r7
 8009116:	4632      	mov	r2, r6
 8009118:	6820      	ldr	r0, [r4, #0]
 800911a:	4641      	mov	r1, r8
 800911c:	f000 fd36 	bl	8009b8c <memmove>
 8009120:	68a3      	ldr	r3, [r4, #8]
 8009122:	6822      	ldr	r2, [r4, #0]
 8009124:	1b9b      	subs	r3, r3, r6
 8009126:	4432      	add	r2, r6
 8009128:	60a3      	str	r3, [r4, #8]
 800912a:	6022      	str	r2, [r4, #0]
 800912c:	2000      	movs	r0, #0
 800912e:	e7db      	b.n	80090e8 <__ssputs_r+0x58>
 8009130:	462a      	mov	r2, r5
 8009132:	f000 fd51 	bl	8009bd8 <_realloc_r>
 8009136:	4606      	mov	r6, r0
 8009138:	2800      	cmp	r0, #0
 800913a:	d1e1      	bne.n	8009100 <__ssputs_r+0x70>
 800913c:	6921      	ldr	r1, [r4, #16]
 800913e:	4650      	mov	r0, sl
 8009140:	f7ff fefc 	bl	8008f3c <_free_r>
 8009144:	e7c7      	b.n	80090d6 <__ssputs_r+0x46>
	...

08009148 <_svfiprintf_r>:
 8009148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800914c:	4698      	mov	r8, r3
 800914e:	898b      	ldrh	r3, [r1, #12]
 8009150:	061b      	lsls	r3, r3, #24
 8009152:	b09d      	sub	sp, #116	; 0x74
 8009154:	4607      	mov	r7, r0
 8009156:	460d      	mov	r5, r1
 8009158:	4614      	mov	r4, r2
 800915a:	d50e      	bpl.n	800917a <_svfiprintf_r+0x32>
 800915c:	690b      	ldr	r3, [r1, #16]
 800915e:	b963      	cbnz	r3, 800917a <_svfiprintf_r+0x32>
 8009160:	2140      	movs	r1, #64	; 0x40
 8009162:	f7ff ff3b 	bl	8008fdc <_malloc_r>
 8009166:	6028      	str	r0, [r5, #0]
 8009168:	6128      	str	r0, [r5, #16]
 800916a:	b920      	cbnz	r0, 8009176 <_svfiprintf_r+0x2e>
 800916c:	230c      	movs	r3, #12
 800916e:	603b      	str	r3, [r7, #0]
 8009170:	f04f 30ff 	mov.w	r0, #4294967295
 8009174:	e0d1      	b.n	800931a <_svfiprintf_r+0x1d2>
 8009176:	2340      	movs	r3, #64	; 0x40
 8009178:	616b      	str	r3, [r5, #20]
 800917a:	2300      	movs	r3, #0
 800917c:	9309      	str	r3, [sp, #36]	; 0x24
 800917e:	2320      	movs	r3, #32
 8009180:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009184:	f8cd 800c 	str.w	r8, [sp, #12]
 8009188:	2330      	movs	r3, #48	; 0x30
 800918a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009334 <_svfiprintf_r+0x1ec>
 800918e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009192:	f04f 0901 	mov.w	r9, #1
 8009196:	4623      	mov	r3, r4
 8009198:	469a      	mov	sl, r3
 800919a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800919e:	b10a      	cbz	r2, 80091a4 <_svfiprintf_r+0x5c>
 80091a0:	2a25      	cmp	r2, #37	; 0x25
 80091a2:	d1f9      	bne.n	8009198 <_svfiprintf_r+0x50>
 80091a4:	ebba 0b04 	subs.w	fp, sl, r4
 80091a8:	d00b      	beq.n	80091c2 <_svfiprintf_r+0x7a>
 80091aa:	465b      	mov	r3, fp
 80091ac:	4622      	mov	r2, r4
 80091ae:	4629      	mov	r1, r5
 80091b0:	4638      	mov	r0, r7
 80091b2:	f7ff ff6d 	bl	8009090 <__ssputs_r>
 80091b6:	3001      	adds	r0, #1
 80091b8:	f000 80aa 	beq.w	8009310 <_svfiprintf_r+0x1c8>
 80091bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80091be:	445a      	add	r2, fp
 80091c0:	9209      	str	r2, [sp, #36]	; 0x24
 80091c2:	f89a 3000 	ldrb.w	r3, [sl]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	f000 80a2 	beq.w	8009310 <_svfiprintf_r+0x1c8>
 80091cc:	2300      	movs	r3, #0
 80091ce:	f04f 32ff 	mov.w	r2, #4294967295
 80091d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091d6:	f10a 0a01 	add.w	sl, sl, #1
 80091da:	9304      	str	r3, [sp, #16]
 80091dc:	9307      	str	r3, [sp, #28]
 80091de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80091e2:	931a      	str	r3, [sp, #104]	; 0x68
 80091e4:	4654      	mov	r4, sl
 80091e6:	2205      	movs	r2, #5
 80091e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091ec:	4851      	ldr	r0, [pc, #324]	; (8009334 <_svfiprintf_r+0x1ec>)
 80091ee:	f7f7 f807 	bl	8000200 <memchr>
 80091f2:	9a04      	ldr	r2, [sp, #16]
 80091f4:	b9d8      	cbnz	r0, 800922e <_svfiprintf_r+0xe6>
 80091f6:	06d0      	lsls	r0, r2, #27
 80091f8:	bf44      	itt	mi
 80091fa:	2320      	movmi	r3, #32
 80091fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009200:	0711      	lsls	r1, r2, #28
 8009202:	bf44      	itt	mi
 8009204:	232b      	movmi	r3, #43	; 0x2b
 8009206:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800920a:	f89a 3000 	ldrb.w	r3, [sl]
 800920e:	2b2a      	cmp	r3, #42	; 0x2a
 8009210:	d015      	beq.n	800923e <_svfiprintf_r+0xf6>
 8009212:	9a07      	ldr	r2, [sp, #28]
 8009214:	4654      	mov	r4, sl
 8009216:	2000      	movs	r0, #0
 8009218:	f04f 0c0a 	mov.w	ip, #10
 800921c:	4621      	mov	r1, r4
 800921e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009222:	3b30      	subs	r3, #48	; 0x30
 8009224:	2b09      	cmp	r3, #9
 8009226:	d94e      	bls.n	80092c6 <_svfiprintf_r+0x17e>
 8009228:	b1b0      	cbz	r0, 8009258 <_svfiprintf_r+0x110>
 800922a:	9207      	str	r2, [sp, #28]
 800922c:	e014      	b.n	8009258 <_svfiprintf_r+0x110>
 800922e:	eba0 0308 	sub.w	r3, r0, r8
 8009232:	fa09 f303 	lsl.w	r3, r9, r3
 8009236:	4313      	orrs	r3, r2
 8009238:	9304      	str	r3, [sp, #16]
 800923a:	46a2      	mov	sl, r4
 800923c:	e7d2      	b.n	80091e4 <_svfiprintf_r+0x9c>
 800923e:	9b03      	ldr	r3, [sp, #12]
 8009240:	1d19      	adds	r1, r3, #4
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	9103      	str	r1, [sp, #12]
 8009246:	2b00      	cmp	r3, #0
 8009248:	bfbb      	ittet	lt
 800924a:	425b      	neglt	r3, r3
 800924c:	f042 0202 	orrlt.w	r2, r2, #2
 8009250:	9307      	strge	r3, [sp, #28]
 8009252:	9307      	strlt	r3, [sp, #28]
 8009254:	bfb8      	it	lt
 8009256:	9204      	strlt	r2, [sp, #16]
 8009258:	7823      	ldrb	r3, [r4, #0]
 800925a:	2b2e      	cmp	r3, #46	; 0x2e
 800925c:	d10c      	bne.n	8009278 <_svfiprintf_r+0x130>
 800925e:	7863      	ldrb	r3, [r4, #1]
 8009260:	2b2a      	cmp	r3, #42	; 0x2a
 8009262:	d135      	bne.n	80092d0 <_svfiprintf_r+0x188>
 8009264:	9b03      	ldr	r3, [sp, #12]
 8009266:	1d1a      	adds	r2, r3, #4
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	9203      	str	r2, [sp, #12]
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfb8      	it	lt
 8009270:	f04f 33ff 	movlt.w	r3, #4294967295
 8009274:	3402      	adds	r4, #2
 8009276:	9305      	str	r3, [sp, #20]
 8009278:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009344 <_svfiprintf_r+0x1fc>
 800927c:	7821      	ldrb	r1, [r4, #0]
 800927e:	2203      	movs	r2, #3
 8009280:	4650      	mov	r0, sl
 8009282:	f7f6 ffbd 	bl	8000200 <memchr>
 8009286:	b140      	cbz	r0, 800929a <_svfiprintf_r+0x152>
 8009288:	2340      	movs	r3, #64	; 0x40
 800928a:	eba0 000a 	sub.w	r0, r0, sl
 800928e:	fa03 f000 	lsl.w	r0, r3, r0
 8009292:	9b04      	ldr	r3, [sp, #16]
 8009294:	4303      	orrs	r3, r0
 8009296:	3401      	adds	r4, #1
 8009298:	9304      	str	r3, [sp, #16]
 800929a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800929e:	4826      	ldr	r0, [pc, #152]	; (8009338 <_svfiprintf_r+0x1f0>)
 80092a0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80092a4:	2206      	movs	r2, #6
 80092a6:	f7f6 ffab 	bl	8000200 <memchr>
 80092aa:	2800      	cmp	r0, #0
 80092ac:	d038      	beq.n	8009320 <_svfiprintf_r+0x1d8>
 80092ae:	4b23      	ldr	r3, [pc, #140]	; (800933c <_svfiprintf_r+0x1f4>)
 80092b0:	bb1b      	cbnz	r3, 80092fa <_svfiprintf_r+0x1b2>
 80092b2:	9b03      	ldr	r3, [sp, #12]
 80092b4:	3307      	adds	r3, #7
 80092b6:	f023 0307 	bic.w	r3, r3, #7
 80092ba:	3308      	adds	r3, #8
 80092bc:	9303      	str	r3, [sp, #12]
 80092be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092c0:	4433      	add	r3, r6
 80092c2:	9309      	str	r3, [sp, #36]	; 0x24
 80092c4:	e767      	b.n	8009196 <_svfiprintf_r+0x4e>
 80092c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80092ca:	460c      	mov	r4, r1
 80092cc:	2001      	movs	r0, #1
 80092ce:	e7a5      	b.n	800921c <_svfiprintf_r+0xd4>
 80092d0:	2300      	movs	r3, #0
 80092d2:	3401      	adds	r4, #1
 80092d4:	9305      	str	r3, [sp, #20]
 80092d6:	4619      	mov	r1, r3
 80092d8:	f04f 0c0a 	mov.w	ip, #10
 80092dc:	4620      	mov	r0, r4
 80092de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092e2:	3a30      	subs	r2, #48	; 0x30
 80092e4:	2a09      	cmp	r2, #9
 80092e6:	d903      	bls.n	80092f0 <_svfiprintf_r+0x1a8>
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d0c5      	beq.n	8009278 <_svfiprintf_r+0x130>
 80092ec:	9105      	str	r1, [sp, #20]
 80092ee:	e7c3      	b.n	8009278 <_svfiprintf_r+0x130>
 80092f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80092f4:	4604      	mov	r4, r0
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7f0      	b.n	80092dc <_svfiprintf_r+0x194>
 80092fa:	ab03      	add	r3, sp, #12
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	462a      	mov	r2, r5
 8009300:	4b0f      	ldr	r3, [pc, #60]	; (8009340 <_svfiprintf_r+0x1f8>)
 8009302:	a904      	add	r1, sp, #16
 8009304:	4638      	mov	r0, r7
 8009306:	f7fc f977 	bl	80055f8 <_printf_float>
 800930a:	1c42      	adds	r2, r0, #1
 800930c:	4606      	mov	r6, r0
 800930e:	d1d6      	bne.n	80092be <_svfiprintf_r+0x176>
 8009310:	89ab      	ldrh	r3, [r5, #12]
 8009312:	065b      	lsls	r3, r3, #25
 8009314:	f53f af2c 	bmi.w	8009170 <_svfiprintf_r+0x28>
 8009318:	9809      	ldr	r0, [sp, #36]	; 0x24
 800931a:	b01d      	add	sp, #116	; 0x74
 800931c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009320:	ab03      	add	r3, sp, #12
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	462a      	mov	r2, r5
 8009326:	4b06      	ldr	r3, [pc, #24]	; (8009340 <_svfiprintf_r+0x1f8>)
 8009328:	a904      	add	r1, sp, #16
 800932a:	4638      	mov	r0, r7
 800932c:	f7fc fc08 	bl	8005b40 <_printf_i>
 8009330:	e7eb      	b.n	800930a <_svfiprintf_r+0x1c2>
 8009332:	bf00      	nop
 8009334:	0800a1f4 	.word	0x0800a1f4
 8009338:	0800a1fe 	.word	0x0800a1fe
 800933c:	080055f9 	.word	0x080055f9
 8009340:	08009091 	.word	0x08009091
 8009344:	0800a1fa 	.word	0x0800a1fa

08009348 <__sfputc_r>:
 8009348:	6893      	ldr	r3, [r2, #8]
 800934a:	3b01      	subs	r3, #1
 800934c:	2b00      	cmp	r3, #0
 800934e:	b410      	push	{r4}
 8009350:	6093      	str	r3, [r2, #8]
 8009352:	da08      	bge.n	8009366 <__sfputc_r+0x1e>
 8009354:	6994      	ldr	r4, [r2, #24]
 8009356:	42a3      	cmp	r3, r4
 8009358:	db01      	blt.n	800935e <__sfputc_r+0x16>
 800935a:	290a      	cmp	r1, #10
 800935c:	d103      	bne.n	8009366 <__sfputc_r+0x1e>
 800935e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009362:	f000 b9bb 	b.w	80096dc <__swbuf_r>
 8009366:	6813      	ldr	r3, [r2, #0]
 8009368:	1c58      	adds	r0, r3, #1
 800936a:	6010      	str	r0, [r2, #0]
 800936c:	7019      	strb	r1, [r3, #0]
 800936e:	4608      	mov	r0, r1
 8009370:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009374:	4770      	bx	lr

08009376 <__sfputs_r>:
 8009376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009378:	4606      	mov	r6, r0
 800937a:	460f      	mov	r7, r1
 800937c:	4614      	mov	r4, r2
 800937e:	18d5      	adds	r5, r2, r3
 8009380:	42ac      	cmp	r4, r5
 8009382:	d101      	bne.n	8009388 <__sfputs_r+0x12>
 8009384:	2000      	movs	r0, #0
 8009386:	e007      	b.n	8009398 <__sfputs_r+0x22>
 8009388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800938c:	463a      	mov	r2, r7
 800938e:	4630      	mov	r0, r6
 8009390:	f7ff ffda 	bl	8009348 <__sfputc_r>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d1f3      	bne.n	8009380 <__sfputs_r+0xa>
 8009398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800939c <_vfiprintf_r>:
 800939c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093a0:	460d      	mov	r5, r1
 80093a2:	b09d      	sub	sp, #116	; 0x74
 80093a4:	4614      	mov	r4, r2
 80093a6:	4698      	mov	r8, r3
 80093a8:	4606      	mov	r6, r0
 80093aa:	b118      	cbz	r0, 80093b4 <_vfiprintf_r+0x18>
 80093ac:	6983      	ldr	r3, [r0, #24]
 80093ae:	b90b      	cbnz	r3, 80093b4 <_vfiprintf_r+0x18>
 80093b0:	f7fe fcbe 	bl	8007d30 <__sinit>
 80093b4:	4b89      	ldr	r3, [pc, #548]	; (80095dc <_vfiprintf_r+0x240>)
 80093b6:	429d      	cmp	r5, r3
 80093b8:	d11b      	bne.n	80093f2 <_vfiprintf_r+0x56>
 80093ba:	6875      	ldr	r5, [r6, #4]
 80093bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093be:	07d9      	lsls	r1, r3, #31
 80093c0:	d405      	bmi.n	80093ce <_vfiprintf_r+0x32>
 80093c2:	89ab      	ldrh	r3, [r5, #12]
 80093c4:	059a      	lsls	r2, r3, #22
 80093c6:	d402      	bmi.n	80093ce <_vfiprintf_r+0x32>
 80093c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093ca:	f7ff f8c2 	bl	8008552 <__retarget_lock_acquire_recursive>
 80093ce:	89ab      	ldrh	r3, [r5, #12]
 80093d0:	071b      	lsls	r3, r3, #28
 80093d2:	d501      	bpl.n	80093d8 <_vfiprintf_r+0x3c>
 80093d4:	692b      	ldr	r3, [r5, #16]
 80093d6:	b9eb      	cbnz	r3, 8009414 <_vfiprintf_r+0x78>
 80093d8:	4629      	mov	r1, r5
 80093da:	4630      	mov	r0, r6
 80093dc:	f000 f9f0 	bl	80097c0 <__swsetup_r>
 80093e0:	b1c0      	cbz	r0, 8009414 <_vfiprintf_r+0x78>
 80093e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093e4:	07dc      	lsls	r4, r3, #31
 80093e6:	d50e      	bpl.n	8009406 <_vfiprintf_r+0x6a>
 80093e8:	f04f 30ff 	mov.w	r0, #4294967295
 80093ec:	b01d      	add	sp, #116	; 0x74
 80093ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093f2:	4b7b      	ldr	r3, [pc, #492]	; (80095e0 <_vfiprintf_r+0x244>)
 80093f4:	429d      	cmp	r5, r3
 80093f6:	d101      	bne.n	80093fc <_vfiprintf_r+0x60>
 80093f8:	68b5      	ldr	r5, [r6, #8]
 80093fa:	e7df      	b.n	80093bc <_vfiprintf_r+0x20>
 80093fc:	4b79      	ldr	r3, [pc, #484]	; (80095e4 <_vfiprintf_r+0x248>)
 80093fe:	429d      	cmp	r5, r3
 8009400:	bf08      	it	eq
 8009402:	68f5      	ldreq	r5, [r6, #12]
 8009404:	e7da      	b.n	80093bc <_vfiprintf_r+0x20>
 8009406:	89ab      	ldrh	r3, [r5, #12]
 8009408:	0598      	lsls	r0, r3, #22
 800940a:	d4ed      	bmi.n	80093e8 <_vfiprintf_r+0x4c>
 800940c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800940e:	f7ff f8a1 	bl	8008554 <__retarget_lock_release_recursive>
 8009412:	e7e9      	b.n	80093e8 <_vfiprintf_r+0x4c>
 8009414:	2300      	movs	r3, #0
 8009416:	9309      	str	r3, [sp, #36]	; 0x24
 8009418:	2320      	movs	r3, #32
 800941a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800941e:	f8cd 800c 	str.w	r8, [sp, #12]
 8009422:	2330      	movs	r3, #48	; 0x30
 8009424:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80095e8 <_vfiprintf_r+0x24c>
 8009428:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800942c:	f04f 0901 	mov.w	r9, #1
 8009430:	4623      	mov	r3, r4
 8009432:	469a      	mov	sl, r3
 8009434:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009438:	b10a      	cbz	r2, 800943e <_vfiprintf_r+0xa2>
 800943a:	2a25      	cmp	r2, #37	; 0x25
 800943c:	d1f9      	bne.n	8009432 <_vfiprintf_r+0x96>
 800943e:	ebba 0b04 	subs.w	fp, sl, r4
 8009442:	d00b      	beq.n	800945c <_vfiprintf_r+0xc0>
 8009444:	465b      	mov	r3, fp
 8009446:	4622      	mov	r2, r4
 8009448:	4629      	mov	r1, r5
 800944a:	4630      	mov	r0, r6
 800944c:	f7ff ff93 	bl	8009376 <__sfputs_r>
 8009450:	3001      	adds	r0, #1
 8009452:	f000 80aa 	beq.w	80095aa <_vfiprintf_r+0x20e>
 8009456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009458:	445a      	add	r2, fp
 800945a:	9209      	str	r2, [sp, #36]	; 0x24
 800945c:	f89a 3000 	ldrb.w	r3, [sl]
 8009460:	2b00      	cmp	r3, #0
 8009462:	f000 80a2 	beq.w	80095aa <_vfiprintf_r+0x20e>
 8009466:	2300      	movs	r3, #0
 8009468:	f04f 32ff 	mov.w	r2, #4294967295
 800946c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009470:	f10a 0a01 	add.w	sl, sl, #1
 8009474:	9304      	str	r3, [sp, #16]
 8009476:	9307      	str	r3, [sp, #28]
 8009478:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800947c:	931a      	str	r3, [sp, #104]	; 0x68
 800947e:	4654      	mov	r4, sl
 8009480:	2205      	movs	r2, #5
 8009482:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009486:	4858      	ldr	r0, [pc, #352]	; (80095e8 <_vfiprintf_r+0x24c>)
 8009488:	f7f6 feba 	bl	8000200 <memchr>
 800948c:	9a04      	ldr	r2, [sp, #16]
 800948e:	b9d8      	cbnz	r0, 80094c8 <_vfiprintf_r+0x12c>
 8009490:	06d1      	lsls	r1, r2, #27
 8009492:	bf44      	itt	mi
 8009494:	2320      	movmi	r3, #32
 8009496:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800949a:	0713      	lsls	r3, r2, #28
 800949c:	bf44      	itt	mi
 800949e:	232b      	movmi	r3, #43	; 0x2b
 80094a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80094a4:	f89a 3000 	ldrb.w	r3, [sl]
 80094a8:	2b2a      	cmp	r3, #42	; 0x2a
 80094aa:	d015      	beq.n	80094d8 <_vfiprintf_r+0x13c>
 80094ac:	9a07      	ldr	r2, [sp, #28]
 80094ae:	4654      	mov	r4, sl
 80094b0:	2000      	movs	r0, #0
 80094b2:	f04f 0c0a 	mov.w	ip, #10
 80094b6:	4621      	mov	r1, r4
 80094b8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80094bc:	3b30      	subs	r3, #48	; 0x30
 80094be:	2b09      	cmp	r3, #9
 80094c0:	d94e      	bls.n	8009560 <_vfiprintf_r+0x1c4>
 80094c2:	b1b0      	cbz	r0, 80094f2 <_vfiprintf_r+0x156>
 80094c4:	9207      	str	r2, [sp, #28]
 80094c6:	e014      	b.n	80094f2 <_vfiprintf_r+0x156>
 80094c8:	eba0 0308 	sub.w	r3, r0, r8
 80094cc:	fa09 f303 	lsl.w	r3, r9, r3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	9304      	str	r3, [sp, #16]
 80094d4:	46a2      	mov	sl, r4
 80094d6:	e7d2      	b.n	800947e <_vfiprintf_r+0xe2>
 80094d8:	9b03      	ldr	r3, [sp, #12]
 80094da:	1d19      	adds	r1, r3, #4
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	9103      	str	r1, [sp, #12]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	bfbb      	ittet	lt
 80094e4:	425b      	neglt	r3, r3
 80094e6:	f042 0202 	orrlt.w	r2, r2, #2
 80094ea:	9307      	strge	r3, [sp, #28]
 80094ec:	9307      	strlt	r3, [sp, #28]
 80094ee:	bfb8      	it	lt
 80094f0:	9204      	strlt	r2, [sp, #16]
 80094f2:	7823      	ldrb	r3, [r4, #0]
 80094f4:	2b2e      	cmp	r3, #46	; 0x2e
 80094f6:	d10c      	bne.n	8009512 <_vfiprintf_r+0x176>
 80094f8:	7863      	ldrb	r3, [r4, #1]
 80094fa:	2b2a      	cmp	r3, #42	; 0x2a
 80094fc:	d135      	bne.n	800956a <_vfiprintf_r+0x1ce>
 80094fe:	9b03      	ldr	r3, [sp, #12]
 8009500:	1d1a      	adds	r2, r3, #4
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	9203      	str	r2, [sp, #12]
 8009506:	2b00      	cmp	r3, #0
 8009508:	bfb8      	it	lt
 800950a:	f04f 33ff 	movlt.w	r3, #4294967295
 800950e:	3402      	adds	r4, #2
 8009510:	9305      	str	r3, [sp, #20]
 8009512:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80095f8 <_vfiprintf_r+0x25c>
 8009516:	7821      	ldrb	r1, [r4, #0]
 8009518:	2203      	movs	r2, #3
 800951a:	4650      	mov	r0, sl
 800951c:	f7f6 fe70 	bl	8000200 <memchr>
 8009520:	b140      	cbz	r0, 8009534 <_vfiprintf_r+0x198>
 8009522:	2340      	movs	r3, #64	; 0x40
 8009524:	eba0 000a 	sub.w	r0, r0, sl
 8009528:	fa03 f000 	lsl.w	r0, r3, r0
 800952c:	9b04      	ldr	r3, [sp, #16]
 800952e:	4303      	orrs	r3, r0
 8009530:	3401      	adds	r4, #1
 8009532:	9304      	str	r3, [sp, #16]
 8009534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009538:	482c      	ldr	r0, [pc, #176]	; (80095ec <_vfiprintf_r+0x250>)
 800953a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800953e:	2206      	movs	r2, #6
 8009540:	f7f6 fe5e 	bl	8000200 <memchr>
 8009544:	2800      	cmp	r0, #0
 8009546:	d03f      	beq.n	80095c8 <_vfiprintf_r+0x22c>
 8009548:	4b29      	ldr	r3, [pc, #164]	; (80095f0 <_vfiprintf_r+0x254>)
 800954a:	bb1b      	cbnz	r3, 8009594 <_vfiprintf_r+0x1f8>
 800954c:	9b03      	ldr	r3, [sp, #12]
 800954e:	3307      	adds	r3, #7
 8009550:	f023 0307 	bic.w	r3, r3, #7
 8009554:	3308      	adds	r3, #8
 8009556:	9303      	str	r3, [sp, #12]
 8009558:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800955a:	443b      	add	r3, r7
 800955c:	9309      	str	r3, [sp, #36]	; 0x24
 800955e:	e767      	b.n	8009430 <_vfiprintf_r+0x94>
 8009560:	fb0c 3202 	mla	r2, ip, r2, r3
 8009564:	460c      	mov	r4, r1
 8009566:	2001      	movs	r0, #1
 8009568:	e7a5      	b.n	80094b6 <_vfiprintf_r+0x11a>
 800956a:	2300      	movs	r3, #0
 800956c:	3401      	adds	r4, #1
 800956e:	9305      	str	r3, [sp, #20]
 8009570:	4619      	mov	r1, r3
 8009572:	f04f 0c0a 	mov.w	ip, #10
 8009576:	4620      	mov	r0, r4
 8009578:	f810 2b01 	ldrb.w	r2, [r0], #1
 800957c:	3a30      	subs	r2, #48	; 0x30
 800957e:	2a09      	cmp	r2, #9
 8009580:	d903      	bls.n	800958a <_vfiprintf_r+0x1ee>
 8009582:	2b00      	cmp	r3, #0
 8009584:	d0c5      	beq.n	8009512 <_vfiprintf_r+0x176>
 8009586:	9105      	str	r1, [sp, #20]
 8009588:	e7c3      	b.n	8009512 <_vfiprintf_r+0x176>
 800958a:	fb0c 2101 	mla	r1, ip, r1, r2
 800958e:	4604      	mov	r4, r0
 8009590:	2301      	movs	r3, #1
 8009592:	e7f0      	b.n	8009576 <_vfiprintf_r+0x1da>
 8009594:	ab03      	add	r3, sp, #12
 8009596:	9300      	str	r3, [sp, #0]
 8009598:	462a      	mov	r2, r5
 800959a:	4b16      	ldr	r3, [pc, #88]	; (80095f4 <_vfiprintf_r+0x258>)
 800959c:	a904      	add	r1, sp, #16
 800959e:	4630      	mov	r0, r6
 80095a0:	f7fc f82a 	bl	80055f8 <_printf_float>
 80095a4:	4607      	mov	r7, r0
 80095a6:	1c78      	adds	r0, r7, #1
 80095a8:	d1d6      	bne.n	8009558 <_vfiprintf_r+0x1bc>
 80095aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80095ac:	07d9      	lsls	r1, r3, #31
 80095ae:	d405      	bmi.n	80095bc <_vfiprintf_r+0x220>
 80095b0:	89ab      	ldrh	r3, [r5, #12]
 80095b2:	059a      	lsls	r2, r3, #22
 80095b4:	d402      	bmi.n	80095bc <_vfiprintf_r+0x220>
 80095b6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80095b8:	f7fe ffcc 	bl	8008554 <__retarget_lock_release_recursive>
 80095bc:	89ab      	ldrh	r3, [r5, #12]
 80095be:	065b      	lsls	r3, r3, #25
 80095c0:	f53f af12 	bmi.w	80093e8 <_vfiprintf_r+0x4c>
 80095c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80095c6:	e711      	b.n	80093ec <_vfiprintf_r+0x50>
 80095c8:	ab03      	add	r3, sp, #12
 80095ca:	9300      	str	r3, [sp, #0]
 80095cc:	462a      	mov	r2, r5
 80095ce:	4b09      	ldr	r3, [pc, #36]	; (80095f4 <_vfiprintf_r+0x258>)
 80095d0:	a904      	add	r1, sp, #16
 80095d2:	4630      	mov	r0, r6
 80095d4:	f7fc fab4 	bl	8005b40 <_printf_i>
 80095d8:	e7e4      	b.n	80095a4 <_vfiprintf_r+0x208>
 80095da:	bf00      	nop
 80095dc:	08009fd8 	.word	0x08009fd8
 80095e0:	08009ff8 	.word	0x08009ff8
 80095e4:	08009fb8 	.word	0x08009fb8
 80095e8:	0800a1f4 	.word	0x0800a1f4
 80095ec:	0800a1fe 	.word	0x0800a1fe
 80095f0:	080055f9 	.word	0x080055f9
 80095f4:	08009377 	.word	0x08009377
 80095f8:	0800a1fa 	.word	0x0800a1fa
 80095fc:	00000000 	.word	0x00000000

08009600 <nan>:
 8009600:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009608 <nan+0x8>
 8009604:	4770      	bx	lr
 8009606:	bf00      	nop
 8009608:	00000000 	.word	0x00000000
 800960c:	7ff80000 	.word	0x7ff80000

08009610 <_sbrk_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d06      	ldr	r5, [pc, #24]	; (800962c <_sbrk_r+0x1c>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	602b      	str	r3, [r5, #0]
 800961c:	f7f8 f852 	bl	80016c4 <_sbrk>
 8009620:	1c43      	adds	r3, r0, #1
 8009622:	d102      	bne.n	800962a <_sbrk_r+0x1a>
 8009624:	682b      	ldr	r3, [r5, #0]
 8009626:	b103      	cbz	r3, 800962a <_sbrk_r+0x1a>
 8009628:	6023      	str	r3, [r4, #0]
 800962a:	bd38      	pop	{r3, r4, r5, pc}
 800962c:	20000460 	.word	0x20000460

08009630 <__sread>:
 8009630:	b510      	push	{r4, lr}
 8009632:	460c      	mov	r4, r1
 8009634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009638:	f000 faf4 	bl	8009c24 <_read_r>
 800963c:	2800      	cmp	r0, #0
 800963e:	bfab      	itete	ge
 8009640:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009642:	89a3      	ldrhlt	r3, [r4, #12]
 8009644:	181b      	addge	r3, r3, r0
 8009646:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800964a:	bfac      	ite	ge
 800964c:	6563      	strge	r3, [r4, #84]	; 0x54
 800964e:	81a3      	strhlt	r3, [r4, #12]
 8009650:	bd10      	pop	{r4, pc}

08009652 <__swrite>:
 8009652:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009656:	461f      	mov	r7, r3
 8009658:	898b      	ldrh	r3, [r1, #12]
 800965a:	05db      	lsls	r3, r3, #23
 800965c:	4605      	mov	r5, r0
 800965e:	460c      	mov	r4, r1
 8009660:	4616      	mov	r6, r2
 8009662:	d505      	bpl.n	8009670 <__swrite+0x1e>
 8009664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009668:	2302      	movs	r3, #2
 800966a:	2200      	movs	r2, #0
 800966c:	f000 fa18 	bl	8009aa0 <_lseek_r>
 8009670:	89a3      	ldrh	r3, [r4, #12]
 8009672:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009676:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800967a:	81a3      	strh	r3, [r4, #12]
 800967c:	4632      	mov	r2, r6
 800967e:	463b      	mov	r3, r7
 8009680:	4628      	mov	r0, r5
 8009682:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009686:	f000 b889 	b.w	800979c <_write_r>

0800968a <__sseek>:
 800968a:	b510      	push	{r4, lr}
 800968c:	460c      	mov	r4, r1
 800968e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009692:	f000 fa05 	bl	8009aa0 <_lseek_r>
 8009696:	1c43      	adds	r3, r0, #1
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	bf15      	itete	ne
 800969c:	6560      	strne	r0, [r4, #84]	; 0x54
 800969e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80096a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80096a6:	81a3      	strheq	r3, [r4, #12]
 80096a8:	bf18      	it	ne
 80096aa:	81a3      	strhne	r3, [r4, #12]
 80096ac:	bd10      	pop	{r4, pc}

080096ae <__sclose>:
 80096ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096b2:	f000 b911 	b.w	80098d8 <_close_r>

080096b6 <strncmp>:
 80096b6:	b510      	push	{r4, lr}
 80096b8:	b16a      	cbz	r2, 80096d6 <strncmp+0x20>
 80096ba:	3901      	subs	r1, #1
 80096bc:	1884      	adds	r4, r0, r2
 80096be:	f810 3b01 	ldrb.w	r3, [r0], #1
 80096c2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80096c6:	4293      	cmp	r3, r2
 80096c8:	d103      	bne.n	80096d2 <strncmp+0x1c>
 80096ca:	42a0      	cmp	r0, r4
 80096cc:	d001      	beq.n	80096d2 <strncmp+0x1c>
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d1f5      	bne.n	80096be <strncmp+0x8>
 80096d2:	1a98      	subs	r0, r3, r2
 80096d4:	bd10      	pop	{r4, pc}
 80096d6:	4610      	mov	r0, r2
 80096d8:	e7fc      	b.n	80096d4 <strncmp+0x1e>
	...

080096dc <__swbuf_r>:
 80096dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096de:	460e      	mov	r6, r1
 80096e0:	4614      	mov	r4, r2
 80096e2:	4605      	mov	r5, r0
 80096e4:	b118      	cbz	r0, 80096ee <__swbuf_r+0x12>
 80096e6:	6983      	ldr	r3, [r0, #24]
 80096e8:	b90b      	cbnz	r3, 80096ee <__swbuf_r+0x12>
 80096ea:	f7fe fb21 	bl	8007d30 <__sinit>
 80096ee:	4b21      	ldr	r3, [pc, #132]	; (8009774 <__swbuf_r+0x98>)
 80096f0:	429c      	cmp	r4, r3
 80096f2:	d12b      	bne.n	800974c <__swbuf_r+0x70>
 80096f4:	686c      	ldr	r4, [r5, #4]
 80096f6:	69a3      	ldr	r3, [r4, #24]
 80096f8:	60a3      	str	r3, [r4, #8]
 80096fa:	89a3      	ldrh	r3, [r4, #12]
 80096fc:	071a      	lsls	r2, r3, #28
 80096fe:	d52f      	bpl.n	8009760 <__swbuf_r+0x84>
 8009700:	6923      	ldr	r3, [r4, #16]
 8009702:	b36b      	cbz	r3, 8009760 <__swbuf_r+0x84>
 8009704:	6923      	ldr	r3, [r4, #16]
 8009706:	6820      	ldr	r0, [r4, #0]
 8009708:	1ac0      	subs	r0, r0, r3
 800970a:	6963      	ldr	r3, [r4, #20]
 800970c:	b2f6      	uxtb	r6, r6
 800970e:	4283      	cmp	r3, r0
 8009710:	4637      	mov	r7, r6
 8009712:	dc04      	bgt.n	800971e <__swbuf_r+0x42>
 8009714:	4621      	mov	r1, r4
 8009716:	4628      	mov	r0, r5
 8009718:	f000 f974 	bl	8009a04 <_fflush_r>
 800971c:	bb30      	cbnz	r0, 800976c <__swbuf_r+0x90>
 800971e:	68a3      	ldr	r3, [r4, #8]
 8009720:	3b01      	subs	r3, #1
 8009722:	60a3      	str	r3, [r4, #8]
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	1c5a      	adds	r2, r3, #1
 8009728:	6022      	str	r2, [r4, #0]
 800972a:	701e      	strb	r6, [r3, #0]
 800972c:	6963      	ldr	r3, [r4, #20]
 800972e:	3001      	adds	r0, #1
 8009730:	4283      	cmp	r3, r0
 8009732:	d004      	beq.n	800973e <__swbuf_r+0x62>
 8009734:	89a3      	ldrh	r3, [r4, #12]
 8009736:	07db      	lsls	r3, r3, #31
 8009738:	d506      	bpl.n	8009748 <__swbuf_r+0x6c>
 800973a:	2e0a      	cmp	r6, #10
 800973c:	d104      	bne.n	8009748 <__swbuf_r+0x6c>
 800973e:	4621      	mov	r1, r4
 8009740:	4628      	mov	r0, r5
 8009742:	f000 f95f 	bl	8009a04 <_fflush_r>
 8009746:	b988      	cbnz	r0, 800976c <__swbuf_r+0x90>
 8009748:	4638      	mov	r0, r7
 800974a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800974c:	4b0a      	ldr	r3, [pc, #40]	; (8009778 <__swbuf_r+0x9c>)
 800974e:	429c      	cmp	r4, r3
 8009750:	d101      	bne.n	8009756 <__swbuf_r+0x7a>
 8009752:	68ac      	ldr	r4, [r5, #8]
 8009754:	e7cf      	b.n	80096f6 <__swbuf_r+0x1a>
 8009756:	4b09      	ldr	r3, [pc, #36]	; (800977c <__swbuf_r+0xa0>)
 8009758:	429c      	cmp	r4, r3
 800975a:	bf08      	it	eq
 800975c:	68ec      	ldreq	r4, [r5, #12]
 800975e:	e7ca      	b.n	80096f6 <__swbuf_r+0x1a>
 8009760:	4621      	mov	r1, r4
 8009762:	4628      	mov	r0, r5
 8009764:	f000 f82c 	bl	80097c0 <__swsetup_r>
 8009768:	2800      	cmp	r0, #0
 800976a:	d0cb      	beq.n	8009704 <__swbuf_r+0x28>
 800976c:	f04f 37ff 	mov.w	r7, #4294967295
 8009770:	e7ea      	b.n	8009748 <__swbuf_r+0x6c>
 8009772:	bf00      	nop
 8009774:	08009fd8 	.word	0x08009fd8
 8009778:	08009ff8 	.word	0x08009ff8
 800977c:	08009fb8 	.word	0x08009fb8

08009780 <__ascii_wctomb>:
 8009780:	b149      	cbz	r1, 8009796 <__ascii_wctomb+0x16>
 8009782:	2aff      	cmp	r2, #255	; 0xff
 8009784:	bf85      	ittet	hi
 8009786:	238a      	movhi	r3, #138	; 0x8a
 8009788:	6003      	strhi	r3, [r0, #0]
 800978a:	700a      	strbls	r2, [r1, #0]
 800978c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009790:	bf98      	it	ls
 8009792:	2001      	movls	r0, #1
 8009794:	4770      	bx	lr
 8009796:	4608      	mov	r0, r1
 8009798:	4770      	bx	lr
	...

0800979c <_write_r>:
 800979c:	b538      	push	{r3, r4, r5, lr}
 800979e:	4d07      	ldr	r5, [pc, #28]	; (80097bc <_write_r+0x20>)
 80097a0:	4604      	mov	r4, r0
 80097a2:	4608      	mov	r0, r1
 80097a4:	4611      	mov	r1, r2
 80097a6:	2200      	movs	r2, #0
 80097a8:	602a      	str	r2, [r5, #0]
 80097aa:	461a      	mov	r2, r3
 80097ac:	f7f7 fd70 	bl	8001290 <_write>
 80097b0:	1c43      	adds	r3, r0, #1
 80097b2:	d102      	bne.n	80097ba <_write_r+0x1e>
 80097b4:	682b      	ldr	r3, [r5, #0]
 80097b6:	b103      	cbz	r3, 80097ba <_write_r+0x1e>
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	20000460 	.word	0x20000460

080097c0 <__swsetup_r>:
 80097c0:	4b32      	ldr	r3, [pc, #200]	; (800988c <__swsetup_r+0xcc>)
 80097c2:	b570      	push	{r4, r5, r6, lr}
 80097c4:	681d      	ldr	r5, [r3, #0]
 80097c6:	4606      	mov	r6, r0
 80097c8:	460c      	mov	r4, r1
 80097ca:	b125      	cbz	r5, 80097d6 <__swsetup_r+0x16>
 80097cc:	69ab      	ldr	r3, [r5, #24]
 80097ce:	b913      	cbnz	r3, 80097d6 <__swsetup_r+0x16>
 80097d0:	4628      	mov	r0, r5
 80097d2:	f7fe faad 	bl	8007d30 <__sinit>
 80097d6:	4b2e      	ldr	r3, [pc, #184]	; (8009890 <__swsetup_r+0xd0>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	d10f      	bne.n	80097fc <__swsetup_r+0x3c>
 80097dc:	686c      	ldr	r4, [r5, #4]
 80097de:	89a3      	ldrh	r3, [r4, #12]
 80097e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80097e4:	0719      	lsls	r1, r3, #28
 80097e6:	d42c      	bmi.n	8009842 <__swsetup_r+0x82>
 80097e8:	06dd      	lsls	r5, r3, #27
 80097ea:	d411      	bmi.n	8009810 <__swsetup_r+0x50>
 80097ec:	2309      	movs	r3, #9
 80097ee:	6033      	str	r3, [r6, #0]
 80097f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80097f4:	81a3      	strh	r3, [r4, #12]
 80097f6:	f04f 30ff 	mov.w	r0, #4294967295
 80097fa:	e03e      	b.n	800987a <__swsetup_r+0xba>
 80097fc:	4b25      	ldr	r3, [pc, #148]	; (8009894 <__swsetup_r+0xd4>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d101      	bne.n	8009806 <__swsetup_r+0x46>
 8009802:	68ac      	ldr	r4, [r5, #8]
 8009804:	e7eb      	b.n	80097de <__swsetup_r+0x1e>
 8009806:	4b24      	ldr	r3, [pc, #144]	; (8009898 <__swsetup_r+0xd8>)
 8009808:	429c      	cmp	r4, r3
 800980a:	bf08      	it	eq
 800980c:	68ec      	ldreq	r4, [r5, #12]
 800980e:	e7e6      	b.n	80097de <__swsetup_r+0x1e>
 8009810:	0758      	lsls	r0, r3, #29
 8009812:	d512      	bpl.n	800983a <__swsetup_r+0x7a>
 8009814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009816:	b141      	cbz	r1, 800982a <__swsetup_r+0x6a>
 8009818:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800981c:	4299      	cmp	r1, r3
 800981e:	d002      	beq.n	8009826 <__swsetup_r+0x66>
 8009820:	4630      	mov	r0, r6
 8009822:	f7ff fb8b 	bl	8008f3c <_free_r>
 8009826:	2300      	movs	r3, #0
 8009828:	6363      	str	r3, [r4, #52]	; 0x34
 800982a:	89a3      	ldrh	r3, [r4, #12]
 800982c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009830:	81a3      	strh	r3, [r4, #12]
 8009832:	2300      	movs	r3, #0
 8009834:	6063      	str	r3, [r4, #4]
 8009836:	6923      	ldr	r3, [r4, #16]
 8009838:	6023      	str	r3, [r4, #0]
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	f043 0308 	orr.w	r3, r3, #8
 8009840:	81a3      	strh	r3, [r4, #12]
 8009842:	6923      	ldr	r3, [r4, #16]
 8009844:	b94b      	cbnz	r3, 800985a <__swsetup_r+0x9a>
 8009846:	89a3      	ldrh	r3, [r4, #12]
 8009848:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800984c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009850:	d003      	beq.n	800985a <__swsetup_r+0x9a>
 8009852:	4621      	mov	r1, r4
 8009854:	4630      	mov	r0, r6
 8009856:	f000 f959 	bl	8009b0c <__smakebuf_r>
 800985a:	89a0      	ldrh	r0, [r4, #12]
 800985c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009860:	f010 0301 	ands.w	r3, r0, #1
 8009864:	d00a      	beq.n	800987c <__swsetup_r+0xbc>
 8009866:	2300      	movs	r3, #0
 8009868:	60a3      	str	r3, [r4, #8]
 800986a:	6963      	ldr	r3, [r4, #20]
 800986c:	425b      	negs	r3, r3
 800986e:	61a3      	str	r3, [r4, #24]
 8009870:	6923      	ldr	r3, [r4, #16]
 8009872:	b943      	cbnz	r3, 8009886 <__swsetup_r+0xc6>
 8009874:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009878:	d1ba      	bne.n	80097f0 <__swsetup_r+0x30>
 800987a:	bd70      	pop	{r4, r5, r6, pc}
 800987c:	0781      	lsls	r1, r0, #30
 800987e:	bf58      	it	pl
 8009880:	6963      	ldrpl	r3, [r4, #20]
 8009882:	60a3      	str	r3, [r4, #8]
 8009884:	e7f4      	b.n	8009870 <__swsetup_r+0xb0>
 8009886:	2000      	movs	r0, #0
 8009888:	e7f7      	b.n	800987a <__swsetup_r+0xba>
 800988a:	bf00      	nop
 800988c:	2000000c 	.word	0x2000000c
 8009890:	08009fd8 	.word	0x08009fd8
 8009894:	08009ff8 	.word	0x08009ff8
 8009898:	08009fb8 	.word	0x08009fb8

0800989c <__assert_func>:
 800989c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800989e:	4614      	mov	r4, r2
 80098a0:	461a      	mov	r2, r3
 80098a2:	4b09      	ldr	r3, [pc, #36]	; (80098c8 <__assert_func+0x2c>)
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	4605      	mov	r5, r0
 80098a8:	68d8      	ldr	r0, [r3, #12]
 80098aa:	b14c      	cbz	r4, 80098c0 <__assert_func+0x24>
 80098ac:	4b07      	ldr	r3, [pc, #28]	; (80098cc <__assert_func+0x30>)
 80098ae:	9100      	str	r1, [sp, #0]
 80098b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80098b4:	4906      	ldr	r1, [pc, #24]	; (80098d0 <__assert_func+0x34>)
 80098b6:	462b      	mov	r3, r5
 80098b8:	f000 f8e0 	bl	8009a7c <fiprintf>
 80098bc:	f000 f9c4 	bl	8009c48 <abort>
 80098c0:	4b04      	ldr	r3, [pc, #16]	; (80098d4 <__assert_func+0x38>)
 80098c2:	461c      	mov	r4, r3
 80098c4:	e7f3      	b.n	80098ae <__assert_func+0x12>
 80098c6:	bf00      	nop
 80098c8:	2000000c 	.word	0x2000000c
 80098cc:	0800a205 	.word	0x0800a205
 80098d0:	0800a212 	.word	0x0800a212
 80098d4:	0800a240 	.word	0x0800a240

080098d8 <_close_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4d06      	ldr	r5, [pc, #24]	; (80098f4 <_close_r+0x1c>)
 80098dc:	2300      	movs	r3, #0
 80098de:	4604      	mov	r4, r0
 80098e0:	4608      	mov	r0, r1
 80098e2:	602b      	str	r3, [r5, #0]
 80098e4:	f7f7 feb9 	bl	800165a <_close>
 80098e8:	1c43      	adds	r3, r0, #1
 80098ea:	d102      	bne.n	80098f2 <_close_r+0x1a>
 80098ec:	682b      	ldr	r3, [r5, #0]
 80098ee:	b103      	cbz	r3, 80098f2 <_close_r+0x1a>
 80098f0:	6023      	str	r3, [r4, #0]
 80098f2:	bd38      	pop	{r3, r4, r5, pc}
 80098f4:	20000460 	.word	0x20000460

080098f8 <__sflush_r>:
 80098f8:	898a      	ldrh	r2, [r1, #12]
 80098fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	4605      	mov	r5, r0
 8009900:	0710      	lsls	r0, r2, #28
 8009902:	460c      	mov	r4, r1
 8009904:	d458      	bmi.n	80099b8 <__sflush_r+0xc0>
 8009906:	684b      	ldr	r3, [r1, #4]
 8009908:	2b00      	cmp	r3, #0
 800990a:	dc05      	bgt.n	8009918 <__sflush_r+0x20>
 800990c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800990e:	2b00      	cmp	r3, #0
 8009910:	dc02      	bgt.n	8009918 <__sflush_r+0x20>
 8009912:	2000      	movs	r0, #0
 8009914:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009918:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800991a:	2e00      	cmp	r6, #0
 800991c:	d0f9      	beq.n	8009912 <__sflush_r+0x1a>
 800991e:	2300      	movs	r3, #0
 8009920:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009924:	682f      	ldr	r7, [r5, #0]
 8009926:	602b      	str	r3, [r5, #0]
 8009928:	d032      	beq.n	8009990 <__sflush_r+0x98>
 800992a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800992c:	89a3      	ldrh	r3, [r4, #12]
 800992e:	075a      	lsls	r2, r3, #29
 8009930:	d505      	bpl.n	800993e <__sflush_r+0x46>
 8009932:	6863      	ldr	r3, [r4, #4]
 8009934:	1ac0      	subs	r0, r0, r3
 8009936:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009938:	b10b      	cbz	r3, 800993e <__sflush_r+0x46>
 800993a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800993c:	1ac0      	subs	r0, r0, r3
 800993e:	2300      	movs	r3, #0
 8009940:	4602      	mov	r2, r0
 8009942:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009944:	6a21      	ldr	r1, [r4, #32]
 8009946:	4628      	mov	r0, r5
 8009948:	47b0      	blx	r6
 800994a:	1c43      	adds	r3, r0, #1
 800994c:	89a3      	ldrh	r3, [r4, #12]
 800994e:	d106      	bne.n	800995e <__sflush_r+0x66>
 8009950:	6829      	ldr	r1, [r5, #0]
 8009952:	291d      	cmp	r1, #29
 8009954:	d82c      	bhi.n	80099b0 <__sflush_r+0xb8>
 8009956:	4a2a      	ldr	r2, [pc, #168]	; (8009a00 <__sflush_r+0x108>)
 8009958:	40ca      	lsrs	r2, r1
 800995a:	07d6      	lsls	r6, r2, #31
 800995c:	d528      	bpl.n	80099b0 <__sflush_r+0xb8>
 800995e:	2200      	movs	r2, #0
 8009960:	6062      	str	r2, [r4, #4]
 8009962:	04d9      	lsls	r1, r3, #19
 8009964:	6922      	ldr	r2, [r4, #16]
 8009966:	6022      	str	r2, [r4, #0]
 8009968:	d504      	bpl.n	8009974 <__sflush_r+0x7c>
 800996a:	1c42      	adds	r2, r0, #1
 800996c:	d101      	bne.n	8009972 <__sflush_r+0x7a>
 800996e:	682b      	ldr	r3, [r5, #0]
 8009970:	b903      	cbnz	r3, 8009974 <__sflush_r+0x7c>
 8009972:	6560      	str	r0, [r4, #84]	; 0x54
 8009974:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009976:	602f      	str	r7, [r5, #0]
 8009978:	2900      	cmp	r1, #0
 800997a:	d0ca      	beq.n	8009912 <__sflush_r+0x1a>
 800997c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009980:	4299      	cmp	r1, r3
 8009982:	d002      	beq.n	800998a <__sflush_r+0x92>
 8009984:	4628      	mov	r0, r5
 8009986:	f7ff fad9 	bl	8008f3c <_free_r>
 800998a:	2000      	movs	r0, #0
 800998c:	6360      	str	r0, [r4, #52]	; 0x34
 800998e:	e7c1      	b.n	8009914 <__sflush_r+0x1c>
 8009990:	6a21      	ldr	r1, [r4, #32]
 8009992:	2301      	movs	r3, #1
 8009994:	4628      	mov	r0, r5
 8009996:	47b0      	blx	r6
 8009998:	1c41      	adds	r1, r0, #1
 800999a:	d1c7      	bne.n	800992c <__sflush_r+0x34>
 800999c:	682b      	ldr	r3, [r5, #0]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d0c4      	beq.n	800992c <__sflush_r+0x34>
 80099a2:	2b1d      	cmp	r3, #29
 80099a4:	d001      	beq.n	80099aa <__sflush_r+0xb2>
 80099a6:	2b16      	cmp	r3, #22
 80099a8:	d101      	bne.n	80099ae <__sflush_r+0xb6>
 80099aa:	602f      	str	r7, [r5, #0]
 80099ac:	e7b1      	b.n	8009912 <__sflush_r+0x1a>
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099b4:	81a3      	strh	r3, [r4, #12]
 80099b6:	e7ad      	b.n	8009914 <__sflush_r+0x1c>
 80099b8:	690f      	ldr	r7, [r1, #16]
 80099ba:	2f00      	cmp	r7, #0
 80099bc:	d0a9      	beq.n	8009912 <__sflush_r+0x1a>
 80099be:	0793      	lsls	r3, r2, #30
 80099c0:	680e      	ldr	r6, [r1, #0]
 80099c2:	bf08      	it	eq
 80099c4:	694b      	ldreq	r3, [r1, #20]
 80099c6:	600f      	str	r7, [r1, #0]
 80099c8:	bf18      	it	ne
 80099ca:	2300      	movne	r3, #0
 80099cc:	eba6 0807 	sub.w	r8, r6, r7
 80099d0:	608b      	str	r3, [r1, #8]
 80099d2:	f1b8 0f00 	cmp.w	r8, #0
 80099d6:	dd9c      	ble.n	8009912 <__sflush_r+0x1a>
 80099d8:	6a21      	ldr	r1, [r4, #32]
 80099da:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099dc:	4643      	mov	r3, r8
 80099de:	463a      	mov	r2, r7
 80099e0:	4628      	mov	r0, r5
 80099e2:	47b0      	blx	r6
 80099e4:	2800      	cmp	r0, #0
 80099e6:	dc06      	bgt.n	80099f6 <__sflush_r+0xfe>
 80099e8:	89a3      	ldrh	r3, [r4, #12]
 80099ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80099ee:	81a3      	strh	r3, [r4, #12]
 80099f0:	f04f 30ff 	mov.w	r0, #4294967295
 80099f4:	e78e      	b.n	8009914 <__sflush_r+0x1c>
 80099f6:	4407      	add	r7, r0
 80099f8:	eba8 0800 	sub.w	r8, r8, r0
 80099fc:	e7e9      	b.n	80099d2 <__sflush_r+0xda>
 80099fe:	bf00      	nop
 8009a00:	20400001 	.word	0x20400001

08009a04 <_fflush_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	690b      	ldr	r3, [r1, #16]
 8009a08:	4605      	mov	r5, r0
 8009a0a:	460c      	mov	r4, r1
 8009a0c:	b913      	cbnz	r3, 8009a14 <_fflush_r+0x10>
 8009a0e:	2500      	movs	r5, #0
 8009a10:	4628      	mov	r0, r5
 8009a12:	bd38      	pop	{r3, r4, r5, pc}
 8009a14:	b118      	cbz	r0, 8009a1e <_fflush_r+0x1a>
 8009a16:	6983      	ldr	r3, [r0, #24]
 8009a18:	b90b      	cbnz	r3, 8009a1e <_fflush_r+0x1a>
 8009a1a:	f7fe f989 	bl	8007d30 <__sinit>
 8009a1e:	4b14      	ldr	r3, [pc, #80]	; (8009a70 <_fflush_r+0x6c>)
 8009a20:	429c      	cmp	r4, r3
 8009a22:	d11b      	bne.n	8009a5c <_fflush_r+0x58>
 8009a24:	686c      	ldr	r4, [r5, #4]
 8009a26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d0ef      	beq.n	8009a0e <_fflush_r+0xa>
 8009a2e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009a30:	07d0      	lsls	r0, r2, #31
 8009a32:	d404      	bmi.n	8009a3e <_fflush_r+0x3a>
 8009a34:	0599      	lsls	r1, r3, #22
 8009a36:	d402      	bmi.n	8009a3e <_fflush_r+0x3a>
 8009a38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a3a:	f7fe fd8a 	bl	8008552 <__retarget_lock_acquire_recursive>
 8009a3e:	4628      	mov	r0, r5
 8009a40:	4621      	mov	r1, r4
 8009a42:	f7ff ff59 	bl	80098f8 <__sflush_r>
 8009a46:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a48:	07da      	lsls	r2, r3, #31
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	d4e0      	bmi.n	8009a10 <_fflush_r+0xc>
 8009a4e:	89a3      	ldrh	r3, [r4, #12]
 8009a50:	059b      	lsls	r3, r3, #22
 8009a52:	d4dd      	bmi.n	8009a10 <_fflush_r+0xc>
 8009a54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a56:	f7fe fd7d 	bl	8008554 <__retarget_lock_release_recursive>
 8009a5a:	e7d9      	b.n	8009a10 <_fflush_r+0xc>
 8009a5c:	4b05      	ldr	r3, [pc, #20]	; (8009a74 <_fflush_r+0x70>)
 8009a5e:	429c      	cmp	r4, r3
 8009a60:	d101      	bne.n	8009a66 <_fflush_r+0x62>
 8009a62:	68ac      	ldr	r4, [r5, #8]
 8009a64:	e7df      	b.n	8009a26 <_fflush_r+0x22>
 8009a66:	4b04      	ldr	r3, [pc, #16]	; (8009a78 <_fflush_r+0x74>)
 8009a68:	429c      	cmp	r4, r3
 8009a6a:	bf08      	it	eq
 8009a6c:	68ec      	ldreq	r4, [r5, #12]
 8009a6e:	e7da      	b.n	8009a26 <_fflush_r+0x22>
 8009a70:	08009fd8 	.word	0x08009fd8
 8009a74:	08009ff8 	.word	0x08009ff8
 8009a78:	08009fb8 	.word	0x08009fb8

08009a7c <fiprintf>:
 8009a7c:	b40e      	push	{r1, r2, r3}
 8009a7e:	b503      	push	{r0, r1, lr}
 8009a80:	4601      	mov	r1, r0
 8009a82:	ab03      	add	r3, sp, #12
 8009a84:	4805      	ldr	r0, [pc, #20]	; (8009a9c <fiprintf+0x20>)
 8009a86:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a8a:	6800      	ldr	r0, [r0, #0]
 8009a8c:	9301      	str	r3, [sp, #4]
 8009a8e:	f7ff fc85 	bl	800939c <_vfiprintf_r>
 8009a92:	b002      	add	sp, #8
 8009a94:	f85d eb04 	ldr.w	lr, [sp], #4
 8009a98:	b003      	add	sp, #12
 8009a9a:	4770      	bx	lr
 8009a9c:	2000000c 	.word	0x2000000c

08009aa0 <_lseek_r>:
 8009aa0:	b538      	push	{r3, r4, r5, lr}
 8009aa2:	4d07      	ldr	r5, [pc, #28]	; (8009ac0 <_lseek_r+0x20>)
 8009aa4:	4604      	mov	r4, r0
 8009aa6:	4608      	mov	r0, r1
 8009aa8:	4611      	mov	r1, r2
 8009aaa:	2200      	movs	r2, #0
 8009aac:	602a      	str	r2, [r5, #0]
 8009aae:	461a      	mov	r2, r3
 8009ab0:	f7f7 fdfa 	bl	80016a8 <_lseek>
 8009ab4:	1c43      	adds	r3, r0, #1
 8009ab6:	d102      	bne.n	8009abe <_lseek_r+0x1e>
 8009ab8:	682b      	ldr	r3, [r5, #0]
 8009aba:	b103      	cbz	r3, 8009abe <_lseek_r+0x1e>
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	bd38      	pop	{r3, r4, r5, pc}
 8009ac0:	20000460 	.word	0x20000460

08009ac4 <__swhatbuf_r>:
 8009ac4:	b570      	push	{r4, r5, r6, lr}
 8009ac6:	460e      	mov	r6, r1
 8009ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009acc:	2900      	cmp	r1, #0
 8009ace:	b096      	sub	sp, #88	; 0x58
 8009ad0:	4614      	mov	r4, r2
 8009ad2:	461d      	mov	r5, r3
 8009ad4:	da07      	bge.n	8009ae6 <__swhatbuf_r+0x22>
 8009ad6:	2300      	movs	r3, #0
 8009ad8:	602b      	str	r3, [r5, #0]
 8009ada:	89b3      	ldrh	r3, [r6, #12]
 8009adc:	061a      	lsls	r2, r3, #24
 8009ade:	d410      	bmi.n	8009b02 <__swhatbuf_r+0x3e>
 8009ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ae4:	e00e      	b.n	8009b04 <__swhatbuf_r+0x40>
 8009ae6:	466a      	mov	r2, sp
 8009ae8:	f000 f8b6 	bl	8009c58 <_fstat_r>
 8009aec:	2800      	cmp	r0, #0
 8009aee:	dbf2      	blt.n	8009ad6 <__swhatbuf_r+0x12>
 8009af0:	9a01      	ldr	r2, [sp, #4]
 8009af2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009af6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009afa:	425a      	negs	r2, r3
 8009afc:	415a      	adcs	r2, r3
 8009afe:	602a      	str	r2, [r5, #0]
 8009b00:	e7ee      	b.n	8009ae0 <__swhatbuf_r+0x1c>
 8009b02:	2340      	movs	r3, #64	; 0x40
 8009b04:	2000      	movs	r0, #0
 8009b06:	6023      	str	r3, [r4, #0]
 8009b08:	b016      	add	sp, #88	; 0x58
 8009b0a:	bd70      	pop	{r4, r5, r6, pc}

08009b0c <__smakebuf_r>:
 8009b0c:	898b      	ldrh	r3, [r1, #12]
 8009b0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009b10:	079d      	lsls	r5, r3, #30
 8009b12:	4606      	mov	r6, r0
 8009b14:	460c      	mov	r4, r1
 8009b16:	d507      	bpl.n	8009b28 <__smakebuf_r+0x1c>
 8009b18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009b1c:	6023      	str	r3, [r4, #0]
 8009b1e:	6123      	str	r3, [r4, #16]
 8009b20:	2301      	movs	r3, #1
 8009b22:	6163      	str	r3, [r4, #20]
 8009b24:	b002      	add	sp, #8
 8009b26:	bd70      	pop	{r4, r5, r6, pc}
 8009b28:	ab01      	add	r3, sp, #4
 8009b2a:	466a      	mov	r2, sp
 8009b2c:	f7ff ffca 	bl	8009ac4 <__swhatbuf_r>
 8009b30:	9900      	ldr	r1, [sp, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	4630      	mov	r0, r6
 8009b36:	f7ff fa51 	bl	8008fdc <_malloc_r>
 8009b3a:	b948      	cbnz	r0, 8009b50 <__smakebuf_r+0x44>
 8009b3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009b40:	059a      	lsls	r2, r3, #22
 8009b42:	d4ef      	bmi.n	8009b24 <__smakebuf_r+0x18>
 8009b44:	f023 0303 	bic.w	r3, r3, #3
 8009b48:	f043 0302 	orr.w	r3, r3, #2
 8009b4c:	81a3      	strh	r3, [r4, #12]
 8009b4e:	e7e3      	b.n	8009b18 <__smakebuf_r+0xc>
 8009b50:	4b0d      	ldr	r3, [pc, #52]	; (8009b88 <__smakebuf_r+0x7c>)
 8009b52:	62b3      	str	r3, [r6, #40]	; 0x28
 8009b54:	89a3      	ldrh	r3, [r4, #12]
 8009b56:	6020      	str	r0, [r4, #0]
 8009b58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b5c:	81a3      	strh	r3, [r4, #12]
 8009b5e:	9b00      	ldr	r3, [sp, #0]
 8009b60:	6163      	str	r3, [r4, #20]
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	6120      	str	r0, [r4, #16]
 8009b66:	b15b      	cbz	r3, 8009b80 <__smakebuf_r+0x74>
 8009b68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	f000 f885 	bl	8009c7c <_isatty_r>
 8009b72:	b128      	cbz	r0, 8009b80 <__smakebuf_r+0x74>
 8009b74:	89a3      	ldrh	r3, [r4, #12]
 8009b76:	f023 0303 	bic.w	r3, r3, #3
 8009b7a:	f043 0301 	orr.w	r3, r3, #1
 8009b7e:	81a3      	strh	r3, [r4, #12]
 8009b80:	89a0      	ldrh	r0, [r4, #12]
 8009b82:	4305      	orrs	r5, r0
 8009b84:	81a5      	strh	r5, [r4, #12]
 8009b86:	e7cd      	b.n	8009b24 <__smakebuf_r+0x18>
 8009b88:	08007cc9 	.word	0x08007cc9

08009b8c <memmove>:
 8009b8c:	4288      	cmp	r0, r1
 8009b8e:	b510      	push	{r4, lr}
 8009b90:	eb01 0402 	add.w	r4, r1, r2
 8009b94:	d902      	bls.n	8009b9c <memmove+0x10>
 8009b96:	4284      	cmp	r4, r0
 8009b98:	4623      	mov	r3, r4
 8009b9a:	d807      	bhi.n	8009bac <memmove+0x20>
 8009b9c:	1e43      	subs	r3, r0, #1
 8009b9e:	42a1      	cmp	r1, r4
 8009ba0:	d008      	beq.n	8009bb4 <memmove+0x28>
 8009ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009baa:	e7f8      	b.n	8009b9e <memmove+0x12>
 8009bac:	4402      	add	r2, r0
 8009bae:	4601      	mov	r1, r0
 8009bb0:	428a      	cmp	r2, r1
 8009bb2:	d100      	bne.n	8009bb6 <memmove+0x2a>
 8009bb4:	bd10      	pop	{r4, pc}
 8009bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009bbe:	e7f7      	b.n	8009bb0 <memmove+0x24>

08009bc0 <__malloc_lock>:
 8009bc0:	4801      	ldr	r0, [pc, #4]	; (8009bc8 <__malloc_lock+0x8>)
 8009bc2:	f7fe bcc6 	b.w	8008552 <__retarget_lock_acquire_recursive>
 8009bc6:	bf00      	nop
 8009bc8:	20000458 	.word	0x20000458

08009bcc <__malloc_unlock>:
 8009bcc:	4801      	ldr	r0, [pc, #4]	; (8009bd4 <__malloc_unlock+0x8>)
 8009bce:	f7fe bcc1 	b.w	8008554 <__retarget_lock_release_recursive>
 8009bd2:	bf00      	nop
 8009bd4:	20000458 	.word	0x20000458

08009bd8 <_realloc_r>:
 8009bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009bda:	4607      	mov	r7, r0
 8009bdc:	4614      	mov	r4, r2
 8009bde:	460e      	mov	r6, r1
 8009be0:	b921      	cbnz	r1, 8009bec <_realloc_r+0x14>
 8009be2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009be6:	4611      	mov	r1, r2
 8009be8:	f7ff b9f8 	b.w	8008fdc <_malloc_r>
 8009bec:	b922      	cbnz	r2, 8009bf8 <_realloc_r+0x20>
 8009bee:	f7ff f9a5 	bl	8008f3c <_free_r>
 8009bf2:	4625      	mov	r5, r4
 8009bf4:	4628      	mov	r0, r5
 8009bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009bf8:	f000 f850 	bl	8009c9c <_malloc_usable_size_r>
 8009bfc:	42a0      	cmp	r0, r4
 8009bfe:	d20f      	bcs.n	8009c20 <_realloc_r+0x48>
 8009c00:	4621      	mov	r1, r4
 8009c02:	4638      	mov	r0, r7
 8009c04:	f7ff f9ea 	bl	8008fdc <_malloc_r>
 8009c08:	4605      	mov	r5, r0
 8009c0a:	2800      	cmp	r0, #0
 8009c0c:	d0f2      	beq.n	8009bf4 <_realloc_r+0x1c>
 8009c0e:	4631      	mov	r1, r6
 8009c10:	4622      	mov	r2, r4
 8009c12:	f7fe fcbb 	bl	800858c <memcpy>
 8009c16:	4631      	mov	r1, r6
 8009c18:	4638      	mov	r0, r7
 8009c1a:	f7ff f98f 	bl	8008f3c <_free_r>
 8009c1e:	e7e9      	b.n	8009bf4 <_realloc_r+0x1c>
 8009c20:	4635      	mov	r5, r6
 8009c22:	e7e7      	b.n	8009bf4 <_realloc_r+0x1c>

08009c24 <_read_r>:
 8009c24:	b538      	push	{r3, r4, r5, lr}
 8009c26:	4d07      	ldr	r5, [pc, #28]	; (8009c44 <_read_r+0x20>)
 8009c28:	4604      	mov	r4, r0
 8009c2a:	4608      	mov	r0, r1
 8009c2c:	4611      	mov	r1, r2
 8009c2e:	2200      	movs	r2, #0
 8009c30:	602a      	str	r2, [r5, #0]
 8009c32:	461a      	mov	r2, r3
 8009c34:	f7f7 fcf4 	bl	8001620 <_read>
 8009c38:	1c43      	adds	r3, r0, #1
 8009c3a:	d102      	bne.n	8009c42 <_read_r+0x1e>
 8009c3c:	682b      	ldr	r3, [r5, #0]
 8009c3e:	b103      	cbz	r3, 8009c42 <_read_r+0x1e>
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	bd38      	pop	{r3, r4, r5, pc}
 8009c44:	20000460 	.word	0x20000460

08009c48 <abort>:
 8009c48:	b508      	push	{r3, lr}
 8009c4a:	2006      	movs	r0, #6
 8009c4c:	f000 f856 	bl	8009cfc <raise>
 8009c50:	2001      	movs	r0, #1
 8009c52:	f7f7 fcdb 	bl	800160c <_exit>
	...

08009c58 <_fstat_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	4d07      	ldr	r5, [pc, #28]	; (8009c78 <_fstat_r+0x20>)
 8009c5c:	2300      	movs	r3, #0
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	4611      	mov	r1, r2
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	f7f7 fd04 	bl	8001672 <_fstat>
 8009c6a:	1c43      	adds	r3, r0, #1
 8009c6c:	d102      	bne.n	8009c74 <_fstat_r+0x1c>
 8009c6e:	682b      	ldr	r3, [r5, #0]
 8009c70:	b103      	cbz	r3, 8009c74 <_fstat_r+0x1c>
 8009c72:	6023      	str	r3, [r4, #0]
 8009c74:	bd38      	pop	{r3, r4, r5, pc}
 8009c76:	bf00      	nop
 8009c78:	20000460 	.word	0x20000460

08009c7c <_isatty_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	4d06      	ldr	r5, [pc, #24]	; (8009c98 <_isatty_r+0x1c>)
 8009c80:	2300      	movs	r3, #0
 8009c82:	4604      	mov	r4, r0
 8009c84:	4608      	mov	r0, r1
 8009c86:	602b      	str	r3, [r5, #0]
 8009c88:	f7f7 fd03 	bl	8001692 <_isatty>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	d102      	bne.n	8009c96 <_isatty_r+0x1a>
 8009c90:	682b      	ldr	r3, [r5, #0]
 8009c92:	b103      	cbz	r3, 8009c96 <_isatty_r+0x1a>
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	bd38      	pop	{r3, r4, r5, pc}
 8009c98:	20000460 	.word	0x20000460

08009c9c <_malloc_usable_size_r>:
 8009c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ca0:	1f18      	subs	r0, r3, #4
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	bfbc      	itt	lt
 8009ca6:	580b      	ldrlt	r3, [r1, r0]
 8009ca8:	18c0      	addlt	r0, r0, r3
 8009caa:	4770      	bx	lr

08009cac <_raise_r>:
 8009cac:	291f      	cmp	r1, #31
 8009cae:	b538      	push	{r3, r4, r5, lr}
 8009cb0:	4604      	mov	r4, r0
 8009cb2:	460d      	mov	r5, r1
 8009cb4:	d904      	bls.n	8009cc0 <_raise_r+0x14>
 8009cb6:	2316      	movs	r3, #22
 8009cb8:	6003      	str	r3, [r0, #0]
 8009cba:	f04f 30ff 	mov.w	r0, #4294967295
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009cc2:	b112      	cbz	r2, 8009cca <_raise_r+0x1e>
 8009cc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009cc8:	b94b      	cbnz	r3, 8009cde <_raise_r+0x32>
 8009cca:	4620      	mov	r0, r4
 8009ccc:	f000 f830 	bl	8009d30 <_getpid_r>
 8009cd0:	462a      	mov	r2, r5
 8009cd2:	4601      	mov	r1, r0
 8009cd4:	4620      	mov	r0, r4
 8009cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cda:	f000 b817 	b.w	8009d0c <_kill_r>
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d00a      	beq.n	8009cf8 <_raise_r+0x4c>
 8009ce2:	1c59      	adds	r1, r3, #1
 8009ce4:	d103      	bne.n	8009cee <_raise_r+0x42>
 8009ce6:	2316      	movs	r3, #22
 8009ce8:	6003      	str	r3, [r0, #0]
 8009cea:	2001      	movs	r0, #1
 8009cec:	e7e7      	b.n	8009cbe <_raise_r+0x12>
 8009cee:	2400      	movs	r4, #0
 8009cf0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009cf4:	4628      	mov	r0, r5
 8009cf6:	4798      	blx	r3
 8009cf8:	2000      	movs	r0, #0
 8009cfa:	e7e0      	b.n	8009cbe <_raise_r+0x12>

08009cfc <raise>:
 8009cfc:	4b02      	ldr	r3, [pc, #8]	; (8009d08 <raise+0xc>)
 8009cfe:	4601      	mov	r1, r0
 8009d00:	6818      	ldr	r0, [r3, #0]
 8009d02:	f7ff bfd3 	b.w	8009cac <_raise_r>
 8009d06:	bf00      	nop
 8009d08:	2000000c 	.word	0x2000000c

08009d0c <_kill_r>:
 8009d0c:	b538      	push	{r3, r4, r5, lr}
 8009d0e:	4d07      	ldr	r5, [pc, #28]	; (8009d2c <_kill_r+0x20>)
 8009d10:	2300      	movs	r3, #0
 8009d12:	4604      	mov	r4, r0
 8009d14:	4608      	mov	r0, r1
 8009d16:	4611      	mov	r1, r2
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f7f7 fc67 	bl	80015ec <_kill>
 8009d1e:	1c43      	adds	r3, r0, #1
 8009d20:	d102      	bne.n	8009d28 <_kill_r+0x1c>
 8009d22:	682b      	ldr	r3, [r5, #0]
 8009d24:	b103      	cbz	r3, 8009d28 <_kill_r+0x1c>
 8009d26:	6023      	str	r3, [r4, #0]
 8009d28:	bd38      	pop	{r3, r4, r5, pc}
 8009d2a:	bf00      	nop
 8009d2c:	20000460 	.word	0x20000460

08009d30 <_getpid_r>:
 8009d30:	f7f7 bc54 	b.w	80015dc <_getpid>

08009d34 <_init>:
 8009d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d36:	bf00      	nop
 8009d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d3a:	bc08      	pop	{r3}
 8009d3c:	469e      	mov	lr, r3
 8009d3e:	4770      	bx	lr

08009d40 <_fini>:
 8009d40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d42:	bf00      	nop
 8009d44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d46:	bc08      	pop	{r3}
 8009d48:	469e      	mov	lr, r3
 8009d4a:	4770      	bx	lr
