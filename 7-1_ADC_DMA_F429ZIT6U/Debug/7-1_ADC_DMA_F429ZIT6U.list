
7-1_ADC_DMA_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9c4  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005ec  0800bb78  0800bb78  0001bb78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c164  0800c164  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c164  0800c164  0001c164  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c16c  0800c16c  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c16c  0800c16c  0001c16c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c170  0800c170  0001c170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800c174  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000334  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000514  20000514  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000183d3  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000328b  00000000  00000000  000385e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  0003b870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001130  00000000  00000000  0003cae0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002745b  00000000  00000000  0003dc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000184a5  00000000  00000000  0006506b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ea938  00000000  00000000  0007d510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00167e48  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062ec  00000000  00000000  00167e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bb5c 	.word	0x0800bb5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	0800bb5c 	.word	0x0800bb5c

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9a4 	b.w	8001008 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468c      	mov	ip, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f040 8083 	bne.w	8000e5a <__udivmoddi4+0x116>
 8000d54:	428a      	cmp	r2, r1
 8000d56:	4617      	mov	r7, r2
 8000d58:	d947      	bls.n	8000dea <__udivmoddi4+0xa6>
 8000d5a:	fab2 f282 	clz	r2, r2
 8000d5e:	b142      	cbz	r2, 8000d72 <__udivmoddi4+0x2e>
 8000d60:	f1c2 0020 	rsb	r0, r2, #32
 8000d64:	fa24 f000 	lsr.w	r0, r4, r0
 8000d68:	4091      	lsls	r1, r2
 8000d6a:	4097      	lsls	r7, r2
 8000d6c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d70:	4094      	lsls	r4, r2
 8000d72:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d76:	0c23      	lsrs	r3, r4, #16
 8000d78:	fbbc f6f8 	udiv	r6, ip, r8
 8000d7c:	fa1f fe87 	uxth.w	lr, r7
 8000d80:	fb08 c116 	mls	r1, r8, r6, ip
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb06 f10e 	mul.w	r1, r6, lr
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d909      	bls.n	8000da4 <__udivmoddi4+0x60>
 8000d90:	18fb      	adds	r3, r7, r3
 8000d92:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d96:	f080 8119 	bcs.w	8000fcc <__udivmoddi4+0x288>
 8000d9a:	4299      	cmp	r1, r3
 8000d9c:	f240 8116 	bls.w	8000fcc <__udivmoddi4+0x288>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	443b      	add	r3, r7
 8000da4:	1a5b      	subs	r3, r3, r1
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dac:	fb08 3310 	mls	r3, r8, r0, r3
 8000db0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d909      	bls.n	8000dd0 <__udivmoddi4+0x8c>
 8000dbc:	193c      	adds	r4, r7, r4
 8000dbe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc2:	f080 8105 	bcs.w	8000fd0 <__udivmoddi4+0x28c>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f240 8102 	bls.w	8000fd0 <__udivmoddi4+0x28c>
 8000dcc:	3802      	subs	r0, #2
 8000dce:	443c      	add	r4, r7
 8000dd0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd4:	eba4 040e 	sub.w	r4, r4, lr
 8000dd8:	2600      	movs	r6, #0
 8000dda:	b11d      	cbz	r5, 8000de4 <__udivmoddi4+0xa0>
 8000ddc:	40d4      	lsrs	r4, r2
 8000dde:	2300      	movs	r3, #0
 8000de0:	e9c5 4300 	strd	r4, r3, [r5]
 8000de4:	4631      	mov	r1, r6
 8000de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dea:	b902      	cbnz	r2, 8000dee <__udivmoddi4+0xaa>
 8000dec:	deff      	udf	#255	; 0xff
 8000dee:	fab2 f282 	clz	r2, r2
 8000df2:	2a00      	cmp	r2, #0
 8000df4:	d150      	bne.n	8000e98 <__udivmoddi4+0x154>
 8000df6:	1bcb      	subs	r3, r1, r7
 8000df8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000dfc:	fa1f f887 	uxth.w	r8, r7
 8000e00:	2601      	movs	r6, #1
 8000e02:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e06:	0c21      	lsrs	r1, r4, #16
 8000e08:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e10:	fb08 f30c 	mul.w	r3, r8, ip
 8000e14:	428b      	cmp	r3, r1
 8000e16:	d907      	bls.n	8000e28 <__udivmoddi4+0xe4>
 8000e18:	1879      	adds	r1, r7, r1
 8000e1a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e1e:	d202      	bcs.n	8000e26 <__udivmoddi4+0xe2>
 8000e20:	428b      	cmp	r3, r1
 8000e22:	f200 80e9 	bhi.w	8000ff8 <__udivmoddi4+0x2b4>
 8000e26:	4684      	mov	ip, r0
 8000e28:	1ac9      	subs	r1, r1, r3
 8000e2a:	b2a3      	uxth	r3, r4
 8000e2c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e30:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e34:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e38:	fb08 f800 	mul.w	r8, r8, r0
 8000e3c:	45a0      	cmp	r8, r4
 8000e3e:	d907      	bls.n	8000e50 <__udivmoddi4+0x10c>
 8000e40:	193c      	adds	r4, r7, r4
 8000e42:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x10a>
 8000e48:	45a0      	cmp	r8, r4
 8000e4a:	f200 80d9 	bhi.w	8001000 <__udivmoddi4+0x2bc>
 8000e4e:	4618      	mov	r0, r3
 8000e50:	eba4 0408 	sub.w	r4, r4, r8
 8000e54:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e58:	e7bf      	b.n	8000dda <__udivmoddi4+0x96>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d909      	bls.n	8000e72 <__udivmoddi4+0x12e>
 8000e5e:	2d00      	cmp	r5, #0
 8000e60:	f000 80b1 	beq.w	8000fc6 <__udivmoddi4+0x282>
 8000e64:	2600      	movs	r6, #0
 8000e66:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	4631      	mov	r1, r6
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	fab3 f683 	clz	r6, r3
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d14a      	bne.n	8000f10 <__udivmoddi4+0x1cc>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0x140>
 8000e7e:	4282      	cmp	r2, r0
 8000e80:	f200 80b8 	bhi.w	8000ff4 <__udivmoddi4+0x2b0>
 8000e84:	1a84      	subs	r4, r0, r2
 8000e86:	eb61 0103 	sbc.w	r1, r1, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	468c      	mov	ip, r1
 8000e8e:	2d00      	cmp	r5, #0
 8000e90:	d0a8      	beq.n	8000de4 <__udivmoddi4+0xa0>
 8000e92:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e96:	e7a5      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000e98:	f1c2 0320 	rsb	r3, r2, #32
 8000e9c:	fa20 f603 	lsr.w	r6, r0, r3
 8000ea0:	4097      	lsls	r7, r2
 8000ea2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ea6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eaa:	40d9      	lsrs	r1, r3
 8000eac:	4330      	orrs	r0, r6
 8000eae:	0c03      	lsrs	r3, r0, #16
 8000eb0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000eb4:	fa1f f887 	uxth.w	r8, r7
 8000eb8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ebc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ec0:	fb06 f108 	mul.w	r1, r6, r8
 8000ec4:	4299      	cmp	r1, r3
 8000ec6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eca:	d909      	bls.n	8000ee0 <__udivmoddi4+0x19c>
 8000ecc:	18fb      	adds	r3, r7, r3
 8000ece:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ed2:	f080 808d 	bcs.w	8000ff0 <__udivmoddi4+0x2ac>
 8000ed6:	4299      	cmp	r1, r3
 8000ed8:	f240 808a 	bls.w	8000ff0 <__udivmoddi4+0x2ac>
 8000edc:	3e02      	subs	r6, #2
 8000ede:	443b      	add	r3, r7
 8000ee0:	1a5b      	subs	r3, r3, r1
 8000ee2:	b281      	uxth	r1, r0
 8000ee4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ee8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000eec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ef0:	fb00 f308 	mul.w	r3, r0, r8
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x1c4>
 8000ef8:	1879      	adds	r1, r7, r1
 8000efa:	f100 3cff 	add.w	ip, r0, #4294967295
 8000efe:	d273      	bcs.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	d971      	bls.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f04:	3802      	subs	r0, #2
 8000f06:	4439      	add	r1, r7
 8000f08:	1acb      	subs	r3, r1, r3
 8000f0a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f0e:	e778      	b.n	8000e02 <__udivmoddi4+0xbe>
 8000f10:	f1c6 0c20 	rsb	ip, r6, #32
 8000f14:	fa03 f406 	lsl.w	r4, r3, r6
 8000f18:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f1c:	431c      	orrs	r4, r3
 8000f1e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f22:	fa01 f306 	lsl.w	r3, r1, r6
 8000f26:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f2a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f2e:	431f      	orrs	r7, r3
 8000f30:	0c3b      	lsrs	r3, r7, #16
 8000f32:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f36:	fa1f f884 	uxth.w	r8, r4
 8000f3a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f3e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f42:	fb09 fa08 	mul.w	sl, r9, r8
 8000f46:	458a      	cmp	sl, r1
 8000f48:	fa02 f206 	lsl.w	r2, r2, r6
 8000f4c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x220>
 8000f52:	1861      	adds	r1, r4, r1
 8000f54:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f58:	d248      	bcs.n	8000fec <__udivmoddi4+0x2a8>
 8000f5a:	458a      	cmp	sl, r1
 8000f5c:	d946      	bls.n	8000fec <__udivmoddi4+0x2a8>
 8000f5e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f62:	4421      	add	r1, r4
 8000f64:	eba1 010a 	sub.w	r1, r1, sl
 8000f68:	b2bf      	uxth	r7, r7
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f76:	fb00 f808 	mul.w	r8, r0, r8
 8000f7a:	45b8      	cmp	r8, r7
 8000f7c:	d907      	bls.n	8000f8e <__udivmoddi4+0x24a>
 8000f7e:	19e7      	adds	r7, r4, r7
 8000f80:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f84:	d22e      	bcs.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f86:	45b8      	cmp	r8, r7
 8000f88:	d92c      	bls.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	4427      	add	r7, r4
 8000f8e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f92:	eba7 0708 	sub.w	r7, r7, r8
 8000f96:	fba0 8902 	umull	r8, r9, r0, r2
 8000f9a:	454f      	cmp	r7, r9
 8000f9c:	46c6      	mov	lr, r8
 8000f9e:	4649      	mov	r1, r9
 8000fa0:	d31a      	bcc.n	8000fd8 <__udivmoddi4+0x294>
 8000fa2:	d017      	beq.n	8000fd4 <__udivmoddi4+0x290>
 8000fa4:	b15d      	cbz	r5, 8000fbe <__udivmoddi4+0x27a>
 8000fa6:	ebb3 020e 	subs.w	r2, r3, lr
 8000faa:	eb67 0701 	sbc.w	r7, r7, r1
 8000fae:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fb2:	40f2      	lsrs	r2, r6
 8000fb4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fb8:	40f7      	lsrs	r7, r6
 8000fba:	e9c5 2700 	strd	r2, r7, [r5]
 8000fbe:	2600      	movs	r6, #0
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e70b      	b.n	8000de4 <__udivmoddi4+0xa0>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e9      	b.n	8000da4 <__udivmoddi4+0x60>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6fd      	b.n	8000dd0 <__udivmoddi4+0x8c>
 8000fd4:	4543      	cmp	r3, r8
 8000fd6:	d2e5      	bcs.n	8000fa4 <__udivmoddi4+0x260>
 8000fd8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fdc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7df      	b.n	8000fa4 <__udivmoddi4+0x260>
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e7d2      	b.n	8000f8e <__udivmoddi4+0x24a>
 8000fe8:	4660      	mov	r0, ip
 8000fea:	e78d      	b.n	8000f08 <__udivmoddi4+0x1c4>
 8000fec:	4681      	mov	r9, r0
 8000fee:	e7b9      	b.n	8000f64 <__udivmoddi4+0x220>
 8000ff0:	4666      	mov	r6, ip
 8000ff2:	e775      	b.n	8000ee0 <__udivmoddi4+0x19c>
 8000ff4:	4630      	mov	r0, r6
 8000ff6:	e74a      	b.n	8000e8e <__udivmoddi4+0x14a>
 8000ff8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ffc:	4439      	add	r1, r7
 8000ffe:	e713      	b.n	8000e28 <__udivmoddi4+0xe4>
 8001000:	3802      	subs	r0, #2
 8001002:	443c      	add	r4, r7
 8001004:	e724      	b.n	8000e50 <__udivmoddi4+0x10c>
 8001006:	bf00      	nop

08001008 <__aeabi_idiv0>:
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b36      	ldr	r3, [pc, #216]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001020:	4a36      	ldr	r2, [pc, #216]	; (80010fc <MX_ADC1_Init+0xf0>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b34      	ldr	r3, [pc, #208]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b32      	ldr	r3, [pc, #200]	; (80010f8 <MX_ADC1_Init+0xec>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001032:	4b31      	ldr	r3, [pc, #196]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001034:	2201      	movs	r2, #1
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001038:	4b2f      	ldr	r3, [pc, #188]	; (80010f8 <MX_ADC1_Init+0xec>)
 800103a:	2201      	movs	r2, #1
 800103c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b2e      	ldr	r3, [pc, #184]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b2c      	ldr	r3, [pc, #176]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b2a      	ldr	r3, [pc, #168]	; (80010f8 <MX_ADC1_Init+0xec>)
 800104e:	4a2c      	ldr	r2, [pc, #176]	; (8001100 <MX_ADC1_Init+0xf4>)
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8001058:	4b27      	ldr	r3, [pc, #156]	; (80010f8 <MX_ADC1_Init+0xec>)
 800105a:	2204      	movs	r2, #4
 800105c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800105e:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001060:	2201      	movs	r2, #1
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001066:	4b24      	ldr	r3, [pc, #144]	; (80010f8 <MX_ADC1_Init+0xec>)
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106c:	4822      	ldr	r0, [pc, #136]	; (80010f8 <MX_ADC1_Init+0xec>)
 800106e:	f001 fcc7 	bl	8002a00 <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001078:	f000 fe44 	bl	8001d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800107c:	230a      	movs	r3, #10
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8001084:	2304      	movs	r3, #4
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	481a      	ldr	r0, [pc, #104]	; (80010f8 <MX_ADC1_Init+0xec>)
 800108e:	f001 fe29 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001098:	f000 fe34 	bl	8001d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 800109c:	230c      	movs	r3, #12
 800109e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a4:	463b      	mov	r3, r7
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	; (80010f8 <MX_ADC1_Init+0xec>)
 80010aa:	f001 fe1b 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010b4:	f000 fe26 	bl	8001d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80010b8:	230d      	movs	r3, #13
 80010ba:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80010bc:	2303      	movs	r3, #3
 80010be:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	463b      	mov	r3, r7
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	; (80010f8 <MX_ADC1_Init+0xec>)
 80010c6:	f001 fe0d 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80010d0:	f000 fe18 	bl	8001d04 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80010d4:	2309      	movs	r3, #9
 80010d6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	; (80010f8 <MX_ADC1_Init+0xec>)
 80010e2:	f001 fdff 	bl	8002ce4 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80010ec:	f000 fe0a 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3710      	adds	r7, #16
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000210 	.word	0x20000210
 80010fc:	40012000 	.word	0x40012000
 8001100:	0f000001 	.word	0x0f000001

08001104 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b08a      	sub	sp, #40	; 0x28
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
 8001116:	609a      	str	r2, [r3, #8]
 8001118:	60da      	str	r2, [r3, #12]
 800111a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a3c      	ldr	r2, [pc, #240]	; (8001214 <HAL_ADC_MspInit+0x110>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d171      	bne.n	800120a <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001126:	2300      	movs	r3, #0
 8001128:	613b      	str	r3, [r7, #16]
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800112c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800112e:	4a3a      	ldr	r2, [pc, #232]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001134:	6453      	str	r3, [r2, #68]	; 0x44
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800113a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800113e:	613b      	str	r3, [r7, #16]
 8001140:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	60fb      	str	r3, [r7, #12]
 8001146:	4b34      	ldr	r3, [pc, #208]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a33      	ldr	r2, [pc, #204]	; (8001218 <HAL_ADC_MspInit+0x114>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b31      	ldr	r3, [pc, #196]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a2c      	ldr	r2, [pc, #176]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001168:	f043 0302 	orr.w	r3, r3, #2
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <HAL_ADC_MspInit+0x114>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	60bb      	str	r3, [r7, #8]
 8001178:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 800117a:	230d      	movs	r3, #13
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	4823      	ldr	r0, [pc, #140]	; (800121c <HAL_ADC_MspInit+0x118>)
 800118e:	f002 fd6d 	bl	8003c6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001192:	2302      	movs	r3, #2
 8001194:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	481e      	ldr	r0, [pc, #120]	; (8001220 <HAL_ADC_MspInit+0x11c>)
 80011a6:	f002 fd61 	bl	8003c6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80011aa:	4b1e      	ldr	r3, [pc, #120]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ac:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_ADC_MspInit+0x124>)
 80011ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80011b0:	4b1c      	ldr	r3, [pc, #112]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011b6:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011bc:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011c2:	4b18      	ldr	r3, [pc, #96]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80011d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80011d2:	4b14      	ldr	r3, [pc, #80]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011da:	4b12      	ldr	r3, [pc, #72]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e8:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011ee:	480d      	ldr	r0, [pc, #52]	; (8001224 <HAL_ADC_MspInit+0x120>)
 80011f0:	f002 f93a 	bl	8003468 <HAL_DMA_Init>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 80011fa:	f000 fd83 	bl	8001d04 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4a08      	ldr	r2, [pc, #32]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001202:	639a      	str	r2, [r3, #56]	; 0x38
 8001204:	4a07      	ldr	r2, [pc, #28]	; (8001224 <HAL_ADC_MspInit+0x120>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800120a:	bf00      	nop
 800120c:	3728      	adds	r7, #40	; 0x28
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	40012000 	.word	0x40012000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020800 	.word	0x40020800
 8001220:	40020400 	.word	0x40020400
 8001224:	20000258 	.word	0x20000258
 8001228:	40026410 	.word	0x40026410

0800122c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <MX_DMA_Init+0x3c>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <MX_DMA_Init+0x3c>)
 800123c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001240:	6313      	str	r3, [r2, #48]	; 0x30
 8001242:	4b09      	ldr	r3, [pc, #36]	; (8001268 <MX_DMA_Init+0x3c>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800124a:	607b      	str	r3, [r7, #4]
 800124c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800124e:	2200      	movs	r2, #0
 8001250:	2100      	movs	r1, #0
 8001252:	2038      	movs	r0, #56	; 0x38
 8001254:	f002 f8d1 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001258:	2038      	movs	r0, #56	; 0x38
 800125a:	f002 f8ea 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 800125e:	bf00      	nop
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023800 	.word	0x40023800

0800126c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08c      	sub	sp, #48	; 0x30
 8001270:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001272:	f107 031c 	add.w	r3, r7, #28
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
 8001280:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	4b52      	ldr	r3, [pc, #328]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a51      	ldr	r2, [pc, #324]	; (80013d0 <MX_GPIO_Init+0x164>)
 800128c:	f043 0310 	orr.w	r3, r3, #16
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b4f      	ldr	r3, [pc, #316]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0310 	and.w	r3, r3, #16
 800129a:	61bb      	str	r3, [r7, #24]
 800129c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	617b      	str	r3, [r7, #20]
 80012a2:	4b4b      	ldr	r3, [pc, #300]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012a8:	f043 0320 	orr.w	r3, r3, #32
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b48      	ldr	r3, [pc, #288]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0320 	and.w	r3, r3, #32
 80012b6:	617b      	str	r3, [r7, #20]
 80012b8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a43      	ldr	r2, [pc, #268]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b41      	ldr	r3, [pc, #260]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b3d      	ldr	r3, [pc, #244]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a3c      	ldr	r2, [pc, #240]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60bb      	str	r3, [r7, #8]
 80012f6:	4b36      	ldr	r3, [pc, #216]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a35      	ldr	r2, [pc, #212]	; (80013d0 <MX_GPIO_Init+0x164>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60bb      	str	r3, [r7, #8]
 800130c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	607b      	str	r3, [r7, #4]
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a2e      	ldr	r2, [pc, #184]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b2c      	ldr	r3, [pc, #176]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	607b      	str	r3, [r7, #4]
 8001328:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a27      	ldr	r2, [pc, #156]	; (80013d0 <MX_GPIO_Init+0x164>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_GPIO_Init+0x164>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	603b      	str	r3, [r7, #0]
 8001344:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	f244 0181 	movw	r1, #16513	; 0x4081
 800134c:	4821      	ldr	r0, [pc, #132]	; (80013d4 <MX_GPIO_Init+0x168>)
 800134e:	f002 fe51 	bl	8003ff4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001352:	2308      	movs	r3, #8
 8001354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001356:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800135c:	2301      	movs	r3, #1
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4619      	mov	r1, r3
 8001366:	481c      	ldr	r0, [pc, #112]	; (80013d8 <MX_GPIO_Init+0x16c>)
 8001368:	f002 fc80 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 800136c:	f244 0381 	movw	r3, #16513	; 0x4081
 8001370:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800137e:	f107 031c 	add.w	r3, r7, #28
 8001382:	4619      	mov	r1, r3
 8001384:	4813      	ldr	r0, [pc, #76]	; (80013d4 <MX_GPIO_Init+0x168>)
 8001386:	f002 fc71 	bl	8003c6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800138a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800138e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001390:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001396:	2302      	movs	r3, #2
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	480e      	ldr	r0, [pc, #56]	; (80013dc <MX_GPIO_Init+0x170>)
 80013a2:	f002 fc63 	bl	8003c6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2100      	movs	r1, #0
 80013aa:	2009      	movs	r0, #9
 80013ac:	f002 f825 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80013b0:	2009      	movs	r0, #9
 80013b2:	f002 f83e 	bl	8003432 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013b6:	2200      	movs	r2, #0
 80013b8:	2100      	movs	r1, #0
 80013ba:	2028      	movs	r0, #40	; 0x28
 80013bc:	f002 f81d 	bl	80033fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80013c0:	2028      	movs	r0, #40	; 0x28
 80013c2:	f002 f836 	bl	8003432 <HAL_NVIC_EnableIRQ>

}
 80013c6:	bf00      	nop
 80013c8:	3730      	adds	r7, #48	; 0x30
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40020400 	.word	0x40020400
 80013d8:	40021000 	.word	0x40021000
 80013dc:	40020c00 	.word	0x40020c00

080013e0 <lcd_send_cmd>:

//#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup
#define SLAVE_ADDRESS_LCD 0x4E

void lcd_send_cmd (char cmd)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af02      	add	r7, sp, #8
 80013e6:	4603      	mov	r3, r0
 80013e8:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f023 030f 	bic.w	r3, r3, #15
 80013f0:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f043 030c 	orr.w	r3, r3, #12
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	f043 0308 	orr.w	r3, r3, #8
 8001408:	b2db      	uxtb	r3, r3
 800140a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 800140c:	7bbb      	ldrb	r3, [r7, #14]
 800140e:	f043 030c 	orr.w	r3, r3, #12
 8001412:	b2db      	uxtb	r3, r3
 8001414:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8001416:	7bbb      	ldrb	r3, [r7, #14]
 8001418:	f043 0308 	orr.w	r3, r3, #8
 800141c:	b2db      	uxtb	r3, r3
 800141e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001420:	f107 0208 	add.w	r2, r7, #8
 8001424:	2364      	movs	r3, #100	; 0x64
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2304      	movs	r3, #4
 800142a:	214e      	movs	r1, #78	; 0x4e
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <lcd_send_cmd+0x5c>)
 800142e:	f002 ff57 	bl	80042e0 <HAL_I2C_Master_Transmit>
}
 8001432:	bf00      	nop
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002b8 	.word	0x200002b8

08001440 <lcd_send_data>:

void lcd_send_data (char data)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af02      	add	r7, sp, #8
 8001446:	4603      	mov	r3, r0
 8001448:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800144a:	79fb      	ldrb	r3, [r7, #7]
 800144c:	f023 030f 	bic.w	r3, r3, #15
 8001450:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8001452:	79fb      	ldrb	r3, [r7, #7]
 8001454:	011b      	lsls	r3, r3, #4
 8001456:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8001458:	7bfb      	ldrb	r3, [r7, #15]
 800145a:	f043 030d 	orr.w	r3, r3, #13
 800145e:	b2db      	uxtb	r3, r3
 8001460:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8001462:	7bfb      	ldrb	r3, [r7, #15]
 8001464:	f043 0309 	orr.w	r3, r3, #9
 8001468:	b2db      	uxtb	r3, r3
 800146a:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 800146c:	7bbb      	ldrb	r3, [r7, #14]
 800146e:	f043 030d 	orr.w	r3, r3, #13
 8001472:	b2db      	uxtb	r3, r3
 8001474:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8001476:	7bbb      	ldrb	r3, [r7, #14]
 8001478:	f043 0309 	orr.w	r3, r3, #9
 800147c:	b2db      	uxtb	r3, r3
 800147e:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8001480:	f107 0208 	add.w	r2, r7, #8
 8001484:	2364      	movs	r3, #100	; 0x64
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2304      	movs	r3, #4
 800148a:	214e      	movs	r1, #78	; 0x4e
 800148c:	4803      	ldr	r0, [pc, #12]	; (800149c <lcd_send_data+0x5c>)
 800148e:	f002 ff27 	bl	80042e0 <HAL_I2C_Master_Transmit>
}
 8001492:	bf00      	nop
 8001494:	3710      	adds	r7, #16
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	200002b8 	.word	0x200002b8

080014a0 <lcd_clear>:

void lcd_clear (void)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 80014a6:	2080      	movs	r0, #128	; 0x80
 80014a8:	f7ff ff9a 	bl	80013e0 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 80014ac:	2300      	movs	r3, #0
 80014ae:	607b      	str	r3, [r7, #4]
 80014b0:	e005      	b.n	80014be <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 80014b2:	2020      	movs	r0, #32
 80014b4:	f7ff ffc4 	bl	8001440 <lcd_send_data>
	for (int i=0; i<70; i++)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	3301      	adds	r3, #1
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b45      	cmp	r3, #69	; 0x45
 80014c2:	ddf6      	ble.n	80014b2 <lcd_clear+0x12>
	}
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 80014ce:	b580      	push	{r7, lr}
 80014d0:	b082      	sub	sp, #8
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
 80014d6:	6039      	str	r1, [r7, #0]
    switch (row)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d003      	beq.n	80014e6 <lcd_put_cur+0x18>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d005      	beq.n	80014f0 <lcd_put_cur+0x22>
 80014e4:	e009      	b.n	80014fa <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	603b      	str	r3, [r7, #0]
            break;
 80014ee:	e004      	b.n	80014fa <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80014f6:	603b      	str	r3, [r7, #0]
            break;
 80014f8:	bf00      	nop
    }

    lcd_send_cmd (col);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff ff6e 	bl	80013e0 <lcd_send_cmd>
}
 8001504:	bf00      	nop
 8001506:	3708      	adds	r7, #8
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}

0800150c <lcd_init>:


void lcd_init (void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8001510:	2032      	movs	r0, #50	; 0x32
 8001512:	f001 fa51 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001516:	2030      	movs	r0, #48	; 0x30
 8001518:	f7ff ff62 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 800151c:	2005      	movs	r0, #5
 800151e:	f001 fa4b 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 8001522:	2030      	movs	r0, #48	; 0x30
 8001524:	f7ff ff5c 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8001528:	2001      	movs	r0, #1
 800152a:	f001 fa45 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x30);
 800152e:	2030      	movs	r0, #48	; 0x30
 8001530:	f7ff ff56 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001534:	200a      	movs	r0, #10
 8001536:	f001 fa3f 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 800153a:	2020      	movs	r0, #32
 800153c:	f7ff ff50 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(10);
 8001540:	200a      	movs	r0, #10
 8001542:	f001 fa39 	bl	80029b8 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8001546:	2028      	movs	r0, #40	; 0x28
 8001548:	f7ff ff4a 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(1);
 800154c:	2001      	movs	r0, #1
 800154e:	f001 fa33 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8001552:	2008      	movs	r0, #8
 8001554:	f7ff ff44 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001558:	2001      	movs	r0, #1
 800155a:	f001 fa2d 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 800155e:	2001      	movs	r0, #1
 8001560:	f7ff ff3e 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001564:	2001      	movs	r0, #1
 8001566:	f001 fa27 	bl	80029b8 <HAL_Delay>
	HAL_Delay(1);
 800156a:	2001      	movs	r0, #1
 800156c:	f001 fa24 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8001570:	2006      	movs	r0, #6
 8001572:	f7ff ff35 	bl	80013e0 <lcd_send_cmd>
	HAL_Delay(1);
 8001576:	2001      	movs	r0, #1
 8001578:	f001 fa1e 	bl	80029b8 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 800157c:	200c      	movs	r0, #12
 800157e:	f7ff ff2f 	bl	80013e0 <lcd_send_cmd>
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}

08001586 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8001586:	b580      	push	{r7, lr}
 8001588:	b082      	sub	sp, #8
 800158a:	af00      	add	r7, sp, #0
 800158c:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 800158e:	e006      	b.n	800159e <lcd_send_string+0x18>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	1c5a      	adds	r2, r3, #1
 8001594:	607a      	str	r2, [r7, #4]
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff51 	bl	8001440 <lcd_send_data>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f4      	bne.n	8001590 <lcd_send_string+0xa>
}
 80015a6:	bf00      	nop
 80015a8:	bf00      	nop
 80015aa:	3708      	adds	r7, #8
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}

080015b0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015b4:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <MX_I2C1_Init+0x74>)
 80015b6:	4a1c      	ldr	r2, [pc, #112]	; (8001628 <MX_I2C1_Init+0x78>)
 80015b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80015ba:	4b1a      	ldr	r3, [pc, #104]	; (8001624 <MX_I2C1_Init+0x74>)
 80015bc:	4a1b      	ldr	r2, [pc, #108]	; (800162c <MX_I2C1_Init+0x7c>)
 80015be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015c0:	4b18      	ldr	r3, [pc, #96]	; (8001624 <MX_I2C1_Init+0x74>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <MX_I2C1_Init+0x74>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015cc:	4b15      	ldr	r3, [pc, #84]	; (8001624 <MX_I2C1_Init+0x74>)
 80015ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80015d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015d4:	4b13      	ldr	r3, [pc, #76]	; (8001624 <MX_I2C1_Init+0x74>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <MX_I2C1_Init+0x74>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015e0:	4b10      	ldr	r3, [pc, #64]	; (8001624 <MX_I2C1_Init+0x74>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <MX_I2C1_Init+0x74>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <MX_I2C1_Init+0x74>)
 80015ee:	f002 fd33 	bl	8004058 <HAL_I2C_Init>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80015f8:	f000 fb84 	bl	8001d04 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015fc:	2100      	movs	r1, #0
 80015fe:	4809      	ldr	r0, [pc, #36]	; (8001624 <MX_I2C1_Init+0x74>)
 8001600:	f003 f975 	bl	80048ee <HAL_I2CEx_ConfigAnalogFilter>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 800160a:	f000 fb7b 	bl	8001d04 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800160e:	2100      	movs	r1, #0
 8001610:	4804      	ldr	r0, [pc, #16]	; (8001624 <MX_I2C1_Init+0x74>)
 8001612:	f003 f9a8 	bl	8004966 <HAL_I2CEx_ConfigDigitalFilter>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 800161c:	f000 fb72 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001620:	bf00      	nop
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200002b8 	.word	0x200002b8
 8001628:	40005400 	.word	0x40005400
 800162c:	000186a0 	.word	0x000186a0

08001630 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b08a      	sub	sp, #40	; 0x28
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001638:	f107 0314 	add.w	r3, r7, #20
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a19      	ldr	r2, [pc, #100]	; (80016b4 <HAL_I2C_MspInit+0x84>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d12c      	bne.n	80016ac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
 8001656:	4b18      	ldr	r3, [pc, #96]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a17      	ldr	r2, [pc, #92]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 800165c:	f043 0302 	orr.w	r3, r3, #2
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b15      	ldr	r3, [pc, #84]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f003 0302 	and.w	r3, r3, #2
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800166e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001674:	2312      	movs	r3, #18
 8001676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167c:	2303      	movs	r3, #3
 800167e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001680:	2304      	movs	r3, #4
 8001682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001684:	f107 0314 	add.w	r3, r7, #20
 8001688:	4619      	mov	r1, r3
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <HAL_I2C_MspInit+0x8c>)
 800168c:	f002 faee 	bl	8003c6c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001690:	2300      	movs	r3, #0
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	4a07      	ldr	r2, [pc, #28]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 800169a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800169e:	6413      	str	r3, [r2, #64]	; 0x40
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <HAL_I2C_MspInit+0x88>)
 80016a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016ac:	bf00      	nop
 80016ae:	3728      	adds	r7, #40	; 0x28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40005400 	.word	0x40005400
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40020400 	.word	0x40020400

080016c0 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10) == HAL_OK) return len;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	230a      	movs	r3, #10
 80016d2:	68b9      	ldr	r1, [r7, #8]
 80016d4:	4806      	ldr	r0, [pc, #24]	; (80016f0 <_write+0x30>)
 80016d6:	f004 fde4 	bl	80062a2 <HAL_UART_Transmit>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d101      	bne.n	80016e4 <_write+0x24>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	e000      	b.n	80016e6 <_write+0x26>
	else return 0;
 80016e4:	2300      	movs	r3, #0
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3710      	adds	r7, #16
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	200004bc 	.word	0x200004bc

080016f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b088      	sub	sp, #32
 80016f8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016fa:	f001 f8eb 	bl	80028d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016fe:	f000 f845 	bl	800178c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001702:	f7ff fdb3 	bl	800126c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001706:	f001 f841 	bl	800278c <MX_USART3_UART_Init>
  MX_I2C1_Init();
 800170a:	f7ff ff51 	bl	80015b0 <MX_I2C1_Init>
  MX_TIM7_Init();
 800170e:	f000 fe47 	bl	80023a0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8001712:	f000 fcb9 	bl	8002088 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001716:	f000 fd2d 	bl	8002174 <MX_TIM4_Init>
  MX_TIM10_Init();
 800171a:	f000 fe77 	bl	800240c <MX_TIM10_Init>
  MX_TIM2_Init();
 800171e:	f000 fc3d 	bl	8001f9c <MX_TIM2_Init>
  MX_DMA_Init();
 8001722:	f7ff fd83 	bl	800122c <MX_DMA_Init>
  MX_ADC1_Init();
 8001726:	f7ff fc71 	bl	800100c <MX_ADC1_Init>
  MX_TIM5_Init();
 800172a:	f000 fdb7 	bl	800229c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  lcd_init ();
 800172e:	f7ff feed 	bl	800150c <lcd_init>
  HAL_TIM_Base_Start_IT(&htim7);
 8001732:	4812      	ldr	r0, [pc, #72]	; (800177c <main+0x88>)
 8001734:	f003 fe6a 	bl	800540c <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)&adcValue[0], 4);
 8001738:	f107 0318 	add.w	r3, r7, #24
 800173c:	2204      	movs	r2, #4
 800173e:	4619      	mov	r1, r3
 8001740:	480f      	ldr	r0, [pc, #60]	; (8001780 <main+0x8c>)
 8001742:	f001 f9a1 	bl	8002a88 <HAL_ADC_Start_DMA>
  void showResult(GPIO_TypeDef* GPIOx);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  lcd_clear();
 8001746:	f7ff feab 	bl	80014a0 <lcd_clear>
  uint8_t str[20];
  //uint32_t gpioMode = GPIOB->MODER;
  //uint8_t modeStr[8];
  while (1)
  {
	  lcd_put_cur(0, 0);
 800174a:	2100      	movs	r1, #0
 800174c:	2000      	movs	r0, #0
 800174e:	f7ff febe 	bl	80014ce <lcd_put_cur>
	  sprintf((char*)str, "%4d  %4d", adcValue[0], adcValue[3]);
 8001752:	8b3b      	ldrh	r3, [r7, #24]
 8001754:	b29b      	uxth	r3, r3
 8001756:	461a      	mov	r2, r3
 8001758:	8bfb      	ldrh	r3, [r7, #30]
 800175a:	b29b      	uxth	r3, r3
 800175c:	1d38      	adds	r0, r7, #4
 800175e:	4909      	ldr	r1, [pc, #36]	; (8001784 <main+0x90>)
 8001760:	f006 fc10 	bl	8007f84 <siprintf>
	  tempData = adcValue[3];
 8001764:	8bfb      	ldrh	r3, [r7, #30]
 8001766:	b29a      	uxth	r2, r3
 8001768:	4b07      	ldr	r3, [pc, #28]	; (8001788 <main+0x94>)
 800176a:	801a      	strh	r2, [r3, #0]
	  lcd_send_string((char*)str);
 800176c:	1d3b      	adds	r3, r7, #4
 800176e:	4618      	mov	r0, r3
 8001770:	f7ff ff09 	bl	8001586 <lcd_send_string>
	  //printf("0x%x\r\n", (int)GPIOB->MODER);	  // 16 -> 0x
	  //printf("d:%d\r\n", (int)GPIOB->MODER);	  // int -> d
	  //printf("u:%u\r\n", (uint32_t)GPIOB->MODER); // uint32_t


	  HAL_Delay(100);
 8001774:	2064      	movs	r0, #100	; 0x64
 8001776:	f001 f91f 	bl	80029b8 <HAL_Delay>
	  lcd_put_cur(0, 0);
 800177a:	e7e6      	b.n	800174a <main+0x56>
 800177c:	20000474 	.word	0x20000474
 8001780:	20000210 	.word	0x20000210
 8001784:	0800bb78 	.word	0x0800bb78
 8001788:	200001fc 	.word	0x200001fc

0800178c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b094      	sub	sp, #80	; 0x50
 8001790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001792:	f107 0320 	add.w	r3, r7, #32
 8001796:	2230      	movs	r2, #48	; 0x30
 8001798:	2100      	movs	r1, #0
 800179a:	4618      	mov	r0, r3
 800179c:	f005 fcc6 	bl	800712c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	605a      	str	r2, [r3, #4]
 80017aa:	609a      	str	r2, [r3, #8]
 80017ac:	60da      	str	r2, [r3, #12]
 80017ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017b0:	2300      	movs	r3, #0
 80017b2:	60bb      	str	r3, [r7, #8]
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <SystemClock_Config+0xd8>)
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	4a2a      	ldr	r2, [pc, #168]	; (8001864 <SystemClock_Config+0xd8>)
 80017ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017be:	6413      	str	r3, [r2, #64]	; 0x40
 80017c0:	4b28      	ldr	r3, [pc, #160]	; (8001864 <SystemClock_Config+0xd8>)
 80017c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
 80017d0:	4b25      	ldr	r3, [pc, #148]	; (8001868 <SystemClock_Config+0xdc>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a24      	ldr	r2, [pc, #144]	; (8001868 <SystemClock_Config+0xdc>)
 80017d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b22      	ldr	r3, [pc, #136]	; (8001868 <SystemClock_Config+0xdc>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e8:	2301      	movs	r3, #1
 80017ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017f2:	2302      	movs	r3, #2
 80017f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80017fc:	2304      	movs	r3, #4
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001800:	23b4      	movs	r3, #180	; 0xb4
 8001802:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001804:	2302      	movs	r3, #2
 8001806:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001808:	2304      	movs	r3, #4
 800180a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180c:	f107 0320 	add.w	r3, r7, #32
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f937 	bl	8004a84 <HAL_RCC_OscConfig>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800181c:	f000 fa72 	bl	8001d04 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001820:	f003 f8e0 	bl	80049e4 <HAL_PWREx_EnableOverDrive>
 8001824:	4603      	mov	r3, r0
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800182a:	f000 fa6b 	bl	8001d04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800182e:	230f      	movs	r3, #15
 8001830:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001832:	2302      	movs	r3, #2
 8001834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800183a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800183e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001840:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001844:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001846:	f107 030c 	add.w	r3, r7, #12
 800184a:	2105      	movs	r1, #5
 800184c:	4618      	mov	r0, r3
 800184e:	f003 fb91 	bl	8004f74 <HAL_RCC_ClockConfig>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001858:	f000 fa54 	bl	8001d04 <Error_Handler>
  }
}
 800185c:	bf00      	nop
 800185e:	3750      	adds	r7, #80	; 0x50
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	40007000 	.word	0x40007000

0800186c <showArray>:

/* USER CODE BEGIN 4 */
void showArray(int* array, int length)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
	printf("[");
 8001876:	205b      	movs	r0, #91	; 0x5b
 8001878:	f006 faf2 	bl	8007e60 <putchar>
	for(int i = 0; i < length-1; i++)
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	e00b      	b.n	800189a <showArray+0x2e>
	{
		printf("%d, ", array[i]);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	687a      	ldr	r2, [r7, #4]
 8001888:	4413      	add	r3, r2
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	480f      	ldr	r0, [pc, #60]	; (80018cc <showArray+0x60>)
 8001890:	f006 face 	bl	8007e30 <iprintf>
	for(int i = 0; i < length-1; i++)
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	3301      	adds	r3, #1
 8001898:	60fb      	str	r3, [r7, #12]
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	3b01      	subs	r3, #1
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbee      	blt.n	8001882 <showArray+0x16>
	}
	printf("%d", array[length-1]);
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80018aa:	3b01      	subs	r3, #1
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	4413      	add	r3, r2
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4619      	mov	r1, r3
 80018b6:	4806      	ldr	r0, [pc, #24]	; (80018d0 <showArray+0x64>)
 80018b8:	f006 faba 	bl	8007e30 <iprintf>
	printf("]\r\n");
 80018bc:	4805      	ldr	r0, [pc, #20]	; (80018d4 <showArray+0x68>)
 80018be:	f006 fb53 	bl	8007f68 <puts>
}
 80018c2:	bf00      	nop
 80018c4:	3710      	adds	r7, #16
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	0800bb84 	.word	0x0800bb84
 80018d0:	0800bb8c 	.word	0x0800bb8c
 80018d4:	0800bb90 	.word	0x0800bb90

080018d8 <showResult>:


void showResult(GPIO_TypeDef* GPIOx)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b0c6      	sub	sp, #280	; 0x118
 80018dc:	af00      	add	r7, sp, #0
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	6018      	str	r0, [r3, #0]
	uint32_t gpioMode = GPIOx->MODER;
 80018e2:	1d3b      	adds	r3, r7, #4
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
	int gpioModeArray[8] = {0, };
 80018ec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80018f0:	2220      	movs	r2, #32
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 fc19 	bl	800712c <memset>
	int bitArray[32] = {0, };
 80018fa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80018fe:	2280      	movs	r2, #128	; 0x80
 8001900:	2100      	movs	r1, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f005 fc12 	bl	800712c <memset>
	int pinArray[16] = {0, };
 8001908:	f107 030c 	add.w	r3, r7, #12
 800190c:	4618      	mov	r0, r3
 800190e:	2340      	movs	r3, #64	; 0x40
 8001910:	461a      	mov	r2, r3
 8001912:	2100      	movs	r1, #0
 8001914:	f005 fc0a 	bl	800712c <memset>
	int length = sizeof(gpioModeArray)/sizeof(gpioModeArray[0]);
 8001918:	2308      	movs	r3, #8
 800191a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	int bitArrayLength = sizeof(bitArray)/sizeof(bitArray[0]);
 800191e:	2320      	movs	r3, #32
 8001920:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	int pinArrayLength = sizeof(pinArray)/sizeof(pinArray[0]);
 8001924:	2310      	movs	r3, #16
 8001926:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	int cnt = length-1;
 800192a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800192e:	3b01      	subs	r3, #1
 8001930:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	int quotient;
    int remainder;

	while(gpioMode >= 16)
 8001934:	e041      	b.n	80019ba <showResult+0xe2>
	{
		printf("d: %10u | length : %d\r\n", (int)gpioMode, length);
 8001936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800193a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 800193e:	4619      	mov	r1, r3
 8001940:	489e      	ldr	r0, [pc, #632]	; (8001bbc <showResult+0x2e4>)
 8001942:	f006 fa75 	bl	8007e30 <iprintf>

		  quotient = gpioMode /  16;
 8001946:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
		  remainder = gpioMode % 16;
 8001950:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001954:	f003 030f 	and.w	r3, r3, #15
 8001958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
		  printf("Q : %9d | R : %2d | CNT : %d\r\n", quotient, remainder, cnt);
 800195c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001960:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8001964:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8001968:	4895      	ldr	r0, [pc, #596]	; (8001bc0 <showResult+0x2e8>)
 800196a:	f006 fa61 	bl	8007e30 <iprintf>
		  if (quotient == 1 || quotient == 0){
 800196e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001972:	2b01      	cmp	r3, #1
 8001974:	d003      	beq.n	800197e <showResult+0xa6>
 8001976:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d10a      	bne.n	8001994 <showResult+0xbc>
			  gpioModeArray[cnt-1] = quotient;
 800197e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001982:	3b01      	subs	r3, #1
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800198a:	4413      	add	r3, r2
 800198c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8001990:	f843 2c4c 	str.w	r2, [r3, #-76]
		  }
		  gpioModeArray[cnt] = remainder;
 8001994:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	f507 728c 	add.w	r2, r7, #280	; 0x118
 800199e:	4413      	add	r3, r2
 80019a0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80019a4:	f843 2c4c 	str.w	r2, [r3, #-76]
		  gpioMode = quotient;
 80019a8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80019ac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
		  cnt--;
 80019b0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80019b4:	3b01      	subs	r3, #1
 80019b6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	while(gpioMode >= 16)
 80019ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80019be:	2b0f      	cmp	r3, #15
 80019c0:	d8b9      	bhi.n	8001936 <showResult+0x5e>

	 }
	 showArray(gpioModeArray, length);
 80019c2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80019c6:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff4e 	bl	800186c <showArray>

	 for(int i=0; i< length; i++)
 80019d0:	2300      	movs	r3, #0
 80019d2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80019d6:	e041      	b.n	8001a5c <showResult+0x184>
	 {
		 int temp = gpioModeArray[i];
 80019d8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	f507 728c 	add.w	r2, r7, #280	; 0x118
 80019e2:	4413      	add	r3, r2
 80019e4:	f853 3c4c 	ldr.w	r3, [r3, #-76]
 80019e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(int j=3 + 4*i; j >= 4*i; j--){
 80019ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	3303      	adds	r3, #3
 80019f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80019f8:	e024      	b.n	8001a44 <showResult+0x16c>
			 if(temp % 2 != 0){
 80019fa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d009      	beq.n	8001a1a <showResult+0x142>
				 bitArray[j] = 1;
 8001a06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a10:	4413      	add	r3, r2
 8001a12:	2201      	movs	r2, #1
 8001a14:	f843 2ccc 	str.w	r2, [r3, #-204]
 8001a18:	e008      	b.n	8001a2c <showResult+0x154>
			 }else{
				 bitArray[j] = 0;
 8001a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a24:	4413      	add	r3, r2
 8001a26:	2200      	movs	r2, #0
 8001a28:	f843 2ccc 	str.w	r2, [r3, #-204]
			 }
			 temp /= 2;
 8001a2c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8001a30:	0fda      	lsrs	r2, r3, #31
 8001a32:	4413      	add	r3, r2
 8001a34:	105b      	asrs	r3, r3, #1
 8001a36:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		 for(int j=3 + 4*i; j >= 4*i; j--){
 8001a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001a44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	dad3      	bge.n	80019fa <showResult+0x122>
	 for(int i=0; i< length; i++)
 8001a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001a56:	3301      	adds	r3, #1
 8001a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8001a5c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8001a60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbb7      	blt.n	80019d8 <showResult+0x100>
		 }
	 }
	 showArray(bitArray, bitArrayLength);
 8001a68:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001a6c:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff fefb 	bl	800186c <showArray>

	 for(int i=0; i < pinArrayLength; i++)
 8001a76:	2300      	movs	r3, #0
 8001a78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001a7c:	e090      	b.n	8001ba0 <showResult+0x2c8>
	 {
		 if(bitArray[2*i] == 0)
 8001a7e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	009b      	lsls	r3, r3, #2
 8001a86:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001a8a:	4413      	add	r3, r2
 8001a8c:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d13b      	bne.n	8001b0c <showResult+0x234>
		 {
			 if(bitArray[2*i + 1]==0)
 8001a94:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001aa2:	4413      	add	r3, r2
 8001aa4:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d117      	bne.n	8001adc <showResult+0x204>
			 {
				 printf("%d%d : INPUT              -> PIN : ", bitArray[2*i], bitArray[2*i+1]);
 8001aac:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ab8:	4413      	add	r3, r2
 8001aba:	f853 1ccc 	ldr.w	r1, [r3, #-204]
 8001abe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001acc:	4413      	add	r3, r2
 8001ace:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	483b      	ldr	r0, [pc, #236]	; (8001bc4 <showResult+0x2ec>)
 8001ad6:	f006 f9ab 	bl	8007e30 <iprintf>
 8001ada:	e052      	b.n	8001b82 <showResult+0x2aa>
			 }else{
				 printf("%d%d : OUTPUT             -> PIN : ", bitArray[2*i], bitArray[2*i+1]);
 8001adc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	009b      	lsls	r3, r3, #2
 8001ae4:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001ae8:	4413      	add	r3, r2
 8001aea:	f853 1ccc 	ldr.w	r1, [r3, #-204]
 8001aee:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001af2:	005b      	lsls	r3, r3, #1
 8001af4:	3301      	adds	r3, #1
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001afc:	4413      	add	r3, r2
 8001afe:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001b02:	461a      	mov	r2, r3
 8001b04:	4830      	ldr	r0, [pc, #192]	; (8001bc8 <showResult+0x2f0>)
 8001b06:	f006 f993 	bl	8007e30 <iprintf>
 8001b0a:	e03a      	b.n	8001b82 <showResult+0x2aa>
			 }
		 }else{
			 if(bitArray[2*i + 1]==0)
 8001b0c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	3301      	adds	r3, #1
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b1a:	4413      	add	r3, r2
 8001b1c:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d117      	bne.n	8001b54 <showResult+0x27c>
			 {
				 printf("%d%d : Alternate function -> PIN : ", bitArray[2*i], bitArray[2*i+1]);
 8001b24:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b30:	4413      	add	r3, r2
 8001b32:	f853 1ccc 	ldr.w	r1, [r3, #-204]
 8001b36:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	009b      	lsls	r3, r3, #2
 8001b40:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b44:	4413      	add	r3, r2
 8001b46:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	481f      	ldr	r0, [pc, #124]	; (8001bcc <showResult+0x2f4>)
 8001b4e:	f006 f96f 	bl	8007e30 <iprintf>
 8001b52:	e016      	b.n	8001b82 <showResult+0x2aa>
			 }else{
				 printf("%d%d : Analog             -> PIN : ", bitArray[2*i], bitArray[2*i+1]);
 8001b54:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b60:	4413      	add	r3, r2
 8001b62:	f853 1ccc 	ldr.w	r1, [r3, #-204]
 8001b66:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8001b74:	4413      	add	r3, r2
 8001b76:	f853 3ccc 	ldr.w	r3, [r3, #-204]
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4814      	ldr	r0, [pc, #80]	; (8001bd0 <showResult+0x2f8>)
 8001b7e:	f006 f957 	bl	8007e30 <iprintf>
			 }
		 }
		 printf("%d\r\n", pinArrayLength-1-i);
 8001b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <showResult+0x2fc>)
 8001b92:	f006 f94d 	bl	8007e30 <iprintf>
	 for(int i=0; i < pinArrayLength; i++)
 8001b96:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8001ba0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	f6ff af68 	blt.w	8001a7e <showResult+0x1a6>
	 }

}
 8001bae:	bf00      	nop
 8001bb0:	bf00      	nop
 8001bb2:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	bf00      	nop
 8001bbc:	0800bb94 	.word	0x0800bb94
 8001bc0:	0800bbac 	.word	0x0800bbac
 8001bc4:	0800bbcc 	.word	0x0800bbcc
 8001bc8:	0800bbf0 	.word	0x0800bbf0
 8001bcc:	0800bc14 	.word	0x0800bc14
 8001bd0:	0800bc38 	.word	0x0800bc38
 8001bd4:	0800bc5c 	.word	0x0800bc5c

08001bd8 <HAL_TIM_PeriodElapsedCallback>:

	}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM7)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a25      	ldr	r2, [pc, #148]	; (8001c7c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d144      	bne.n	8001c74 <HAL_TIM_PeriodElapsedCallback+0x9c>
	{
		if(tempData > 2000){
 8001bea:	4b25      	ldr	r3, [pc, #148]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001bec:	881b      	ldrh	r3, [r3, #0]
 8001bee:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001bf2:	d90b      	bls.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x34>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	2101      	movs	r1, #1
 8001bf8:	4822      	ldr	r0, [pc, #136]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001bfa:	f002 f9fb 	bl	8003ff4 <HAL_GPIO_WritePin>
			//printf("%d\r\n", a);
			a++;
 8001bfe:	4b22      	ldr	r3, [pc, #136]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c00:	881b      	ldrh	r3, [r3, #0]
 8001c02:	3301      	adds	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	4b20      	ldr	r3, [pc, #128]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c08:	801a      	strh	r2, [r3, #0]
 8001c0a:	e004      	b.n	8001c16 <HAL_TIM_PeriodElapsedCallback+0x3e>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	2101      	movs	r1, #1
 8001c10:	481c      	ldr	r0, [pc, #112]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c12:	f002 f9ef 	bl	8003ff4 <HAL_GPIO_WritePin>
		}


		if(tempData > 1500 ){
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c18:	881b      	ldrh	r3, [r3, #0]
 8001c1a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d90b      	bls.n	8001c3a <HAL_TIM_PeriodElapsedCallback+0x62>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001c22:	2201      	movs	r2, #1
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	4817      	ldr	r0, [pc, #92]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c28:	f002 f9e4 	bl	8003ff4 <HAL_GPIO_WritePin>
			a++;
 8001c2c:	4b16      	ldr	r3, [pc, #88]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c2e:	881b      	ldrh	r3, [r3, #0]
 8001c30:	3301      	adds	r3, #1
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	4b14      	ldr	r3, [pc, #80]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c36:	801a      	strh	r2, [r3, #0]
 8001c38:	e004      	b.n	8001c44 <HAL_TIM_PeriodElapsedCallback+0x6c>
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	2180      	movs	r1, #128	; 0x80
 8001c3e:	4811      	ldr	r0, [pc, #68]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c40:	f002 f9d8 	bl	8003ff4 <HAL_GPIO_WritePin>
		}


		if(tempData > 1000 ){
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001c46:	881b      	ldrh	r3, [r3, #0]
 8001c48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c4c:	d90c      	bls.n	8001c68 <HAL_TIM_PeriodElapsedCallback+0x90>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);
 8001c4e:	2201      	movs	r2, #1
 8001c50:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c54:	480b      	ldr	r0, [pc, #44]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c56:	f002 f9cd 	bl	8003ff4 <HAL_GPIO_WritePin>
			a++;
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001c64:	801a      	strh	r2, [r3, #0]
		}else{
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
		}
	}
}
 8001c66:	e005      	b.n	8001c74 <HAL_TIM_PeriodElapsedCallback+0x9c>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001c6e:	4805      	ldr	r0, [pc, #20]	; (8001c84 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8001c70:	f002 f9c0 	bl	8003ff4 <HAL_GPIO_WritePin>
}
 8001c74:	bf00      	nop
 8001c76:	3708      	adds	r7, #8
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40001400 	.word	0x40001400
 8001c80:	200001fc 	.word	0x200001fc
 8001c84:	40020400 	.word	0x40020400
 8001c88:	200001fe 	.word	0x200001fe

08001c8c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b082      	sub	sp, #8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	4603      	mov	r3, r0
 8001c94:	80fb      	strh	r3, [r7, #6]

	static uint32_t temp;
	if(GPIO_Pin == GPIO_PIN_3)	// PIN_3 Pressed
 8001c96:	88fb      	ldrh	r3, [r7, #6]
 8001c98:	2b08      	cmp	r3, #8
 8001c9a:	d11b      	bne.n	8001cd4 <HAL_GPIO_EXTI_Callback+0x48>
	{
		if(HAL_GetTick() - temp > 100){
 8001c9c:	f000 fe80 	bl	80029a0 <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	4b12      	ldr	r3, [pc, #72]	; (8001cec <HAL_GPIO_EXTI_Callback+0x60>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	1ad3      	subs	r3, r2, r3
 8001ca8:	2b64      	cmp	r3, #100	; 0x64
 8001caa:	d906      	bls.n	8001cba <HAL_GPIO_EXTI_Callback+0x2e>
			printf("%s\r\n", "[PIN_3 Pressed]");
 8001cac:	4910      	ldr	r1, [pc, #64]	; (8001cf0 <HAL_GPIO_EXTI_Callback+0x64>)
 8001cae:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001cb0:	f006 f8be 	bl	8007e30 <iprintf>
			showResult(GPIOB);
 8001cb4:	4810      	ldr	r0, [pc, #64]	; (8001cf8 <HAL_GPIO_EXTI_Callback+0x6c>)
 8001cb6:	f7ff fe0f 	bl	80018d8 <showResult>
			//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
		}

		//while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET);
		while(HAL_GPIO_ReadPin(GPIOE, GPIO_PIN_3) == GPIO_PIN_RESET){
 8001cba:	bf00      	nop
 8001cbc:	2108      	movs	r1, #8
 8001cbe:	480f      	ldr	r0, [pc, #60]	; (8001cfc <HAL_GPIO_EXTI_Callback+0x70>)
 8001cc0:	f002 f980 	bl	8003fc4 <HAL_GPIO_ReadPin>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d0f8      	beq.n	8001cbc <HAL_GPIO_EXTI_Callback+0x30>
			//printf("%s\r\n", "wait for reset");
		}	// button -> 0
		temp = HAL_GetTick();	// check last time
 8001cca:	f000 fe69 	bl	80029a0 <HAL_GetTick>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	4a06      	ldr	r2, [pc, #24]	; (8001cec <HAL_GPIO_EXTI_Callback+0x60>)
 8001cd2:	6013      	str	r3, [r2, #0]
	}


	if(GPIO_Pin == GPIO_PIN_10)
 8001cd4:	88fb      	ldrh	r3, [r7, #6]
 8001cd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cda:	d103      	bne.n	8001ce4 <HAL_GPIO_EXTI_Callback+0x58>
	{
		printf("%s\r\n", "PIN_10 Pressed");
 8001cdc:	4908      	ldr	r1, [pc, #32]	; (8001d00 <HAL_GPIO_EXTI_Callback+0x74>)
 8001cde:	4805      	ldr	r0, [pc, #20]	; (8001cf4 <HAL_GPIO_EXTI_Callback+0x68>)
 8001ce0:	f006 f8a6 	bl	8007e30 <iprintf>
		//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
	}
}
 8001ce4:	bf00      	nop
 8001ce6:	3708      	adds	r7, #8
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	20000200 	.word	0x20000200
 8001cf0:	0800bc64 	.word	0x0800bc64
 8001cf4:	0800bc74 	.word	0x0800bc74
 8001cf8:	40020400 	.word	0x40020400
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	0800bc7c 	.word	0x0800bc7c

08001d04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d08:	b672      	cpsid	i
}
 8001d0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d0c:	e7fe      	b.n	8001d0c <Error_Handler+0x8>
	...

08001d10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d16:	2300      	movs	r3, #0
 8001d18:	607b      	str	r3, [r7, #4]
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	4a0f      	ldr	r2, [pc, #60]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d24:	6453      	str	r3, [r2, #68]	; 0x44
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d2e:	607b      	str	r3, [r7, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	603b      	str	r3, [r7, #0]
 8001d36:	4b09      	ldr	r3, [pc, #36]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	4a08      	ldr	r2, [pc, #32]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d40:	6413      	str	r3, [r2, #64]	; 0x40
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_MspInit+0x4c>)
 8001d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d4a:	603b      	str	r3, [r7, #0]
 8001d4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <NMI_Handler+0x4>

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <MemManage_Handler+0x4>

08001d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 fde4 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001db8:	2008      	movs	r0, #8
 8001dba:	f002 f935 	bl	8004028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
	...

08001dc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <TIM4_IRQHandler+0x10>)
 8001dca:	f003 fbe8 	bl	800559e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	2000030c 	.word	0x2000030c

08001dd8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <USART3_IRQHandler+0x10>)
 8001dde:	f004 faf3 	bl	80063c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	200004bc 	.word	0x200004bc

08001dec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001df0:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001df4:	f002 f918 	bl	8004028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001e00:	4802      	ldr	r0, [pc, #8]	; (8001e0c <TIM7_IRQHandler+0x10>)
 8001e02:	f003 fbcc 	bl	800559e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	20000474 	.word	0x20000474

08001e10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001e14:	4802      	ldr	r0, [pc, #8]	; (8001e20 <DMA2_Stream0_IRQHandler+0x10>)
 8001e16:	f001 fcbf 	bl	8003798 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001e1a:	bf00      	nop
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	20000258 	.word	0x20000258

08001e24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
	return 1;
 8001e28:	2301      	movs	r3, #1
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_kill>:

int _kill(int pid, int sig)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e3e:	f005 f94b 	bl	80070d8 <__errno>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2216      	movs	r2, #22
 8001e46:	601a      	str	r2, [r3, #0]
	return -1;
 8001e48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3708      	adds	r7, #8
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <_exit>:

void _exit (int status)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b082      	sub	sp, #8
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff ffe7 	bl	8001e34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001e66:	e7fe      	b.n	8001e66 <_exit+0x12>

08001e68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e74:	2300      	movs	r3, #0
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	e00a      	b.n	8001e90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e7a:	f3af 8000 	nop.w
 8001e7e:	4601      	mov	r1, r0
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	1c5a      	adds	r2, r3, #1
 8001e84:	60ba      	str	r2, [r7, #8]
 8001e86:	b2ca      	uxtb	r2, r1
 8001e88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	697a      	ldr	r2, [r7, #20]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	dbf0      	blt.n	8001e7a <_read+0x12>
	}

return len;
 8001e98:	687b      	ldr	r3, [r7, #4]
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001ea2:	b480      	push	{r7}
 8001ea4:	b083      	sub	sp, #12
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	6078      	str	r0, [r7, #4]
	return -1;
 8001eaa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
 8001ec2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001eca:	605a      	str	r2, [r3, #4]
	return 0;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr

08001eda <_isatty>:

int _isatty(int file)
{
 8001eda:	b480      	push	{r7}
 8001edc:	b083      	sub	sp, #12
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
	return 1;
 8001ee2:	2301      	movs	r3, #1
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b085      	sub	sp, #20
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	return 0;
 8001efc:	2300      	movs	r3, #0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3714      	adds	r7, #20
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr
	...

08001f0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b086      	sub	sp, #24
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f14:	4a14      	ldr	r2, [pc, #80]	; (8001f68 <_sbrk+0x5c>)
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <_sbrk+0x60>)
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <_sbrk+0x64>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d102      	bne.n	8001f2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f28:	4b11      	ldr	r3, [pc, #68]	; (8001f70 <_sbrk+0x64>)
 8001f2a:	4a12      	ldr	r2, [pc, #72]	; (8001f74 <_sbrk+0x68>)
 8001f2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <_sbrk+0x64>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4413      	add	r3, r2
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d207      	bcs.n	8001f4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f3c:	f005 f8cc 	bl	80070d8 <__errno>
 8001f40:	4603      	mov	r3, r0
 8001f42:	220c      	movs	r2, #12
 8001f44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f46:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4a:	e009      	b.n	8001f60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f4c:	4b08      	ldr	r3, [pc, #32]	; (8001f70 <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <_sbrk+0x64>)
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4413      	add	r3, r2
 8001f5a:	4a05      	ldr	r2, [pc, #20]	; (8001f70 <_sbrk+0x64>)
 8001f5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	20030000 	.word	0x20030000
 8001f6c:	00000400 	.word	0x00000400
 8001f70:	20000204 	.word	0x20000204
 8001f74:	20000518 	.word	0x20000518

08001f78 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f7c:	4b06      	ldr	r3, [pc, #24]	; (8001f98 <SystemInit+0x20>)
 8001f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f82:	4a05      	ldr	r2, [pc, #20]	; (8001f98 <SystemInit+0x20>)
 8001f84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	e000ed00 	.word	0xe000ed00

08001f9c <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08e      	sub	sp, #56	; 0x38
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fa2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 8001faa:	605a      	str	r2, [r3, #4]
 8001fac:	609a      	str	r2, [r3, #8]
 8001fae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fb0:	f107 0320 	add.w	r3, r7, #32
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fba:	1d3b      	adds	r3, r7, #4
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	611a      	str	r2, [r3, #16]
 8001fc8:	615a      	str	r2, [r3, #20]
 8001fca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fcc:	4b2d      	ldr	r3, [pc, #180]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fd2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 8001fd4:	4b2b      	ldr	r3, [pc, #172]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fd6:	22b3      	movs	r2, #179	; 0xb3
 8001fd8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fda:	4b2a      	ldr	r3, [pc, #168]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001fe0:	4b28      	ldr	r3, [pc, #160]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fe2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fe6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fe8:	4b26      	ldr	r3, [pc, #152]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fee:	4b25      	ldr	r3, [pc, #148]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ff4:	4823      	ldr	r0, [pc, #140]	; (8002084 <MX_TIM2_Init+0xe8>)
 8001ff6:	f003 f9b9 	bl	800536c <HAL_TIM_Base_Init>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002000:	f7ff fe80 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002004:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002008:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800200a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800200e:	4619      	mov	r1, r3
 8002010:	481c      	ldr	r0, [pc, #112]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002012:	f003 fc8f 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d001      	beq.n	8002020 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800201c:	f7ff fe72 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002020:	4818      	ldr	r0, [pc, #96]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002022:	f003 fa63 	bl	80054ec <HAL_TIM_PWM_Init>
 8002026:	4603      	mov	r3, r0
 8002028:	2b00      	cmp	r3, #0
 800202a:	d001      	beq.n	8002030 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800202c:	f7ff fe6a 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002034:	2300      	movs	r3, #0
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002038:	f107 0320 	add.w	r3, r7, #32
 800203c:	4619      	mov	r1, r3
 800203e:	4811      	ldr	r0, [pc, #68]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002040:	f004 f852 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800204a:	f7ff fe5b 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800204e:	2360      	movs	r3, #96	; 0x60
 8002050:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8002052:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002056:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002058:	2300      	movs	r3, #0
 800205a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002060:	1d3b      	adds	r3, r7, #4
 8002062:	2200      	movs	r2, #0
 8002064:	4619      	mov	r1, r3
 8002066:	4807      	ldr	r0, [pc, #28]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002068:	f003 fba2 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d001      	beq.n	8002076 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002072:	f7ff fe47 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002076:	4803      	ldr	r0, [pc, #12]	; (8002084 <MX_TIM2_Init+0xe8>)
 8002078:	f000 fab2 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 800207c:	bf00      	nop
 800207e:	3738      	adds	r7, #56	; 0x38
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}
 8002084:	2000042c 	.word	0x2000042c

08002088 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b08e      	sub	sp, #56	; 0x38
 800208c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800208e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]
 800209a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800209c:	f107 0320 	add.w	r3, r7, #32
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
 80020b4:	615a      	str	r2, [r3, #20]
 80020b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80020b8:	4b2c      	ldr	r3, [pc, #176]	; (800216c <MX_TIM3_Init+0xe4>)
 80020ba:	4a2d      	ldr	r2, [pc, #180]	; (8002170 <MX_TIM3_Init+0xe8>)
 80020bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80020be:	4b2b      	ldr	r3, [pc, #172]	; (800216c <MX_TIM3_Init+0xe4>)
 80020c0:	2208      	movs	r2, #8
 80020c2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c4:	4b29      	ldr	r3, [pc, #164]	; (800216c <MX_TIM3_Init+0xe4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80020ca:	4b28      	ldr	r3, [pc, #160]	; (800216c <MX_TIM3_Init+0xe4>)
 80020cc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80020d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d2:	4b26      	ldr	r3, [pc, #152]	; (800216c <MX_TIM3_Init+0xe4>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020d8:	4b24      	ldr	r3, [pc, #144]	; (800216c <MX_TIM3_Init+0xe4>)
 80020da:	2200      	movs	r2, #0
 80020dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80020de:	4823      	ldr	r0, [pc, #140]	; (800216c <MX_TIM3_Init+0xe4>)
 80020e0:	f003 f944 	bl	800536c <HAL_TIM_Base_Init>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d001      	beq.n	80020ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80020ea:	f7ff fe0b 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80020f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80020f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020f8:	4619      	mov	r1, r3
 80020fa:	481c      	ldr	r0, [pc, #112]	; (800216c <MX_TIM3_Init+0xe4>)
 80020fc:	f003 fc1a 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8002106:	f7ff fdfd 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800210a:	4818      	ldr	r0, [pc, #96]	; (800216c <MX_TIM3_Init+0xe4>)
 800210c:	f003 f9ee 	bl	80054ec <HAL_TIM_PWM_Init>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d001      	beq.n	800211a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8002116:	f7ff fdf5 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211a:	2300      	movs	r3, #0
 800211c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800211e:	2300      	movs	r3, #0
 8002120:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002122:	f107 0320 	add.w	r3, r7, #32
 8002126:	4619      	mov	r1, r3
 8002128:	4810      	ldr	r0, [pc, #64]	; (800216c <MX_TIM3_Init+0xe4>)
 800212a:	f003 ffdd 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8002134:	f7ff fde6 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002138:	2360      	movs	r3, #96	; 0x60
 800213a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002140:	2300      	movs	r3, #0
 8002142:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002144:	2300      	movs	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002148:	1d3b      	adds	r3, r7, #4
 800214a:	2200      	movs	r2, #0
 800214c:	4619      	mov	r1, r3
 800214e:	4807      	ldr	r0, [pc, #28]	; (800216c <MX_TIM3_Init+0xe4>)
 8002150:	f003 fb2e 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800215a:	f7ff fdd3 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800215e:	4803      	ldr	r0, [pc, #12]	; (800216c <MX_TIM3_Init+0xe4>)
 8002160:	f000 fa3e 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 8002164:	bf00      	nop
 8002166:	3738      	adds	r7, #56	; 0x38
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	200003e4 	.word	0x200003e4
 8002170:	40000400 	.word	0x40000400

08002174 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08e      	sub	sp, #56	; 0x38
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002188:	f107 0320 	add.w	r3, r7, #32
 800218c:	2200      	movs	r2, #0
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002192:	1d3b      	adds	r3, r7, #4
 8002194:	2200      	movs	r2, #0
 8002196:	601a      	str	r2, [r3, #0]
 8002198:	605a      	str	r2, [r3, #4]
 800219a:	609a      	str	r2, [r3, #8]
 800219c:	60da      	str	r2, [r3, #12]
 800219e:	611a      	str	r2, [r3, #16]
 80021a0:	615a      	str	r2, [r3, #20]
 80021a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <MX_TIM4_Init+0x120>)
 80021a6:	4a3c      	ldr	r2, [pc, #240]	; (8002298 <MX_TIM4_Init+0x124>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80021aa:	4b3a      	ldr	r3, [pc, #232]	; (8002294 <MX_TIM4_Init+0x120>)
 80021ac:	2211      	movs	r2, #17
 80021ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b38      	ldr	r3, [pc, #224]	; (8002294 <MX_TIM4_Init+0x120>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80021b6:	4b37      	ldr	r3, [pc, #220]	; (8002294 <MX_TIM4_Init+0x120>)
 80021b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80021bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <MX_TIM4_Init+0x120>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c4:	4b33      	ldr	r3, [pc, #204]	; (8002294 <MX_TIM4_Init+0x120>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021ca:	4832      	ldr	r0, [pc, #200]	; (8002294 <MX_TIM4_Init+0x120>)
 80021cc:	f003 f8ce 	bl	800536c <HAL_TIM_Base_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80021d6:	f7ff fd95 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021e4:	4619      	mov	r1, r3
 80021e6:	482b      	ldr	r0, [pc, #172]	; (8002294 <MX_TIM4_Init+0x120>)
 80021e8:	f003 fba4 	bl	8005934 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80021f2:	f7ff fd87 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021f6:	4827      	ldr	r0, [pc, #156]	; (8002294 <MX_TIM4_Init+0x120>)
 80021f8:	f003 f978 	bl	80054ec <HAL_TIM_PWM_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8002202:	f7ff fd7f 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220a:	2300      	movs	r3, #0
 800220c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800220e:	f107 0320 	add.w	r3, r7, #32
 8002212:	4619      	mov	r1, r3
 8002214:	481f      	ldr	r0, [pc, #124]	; (8002294 <MX_TIM4_Init+0x120>)
 8002216:	f003 ff67 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 800221a:	4603      	mov	r3, r0
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002220:	f7ff fd70 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002224:	2360      	movs	r3, #96	; 0x60
 8002226:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8002228:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800222c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	4815      	ldr	r0, [pc, #84]	; (8002294 <MX_TIM4_Init+0x120>)
 800223e:	f003 fab7 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8002248:	f7ff fd5c 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800224c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8002250:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002252:	1d3b      	adds	r3, r7, #4
 8002254:	2204      	movs	r2, #4
 8002256:	4619      	mov	r1, r3
 8002258:	480e      	ldr	r0, [pc, #56]	; (8002294 <MX_TIM4_Init+0x120>)
 800225a:	f003 faa9 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8002264:	f7ff fd4e 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8002268:	f641 4351 	movw	r3, #7249	; 0x1c51
 800226c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2208      	movs	r2, #8
 8002272:	4619      	mov	r1, r3
 8002274:	4807      	ldr	r0, [pc, #28]	; (8002294 <MX_TIM4_Init+0x120>)
 8002276:	f003 fa9b 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8002280:	f7ff fd40 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002284:	4803      	ldr	r0, [pc, #12]	; (8002294 <MX_TIM4_Init+0x120>)
 8002286:	f000 f9ab 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 800228a:	bf00      	nop
 800228c:	3738      	adds	r7, #56	; 0x38
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}
 8002292:	bf00      	nop
 8002294:	2000030c 	.word	0x2000030c
 8002298:	40000800 	.word	0x40000800

0800229c <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	; 0x38
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80022cc:	4b31      	ldr	r3, [pc, #196]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022ce:	4a32      	ldr	r2, [pc, #200]	; (8002398 <MX_TIM5_Init+0xfc>)
 80022d0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80022d2:	4b30      	ldr	r3, [pc, #192]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022d4:	2209      	movs	r2, #9
 80022d6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b2e      	ldr	r3, [pc, #184]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80022de:	4b2d      	ldr	r3, [pc, #180]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022e0:	4a2e      	ldr	r2, [pc, #184]	; (800239c <MX_TIM5_Init+0x100>)
 80022e2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e4:	4b2b      	ldr	r3, [pc, #172]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ea:	4b2a      	ldr	r3, [pc, #168]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80022f0:	4828      	ldr	r0, [pc, #160]	; (8002394 <MX_TIM5_Init+0xf8>)
 80022f2:	f003 f83b 	bl	800536c <HAL_TIM_Base_Init>
 80022f6:	4603      	mov	r3, r0
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d001      	beq.n	8002300 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 80022fc:	f7ff fd02 	bl	8001d04 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002300:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002306:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800230a:	4619      	mov	r1, r3
 800230c:	4821      	ldr	r0, [pc, #132]	; (8002394 <MX_TIM5_Init+0xf8>)
 800230e:	f003 fb11 	bl	8005934 <HAL_TIM_ConfigClockSource>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d001      	beq.n	800231c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8002318:	f7ff fcf4 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800231c:	481d      	ldr	r0, [pc, #116]	; (8002394 <MX_TIM5_Init+0xf8>)
 800231e:	f003 f8e5 	bl	80054ec <HAL_TIM_PWM_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8002328:	f7ff fcec 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232c:	2300      	movs	r3, #0
 800232e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002330:	2300      	movs	r3, #0
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002334:	f107 0320 	add.w	r3, r7, #32
 8002338:	4619      	mov	r1, r3
 800233a:	4816      	ldr	r0, [pc, #88]	; (8002394 <MX_TIM5_Init+0xf8>)
 800233c:	f003 fed4 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8002346:	f7ff fcdd 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234a:	2360      	movs	r3, #96	; 0x60
 800234c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800234e:	2300      	movs	r3, #0
 8002350:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002352:	2300      	movs	r3, #0
 8002354:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002356:	2300      	movs	r3, #0
 8002358:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800235a:	1d3b      	adds	r3, r7, #4
 800235c:	2200      	movs	r2, #0
 800235e:	4619      	mov	r1, r3
 8002360:	480c      	ldr	r0, [pc, #48]	; (8002394 <MX_TIM5_Init+0xf8>)
 8002362:	f003 fa25 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 8002366:	4603      	mov	r3, r0
 8002368:	2b00      	cmp	r3, #0
 800236a:	d001      	beq.n	8002370 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800236c:	f7ff fcca 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002370:	1d3b      	adds	r3, r7, #4
 8002372:	220c      	movs	r2, #12
 8002374:	4619      	mov	r1, r3
 8002376:	4807      	ldr	r0, [pc, #28]	; (8002394 <MX_TIM5_Init+0xf8>)
 8002378:	f003 fa1a 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8002382:	f7ff fcbf 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8002386:	4803      	ldr	r0, [pc, #12]	; (8002394 <MX_TIM5_Init+0xf8>)
 8002388:	f000 f92a 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 800238c:	bf00      	nop
 800238e:	3738      	adds	r7, #56	; 0x38
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	2000039c 	.word	0x2000039c
 8002398:	40000c00 	.word	0x40000c00
 800239c:	0001869f 	.word	0x0001869f

080023a0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b082      	sub	sp, #8
 80023a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a6:	463b      	mov	r3, r7
 80023a8:	2200      	movs	r2, #0
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80023ae:	4b15      	ldr	r3, [pc, #84]	; (8002404 <MX_TIM7_Init+0x64>)
 80023b0:	4a15      	ldr	r2, [pc, #84]	; (8002408 <MX_TIM7_Init+0x68>)
 80023b2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8999;
 80023b4:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_TIM7_Init+0x64>)
 80023b6:	f242 3227 	movw	r2, #8999	; 0x2327
 80023ba:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_TIM7_Init+0x64>)
 80023be:	2200      	movs	r2, #0
 80023c0:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_TIM7_Init+0x64>)
 80023c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80023c8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80023ca:	4b0e      	ldr	r3, [pc, #56]	; (8002404 <MX_TIM7_Init+0x64>)
 80023cc:	2280      	movs	r2, #128	; 0x80
 80023ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80023d0:	480c      	ldr	r0, [pc, #48]	; (8002404 <MX_TIM7_Init+0x64>)
 80023d2:	f002 ffcb 	bl	800536c <HAL_TIM_Base_Init>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d001      	beq.n	80023e0 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80023dc:	f7ff fc92 	bl	8001d04 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e0:	2300      	movs	r3, #0
 80023e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023e4:	2300      	movs	r3, #0
 80023e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80023e8:	463b      	mov	r3, r7
 80023ea:	4619      	mov	r1, r3
 80023ec:	4805      	ldr	r0, [pc, #20]	; (8002404 <MX_TIM7_Init+0x64>)
 80023ee:	f003 fe7b 	bl	80060e8 <HAL_TIMEx_MasterConfigSynchronization>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d001      	beq.n	80023fc <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80023f8:	f7ff fc84 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80023fc:	bf00      	nop
 80023fe:	3708      	adds	r7, #8
 8002400:	46bd      	mov	sp, r7
 8002402:	bd80      	pop	{r7, pc}
 8002404:	20000474 	.word	0x20000474
 8002408:	40001400 	.word	0x40001400

0800240c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b088      	sub	sp, #32
 8002410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002412:	1d3b      	adds	r3, r7, #4
 8002414:	2200      	movs	r2, #0
 8002416:	601a      	str	r2, [r3, #0]
 8002418:	605a      	str	r2, [r3, #4]
 800241a:	609a      	str	r2, [r3, #8]
 800241c:	60da      	str	r2, [r3, #12]
 800241e:	611a      	str	r2, [r3, #16]
 8002420:	615a      	str	r2, [r3, #20]
 8002422:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002424:	4b1e      	ldr	r3, [pc, #120]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002426:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <MX_TIM10_Init+0x98>)
 8002428:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800242a:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <MX_TIM10_Init+0x94>)
 800242c:	2247      	movs	r2, #71	; 0x47
 800242e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002430:	4b1b      	ldr	r3, [pc, #108]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002432:	2200      	movs	r2, #0
 8002434:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8002436:	4b1a      	ldr	r3, [pc, #104]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002438:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800243c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800243e:	4b18      	ldr	r3, [pc, #96]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002440:	2200      	movs	r2, #0
 8002442:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002444:	4b16      	ldr	r3, [pc, #88]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002446:	2200      	movs	r2, #0
 8002448:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800244a:	4815      	ldr	r0, [pc, #84]	; (80024a0 <MX_TIM10_Init+0x94>)
 800244c:	f002 ff8e 	bl	800536c <HAL_TIM_Base_Init>
 8002450:	4603      	mov	r3, r0
 8002452:	2b00      	cmp	r3, #0
 8002454:	d001      	beq.n	800245a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002456:	f7ff fc55 	bl	8001d04 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800245a:	4811      	ldr	r0, [pc, #68]	; (80024a0 <MX_TIM10_Init+0x94>)
 800245c:	f003 f846 	bl	80054ec <HAL_TIM_PWM_Init>
 8002460:	4603      	mov	r3, r0
 8002462:	2b00      	cmp	r3, #0
 8002464:	d001      	beq.n	800246a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002466:	f7ff fc4d 	bl	8001d04 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800246a:	2360      	movs	r3, #96	; 0x60
 800246c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800246e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002472:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002474:	2300      	movs	r3, #0
 8002476:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002478:	2300      	movs	r3, #0
 800247a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800247c:	1d3b      	adds	r3, r7, #4
 800247e:	2200      	movs	r2, #0
 8002480:	4619      	mov	r1, r3
 8002482:	4807      	ldr	r0, [pc, #28]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002484:	f003 f994 	bl	80057b0 <HAL_TIM_PWM_ConfigChannel>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800248e:	f7ff fc39 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8002492:	4803      	ldr	r0, [pc, #12]	; (80024a0 <MX_TIM10_Init+0x94>)
 8002494:	f000 f8a4 	bl	80025e0 <HAL_TIM_MspPostInit>

}
 8002498:	bf00      	nop
 800249a:	3720      	adds	r7, #32
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000354 	.word	0x20000354
 80024a4:	40014400 	.word	0x40014400

080024a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b088      	sub	sp, #32
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b8:	d10e      	bne.n	80024d8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	61fb      	str	r3, [r7, #28]
 80024be:	4b42      	ldr	r3, [pc, #264]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c2:	4a41      	ldr	r2, [pc, #260]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6413      	str	r3, [r2, #64]	; 0x40
 80024ca:	4b3f      	ldr	r3, [pc, #252]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80024d6:	e072      	b.n	80025be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a3b      	ldr	r2, [pc, #236]	; (80025cc <HAL_TIM_Base_MspInit+0x124>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d10e      	bne.n	8002500 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024e2:	2300      	movs	r3, #0
 80024e4:	61bb      	str	r3, [r7, #24]
 80024e6:	4b38      	ldr	r3, [pc, #224]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	4a37      	ldr	r2, [pc, #220]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024ec:	f043 0302 	orr.w	r3, r3, #2
 80024f0:	6413      	str	r3, [r2, #64]	; 0x40
 80024f2:	4b35      	ldr	r3, [pc, #212]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	61bb      	str	r3, [r7, #24]
 80024fc:	69bb      	ldr	r3, [r7, #24]
}
 80024fe:	e05e      	b.n	80025be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_TIM_Base_MspInit+0x128>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d116      	bne.n	8002538 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	617b      	str	r3, [r7, #20]
 800250e:	4b2e      	ldr	r3, [pc, #184]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	4a2d      	ldr	r2, [pc, #180]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002514:	f043 0304 	orr.w	r3, r3, #4
 8002518:	6413      	str	r3, [r2, #64]	; 0x40
 800251a:	4b2b      	ldr	r3, [pc, #172]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	f003 0304 	and.w	r3, r3, #4
 8002522:	617b      	str	r3, [r7, #20]
 8002524:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002526:	2200      	movs	r2, #0
 8002528:	2100      	movs	r1, #0
 800252a:	201e      	movs	r0, #30
 800252c:	f000 ff65 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002530:	201e      	movs	r0, #30
 8002532:	f000 ff7e 	bl	8003432 <HAL_NVIC_EnableIRQ>
}
 8002536:	e042      	b.n	80025be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <HAL_TIM_Base_MspInit+0x12c>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d10e      	bne.n	8002560 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
 8002546:	4b20      	ldr	r3, [pc, #128]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	4a1f      	ldr	r2, [pc, #124]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 800254c:	f043 0308 	orr.w	r3, r3, #8
 8002550:	6413      	str	r3, [r2, #64]	; 0x40
 8002552:	4b1d      	ldr	r3, [pc, #116]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002556:	f003 0308 	and.w	r3, r3, #8
 800255a:	613b      	str	r3, [r7, #16]
 800255c:	693b      	ldr	r3, [r7, #16]
}
 800255e:	e02e      	b.n	80025be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a1c      	ldr	r2, [pc, #112]	; (80025d8 <HAL_TIM_Base_MspInit+0x130>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d116      	bne.n	8002598 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002572:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 8002574:	f043 0320 	orr.w	r3, r3, #32
 8002578:	6413      	str	r3, [r2, #64]	; 0x40
 800257a:	4b13      	ldr	r3, [pc, #76]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 800257c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257e:	f003 0320 	and.w	r3, r3, #32
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8002586:	2200      	movs	r2, #0
 8002588:	2100      	movs	r1, #0
 800258a:	2037      	movs	r0, #55	; 0x37
 800258c:	f000 ff35 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002590:	2037      	movs	r0, #55	; 0x37
 8002592:	f000 ff4e 	bl	8003432 <HAL_NVIC_EnableIRQ>
}
 8002596:	e012      	b.n	80025be <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a0f      	ldr	r2, [pc, #60]	; (80025dc <HAL_TIM_Base_MspInit+0x134>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d10d      	bne.n	80025be <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	4b08      	ldr	r3, [pc, #32]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80025a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025aa:	4a07      	ldr	r2, [pc, #28]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025b0:	6453      	str	r3, [r2, #68]	; 0x44
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <HAL_TIM_Base_MspInit+0x120>)
 80025b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	60bb      	str	r3, [r7, #8]
 80025bc:	68bb      	ldr	r3, [r7, #8]
}
 80025be:	bf00      	nop
 80025c0:	3720      	adds	r7, #32
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40000400 	.word	0x40000400
 80025d0:	40000800 	.word	0x40000800
 80025d4:	40000c00 	.word	0x40000c00
 80025d8:	40001400 	.word	0x40001400
 80025dc:	40014400 	.word	0x40014400

080025e0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b08c      	sub	sp, #48	; 0x30
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e8:	f107 031c 	add.w	r3, r7, #28
 80025ec:	2200      	movs	r2, #0
 80025ee:	601a      	str	r2, [r3, #0]
 80025f0:	605a      	str	r2, [r3, #4]
 80025f2:	609a      	str	r2, [r3, #8]
 80025f4:	60da      	str	r2, [r3, #12]
 80025f6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002600:	d11e      	bne.n	8002640 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002602:	2300      	movs	r3, #0
 8002604:	61bb      	str	r3, [r7, #24]
 8002606:	4b58      	ldr	r3, [pc, #352]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a57      	ldr	r2, [pc, #348]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b55      	ldr	r3, [pc, #340]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	61bb      	str	r3, [r7, #24]
 800261c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800261e:	2320      	movs	r3, #32
 8002620:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800262e:	2301      	movs	r3, #1
 8002630:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 031c 	add.w	r3, r7, #28
 8002636:	4619      	mov	r1, r3
 8002638:	484c      	ldr	r0, [pc, #304]	; (800276c <HAL_TIM_MspPostInit+0x18c>)
 800263a:	f001 fb17 	bl	8003c6c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 800263e:	e08f      	b.n	8002760 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a4a      	ldr	r2, [pc, #296]	; (8002770 <HAL_TIM_MspPostInit+0x190>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d11e      	bne.n	8002688 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800264a:	2300      	movs	r3, #0
 800264c:	617b      	str	r3, [r7, #20]
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002652:	4a45      	ldr	r2, [pc, #276]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002654:	f043 0304 	orr.w	r3, r3, #4
 8002658:	6313      	str	r3, [r2, #48]	; 0x30
 800265a:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 800265c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265e:	f003 0304 	and.w	r3, r3, #4
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002666:	2340      	movs	r3, #64	; 0x40
 8002668:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800266a:	2302      	movs	r3, #2
 800266c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266e:	2300      	movs	r3, #0
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002672:	2300      	movs	r3, #0
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002676:	2302      	movs	r3, #2
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267a:	f107 031c 	add.w	r3, r7, #28
 800267e:	4619      	mov	r1, r3
 8002680:	483c      	ldr	r0, [pc, #240]	; (8002774 <HAL_TIM_MspPostInit+0x194>)
 8002682:	f001 faf3 	bl	8003c6c <HAL_GPIO_Init>
}
 8002686:	e06b      	b.n	8002760 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a3a      	ldr	r2, [pc, #232]	; (8002778 <HAL_TIM_MspPostInit+0x198>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d11f      	bne.n	80026d2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002692:	2300      	movs	r3, #0
 8002694:	613b      	str	r3, [r7, #16]
 8002696:	4b34      	ldr	r3, [pc, #208]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269a:	4a33      	ldr	r2, [pc, #204]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 800269c:	f043 0308 	orr.w	r3, r3, #8
 80026a0:	6313      	str	r3, [r2, #48]	; 0x30
 80026a2:	4b31      	ldr	r3, [pc, #196]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 80026a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80026ae:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80026b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b4:	2302      	movs	r3, #2
 80026b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	2300      	movs	r3, #0
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026bc:	2300      	movs	r3, #0
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80026c0:	2302      	movs	r3, #2
 80026c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c4:	f107 031c 	add.w	r3, r7, #28
 80026c8:	4619      	mov	r1, r3
 80026ca:	482c      	ldr	r0, [pc, #176]	; (800277c <HAL_TIM_MspPostInit+0x19c>)
 80026cc:	f001 face 	bl	8003c6c <HAL_GPIO_Init>
}
 80026d0:	e046      	b.n	8002760 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a2a      	ldr	r2, [pc, #168]	; (8002780 <HAL_TIM_MspPostInit+0x1a0>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d11e      	bne.n	800271a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	4b21      	ldr	r3, [pc, #132]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 80026e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e4:	4a20      	ldr	r2, [pc, #128]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 80026e6:	f043 0301 	orr.w	r3, r3, #1
 80026ea:	6313      	str	r3, [r2, #48]	; 0x30
 80026ec:	4b1e      	ldr	r3, [pc, #120]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 80026ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f0:	f003 0301 	and.w	r3, r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
 80026f6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80026f8:	2309      	movs	r3, #9
 80026fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002704:	2300      	movs	r3, #0
 8002706:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002708:	2302      	movs	r3, #2
 800270a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 031c 	add.w	r3, r7, #28
 8002710:	4619      	mov	r1, r3
 8002712:	4816      	ldr	r0, [pc, #88]	; (800276c <HAL_TIM_MspPostInit+0x18c>)
 8002714:	f001 faaa 	bl	8003c6c <HAL_GPIO_Init>
}
 8002718:	e022      	b.n	8002760 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a19      	ldr	r2, [pc, #100]	; (8002784 <HAL_TIM_MspPostInit+0x1a4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d11d      	bne.n	8002760 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002724:	2300      	movs	r3, #0
 8002726:	60bb      	str	r3, [r7, #8]
 8002728:	4b0f      	ldr	r3, [pc, #60]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 800272a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272c:	4a0e      	ldr	r2, [pc, #56]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 800272e:	f043 0320 	orr.w	r3, r3, #32
 8002732:	6313      	str	r3, [r2, #48]	; 0x30
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_TIM_MspPostInit+0x188>)
 8002736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002738:	f003 0320 	and.w	r3, r3, #32
 800273c:	60bb      	str	r3, [r7, #8]
 800273e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002740:	2340      	movs	r3, #64	; 0x40
 8002742:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002744:	2302      	movs	r3, #2
 8002746:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800274c:	2300      	movs	r3, #0
 800274e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002750:	2303      	movs	r3, #3
 8002752:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002754:	f107 031c 	add.w	r3, r7, #28
 8002758:	4619      	mov	r1, r3
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <HAL_TIM_MspPostInit+0x1a8>)
 800275c:	f001 fa86 	bl	8003c6c <HAL_GPIO_Init>
}
 8002760:	bf00      	nop
 8002762:	3730      	adds	r7, #48	; 0x30
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40023800 	.word	0x40023800
 800276c:	40020000 	.word	0x40020000
 8002770:	40000400 	.word	0x40000400
 8002774:	40020800 	.word	0x40020800
 8002778:	40000800 	.word	0x40000800
 800277c:	40020c00 	.word	0x40020c00
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014400 	.word	0x40014400
 8002788:	40021400 	.word	0x40021400

0800278c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002790:	4b11      	ldr	r3, [pc, #68]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 8002792:	4a12      	ldr	r2, [pc, #72]	; (80027dc <MX_USART3_UART_Init+0x50>)
 8002794:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002796:	4b10      	ldr	r3, [pc, #64]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 8002798:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800279c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800279e:	4b0e      	ldr	r3, [pc, #56]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80027a4:	4b0c      	ldr	r3, [pc, #48]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027a6:	2200      	movs	r2, #0
 80027a8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80027b0:	4b09      	ldr	r3, [pc, #36]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027b2:	220c      	movs	r2, #12
 80027b4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80027b6:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80027bc:	4b06      	ldr	r3, [pc, #24]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027be:	2200      	movs	r2, #0
 80027c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80027c2:	4805      	ldr	r0, [pc, #20]	; (80027d8 <MX_USART3_UART_Init+0x4c>)
 80027c4:	f003 fd20 	bl	8006208 <HAL_UART_Init>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80027ce:	f7ff fa99 	bl	8001d04 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80027d2:	bf00      	nop
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	200004bc 	.word	0x200004bc
 80027dc:	40004800 	.word	0x40004800

080027e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b08a      	sub	sp, #40	; 0x28
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e8:	f107 0314 	add.w	r3, r7, #20
 80027ec:	2200      	movs	r2, #0
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	605a      	str	r2, [r3, #4]
 80027f2:	609a      	str	r2, [r3, #8]
 80027f4:	60da      	str	r2, [r3, #12]
 80027f6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a1d      	ldr	r2, [pc, #116]	; (8002874 <HAL_UART_MspInit+0x94>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d134      	bne.n	800286c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	4b1c      	ldr	r3, [pc, #112]	; (8002878 <HAL_UART_MspInit+0x98>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	4a1b      	ldr	r2, [pc, #108]	; (8002878 <HAL_UART_MspInit+0x98>)
 800280c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002810:	6413      	str	r3, [r2, #64]	; 0x40
 8002812:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_UART_MspInit+0x98>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800281a:	613b      	str	r3, [r7, #16]
 800281c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <HAL_UART_MspInit+0x98>)
 8002824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002826:	4a14      	ldr	r2, [pc, #80]	; (8002878 <HAL_UART_MspInit+0x98>)
 8002828:	f043 0308 	orr.w	r3, r3, #8
 800282c:	6313      	str	r3, [r2, #48]	; 0x30
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_UART_MspInit+0x98>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	f003 0308 	and.w	r3, r3, #8
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800283a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800283e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002840:	2302      	movs	r3, #2
 8002842:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002844:	2300      	movs	r3, #0
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002848:	2303      	movs	r3, #3
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800284c:	2307      	movs	r3, #7
 800284e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002850:	f107 0314 	add.w	r3, r7, #20
 8002854:	4619      	mov	r1, r3
 8002856:	4809      	ldr	r0, [pc, #36]	; (800287c <HAL_UART_MspInit+0x9c>)
 8002858:	f001 fa08 	bl	8003c6c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800285c:	2200      	movs	r2, #0
 800285e:	2100      	movs	r1, #0
 8002860:	2027      	movs	r0, #39	; 0x27
 8002862:	f000 fdca 	bl	80033fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002866:	2027      	movs	r0, #39	; 0x27
 8002868:	f000 fde3 	bl	8003432 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800286c:	bf00      	nop
 800286e:	3728      	adds	r7, #40	; 0x28
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	40004800 	.word	0x40004800
 8002878:	40023800 	.word	0x40023800
 800287c:	40020c00 	.word	0x40020c00

08002880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80028b8 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002884:	480d      	ldr	r0, [pc, #52]	; (80028bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002886:	490e      	ldr	r1, [pc, #56]	; (80028c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002888:	4a0e      	ldr	r2, [pc, #56]	; (80028c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800288a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800288c:	e002      	b.n	8002894 <LoopCopyDataInit>

0800288e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800288e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002890:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002892:	3304      	adds	r3, #4

08002894 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002894:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002896:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002898:	d3f9      	bcc.n	800288e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800289a:	4a0b      	ldr	r2, [pc, #44]	; (80028c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800289c:	4c0b      	ldr	r4, [pc, #44]	; (80028cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800289e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028a0:	e001      	b.n	80028a6 <LoopFillZerobss>

080028a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028a4:	3204      	adds	r2, #4

080028a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028a8:	d3fb      	bcc.n	80028a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80028aa:	f7ff fb65 	bl	8001f78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80028ae:	f004 fc19 	bl	80070e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028b2:	f7fe ff1f 	bl	80016f4 <main>
  bx  lr    
 80028b6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80028b8:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80028bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028c0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80028c4:	0800c174 	.word	0x0800c174
  ldr r2, =_sbss
 80028c8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80028cc:	20000514 	.word	0x20000514

080028d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028d0:	e7fe      	b.n	80028d0 <ADC_IRQHandler>
	...

080028d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028d8:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_Init+0x40>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a0d      	ldr	r2, [pc, #52]	; (8002914 <HAL_Init+0x40>)
 80028de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_Init+0x40>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <HAL_Init+0x40>)
 80028ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b08      	ldr	r3, [pc, #32]	; (8002914 <HAL_Init+0x40>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a07      	ldr	r2, [pc, #28]	; (8002914 <HAL_Init+0x40>)
 80028f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028fc:	2003      	movs	r0, #3
 80028fe:	f000 fd71 	bl	80033e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002902:	200f      	movs	r0, #15
 8002904:	f000 f808 	bl	8002918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002908:	f7ff fa02 	bl	8001d10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	40023c00 	.word	0x40023c00

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_InitTick+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_InitTick+0x58>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 fd89 	bl	800344e <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f000 fd51 	bl	80033fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <HAL_InitTick+0x5c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	20000000 	.word	0x20000000
 8002970:	20000008 	.word	0x20000008
 8002974:	20000004 	.word	0x20000004

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000008 	.word	0x20000008
 800299c:	20000500 	.word	0x20000500

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000500 	.word	0x20000500

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff ffee 	bl	80029a0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d005      	beq.n	80029de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_Delay+0x44>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029de:	bf00      	nop
 80029e0:	f7ff ffde 	bl	80029a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d8f7      	bhi.n	80029e0 <HAL_Delay+0x28>
  {
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	20000008 	.word	0x20000008

08002a00 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e033      	b.n	8002a7e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d109      	bne.n	8002a32 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7fe fb70 	bl	8001104 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a36:	f003 0310 	and.w	r3, r3, #16
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d118      	bne.n	8002a70 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a42:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a46:	f023 0302 	bic.w	r3, r3, #2
 8002a4a:	f043 0202 	orr.w	r2, r3, #2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 fa78 	bl	8002f48 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f023 0303 	bic.w	r3, r3, #3
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	641a      	str	r2, [r3, #64]	; 0x40
 8002a6e:	e001      	b.n	8002a74 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2200      	movs	r2, #0
 8002a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3710      	adds	r7, #16
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}
	...

08002a88 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Start_DMA+0x1e>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e0e9      	b.n	8002c7a <HAL_ADC_Start_DMA+0x1f2>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
 8002ab4:	f003 0301 	and.w	r3, r3, #1
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d018      	beq.n	8002aee <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0201 	orr.w	r2, r2, #1
 8002aca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002acc:	4b6d      	ldr	r3, [pc, #436]	; (8002c84 <HAL_ADC_Start_DMA+0x1fc>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a6d      	ldr	r2, [pc, #436]	; (8002c88 <HAL_ADC_Start_DMA+0x200>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	0c9a      	lsrs	r2, r3, #18
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ae0:	e002      	b.n	8002ae8 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f9      	bne.n	8002ae2 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002af8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002afc:	d107      	bne.n	8002b0e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b0c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	f040 80a1 	bne.w	8002c60 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b22:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d007      	beq.n	8002b50 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b48:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b5c:	d106      	bne.n	8002b6c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b62:	f023 0206 	bic.w	r2, r3, #6
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44
 8002b6a:	e002      	b.n	8002b72 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7a:	4b44      	ldr	r3, [pc, #272]	; (8002c8c <HAL_ADC_Start_DMA+0x204>)
 8002b7c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b82:	4a43      	ldr	r2, [pc, #268]	; (8002c90 <HAL_ADC_Start_DMA+0x208>)
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8a:	4a42      	ldr	r2, [pc, #264]	; (8002c94 <HAL_ADC_Start_DMA+0x20c>)
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	4a41      	ldr	r2, [pc, #260]	; (8002c98 <HAL_ADC_Start_DMA+0x210>)
 8002b94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002b9e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002bae:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	689a      	ldr	r2, [r3, #8]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002bbe:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	334c      	adds	r3, #76	; 0x4c
 8002bca:	4619      	mov	r1, r3
 8002bcc:	68ba      	ldr	r2, [r7, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f000 fcf8 	bl	80035c4 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f003 031f 	and.w	r3, r3, #31
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d12a      	bne.n	8002c36 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4a2d      	ldr	r2, [pc, #180]	; (8002c9c <HAL_ADC_Start_DMA+0x214>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d015      	beq.n	8002c16 <HAL_ADC_Start_DMA+0x18e>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a2c      	ldr	r2, [pc, #176]	; (8002ca0 <HAL_ADC_Start_DMA+0x218>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d105      	bne.n	8002c00 <HAL_ADC_Start_DMA+0x178>
 8002bf4:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <HAL_ADC_Start_DMA+0x204>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00a      	beq.n	8002c16 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a27      	ldr	r2, [pc, #156]	; (8002ca4 <HAL_ADC_Start_DMA+0x21c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d136      	bne.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
 8002c0a:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <HAL_ADC_Start_DMA+0x204>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	f003 0310 	and.w	r3, r3, #16
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d130      	bne.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d129      	bne.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689a      	ldr	r2, [r3, #8]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e020      	b.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_ADC_Start_DMA+0x214>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d11b      	bne.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d114      	bne.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c5c:	609a      	str	r2, [r3, #8]
 8002c5e:	e00b      	b.n	8002c78 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0210 	orr.w	r2, r3, #16
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c70:	f043 0201 	orr.w	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c78:	2300      	movs	r3, #0
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3718      	adds	r7, #24
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	20000000 	.word	0x20000000
 8002c88:	431bde83 	.word	0x431bde83
 8002c8c:	40012300 	.word	0x40012300
 8002c90:	08003141 	.word	0x08003141
 8002c94:	080031fb 	.word	0x080031fb
 8002c98:	08003217 	.word	0x08003217
 8002c9c:	40012000 	.word	0x40012000
 8002ca0:	40012100 	.word	0x40012100
 8002ca4:	40012200 	.word	0x40012200

08002ca8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002cc4:	bf00      	nop
 8002cc6:	370c      	adds	r7, #12
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr

08002cd0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
 8002cec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d101      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1c>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	e113      	b.n	8002f28 <HAL_ADC_ConfigChannel+0x244>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	2b09      	cmp	r3, #9
 8002d0e:	d925      	bls.n	8002d5c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	68d9      	ldr	r1, [r3, #12]
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	b29b      	uxth	r3, r3
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4613      	mov	r3, r2
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	4413      	add	r3, r2
 8002d24:	3b1e      	subs	r3, #30
 8002d26:	2207      	movs	r2, #7
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43da      	mvns	r2, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	400a      	ands	r2, r1
 8002d34:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68d9      	ldr	r1, [r3, #12]
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	b29b      	uxth	r3, r3
 8002d46:	4618      	mov	r0, r3
 8002d48:	4603      	mov	r3, r0
 8002d4a:	005b      	lsls	r3, r3, #1
 8002d4c:	4403      	add	r3, r0
 8002d4e:	3b1e      	subs	r3, #30
 8002d50:	409a      	lsls	r2, r3
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	430a      	orrs	r2, r1
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e022      	b.n	8002da2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	6919      	ldr	r1, [r3, #16]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	461a      	mov	r2, r3
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	005b      	lsls	r3, r3, #1
 8002d6e:	4413      	add	r3, r2
 8002d70:	2207      	movs	r2, #7
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43da      	mvns	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	400a      	ands	r2, r1
 8002d7e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6919      	ldr	r1, [r3, #16]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	4618      	mov	r0, r3
 8002d92:	4603      	mov	r3, r0
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	4403      	add	r3, r0
 8002d98:	409a      	lsls	r2, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d824      	bhi.n	8002df4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b05      	subs	r3, #5
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b05      	subs	r3, #5
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	635a      	str	r2, [r3, #52]	; 0x34
 8002df2:	e04c      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d824      	bhi.n	8002e46 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	4613      	mov	r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b23      	subs	r3, #35	; 0x23
 8002e0e:	221f      	movs	r2, #31
 8002e10:	fa02 f303 	lsl.w	r3, r2, r3
 8002e14:	43da      	mvns	r2, r3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	400a      	ands	r2, r1
 8002e1c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	b29b      	uxth	r3, r3
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b23      	subs	r3, #35	; 0x23
 8002e38:	fa00 f203 	lsl.w	r2, r0, r3
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	631a      	str	r2, [r3, #48]	; 0x30
 8002e44:	e023      	b.n	8002e8e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685a      	ldr	r2, [r3, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	3b41      	subs	r3, #65	; 0x41
 8002e58:	221f      	movs	r2, #31
 8002e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e5e:	43da      	mvns	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	400a      	ands	r2, r1
 8002e66:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	4618      	mov	r0, r3
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	685a      	ldr	r2, [r3, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	009b      	lsls	r3, r3, #2
 8002e7e:	4413      	add	r3, r2
 8002e80:	3b41      	subs	r3, #65	; 0x41
 8002e82:	fa00 f203 	lsl.w	r2, r0, r3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e8e:	4b29      	ldr	r3, [pc, #164]	; (8002f34 <HAL_ADC_ConfigChannel+0x250>)
 8002e90:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a28      	ldr	r2, [pc, #160]	; (8002f38 <HAL_ADC_ConfigChannel+0x254>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d10f      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1d8>
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2b12      	cmp	r3, #18
 8002ea2:	d10b      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a1d      	ldr	r2, [pc, #116]	; (8002f38 <HAL_ADC_ConfigChannel+0x254>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d12b      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a1c      	ldr	r2, [pc, #112]	; (8002f3c <HAL_ADC_ConfigChannel+0x258>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d003      	beq.n	8002ed8 <HAL_ADC_ConfigChannel+0x1f4>
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b11      	cmp	r3, #17
 8002ed6:	d122      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a11      	ldr	r2, [pc, #68]	; (8002f3c <HAL_ADC_ConfigChannel+0x258>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d111      	bne.n	8002f1e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002efa:	4b11      	ldr	r3, [pc, #68]	; (8002f40 <HAL_ADC_ConfigChannel+0x25c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a11      	ldr	r2, [pc, #68]	; (8002f44 <HAL_ADC_ConfigChannel+0x260>)
 8002f00:	fba2 2303 	umull	r2, r3, r2, r3
 8002f04:	0c9a      	lsrs	r2, r3, #18
 8002f06:	4613      	mov	r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	4413      	add	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f10:	e002      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	3b01      	subs	r3, #1
 8002f16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f9      	bne.n	8002f12 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002f26:	2300      	movs	r3, #0
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	3714      	adds	r7, #20
 8002f2c:	46bd      	mov	sp, r7
 8002f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f32:	4770      	bx	lr
 8002f34:	40012300 	.word	0x40012300
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	10000012 	.word	0x10000012
 8002f40:	20000000 	.word	0x20000000
 8002f44:	431bde83 	.word	0x431bde83

08002f48 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b085      	sub	sp, #20
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f50:	4b79      	ldr	r3, [pc, #484]	; (8003138 <ADC_Init+0x1f0>)
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f7c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6859      	ldr	r1, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	685a      	ldr	r2, [r3, #4]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002fa0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	6859      	ldr	r1, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	689a      	ldr	r2, [r3, #8]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689a      	ldr	r2, [r3, #8]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fc2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	6899      	ldr	r1, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	68da      	ldr	r2, [r3, #12]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fda:	4a58      	ldr	r2, [pc, #352]	; (800313c <ADC_Init+0x1f4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d022      	beq.n	8003026 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fee:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6899      	ldr	r1, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689a      	ldr	r2, [r3, #8]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003010:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	6899      	ldr	r1, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	430a      	orrs	r2, r1
 8003022:	609a      	str	r2, [r3, #8]
 8003024:	e00f      	b.n	8003046 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003034:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003044:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0202 	bic.w	r2, r2, #2
 8003054:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	6899      	ldr	r1, [r3, #8]
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	7e1b      	ldrb	r3, [r3, #24]
 8003060:	005a      	lsls	r2, r3, #1
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d01b      	beq.n	80030ac <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003082:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003092:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	6859      	ldr	r1, [r3, #4]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309e:	3b01      	subs	r3, #1
 80030a0:	035a      	lsls	r2, r3, #13
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	430a      	orrs	r2, r1
 80030a8:	605a      	str	r2, [r3, #4]
 80030aa:	e007      	b.n	80030bc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030ba:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80030ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	69db      	ldr	r3, [r3, #28]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	051a      	lsls	r2, r3, #20
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80030f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80030fe:	025a      	lsls	r2, r3, #9
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	029a      	lsls	r2, r3, #10
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	40012300 	.word	0x40012300
 800313c:	0f000001 	.word	0x0f000001

08003140 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800314c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003152:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003156:	2b00      	cmp	r3, #0
 8003158:	d13c      	bne.n	80031d4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d12b      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003178:	2b00      	cmp	r3, #0
 800317a:	d127      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003182:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003186:	2b00      	cmp	r3, #0
 8003188:	d006      	beq.n	8003198 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003194:	2b00      	cmp	r3, #0
 8003196:	d119      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0220 	bic.w	r2, r2, #32
 80031a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ac:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d105      	bne.n	80031cc <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c4:	f043 0201 	orr.w	r2, r3, #1
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80031cc:	68f8      	ldr	r0, [r7, #12]
 80031ce:	f7ff fd6b 	bl	8002ca8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80031d2:	e00e      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f003 0310 	and.w	r3, r3, #16
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f7ff fd75 	bl	8002cd0 <HAL_ADC_ErrorCallback>
}
 80031e6:	e004      	b.n	80031f2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	4798      	blx	r3
}
 80031f2:	bf00      	nop
 80031f4:	3710      	adds	r7, #16
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b084      	sub	sp, #16
 80031fe:	af00      	add	r7, sp, #0
 8003200:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003206:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003208:	68f8      	ldr	r0, [r7, #12]
 800320a:	f7ff fd57 	bl	8002cbc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800320e:	bf00      	nop
 8003210:	3710      	adds	r7, #16
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}

08003216 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003216:	b580      	push	{r7, lr}
 8003218:	b084      	sub	sp, #16
 800321a:	af00      	add	r7, sp, #0
 800321c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003222:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2240      	movs	r2, #64	; 0x40
 8003228:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322e:	f043 0204 	orr.w	r2, r3, #4
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f7ff fd4a 	bl	8002cd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}

08003244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003244:	b480      	push	{r7}
 8003246:	b085      	sub	sp, #20
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f003 0307 	and.w	r3, r3, #7
 8003252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003254:	4b0c      	ldr	r3, [pc, #48]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800325a:	68ba      	ldr	r2, [r7, #8]
 800325c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003260:	4013      	ands	r3, r2
 8003262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800326c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003276:	4a04      	ldr	r2, [pc, #16]	; (8003288 <__NVIC_SetPriorityGrouping+0x44>)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	60d3      	str	r3, [r2, #12]
}
 800327c:	bf00      	nop
 800327e:	3714      	adds	r7, #20
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800328c:	b480      	push	{r7}
 800328e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003290:	4b04      	ldr	r3, [pc, #16]	; (80032a4 <__NVIC_GetPriorityGrouping+0x18>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	0a1b      	lsrs	r3, r3, #8
 8003296:	f003 0307 	and.w	r3, r3, #7
}
 800329a:	4618      	mov	r0, r3
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000ed00 	.word	0xe000ed00

080032a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	4603      	mov	r3, r0
 80032b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	db0b      	blt.n	80032d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032ba:	79fb      	ldrb	r3, [r7, #7]
 80032bc:	f003 021f 	and.w	r2, r3, #31
 80032c0:	4907      	ldr	r1, [pc, #28]	; (80032e0 <__NVIC_EnableIRQ+0x38>)
 80032c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032c6:	095b      	lsrs	r3, r3, #5
 80032c8:	2001      	movs	r0, #1
 80032ca:	fa00 f202 	lsl.w	r2, r0, r2
 80032ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032d2:	bf00      	nop
 80032d4:	370c      	adds	r7, #12
 80032d6:	46bd      	mov	sp, r7
 80032d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032dc:	4770      	bx	lr
 80032de:	bf00      	nop
 80032e0:	e000e100 	.word	0xe000e100

080032e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	6039      	str	r1, [r7, #0]
 80032ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	db0a      	blt.n	800330e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	b2da      	uxtb	r2, r3
 80032fc:	490c      	ldr	r1, [pc, #48]	; (8003330 <__NVIC_SetPriority+0x4c>)
 80032fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003302:	0112      	lsls	r2, r2, #4
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	440b      	add	r3, r1
 8003308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800330c:	e00a      	b.n	8003324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	4908      	ldr	r1, [pc, #32]	; (8003334 <__NVIC_SetPriority+0x50>)
 8003314:	79fb      	ldrb	r3, [r7, #7]
 8003316:	f003 030f 	and.w	r3, r3, #15
 800331a:	3b04      	subs	r3, #4
 800331c:	0112      	lsls	r2, r2, #4
 800331e:	b2d2      	uxtb	r2, r2
 8003320:	440b      	add	r3, r1
 8003322:	761a      	strb	r2, [r3, #24]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr
 8003330:	e000e100 	.word	0xe000e100
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003338:	b480      	push	{r7}
 800333a:	b089      	sub	sp, #36	; 0x24
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f003 0307 	and.w	r3, r3, #7
 800334a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800334c:	69fb      	ldr	r3, [r7, #28]
 800334e:	f1c3 0307 	rsb	r3, r3, #7
 8003352:	2b04      	cmp	r3, #4
 8003354:	bf28      	it	cs
 8003356:	2304      	movcs	r3, #4
 8003358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	3304      	adds	r3, #4
 800335e:	2b06      	cmp	r3, #6
 8003360:	d902      	bls.n	8003368 <NVIC_EncodePriority+0x30>
 8003362:	69fb      	ldr	r3, [r7, #28]
 8003364:	3b03      	subs	r3, #3
 8003366:	e000      	b.n	800336a <NVIC_EncodePriority+0x32>
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800336c:	f04f 32ff 	mov.w	r2, #4294967295
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	fa02 f303 	lsl.w	r3, r2, r3
 8003376:	43da      	mvns	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	401a      	ands	r2, r3
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003380:	f04f 31ff 	mov.w	r1, #4294967295
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	fa01 f303 	lsl.w	r3, r1, r3
 800338a:	43d9      	mvns	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003390:	4313      	orrs	r3, r2
         );
}
 8003392:	4618      	mov	r0, r3
 8003394:	3724      	adds	r7, #36	; 0x24
 8003396:	46bd      	mov	sp, r7
 8003398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339c:	4770      	bx	lr
	...

080033a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033b0:	d301      	bcc.n	80033b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033b2:	2301      	movs	r3, #1
 80033b4:	e00f      	b.n	80033d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033b6:	4a0a      	ldr	r2, [pc, #40]	; (80033e0 <SysTick_Config+0x40>)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	3b01      	subs	r3, #1
 80033bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033be:	210f      	movs	r1, #15
 80033c0:	f04f 30ff 	mov.w	r0, #4294967295
 80033c4:	f7ff ff8e 	bl	80032e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033c8:	4b05      	ldr	r3, [pc, #20]	; (80033e0 <SysTick_Config+0x40>)
 80033ca:	2200      	movs	r2, #0
 80033cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ce:	4b04      	ldr	r3, [pc, #16]	; (80033e0 <SysTick_Config+0x40>)
 80033d0:	2207      	movs	r2, #7
 80033d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	e000e010 	.word	0xe000e010

080033e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b082      	sub	sp, #8
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033ec:	6878      	ldr	r0, [r7, #4]
 80033ee:	f7ff ff29 	bl	8003244 <__NVIC_SetPriorityGrouping>
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033fa:	b580      	push	{r7, lr}
 80033fc:	b086      	sub	sp, #24
 80033fe:	af00      	add	r7, sp, #0
 8003400:	4603      	mov	r3, r0
 8003402:	60b9      	str	r1, [r7, #8]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003408:	2300      	movs	r3, #0
 800340a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800340c:	f7ff ff3e 	bl	800328c <__NVIC_GetPriorityGrouping>
 8003410:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	6978      	ldr	r0, [r7, #20]
 8003418:	f7ff ff8e 	bl	8003338 <NVIC_EncodePriority>
 800341c:	4602      	mov	r2, r0
 800341e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff ff5d 	bl	80032e4 <__NVIC_SetPriority>
}
 800342a:	bf00      	nop
 800342c:	3718      	adds	r7, #24
 800342e:	46bd      	mov	sp, r7
 8003430:	bd80      	pop	{r7, pc}

08003432 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003432:	b580      	push	{r7, lr}
 8003434:	b082      	sub	sp, #8
 8003436:	af00      	add	r7, sp, #0
 8003438:	4603      	mov	r3, r0
 800343a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	4618      	mov	r0, r3
 8003442:	f7ff ff31 	bl	80032a8 <__NVIC_EnableIRQ>
}
 8003446:	bf00      	nop
 8003448:	3708      	adds	r7, #8
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800344e:	b580      	push	{r7, lr}
 8003450:	b082      	sub	sp, #8
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7ff ffa2 	bl	80033a0 <SysTick_Config>
 800345c:	4603      	mov	r3, r0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003470:	2300      	movs	r3, #0
 8003472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff fa94 	bl	80029a0 <HAL_GetTick>
 8003478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d101      	bne.n	8003484 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e099      	b.n	80035b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f022 0201 	bic.w	r2, r2, #1
 80034a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034a4:	e00f      	b.n	80034c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034a6:	f7ff fa7b 	bl	80029a0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b05      	cmp	r3, #5
 80034b2:	d908      	bls.n	80034c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2220      	movs	r2, #32
 80034b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2203      	movs	r2, #3
 80034be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e078      	b.n	80035b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1e8      	bne.n	80034a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80034dc:	697a      	ldr	r2, [r7, #20]
 80034de:	4b38      	ldr	r3, [pc, #224]	; (80035c0 <HAL_DMA_Init+0x158>)
 80034e0:	4013      	ands	r3, r2
 80034e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	691b      	ldr	r3, [r3, #16]
 80034f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	699b      	ldr	r3, [r3, #24]
 8003504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800350a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6a1b      	ldr	r3, [r3, #32]
 8003510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351c:	2b04      	cmp	r3, #4
 800351e:	d107      	bne.n	8003530 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003528:	4313      	orrs	r3, r2
 800352a:	697a      	ldr	r2, [r7, #20]
 800352c:	4313      	orrs	r3, r2
 800352e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	697a      	ldr	r2, [r7, #20]
 8003536:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	695b      	ldr	r3, [r3, #20]
 800353e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003540:	697b      	ldr	r3, [r7, #20]
 8003542:	f023 0307 	bic.w	r3, r3, #7
 8003546:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	4313      	orrs	r3, r2
 8003550:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	2b04      	cmp	r3, #4
 8003558:	d117      	bne.n	800358a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355e:	697a      	ldr	r2, [r7, #20]
 8003560:	4313      	orrs	r3, r2
 8003562:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003568:	2b00      	cmp	r3, #0
 800356a:	d00e      	beq.n	800358a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 fb01 	bl	8003b74 <DMA_CheckFifoParam>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2240      	movs	r2, #64	; 0x40
 800357c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	2201      	movs	r2, #1
 8003582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003586:	2301      	movs	r3, #1
 8003588:	e016      	b.n	80035b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fab8 	bl	8003b08 <DMA_CalcBaseAndBitshift>
 8003598:	4603      	mov	r3, r0
 800359a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a0:	223f      	movs	r2, #63	; 0x3f
 80035a2:	409a      	lsls	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035b6:	2300      	movs	r3, #0
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3718      	adds	r7, #24
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	f010803f 	.word	0xf010803f

080035c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b086      	sub	sp, #24
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
 80035d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d101      	bne.n	80035ea <HAL_DMA_Start_IT+0x26>
 80035e6:	2302      	movs	r3, #2
 80035e8:	e040      	b.n	800366c <HAL_DMA_Start_IT+0xa8>
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d12f      	bne.n	800365e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2202      	movs	r2, #2
 8003602:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2200      	movs	r2, #0
 800360a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	687a      	ldr	r2, [r7, #4]
 8003610:	68b9      	ldr	r1, [r7, #8]
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa4a 	bl	8003aac <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	223f      	movs	r2, #63	; 0x3f
 800361e:	409a      	lsls	r2, r3
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f042 0216 	orr.w	r2, r2, #22
 8003632:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003638:	2b00      	cmp	r3, #0
 800363a:	d007      	beq.n	800364c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0208 	orr.w	r2, r2, #8
 800364a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0201 	orr.w	r2, r2, #1
 800365a:	601a      	str	r2, [r3, #0]
 800365c:	e005      	b.n	800366a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003666:	2302      	movs	r3, #2
 8003668:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800366a:	7dfb      	ldrb	r3, [r7, #23]
}
 800366c:	4618      	mov	r0, r3
 800366e:	3718      	adds	r7, #24
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}

08003674 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003680:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003682:	f7ff f98d 	bl	80029a0 <HAL_GetTick>
 8003686:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800368e:	b2db      	uxtb	r3, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d008      	beq.n	80036a6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e052      	b.n	800374c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0216 	bic.w	r2, r2, #22
 80036b4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	695a      	ldr	r2, [r3, #20]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036c4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d103      	bne.n	80036d6 <HAL_DMA_Abort+0x62>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d007      	beq.n	80036e6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0208 	bic.w	r2, r2, #8
 80036e4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0201 	bic.w	r2, r2, #1
 80036f4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036f6:	e013      	b.n	8003720 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036f8:	f7ff f952 	bl	80029a0 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b05      	cmp	r3, #5
 8003704:	d90c      	bls.n	8003720 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2220      	movs	r2, #32
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2203      	movs	r2, #3
 8003710:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2200      	movs	r2, #0
 8003718:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e015      	b.n	800374c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1e4      	bne.n	80036f8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	223f      	movs	r2, #63	; 0x3f
 8003734:	409a      	lsls	r2, r3
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2201      	movs	r2, #1
 800373e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	2200      	movs	r2, #0
 8003746:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	3710      	adds	r7, #16
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}

08003754 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003762:	b2db      	uxtb	r3, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d004      	beq.n	8003772 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2280      	movs	r2, #128	; 0x80
 800376c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e00c      	b.n	800378c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2205      	movs	r2, #5
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f022 0201 	bic.w	r2, r2, #1
 8003788:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b086      	sub	sp, #24
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037a4:	4b92      	ldr	r3, [pc, #584]	; (80039f0 <HAL_DMA_IRQHandler+0x258>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a92      	ldr	r2, [pc, #584]	; (80039f4 <HAL_DMA_IRQHandler+0x25c>)
 80037aa:	fba2 2303 	umull	r2, r3, r2, r3
 80037ae:	0a9b      	lsrs	r3, r3, #10
 80037b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c2:	2208      	movs	r2, #8
 80037c4:	409a      	lsls	r2, r3
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	4013      	ands	r3, r2
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d01a      	beq.n	8003804 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0304 	and.w	r3, r3, #4
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0204 	bic.w	r2, r2, #4
 80037ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2208      	movs	r2, #8
 80037f2:	409a      	lsls	r2, r3
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037fc:	f043 0201 	orr.w	r2, r3, #1
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003808:	2201      	movs	r2, #1
 800380a:	409a      	lsls	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d012      	beq.n	800383a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800381e:	2b00      	cmp	r3, #0
 8003820:	d00b      	beq.n	800383a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003826:	2201      	movs	r2, #1
 8003828:	409a      	lsls	r2, r3
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003832:	f043 0202 	orr.w	r2, r3, #2
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800383e:	2204      	movs	r2, #4
 8003840:	409a      	lsls	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	4013      	ands	r3, r2
 8003846:	2b00      	cmp	r3, #0
 8003848:	d012      	beq.n	8003870 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0302 	and.w	r3, r3, #2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d00b      	beq.n	8003870 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800385c:	2204      	movs	r2, #4
 800385e:	409a      	lsls	r2, r3
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003868:	f043 0204 	orr.w	r2, r3, #4
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003874:	2210      	movs	r2, #16
 8003876:	409a      	lsls	r2, r3
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	d043      	beq.n	8003908 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d03c      	beq.n	8003908 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003892:	2210      	movs	r2, #16
 8003894:	409a      	lsls	r2, r3
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d018      	beq.n	80038da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d108      	bne.n	80038c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d024      	beq.n	8003908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	4798      	blx	r3
 80038c6:	e01f      	b.n	8003908 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d01b      	beq.n	8003908 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
 80038d8:	e016      	b.n	8003908 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d107      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f022 0208 	bic.w	r2, r2, #8
 80038f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d003      	beq.n	8003908 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800390c:	2220      	movs	r2, #32
 800390e:	409a      	lsls	r2, r3
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	4013      	ands	r3, r2
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 808e 	beq.w	8003a36 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 0310 	and.w	r3, r3, #16
 8003924:	2b00      	cmp	r3, #0
 8003926:	f000 8086 	beq.w	8003a36 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392e:	2220      	movs	r2, #32
 8003930:	409a      	lsls	r2, r3
 8003932:	693b      	ldr	r3, [r7, #16]
 8003934:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800393c:	b2db      	uxtb	r3, r3
 800393e:	2b05      	cmp	r3, #5
 8003940:	d136      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0216 	bic.w	r2, r2, #22
 8003950:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	695a      	ldr	r2, [r3, #20]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003960:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003966:	2b00      	cmp	r3, #0
 8003968:	d103      	bne.n	8003972 <HAL_DMA_IRQHandler+0x1da>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	2b00      	cmp	r3, #0
 8003970:	d007      	beq.n	8003982 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0208 	bic.w	r2, r2, #8
 8003980:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003986:	223f      	movs	r2, #63	; 0x3f
 8003988:	409a      	lsls	r2, r3
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2201      	movs	r2, #1
 8003992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d07d      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
        }
        return;
 80039ae:	e078      	b.n	8003aa2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01c      	beq.n	80039f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d108      	bne.n	80039de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d030      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	4798      	blx	r3
 80039dc:	e02b      	b.n	8003a36 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d027      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	4798      	blx	r3
 80039ee:	e022      	b.n	8003a36 <HAL_DMA_IRQHandler+0x29e>
 80039f0:	20000000 	.word	0x20000000
 80039f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d10f      	bne.n	8003a26 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f022 0210 	bic.w	r2, r2, #16
 8003a14:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2200      	movs	r2, #0
 8003a22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d003      	beq.n	8003a36 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a32:	6878      	ldr	r0, [r7, #4]
 8003a34:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d032      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d022      	beq.n	8003a90 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2205      	movs	r2, #5
 8003a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f022 0201 	bic.w	r2, r2, #1
 8003a60:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3301      	adds	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d307      	bcc.n	8003a7e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 0301 	and.w	r3, r3, #1
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1f2      	bne.n	8003a62 <HAL_DMA_IRQHandler+0x2ca>
 8003a7c:	e000      	b.n	8003a80 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a7e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d005      	beq.n	8003aa4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	4798      	blx	r3
 8003aa0:	e000      	b.n	8003aa4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003aa2:	bf00      	nop
    }
  }
}
 8003aa4:	3718      	adds	r7, #24
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}
 8003aaa:	bf00      	nop

08003aac <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b085      	sub	sp, #20
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	681a      	ldr	r2, [r3, #0]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003ac8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	683a      	ldr	r2, [r7, #0]
 8003ad0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	2b40      	cmp	r3, #64	; 0x40
 8003ad8:	d108      	bne.n	8003aec <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	687a      	ldr	r2, [r7, #4]
 8003ae0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003aea:	e007      	b.n	8003afc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68ba      	ldr	r2, [r7, #8]
 8003af2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]
}
 8003afc:	bf00      	nop
 8003afe:	3714      	adds	r7, #20
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b085      	sub	sp, #20
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	3b10      	subs	r3, #16
 8003b18:	4a14      	ldr	r2, [pc, #80]	; (8003b6c <DMA_CalcBaseAndBitshift+0x64>)
 8003b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b1e:	091b      	lsrs	r3, r3, #4
 8003b20:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b22:	4a13      	ldr	r2, [pc, #76]	; (8003b70 <DMA_CalcBaseAndBitshift+0x68>)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	4413      	add	r3, r2
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b03      	cmp	r3, #3
 8003b34:	d909      	bls.n	8003b4a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	1d1a      	adds	r2, r3, #4
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
 8003b48:	e007      	b.n	8003b5a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b52:	f023 0303 	bic.w	r3, r3, #3
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3714      	adds	r7, #20
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	aaaaaaab 	.word	0xaaaaaaab
 8003b70:	0800bca4 	.word	0x0800bca4

08003b74 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b84:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11f      	bne.n	8003bce <DMA_CheckFifoParam+0x5a>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b03      	cmp	r3, #3
 8003b92:	d856      	bhi.n	8003c42 <DMA_CheckFifoParam+0xce>
 8003b94:	a201      	add	r2, pc, #4	; (adr r2, 8003b9c <DMA_CheckFifoParam+0x28>)
 8003b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b9a:	bf00      	nop
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbf 	.word	0x08003bbf
 8003ba4:	08003bad 	.word	0x08003bad
 8003ba8:	08003c43 	.word	0x08003c43
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d046      	beq.n	8003c46 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bb8:	2301      	movs	r3, #1
 8003bba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bbc:	e043      	b.n	8003c46 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bc6:	d140      	bne.n	8003c4a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003bc8:	2301      	movs	r3, #1
 8003bca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bcc:	e03d      	b.n	8003c4a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd6:	d121      	bne.n	8003c1c <DMA_CheckFifoParam+0xa8>
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	2b03      	cmp	r3, #3
 8003bdc:	d837      	bhi.n	8003c4e <DMA_CheckFifoParam+0xda>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <DMA_CheckFifoParam+0x70>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003bfb 	.word	0x08003bfb
 8003bec:	08003bf5 	.word	0x08003bf5
 8003bf0:	08003c0d 	.word	0x08003c0d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bf8:	e030      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d025      	beq.n	8003c52 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c0a:	e022      	b.n	8003c52 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c10:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c14:	d11f      	bne.n	8003c56 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c1a:	e01c      	b.n	8003c56 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d903      	bls.n	8003c2a <DMA_CheckFifoParam+0xb6>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	2b03      	cmp	r3, #3
 8003c26:	d003      	beq.n	8003c30 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c28:	e018      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2e:	e015      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00e      	beq.n	8003c5a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e00b      	b.n	8003c5a <DMA_CheckFifoParam+0xe6>
      break;
 8003c42:	bf00      	nop
 8003c44:	e00a      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;
 8003c46:	bf00      	nop
 8003c48:	e008      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;
 8003c4a:	bf00      	nop
 8003c4c:	e006      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;
 8003c4e:	bf00      	nop
 8003c50:	e004      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;
 8003c52:	bf00      	nop
 8003c54:	e002      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;   
 8003c56:	bf00      	nop
 8003c58:	e000      	b.n	8003c5c <DMA_CheckFifoParam+0xe8>
      break;
 8003c5a:	bf00      	nop
    }
  } 
  
  return status; 
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr
 8003c6a:	bf00      	nop

08003c6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b089      	sub	sp, #36	; 0x24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c76:	2300      	movs	r3, #0
 8003c78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c82:	2300      	movs	r3, #0
 8003c84:	61fb      	str	r3, [r7, #28]
 8003c86:	e177      	b.n	8003f78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c88:	2201      	movs	r2, #1
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	f040 8166 	bne.w	8003f72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d005      	beq.n	8003cbe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cba:	2b02      	cmp	r3, #2
 8003cbc:	d130      	bne.n	8003d20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	005b      	lsls	r3, r3, #1
 8003cc8:	2203      	movs	r2, #3
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	69ba      	ldr	r2, [r7, #24]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	69fb      	ldr	r3, [r7, #28]
 8003cdc:	005b      	lsls	r3, r3, #1
 8003cde:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce2:	69ba      	ldr	r2, [r7, #24]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	69ba      	ldr	r2, [r7, #24]
 8003cec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	43db      	mvns	r3, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	4013      	ands	r3, r2
 8003d02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	091b      	lsrs	r3, r3, #4
 8003d0a:	f003 0201 	and.w	r2, r3, #1
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	fa02 f303 	lsl.w	r3, r2, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	69ba      	ldr	r2, [r7, #24]
 8003d1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f003 0303 	and.w	r3, r3, #3
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d017      	beq.n	8003d5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	2203      	movs	r2, #3
 8003d38:	fa02 f303 	lsl.w	r3, r2, r3
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	005b      	lsls	r3, r3, #1
 8003d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4313      	orrs	r3, r2
 8003d54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	f003 0303 	and.w	r3, r3, #3
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d123      	bne.n	8003db0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	08da      	lsrs	r2, r3, #3
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	3208      	adds	r2, #8
 8003d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f003 0307 	and.w	r3, r3, #7
 8003d7c:	009b      	lsls	r3, r3, #2
 8003d7e:	220f      	movs	r2, #15
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691a      	ldr	r2, [r3, #16]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0307 	and.w	r3, r3, #7
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	08da      	lsrs	r2, r3, #3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	3208      	adds	r2, #8
 8003daa:	69b9      	ldr	r1, [r7, #24]
 8003dac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc0:	43db      	mvns	r3, r3
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	f003 0203 	and.w	r2, r3, #3
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd8:	69ba      	ldr	r2, [r7, #24]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	f000 80c0 	beq.w	8003f72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	60fb      	str	r3, [r7, #12]
 8003df6:	4b66      	ldr	r3, [pc, #408]	; (8003f90 <HAL_GPIO_Init+0x324>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	4a65      	ldr	r2, [pc, #404]	; (8003f90 <HAL_GPIO_Init+0x324>)
 8003dfc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e00:	6453      	str	r3, [r2, #68]	; 0x44
 8003e02:	4b63      	ldr	r3, [pc, #396]	; (8003f90 <HAL_GPIO_Init+0x324>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e0a:	60fb      	str	r3, [r7, #12]
 8003e0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e0e:	4a61      	ldr	r2, [pc, #388]	; (8003f94 <HAL_GPIO_Init+0x328>)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	089b      	lsrs	r3, r3, #2
 8003e14:	3302      	adds	r3, #2
 8003e16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e1c:	69fb      	ldr	r3, [r7, #28]
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	220f      	movs	r2, #15
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43db      	mvns	r3, r3
 8003e2c:	69ba      	ldr	r2, [r7, #24]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a58      	ldr	r2, [pc, #352]	; (8003f98 <HAL_GPIO_Init+0x32c>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d037      	beq.n	8003eaa <HAL_GPIO_Init+0x23e>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a57      	ldr	r2, [pc, #348]	; (8003f9c <HAL_GPIO_Init+0x330>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d031      	beq.n	8003ea6 <HAL_GPIO_Init+0x23a>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4a56      	ldr	r2, [pc, #344]	; (8003fa0 <HAL_GPIO_Init+0x334>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d02b      	beq.n	8003ea2 <HAL_GPIO_Init+0x236>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_GPIO_Init+0x338>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d025      	beq.n	8003e9e <HAL_GPIO_Init+0x232>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	4a54      	ldr	r2, [pc, #336]	; (8003fa8 <HAL_GPIO_Init+0x33c>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d01f      	beq.n	8003e9a <HAL_GPIO_Init+0x22e>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	4a53      	ldr	r2, [pc, #332]	; (8003fac <HAL_GPIO_Init+0x340>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d019      	beq.n	8003e96 <HAL_GPIO_Init+0x22a>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4a52      	ldr	r2, [pc, #328]	; (8003fb0 <HAL_GPIO_Init+0x344>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d013      	beq.n	8003e92 <HAL_GPIO_Init+0x226>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a51      	ldr	r2, [pc, #324]	; (8003fb4 <HAL_GPIO_Init+0x348>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d00d      	beq.n	8003e8e <HAL_GPIO_Init+0x222>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a50      	ldr	r2, [pc, #320]	; (8003fb8 <HAL_GPIO_Init+0x34c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d007      	beq.n	8003e8a <HAL_GPIO_Init+0x21e>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a4f      	ldr	r2, [pc, #316]	; (8003fbc <HAL_GPIO_Init+0x350>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d101      	bne.n	8003e86 <HAL_GPIO_Init+0x21a>
 8003e82:	2309      	movs	r3, #9
 8003e84:	e012      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e86:	230a      	movs	r3, #10
 8003e88:	e010      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e8a:	2308      	movs	r3, #8
 8003e8c:	e00e      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e8e:	2307      	movs	r3, #7
 8003e90:	e00c      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e92:	2306      	movs	r3, #6
 8003e94:	e00a      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e96:	2305      	movs	r3, #5
 8003e98:	e008      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e9a:	2304      	movs	r3, #4
 8003e9c:	e006      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e004      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	e002      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <HAL_GPIO_Init+0x240>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	69fa      	ldr	r2, [r7, #28]
 8003eae:	f002 0203 	and.w	r2, r2, #3
 8003eb2:	0092      	lsls	r2, r2, #2
 8003eb4:	4093      	lsls	r3, r2
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ebc:	4935      	ldr	r1, [pc, #212]	; (8003f94 <HAL_GPIO_Init+0x328>)
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	089b      	lsrs	r3, r3, #2
 8003ec2:	3302      	adds	r3, #2
 8003ec4:	69ba      	ldr	r2, [r7, #24]
 8003ec6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003eca:	4b3d      	ldr	r3, [pc, #244]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ed0:	693b      	ldr	r3, [r7, #16]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	69ba      	ldr	r2, [r7, #24]
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eee:	4a34      	ldr	r2, [pc, #208]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003ef4:	4b32      	ldr	r3, [pc, #200]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	43db      	mvns	r3, r3
 8003efe:	69ba      	ldr	r2, [r7, #24]
 8003f00:	4013      	ands	r3, r2
 8003f02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d003      	beq.n	8003f18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003f10:	69ba      	ldr	r2, [r7, #24]
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f18:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f1e:	4b28      	ldr	r3, [pc, #160]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d003      	beq.n	8003f42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f42:	4a1f      	ldr	r2, [pc, #124]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f48:	4b1d      	ldr	r3, [pc, #116]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	43db      	mvns	r3, r3
 8003f52:	69ba      	ldr	r2, [r7, #24]
 8003f54:	4013      	ands	r3, r2
 8003f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d003      	beq.n	8003f6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f6c:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_GPIO_Init+0x354>)
 8003f6e:	69bb      	ldr	r3, [r7, #24]
 8003f70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f72:	69fb      	ldr	r3, [r7, #28]
 8003f74:	3301      	adds	r3, #1
 8003f76:	61fb      	str	r3, [r7, #28]
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	2b0f      	cmp	r3, #15
 8003f7c:	f67f ae84 	bls.w	8003c88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	3724      	adds	r7, #36	; 0x24
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40013800 	.word	0x40013800
 8003f98:	40020000 	.word	0x40020000
 8003f9c:	40020400 	.word	0x40020400
 8003fa0:	40020800 	.word	0x40020800
 8003fa4:	40020c00 	.word	0x40020c00
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	40021400 	.word	0x40021400
 8003fb0:	40021800 	.word	0x40021800
 8003fb4:	40021c00 	.word	0x40021c00
 8003fb8:	40022000 	.word	0x40022000
 8003fbc:	40022400 	.word	0x40022400
 8003fc0:	40013c00 	.word	0x40013c00

08003fc4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b085      	sub	sp, #20
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
 8003fcc:	460b      	mov	r3, r1
 8003fce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	887b      	ldrh	r3, [r7, #2]
 8003fd6:	4013      	ands	r3, r2
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d002      	beq.n	8003fe2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
 8003fe0:	e001      	b.n	8003fe6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3714      	adds	r7, #20
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	807b      	strh	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004004:	787b      	ldrb	r3, [r7, #1]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800400a:	887a      	ldrh	r2, [r7, #2]
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004010:	e003      	b.n	800401a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004012:	887b      	ldrh	r3, [r7, #2]
 8004014:	041a      	lsls	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	619a      	str	r2, [r3, #24]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	4603      	mov	r3, r0
 8004030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004032:	4b08      	ldr	r3, [pc, #32]	; (8004054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004034:	695a      	ldr	r2, [r3, #20]
 8004036:	88fb      	ldrh	r3, [r7, #6]
 8004038:	4013      	ands	r3, r2
 800403a:	2b00      	cmp	r3, #0
 800403c:	d006      	beq.n	800404c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800403e:	4a05      	ldr	r2, [pc, #20]	; (8004054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004040:	88fb      	ldrh	r3, [r7, #6]
 8004042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004044:	88fb      	ldrh	r3, [r7, #6]
 8004046:	4618      	mov	r0, r3
 8004048:	f7fd fe20 	bl	8001c8c <HAL_GPIO_EXTI_Callback>
  }
}
 800404c:	bf00      	nop
 800404e:	3708      	adds	r7, #8
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40013c00 	.word	0x40013c00

08004058 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b084      	sub	sp, #16
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d101      	bne.n	800406a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	e12b      	b.n	80042c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004070:	b2db      	uxtb	r3, r3
 8004072:	2b00      	cmp	r3, #0
 8004074:	d106      	bne.n	8004084 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f7fd fad6 	bl	8001630 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2224      	movs	r2, #36	; 0x24
 8004088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f022 0201 	bic.w	r2, r2, #1
 800409a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	681a      	ldr	r2, [r3, #0]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80040aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80040ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80040bc:	f001 f92e 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 80040c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	4a81      	ldr	r2, [pc, #516]	; (80042cc <HAL_I2C_Init+0x274>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d807      	bhi.n	80040dc <HAL_I2C_Init+0x84>
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	4a80      	ldr	r2, [pc, #512]	; (80042d0 <HAL_I2C_Init+0x278>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	bf94      	ite	ls
 80040d4:	2301      	movls	r3, #1
 80040d6:	2300      	movhi	r3, #0
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	e006      	b.n	80040ea <HAL_I2C_Init+0x92>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4a7d      	ldr	r2, [pc, #500]	; (80042d4 <HAL_I2C_Init+0x27c>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	bf94      	ite	ls
 80040e4:	2301      	movls	r3, #1
 80040e6:	2300      	movhi	r3, #0
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d001      	beq.n	80040f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ee:	2301      	movs	r3, #1
 80040f0:	e0e7      	b.n	80042c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	4a78      	ldr	r2, [pc, #480]	; (80042d8 <HAL_I2C_Init+0x280>)
 80040f6:	fba2 2303 	umull	r2, r3, r2, r3
 80040fa:	0c9b      	lsrs	r3, r3, #18
 80040fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	430a      	orrs	r2, r1
 8004110:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a1b      	ldr	r3, [r3, #32]
 8004118:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	4a6a      	ldr	r2, [pc, #424]	; (80042cc <HAL_I2C_Init+0x274>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d802      	bhi.n	800412c <HAL_I2C_Init+0xd4>
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3301      	adds	r3, #1
 800412a:	e009      	b.n	8004140 <HAL_I2C_Init+0xe8>
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004132:	fb02 f303 	mul.w	r3, r2, r3
 8004136:	4a69      	ldr	r2, [pc, #420]	; (80042dc <HAL_I2C_Init+0x284>)
 8004138:	fba2 2303 	umull	r2, r3, r2, r3
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	3301      	adds	r3, #1
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6812      	ldr	r2, [r2, #0]
 8004144:	430b      	orrs	r3, r1
 8004146:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004152:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	495c      	ldr	r1, [pc, #368]	; (80042cc <HAL_I2C_Init+0x274>)
 800415c:	428b      	cmp	r3, r1
 800415e:	d819      	bhi.n	8004194 <HAL_I2C_Init+0x13c>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	1e59      	subs	r1, r3, #1
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	005b      	lsls	r3, r3, #1
 800416a:	fbb1 f3f3 	udiv	r3, r1, r3
 800416e:	1c59      	adds	r1, r3, #1
 8004170:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004174:	400b      	ands	r3, r1
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_I2C_Init+0x138>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	1e59      	subs	r1, r3, #1
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	005b      	lsls	r3, r3, #1
 8004184:	fbb1 f3f3 	udiv	r3, r1, r3
 8004188:	3301      	adds	r3, #1
 800418a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418e:	e051      	b.n	8004234 <HAL_I2C_Init+0x1dc>
 8004190:	2304      	movs	r3, #4
 8004192:	e04f      	b.n	8004234 <HAL_I2C_Init+0x1dc>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d111      	bne.n	80041c0 <HAL_I2C_Init+0x168>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	1e58      	subs	r0, r3, #1
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6859      	ldr	r1, [r3, #4]
 80041a4:	460b      	mov	r3, r1
 80041a6:	005b      	lsls	r3, r3, #1
 80041a8:	440b      	add	r3, r1
 80041aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80041ae:	3301      	adds	r3, #1
 80041b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	bf0c      	ite	eq
 80041b8:	2301      	moveq	r3, #1
 80041ba:	2300      	movne	r3, #0
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	e012      	b.n	80041e6 <HAL_I2C_Init+0x18e>
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	1e58      	subs	r0, r3, #1
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6859      	ldr	r1, [r3, #4]
 80041c8:	460b      	mov	r3, r1
 80041ca:	009b      	lsls	r3, r3, #2
 80041cc:	440b      	add	r3, r1
 80041ce:	0099      	lsls	r1, r3, #2
 80041d0:	440b      	add	r3, r1
 80041d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d6:	3301      	adds	r3, #1
 80041d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041dc:	2b00      	cmp	r3, #0
 80041de:	bf0c      	ite	eq
 80041e0:	2301      	moveq	r3, #1
 80041e2:	2300      	movne	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_I2C_Init+0x196>
 80041ea:	2301      	movs	r3, #1
 80041ec:	e022      	b.n	8004234 <HAL_I2C_Init+0x1dc>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10e      	bne.n	8004214 <HAL_I2C_Init+0x1bc>
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	1e58      	subs	r0, r3, #1
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	460b      	mov	r3, r1
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	440b      	add	r3, r1
 8004204:	fbb0 f3f3 	udiv	r3, r0, r3
 8004208:	3301      	adds	r3, #1
 800420a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800420e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004212:	e00f      	b.n	8004234 <HAL_I2C_Init+0x1dc>
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	1e58      	subs	r0, r3, #1
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6859      	ldr	r1, [r3, #4]
 800421c:	460b      	mov	r3, r1
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	0099      	lsls	r1, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	fbb0 f3f3 	udiv	r3, r0, r3
 800422a:	3301      	adds	r3, #1
 800422c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004230:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004234:	6879      	ldr	r1, [r7, #4]
 8004236:	6809      	ldr	r1, [r1, #0]
 8004238:	4313      	orrs	r3, r2
 800423a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69da      	ldr	r2, [r3, #28]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	431a      	orrs	r2, r3
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	430a      	orrs	r2, r1
 8004256:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004262:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	6911      	ldr	r1, [r2, #16]
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	68d2      	ldr	r2, [r2, #12]
 800426e:	4311      	orrs	r1, r2
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	6812      	ldr	r2, [r2, #0]
 8004274:	430b      	orrs	r3, r1
 8004276:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	695a      	ldr	r2, [r3, #20]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	699b      	ldr	r3, [r3, #24]
 800428a:	431a      	orrs	r2, r3
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	430a      	orrs	r2, r1
 8004292:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2220      	movs	r2, #32
 80042ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3710      	adds	r7, #16
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	000186a0 	.word	0x000186a0
 80042d0:	001e847f 	.word	0x001e847f
 80042d4:	003d08ff 	.word	0x003d08ff
 80042d8:	431bde83 	.word	0x431bde83
 80042dc:	10624dd3 	.word	0x10624dd3

080042e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	607a      	str	r2, [r7, #4]
 80042ea:	461a      	mov	r2, r3
 80042ec:	460b      	mov	r3, r1
 80042ee:	817b      	strh	r3, [r7, #10]
 80042f0:	4613      	mov	r3, r2
 80042f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042f4:	f7fe fb54 	bl	80029a0 <HAL_GetTick>
 80042f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b20      	cmp	r3, #32
 8004304:	f040 80e0 	bne.w	80044c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	9300      	str	r3, [sp, #0]
 800430c:	2319      	movs	r3, #25
 800430e:	2201      	movs	r2, #1
 8004310:	4970      	ldr	r1, [pc, #448]	; (80044d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8004312:	68f8      	ldr	r0, [r7, #12]
 8004314:	f000 f964 	bl	80045e0 <I2C_WaitOnFlagUntilTimeout>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d001      	beq.n	8004322 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800431e:	2302      	movs	r3, #2
 8004320:	e0d3      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004328:	2b01      	cmp	r3, #1
 800432a:	d101      	bne.n	8004330 <HAL_I2C_Master_Transmit+0x50>
 800432c:	2302      	movs	r3, #2
 800432e:	e0cc      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b01      	cmp	r3, #1
 8004344:	d007      	beq.n	8004356 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f042 0201 	orr.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681a      	ldr	r2, [r3, #0]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004364:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2221      	movs	r2, #33	; 0x21
 800436a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	2210      	movs	r2, #16
 8004372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	2200      	movs	r2, #0
 800437a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	687a      	ldr	r2, [r7, #4]
 8004380:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	893a      	ldrh	r2, [r7, #8]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800438c:	b29a      	uxth	r2, r3
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	4a50      	ldr	r2, [pc, #320]	; (80044d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8004396:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004398:	8979      	ldrh	r1, [r7, #10]
 800439a:	697b      	ldr	r3, [r7, #20]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f000 f89c 	bl	80044dc <I2C_MasterRequestWrite>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d001      	beq.n	80043ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e08d      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ae:	2300      	movs	r3, #0
 80043b0:	613b      	str	r3, [r7, #16]
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	695b      	ldr	r3, [r3, #20]
 80043b8:	613b      	str	r3, [r7, #16]
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	699b      	ldr	r3, [r3, #24]
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80043c4:	e066      	b.n	8004494 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	6a39      	ldr	r1, [r7, #32]
 80043ca:	68f8      	ldr	r0, [r7, #12]
 80043cc:	f000 f9de 	bl	800478c <I2C_WaitOnTXEFlagUntilTimeout>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d00d      	beq.n	80043f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043da:	2b04      	cmp	r3, #4
 80043dc:	d107      	bne.n	80043ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e06b      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f6:	781a      	ldrb	r2, [r3, #0]
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800440c:	b29b      	uxth	r3, r3
 800440e:	3b01      	subs	r3, #1
 8004410:	b29a      	uxth	r2, r3
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800441a:	3b01      	subs	r3, #1
 800441c:	b29a      	uxth	r2, r3
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	f003 0304 	and.w	r3, r3, #4
 800442c:	2b04      	cmp	r3, #4
 800442e:	d11b      	bne.n	8004468 <HAL_I2C_Master_Transmit+0x188>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004434:	2b00      	cmp	r3, #0
 8004436:	d017      	beq.n	8004468 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800443c:	781a      	ldrb	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004448:	1c5a      	adds	r2, r3, #1
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004452:	b29b      	uxth	r3, r3
 8004454:	3b01      	subs	r3, #1
 8004456:	b29a      	uxth	r2, r3
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004460:	3b01      	subs	r3, #1
 8004462:	b29a      	uxth	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	6a39      	ldr	r1, [r7, #32]
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 f9ce 	bl	800480e <I2C_WaitOnBTFFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d00d      	beq.n	8004494 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	2b04      	cmp	r3, #4
 800447e:	d107      	bne.n	8004490 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e01a      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d194      	bne.n	80043c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	2220      	movs	r2, #32
 80044b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3718      	adds	r7, #24
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	00100002 	.word	0x00100002
 80044d8:	ffff0000 	.word	0xffff0000

080044dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af02      	add	r7, sp, #8
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	607a      	str	r2, [r7, #4]
 80044e6:	603b      	str	r3, [r7, #0]
 80044e8:	460b      	mov	r3, r1
 80044ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	2b08      	cmp	r3, #8
 80044f6:	d006      	beq.n	8004506 <I2C_MasterRequestWrite+0x2a>
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d003      	beq.n	8004506 <I2C_MasterRequestWrite+0x2a>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004504:	d108      	bne.n	8004518 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004514:	601a      	str	r2, [r3, #0]
 8004516:	e00b      	b.n	8004530 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800451c:	2b12      	cmp	r3, #18
 800451e:	d107      	bne.n	8004530 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	9300      	str	r3, [sp, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f000 f84f 	bl	80045e0 <I2C_WaitOnFlagUntilTimeout>
 8004542:	4603      	mov	r3, r0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00d      	beq.n	8004564 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004552:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004556:	d103      	bne.n	8004560 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800455e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e035      	b.n	80045d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	691b      	ldr	r3, [r3, #16]
 8004568:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800456c:	d108      	bne.n	8004580 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800456e:	897b      	ldrh	r3, [r7, #10]
 8004570:	b2db      	uxtb	r3, r3
 8004572:	461a      	mov	r2, r3
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800457c:	611a      	str	r2, [r3, #16]
 800457e:	e01b      	b.n	80045b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004580:	897b      	ldrh	r3, [r7, #10]
 8004582:	11db      	asrs	r3, r3, #7
 8004584:	b2db      	uxtb	r3, r3
 8004586:	f003 0306 	and.w	r3, r3, #6
 800458a:	b2db      	uxtb	r3, r3
 800458c:	f063 030f 	orn	r3, r3, #15
 8004590:	b2da      	uxtb	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	490e      	ldr	r1, [pc, #56]	; (80045d8 <I2C_MasterRequestWrite+0xfc>)
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f875 	bl	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045a4:	4603      	mov	r3, r0
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d001      	beq.n	80045ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045aa:	2301      	movs	r3, #1
 80045ac:	e010      	b.n	80045d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045ae:	897b      	ldrh	r3, [r7, #10]
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	4907      	ldr	r1, [pc, #28]	; (80045dc <I2C_MasterRequestWrite+0x100>)
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f865 	bl	800468e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e000      	b.n	80045d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}
 80045d8:	00010008 	.word	0x00010008
 80045dc:	00010002 	.word	0x00010002

080045e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b084      	sub	sp, #16
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045f0:	e025      	b.n	800463e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d021      	beq.n	800463e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe f9d1 	bl	80029a0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	69bb      	ldr	r3, [r7, #24]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	683a      	ldr	r2, [r7, #0]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnFlagUntilTimeout+0x30>
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e023      	b.n	8004686 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	0c1b      	lsrs	r3, r3, #16
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10d      	bne.n	8004664 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	695b      	ldr	r3, [r3, #20]
 800464e:	43da      	mvns	r2, r3
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	4013      	ands	r3, r2
 8004654:	b29b      	uxth	r3, r3
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf0c      	ite	eq
 800465a:	2301      	moveq	r3, #1
 800465c:	2300      	movne	r3, #0
 800465e:	b2db      	uxtb	r3, r3
 8004660:	461a      	mov	r2, r3
 8004662:	e00c      	b.n	800467e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699b      	ldr	r3, [r3, #24]
 800466a:	43da      	mvns	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4013      	ands	r3, r2
 8004670:	b29b      	uxth	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2db      	uxtb	r3, r3
 800467c:	461a      	mov	r2, r3
 800467e:	79fb      	ldrb	r3, [r7, #7]
 8004680:	429a      	cmp	r2, r3
 8004682:	d0b6      	beq.n	80045f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b084      	sub	sp, #16
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	607a      	str	r2, [r7, #4]
 800469a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800469c:	e051      	b.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	695b      	ldr	r3, [r3, #20]
 80046a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ac:	d123      	bne.n	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	f043 0204 	orr.w	r2, r3, #4
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e046      	b.n	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046fc:	d021      	beq.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046fe:	f7fe f94f 	bl	80029a0 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	429a      	cmp	r2, r3
 800470c:	d302      	bcc.n	8004714 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d116      	bne.n	8004742 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2200      	movs	r2, #0
 8004718:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	2220      	movs	r2, #32
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	2200      	movs	r2, #0
 800473a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e020      	b.n	8004784 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	d10c      	bne.n	8004766 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e00b      	b.n	800477e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	43da      	mvns	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	4013      	ands	r3, r2
 8004772:	b29b      	uxth	r3, r3
 8004774:	2b00      	cmp	r3, #0
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	2b00      	cmp	r3, #0
 8004780:	d18d      	bne.n	800469e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3710      	adds	r7, #16
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}

0800478c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004798:	e02d      	b.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 f878 	bl	8004890 <I2C_IsAcknowledgeFailed>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e02d      	b.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b0:	d021      	beq.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047b2:	f7fe f8f5 	bl	80029a0 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	429a      	cmp	r2, r3
 80047c0:	d302      	bcc.n	80047c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d116      	bne.n	80047f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e2:	f043 0220 	orr.w	r2, r3, #32
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	2200      	movs	r2, #0
 80047ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e007      	b.n	8004806 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004800:	2b80      	cmp	r3, #128	; 0x80
 8004802:	d1ca      	bne.n	800479a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	60f8      	str	r0, [r7, #12]
 8004816:	60b9      	str	r1, [r7, #8]
 8004818:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800481a:	e02d      	b.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800481c:	68f8      	ldr	r0, [r7, #12]
 800481e:	f000 f837 	bl	8004890 <I2C_IsAcknowledgeFailed>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d001      	beq.n	800482c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004828:	2301      	movs	r3, #1
 800482a:	e02d      	b.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004832:	d021      	beq.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004834:	f7fe f8b4 	bl	80029a0 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	d302      	bcc.n	800484a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d116      	bne.n	8004878 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004864:	f043 0220 	orr.w	r2, r3, #32
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e007      	b.n	8004888 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	f003 0304 	and.w	r3, r3, #4
 8004882:	2b04      	cmp	r3, #4
 8004884:	d1ca      	bne.n	800481c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}

08004890 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048a6:	d11b      	bne.n	80048e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80048b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2220      	movs	r2, #32
 80048bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048cc:	f043 0204 	orr.w	r2, r3, #4
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e000      	b.n	80048e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80048ee:	b480      	push	{r7}
 80048f0:	b083      	sub	sp, #12
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048fe:	b2db      	uxtb	r3, r3
 8004900:	2b20      	cmp	r3, #32
 8004902:	d129      	bne.n	8004958 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2224      	movs	r2, #36	; 0x24
 8004908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f022 0201 	bic.w	r2, r2, #1
 800491a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0210 	bic.w	r2, r2, #16
 800492a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	430a      	orrs	r2, r1
 800493a:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f042 0201 	orr.w	r2, r2, #1
 800494a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	e000      	b.n	800495a <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004958:	2302      	movs	r3, #2
  }
}
 800495a:	4618      	mov	r0, r3
 800495c:	370c      	adds	r7, #12
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr

08004966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004966:	b480      	push	{r7}
 8004968:	b085      	sub	sp, #20
 800496a:	af00      	add	r7, sp, #0
 800496c:	6078      	str	r0, [r7, #4]
 800496e:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004970:	2300      	movs	r3, #0
 8004972:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800497a:	b2db      	uxtb	r3, r3
 800497c:	2b20      	cmp	r3, #32
 800497e:	d12a      	bne.n	80049d6 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2224      	movs	r2, #36	; 0x24
 8004984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f022 0201 	bic.w	r2, r2, #1
 8004996:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80049a0:	89fb      	ldrh	r3, [r7, #14]
 80049a2:	f023 030f 	bic.w	r3, r3, #15
 80049a6:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	b29a      	uxth	r2, r3
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	89fa      	ldrh	r2, [r7, #14]
 80049b8:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f042 0201 	orr.w	r2, r2, #1
 80049c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	e000      	b.n	80049d8 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80049d6:	2302      	movs	r3, #2
  }
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3714      	adds	r7, #20
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	b082      	sub	sp, #8
 80049e8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80049ea:	2300      	movs	r3, #0
 80049ec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80049ee:	2300      	movs	r3, #0
 80049f0:	603b      	str	r3, [r7, #0]
 80049f2:	4b20      	ldr	r3, [pc, #128]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x90>)
 80049f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f6:	4a1f      	ldr	r2, [pc, #124]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x90>)
 80049f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049fc:	6413      	str	r3, [r2, #64]	; 0x40
 80049fe:	4b1d      	ldr	r3, [pc, #116]	; (8004a74 <HAL_PWREx_EnableOverDrive+0x90>)
 8004a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a06:	603b      	str	r3, [r7, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a0a:	4b1b      	ldr	r3, [pc, #108]	; (8004a78 <HAL_PWREx_EnableOverDrive+0x94>)
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a10:	f7fd ffc6 	bl	80029a0 <HAL_GetTick>
 8004a14:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a16:	e009      	b.n	8004a2c <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a18:	f7fd ffc2 	bl	80029a0 <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a26:	d901      	bls.n	8004a2c <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8004a28:	2303      	movs	r3, #3
 8004a2a:	e01f      	b.n	8004a6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a2c:	4b13      	ldr	r3, [pc, #76]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x98>)
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a38:	d1ee      	bne.n	8004a18 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a3a:	4b11      	ldr	r3, [pc, #68]	; (8004a80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a3c:	2201      	movs	r2, #1
 8004a3e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a40:	f7fd ffae 	bl	80029a0 <HAL_GetTick>
 8004a44:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a46:	e009      	b.n	8004a5c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a48:	f7fd ffaa 	bl	80029a0 <HAL_GetTick>
 8004a4c:	4602      	mov	r2, r0
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	1ad3      	subs	r3, r2, r3
 8004a52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a56:	d901      	bls.n	8004a5c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004a58:	2303      	movs	r3, #3
 8004a5a:	e007      	b.n	8004a6c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a5c:	4b07      	ldr	r3, [pc, #28]	; (8004a7c <HAL_PWREx_EnableOverDrive+0x98>)
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a68:	d1ee      	bne.n	8004a48 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3708      	adds	r7, #8
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}
 8004a74:	40023800 	.word	0x40023800
 8004a78:	420e0040 	.word	0x420e0040
 8004a7c:	40007000 	.word	0x40007000
 8004a80:	420e0044 	.word	0x420e0044

08004a84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b086      	sub	sp, #24
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d101      	bne.n	8004a96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e264      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 0301 	and.w	r3, r3, #1
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d075      	beq.n	8004b8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004aa2:	4ba3      	ldr	r3, [pc, #652]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f003 030c 	and.w	r3, r3, #12
 8004aaa:	2b04      	cmp	r3, #4
 8004aac:	d00c      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aae:	4ba0      	ldr	r3, [pc, #640]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ab6:	2b08      	cmp	r3, #8
 8004ab8:	d112      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aba:	4b9d      	ldr	r3, [pc, #628]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ac6:	d10b      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ac8:	4b99      	ldr	r3, [pc, #612]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d05b      	beq.n	8004b8c <HAL_RCC_OscConfig+0x108>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d157      	bne.n	8004b8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004adc:	2301      	movs	r3, #1
 8004ade:	e23f      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ae8:	d106      	bne.n	8004af8 <HAL_RCC_OscConfig+0x74>
 8004aea:	4b91      	ldr	r3, [pc, #580]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a90      	ldr	r2, [pc, #576]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e01d      	b.n	8004b34 <HAL_RCC_OscConfig+0xb0>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b00:	d10c      	bne.n	8004b1c <HAL_RCC_OscConfig+0x98>
 8004b02:	4b8b      	ldr	r3, [pc, #556]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a8a      	ldr	r2, [pc, #552]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	4b88      	ldr	r3, [pc, #544]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a87      	ldr	r2, [pc, #540]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b18:	6013      	str	r3, [r2, #0]
 8004b1a:	e00b      	b.n	8004b34 <HAL_RCC_OscConfig+0xb0>
 8004b1c:	4b84      	ldr	r3, [pc, #528]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	4a83      	ldr	r2, [pc, #524]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b26:	6013      	str	r3, [r2, #0]
 8004b28:	4b81      	ldr	r3, [pc, #516]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a80      	ldr	r2, [pc, #512]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d013      	beq.n	8004b64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b3c:	f7fd ff30 	bl	80029a0 <HAL_GetTick>
 8004b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b42:	e008      	b.n	8004b56 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b44:	f7fd ff2c 	bl	80029a0 <HAL_GetTick>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	2b64      	cmp	r3, #100	; 0x64
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e204      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b56:	4b76      	ldr	r3, [pc, #472]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0f0      	beq.n	8004b44 <HAL_RCC_OscConfig+0xc0>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b64:	f7fd ff1c 	bl	80029a0 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004b6c:	f7fd ff18 	bl	80029a0 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b64      	cmp	r3, #100	; 0x64
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e1f0      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b7e:	4b6c      	ldr	r3, [pc, #432]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0xe8>
 8004b8a:	e000      	b.n	8004b8e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d063      	beq.n	8004c62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 030c 	and.w	r3, r3, #12
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00b      	beq.n	8004bbe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba6:	4b62      	ldr	r3, [pc, #392]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004bae:	2b08      	cmp	r3, #8
 8004bb0:	d11c      	bne.n	8004bec <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	685b      	ldr	r3, [r3, #4]
 8004bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d116      	bne.n	8004bec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d005      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x152>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	2b01      	cmp	r3, #1
 8004bd0:	d001      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	e1c4      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bd6:	4b56      	ldr	r3, [pc, #344]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	00db      	lsls	r3, r3, #3
 8004be4:	4952      	ldr	r1, [pc, #328]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004be6:	4313      	orrs	r3, r2
 8004be8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bea:	e03a      	b.n	8004c62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d020      	beq.n	8004c36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004bf4:	4b4f      	ldr	r3, [pc, #316]	; (8004d34 <HAL_RCC_OscConfig+0x2b0>)
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bfa:	f7fd fed1 	bl	80029a0 <HAL_GetTick>
 8004bfe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c00:	e008      	b.n	8004c14 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c02:	f7fd fecd 	bl	80029a0 <HAL_GetTick>
 8004c06:	4602      	mov	r2, r0
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	1ad3      	subs	r3, r2, r3
 8004c0c:	2b02      	cmp	r3, #2
 8004c0e:	d901      	bls.n	8004c14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c10:	2303      	movs	r3, #3
 8004c12:	e1a5      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c14:	4b46      	ldr	r3, [pc, #280]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0302 	and.w	r3, r3, #2
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d0f0      	beq.n	8004c02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c20:	4b43      	ldr	r3, [pc, #268]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	691b      	ldr	r3, [r3, #16]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	4940      	ldr	r1, [pc, #256]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004c30:	4313      	orrs	r3, r2
 8004c32:	600b      	str	r3, [r1, #0]
 8004c34:	e015      	b.n	8004c62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c36:	4b3f      	ldr	r3, [pc, #252]	; (8004d34 <HAL_RCC_OscConfig+0x2b0>)
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fd feb0 	bl	80029a0 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004c44:	f7fd feac 	bl	80029a0 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e184      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c56:	4b36      	ldr	r3, [pc, #216]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f003 0302 	and.w	r3, r3, #2
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0308 	and.w	r3, r3, #8
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d030      	beq.n	8004cd0 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d016      	beq.n	8004ca4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c76:	4b30      	ldr	r3, [pc, #192]	; (8004d38 <HAL_RCC_OscConfig+0x2b4>)
 8004c78:	2201      	movs	r2, #1
 8004c7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7c:	f7fd fe90 	bl	80029a0 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c84:	f7fd fe8c 	bl	80029a0 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e164      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c96:	4b26      	ldr	r3, [pc, #152]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004c98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c9a:	f003 0302 	and.w	r3, r3, #2
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d0f0      	beq.n	8004c84 <HAL_RCC_OscConfig+0x200>
 8004ca2:	e015      	b.n	8004cd0 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ca4:	4b24      	ldr	r3, [pc, #144]	; (8004d38 <HAL_RCC_OscConfig+0x2b4>)
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004caa:	f7fd fe79 	bl	80029a0 <HAL_GetTick>
 8004cae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cb0:	e008      	b.n	8004cc4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004cb2:	f7fd fe75 	bl	80029a0 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	2b02      	cmp	r3, #2
 8004cbe:	d901      	bls.n	8004cc4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	e14d      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc4:	4b1a      	ldr	r3, [pc, #104]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cc8:	f003 0302 	and.w	r3, r3, #2
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f0      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0304 	and.w	r3, r3, #4
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 80a0 	beq.w	8004e1e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cde:	2300      	movs	r3, #0
 8004ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ce2:	4b13      	ldr	r3, [pc, #76]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d10f      	bne.n	8004d0e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
 8004cf2:	4b0f      	ldr	r3, [pc, #60]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	4a0e      	ldr	r2, [pc, #56]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8004cfe:	4b0c      	ldr	r3, [pc, #48]	; (8004d30 <HAL_RCC_OscConfig+0x2ac>)
 8004d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d06:	60bb      	str	r3, [r7, #8]
 8004d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0e:	4b0b      	ldr	r3, [pc, #44]	; (8004d3c <HAL_RCC_OscConfig+0x2b8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d121      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d1a:	4b08      	ldr	r3, [pc, #32]	; (8004d3c <HAL_RCC_OscConfig+0x2b8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a07      	ldr	r2, [pc, #28]	; (8004d3c <HAL_RCC_OscConfig+0x2b8>)
 8004d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d26:	f7fd fe3b 	bl	80029a0 <HAL_GetTick>
 8004d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d2c:	e011      	b.n	8004d52 <HAL_RCC_OscConfig+0x2ce>
 8004d2e:	bf00      	nop
 8004d30:	40023800 	.word	0x40023800
 8004d34:	42470000 	.word	0x42470000
 8004d38:	42470e80 	.word	0x42470e80
 8004d3c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d40:	f7fd fe2e 	bl	80029a0 <HAL_GetTick>
 8004d44:	4602      	mov	r2, r0
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	1ad3      	subs	r3, r2, r3
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e106      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d52:	4b85      	ldr	r3, [pc, #532]	; (8004f68 <HAL_RCC_OscConfig+0x4e4>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d0f0      	beq.n	8004d40 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d106      	bne.n	8004d74 <HAL_RCC_OscConfig+0x2f0>
 8004d66:	4b81      	ldr	r3, [pc, #516]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d6a:	4a80      	ldr	r2, [pc, #512]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d6c:	f043 0301 	orr.w	r3, r3, #1
 8004d70:	6713      	str	r3, [r2, #112]	; 0x70
 8004d72:	e01c      	b.n	8004dae <HAL_RCC_OscConfig+0x32a>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d10c      	bne.n	8004d96 <HAL_RCC_OscConfig+0x312>
 8004d7c:	4b7b      	ldr	r3, [pc, #492]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d80:	4a7a      	ldr	r2, [pc, #488]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d82:	f043 0304 	orr.w	r3, r3, #4
 8004d86:	6713      	str	r3, [r2, #112]	; 0x70
 8004d88:	4b78      	ldr	r3, [pc, #480]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8c:	4a77      	ldr	r2, [pc, #476]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d8e:	f043 0301 	orr.w	r3, r3, #1
 8004d92:	6713      	str	r3, [r2, #112]	; 0x70
 8004d94:	e00b      	b.n	8004dae <HAL_RCC_OscConfig+0x32a>
 8004d96:	4b75      	ldr	r3, [pc, #468]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d9a:	4a74      	ldr	r2, [pc, #464]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	6713      	str	r3, [r2, #112]	; 0x70
 8004da2:	4b72      	ldr	r3, [pc, #456]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004da6:	4a71      	ldr	r2, [pc, #452]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004da8:	f023 0304 	bic.w	r3, r3, #4
 8004dac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d015      	beq.n	8004de2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db6:	f7fd fdf3 	bl	80029a0 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbc:	e00a      	b.n	8004dd4 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fd fdef 	bl	80029a0 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e0c5      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dd4:	4b65      	ldr	r3, [pc, #404]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0ee      	beq.n	8004dbe <HAL_RCC_OscConfig+0x33a>
 8004de0:	e014      	b.n	8004e0c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fd fddd 	bl	80029a0 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004de8:	e00a      	b.n	8004e00 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dea:	f7fd fdd9 	bl	80029a0 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d901      	bls.n	8004e00 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e0af      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e00:	4b5a      	ldr	r3, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d1ee      	bne.n	8004dea <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004e0c:	7dfb      	ldrb	r3, [r7, #23]
 8004e0e:	2b01      	cmp	r3, #1
 8004e10:	d105      	bne.n	8004e1e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e12:	4b56      	ldr	r3, [pc, #344]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e16:	4a55      	ldr	r2, [pc, #340]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 809b 	beq.w	8004f5e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e28:	4b50      	ldr	r3, [pc, #320]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f003 030c 	and.w	r3, r3, #12
 8004e30:	2b08      	cmp	r3, #8
 8004e32:	d05c      	beq.n	8004eee <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	699b      	ldr	r3, [r3, #24]
 8004e38:	2b02      	cmp	r3, #2
 8004e3a:	d141      	bne.n	8004ec0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e3c:	4b4c      	ldr	r3, [pc, #304]	; (8004f70 <HAL_RCC_OscConfig+0x4ec>)
 8004e3e:	2200      	movs	r2, #0
 8004e40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e42:	f7fd fdad 	bl	80029a0 <HAL_GetTick>
 8004e46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e48:	e008      	b.n	8004e5c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e4a:	f7fd fda9 	bl	80029a0 <HAL_GetTick>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	2b02      	cmp	r3, #2
 8004e56:	d901      	bls.n	8004e5c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004e58:	2303      	movs	r3, #3
 8004e5a:	e081      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e5c:	4b43      	ldr	r3, [pc, #268]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1f0      	bne.n	8004e4a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a1b      	ldr	r3, [r3, #32]
 8004e70:	431a      	orrs	r2, r3
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	019b      	lsls	r3, r3, #6
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	085b      	lsrs	r3, r3, #1
 8004e80:	3b01      	subs	r3, #1
 8004e82:	041b      	lsls	r3, r3, #16
 8004e84:	431a      	orrs	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	4937      	ldr	r1, [pc, #220]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e92:	4b37      	ldr	r3, [pc, #220]	; (8004f70 <HAL_RCC_OscConfig+0x4ec>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e98:	f7fd fd82 	bl	80029a0 <HAL_GetTick>
 8004e9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9e:	e008      	b.n	8004eb2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ea0:	f7fd fd7e 	bl	80029a0 <HAL_GetTick>
 8004ea4:	4602      	mov	r2, r0
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	1ad3      	subs	r3, r2, r3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d901      	bls.n	8004eb2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	e056      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eb2:	4b2e      	ldr	r3, [pc, #184]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d0f0      	beq.n	8004ea0 <HAL_RCC_OscConfig+0x41c>
 8004ebe:	e04e      	b.n	8004f5e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ec0:	4b2b      	ldr	r3, [pc, #172]	; (8004f70 <HAL_RCC_OscConfig+0x4ec>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fd fd6b 	bl	80029a0 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ecc:	e008      	b.n	8004ee0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ece:	f7fd fd67 	bl	80029a0 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d901      	bls.n	8004ee0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e03f      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee0:	4b22      	ldr	r3, [pc, #136]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d1f0      	bne.n	8004ece <HAL_RCC_OscConfig+0x44a>
 8004eec:	e037      	b.n	8004f5e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e032      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_RCC_OscConfig+0x4e8>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	699b      	ldr	r3, [r3, #24]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d028      	beq.n	8004f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d121      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	429a      	cmp	r2, r3
 8004f22:	d11a      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	687a      	ldr	r2, [r7, #4]
 8004f2e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004f30:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d111      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f40:	085b      	lsrs	r3, r3, #1
 8004f42:	3b01      	subs	r3, #1
 8004f44:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d107      	bne.n	8004f5a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f54:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d001      	beq.n	8004f5e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004f5e:	2300      	movs	r3, #0
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3718      	adds	r7, #24
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40007000 	.word	0x40007000
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	42470060 	.word	0x42470060

08004f74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d101      	bne.n	8004f88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e0cc      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f88:	4b68      	ldr	r3, [pc, #416]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 030f 	and.w	r3, r3, #15
 8004f90:	683a      	ldr	r2, [r7, #0]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d90c      	bls.n	8004fb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f96:	4b65      	ldr	r3, [pc, #404]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 8004f98:	683a      	ldr	r2, [r7, #0]
 8004f9a:	b2d2      	uxtb	r2, r2
 8004f9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f9e:	4b63      	ldr	r3, [pc, #396]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 030f 	and.w	r3, r3, #15
 8004fa6:	683a      	ldr	r2, [r7, #0]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004fac:	2301      	movs	r3, #1
 8004fae:	e0b8      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d020      	beq.n	8004ffe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0304 	and.w	r3, r3, #4
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d005      	beq.n	8004fd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fc8:	4b59      	ldr	r3, [pc, #356]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	4a58      	ldr	r2, [pc, #352]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004fce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004fd2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0308 	and.w	r3, r3, #8
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fe0:	4b53      	ldr	r3, [pc, #332]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	4a52      	ldr	r2, [pc, #328]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004fea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fec:	4b50      	ldr	r3, [pc, #320]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	689b      	ldr	r3, [r3, #8]
 8004ff8:	494d      	ldr	r1, [pc, #308]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f003 0301 	and.w	r3, r3, #1
 8005006:	2b00      	cmp	r3, #0
 8005008:	d044      	beq.n	8005094 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d107      	bne.n	8005022 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005012:	4b47      	ldr	r3, [pc, #284]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d119      	bne.n	8005052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e07f      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	2b02      	cmp	r3, #2
 8005028:	d003      	beq.n	8005032 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800502e:	2b03      	cmp	r3, #3
 8005030:	d107      	bne.n	8005042 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005032:	4b3f      	ldr	r3, [pc, #252]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e06f      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005042:	4b3b      	ldr	r3, [pc, #236]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f003 0302 	and.w	r3, r3, #2
 800504a:	2b00      	cmp	r3, #0
 800504c:	d101      	bne.n	8005052 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e067      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005052:	4b37      	ldr	r3, [pc, #220]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f023 0203 	bic.w	r2, r3, #3
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	4934      	ldr	r1, [pc, #208]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005060:	4313      	orrs	r3, r2
 8005062:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005064:	f7fd fc9c 	bl	80029a0 <HAL_GetTick>
 8005068:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800506a:	e00a      	b.n	8005082 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800506c:	f7fd fc98 	bl	80029a0 <HAL_GetTick>
 8005070:	4602      	mov	r2, r0
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	1ad3      	subs	r3, r2, r3
 8005076:	f241 3288 	movw	r2, #5000	; 0x1388
 800507a:	4293      	cmp	r3, r2
 800507c:	d901      	bls.n	8005082 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800507e:	2303      	movs	r3, #3
 8005080:	e04f      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005082:	4b2b      	ldr	r3, [pc, #172]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	f003 020c 	and.w	r2, r3, #12
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	429a      	cmp	r2, r3
 8005092:	d1eb      	bne.n	800506c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005094:	4b25      	ldr	r3, [pc, #148]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 030f 	and.w	r3, r3, #15
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	429a      	cmp	r2, r3
 80050a0:	d20c      	bcs.n	80050bc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050a2:	4b22      	ldr	r3, [pc, #136]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	b2d2      	uxtb	r2, r2
 80050a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050aa:	4b20      	ldr	r3, [pc, #128]	; (800512c <HAL_RCC_ClockConfig+0x1b8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	683a      	ldr	r2, [r7, #0]
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d001      	beq.n	80050bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e032      	b.n	8005122 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f003 0304 	and.w	r3, r3, #4
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d008      	beq.n	80050da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050c8:	4b19      	ldr	r3, [pc, #100]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	4916      	ldr	r1, [pc, #88]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d009      	beq.n	80050fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050e6:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	490e      	ldr	r1, [pc, #56]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80050fa:	f000 f821 	bl	8005140 <HAL_RCC_GetSysClockFreq>
 80050fe:	4602      	mov	r2, r0
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	091b      	lsrs	r3, r3, #4
 8005106:	f003 030f 	and.w	r3, r3, #15
 800510a:	490a      	ldr	r1, [pc, #40]	; (8005134 <HAL_RCC_ClockConfig+0x1c0>)
 800510c:	5ccb      	ldrb	r3, [r1, r3]
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	4a09      	ldr	r2, [pc, #36]	; (8005138 <HAL_RCC_ClockConfig+0x1c4>)
 8005114:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005116:	4b09      	ldr	r3, [pc, #36]	; (800513c <HAL_RCC_ClockConfig+0x1c8>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fd fbfc 	bl	8002918 <HAL_InitTick>

  return HAL_OK;
 8005120:	2300      	movs	r3, #0
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	40023c00 	.word	0x40023c00
 8005130:	40023800 	.word	0x40023800
 8005134:	0800bc8c 	.word	0x0800bc8c
 8005138:	20000000 	.word	0x20000000
 800513c:	20000004 	.word	0x20000004

08005140 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005140:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005144:	b084      	sub	sp, #16
 8005146:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005148:	2300      	movs	r3, #0
 800514a:	607b      	str	r3, [r7, #4]
 800514c:	2300      	movs	r3, #0
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	2300      	movs	r3, #0
 8005152:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005154:	2300      	movs	r3, #0
 8005156:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005158:	4b67      	ldr	r3, [pc, #412]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	f003 030c 	and.w	r3, r3, #12
 8005160:	2b08      	cmp	r3, #8
 8005162:	d00d      	beq.n	8005180 <HAL_RCC_GetSysClockFreq+0x40>
 8005164:	2b08      	cmp	r3, #8
 8005166:	f200 80bd 	bhi.w	80052e4 <HAL_RCC_GetSysClockFreq+0x1a4>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d002      	beq.n	8005174 <HAL_RCC_GetSysClockFreq+0x34>
 800516e:	2b04      	cmp	r3, #4
 8005170:	d003      	beq.n	800517a <HAL_RCC_GetSysClockFreq+0x3a>
 8005172:	e0b7      	b.n	80052e4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b61      	ldr	r3, [pc, #388]	; (80052fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005176:	60bb      	str	r3, [r7, #8]
       break;
 8005178:	e0b7      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800517a:	4b61      	ldr	r3, [pc, #388]	; (8005300 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800517c:	60bb      	str	r3, [r7, #8]
      break;
 800517e:	e0b4      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005180:	4b5d      	ldr	r3, [pc, #372]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005188:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800518a:	4b5b      	ldr	r3, [pc, #364]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005192:	2b00      	cmp	r3, #0
 8005194:	d04d      	beq.n	8005232 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005196:	4b58      	ldr	r3, [pc, #352]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	099b      	lsrs	r3, r3, #6
 800519c:	461a      	mov	r2, r3
 800519e:	f04f 0300 	mov.w	r3, #0
 80051a2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80051a6:	f04f 0100 	mov.w	r1, #0
 80051aa:	ea02 0800 	and.w	r8, r2, r0
 80051ae:	ea03 0901 	and.w	r9, r3, r1
 80051b2:	4640      	mov	r0, r8
 80051b4:	4649      	mov	r1, r9
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	014b      	lsls	r3, r1, #5
 80051c0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80051c4:	0142      	lsls	r2, r0, #5
 80051c6:	4610      	mov	r0, r2
 80051c8:	4619      	mov	r1, r3
 80051ca:	ebb0 0008 	subs.w	r0, r0, r8
 80051ce:	eb61 0109 	sbc.w	r1, r1, r9
 80051d2:	f04f 0200 	mov.w	r2, #0
 80051d6:	f04f 0300 	mov.w	r3, #0
 80051da:	018b      	lsls	r3, r1, #6
 80051dc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80051e0:	0182      	lsls	r2, r0, #6
 80051e2:	1a12      	subs	r2, r2, r0
 80051e4:	eb63 0301 	sbc.w	r3, r3, r1
 80051e8:	f04f 0000 	mov.w	r0, #0
 80051ec:	f04f 0100 	mov.w	r1, #0
 80051f0:	00d9      	lsls	r1, r3, #3
 80051f2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80051f6:	00d0      	lsls	r0, r2, #3
 80051f8:	4602      	mov	r2, r0
 80051fa:	460b      	mov	r3, r1
 80051fc:	eb12 0208 	adds.w	r2, r2, r8
 8005200:	eb43 0309 	adc.w	r3, r3, r9
 8005204:	f04f 0000 	mov.w	r0, #0
 8005208:	f04f 0100 	mov.w	r1, #0
 800520c:	0259      	lsls	r1, r3, #9
 800520e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005212:	0250      	lsls	r0, r2, #9
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4610      	mov	r0, r2
 800521a:	4619      	mov	r1, r3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	461a      	mov	r2, r3
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	f7fb fd40 	bl	8000ca8 <__aeabi_uldivmod>
 8005228:	4602      	mov	r2, r0
 800522a:	460b      	mov	r3, r1
 800522c:	4613      	mov	r3, r2
 800522e:	60fb      	str	r3, [r7, #12]
 8005230:	e04a      	b.n	80052c8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005232:	4b31      	ldr	r3, [pc, #196]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	099b      	lsrs	r3, r3, #6
 8005238:	461a      	mov	r2, r3
 800523a:	f04f 0300 	mov.w	r3, #0
 800523e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005242:	f04f 0100 	mov.w	r1, #0
 8005246:	ea02 0400 	and.w	r4, r2, r0
 800524a:	ea03 0501 	and.w	r5, r3, r1
 800524e:	4620      	mov	r0, r4
 8005250:	4629      	mov	r1, r5
 8005252:	f04f 0200 	mov.w	r2, #0
 8005256:	f04f 0300 	mov.w	r3, #0
 800525a:	014b      	lsls	r3, r1, #5
 800525c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005260:	0142      	lsls	r2, r0, #5
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	1b00      	subs	r0, r0, r4
 8005268:	eb61 0105 	sbc.w	r1, r1, r5
 800526c:	f04f 0200 	mov.w	r2, #0
 8005270:	f04f 0300 	mov.w	r3, #0
 8005274:	018b      	lsls	r3, r1, #6
 8005276:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800527a:	0182      	lsls	r2, r0, #6
 800527c:	1a12      	subs	r2, r2, r0
 800527e:	eb63 0301 	sbc.w	r3, r3, r1
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	00d9      	lsls	r1, r3, #3
 800528c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005290:	00d0      	lsls	r0, r2, #3
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	1912      	adds	r2, r2, r4
 8005298:	eb45 0303 	adc.w	r3, r5, r3
 800529c:	f04f 0000 	mov.w	r0, #0
 80052a0:	f04f 0100 	mov.w	r1, #0
 80052a4:	0299      	lsls	r1, r3, #10
 80052a6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80052aa:	0290      	lsls	r0, r2, #10
 80052ac:	4602      	mov	r2, r0
 80052ae:	460b      	mov	r3, r1
 80052b0:	4610      	mov	r0, r2
 80052b2:	4619      	mov	r1, r3
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	461a      	mov	r2, r3
 80052b8:	f04f 0300 	mov.w	r3, #0
 80052bc:	f7fb fcf4 	bl	8000ca8 <__aeabi_uldivmod>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	4613      	mov	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052c8:	4b0b      	ldr	r3, [pc, #44]	; (80052f8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	0c1b      	lsrs	r3, r3, #16
 80052ce:	f003 0303 	and.w	r3, r3, #3
 80052d2:	3301      	adds	r3, #1
 80052d4:	005b      	lsls	r3, r3, #1
 80052d6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e0:	60bb      	str	r3, [r7, #8]
      break;
 80052e2:	e002      	b.n	80052ea <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <HAL_RCC_GetSysClockFreq+0x1bc>)
 80052e6:	60bb      	str	r3, [r7, #8]
      break;
 80052e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052ea:	68bb      	ldr	r3, [r7, #8]
}
 80052ec:	4618      	mov	r0, r3
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80052f6:	bf00      	nop
 80052f8:	40023800 	.word	0x40023800
 80052fc:	00f42400 	.word	0x00f42400
 8005300:	007a1200 	.word	0x007a1200

08005304 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005304:	b480      	push	{r7}
 8005306:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005308:	4b03      	ldr	r3, [pc, #12]	; (8005318 <HAL_RCC_GetHCLKFreq+0x14>)
 800530a:	681b      	ldr	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	20000000 	.word	0x20000000

0800531c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005320:	f7ff fff0 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	0a9b      	lsrs	r3, r3, #10
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	0800bc9c 	.word	0x0800bc9c

08005344 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005348:	f7ff ffdc 	bl	8005304 <HAL_RCC_GetHCLKFreq>
 800534c:	4602      	mov	r2, r0
 800534e:	4b05      	ldr	r3, [pc, #20]	; (8005364 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	0b5b      	lsrs	r3, r3, #13
 8005354:	f003 0307 	and.w	r3, r3, #7
 8005358:	4903      	ldr	r1, [pc, #12]	; (8005368 <HAL_RCC_GetPCLK2Freq+0x24>)
 800535a:	5ccb      	ldrb	r3, [r1, r3]
 800535c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005360:	4618      	mov	r0, r3
 8005362:	bd80      	pop	{r7, pc}
 8005364:	40023800 	.word	0x40023800
 8005368:	0800bc9c 	.word	0x0800bc9c

0800536c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b082      	sub	sp, #8
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e041      	b.n	8005402 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005384:	b2db      	uxtb	r3, r3
 8005386:	2b00      	cmp	r3, #0
 8005388:	d106      	bne.n	8005398 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2200      	movs	r2, #0
 800538e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f7fd f888 	bl	80024a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2202      	movs	r2, #2
 800539c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681a      	ldr	r2, [r3, #0]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	3304      	adds	r3, #4
 80053a8:	4619      	mov	r1, r3
 80053aa:	4610      	mov	r0, r2
 80053ac:	f000 fbb2 	bl	8005b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2201      	movs	r2, #1
 80053dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2201      	movs	r2, #1
 80053f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2201      	movs	r2, #1
 80053fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005400:	2300      	movs	r3, #0
}
 8005402:	4618      	mov	r0, r3
 8005404:	3708      	adds	r7, #8
 8005406:	46bd      	mov	sp, r7
 8005408:	bd80      	pop	{r7, pc}
	...

0800540c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b085      	sub	sp, #20
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541a:	b2db      	uxtb	r3, r3
 800541c:	2b01      	cmp	r3, #1
 800541e:	d001      	beq.n	8005424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005420:	2301      	movs	r3, #1
 8005422:	e04e      	b.n	80054c2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	68da      	ldr	r2, [r3, #12]
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0201 	orr.w	r2, r2, #1
 800543a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a23      	ldr	r2, [pc, #140]	; (80054d0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d022      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800544e:	d01d      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a1f      	ldr	r2, [pc, #124]	; (80054d4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d018      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a1e      	ldr	r2, [pc, #120]	; (80054d8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d013      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4a1c      	ldr	r2, [pc, #112]	; (80054dc <HAL_TIM_Base_Start_IT+0xd0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00e      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a1b      	ldr	r2, [pc, #108]	; (80054e0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a19      	ldr	r2, [pc, #100]	; (80054e4 <HAL_TIM_Base_Start_IT+0xd8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d004      	beq.n	800548c <HAL_TIM_Base_Start_IT+0x80>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a18      	ldr	r2, [pc, #96]	; (80054e8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d111      	bne.n	80054b0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	f003 0307 	and.w	r3, r3, #7
 8005496:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2b06      	cmp	r3, #6
 800549c:	d010      	beq.n	80054c0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f042 0201 	orr.w	r2, r2, #1
 80054ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054ae:	e007      	b.n	80054c0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f042 0201 	orr.w	r2, r2, #1
 80054be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40010400 	.word	0x40010400
 80054e4:	40014000 	.word	0x40014000
 80054e8:	40001800 	.word	0x40001800

080054ec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e041      	b.n	8005582 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f000 f839 	bl	800558a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 faf2 	bl	8005b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800558a:	b480      	push	{r7}
 800558c:	b083      	sub	sp, #12
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005592:	bf00      	nop
 8005594:	370c      	adds	r7, #12
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr

0800559e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b02      	cmp	r3, #2
 80055b2:	d122      	bne.n	80055fa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
 80055ba:	f003 0302 	and.w	r3, r3, #2
 80055be:	2b02      	cmp	r3, #2
 80055c0:	d11b      	bne.n	80055fa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f06f 0202 	mvn.w	r2, #2
 80055ca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	699b      	ldr	r3, [r3, #24]
 80055d8:	f003 0303 	and.w	r3, r3, #3
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d003      	beq.n	80055e8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 fa78 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 80055e6:	e005      	b.n	80055f4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055e8:	6878      	ldr	r0, [r7, #4]
 80055ea:	f000 fa6a 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fa7b 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	f003 0304 	and.w	r3, r3, #4
 8005604:	2b04      	cmp	r3, #4
 8005606:	d122      	bne.n	800564e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	f003 0304 	and.w	r3, r3, #4
 8005612:	2b04      	cmp	r3, #4
 8005614:	d11b      	bne.n	800564e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f06f 0204 	mvn.w	r2, #4
 800561e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	699b      	ldr	r3, [r3, #24]
 800562c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005630:	2b00      	cmp	r3, #0
 8005632:	d003      	beq.n	800563c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f000 fa4e 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 800563a:	e005      	b.n	8005648 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 fa40 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fa51 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	f003 0308 	and.w	r3, r3, #8
 8005658:	2b08      	cmp	r3, #8
 800565a:	d122      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	f003 0308 	and.w	r3, r3, #8
 8005666:	2b08      	cmp	r3, #8
 8005668:	d11b      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f06f 0208 	mvn.w	r2, #8
 8005672:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2204      	movs	r2, #4
 8005678:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69db      	ldr	r3, [r3, #28]
 8005680:	f003 0303 	and.w	r3, r3, #3
 8005684:	2b00      	cmp	r3, #0
 8005686:	d003      	beq.n	8005690 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f000 fa24 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 800568e:	e005      	b.n	800569c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fa16 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fa27 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0310 	and.w	r3, r3, #16
 80056ac:	2b10      	cmp	r3, #16
 80056ae:	d122      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0310 	and.w	r3, r3, #16
 80056ba:	2b10      	cmp	r3, #16
 80056bc:	d11b      	bne.n	80056f6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0210 	mvn.w	r2, #16
 80056c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2208      	movs	r2, #8
 80056cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	69db      	ldr	r3, [r3, #28]
 80056d4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d003      	beq.n	80056e4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f9fa 	bl	8005ad6 <HAL_TIM_IC_CaptureCallback>
 80056e2:	e005      	b.n	80056f0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 f9ec 	bl	8005ac2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f000 f9fd 	bl	8005aea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691b      	ldr	r3, [r3, #16]
 80056fc:	f003 0301 	and.w	r3, r3, #1
 8005700:	2b01      	cmp	r3, #1
 8005702:	d10e      	bne.n	8005722 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f003 0301 	and.w	r3, r3, #1
 800570e:	2b01      	cmp	r3, #1
 8005710:	d107      	bne.n	8005722 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f06f 0201 	mvn.w	r2, #1
 800571a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7fc fa5b 	bl	8001bd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	691b      	ldr	r3, [r3, #16]
 8005728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800572c:	2b80      	cmp	r3, #128	; 0x80
 800572e:	d10e      	bne.n	800574e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68db      	ldr	r3, [r3, #12]
 8005736:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800573a:	2b80      	cmp	r3, #128	; 0x80
 800573c:	d107      	bne.n	800574e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005746:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 fd53 	bl	80061f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	691b      	ldr	r3, [r3, #16]
 8005754:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005758:	2b40      	cmp	r3, #64	; 0x40
 800575a:	d10e      	bne.n	800577a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005766:	2b40      	cmp	r3, #64	; 0x40
 8005768:	d107      	bne.n	800577a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005772:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f000 f9c2 	bl	8005afe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	691b      	ldr	r3, [r3, #16]
 8005780:	f003 0320 	and.w	r3, r3, #32
 8005784:	2b20      	cmp	r3, #32
 8005786:	d10e      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68db      	ldr	r3, [r3, #12]
 800578e:	f003 0320 	and.w	r3, r3, #32
 8005792:	2b20      	cmp	r3, #32
 8005794:	d107      	bne.n	80057a6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f06f 0220 	mvn.w	r2, #32
 800579e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80057a0:	6878      	ldr	r0, [r7, #4]
 80057a2:	f000 fd1d 	bl	80061e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80057a6:	bf00      	nop
 80057a8:	3708      	adds	r7, #8
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
	...

080057b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	60f8      	str	r0, [r7, #12]
 80057b8:	60b9      	str	r1, [r7, #8]
 80057ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057c6:	2b01      	cmp	r3, #1
 80057c8:	d101      	bne.n	80057ce <HAL_TIM_PWM_ConfigChannel+0x1e>
 80057ca:	2302      	movs	r3, #2
 80057cc:	e0ae      	b.n	800592c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2b0c      	cmp	r3, #12
 80057da:	f200 809f 	bhi.w	800591c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80057de:	a201      	add	r2, pc, #4	; (adr r2, 80057e4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80057e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057e4:	08005819 	.word	0x08005819
 80057e8:	0800591d 	.word	0x0800591d
 80057ec:	0800591d 	.word	0x0800591d
 80057f0:	0800591d 	.word	0x0800591d
 80057f4:	08005859 	.word	0x08005859
 80057f8:	0800591d 	.word	0x0800591d
 80057fc:	0800591d 	.word	0x0800591d
 8005800:	0800591d 	.word	0x0800591d
 8005804:	0800589b 	.word	0x0800589b
 8005808:	0800591d 	.word	0x0800591d
 800580c:	0800591d 	.word	0x0800591d
 8005810:	0800591d 	.word	0x0800591d
 8005814:	080058db 	.word	0x080058db
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68b9      	ldr	r1, [r7, #8]
 800581e:	4618      	mov	r0, r3
 8005820:	f000 fa18 	bl	8005c54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	699a      	ldr	r2, [r3, #24]
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f042 0208 	orr.w	r2, r2, #8
 8005832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	699a      	ldr	r2, [r3, #24]
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f022 0204 	bic.w	r2, r2, #4
 8005842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6999      	ldr	r1, [r3, #24]
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	691a      	ldr	r2, [r3, #16]
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	430a      	orrs	r2, r1
 8005854:	619a      	str	r2, [r3, #24]
      break;
 8005856:	e064      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68b9      	ldr	r1, [r7, #8]
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fa68 	bl	8005d34 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	699a      	ldr	r2, [r3, #24]
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005872:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	699a      	ldr	r2, [r3, #24]
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005882:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	6999      	ldr	r1, [r3, #24]
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	691b      	ldr	r3, [r3, #16]
 800588e:	021a      	lsls	r2, r3, #8
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	430a      	orrs	r2, r1
 8005896:	619a      	str	r2, [r3, #24]
      break;
 8005898:	e043      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68b9      	ldr	r1, [r7, #8]
 80058a0:	4618      	mov	r0, r3
 80058a2:	f000 fabd 	bl	8005e20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f042 0208 	orr.w	r2, r2, #8
 80058b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	69da      	ldr	r2, [r3, #28]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f022 0204 	bic.w	r2, r2, #4
 80058c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	69d9      	ldr	r1, [r3, #28]
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	691a      	ldr	r2, [r3, #16]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	430a      	orrs	r2, r1
 80058d6:	61da      	str	r2, [r3, #28]
      break;
 80058d8:	e023      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68b9      	ldr	r1, [r7, #8]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f000 fb11 	bl	8005f08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	69da      	ldr	r2, [r3, #28]
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	69da      	ldr	r2, [r3, #28]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005904:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	69d9      	ldr	r1, [r3, #28]
 800590c:	68bb      	ldr	r3, [r7, #8]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	021a      	lsls	r2, r3, #8
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	430a      	orrs	r2, r1
 8005918:	61da      	str	r2, [r3, #28]
      break;
 800591a:	e002      	b.n	8005922 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	75fb      	strb	r3, [r7, #23]
      break;
 8005920:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800592a:	7dfb      	ldrb	r3, [r7, #23]
}
 800592c:	4618      	mov	r0, r3
 800592e:	3718      	adds	r7, #24
 8005930:	46bd      	mov	sp, r7
 8005932:	bd80      	pop	{r7, pc}

08005934 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	b084      	sub	sp, #16
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005948:	2b01      	cmp	r3, #1
 800594a:	d101      	bne.n	8005950 <HAL_TIM_ConfigClockSource+0x1c>
 800594c:	2302      	movs	r3, #2
 800594e:	e0b4      	b.n	8005aba <HAL_TIM_ConfigClockSource+0x186>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800596e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005976:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68ba      	ldr	r2, [r7, #8]
 800597e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005988:	d03e      	beq.n	8005a08 <HAL_TIM_ConfigClockSource+0xd4>
 800598a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800598e:	f200 8087 	bhi.w	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 8005992:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005996:	f000 8086 	beq.w	8005aa6 <HAL_TIM_ConfigClockSource+0x172>
 800599a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800599e:	d87f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a0:	2b70      	cmp	r3, #112	; 0x70
 80059a2:	d01a      	beq.n	80059da <HAL_TIM_ConfigClockSource+0xa6>
 80059a4:	2b70      	cmp	r3, #112	; 0x70
 80059a6:	d87b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059a8:	2b60      	cmp	r3, #96	; 0x60
 80059aa:	d050      	beq.n	8005a4e <HAL_TIM_ConfigClockSource+0x11a>
 80059ac:	2b60      	cmp	r3, #96	; 0x60
 80059ae:	d877      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b0:	2b50      	cmp	r3, #80	; 0x50
 80059b2:	d03c      	beq.n	8005a2e <HAL_TIM_ConfigClockSource+0xfa>
 80059b4:	2b50      	cmp	r3, #80	; 0x50
 80059b6:	d873      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059b8:	2b40      	cmp	r3, #64	; 0x40
 80059ba:	d058      	beq.n	8005a6e <HAL_TIM_ConfigClockSource+0x13a>
 80059bc:	2b40      	cmp	r3, #64	; 0x40
 80059be:	d86f      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c0:	2b30      	cmp	r3, #48	; 0x30
 80059c2:	d064      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059c4:	2b30      	cmp	r3, #48	; 0x30
 80059c6:	d86b      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059c8:	2b20      	cmp	r3, #32
 80059ca:	d060      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059cc:	2b20      	cmp	r3, #32
 80059ce:	d867      	bhi.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d05c      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059d4:	2b10      	cmp	r3, #16
 80059d6:	d05a      	beq.n	8005a8e <HAL_TIM_ConfigClockSource+0x15a>
 80059d8:	e062      	b.n	8005aa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6818      	ldr	r0, [r3, #0]
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	6899      	ldr	r1, [r3, #8]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	685a      	ldr	r2, [r3, #4]
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f000 fb5d 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80059fc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68ba      	ldr	r2, [r7, #8]
 8005a04:	609a      	str	r2, [r3, #8]
      break;
 8005a06:	e04f      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	6899      	ldr	r1, [r3, #8]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f000 fb46 	bl	80060a8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	689a      	ldr	r2, [r3, #8]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005a2a:	609a      	str	r2, [r3, #8]
      break;
 8005a2c:	e03c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6818      	ldr	r0, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	6859      	ldr	r1, [r3, #4]
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	f000 faba 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	2150      	movs	r1, #80	; 0x50
 8005a46:	4618      	mov	r0, r3
 8005a48:	f000 fb13 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005a4c:	e02c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	6859      	ldr	r1, [r3, #4]
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	f000 fad9 	bl	8006012 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2160      	movs	r1, #96	; 0x60
 8005a66:	4618      	mov	r0, r3
 8005a68:	f000 fb03 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005a6c:	e01c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6818      	ldr	r0, [r3, #0]
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	6859      	ldr	r1, [r3, #4]
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	68db      	ldr	r3, [r3, #12]
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	f000 fa9a 	bl	8005fb4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2140      	movs	r1, #64	; 0x40
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 faf3 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005a8c:	e00c      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4619      	mov	r1, r3
 8005a98:	4610      	mov	r0, r2
 8005a9a:	f000 faea 	bl	8006072 <TIM_ITRx_SetConfig>
      break;
 8005a9e:	e003      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	73fb      	strb	r3, [r7, #15]
      break;
 8005aa4:	e000      	b.n	8005aa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005aa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005ab8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3710      	adds	r7, #16
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}

08005ac2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ac2:	b480      	push	{r7}
 8005ac4:	b083      	sub	sp, #12
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005aca:	bf00      	nop
 8005acc:	370c      	adds	r7, #12
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr

08005ad6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ad6:	b480      	push	{r7}
 8005ad8:	b083      	sub	sp, #12
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ade:	bf00      	nop
 8005ae0:	370c      	adds	r7, #12
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae8:	4770      	bx	lr

08005aea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005aea:	b480      	push	{r7}
 8005aec:	b083      	sub	sp, #12
 8005aee:	af00      	add	r7, sp, #0
 8005af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005af2:	bf00      	nop
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
	...

08005b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a40      	ldr	r2, [pc, #256]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d00f      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a3d      	ldr	r2, [pc, #244]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a3c      	ldr	r2, [pc, #240]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d007      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	4a3b      	ldr	r2, [pc, #236]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d003      	beq.n	8005b54 <TIM_Base_SetConfig+0x40>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	4a3a      	ldr	r2, [pc, #232]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d108      	bne.n	8005b66 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685b      	ldr	r3, [r3, #4]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a2f      	ldr	r2, [pc, #188]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d02b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b74:	d027      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a2c      	ldr	r2, [pc, #176]	; (8005c2c <TIM_Base_SetConfig+0x118>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d023      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a2b      	ldr	r2, [pc, #172]	; (8005c30 <TIM_Base_SetConfig+0x11c>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d01f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a2a      	ldr	r2, [pc, #168]	; (8005c34 <TIM_Base_SetConfig+0x120>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d01b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	4a29      	ldr	r2, [pc, #164]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d017      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	4a28      	ldr	r2, [pc, #160]	; (8005c3c <TIM_Base_SetConfig+0x128>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d013      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	4a27      	ldr	r2, [pc, #156]	; (8005c40 <TIM_Base_SetConfig+0x12c>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d00f      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	4a26      	ldr	r2, [pc, #152]	; (8005c44 <TIM_Base_SetConfig+0x130>)
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d00b      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	4a25      	ldr	r2, [pc, #148]	; (8005c48 <TIM_Base_SetConfig+0x134>)
 8005bb2:	4293      	cmp	r3, r2
 8005bb4:	d007      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	4a24      	ldr	r2, [pc, #144]	; (8005c4c <TIM_Base_SetConfig+0x138>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d003      	beq.n	8005bc6 <TIM_Base_SetConfig+0xb2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	4a23      	ldr	r2, [pc, #140]	; (8005c50 <TIM_Base_SetConfig+0x13c>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d108      	bne.n	8005bd8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005bcc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	68fa      	ldr	r2, [r7, #12]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68fa      	ldr	r2, [r7, #12]
 8005bea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	689a      	ldr	r2, [r3, #8]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0a      	ldr	r2, [pc, #40]	; (8005c28 <TIM_Base_SetConfig+0x114>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d003      	beq.n	8005c0c <TIM_Base_SetConfig+0xf8>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	4a0c      	ldr	r2, [pc, #48]	; (8005c38 <TIM_Base_SetConfig+0x124>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d103      	bne.n	8005c14 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	615a      	str	r2, [r3, #20]
}
 8005c1a:	bf00      	nop
 8005c1c:	3714      	adds	r7, #20
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40010000 	.word	0x40010000
 8005c2c:	40000400 	.word	0x40000400
 8005c30:	40000800 	.word	0x40000800
 8005c34:	40000c00 	.word	0x40000c00
 8005c38:	40010400 	.word	0x40010400
 8005c3c:	40014000 	.word	0x40014000
 8005c40:	40014400 	.word	0x40014400
 8005c44:	40014800 	.word	0x40014800
 8005c48:	40001800 	.word	0x40001800
 8005c4c:	40001c00 	.word	0x40001c00
 8005c50:	40002000 	.word	0x40002000

08005c54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c54:	b480      	push	{r7}
 8005c56:	b087      	sub	sp, #28
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
 8005c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a1b      	ldr	r3, [r3, #32]
 8005c62:	f023 0201 	bic.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6a1b      	ldr	r3, [r3, #32]
 8005c6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	685b      	ldr	r3, [r3, #4]
 8005c74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	699b      	ldr	r3, [r3, #24]
 8005c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 0303 	bic.w	r3, r3, #3
 8005c8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	4313      	orrs	r3, r2
 8005c94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	f023 0302 	bic.w	r3, r3, #2
 8005c9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	689b      	ldr	r3, [r3, #8]
 8005ca2:	697a      	ldr	r2, [r7, #20]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a20      	ldr	r2, [pc, #128]	; (8005d2c <TIM_OC1_SetConfig+0xd8>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d003      	beq.n	8005cb8 <TIM_OC1_SetConfig+0x64>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a1f      	ldr	r2, [pc, #124]	; (8005d30 <TIM_OC1_SetConfig+0xdc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d10c      	bne.n	8005cd2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	f023 0308 	bic.w	r3, r3, #8
 8005cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	68db      	ldr	r3, [r3, #12]
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	f023 0304 	bic.w	r3, r3, #4
 8005cd0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4a15      	ldr	r2, [pc, #84]	; (8005d2c <TIM_OC1_SetConfig+0xd8>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d003      	beq.n	8005ce2 <TIM_OC1_SetConfig+0x8e>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4a14      	ldr	r2, [pc, #80]	; (8005d30 <TIM_OC1_SetConfig+0xdc>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d111      	bne.n	8005d06 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ce2:	693b      	ldr	r3, [r7, #16]
 8005ce4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ce8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005cf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	695b      	ldr	r3, [r3, #20]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	699b      	ldr	r3, [r3, #24]
 8005d00:	693a      	ldr	r2, [r7, #16]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	693a      	ldr	r2, [r7, #16]
 8005d0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	68fa      	ldr	r2, [r7, #12]
 8005d10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	685a      	ldr	r2, [r3, #4]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	621a      	str	r2, [r3, #32]
}
 8005d20:	bf00      	nop
 8005d22:	371c      	adds	r7, #28
 8005d24:	46bd      	mov	sp, r7
 8005d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2a:	4770      	bx	lr
 8005d2c:	40010000 	.word	0x40010000
 8005d30:	40010400 	.word	0x40010400

08005d34 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d34:	b480      	push	{r7}
 8005d36:	b087      	sub	sp, #28
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
 8005d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0210 	bic.w	r2, r3, #16
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	685b      	ldr	r3, [r3, #4]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	021b      	lsls	r3, r3, #8
 8005d72:	68fa      	ldr	r2, [r7, #12]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f023 0320 	bic.w	r3, r3, #32
 8005d7e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	011b      	lsls	r3, r3, #4
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	4a22      	ldr	r2, [pc, #136]	; (8005e18 <TIM_OC2_SetConfig+0xe4>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d003      	beq.n	8005d9c <TIM_OC2_SetConfig+0x68>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	4a21      	ldr	r2, [pc, #132]	; (8005e1c <TIM_OC2_SetConfig+0xe8>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d10d      	bne.n	8005db8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005da2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	011b      	lsls	r3, r3, #4
 8005daa:	697a      	ldr	r2, [r7, #20]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <TIM_OC2_SetConfig+0xe4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d003      	beq.n	8005dc8 <TIM_OC2_SetConfig+0x94>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	4a16      	ldr	r2, [pc, #88]	; (8005e1c <TIM_OC2_SetConfig+0xe8>)
 8005dc4:	4293      	cmp	r3, r2
 8005dc6:	d113      	bne.n	8005df0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005dc8:	693b      	ldr	r3, [r7, #16]
 8005dca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005dce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005dd6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	009b      	lsls	r3, r3, #2
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	699b      	ldr	r3, [r3, #24]
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	4313      	orrs	r3, r2
 8005dee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	693a      	ldr	r2, [r7, #16]
 8005df4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68fa      	ldr	r2, [r7, #12]
 8005dfa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	685a      	ldr	r2, [r3, #4]
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	697a      	ldr	r2, [r7, #20]
 8005e08:	621a      	str	r2, [r3, #32]
}
 8005e0a:	bf00      	nop
 8005e0c:	371c      	adds	r7, #28
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e14:	4770      	bx	lr
 8005e16:	bf00      	nop
 8005e18:	40010000 	.word	0x40010000
 8005e1c:	40010400 	.word	0x40010400

08005e20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	685b      	ldr	r3, [r3, #4]
 8005e40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	f023 0303 	bic.w	r3, r3, #3
 8005e56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	68fa      	ldr	r2, [r7, #12]
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	021b      	lsls	r3, r3, #8
 8005e70:	697a      	ldr	r2, [r7, #20]
 8005e72:	4313      	orrs	r3, r2
 8005e74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a21      	ldr	r2, [pc, #132]	; (8005f00 <TIM_OC3_SetConfig+0xe0>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d003      	beq.n	8005e86 <TIM_OC3_SetConfig+0x66>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a20      	ldr	r2, [pc, #128]	; (8005f04 <TIM_OC3_SetConfig+0xe4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10d      	bne.n	8005ea2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005e8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	697a      	ldr	r2, [r7, #20]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005e9a:	697b      	ldr	r3, [r7, #20]
 8005e9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ea0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a16      	ldr	r2, [pc, #88]	; (8005f00 <TIM_OC3_SetConfig+0xe0>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d003      	beq.n	8005eb2 <TIM_OC3_SetConfig+0x92>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	4a15      	ldr	r2, [pc, #84]	; (8005f04 <TIM_OC3_SetConfig+0xe4>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d113      	bne.n	8005eda <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005eb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ec0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	695b      	ldr	r3, [r3, #20]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	699b      	ldr	r3, [r3, #24]
 8005ed2:	011b      	lsls	r3, r3, #4
 8005ed4:	693a      	ldr	r2, [r7, #16]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	693a      	ldr	r2, [r7, #16]
 8005ede:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	685a      	ldr	r2, [r3, #4]
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	621a      	str	r2, [r3, #32]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	40010000 	.word	0x40010000
 8005f04:	40010400 	.word	0x40010400

08005f08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b087      	sub	sp, #28
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
 8005f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6a1b      	ldr	r3, [r3, #32]
 8005f16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6a1b      	ldr	r3, [r3, #32]
 8005f22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	021b      	lsls	r3, r3, #8
 8005f46:	68fa      	ldr	r2, [r7, #12]
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005f4c:	693b      	ldr	r3, [r7, #16]
 8005f4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005f52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	689b      	ldr	r3, [r3, #8]
 8005f58:	031b      	lsls	r3, r3, #12
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	4a12      	ldr	r2, [pc, #72]	; (8005fac <TIM_OC4_SetConfig+0xa4>)
 8005f64:	4293      	cmp	r3, r2
 8005f66:	d003      	beq.n	8005f70 <TIM_OC4_SetConfig+0x68>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	4a11      	ldr	r2, [pc, #68]	; (8005fb0 <TIM_OC4_SetConfig+0xa8>)
 8005f6c:	4293      	cmp	r3, r2
 8005f6e:	d109      	bne.n	8005f84 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005f76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	019b      	lsls	r3, r3, #6
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	4313      	orrs	r3, r2
 8005f82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68fa      	ldr	r2, [r7, #12]
 8005f8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	685a      	ldr	r2, [r3, #4]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	693a      	ldr	r2, [r7, #16]
 8005f9c:	621a      	str	r2, [r3, #32]
}
 8005f9e:	bf00      	nop
 8005fa0:	371c      	adds	r7, #28
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
 8005faa:	bf00      	nop
 8005fac:	40010000 	.word	0x40010000
 8005fb0:	40010400 	.word	0x40010400

08005fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b087      	sub	sp, #28
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	60f8      	str	r0, [r7, #12]
 8005fbc:	60b9      	str	r1, [r7, #8]
 8005fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	6a1b      	ldr	r3, [r3, #32]
 8005fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a1b      	ldr	r3, [r3, #32]
 8005fca:	f023 0201 	bic.w	r2, r3, #1
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	011b      	lsls	r3, r3, #4
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	f023 030a 	bic.w	r3, r3, #10
 8005ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ff2:	697a      	ldr	r2, [r7, #20]
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	693a      	ldr	r2, [r7, #16]
 8005ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	697a      	ldr	r2, [r7, #20]
 8006004:	621a      	str	r2, [r3, #32]
}
 8006006:	bf00      	nop
 8006008:	371c      	adds	r7, #28
 800600a:	46bd      	mov	sp, r7
 800600c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006010:	4770      	bx	lr

08006012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006012:	b480      	push	{r7}
 8006014:	b087      	sub	sp, #28
 8006016:	af00      	add	r7, sp, #0
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	60b9      	str	r1, [r7, #8]
 800601c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6a1b      	ldr	r3, [r3, #32]
 8006022:	f023 0210 	bic.w	r2, r3, #16
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	699b      	ldr	r3, [r3, #24]
 800602e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	6a1b      	ldr	r3, [r3, #32]
 8006034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800603c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	031b      	lsls	r3, r3, #12
 8006042:	697a      	ldr	r2, [r7, #20]
 8006044:	4313      	orrs	r3, r2
 8006046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800604e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	4313      	orrs	r3, r2
 8006058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	697a      	ldr	r2, [r7, #20]
 800605e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	693a      	ldr	r2, [r7, #16]
 8006064:	621a      	str	r2, [r3, #32]
}
 8006066:	bf00      	nop
 8006068:	371c      	adds	r7, #28
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006072:	b480      	push	{r7}
 8006074:	b085      	sub	sp, #20
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800608a:	683a      	ldr	r2, [r7, #0]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4313      	orrs	r3, r2
 8006090:	f043 0307 	orr.w	r3, r3, #7
 8006094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	609a      	str	r2, [r3, #8]
}
 800609c:	bf00      	nop
 800609e:	3714      	adds	r7, #20
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b087      	sub	sp, #28
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	021a      	lsls	r2, r3, #8
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	431a      	orrs	r2, r3
 80060cc:	68bb      	ldr	r3, [r7, #8]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	4313      	orrs	r3, r2
 80060d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	697a      	ldr	r2, [r7, #20]
 80060da:	609a      	str	r2, [r3, #8]
}
 80060dc:	bf00      	nop
 80060de:	371c      	adds	r7, #28
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f8:	2b01      	cmp	r3, #1
 80060fa:	d101      	bne.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060fc:	2302      	movs	r3, #2
 80060fe:	e05a      	b.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d01d      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1d      	ldr	r2, [pc, #116]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1a      	ldr	r2, [pc, #104]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a18      	ldr	r2, [pc, #96]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a17      	ldr	r2, [pc, #92]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a15      	ldr	r2, [pc, #84]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10c      	bne.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	4313      	orrs	r3, r2
 800619a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40010000 	.word	0x40010000
 80061c8:	40000400 	.word	0x40000400
 80061cc:	40000800 	.word	0x40000800
 80061d0:	40000c00 	.word	0x40000c00
 80061d4:	40010400 	.word	0x40010400
 80061d8:	40014000 	.word	0x40014000
 80061dc:	40001800 	.word	0x40001800

080061e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e03f      	b.n	800629a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b00      	cmp	r3, #0
 8006224:	d106      	bne.n	8006234 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7fc fad6 	bl	80027e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2224      	movs	r2, #36	; 0x24
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	68da      	ldr	r2, [r3, #12]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800624a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fd7b 	bl	8006d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	691a      	ldr	r2, [r3, #16]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006260:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	695a      	ldr	r2, [r3, #20]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006270:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	68da      	ldr	r2, [r3, #12]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006280:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2220      	movs	r2, #32
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2220      	movs	r2, #32
 8006294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006298:	2300      	movs	r3, #0
}
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a2:	b580      	push	{r7, lr}
 80062a4:	b08a      	sub	sp, #40	; 0x28
 80062a6:	af02      	add	r7, sp, #8
 80062a8:	60f8      	str	r0, [r7, #12]
 80062aa:	60b9      	str	r1, [r7, #8]
 80062ac:	603b      	str	r3, [r7, #0]
 80062ae:	4613      	mov	r3, r2
 80062b0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80062b2:	2300      	movs	r3, #0
 80062b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062bc:	b2db      	uxtb	r3, r3
 80062be:	2b20      	cmp	r3, #32
 80062c0:	d17c      	bne.n	80063bc <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d002      	beq.n	80062ce <HAL_UART_Transmit+0x2c>
 80062c8:	88fb      	ldrh	r3, [r7, #6]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e075      	b.n	80063be <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_UART_Transmit+0x3e>
 80062dc:	2302      	movs	r3, #2
 80062de:	e06e      	b.n	80063be <HAL_UART_Transmit+0x11c>
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2200      	movs	r2, #0
 80062ec:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2221      	movs	r2, #33	; 0x21
 80062f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f6:	f7fc fb53 	bl	80029a0 <HAL_GetTick>
 80062fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	88fa      	ldrh	r2, [r7, #6]
 8006300:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	88fa      	ldrh	r2, [r7, #6]
 8006306:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006310:	d108      	bne.n	8006324 <HAL_UART_Transmit+0x82>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	691b      	ldr	r3, [r3, #16]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d104      	bne.n	8006324 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800631a:	2300      	movs	r3, #0
 800631c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800631e:	68bb      	ldr	r3, [r7, #8]
 8006320:	61bb      	str	r3, [r7, #24]
 8006322:	e003      	b.n	800632c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006328:	2300      	movs	r3, #0
 800632a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2200      	movs	r2, #0
 8006330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006334:	e02a      	b.n	800638c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	9300      	str	r3, [sp, #0]
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	2200      	movs	r2, #0
 800633e:	2180      	movs	r1, #128	; 0x80
 8006340:	68f8      	ldr	r0, [r7, #12]
 8006342:	f000 faf9 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 8006346:	4603      	mov	r3, r0
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800634c:	2303      	movs	r3, #3
 800634e:	e036      	b.n	80063be <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006350:	69fb      	ldr	r3, [r7, #28]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10b      	bne.n	800636e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	881b      	ldrh	r3, [r3, #0]
 800635a:	461a      	mov	r2, r3
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006364:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	3302      	adds	r3, #2
 800636a:	61bb      	str	r3, [r7, #24]
 800636c:	e007      	b.n	800637e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	781a      	ldrb	r2, [r3, #0]
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	3301      	adds	r3, #1
 800637c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1cf      	bne.n	8006336 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	9300      	str	r3, [sp, #0]
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	2200      	movs	r2, #0
 800639e:	2140      	movs	r1, #64	; 0x40
 80063a0:	68f8      	ldr	r0, [r7, #12]
 80063a2:	f000 fac9 	bl	8006938 <UART_WaitOnFlagUntilTimeout>
 80063a6:	4603      	mov	r3, r0
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d001      	beq.n	80063b0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80063ac:	2303      	movs	r3, #3
 80063ae:	e006      	b.n	80063be <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80063b8:	2300      	movs	r3, #0
 80063ba:	e000      	b.n	80063be <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80063bc:	2302      	movs	r3, #2
  }
}
 80063be:	4618      	mov	r0, r3
 80063c0:	3720      	adds	r7, #32
 80063c2:	46bd      	mov	sp, r7
 80063c4:	bd80      	pop	{r7, pc}
	...

080063c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b0ba      	sub	sp, #232	; 0xe8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80063f4:	2300      	movs	r3, #0
 80063f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063fe:	f003 030f 	and.w	r3, r3, #15
 8006402:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10f      	bne.n	800642e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800640e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <HAL_UART_IRQHandler+0x66>
 800641a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641e:	f003 0320 	and.w	r3, r3, #32
 8006422:	2b00      	cmp	r3, #0
 8006424:	d003      	beq.n	800642e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f000 fbd3 	bl	8006bd2 <UART_Receive_IT>
      return;
 800642c:	e256      	b.n	80068dc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800642e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006432:	2b00      	cmp	r3, #0
 8006434:	f000 80de 	beq.w	80065f4 <HAL_UART_IRQHandler+0x22c>
 8006438:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800643c:	f003 0301 	and.w	r3, r3, #1
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006444:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006448:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800644c:	2b00      	cmp	r3, #0
 800644e:	f000 80d1 	beq.w	80065f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b00      	cmp	r3, #0
 800645c:	d00b      	beq.n	8006476 <HAL_UART_IRQHandler+0xae>
 800645e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006466:	2b00      	cmp	r3, #0
 8006468:	d005      	beq.n	8006476 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f043 0201 	orr.w	r2, r3, #1
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006476:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647a:	f003 0304 	and.w	r3, r3, #4
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00b      	beq.n	800649a <HAL_UART_IRQHandler+0xd2>
 8006482:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006486:	f003 0301 	and.w	r3, r3, #1
 800648a:	2b00      	cmp	r3, #0
 800648c:	d005      	beq.n	800649a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006492:	f043 0202 	orr.w	r2, r3, #2
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800649a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800649e:	f003 0302 	and.w	r3, r3, #2
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d00b      	beq.n	80064be <HAL_UART_IRQHandler+0xf6>
 80064a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064aa:	f003 0301 	and.w	r3, r3, #1
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d005      	beq.n	80064be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b6:	f043 0204 	orr.w	r2, r3, #4
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80064be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064c2:	f003 0308 	and.w	r3, r3, #8
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d011      	beq.n	80064ee <HAL_UART_IRQHandler+0x126>
 80064ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80064ce:	f003 0320 	and.w	r3, r3, #32
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d105      	bne.n	80064e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80064d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80064da:	f003 0301 	and.w	r3, r3, #1
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d005      	beq.n	80064ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e6:	f043 0208 	orr.w	r2, r3, #8
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f000 81ed 	beq.w	80068d2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80064fc:	f003 0320 	and.w	r3, r3, #32
 8006500:	2b00      	cmp	r3, #0
 8006502:	d008      	beq.n	8006516 <HAL_UART_IRQHandler+0x14e>
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006508:	f003 0320 	and.w	r3, r3, #32
 800650c:	2b00      	cmp	r3, #0
 800650e:	d002      	beq.n	8006516 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fb5e 	bl	8006bd2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	695b      	ldr	r3, [r3, #20]
 800651c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006520:	2b40      	cmp	r3, #64	; 0x40
 8006522:	bf0c      	ite	eq
 8006524:	2301      	moveq	r3, #1
 8006526:	2300      	movne	r3, #0
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 0308 	and.w	r3, r3, #8
 8006536:	2b00      	cmp	r3, #0
 8006538:	d103      	bne.n	8006542 <HAL_UART_IRQHandler+0x17a>
 800653a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800653e:	2b00      	cmp	r3, #0
 8006540:	d04f      	beq.n	80065e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 fa66 	bl	8006a14 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d141      	bne.n	80065da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	3314      	adds	r3, #20
 800655c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006560:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800656c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006570:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006574:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	3314      	adds	r3, #20
 800657e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006582:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006586:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800658e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006592:	e841 2300 	strex	r3, r2, [r1]
 8006596:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800659a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d1d9      	bne.n	8006556 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d013      	beq.n	80065d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ae:	4a7d      	ldr	r2, [pc, #500]	; (80067a4 <HAL_UART_IRQHandler+0x3dc>)
 80065b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	4618      	mov	r0, r3
 80065b8:	f7fd f8cc 	bl	8003754 <HAL_DMA_Abort_IT>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d016      	beq.n	80065f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065cc:	4610      	mov	r0, r2
 80065ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d0:	e00e      	b.n	80065f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 f99a 	bl	800690c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065d8:	e00a      	b.n	80065f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f996 	bl	800690c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065e0:	e006      	b.n	80065f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f000 f992 	bl	800690c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2200      	movs	r2, #0
 80065ec:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80065ee:	e170      	b.n	80068d2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065f0:	bf00      	nop
    return;
 80065f2:	e16e      	b.n	80068d2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	f040 814a 	bne.w	8006892 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80065fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b00      	cmp	r3, #0
 8006608:	f000 8143 	beq.w	8006892 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800660c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006610:	f003 0310 	and.w	r3, r3, #16
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 813c 	beq.w	8006892 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800661a:	2300      	movs	r3, #0
 800661c:	60bb      	str	r3, [r7, #8]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	60bb      	str	r3, [r7, #8]
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	695b      	ldr	r3, [r3, #20]
 8006636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800663a:	2b40      	cmp	r3, #64	; 0x40
 800663c:	f040 80b4 	bne.w	80067a8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800664c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006650:	2b00      	cmp	r3, #0
 8006652:	f000 8140 	beq.w	80068d6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800665a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800665e:	429a      	cmp	r2, r3
 8006660:	f080 8139 	bcs.w	80068d6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800666a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006676:	f000 8088 	beq.w	800678a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	330c      	adds	r3, #12
 8006680:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006688:	e853 3f00 	ldrex	r3, [r3]
 800668c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006690:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006694:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006698:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	330c      	adds	r3, #12
 80066a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80066a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80066aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80066b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80066b6:	e841 2300 	strex	r3, r2, [r1]
 80066ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80066be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1d9      	bne.n	800667a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3314      	adds	r3, #20
 80066cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066d0:	e853 3f00 	ldrex	r3, [r3]
 80066d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80066d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	3314      	adds	r3, #20
 80066e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80066ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80066ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80066f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80066f6:	e841 2300 	strex	r3, r2, [r1]
 80066fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80066fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1e1      	bne.n	80066c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3314      	adds	r3, #20
 8006708:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800670a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800670c:	e853 3f00 	ldrex	r3, [r3]
 8006710:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006712:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006714:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006718:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	3314      	adds	r3, #20
 8006722:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006726:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006728:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800672a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800672c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800672e:	e841 2300 	strex	r3, r2, [r1]
 8006732:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006734:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006736:	2b00      	cmp	r3, #0
 8006738:	d1e3      	bne.n	8006702 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	330c      	adds	r3, #12
 800674e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006750:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006752:	e853 3f00 	ldrex	r3, [r3]
 8006756:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006758:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800675a:	f023 0310 	bic.w	r3, r3, #16
 800675e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	330c      	adds	r3, #12
 8006768:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800676c:	65ba      	str	r2, [r7, #88]	; 0x58
 800676e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006770:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006772:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006774:	e841 2300 	strex	r3, r2, [r1]
 8006778:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800677a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800677c:	2b00      	cmp	r3, #0
 800677e:	d1e3      	bne.n	8006748 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	4618      	mov	r0, r3
 8006786:	f7fc ff75 	bl	8003674 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006792:	b29b      	uxth	r3, r3
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	b29b      	uxth	r3, r3
 8006798:	4619      	mov	r1, r3
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8c0 	bl	8006920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80067a0:	e099      	b.n	80068d6 <HAL_UART_IRQHandler+0x50e>
 80067a2:	bf00      	nop
 80067a4:	08006adb 	.word	0x08006adb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b0:	b29b      	uxth	r3, r3
 80067b2:	1ad3      	subs	r3, r2, r3
 80067b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067bc:	b29b      	uxth	r3, r3
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 808b 	beq.w	80068da <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80067c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	f000 8086 	beq.w	80068da <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80067de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80067e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80067e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	330c      	adds	r3, #12
 80067ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80067f2:	647a      	str	r2, [r7, #68]	; 0x44
 80067f4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80067f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80067fa:	e841 2300 	strex	r3, r2, [r1]
 80067fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006800:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1e3      	bne.n	80067ce <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	3314      	adds	r3, #20
 800680c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006810:	e853 3f00 	ldrex	r3, [r3]
 8006814:	623b      	str	r3, [r7, #32]
   return(result);
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	f023 0301 	bic.w	r3, r3, #1
 800681c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	3314      	adds	r3, #20
 8006826:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800682a:	633a      	str	r2, [r7, #48]	; 0x30
 800682c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800682e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006832:	e841 2300 	strex	r3, r2, [r1]
 8006836:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800683a:	2b00      	cmp	r3, #0
 800683c:	d1e3      	bne.n	8006806 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2220      	movs	r2, #32
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	e853 3f00 	ldrex	r3, [r3]
 800685a:	60fb      	str	r3, [r7, #12]
   return(result);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	f023 0310 	bic.w	r3, r3, #16
 8006862:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	330c      	adds	r3, #12
 800686c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006870:	61fa      	str	r2, [r7, #28]
 8006872:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006874:	69b9      	ldr	r1, [r7, #24]
 8006876:	69fa      	ldr	r2, [r7, #28]
 8006878:	e841 2300 	strex	r3, r2, [r1]
 800687c:	617b      	str	r3, [r7, #20]
   return(result);
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d1e3      	bne.n	800684c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006884:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f848 	bl	8006920 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006890:	e023      	b.n	80068da <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800689a:	2b00      	cmp	r3, #0
 800689c:	d009      	beq.n	80068b2 <HAL_UART_IRQHandler+0x4ea>
 800689e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d003      	beq.n	80068b2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f000 f929 	bl	8006b02 <UART_Transmit_IT>
    return;
 80068b0:	e014      	b.n	80068dc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80068b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d00e      	beq.n	80068dc <HAL_UART_IRQHandler+0x514>
 80068be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d008      	beq.n	80068dc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f000 f969 	bl	8006ba2 <UART_EndTransmit_IT>
    return;
 80068d0:	e004      	b.n	80068dc <HAL_UART_IRQHandler+0x514>
    return;
 80068d2:	bf00      	nop
 80068d4:	e002      	b.n	80068dc <HAL_UART_IRQHandler+0x514>
      return;
 80068d6:	bf00      	nop
 80068d8:	e000      	b.n	80068dc <HAL_UART_IRQHandler+0x514>
      return;
 80068da:	bf00      	nop
  }
}
 80068dc:	37e8      	adds	r7, #232	; 0xe8
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}
 80068e2:	bf00      	nop

080068e4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80068ec:	bf00      	nop
 80068ee:	370c      	adds	r7, #12
 80068f0:	46bd      	mov	sp, r7
 80068f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f6:	4770      	bx	lr

080068f8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006900:	bf00      	nop
 8006902:	370c      	adds	r7, #12
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006914:	bf00      	nop
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006920:	b480      	push	{r7}
 8006922:	b083      	sub	sp, #12
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	460b      	mov	r3, r1
 800692a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr

08006938 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b090      	sub	sp, #64	; 0x40
 800693c:	af00      	add	r7, sp, #0
 800693e:	60f8      	str	r0, [r7, #12]
 8006940:	60b9      	str	r1, [r7, #8]
 8006942:	603b      	str	r3, [r7, #0]
 8006944:	4613      	mov	r3, r2
 8006946:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006948:	e050      	b.n	80069ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800694a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800694c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006950:	d04c      	beq.n	80069ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006954:	2b00      	cmp	r3, #0
 8006956:	d007      	beq.n	8006968 <UART_WaitOnFlagUntilTimeout+0x30>
 8006958:	f7fc f822 	bl	80029a0 <HAL_GetTick>
 800695c:	4602      	mov	r2, r0
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	1ad3      	subs	r3, r2, r3
 8006962:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006964:	429a      	cmp	r2, r3
 8006966:	d241      	bcs.n	80069ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	330c      	adds	r3, #12
 800696e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006972:	e853 3f00 	ldrex	r3, [r3]
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800697a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800697e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	330c      	adds	r3, #12
 8006986:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006988:	637a      	str	r2, [r7, #52]	; 0x34
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800698e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006990:	e841 2300 	strex	r3, r2, [r1]
 8006994:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d1e5      	bne.n	8006968 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	3314      	adds	r3, #20
 80069a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	e853 3f00 	ldrex	r3, [r3]
 80069aa:	613b      	str	r3, [r7, #16]
   return(result);
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	3314      	adds	r3, #20
 80069ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80069bc:	623a      	str	r2, [r7, #32]
 80069be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c0:	69f9      	ldr	r1, [r7, #28]
 80069c2:	6a3a      	ldr	r2, [r7, #32]
 80069c4:	e841 2300 	strex	r3, r2, [r1]
 80069c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d1e5      	bne.n	800699c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2220      	movs	r2, #32
 80069d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2220      	movs	r2, #32
 80069dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e00f      	b.n	8006a0c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	681a      	ldr	r2, [r3, #0]
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	4013      	ands	r3, r2
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	429a      	cmp	r2, r3
 80069fa:	bf0c      	ite	eq
 80069fc:	2301      	moveq	r3, #1
 80069fe:	2300      	movne	r3, #0
 8006a00:	b2db      	uxtb	r3, r3
 8006a02:	461a      	mov	r2, r3
 8006a04:	79fb      	ldrb	r3, [r7, #7]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d09f      	beq.n	800694a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3740      	adds	r7, #64	; 0x40
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b095      	sub	sp, #84	; 0x54
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	330c      	adds	r3, #12
 8006a22:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a26:	e853 3f00 	ldrex	r3, [r3]
 8006a2a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a2e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	330c      	adds	r3, #12
 8006a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a3c:	643a      	str	r2, [r7, #64]	; 0x40
 8006a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a44:	e841 2300 	strex	r3, r2, [r1]
 8006a48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d1e5      	bne.n	8006a1c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	3314      	adds	r3, #20
 8006a56:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a60:	69fb      	ldr	r3, [r7, #28]
 8006a62:	f023 0301 	bic.w	r3, r3, #1
 8006a66:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3314      	adds	r3, #20
 8006a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a70:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e5      	bne.n	8006a50 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d119      	bne.n	8006ac0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	330c      	adds	r3, #12
 8006a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	e853 3f00 	ldrex	r3, [r3]
 8006a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	f023 0310 	bic.w	r3, r3, #16
 8006aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	330c      	adds	r3, #12
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	61ba      	str	r2, [r7, #24]
 8006aae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab0:	6979      	ldr	r1, [r7, #20]
 8006ab2:	69ba      	ldr	r2, [r7, #24]
 8006ab4:	e841 2300 	strex	r3, r2, [r1]
 8006ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d1e5      	bne.n	8006a8c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006ace:	bf00      	nop
 8006ad0:	3754      	adds	r7, #84	; 0x54
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr

08006ada <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ada:	b580      	push	{r7, lr}
 8006adc:	b084      	sub	sp, #16
 8006ade:	af00      	add	r7, sp, #0
 8006ae0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2200      	movs	r2, #0
 8006af2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff ff09 	bl	800690c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006afa:	bf00      	nop
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b085      	sub	sp, #20
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b10:	b2db      	uxtb	r3, r3
 8006b12:	2b21      	cmp	r3, #33	; 0x21
 8006b14:	d13e      	bne.n	8006b94 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b1e:	d114      	bne.n	8006b4a <UART_Transmit_IT+0x48>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d110      	bne.n	8006b4a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6a1b      	ldr	r3, [r3, #32]
 8006b2c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	881b      	ldrh	r3, [r3, #0]
 8006b32:	461a      	mov	r2, r3
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006b3c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	1c9a      	adds	r2, r3, #2
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	621a      	str	r2, [r3, #32]
 8006b48:	e008      	b.n	8006b5c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a1b      	ldr	r3, [r3, #32]
 8006b4e:	1c59      	adds	r1, r3, #1
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	6211      	str	r1, [r2, #32]
 8006b54:	781a      	ldrb	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4619      	mov	r1, r3
 8006b6a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	68da      	ldr	r2, [r3, #12]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b7e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	68da      	ldr	r2, [r3, #12]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b8e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b90:	2300      	movs	r3, #0
 8006b92:	e000      	b.n	8006b96 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b94:	2302      	movs	r3, #2
  }
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr

08006ba2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b082      	sub	sp, #8
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68da      	ldr	r2, [r3, #12]
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006bb8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2220      	movs	r2, #32
 8006bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f7ff fe8e 	bl	80068e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b08c      	sub	sp, #48	; 0x30
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b22      	cmp	r3, #34	; 0x22
 8006be4:	f040 80ab 	bne.w	8006d3e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	689b      	ldr	r3, [r3, #8]
 8006bec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006bf0:	d117      	bne.n	8006c22 <UART_Receive_IT+0x50>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d113      	bne.n	8006c22 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c14:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1a:	1c9a      	adds	r2, r3, #2
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c20:	e026      	b.n	8006c70 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c34:	d007      	beq.n	8006c46 <UART_Receive_IT+0x74>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <UART_Receive_IT+0x82>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d106      	bne.n	8006c54 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	685b      	ldr	r3, [r3, #4]
 8006c4c:	b2da      	uxtb	r2, r3
 8006c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c50:	701a      	strb	r2, [r3, #0]
 8006c52:	e008      	b.n	8006c66 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	685b      	ldr	r3, [r3, #4]
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c60:	b2da      	uxtb	r2, r3
 8006c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c64:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	1c5a      	adds	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	3b01      	subs	r3, #1
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d15a      	bne.n	8006d3a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f022 0220 	bic.w	r2, r2, #32
 8006c92:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	68da      	ldr	r2, [r3, #12]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	695a      	ldr	r2, [r3, #20]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f022 0201 	bic.w	r2, r2, #1
 8006cb2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2220      	movs	r2, #32
 8006cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc0:	2b01      	cmp	r3, #1
 8006cc2:	d135      	bne.n	8006d30 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	330c      	adds	r3, #12
 8006cd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cd2:	697b      	ldr	r3, [r7, #20]
 8006cd4:	e853 3f00 	ldrex	r3, [r3]
 8006cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f023 0310 	bic.w	r3, r3, #16
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	330c      	adds	r3, #12
 8006ce8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cea:	623a      	str	r2, [r7, #32]
 8006cec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cee:	69f9      	ldr	r1, [r7, #28]
 8006cf0:	6a3a      	ldr	r2, [r7, #32]
 8006cf2:	e841 2300 	strex	r3, r2, [r1]
 8006cf6:	61bb      	str	r3, [r7, #24]
   return(result);
 8006cf8:	69bb      	ldr	r3, [r7, #24]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d1e5      	bne.n	8006cca <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0310 	and.w	r3, r3, #16
 8006d08:	2b10      	cmp	r3, #16
 8006d0a:	d10a      	bne.n	8006d22 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	685b      	ldr	r3, [r3, #4]
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d26:	4619      	mov	r1, r3
 8006d28:	6878      	ldr	r0, [r7, #4]
 8006d2a:	f7ff fdf9 	bl	8006920 <HAL_UARTEx_RxEventCallback>
 8006d2e:	e002      	b.n	8006d36 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f7ff fde1 	bl	80068f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006d36:	2300      	movs	r3, #0
 8006d38:	e002      	b.n	8006d40 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	e000      	b.n	8006d40 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8006d3e:	2302      	movs	r3, #2
  }
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3730      	adds	r7, #48	; 0x30
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}

08006d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d4c:	b09f      	sub	sp, #124	; 0x7c
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d5e:	68d9      	ldr	r1, [r3, #12]
 8006d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d62:	681a      	ldr	r2, [r3, #0]
 8006d64:	ea40 0301 	orr.w	r3, r0, r1
 8006d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d6c:	689a      	ldr	r2, [r3, #8]
 8006d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	431a      	orrs	r2, r3
 8006d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d76:	695b      	ldr	r3, [r3, #20]
 8006d78:	431a      	orrs	r2, r3
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	69db      	ldr	r3, [r3, #28]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006d8c:	f021 010c 	bic.w	r1, r1, #12
 8006d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d96:	430b      	orrs	r3, r1
 8006d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da6:	6999      	ldr	r1, [r3, #24]
 8006da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	ea40 0301 	orr.w	r3, r0, r1
 8006db0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	4bc5      	ldr	r3, [pc, #788]	; (80070cc <UART_SetConfig+0x384>)
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d004      	beq.n	8006dc6 <UART_SetConfig+0x7e>
 8006dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4bc3      	ldr	r3, [pc, #780]	; (80070d0 <UART_SetConfig+0x388>)
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d103      	bne.n	8006dce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dc6:	f7fe fabd 	bl	8005344 <HAL_RCC_GetPCLK2Freq>
 8006dca:	6778      	str	r0, [r7, #116]	; 0x74
 8006dcc:	e002      	b.n	8006dd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006dce:	f7fe faa5 	bl	800531c <HAL_RCC_GetPCLK1Freq>
 8006dd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ddc:	f040 80b6 	bne.w	8006f4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de2:	461c      	mov	r4, r3
 8006de4:	f04f 0500 	mov.w	r5, #0
 8006de8:	4622      	mov	r2, r4
 8006dea:	462b      	mov	r3, r5
 8006dec:	1891      	adds	r1, r2, r2
 8006dee:	6439      	str	r1, [r7, #64]	; 0x40
 8006df0:	415b      	adcs	r3, r3
 8006df2:	647b      	str	r3, [r7, #68]	; 0x44
 8006df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006df8:	1912      	adds	r2, r2, r4
 8006dfa:	eb45 0303 	adc.w	r3, r5, r3
 8006dfe:	f04f 0000 	mov.w	r0, #0
 8006e02:	f04f 0100 	mov.w	r1, #0
 8006e06:	00d9      	lsls	r1, r3, #3
 8006e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e0c:	00d0      	lsls	r0, r2, #3
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	1911      	adds	r1, r2, r4
 8006e14:	6639      	str	r1, [r7, #96]	; 0x60
 8006e16:	416b      	adcs	r3, r5
 8006e18:	667b      	str	r3, [r7, #100]	; 0x64
 8006e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	461a      	mov	r2, r3
 8006e20:	f04f 0300 	mov.w	r3, #0
 8006e24:	1891      	adds	r1, r2, r2
 8006e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e28:	415b      	adcs	r3, r3
 8006e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e34:	f7f9 ff38 	bl	8000ca8 <__aeabi_uldivmod>
 8006e38:	4602      	mov	r2, r0
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	4ba5      	ldr	r3, [pc, #660]	; (80070d4 <UART_SetConfig+0x38c>)
 8006e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e42:	095b      	lsrs	r3, r3, #5
 8006e44:	011e      	lsls	r6, r3, #4
 8006e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e48:	461c      	mov	r4, r3
 8006e4a:	f04f 0500 	mov.w	r5, #0
 8006e4e:	4622      	mov	r2, r4
 8006e50:	462b      	mov	r3, r5
 8006e52:	1891      	adds	r1, r2, r2
 8006e54:	6339      	str	r1, [r7, #48]	; 0x30
 8006e56:	415b      	adcs	r3, r3
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
 8006e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e5e:	1912      	adds	r2, r2, r4
 8006e60:	eb45 0303 	adc.w	r3, r5, r3
 8006e64:	f04f 0000 	mov.w	r0, #0
 8006e68:	f04f 0100 	mov.w	r1, #0
 8006e6c:	00d9      	lsls	r1, r3, #3
 8006e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e72:	00d0      	lsls	r0, r2, #3
 8006e74:	4602      	mov	r2, r0
 8006e76:	460b      	mov	r3, r1
 8006e78:	1911      	adds	r1, r2, r4
 8006e7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006e7c:	416b      	adcs	r3, r5
 8006e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	461a      	mov	r2, r3
 8006e86:	f04f 0300 	mov.w	r3, #0
 8006e8a:	1891      	adds	r1, r2, r2
 8006e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8006e8e:	415b      	adcs	r3, r3
 8006e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e9a:	f7f9 ff05 	bl	8000ca8 <__aeabi_uldivmod>
 8006e9e:	4602      	mov	r2, r0
 8006ea0:	460b      	mov	r3, r1
 8006ea2:	4b8c      	ldr	r3, [pc, #560]	; (80070d4 <UART_SetConfig+0x38c>)
 8006ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	2164      	movs	r1, #100	; 0x64
 8006eac:	fb01 f303 	mul.w	r3, r1, r3
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	00db      	lsls	r3, r3, #3
 8006eb4:	3332      	adds	r3, #50	; 0x32
 8006eb6:	4a87      	ldr	r2, [pc, #540]	; (80070d4 <UART_SetConfig+0x38c>)
 8006eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ebc:	095b      	lsrs	r3, r3, #5
 8006ebe:	005b      	lsls	r3, r3, #1
 8006ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ec4:	441e      	add	r6, r3
 8006ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f04f 0100 	mov.w	r1, #0
 8006ece:	4602      	mov	r2, r0
 8006ed0:	460b      	mov	r3, r1
 8006ed2:	1894      	adds	r4, r2, r2
 8006ed4:	623c      	str	r4, [r7, #32]
 8006ed6:	415b      	adcs	r3, r3
 8006ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006ede:	1812      	adds	r2, r2, r0
 8006ee0:	eb41 0303 	adc.w	r3, r1, r3
 8006ee4:	f04f 0400 	mov.w	r4, #0
 8006ee8:	f04f 0500 	mov.w	r5, #0
 8006eec:	00dd      	lsls	r5, r3, #3
 8006eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006ef2:	00d4      	lsls	r4, r2, #3
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	462b      	mov	r3, r5
 8006ef8:	1814      	adds	r4, r2, r0
 8006efa:	653c      	str	r4, [r7, #80]	; 0x50
 8006efc:	414b      	adcs	r3, r1
 8006efe:	657b      	str	r3, [r7, #84]	; 0x54
 8006f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	461a      	mov	r2, r3
 8006f06:	f04f 0300 	mov.w	r3, #0
 8006f0a:	1891      	adds	r1, r2, r2
 8006f0c:	61b9      	str	r1, [r7, #24]
 8006f0e:	415b      	adcs	r3, r3
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f1a:	f7f9 fec5 	bl	8000ca8 <__aeabi_uldivmod>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	460b      	mov	r3, r1
 8006f22:	4b6c      	ldr	r3, [pc, #432]	; (80070d4 <UART_SetConfig+0x38c>)
 8006f24:	fba3 1302 	umull	r1, r3, r3, r2
 8006f28:	095b      	lsrs	r3, r3, #5
 8006f2a:	2164      	movs	r1, #100	; 0x64
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	00db      	lsls	r3, r3, #3
 8006f34:	3332      	adds	r3, #50	; 0x32
 8006f36:	4a67      	ldr	r2, [pc, #412]	; (80070d4 <UART_SetConfig+0x38c>)
 8006f38:	fba2 2303 	umull	r2, r3, r2, r3
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	f003 0207 	and.w	r2, r3, #7
 8006f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4432      	add	r2, r6
 8006f48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f4a:	e0b9      	b.n	80070c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f4e:	461c      	mov	r4, r3
 8006f50:	f04f 0500 	mov.w	r5, #0
 8006f54:	4622      	mov	r2, r4
 8006f56:	462b      	mov	r3, r5
 8006f58:	1891      	adds	r1, r2, r2
 8006f5a:	6139      	str	r1, [r7, #16]
 8006f5c:	415b      	adcs	r3, r3
 8006f5e:	617b      	str	r3, [r7, #20]
 8006f60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f64:	1912      	adds	r2, r2, r4
 8006f66:	eb45 0303 	adc.w	r3, r5, r3
 8006f6a:	f04f 0000 	mov.w	r0, #0
 8006f6e:	f04f 0100 	mov.w	r1, #0
 8006f72:	00d9      	lsls	r1, r3, #3
 8006f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f78:	00d0      	lsls	r0, r2, #3
 8006f7a:	4602      	mov	r2, r0
 8006f7c:	460b      	mov	r3, r1
 8006f7e:	eb12 0804 	adds.w	r8, r2, r4
 8006f82:	eb43 0905 	adc.w	r9, r3, r5
 8006f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f04f 0100 	mov.w	r1, #0
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	008b      	lsls	r3, r1, #2
 8006f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f9e:	0082      	lsls	r2, r0, #2
 8006fa0:	4640      	mov	r0, r8
 8006fa2:	4649      	mov	r1, r9
 8006fa4:	f7f9 fe80 	bl	8000ca8 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4b49      	ldr	r3, [pc, #292]	; (80070d4 <UART_SetConfig+0x38c>)
 8006fae:	fba3 2302 	umull	r2, r3, r3, r2
 8006fb2:	095b      	lsrs	r3, r3, #5
 8006fb4:	011e      	lsls	r6, r3, #4
 8006fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fb8:	4618      	mov	r0, r3
 8006fba:	f04f 0100 	mov.w	r1, #0
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	1894      	adds	r4, r2, r2
 8006fc4:	60bc      	str	r4, [r7, #8]
 8006fc6:	415b      	adcs	r3, r3
 8006fc8:	60fb      	str	r3, [r7, #12]
 8006fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006fce:	1812      	adds	r2, r2, r0
 8006fd0:	eb41 0303 	adc.w	r3, r1, r3
 8006fd4:	f04f 0400 	mov.w	r4, #0
 8006fd8:	f04f 0500 	mov.w	r5, #0
 8006fdc:	00dd      	lsls	r5, r3, #3
 8006fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fe2:	00d4      	lsls	r4, r2, #3
 8006fe4:	4622      	mov	r2, r4
 8006fe6:	462b      	mov	r3, r5
 8006fe8:	1814      	adds	r4, r2, r0
 8006fea:	64bc      	str	r4, [r7, #72]	; 0x48
 8006fec:	414b      	adcs	r3, r1
 8006fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ff2:	685b      	ldr	r3, [r3, #4]
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f04f 0100 	mov.w	r1, #0
 8006ffa:	f04f 0200 	mov.w	r2, #0
 8006ffe:	f04f 0300 	mov.w	r3, #0
 8007002:	008b      	lsls	r3, r1, #2
 8007004:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007008:	0082      	lsls	r2, r0, #2
 800700a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800700e:	f7f9 fe4b 	bl	8000ca8 <__aeabi_uldivmod>
 8007012:	4602      	mov	r2, r0
 8007014:	460b      	mov	r3, r1
 8007016:	4b2f      	ldr	r3, [pc, #188]	; (80070d4 <UART_SetConfig+0x38c>)
 8007018:	fba3 1302 	umull	r1, r3, r3, r2
 800701c:	095b      	lsrs	r3, r3, #5
 800701e:	2164      	movs	r1, #100	; 0x64
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	1ad3      	subs	r3, r2, r3
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	3332      	adds	r3, #50	; 0x32
 800702a:	4a2a      	ldr	r2, [pc, #168]	; (80070d4 <UART_SetConfig+0x38c>)
 800702c:	fba2 2303 	umull	r2, r3, r2, r3
 8007030:	095b      	lsrs	r3, r3, #5
 8007032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007036:	441e      	add	r6, r3
 8007038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800703a:	4618      	mov	r0, r3
 800703c:	f04f 0100 	mov.w	r1, #0
 8007040:	4602      	mov	r2, r0
 8007042:	460b      	mov	r3, r1
 8007044:	1894      	adds	r4, r2, r2
 8007046:	603c      	str	r4, [r7, #0]
 8007048:	415b      	adcs	r3, r3
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007050:	1812      	adds	r2, r2, r0
 8007052:	eb41 0303 	adc.w	r3, r1, r3
 8007056:	f04f 0400 	mov.w	r4, #0
 800705a:	f04f 0500 	mov.w	r5, #0
 800705e:	00dd      	lsls	r5, r3, #3
 8007060:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007064:	00d4      	lsls	r4, r2, #3
 8007066:	4622      	mov	r2, r4
 8007068:	462b      	mov	r3, r5
 800706a:	eb12 0a00 	adds.w	sl, r2, r0
 800706e:	eb43 0b01 	adc.w	fp, r3, r1
 8007072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	4618      	mov	r0, r3
 8007078:	f04f 0100 	mov.w	r1, #0
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	008b      	lsls	r3, r1, #2
 8007086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800708a:	0082      	lsls	r2, r0, #2
 800708c:	4650      	mov	r0, sl
 800708e:	4659      	mov	r1, fp
 8007090:	f7f9 fe0a 	bl	8000ca8 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4b0e      	ldr	r3, [pc, #56]	; (80070d4 <UART_SetConfig+0x38c>)
 800709a:	fba3 1302 	umull	r1, r3, r3, r2
 800709e:	095b      	lsrs	r3, r3, #5
 80070a0:	2164      	movs	r1, #100	; 0x64
 80070a2:	fb01 f303 	mul.w	r3, r1, r3
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	011b      	lsls	r3, r3, #4
 80070aa:	3332      	adds	r3, #50	; 0x32
 80070ac:	4a09      	ldr	r2, [pc, #36]	; (80070d4 <UART_SetConfig+0x38c>)
 80070ae:	fba2 2303 	umull	r2, r3, r2, r3
 80070b2:	095b      	lsrs	r3, r3, #5
 80070b4:	f003 020f 	and.w	r2, r3, #15
 80070b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4432      	add	r2, r6
 80070be:	609a      	str	r2, [r3, #8]
}
 80070c0:	bf00      	nop
 80070c2:	377c      	adds	r7, #124	; 0x7c
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070ca:	bf00      	nop
 80070cc:	40011000 	.word	0x40011000
 80070d0:	40011400 	.word	0x40011400
 80070d4:	51eb851f 	.word	0x51eb851f

080070d8 <__errno>:
 80070d8:	4b01      	ldr	r3, [pc, #4]	; (80070e0 <__errno+0x8>)
 80070da:	6818      	ldr	r0, [r3, #0]
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	2000000c 	.word	0x2000000c

080070e4 <__libc_init_array>:
 80070e4:	b570      	push	{r4, r5, r6, lr}
 80070e6:	4d0d      	ldr	r5, [pc, #52]	; (800711c <__libc_init_array+0x38>)
 80070e8:	4c0d      	ldr	r4, [pc, #52]	; (8007120 <__libc_init_array+0x3c>)
 80070ea:	1b64      	subs	r4, r4, r5
 80070ec:	10a4      	asrs	r4, r4, #2
 80070ee:	2600      	movs	r6, #0
 80070f0:	42a6      	cmp	r6, r4
 80070f2:	d109      	bne.n	8007108 <__libc_init_array+0x24>
 80070f4:	4d0b      	ldr	r5, [pc, #44]	; (8007124 <__libc_init_array+0x40>)
 80070f6:	4c0c      	ldr	r4, [pc, #48]	; (8007128 <__libc_init_array+0x44>)
 80070f8:	f004 fd30 	bl	800bb5c <_init>
 80070fc:	1b64      	subs	r4, r4, r5
 80070fe:	10a4      	asrs	r4, r4, #2
 8007100:	2600      	movs	r6, #0
 8007102:	42a6      	cmp	r6, r4
 8007104:	d105      	bne.n	8007112 <__libc_init_array+0x2e>
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	f855 3b04 	ldr.w	r3, [r5], #4
 800710c:	4798      	blx	r3
 800710e:	3601      	adds	r6, #1
 8007110:	e7ee      	b.n	80070f0 <__libc_init_array+0xc>
 8007112:	f855 3b04 	ldr.w	r3, [r5], #4
 8007116:	4798      	blx	r3
 8007118:	3601      	adds	r6, #1
 800711a:	e7f2      	b.n	8007102 <__libc_init_array+0x1e>
 800711c:	0800c16c 	.word	0x0800c16c
 8007120:	0800c16c 	.word	0x0800c16c
 8007124:	0800c16c 	.word	0x0800c16c
 8007128:	0800c170 	.word	0x0800c170

0800712c <memset>:
 800712c:	4402      	add	r2, r0
 800712e:	4603      	mov	r3, r0
 8007130:	4293      	cmp	r3, r2
 8007132:	d100      	bne.n	8007136 <memset+0xa>
 8007134:	4770      	bx	lr
 8007136:	f803 1b01 	strb.w	r1, [r3], #1
 800713a:	e7f9      	b.n	8007130 <memset+0x4>

0800713c <__cvt>:
 800713c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007140:	ec55 4b10 	vmov	r4, r5, d0
 8007144:	2d00      	cmp	r5, #0
 8007146:	460e      	mov	r6, r1
 8007148:	4619      	mov	r1, r3
 800714a:	462b      	mov	r3, r5
 800714c:	bfbb      	ittet	lt
 800714e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8007152:	461d      	movlt	r5, r3
 8007154:	2300      	movge	r3, #0
 8007156:	232d      	movlt	r3, #45	; 0x2d
 8007158:	700b      	strb	r3, [r1, #0]
 800715a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800715c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007160:	4691      	mov	r9, r2
 8007162:	f023 0820 	bic.w	r8, r3, #32
 8007166:	bfbc      	itt	lt
 8007168:	4622      	movlt	r2, r4
 800716a:	4614      	movlt	r4, r2
 800716c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007170:	d005      	beq.n	800717e <__cvt+0x42>
 8007172:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8007176:	d100      	bne.n	800717a <__cvt+0x3e>
 8007178:	3601      	adds	r6, #1
 800717a:	2102      	movs	r1, #2
 800717c:	e000      	b.n	8007180 <__cvt+0x44>
 800717e:	2103      	movs	r1, #3
 8007180:	ab03      	add	r3, sp, #12
 8007182:	9301      	str	r3, [sp, #4]
 8007184:	ab02      	add	r3, sp, #8
 8007186:	9300      	str	r3, [sp, #0]
 8007188:	ec45 4b10 	vmov	d0, r4, r5
 800718c:	4653      	mov	r3, sl
 800718e:	4632      	mov	r2, r6
 8007190:	f001 ff1a 	bl	8008fc8 <_dtoa_r>
 8007194:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007198:	4607      	mov	r7, r0
 800719a:	d102      	bne.n	80071a2 <__cvt+0x66>
 800719c:	f019 0f01 	tst.w	r9, #1
 80071a0:	d022      	beq.n	80071e8 <__cvt+0xac>
 80071a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80071a6:	eb07 0906 	add.w	r9, r7, r6
 80071aa:	d110      	bne.n	80071ce <__cvt+0x92>
 80071ac:	783b      	ldrb	r3, [r7, #0]
 80071ae:	2b30      	cmp	r3, #48	; 0x30
 80071b0:	d10a      	bne.n	80071c8 <__cvt+0x8c>
 80071b2:	2200      	movs	r2, #0
 80071b4:	2300      	movs	r3, #0
 80071b6:	4620      	mov	r0, r4
 80071b8:	4629      	mov	r1, r5
 80071ba:	f7f9 fc95 	bl	8000ae8 <__aeabi_dcmpeq>
 80071be:	b918      	cbnz	r0, 80071c8 <__cvt+0x8c>
 80071c0:	f1c6 0601 	rsb	r6, r6, #1
 80071c4:	f8ca 6000 	str.w	r6, [sl]
 80071c8:	f8da 3000 	ldr.w	r3, [sl]
 80071cc:	4499      	add	r9, r3
 80071ce:	2200      	movs	r2, #0
 80071d0:	2300      	movs	r3, #0
 80071d2:	4620      	mov	r0, r4
 80071d4:	4629      	mov	r1, r5
 80071d6:	f7f9 fc87 	bl	8000ae8 <__aeabi_dcmpeq>
 80071da:	b108      	cbz	r0, 80071e0 <__cvt+0xa4>
 80071dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80071e0:	2230      	movs	r2, #48	; 0x30
 80071e2:	9b03      	ldr	r3, [sp, #12]
 80071e4:	454b      	cmp	r3, r9
 80071e6:	d307      	bcc.n	80071f8 <__cvt+0xbc>
 80071e8:	9b03      	ldr	r3, [sp, #12]
 80071ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071ec:	1bdb      	subs	r3, r3, r7
 80071ee:	4638      	mov	r0, r7
 80071f0:	6013      	str	r3, [r2, #0]
 80071f2:	b004      	add	sp, #16
 80071f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071f8:	1c59      	adds	r1, r3, #1
 80071fa:	9103      	str	r1, [sp, #12]
 80071fc:	701a      	strb	r2, [r3, #0]
 80071fe:	e7f0      	b.n	80071e2 <__cvt+0xa6>

08007200 <__exponent>:
 8007200:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007202:	4603      	mov	r3, r0
 8007204:	2900      	cmp	r1, #0
 8007206:	bfb8      	it	lt
 8007208:	4249      	neglt	r1, r1
 800720a:	f803 2b02 	strb.w	r2, [r3], #2
 800720e:	bfb4      	ite	lt
 8007210:	222d      	movlt	r2, #45	; 0x2d
 8007212:	222b      	movge	r2, #43	; 0x2b
 8007214:	2909      	cmp	r1, #9
 8007216:	7042      	strb	r2, [r0, #1]
 8007218:	dd2a      	ble.n	8007270 <__exponent+0x70>
 800721a:	f10d 0407 	add.w	r4, sp, #7
 800721e:	46a4      	mov	ip, r4
 8007220:	270a      	movs	r7, #10
 8007222:	46a6      	mov	lr, r4
 8007224:	460a      	mov	r2, r1
 8007226:	fb91 f6f7 	sdiv	r6, r1, r7
 800722a:	fb07 1516 	mls	r5, r7, r6, r1
 800722e:	3530      	adds	r5, #48	; 0x30
 8007230:	2a63      	cmp	r2, #99	; 0x63
 8007232:	f104 34ff 	add.w	r4, r4, #4294967295
 8007236:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800723a:	4631      	mov	r1, r6
 800723c:	dcf1      	bgt.n	8007222 <__exponent+0x22>
 800723e:	3130      	adds	r1, #48	; 0x30
 8007240:	f1ae 0502 	sub.w	r5, lr, #2
 8007244:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007248:	1c44      	adds	r4, r0, #1
 800724a:	4629      	mov	r1, r5
 800724c:	4561      	cmp	r1, ip
 800724e:	d30a      	bcc.n	8007266 <__exponent+0x66>
 8007250:	f10d 0209 	add.w	r2, sp, #9
 8007254:	eba2 020e 	sub.w	r2, r2, lr
 8007258:	4565      	cmp	r5, ip
 800725a:	bf88      	it	hi
 800725c:	2200      	movhi	r2, #0
 800725e:	4413      	add	r3, r2
 8007260:	1a18      	subs	r0, r3, r0
 8007262:	b003      	add	sp, #12
 8007264:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007266:	f811 2b01 	ldrb.w	r2, [r1], #1
 800726a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800726e:	e7ed      	b.n	800724c <__exponent+0x4c>
 8007270:	2330      	movs	r3, #48	; 0x30
 8007272:	3130      	adds	r1, #48	; 0x30
 8007274:	7083      	strb	r3, [r0, #2]
 8007276:	70c1      	strb	r1, [r0, #3]
 8007278:	1d03      	adds	r3, r0, #4
 800727a:	e7f1      	b.n	8007260 <__exponent+0x60>

0800727c <_printf_float>:
 800727c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007280:	ed2d 8b02 	vpush	{d8}
 8007284:	b08d      	sub	sp, #52	; 0x34
 8007286:	460c      	mov	r4, r1
 8007288:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800728c:	4616      	mov	r6, r2
 800728e:	461f      	mov	r7, r3
 8007290:	4605      	mov	r5, r0
 8007292:	f003 f9ab 	bl	800a5ec <_localeconv_r>
 8007296:	f8d0 a000 	ldr.w	sl, [r0]
 800729a:	4650      	mov	r0, sl
 800729c:	f7f8 ffa8 	bl	80001f0 <strlen>
 80072a0:	2300      	movs	r3, #0
 80072a2:	930a      	str	r3, [sp, #40]	; 0x28
 80072a4:	6823      	ldr	r3, [r4, #0]
 80072a6:	9305      	str	r3, [sp, #20]
 80072a8:	f8d8 3000 	ldr.w	r3, [r8]
 80072ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80072b0:	3307      	adds	r3, #7
 80072b2:	f023 0307 	bic.w	r3, r3, #7
 80072b6:	f103 0208 	add.w	r2, r3, #8
 80072ba:	f8c8 2000 	str.w	r2, [r8]
 80072be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072c2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80072c6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80072ca:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80072ce:	9307      	str	r3, [sp, #28]
 80072d0:	f8cd 8018 	str.w	r8, [sp, #24]
 80072d4:	ee08 0a10 	vmov	s16, r0
 80072d8:	4b9f      	ldr	r3, [pc, #636]	; (8007558 <_printf_float+0x2dc>)
 80072da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072de:	f04f 32ff 	mov.w	r2, #4294967295
 80072e2:	f7f9 fc33 	bl	8000b4c <__aeabi_dcmpun>
 80072e6:	bb88      	cbnz	r0, 800734c <_printf_float+0xd0>
 80072e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80072ec:	4b9a      	ldr	r3, [pc, #616]	; (8007558 <_printf_float+0x2dc>)
 80072ee:	f04f 32ff 	mov.w	r2, #4294967295
 80072f2:	f7f9 fc0d 	bl	8000b10 <__aeabi_dcmple>
 80072f6:	bb48      	cbnz	r0, 800734c <_printf_float+0xd0>
 80072f8:	2200      	movs	r2, #0
 80072fa:	2300      	movs	r3, #0
 80072fc:	4640      	mov	r0, r8
 80072fe:	4649      	mov	r1, r9
 8007300:	f7f9 fbfc 	bl	8000afc <__aeabi_dcmplt>
 8007304:	b110      	cbz	r0, 800730c <_printf_float+0x90>
 8007306:	232d      	movs	r3, #45	; 0x2d
 8007308:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800730c:	4b93      	ldr	r3, [pc, #588]	; (800755c <_printf_float+0x2e0>)
 800730e:	4894      	ldr	r0, [pc, #592]	; (8007560 <_printf_float+0x2e4>)
 8007310:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007314:	bf94      	ite	ls
 8007316:	4698      	movls	r8, r3
 8007318:	4680      	movhi	r8, r0
 800731a:	2303      	movs	r3, #3
 800731c:	6123      	str	r3, [r4, #16]
 800731e:	9b05      	ldr	r3, [sp, #20]
 8007320:	f023 0204 	bic.w	r2, r3, #4
 8007324:	6022      	str	r2, [r4, #0]
 8007326:	f04f 0900 	mov.w	r9, #0
 800732a:	9700      	str	r7, [sp, #0]
 800732c:	4633      	mov	r3, r6
 800732e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007330:	4621      	mov	r1, r4
 8007332:	4628      	mov	r0, r5
 8007334:	f000 f9d8 	bl	80076e8 <_printf_common>
 8007338:	3001      	adds	r0, #1
 800733a:	f040 8090 	bne.w	800745e <_printf_float+0x1e2>
 800733e:	f04f 30ff 	mov.w	r0, #4294967295
 8007342:	b00d      	add	sp, #52	; 0x34
 8007344:	ecbd 8b02 	vpop	{d8}
 8007348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734c:	4642      	mov	r2, r8
 800734e:	464b      	mov	r3, r9
 8007350:	4640      	mov	r0, r8
 8007352:	4649      	mov	r1, r9
 8007354:	f7f9 fbfa 	bl	8000b4c <__aeabi_dcmpun>
 8007358:	b140      	cbz	r0, 800736c <_printf_float+0xf0>
 800735a:	464b      	mov	r3, r9
 800735c:	2b00      	cmp	r3, #0
 800735e:	bfbc      	itt	lt
 8007360:	232d      	movlt	r3, #45	; 0x2d
 8007362:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007366:	487f      	ldr	r0, [pc, #508]	; (8007564 <_printf_float+0x2e8>)
 8007368:	4b7f      	ldr	r3, [pc, #508]	; (8007568 <_printf_float+0x2ec>)
 800736a:	e7d1      	b.n	8007310 <_printf_float+0x94>
 800736c:	6863      	ldr	r3, [r4, #4]
 800736e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007372:	9206      	str	r2, [sp, #24]
 8007374:	1c5a      	adds	r2, r3, #1
 8007376:	d13f      	bne.n	80073f8 <_printf_float+0x17c>
 8007378:	2306      	movs	r3, #6
 800737a:	6063      	str	r3, [r4, #4]
 800737c:	9b05      	ldr	r3, [sp, #20]
 800737e:	6861      	ldr	r1, [r4, #4]
 8007380:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007384:	2300      	movs	r3, #0
 8007386:	9303      	str	r3, [sp, #12]
 8007388:	ab0a      	add	r3, sp, #40	; 0x28
 800738a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800738e:	ab09      	add	r3, sp, #36	; 0x24
 8007390:	ec49 8b10 	vmov	d0, r8, r9
 8007394:	9300      	str	r3, [sp, #0]
 8007396:	6022      	str	r2, [r4, #0]
 8007398:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800739c:	4628      	mov	r0, r5
 800739e:	f7ff fecd 	bl	800713c <__cvt>
 80073a2:	9b06      	ldr	r3, [sp, #24]
 80073a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80073a6:	2b47      	cmp	r3, #71	; 0x47
 80073a8:	4680      	mov	r8, r0
 80073aa:	d108      	bne.n	80073be <_printf_float+0x142>
 80073ac:	1cc8      	adds	r0, r1, #3
 80073ae:	db02      	blt.n	80073b6 <_printf_float+0x13a>
 80073b0:	6863      	ldr	r3, [r4, #4]
 80073b2:	4299      	cmp	r1, r3
 80073b4:	dd41      	ble.n	800743a <_printf_float+0x1be>
 80073b6:	f1ab 0b02 	sub.w	fp, fp, #2
 80073ba:	fa5f fb8b 	uxtb.w	fp, fp
 80073be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80073c2:	d820      	bhi.n	8007406 <_printf_float+0x18a>
 80073c4:	3901      	subs	r1, #1
 80073c6:	465a      	mov	r2, fp
 80073c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80073cc:	9109      	str	r1, [sp, #36]	; 0x24
 80073ce:	f7ff ff17 	bl	8007200 <__exponent>
 80073d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80073d4:	1813      	adds	r3, r2, r0
 80073d6:	2a01      	cmp	r2, #1
 80073d8:	4681      	mov	r9, r0
 80073da:	6123      	str	r3, [r4, #16]
 80073dc:	dc02      	bgt.n	80073e4 <_printf_float+0x168>
 80073de:	6822      	ldr	r2, [r4, #0]
 80073e0:	07d2      	lsls	r2, r2, #31
 80073e2:	d501      	bpl.n	80073e8 <_printf_float+0x16c>
 80073e4:	3301      	adds	r3, #1
 80073e6:	6123      	str	r3, [r4, #16]
 80073e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d09c      	beq.n	800732a <_printf_float+0xae>
 80073f0:	232d      	movs	r3, #45	; 0x2d
 80073f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073f6:	e798      	b.n	800732a <_printf_float+0xae>
 80073f8:	9a06      	ldr	r2, [sp, #24]
 80073fa:	2a47      	cmp	r2, #71	; 0x47
 80073fc:	d1be      	bne.n	800737c <_printf_float+0x100>
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d1bc      	bne.n	800737c <_printf_float+0x100>
 8007402:	2301      	movs	r3, #1
 8007404:	e7b9      	b.n	800737a <_printf_float+0xfe>
 8007406:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800740a:	d118      	bne.n	800743e <_printf_float+0x1c2>
 800740c:	2900      	cmp	r1, #0
 800740e:	6863      	ldr	r3, [r4, #4]
 8007410:	dd0b      	ble.n	800742a <_printf_float+0x1ae>
 8007412:	6121      	str	r1, [r4, #16]
 8007414:	b913      	cbnz	r3, 800741c <_printf_float+0x1a0>
 8007416:	6822      	ldr	r2, [r4, #0]
 8007418:	07d0      	lsls	r0, r2, #31
 800741a:	d502      	bpl.n	8007422 <_printf_float+0x1a6>
 800741c:	3301      	adds	r3, #1
 800741e:	440b      	add	r3, r1
 8007420:	6123      	str	r3, [r4, #16]
 8007422:	65a1      	str	r1, [r4, #88]	; 0x58
 8007424:	f04f 0900 	mov.w	r9, #0
 8007428:	e7de      	b.n	80073e8 <_printf_float+0x16c>
 800742a:	b913      	cbnz	r3, 8007432 <_printf_float+0x1b6>
 800742c:	6822      	ldr	r2, [r4, #0]
 800742e:	07d2      	lsls	r2, r2, #31
 8007430:	d501      	bpl.n	8007436 <_printf_float+0x1ba>
 8007432:	3302      	adds	r3, #2
 8007434:	e7f4      	b.n	8007420 <_printf_float+0x1a4>
 8007436:	2301      	movs	r3, #1
 8007438:	e7f2      	b.n	8007420 <_printf_float+0x1a4>
 800743a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800743e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007440:	4299      	cmp	r1, r3
 8007442:	db05      	blt.n	8007450 <_printf_float+0x1d4>
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	6121      	str	r1, [r4, #16]
 8007448:	07d8      	lsls	r0, r3, #31
 800744a:	d5ea      	bpl.n	8007422 <_printf_float+0x1a6>
 800744c:	1c4b      	adds	r3, r1, #1
 800744e:	e7e7      	b.n	8007420 <_printf_float+0x1a4>
 8007450:	2900      	cmp	r1, #0
 8007452:	bfd4      	ite	le
 8007454:	f1c1 0202 	rsble	r2, r1, #2
 8007458:	2201      	movgt	r2, #1
 800745a:	4413      	add	r3, r2
 800745c:	e7e0      	b.n	8007420 <_printf_float+0x1a4>
 800745e:	6823      	ldr	r3, [r4, #0]
 8007460:	055a      	lsls	r2, r3, #21
 8007462:	d407      	bmi.n	8007474 <_printf_float+0x1f8>
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	4642      	mov	r2, r8
 8007468:	4631      	mov	r1, r6
 800746a:	4628      	mov	r0, r5
 800746c:	47b8      	blx	r7
 800746e:	3001      	adds	r0, #1
 8007470:	d12c      	bne.n	80074cc <_printf_float+0x250>
 8007472:	e764      	b.n	800733e <_printf_float+0xc2>
 8007474:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007478:	f240 80e0 	bls.w	800763c <_printf_float+0x3c0>
 800747c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007480:	2200      	movs	r2, #0
 8007482:	2300      	movs	r3, #0
 8007484:	f7f9 fb30 	bl	8000ae8 <__aeabi_dcmpeq>
 8007488:	2800      	cmp	r0, #0
 800748a:	d034      	beq.n	80074f6 <_printf_float+0x27a>
 800748c:	4a37      	ldr	r2, [pc, #220]	; (800756c <_printf_float+0x2f0>)
 800748e:	2301      	movs	r3, #1
 8007490:	4631      	mov	r1, r6
 8007492:	4628      	mov	r0, r5
 8007494:	47b8      	blx	r7
 8007496:	3001      	adds	r0, #1
 8007498:	f43f af51 	beq.w	800733e <_printf_float+0xc2>
 800749c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80074a0:	429a      	cmp	r2, r3
 80074a2:	db02      	blt.n	80074aa <_printf_float+0x22e>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	07d8      	lsls	r0, r3, #31
 80074a8:	d510      	bpl.n	80074cc <_printf_float+0x250>
 80074aa:	ee18 3a10 	vmov	r3, s16
 80074ae:	4652      	mov	r2, sl
 80074b0:	4631      	mov	r1, r6
 80074b2:	4628      	mov	r0, r5
 80074b4:	47b8      	blx	r7
 80074b6:	3001      	adds	r0, #1
 80074b8:	f43f af41 	beq.w	800733e <_printf_float+0xc2>
 80074bc:	f04f 0800 	mov.w	r8, #0
 80074c0:	f104 091a 	add.w	r9, r4, #26
 80074c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80074c6:	3b01      	subs	r3, #1
 80074c8:	4543      	cmp	r3, r8
 80074ca:	dc09      	bgt.n	80074e0 <_printf_float+0x264>
 80074cc:	6823      	ldr	r3, [r4, #0]
 80074ce:	079b      	lsls	r3, r3, #30
 80074d0:	f100 8105 	bmi.w	80076de <_printf_float+0x462>
 80074d4:	68e0      	ldr	r0, [r4, #12]
 80074d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80074d8:	4298      	cmp	r0, r3
 80074da:	bfb8      	it	lt
 80074dc:	4618      	movlt	r0, r3
 80074de:	e730      	b.n	8007342 <_printf_float+0xc6>
 80074e0:	2301      	movs	r3, #1
 80074e2:	464a      	mov	r2, r9
 80074e4:	4631      	mov	r1, r6
 80074e6:	4628      	mov	r0, r5
 80074e8:	47b8      	blx	r7
 80074ea:	3001      	adds	r0, #1
 80074ec:	f43f af27 	beq.w	800733e <_printf_float+0xc2>
 80074f0:	f108 0801 	add.w	r8, r8, #1
 80074f4:	e7e6      	b.n	80074c4 <_printf_float+0x248>
 80074f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	dc39      	bgt.n	8007570 <_printf_float+0x2f4>
 80074fc:	4a1b      	ldr	r2, [pc, #108]	; (800756c <_printf_float+0x2f0>)
 80074fe:	2301      	movs	r3, #1
 8007500:	4631      	mov	r1, r6
 8007502:	4628      	mov	r0, r5
 8007504:	47b8      	blx	r7
 8007506:	3001      	adds	r0, #1
 8007508:	f43f af19 	beq.w	800733e <_printf_float+0xc2>
 800750c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007510:	4313      	orrs	r3, r2
 8007512:	d102      	bne.n	800751a <_printf_float+0x29e>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	07d9      	lsls	r1, r3, #31
 8007518:	d5d8      	bpl.n	80074cc <_printf_float+0x250>
 800751a:	ee18 3a10 	vmov	r3, s16
 800751e:	4652      	mov	r2, sl
 8007520:	4631      	mov	r1, r6
 8007522:	4628      	mov	r0, r5
 8007524:	47b8      	blx	r7
 8007526:	3001      	adds	r0, #1
 8007528:	f43f af09 	beq.w	800733e <_printf_float+0xc2>
 800752c:	f04f 0900 	mov.w	r9, #0
 8007530:	f104 0a1a 	add.w	sl, r4, #26
 8007534:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007536:	425b      	negs	r3, r3
 8007538:	454b      	cmp	r3, r9
 800753a:	dc01      	bgt.n	8007540 <_printf_float+0x2c4>
 800753c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800753e:	e792      	b.n	8007466 <_printf_float+0x1ea>
 8007540:	2301      	movs	r3, #1
 8007542:	4652      	mov	r2, sl
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f aef7 	beq.w	800733e <_printf_float+0xc2>
 8007550:	f109 0901 	add.w	r9, r9, #1
 8007554:	e7ee      	b.n	8007534 <_printf_float+0x2b8>
 8007556:	bf00      	nop
 8007558:	7fefffff 	.word	0x7fefffff
 800755c:	0800bcb0 	.word	0x0800bcb0
 8007560:	0800bcb4 	.word	0x0800bcb4
 8007564:	0800bcbc 	.word	0x0800bcbc
 8007568:	0800bcb8 	.word	0x0800bcb8
 800756c:	0800bcc0 	.word	0x0800bcc0
 8007570:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007572:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007574:	429a      	cmp	r2, r3
 8007576:	bfa8      	it	ge
 8007578:	461a      	movge	r2, r3
 800757a:	2a00      	cmp	r2, #0
 800757c:	4691      	mov	r9, r2
 800757e:	dc37      	bgt.n	80075f0 <_printf_float+0x374>
 8007580:	f04f 0b00 	mov.w	fp, #0
 8007584:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007588:	f104 021a 	add.w	r2, r4, #26
 800758c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800758e:	9305      	str	r3, [sp, #20]
 8007590:	eba3 0309 	sub.w	r3, r3, r9
 8007594:	455b      	cmp	r3, fp
 8007596:	dc33      	bgt.n	8007600 <_printf_float+0x384>
 8007598:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800759c:	429a      	cmp	r2, r3
 800759e:	db3b      	blt.n	8007618 <_printf_float+0x39c>
 80075a0:	6823      	ldr	r3, [r4, #0]
 80075a2:	07da      	lsls	r2, r3, #31
 80075a4:	d438      	bmi.n	8007618 <_printf_float+0x39c>
 80075a6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075a8:	9b05      	ldr	r3, [sp, #20]
 80075aa:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075ac:	1ad3      	subs	r3, r2, r3
 80075ae:	eba2 0901 	sub.w	r9, r2, r1
 80075b2:	4599      	cmp	r9, r3
 80075b4:	bfa8      	it	ge
 80075b6:	4699      	movge	r9, r3
 80075b8:	f1b9 0f00 	cmp.w	r9, #0
 80075bc:	dc35      	bgt.n	800762a <_printf_float+0x3ae>
 80075be:	f04f 0800 	mov.w	r8, #0
 80075c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075c6:	f104 0a1a 	add.w	sl, r4, #26
 80075ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80075ce:	1a9b      	subs	r3, r3, r2
 80075d0:	eba3 0309 	sub.w	r3, r3, r9
 80075d4:	4543      	cmp	r3, r8
 80075d6:	f77f af79 	ble.w	80074cc <_printf_float+0x250>
 80075da:	2301      	movs	r3, #1
 80075dc:	4652      	mov	r2, sl
 80075de:	4631      	mov	r1, r6
 80075e0:	4628      	mov	r0, r5
 80075e2:	47b8      	blx	r7
 80075e4:	3001      	adds	r0, #1
 80075e6:	f43f aeaa 	beq.w	800733e <_printf_float+0xc2>
 80075ea:	f108 0801 	add.w	r8, r8, #1
 80075ee:	e7ec      	b.n	80075ca <_printf_float+0x34e>
 80075f0:	4613      	mov	r3, r2
 80075f2:	4631      	mov	r1, r6
 80075f4:	4642      	mov	r2, r8
 80075f6:	4628      	mov	r0, r5
 80075f8:	47b8      	blx	r7
 80075fa:	3001      	adds	r0, #1
 80075fc:	d1c0      	bne.n	8007580 <_printf_float+0x304>
 80075fe:	e69e      	b.n	800733e <_printf_float+0xc2>
 8007600:	2301      	movs	r3, #1
 8007602:	4631      	mov	r1, r6
 8007604:	4628      	mov	r0, r5
 8007606:	9205      	str	r2, [sp, #20]
 8007608:	47b8      	blx	r7
 800760a:	3001      	adds	r0, #1
 800760c:	f43f ae97 	beq.w	800733e <_printf_float+0xc2>
 8007610:	9a05      	ldr	r2, [sp, #20]
 8007612:	f10b 0b01 	add.w	fp, fp, #1
 8007616:	e7b9      	b.n	800758c <_printf_float+0x310>
 8007618:	ee18 3a10 	vmov	r3, s16
 800761c:	4652      	mov	r2, sl
 800761e:	4631      	mov	r1, r6
 8007620:	4628      	mov	r0, r5
 8007622:	47b8      	blx	r7
 8007624:	3001      	adds	r0, #1
 8007626:	d1be      	bne.n	80075a6 <_printf_float+0x32a>
 8007628:	e689      	b.n	800733e <_printf_float+0xc2>
 800762a:	9a05      	ldr	r2, [sp, #20]
 800762c:	464b      	mov	r3, r9
 800762e:	4442      	add	r2, r8
 8007630:	4631      	mov	r1, r6
 8007632:	4628      	mov	r0, r5
 8007634:	47b8      	blx	r7
 8007636:	3001      	adds	r0, #1
 8007638:	d1c1      	bne.n	80075be <_printf_float+0x342>
 800763a:	e680      	b.n	800733e <_printf_float+0xc2>
 800763c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800763e:	2a01      	cmp	r2, #1
 8007640:	dc01      	bgt.n	8007646 <_printf_float+0x3ca>
 8007642:	07db      	lsls	r3, r3, #31
 8007644:	d538      	bpl.n	80076b8 <_printf_float+0x43c>
 8007646:	2301      	movs	r3, #1
 8007648:	4642      	mov	r2, r8
 800764a:	4631      	mov	r1, r6
 800764c:	4628      	mov	r0, r5
 800764e:	47b8      	blx	r7
 8007650:	3001      	adds	r0, #1
 8007652:	f43f ae74 	beq.w	800733e <_printf_float+0xc2>
 8007656:	ee18 3a10 	vmov	r3, s16
 800765a:	4652      	mov	r2, sl
 800765c:	4631      	mov	r1, r6
 800765e:	4628      	mov	r0, r5
 8007660:	47b8      	blx	r7
 8007662:	3001      	adds	r0, #1
 8007664:	f43f ae6b 	beq.w	800733e <_printf_float+0xc2>
 8007668:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800766c:	2200      	movs	r2, #0
 800766e:	2300      	movs	r3, #0
 8007670:	f7f9 fa3a 	bl	8000ae8 <__aeabi_dcmpeq>
 8007674:	b9d8      	cbnz	r0, 80076ae <_printf_float+0x432>
 8007676:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007678:	f108 0201 	add.w	r2, r8, #1
 800767c:	3b01      	subs	r3, #1
 800767e:	4631      	mov	r1, r6
 8007680:	4628      	mov	r0, r5
 8007682:	47b8      	blx	r7
 8007684:	3001      	adds	r0, #1
 8007686:	d10e      	bne.n	80076a6 <_printf_float+0x42a>
 8007688:	e659      	b.n	800733e <_printf_float+0xc2>
 800768a:	2301      	movs	r3, #1
 800768c:	4652      	mov	r2, sl
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae52 	beq.w	800733e <_printf_float+0xc2>
 800769a:	f108 0801 	add.w	r8, r8, #1
 800769e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076a0:	3b01      	subs	r3, #1
 80076a2:	4543      	cmp	r3, r8
 80076a4:	dcf1      	bgt.n	800768a <_printf_float+0x40e>
 80076a6:	464b      	mov	r3, r9
 80076a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80076ac:	e6dc      	b.n	8007468 <_printf_float+0x1ec>
 80076ae:	f04f 0800 	mov.w	r8, #0
 80076b2:	f104 0a1a 	add.w	sl, r4, #26
 80076b6:	e7f2      	b.n	800769e <_printf_float+0x422>
 80076b8:	2301      	movs	r3, #1
 80076ba:	4642      	mov	r2, r8
 80076bc:	e7df      	b.n	800767e <_printf_float+0x402>
 80076be:	2301      	movs	r3, #1
 80076c0:	464a      	mov	r2, r9
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	f43f ae38 	beq.w	800733e <_printf_float+0xc2>
 80076ce:	f108 0801 	add.w	r8, r8, #1
 80076d2:	68e3      	ldr	r3, [r4, #12]
 80076d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80076d6:	1a5b      	subs	r3, r3, r1
 80076d8:	4543      	cmp	r3, r8
 80076da:	dcf0      	bgt.n	80076be <_printf_float+0x442>
 80076dc:	e6fa      	b.n	80074d4 <_printf_float+0x258>
 80076de:	f04f 0800 	mov.w	r8, #0
 80076e2:	f104 0919 	add.w	r9, r4, #25
 80076e6:	e7f4      	b.n	80076d2 <_printf_float+0x456>

080076e8 <_printf_common>:
 80076e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076ec:	4616      	mov	r6, r2
 80076ee:	4699      	mov	r9, r3
 80076f0:	688a      	ldr	r2, [r1, #8]
 80076f2:	690b      	ldr	r3, [r1, #16]
 80076f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80076f8:	4293      	cmp	r3, r2
 80076fa:	bfb8      	it	lt
 80076fc:	4613      	movlt	r3, r2
 80076fe:	6033      	str	r3, [r6, #0]
 8007700:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007704:	4607      	mov	r7, r0
 8007706:	460c      	mov	r4, r1
 8007708:	b10a      	cbz	r2, 800770e <_printf_common+0x26>
 800770a:	3301      	adds	r3, #1
 800770c:	6033      	str	r3, [r6, #0]
 800770e:	6823      	ldr	r3, [r4, #0]
 8007710:	0699      	lsls	r1, r3, #26
 8007712:	bf42      	ittt	mi
 8007714:	6833      	ldrmi	r3, [r6, #0]
 8007716:	3302      	addmi	r3, #2
 8007718:	6033      	strmi	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	f015 0506 	ands.w	r5, r5, #6
 8007720:	d106      	bne.n	8007730 <_printf_common+0x48>
 8007722:	f104 0a19 	add.w	sl, r4, #25
 8007726:	68e3      	ldr	r3, [r4, #12]
 8007728:	6832      	ldr	r2, [r6, #0]
 800772a:	1a9b      	subs	r3, r3, r2
 800772c:	42ab      	cmp	r3, r5
 800772e:	dc26      	bgt.n	800777e <_printf_common+0x96>
 8007730:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007734:	1e13      	subs	r3, r2, #0
 8007736:	6822      	ldr	r2, [r4, #0]
 8007738:	bf18      	it	ne
 800773a:	2301      	movne	r3, #1
 800773c:	0692      	lsls	r2, r2, #26
 800773e:	d42b      	bmi.n	8007798 <_printf_common+0xb0>
 8007740:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007744:	4649      	mov	r1, r9
 8007746:	4638      	mov	r0, r7
 8007748:	47c0      	blx	r8
 800774a:	3001      	adds	r0, #1
 800774c:	d01e      	beq.n	800778c <_printf_common+0xa4>
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	68e5      	ldr	r5, [r4, #12]
 8007752:	6832      	ldr	r2, [r6, #0]
 8007754:	f003 0306 	and.w	r3, r3, #6
 8007758:	2b04      	cmp	r3, #4
 800775a:	bf08      	it	eq
 800775c:	1aad      	subeq	r5, r5, r2
 800775e:	68a3      	ldr	r3, [r4, #8]
 8007760:	6922      	ldr	r2, [r4, #16]
 8007762:	bf0c      	ite	eq
 8007764:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007768:	2500      	movne	r5, #0
 800776a:	4293      	cmp	r3, r2
 800776c:	bfc4      	itt	gt
 800776e:	1a9b      	subgt	r3, r3, r2
 8007770:	18ed      	addgt	r5, r5, r3
 8007772:	2600      	movs	r6, #0
 8007774:	341a      	adds	r4, #26
 8007776:	42b5      	cmp	r5, r6
 8007778:	d11a      	bne.n	80077b0 <_printf_common+0xc8>
 800777a:	2000      	movs	r0, #0
 800777c:	e008      	b.n	8007790 <_printf_common+0xa8>
 800777e:	2301      	movs	r3, #1
 8007780:	4652      	mov	r2, sl
 8007782:	4649      	mov	r1, r9
 8007784:	4638      	mov	r0, r7
 8007786:	47c0      	blx	r8
 8007788:	3001      	adds	r0, #1
 800778a:	d103      	bne.n	8007794 <_printf_common+0xac>
 800778c:	f04f 30ff 	mov.w	r0, #4294967295
 8007790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007794:	3501      	adds	r5, #1
 8007796:	e7c6      	b.n	8007726 <_printf_common+0x3e>
 8007798:	18e1      	adds	r1, r4, r3
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	2030      	movs	r0, #48	; 0x30
 800779e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80077a2:	4422      	add	r2, r4
 80077a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80077a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80077ac:	3302      	adds	r3, #2
 80077ae:	e7c7      	b.n	8007740 <_printf_common+0x58>
 80077b0:	2301      	movs	r3, #1
 80077b2:	4622      	mov	r2, r4
 80077b4:	4649      	mov	r1, r9
 80077b6:	4638      	mov	r0, r7
 80077b8:	47c0      	blx	r8
 80077ba:	3001      	adds	r0, #1
 80077bc:	d0e6      	beq.n	800778c <_printf_common+0xa4>
 80077be:	3601      	adds	r6, #1
 80077c0:	e7d9      	b.n	8007776 <_printf_common+0x8e>
	...

080077c4 <_printf_i>:
 80077c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077c8:	460c      	mov	r4, r1
 80077ca:	4691      	mov	r9, r2
 80077cc:	7e27      	ldrb	r7, [r4, #24]
 80077ce:	990c      	ldr	r1, [sp, #48]	; 0x30
 80077d0:	2f78      	cmp	r7, #120	; 0x78
 80077d2:	4680      	mov	r8, r0
 80077d4:	469a      	mov	sl, r3
 80077d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077da:	d807      	bhi.n	80077ec <_printf_i+0x28>
 80077dc:	2f62      	cmp	r7, #98	; 0x62
 80077de:	d80a      	bhi.n	80077f6 <_printf_i+0x32>
 80077e0:	2f00      	cmp	r7, #0
 80077e2:	f000 80d8 	beq.w	8007996 <_printf_i+0x1d2>
 80077e6:	2f58      	cmp	r7, #88	; 0x58
 80077e8:	f000 80a3 	beq.w	8007932 <_printf_i+0x16e>
 80077ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80077f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80077f4:	e03a      	b.n	800786c <_printf_i+0xa8>
 80077f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80077fa:	2b15      	cmp	r3, #21
 80077fc:	d8f6      	bhi.n	80077ec <_printf_i+0x28>
 80077fe:	a001      	add	r0, pc, #4	; (adr r0, 8007804 <_printf_i+0x40>)
 8007800:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007804:	0800785d 	.word	0x0800785d
 8007808:	08007871 	.word	0x08007871
 800780c:	080077ed 	.word	0x080077ed
 8007810:	080077ed 	.word	0x080077ed
 8007814:	080077ed 	.word	0x080077ed
 8007818:	080077ed 	.word	0x080077ed
 800781c:	08007871 	.word	0x08007871
 8007820:	080077ed 	.word	0x080077ed
 8007824:	080077ed 	.word	0x080077ed
 8007828:	080077ed 	.word	0x080077ed
 800782c:	080077ed 	.word	0x080077ed
 8007830:	0800797d 	.word	0x0800797d
 8007834:	080078a1 	.word	0x080078a1
 8007838:	0800795f 	.word	0x0800795f
 800783c:	080077ed 	.word	0x080077ed
 8007840:	080077ed 	.word	0x080077ed
 8007844:	0800799f 	.word	0x0800799f
 8007848:	080077ed 	.word	0x080077ed
 800784c:	080078a1 	.word	0x080078a1
 8007850:	080077ed 	.word	0x080077ed
 8007854:	080077ed 	.word	0x080077ed
 8007858:	08007967 	.word	0x08007967
 800785c:	680b      	ldr	r3, [r1, #0]
 800785e:	1d1a      	adds	r2, r3, #4
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	600a      	str	r2, [r1, #0]
 8007864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007868:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800786c:	2301      	movs	r3, #1
 800786e:	e0a3      	b.n	80079b8 <_printf_i+0x1f4>
 8007870:	6825      	ldr	r5, [r4, #0]
 8007872:	6808      	ldr	r0, [r1, #0]
 8007874:	062e      	lsls	r6, r5, #24
 8007876:	f100 0304 	add.w	r3, r0, #4
 800787a:	d50a      	bpl.n	8007892 <_printf_i+0xce>
 800787c:	6805      	ldr	r5, [r0, #0]
 800787e:	600b      	str	r3, [r1, #0]
 8007880:	2d00      	cmp	r5, #0
 8007882:	da03      	bge.n	800788c <_printf_i+0xc8>
 8007884:	232d      	movs	r3, #45	; 0x2d
 8007886:	426d      	negs	r5, r5
 8007888:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800788c:	485e      	ldr	r0, [pc, #376]	; (8007a08 <_printf_i+0x244>)
 800788e:	230a      	movs	r3, #10
 8007890:	e019      	b.n	80078c6 <_printf_i+0x102>
 8007892:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007896:	6805      	ldr	r5, [r0, #0]
 8007898:	600b      	str	r3, [r1, #0]
 800789a:	bf18      	it	ne
 800789c:	b22d      	sxthne	r5, r5
 800789e:	e7ef      	b.n	8007880 <_printf_i+0xbc>
 80078a0:	680b      	ldr	r3, [r1, #0]
 80078a2:	6825      	ldr	r5, [r4, #0]
 80078a4:	1d18      	adds	r0, r3, #4
 80078a6:	6008      	str	r0, [r1, #0]
 80078a8:	0628      	lsls	r0, r5, #24
 80078aa:	d501      	bpl.n	80078b0 <_printf_i+0xec>
 80078ac:	681d      	ldr	r5, [r3, #0]
 80078ae:	e002      	b.n	80078b6 <_printf_i+0xf2>
 80078b0:	0669      	lsls	r1, r5, #25
 80078b2:	d5fb      	bpl.n	80078ac <_printf_i+0xe8>
 80078b4:	881d      	ldrh	r5, [r3, #0]
 80078b6:	4854      	ldr	r0, [pc, #336]	; (8007a08 <_printf_i+0x244>)
 80078b8:	2f6f      	cmp	r7, #111	; 0x6f
 80078ba:	bf0c      	ite	eq
 80078bc:	2308      	moveq	r3, #8
 80078be:	230a      	movne	r3, #10
 80078c0:	2100      	movs	r1, #0
 80078c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80078c6:	6866      	ldr	r6, [r4, #4]
 80078c8:	60a6      	str	r6, [r4, #8]
 80078ca:	2e00      	cmp	r6, #0
 80078cc:	bfa2      	ittt	ge
 80078ce:	6821      	ldrge	r1, [r4, #0]
 80078d0:	f021 0104 	bicge.w	r1, r1, #4
 80078d4:	6021      	strge	r1, [r4, #0]
 80078d6:	b90d      	cbnz	r5, 80078dc <_printf_i+0x118>
 80078d8:	2e00      	cmp	r6, #0
 80078da:	d04d      	beq.n	8007978 <_printf_i+0x1b4>
 80078dc:	4616      	mov	r6, r2
 80078de:	fbb5 f1f3 	udiv	r1, r5, r3
 80078e2:	fb03 5711 	mls	r7, r3, r1, r5
 80078e6:	5dc7      	ldrb	r7, [r0, r7]
 80078e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078ec:	462f      	mov	r7, r5
 80078ee:	42bb      	cmp	r3, r7
 80078f0:	460d      	mov	r5, r1
 80078f2:	d9f4      	bls.n	80078de <_printf_i+0x11a>
 80078f4:	2b08      	cmp	r3, #8
 80078f6:	d10b      	bne.n	8007910 <_printf_i+0x14c>
 80078f8:	6823      	ldr	r3, [r4, #0]
 80078fa:	07df      	lsls	r7, r3, #31
 80078fc:	d508      	bpl.n	8007910 <_printf_i+0x14c>
 80078fe:	6923      	ldr	r3, [r4, #16]
 8007900:	6861      	ldr	r1, [r4, #4]
 8007902:	4299      	cmp	r1, r3
 8007904:	bfde      	ittt	le
 8007906:	2330      	movle	r3, #48	; 0x30
 8007908:	f806 3c01 	strble.w	r3, [r6, #-1]
 800790c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007910:	1b92      	subs	r2, r2, r6
 8007912:	6122      	str	r2, [r4, #16]
 8007914:	f8cd a000 	str.w	sl, [sp]
 8007918:	464b      	mov	r3, r9
 800791a:	aa03      	add	r2, sp, #12
 800791c:	4621      	mov	r1, r4
 800791e:	4640      	mov	r0, r8
 8007920:	f7ff fee2 	bl	80076e8 <_printf_common>
 8007924:	3001      	adds	r0, #1
 8007926:	d14c      	bne.n	80079c2 <_printf_i+0x1fe>
 8007928:	f04f 30ff 	mov.w	r0, #4294967295
 800792c:	b004      	add	sp, #16
 800792e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007932:	4835      	ldr	r0, [pc, #212]	; (8007a08 <_printf_i+0x244>)
 8007934:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007938:	6823      	ldr	r3, [r4, #0]
 800793a:	680e      	ldr	r6, [r1, #0]
 800793c:	061f      	lsls	r7, r3, #24
 800793e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007942:	600e      	str	r6, [r1, #0]
 8007944:	d514      	bpl.n	8007970 <_printf_i+0x1ac>
 8007946:	07d9      	lsls	r1, r3, #31
 8007948:	bf44      	itt	mi
 800794a:	f043 0320 	orrmi.w	r3, r3, #32
 800794e:	6023      	strmi	r3, [r4, #0]
 8007950:	b91d      	cbnz	r5, 800795a <_printf_i+0x196>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	f023 0320 	bic.w	r3, r3, #32
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	2310      	movs	r3, #16
 800795c:	e7b0      	b.n	80078c0 <_printf_i+0xfc>
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	f043 0320 	orr.w	r3, r3, #32
 8007964:	6023      	str	r3, [r4, #0]
 8007966:	2378      	movs	r3, #120	; 0x78
 8007968:	4828      	ldr	r0, [pc, #160]	; (8007a0c <_printf_i+0x248>)
 800796a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800796e:	e7e3      	b.n	8007938 <_printf_i+0x174>
 8007970:	065e      	lsls	r6, r3, #25
 8007972:	bf48      	it	mi
 8007974:	b2ad      	uxthmi	r5, r5
 8007976:	e7e6      	b.n	8007946 <_printf_i+0x182>
 8007978:	4616      	mov	r6, r2
 800797a:	e7bb      	b.n	80078f4 <_printf_i+0x130>
 800797c:	680b      	ldr	r3, [r1, #0]
 800797e:	6826      	ldr	r6, [r4, #0]
 8007980:	6960      	ldr	r0, [r4, #20]
 8007982:	1d1d      	adds	r5, r3, #4
 8007984:	600d      	str	r5, [r1, #0]
 8007986:	0635      	lsls	r5, r6, #24
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	d501      	bpl.n	8007990 <_printf_i+0x1cc>
 800798c:	6018      	str	r0, [r3, #0]
 800798e:	e002      	b.n	8007996 <_printf_i+0x1d2>
 8007990:	0671      	lsls	r1, r6, #25
 8007992:	d5fb      	bpl.n	800798c <_printf_i+0x1c8>
 8007994:	8018      	strh	r0, [r3, #0]
 8007996:	2300      	movs	r3, #0
 8007998:	6123      	str	r3, [r4, #16]
 800799a:	4616      	mov	r6, r2
 800799c:	e7ba      	b.n	8007914 <_printf_i+0x150>
 800799e:	680b      	ldr	r3, [r1, #0]
 80079a0:	1d1a      	adds	r2, r3, #4
 80079a2:	600a      	str	r2, [r1, #0]
 80079a4:	681e      	ldr	r6, [r3, #0]
 80079a6:	6862      	ldr	r2, [r4, #4]
 80079a8:	2100      	movs	r1, #0
 80079aa:	4630      	mov	r0, r6
 80079ac:	f7f8 fc28 	bl	8000200 <memchr>
 80079b0:	b108      	cbz	r0, 80079b6 <_printf_i+0x1f2>
 80079b2:	1b80      	subs	r0, r0, r6
 80079b4:	6060      	str	r0, [r4, #4]
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	6123      	str	r3, [r4, #16]
 80079ba:	2300      	movs	r3, #0
 80079bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80079c0:	e7a8      	b.n	8007914 <_printf_i+0x150>
 80079c2:	6923      	ldr	r3, [r4, #16]
 80079c4:	4632      	mov	r2, r6
 80079c6:	4649      	mov	r1, r9
 80079c8:	4640      	mov	r0, r8
 80079ca:	47d0      	blx	sl
 80079cc:	3001      	adds	r0, #1
 80079ce:	d0ab      	beq.n	8007928 <_printf_i+0x164>
 80079d0:	6823      	ldr	r3, [r4, #0]
 80079d2:	079b      	lsls	r3, r3, #30
 80079d4:	d413      	bmi.n	80079fe <_printf_i+0x23a>
 80079d6:	68e0      	ldr	r0, [r4, #12]
 80079d8:	9b03      	ldr	r3, [sp, #12]
 80079da:	4298      	cmp	r0, r3
 80079dc:	bfb8      	it	lt
 80079de:	4618      	movlt	r0, r3
 80079e0:	e7a4      	b.n	800792c <_printf_i+0x168>
 80079e2:	2301      	movs	r3, #1
 80079e4:	4632      	mov	r2, r6
 80079e6:	4649      	mov	r1, r9
 80079e8:	4640      	mov	r0, r8
 80079ea:	47d0      	blx	sl
 80079ec:	3001      	adds	r0, #1
 80079ee:	d09b      	beq.n	8007928 <_printf_i+0x164>
 80079f0:	3501      	adds	r5, #1
 80079f2:	68e3      	ldr	r3, [r4, #12]
 80079f4:	9903      	ldr	r1, [sp, #12]
 80079f6:	1a5b      	subs	r3, r3, r1
 80079f8:	42ab      	cmp	r3, r5
 80079fa:	dcf2      	bgt.n	80079e2 <_printf_i+0x21e>
 80079fc:	e7eb      	b.n	80079d6 <_printf_i+0x212>
 80079fe:	2500      	movs	r5, #0
 8007a00:	f104 0619 	add.w	r6, r4, #25
 8007a04:	e7f5      	b.n	80079f2 <_printf_i+0x22e>
 8007a06:	bf00      	nop
 8007a08:	0800bcc2 	.word	0x0800bcc2
 8007a0c:	0800bcd3 	.word	0x0800bcd3

08007a10 <_scanf_float>:
 8007a10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a14:	b087      	sub	sp, #28
 8007a16:	4617      	mov	r7, r2
 8007a18:	9303      	str	r3, [sp, #12]
 8007a1a:	688b      	ldr	r3, [r1, #8]
 8007a1c:	1e5a      	subs	r2, r3, #1
 8007a1e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007a22:	bf83      	ittte	hi
 8007a24:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007a28:	195b      	addhi	r3, r3, r5
 8007a2a:	9302      	strhi	r3, [sp, #8]
 8007a2c:	2300      	movls	r3, #0
 8007a2e:	bf86      	itte	hi
 8007a30:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007a34:	608b      	strhi	r3, [r1, #8]
 8007a36:	9302      	strls	r3, [sp, #8]
 8007a38:	680b      	ldr	r3, [r1, #0]
 8007a3a:	468b      	mov	fp, r1
 8007a3c:	2500      	movs	r5, #0
 8007a3e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007a42:	f84b 3b1c 	str.w	r3, [fp], #28
 8007a46:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a4a:	4680      	mov	r8, r0
 8007a4c:	460c      	mov	r4, r1
 8007a4e:	465e      	mov	r6, fp
 8007a50:	46aa      	mov	sl, r5
 8007a52:	46a9      	mov	r9, r5
 8007a54:	9501      	str	r5, [sp, #4]
 8007a56:	68a2      	ldr	r2, [r4, #8]
 8007a58:	b152      	cbz	r2, 8007a70 <_scanf_float+0x60>
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	781b      	ldrb	r3, [r3, #0]
 8007a5e:	2b4e      	cmp	r3, #78	; 0x4e
 8007a60:	d864      	bhi.n	8007b2c <_scanf_float+0x11c>
 8007a62:	2b40      	cmp	r3, #64	; 0x40
 8007a64:	d83c      	bhi.n	8007ae0 <_scanf_float+0xd0>
 8007a66:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007a6a:	b2c8      	uxtb	r0, r1
 8007a6c:	280e      	cmp	r0, #14
 8007a6e:	d93a      	bls.n	8007ae6 <_scanf_float+0xd6>
 8007a70:	f1b9 0f00 	cmp.w	r9, #0
 8007a74:	d003      	beq.n	8007a7e <_scanf_float+0x6e>
 8007a76:	6823      	ldr	r3, [r4, #0]
 8007a78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a7c:	6023      	str	r3, [r4, #0]
 8007a7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a82:	f1ba 0f01 	cmp.w	sl, #1
 8007a86:	f200 8113 	bhi.w	8007cb0 <_scanf_float+0x2a0>
 8007a8a:	455e      	cmp	r6, fp
 8007a8c:	f200 8105 	bhi.w	8007c9a <_scanf_float+0x28a>
 8007a90:	2501      	movs	r5, #1
 8007a92:	4628      	mov	r0, r5
 8007a94:	b007      	add	sp, #28
 8007a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a9a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007a9e:	2a0d      	cmp	r2, #13
 8007aa0:	d8e6      	bhi.n	8007a70 <_scanf_float+0x60>
 8007aa2:	a101      	add	r1, pc, #4	; (adr r1, 8007aa8 <_scanf_float+0x98>)
 8007aa4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007aa8:	08007be7 	.word	0x08007be7
 8007aac:	08007a71 	.word	0x08007a71
 8007ab0:	08007a71 	.word	0x08007a71
 8007ab4:	08007a71 	.word	0x08007a71
 8007ab8:	08007c47 	.word	0x08007c47
 8007abc:	08007c1f 	.word	0x08007c1f
 8007ac0:	08007a71 	.word	0x08007a71
 8007ac4:	08007a71 	.word	0x08007a71
 8007ac8:	08007bf5 	.word	0x08007bf5
 8007acc:	08007a71 	.word	0x08007a71
 8007ad0:	08007a71 	.word	0x08007a71
 8007ad4:	08007a71 	.word	0x08007a71
 8007ad8:	08007a71 	.word	0x08007a71
 8007adc:	08007bad 	.word	0x08007bad
 8007ae0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ae4:	e7db      	b.n	8007a9e <_scanf_float+0x8e>
 8007ae6:	290e      	cmp	r1, #14
 8007ae8:	d8c2      	bhi.n	8007a70 <_scanf_float+0x60>
 8007aea:	a001      	add	r0, pc, #4	; (adr r0, 8007af0 <_scanf_float+0xe0>)
 8007aec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007af0:	08007b9f 	.word	0x08007b9f
 8007af4:	08007a71 	.word	0x08007a71
 8007af8:	08007b9f 	.word	0x08007b9f
 8007afc:	08007c33 	.word	0x08007c33
 8007b00:	08007a71 	.word	0x08007a71
 8007b04:	08007b4d 	.word	0x08007b4d
 8007b08:	08007b89 	.word	0x08007b89
 8007b0c:	08007b89 	.word	0x08007b89
 8007b10:	08007b89 	.word	0x08007b89
 8007b14:	08007b89 	.word	0x08007b89
 8007b18:	08007b89 	.word	0x08007b89
 8007b1c:	08007b89 	.word	0x08007b89
 8007b20:	08007b89 	.word	0x08007b89
 8007b24:	08007b89 	.word	0x08007b89
 8007b28:	08007b89 	.word	0x08007b89
 8007b2c:	2b6e      	cmp	r3, #110	; 0x6e
 8007b2e:	d809      	bhi.n	8007b44 <_scanf_float+0x134>
 8007b30:	2b60      	cmp	r3, #96	; 0x60
 8007b32:	d8b2      	bhi.n	8007a9a <_scanf_float+0x8a>
 8007b34:	2b54      	cmp	r3, #84	; 0x54
 8007b36:	d077      	beq.n	8007c28 <_scanf_float+0x218>
 8007b38:	2b59      	cmp	r3, #89	; 0x59
 8007b3a:	d199      	bne.n	8007a70 <_scanf_float+0x60>
 8007b3c:	2d07      	cmp	r5, #7
 8007b3e:	d197      	bne.n	8007a70 <_scanf_float+0x60>
 8007b40:	2508      	movs	r5, #8
 8007b42:	e029      	b.n	8007b98 <_scanf_float+0x188>
 8007b44:	2b74      	cmp	r3, #116	; 0x74
 8007b46:	d06f      	beq.n	8007c28 <_scanf_float+0x218>
 8007b48:	2b79      	cmp	r3, #121	; 0x79
 8007b4a:	e7f6      	b.n	8007b3a <_scanf_float+0x12a>
 8007b4c:	6821      	ldr	r1, [r4, #0]
 8007b4e:	05c8      	lsls	r0, r1, #23
 8007b50:	d51a      	bpl.n	8007b88 <_scanf_float+0x178>
 8007b52:	9b02      	ldr	r3, [sp, #8]
 8007b54:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8007b58:	6021      	str	r1, [r4, #0]
 8007b5a:	f109 0901 	add.w	r9, r9, #1
 8007b5e:	b11b      	cbz	r3, 8007b68 <_scanf_float+0x158>
 8007b60:	3b01      	subs	r3, #1
 8007b62:	3201      	adds	r2, #1
 8007b64:	9302      	str	r3, [sp, #8]
 8007b66:	60a2      	str	r2, [r4, #8]
 8007b68:	68a3      	ldr	r3, [r4, #8]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	60a3      	str	r3, [r4, #8]
 8007b6e:	6923      	ldr	r3, [r4, #16]
 8007b70:	3301      	adds	r3, #1
 8007b72:	6123      	str	r3, [r4, #16]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	607b      	str	r3, [r7, #4]
 8007b7c:	f340 8084 	ble.w	8007c88 <_scanf_float+0x278>
 8007b80:	683b      	ldr	r3, [r7, #0]
 8007b82:	3301      	adds	r3, #1
 8007b84:	603b      	str	r3, [r7, #0]
 8007b86:	e766      	b.n	8007a56 <_scanf_float+0x46>
 8007b88:	eb1a 0f05 	cmn.w	sl, r5
 8007b8c:	f47f af70 	bne.w	8007a70 <_scanf_float+0x60>
 8007b90:	6822      	ldr	r2, [r4, #0]
 8007b92:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8007b96:	6022      	str	r2, [r4, #0]
 8007b98:	f806 3b01 	strb.w	r3, [r6], #1
 8007b9c:	e7e4      	b.n	8007b68 <_scanf_float+0x158>
 8007b9e:	6822      	ldr	r2, [r4, #0]
 8007ba0:	0610      	lsls	r0, r2, #24
 8007ba2:	f57f af65 	bpl.w	8007a70 <_scanf_float+0x60>
 8007ba6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007baa:	e7f4      	b.n	8007b96 <_scanf_float+0x186>
 8007bac:	f1ba 0f00 	cmp.w	sl, #0
 8007bb0:	d10e      	bne.n	8007bd0 <_scanf_float+0x1c0>
 8007bb2:	f1b9 0f00 	cmp.w	r9, #0
 8007bb6:	d10e      	bne.n	8007bd6 <_scanf_float+0x1c6>
 8007bb8:	6822      	ldr	r2, [r4, #0]
 8007bba:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007bbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007bc2:	d108      	bne.n	8007bd6 <_scanf_float+0x1c6>
 8007bc4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007bc8:	6022      	str	r2, [r4, #0]
 8007bca:	f04f 0a01 	mov.w	sl, #1
 8007bce:	e7e3      	b.n	8007b98 <_scanf_float+0x188>
 8007bd0:	f1ba 0f02 	cmp.w	sl, #2
 8007bd4:	d055      	beq.n	8007c82 <_scanf_float+0x272>
 8007bd6:	2d01      	cmp	r5, #1
 8007bd8:	d002      	beq.n	8007be0 <_scanf_float+0x1d0>
 8007bda:	2d04      	cmp	r5, #4
 8007bdc:	f47f af48 	bne.w	8007a70 <_scanf_float+0x60>
 8007be0:	3501      	adds	r5, #1
 8007be2:	b2ed      	uxtb	r5, r5
 8007be4:	e7d8      	b.n	8007b98 <_scanf_float+0x188>
 8007be6:	f1ba 0f01 	cmp.w	sl, #1
 8007bea:	f47f af41 	bne.w	8007a70 <_scanf_float+0x60>
 8007bee:	f04f 0a02 	mov.w	sl, #2
 8007bf2:	e7d1      	b.n	8007b98 <_scanf_float+0x188>
 8007bf4:	b97d      	cbnz	r5, 8007c16 <_scanf_float+0x206>
 8007bf6:	f1b9 0f00 	cmp.w	r9, #0
 8007bfa:	f47f af3c 	bne.w	8007a76 <_scanf_float+0x66>
 8007bfe:	6822      	ldr	r2, [r4, #0]
 8007c00:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8007c04:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8007c08:	f47f af39 	bne.w	8007a7e <_scanf_float+0x6e>
 8007c0c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c10:	6022      	str	r2, [r4, #0]
 8007c12:	2501      	movs	r5, #1
 8007c14:	e7c0      	b.n	8007b98 <_scanf_float+0x188>
 8007c16:	2d03      	cmp	r5, #3
 8007c18:	d0e2      	beq.n	8007be0 <_scanf_float+0x1d0>
 8007c1a:	2d05      	cmp	r5, #5
 8007c1c:	e7de      	b.n	8007bdc <_scanf_float+0x1cc>
 8007c1e:	2d02      	cmp	r5, #2
 8007c20:	f47f af26 	bne.w	8007a70 <_scanf_float+0x60>
 8007c24:	2503      	movs	r5, #3
 8007c26:	e7b7      	b.n	8007b98 <_scanf_float+0x188>
 8007c28:	2d06      	cmp	r5, #6
 8007c2a:	f47f af21 	bne.w	8007a70 <_scanf_float+0x60>
 8007c2e:	2507      	movs	r5, #7
 8007c30:	e7b2      	b.n	8007b98 <_scanf_float+0x188>
 8007c32:	6822      	ldr	r2, [r4, #0]
 8007c34:	0591      	lsls	r1, r2, #22
 8007c36:	f57f af1b 	bpl.w	8007a70 <_scanf_float+0x60>
 8007c3a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8007c3e:	6022      	str	r2, [r4, #0]
 8007c40:	f8cd 9004 	str.w	r9, [sp, #4]
 8007c44:	e7a8      	b.n	8007b98 <_scanf_float+0x188>
 8007c46:	6822      	ldr	r2, [r4, #0]
 8007c48:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8007c4c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8007c50:	d006      	beq.n	8007c60 <_scanf_float+0x250>
 8007c52:	0550      	lsls	r0, r2, #21
 8007c54:	f57f af0c 	bpl.w	8007a70 <_scanf_float+0x60>
 8007c58:	f1b9 0f00 	cmp.w	r9, #0
 8007c5c:	f43f af0f 	beq.w	8007a7e <_scanf_float+0x6e>
 8007c60:	0591      	lsls	r1, r2, #22
 8007c62:	bf58      	it	pl
 8007c64:	9901      	ldrpl	r1, [sp, #4]
 8007c66:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8007c6a:	bf58      	it	pl
 8007c6c:	eba9 0101 	subpl.w	r1, r9, r1
 8007c70:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8007c74:	bf58      	it	pl
 8007c76:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007c7a:	6022      	str	r2, [r4, #0]
 8007c7c:	f04f 0900 	mov.w	r9, #0
 8007c80:	e78a      	b.n	8007b98 <_scanf_float+0x188>
 8007c82:	f04f 0a03 	mov.w	sl, #3
 8007c86:	e787      	b.n	8007b98 <_scanf_float+0x188>
 8007c88:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007c8c:	4639      	mov	r1, r7
 8007c8e:	4640      	mov	r0, r8
 8007c90:	4798      	blx	r3
 8007c92:	2800      	cmp	r0, #0
 8007c94:	f43f aedf 	beq.w	8007a56 <_scanf_float+0x46>
 8007c98:	e6ea      	b.n	8007a70 <_scanf_float+0x60>
 8007c9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007c9e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ca2:	463a      	mov	r2, r7
 8007ca4:	4640      	mov	r0, r8
 8007ca6:	4798      	blx	r3
 8007ca8:	6923      	ldr	r3, [r4, #16]
 8007caa:	3b01      	subs	r3, #1
 8007cac:	6123      	str	r3, [r4, #16]
 8007cae:	e6ec      	b.n	8007a8a <_scanf_float+0x7a>
 8007cb0:	1e6b      	subs	r3, r5, #1
 8007cb2:	2b06      	cmp	r3, #6
 8007cb4:	d825      	bhi.n	8007d02 <_scanf_float+0x2f2>
 8007cb6:	2d02      	cmp	r5, #2
 8007cb8:	d836      	bhi.n	8007d28 <_scanf_float+0x318>
 8007cba:	455e      	cmp	r6, fp
 8007cbc:	f67f aee8 	bls.w	8007a90 <_scanf_float+0x80>
 8007cc0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cc4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007cc8:	463a      	mov	r2, r7
 8007cca:	4640      	mov	r0, r8
 8007ccc:	4798      	blx	r3
 8007cce:	6923      	ldr	r3, [r4, #16]
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	6123      	str	r3, [r4, #16]
 8007cd4:	e7f1      	b.n	8007cba <_scanf_float+0x2aa>
 8007cd6:	9802      	ldr	r0, [sp, #8]
 8007cd8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007cdc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8007ce0:	9002      	str	r0, [sp, #8]
 8007ce2:	463a      	mov	r2, r7
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4798      	blx	r3
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007cf2:	fa5f fa8a 	uxtb.w	sl, sl
 8007cf6:	f1ba 0f02 	cmp.w	sl, #2
 8007cfa:	d1ec      	bne.n	8007cd6 <_scanf_float+0x2c6>
 8007cfc:	3d03      	subs	r5, #3
 8007cfe:	b2ed      	uxtb	r5, r5
 8007d00:	1b76      	subs	r6, r6, r5
 8007d02:	6823      	ldr	r3, [r4, #0]
 8007d04:	05da      	lsls	r2, r3, #23
 8007d06:	d52f      	bpl.n	8007d68 <_scanf_float+0x358>
 8007d08:	055b      	lsls	r3, r3, #21
 8007d0a:	d510      	bpl.n	8007d2e <_scanf_float+0x31e>
 8007d0c:	455e      	cmp	r6, fp
 8007d0e:	f67f aebf 	bls.w	8007a90 <_scanf_float+0x80>
 8007d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d1a:	463a      	mov	r2, r7
 8007d1c:	4640      	mov	r0, r8
 8007d1e:	4798      	blx	r3
 8007d20:	6923      	ldr	r3, [r4, #16]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	6123      	str	r3, [r4, #16]
 8007d26:	e7f1      	b.n	8007d0c <_scanf_float+0x2fc>
 8007d28:	46aa      	mov	sl, r5
 8007d2a:	9602      	str	r6, [sp, #8]
 8007d2c:	e7df      	b.n	8007cee <_scanf_float+0x2de>
 8007d2e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d32:	6923      	ldr	r3, [r4, #16]
 8007d34:	2965      	cmp	r1, #101	; 0x65
 8007d36:	f103 33ff 	add.w	r3, r3, #4294967295
 8007d3a:	f106 35ff 	add.w	r5, r6, #4294967295
 8007d3e:	6123      	str	r3, [r4, #16]
 8007d40:	d00c      	beq.n	8007d5c <_scanf_float+0x34c>
 8007d42:	2945      	cmp	r1, #69	; 0x45
 8007d44:	d00a      	beq.n	8007d5c <_scanf_float+0x34c>
 8007d46:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d4a:	463a      	mov	r2, r7
 8007d4c:	4640      	mov	r0, r8
 8007d4e:	4798      	blx	r3
 8007d50:	6923      	ldr	r3, [r4, #16]
 8007d52:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d56:	3b01      	subs	r3, #1
 8007d58:	1eb5      	subs	r5, r6, #2
 8007d5a:	6123      	str	r3, [r4, #16]
 8007d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8007d60:	463a      	mov	r2, r7
 8007d62:	4640      	mov	r0, r8
 8007d64:	4798      	blx	r3
 8007d66:	462e      	mov	r6, r5
 8007d68:	6825      	ldr	r5, [r4, #0]
 8007d6a:	f015 0510 	ands.w	r5, r5, #16
 8007d6e:	d158      	bne.n	8007e22 <_scanf_float+0x412>
 8007d70:	7035      	strb	r5, [r6, #0]
 8007d72:	6823      	ldr	r3, [r4, #0]
 8007d74:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007d78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007d7c:	d11c      	bne.n	8007db8 <_scanf_float+0x3a8>
 8007d7e:	9b01      	ldr	r3, [sp, #4]
 8007d80:	454b      	cmp	r3, r9
 8007d82:	eba3 0209 	sub.w	r2, r3, r9
 8007d86:	d124      	bne.n	8007dd2 <_scanf_float+0x3c2>
 8007d88:	2200      	movs	r2, #0
 8007d8a:	4659      	mov	r1, fp
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	f000 ff41 	bl	8008c14 <_strtod_r>
 8007d92:	9b03      	ldr	r3, [sp, #12]
 8007d94:	6821      	ldr	r1, [r4, #0]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f011 0f02 	tst.w	r1, #2
 8007d9c:	ec57 6b10 	vmov	r6, r7, d0
 8007da0:	f103 0204 	add.w	r2, r3, #4
 8007da4:	d020      	beq.n	8007de8 <_scanf_float+0x3d8>
 8007da6:	9903      	ldr	r1, [sp, #12]
 8007da8:	600a      	str	r2, [r1, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	e9c3 6700 	strd	r6, r7, [r3]
 8007db0:	68e3      	ldr	r3, [r4, #12]
 8007db2:	3301      	adds	r3, #1
 8007db4:	60e3      	str	r3, [r4, #12]
 8007db6:	e66c      	b.n	8007a92 <_scanf_float+0x82>
 8007db8:	9b04      	ldr	r3, [sp, #16]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0e4      	beq.n	8007d88 <_scanf_float+0x378>
 8007dbe:	9905      	ldr	r1, [sp, #20]
 8007dc0:	230a      	movs	r3, #10
 8007dc2:	462a      	mov	r2, r5
 8007dc4:	3101      	adds	r1, #1
 8007dc6:	4640      	mov	r0, r8
 8007dc8:	f000 ffae 	bl	8008d28 <_strtol_r>
 8007dcc:	9b04      	ldr	r3, [sp, #16]
 8007dce:	9e05      	ldr	r6, [sp, #20]
 8007dd0:	1ac2      	subs	r2, r0, r3
 8007dd2:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8007dd6:	429e      	cmp	r6, r3
 8007dd8:	bf28      	it	cs
 8007dda:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8007dde:	4912      	ldr	r1, [pc, #72]	; (8007e28 <_scanf_float+0x418>)
 8007de0:	4630      	mov	r0, r6
 8007de2:	f000 f8cf 	bl	8007f84 <siprintf>
 8007de6:	e7cf      	b.n	8007d88 <_scanf_float+0x378>
 8007de8:	f011 0f04 	tst.w	r1, #4
 8007dec:	9903      	ldr	r1, [sp, #12]
 8007dee:	600a      	str	r2, [r1, #0]
 8007df0:	d1db      	bne.n	8007daa <_scanf_float+0x39a>
 8007df2:	f8d3 8000 	ldr.w	r8, [r3]
 8007df6:	ee10 2a10 	vmov	r2, s0
 8007dfa:	ee10 0a10 	vmov	r0, s0
 8007dfe:	463b      	mov	r3, r7
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fea3 	bl	8000b4c <__aeabi_dcmpun>
 8007e06:	b128      	cbz	r0, 8007e14 <_scanf_float+0x404>
 8007e08:	4808      	ldr	r0, [pc, #32]	; (8007e2c <_scanf_float+0x41c>)
 8007e0a:	f000 f8b5 	bl	8007f78 <nanf>
 8007e0e:	ed88 0a00 	vstr	s0, [r8]
 8007e12:	e7cd      	b.n	8007db0 <_scanf_float+0x3a0>
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fef6 	bl	8000c08 <__aeabi_d2f>
 8007e1c:	f8c8 0000 	str.w	r0, [r8]
 8007e20:	e7c6      	b.n	8007db0 <_scanf_float+0x3a0>
 8007e22:	2500      	movs	r5, #0
 8007e24:	e635      	b.n	8007a92 <_scanf_float+0x82>
 8007e26:	bf00      	nop
 8007e28:	0800bce4 	.word	0x0800bce4
 8007e2c:	0800c160 	.word	0x0800c160

08007e30 <iprintf>:
 8007e30:	b40f      	push	{r0, r1, r2, r3}
 8007e32:	4b0a      	ldr	r3, [pc, #40]	; (8007e5c <iprintf+0x2c>)
 8007e34:	b513      	push	{r0, r1, r4, lr}
 8007e36:	681c      	ldr	r4, [r3, #0]
 8007e38:	b124      	cbz	r4, 8007e44 <iprintf+0x14>
 8007e3a:	69a3      	ldr	r3, [r4, #24]
 8007e3c:	b913      	cbnz	r3, 8007e44 <iprintf+0x14>
 8007e3e:	4620      	mov	r0, r4
 8007e40:	f001 ffc8 	bl	8009dd4 <__sinit>
 8007e44:	ab05      	add	r3, sp, #20
 8007e46:	9a04      	ldr	r2, [sp, #16]
 8007e48:	68a1      	ldr	r1, [r4, #8]
 8007e4a:	9301      	str	r3, [sp, #4]
 8007e4c:	4620      	mov	r0, r4
 8007e4e:	f003 fb5b 	bl	800b508 <_vfiprintf_r>
 8007e52:	b002      	add	sp, #8
 8007e54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e58:	b004      	add	sp, #16
 8007e5a:	4770      	bx	lr
 8007e5c:	2000000c 	.word	0x2000000c

08007e60 <putchar>:
 8007e60:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <putchar+0x28>)
 8007e62:	b513      	push	{r0, r1, r4, lr}
 8007e64:	681c      	ldr	r4, [r3, #0]
 8007e66:	4601      	mov	r1, r0
 8007e68:	b134      	cbz	r4, 8007e78 <putchar+0x18>
 8007e6a:	69a3      	ldr	r3, [r4, #24]
 8007e6c:	b923      	cbnz	r3, 8007e78 <putchar+0x18>
 8007e6e:	9001      	str	r0, [sp, #4]
 8007e70:	4620      	mov	r0, r4
 8007e72:	f001 ffaf 	bl	8009dd4 <__sinit>
 8007e76:	9901      	ldr	r1, [sp, #4]
 8007e78:	68a2      	ldr	r2, [r4, #8]
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	b002      	add	sp, #8
 8007e7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e82:	f003 bc71 	b.w	800b768 <_putc_r>
 8007e86:	bf00      	nop
 8007e88:	2000000c 	.word	0x2000000c

08007e8c <_puts_r>:
 8007e8c:	b570      	push	{r4, r5, r6, lr}
 8007e8e:	460e      	mov	r6, r1
 8007e90:	4605      	mov	r5, r0
 8007e92:	b118      	cbz	r0, 8007e9c <_puts_r+0x10>
 8007e94:	6983      	ldr	r3, [r0, #24]
 8007e96:	b90b      	cbnz	r3, 8007e9c <_puts_r+0x10>
 8007e98:	f001 ff9c 	bl	8009dd4 <__sinit>
 8007e9c:	69ab      	ldr	r3, [r5, #24]
 8007e9e:	68ac      	ldr	r4, [r5, #8]
 8007ea0:	b913      	cbnz	r3, 8007ea8 <_puts_r+0x1c>
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	f001 ff96 	bl	8009dd4 <__sinit>
 8007ea8:	4b2c      	ldr	r3, [pc, #176]	; (8007f5c <_puts_r+0xd0>)
 8007eaa:	429c      	cmp	r4, r3
 8007eac:	d120      	bne.n	8007ef0 <_puts_r+0x64>
 8007eae:	686c      	ldr	r4, [r5, #4]
 8007eb0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d405      	bmi.n	8007ec2 <_puts_r+0x36>
 8007eb6:	89a3      	ldrh	r3, [r4, #12]
 8007eb8:	0598      	lsls	r0, r3, #22
 8007eba:	d402      	bmi.n	8007ec2 <_puts_r+0x36>
 8007ebc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007ebe:	f002 fb9a 	bl	800a5f6 <__retarget_lock_acquire_recursive>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	0719      	lsls	r1, r3, #28
 8007ec6:	d51d      	bpl.n	8007f04 <_puts_r+0x78>
 8007ec8:	6923      	ldr	r3, [r4, #16]
 8007eca:	b1db      	cbz	r3, 8007f04 <_puts_r+0x78>
 8007ecc:	3e01      	subs	r6, #1
 8007ece:	68a3      	ldr	r3, [r4, #8]
 8007ed0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007ed4:	3b01      	subs	r3, #1
 8007ed6:	60a3      	str	r3, [r4, #8]
 8007ed8:	bb39      	cbnz	r1, 8007f2a <_puts_r+0x9e>
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	da38      	bge.n	8007f50 <_puts_r+0xc4>
 8007ede:	4622      	mov	r2, r4
 8007ee0:	210a      	movs	r1, #10
 8007ee2:	4628      	mov	r0, r5
 8007ee4:	f000 ff22 	bl	8008d2c <__swbuf_r>
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d011      	beq.n	8007f10 <_puts_r+0x84>
 8007eec:	250a      	movs	r5, #10
 8007eee:	e011      	b.n	8007f14 <_puts_r+0x88>
 8007ef0:	4b1b      	ldr	r3, [pc, #108]	; (8007f60 <_puts_r+0xd4>)
 8007ef2:	429c      	cmp	r4, r3
 8007ef4:	d101      	bne.n	8007efa <_puts_r+0x6e>
 8007ef6:	68ac      	ldr	r4, [r5, #8]
 8007ef8:	e7da      	b.n	8007eb0 <_puts_r+0x24>
 8007efa:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <_puts_r+0xd8>)
 8007efc:	429c      	cmp	r4, r3
 8007efe:	bf08      	it	eq
 8007f00:	68ec      	ldreq	r4, [r5, #12]
 8007f02:	e7d5      	b.n	8007eb0 <_puts_r+0x24>
 8007f04:	4621      	mov	r1, r4
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 ff62 	bl	8008dd0 <__swsetup_r>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d0dd      	beq.n	8007ecc <_puts_r+0x40>
 8007f10:	f04f 35ff 	mov.w	r5, #4294967295
 8007f14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f16:	07da      	lsls	r2, r3, #31
 8007f18:	d405      	bmi.n	8007f26 <_puts_r+0x9a>
 8007f1a:	89a3      	ldrh	r3, [r4, #12]
 8007f1c:	059b      	lsls	r3, r3, #22
 8007f1e:	d402      	bmi.n	8007f26 <_puts_r+0x9a>
 8007f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f22:	f002 fb69 	bl	800a5f8 <__retarget_lock_release_recursive>
 8007f26:	4628      	mov	r0, r5
 8007f28:	bd70      	pop	{r4, r5, r6, pc}
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	da04      	bge.n	8007f38 <_puts_r+0xac>
 8007f2e:	69a2      	ldr	r2, [r4, #24]
 8007f30:	429a      	cmp	r2, r3
 8007f32:	dc06      	bgt.n	8007f42 <_puts_r+0xb6>
 8007f34:	290a      	cmp	r1, #10
 8007f36:	d004      	beq.n	8007f42 <_puts_r+0xb6>
 8007f38:	6823      	ldr	r3, [r4, #0]
 8007f3a:	1c5a      	adds	r2, r3, #1
 8007f3c:	6022      	str	r2, [r4, #0]
 8007f3e:	7019      	strb	r1, [r3, #0]
 8007f40:	e7c5      	b.n	8007ece <_puts_r+0x42>
 8007f42:	4622      	mov	r2, r4
 8007f44:	4628      	mov	r0, r5
 8007f46:	f000 fef1 	bl	8008d2c <__swbuf_r>
 8007f4a:	3001      	adds	r0, #1
 8007f4c:	d1bf      	bne.n	8007ece <_puts_r+0x42>
 8007f4e:	e7df      	b.n	8007f10 <_puts_r+0x84>
 8007f50:	6823      	ldr	r3, [r4, #0]
 8007f52:	250a      	movs	r5, #10
 8007f54:	1c5a      	adds	r2, r3, #1
 8007f56:	6022      	str	r2, [r4, #0]
 8007f58:	701d      	strb	r5, [r3, #0]
 8007f5a:	e7db      	b.n	8007f14 <_puts_r+0x88>
 8007f5c:	0800bef8 	.word	0x0800bef8
 8007f60:	0800bf18 	.word	0x0800bf18
 8007f64:	0800bed8 	.word	0x0800bed8

08007f68 <puts>:
 8007f68:	4b02      	ldr	r3, [pc, #8]	; (8007f74 <puts+0xc>)
 8007f6a:	4601      	mov	r1, r0
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	f7ff bf8d 	b.w	8007e8c <_puts_r>
 8007f72:	bf00      	nop
 8007f74:	2000000c 	.word	0x2000000c

08007f78 <nanf>:
 8007f78:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8007f80 <nanf+0x8>
 8007f7c:	4770      	bx	lr
 8007f7e:	bf00      	nop
 8007f80:	7fc00000 	.word	0x7fc00000

08007f84 <siprintf>:
 8007f84:	b40e      	push	{r1, r2, r3}
 8007f86:	b500      	push	{lr}
 8007f88:	b09c      	sub	sp, #112	; 0x70
 8007f8a:	ab1d      	add	r3, sp, #116	; 0x74
 8007f8c:	9002      	str	r0, [sp, #8]
 8007f8e:	9006      	str	r0, [sp, #24]
 8007f90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007f94:	4809      	ldr	r0, [pc, #36]	; (8007fbc <siprintf+0x38>)
 8007f96:	9107      	str	r1, [sp, #28]
 8007f98:	9104      	str	r1, [sp, #16]
 8007f9a:	4909      	ldr	r1, [pc, #36]	; (8007fc0 <siprintf+0x3c>)
 8007f9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007fa0:	9105      	str	r1, [sp, #20]
 8007fa2:	6800      	ldr	r0, [r0, #0]
 8007fa4:	9301      	str	r3, [sp, #4]
 8007fa6:	a902      	add	r1, sp, #8
 8007fa8:	f003 f984 	bl	800b2b4 <_svfiprintf_r>
 8007fac:	9b02      	ldr	r3, [sp, #8]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
 8007fb2:	b01c      	add	sp, #112	; 0x70
 8007fb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007fb8:	b003      	add	sp, #12
 8007fba:	4770      	bx	lr
 8007fbc:	2000000c 	.word	0x2000000c
 8007fc0:	ffff0208 	.word	0xffff0208

08007fc4 <sulp>:
 8007fc4:	b570      	push	{r4, r5, r6, lr}
 8007fc6:	4604      	mov	r4, r0
 8007fc8:	460d      	mov	r5, r1
 8007fca:	ec45 4b10 	vmov	d0, r4, r5
 8007fce:	4616      	mov	r6, r2
 8007fd0:	f002 ff0c 	bl	800adec <__ulp>
 8007fd4:	ec51 0b10 	vmov	r0, r1, d0
 8007fd8:	b17e      	cbz	r6, 8007ffa <sulp+0x36>
 8007fda:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007fde:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	dd09      	ble.n	8007ffa <sulp+0x36>
 8007fe6:	051b      	lsls	r3, r3, #20
 8007fe8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007fec:	2400      	movs	r4, #0
 8007fee:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007ff2:	4622      	mov	r2, r4
 8007ff4:	462b      	mov	r3, r5
 8007ff6:	f7f8 fb0f 	bl	8000618 <__aeabi_dmul>
 8007ffa:	bd70      	pop	{r4, r5, r6, pc}
 8007ffc:	0000      	movs	r0, r0
	...

08008000 <_strtod_l>:
 8008000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008004:	b0a3      	sub	sp, #140	; 0x8c
 8008006:	461f      	mov	r7, r3
 8008008:	2300      	movs	r3, #0
 800800a:	931e      	str	r3, [sp, #120]	; 0x78
 800800c:	4ba4      	ldr	r3, [pc, #656]	; (80082a0 <_strtod_l+0x2a0>)
 800800e:	9219      	str	r2, [sp, #100]	; 0x64
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	9307      	str	r3, [sp, #28]
 8008014:	4604      	mov	r4, r0
 8008016:	4618      	mov	r0, r3
 8008018:	4688      	mov	r8, r1
 800801a:	f7f8 f8e9 	bl	80001f0 <strlen>
 800801e:	f04f 0a00 	mov.w	sl, #0
 8008022:	4605      	mov	r5, r0
 8008024:	f04f 0b00 	mov.w	fp, #0
 8008028:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800802c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800802e:	781a      	ldrb	r2, [r3, #0]
 8008030:	2a2b      	cmp	r2, #43	; 0x2b
 8008032:	d04c      	beq.n	80080ce <_strtod_l+0xce>
 8008034:	d839      	bhi.n	80080aa <_strtod_l+0xaa>
 8008036:	2a0d      	cmp	r2, #13
 8008038:	d832      	bhi.n	80080a0 <_strtod_l+0xa0>
 800803a:	2a08      	cmp	r2, #8
 800803c:	d832      	bhi.n	80080a4 <_strtod_l+0xa4>
 800803e:	2a00      	cmp	r2, #0
 8008040:	d03c      	beq.n	80080bc <_strtod_l+0xbc>
 8008042:	2300      	movs	r3, #0
 8008044:	930e      	str	r3, [sp, #56]	; 0x38
 8008046:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8008048:	7833      	ldrb	r3, [r6, #0]
 800804a:	2b30      	cmp	r3, #48	; 0x30
 800804c:	f040 80b4 	bne.w	80081b8 <_strtod_l+0x1b8>
 8008050:	7873      	ldrb	r3, [r6, #1]
 8008052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008056:	2b58      	cmp	r3, #88	; 0x58
 8008058:	d16c      	bne.n	8008134 <_strtod_l+0x134>
 800805a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800805c:	9301      	str	r3, [sp, #4]
 800805e:	ab1e      	add	r3, sp, #120	; 0x78
 8008060:	9702      	str	r7, [sp, #8]
 8008062:	9300      	str	r3, [sp, #0]
 8008064:	4a8f      	ldr	r2, [pc, #572]	; (80082a4 <_strtod_l+0x2a4>)
 8008066:	ab1f      	add	r3, sp, #124	; 0x7c
 8008068:	a91d      	add	r1, sp, #116	; 0x74
 800806a:	4620      	mov	r0, r4
 800806c:	f001 ffb6 	bl	8009fdc <__gethex>
 8008070:	f010 0707 	ands.w	r7, r0, #7
 8008074:	4605      	mov	r5, r0
 8008076:	d005      	beq.n	8008084 <_strtod_l+0x84>
 8008078:	2f06      	cmp	r7, #6
 800807a:	d12a      	bne.n	80080d2 <_strtod_l+0xd2>
 800807c:	3601      	adds	r6, #1
 800807e:	2300      	movs	r3, #0
 8008080:	961d      	str	r6, [sp, #116]	; 0x74
 8008082:	930e      	str	r3, [sp, #56]	; 0x38
 8008084:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 8596 	bne.w	8008bb8 <_strtod_l+0xbb8>
 800808c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800808e:	b1db      	cbz	r3, 80080c8 <_strtod_l+0xc8>
 8008090:	4652      	mov	r2, sl
 8008092:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008096:	ec43 2b10 	vmov	d0, r2, r3
 800809a:	b023      	add	sp, #140	; 0x8c
 800809c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a0:	2a20      	cmp	r2, #32
 80080a2:	d1ce      	bne.n	8008042 <_strtod_l+0x42>
 80080a4:	3301      	adds	r3, #1
 80080a6:	931d      	str	r3, [sp, #116]	; 0x74
 80080a8:	e7c0      	b.n	800802c <_strtod_l+0x2c>
 80080aa:	2a2d      	cmp	r2, #45	; 0x2d
 80080ac:	d1c9      	bne.n	8008042 <_strtod_l+0x42>
 80080ae:	2201      	movs	r2, #1
 80080b0:	920e      	str	r2, [sp, #56]	; 0x38
 80080b2:	1c5a      	adds	r2, r3, #1
 80080b4:	921d      	str	r2, [sp, #116]	; 0x74
 80080b6:	785b      	ldrb	r3, [r3, #1]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1c4      	bne.n	8008046 <_strtod_l+0x46>
 80080bc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80080be:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f040 8576 	bne.w	8008bb4 <_strtod_l+0xbb4>
 80080c8:	4652      	mov	r2, sl
 80080ca:	465b      	mov	r3, fp
 80080cc:	e7e3      	b.n	8008096 <_strtod_l+0x96>
 80080ce:	2200      	movs	r2, #0
 80080d0:	e7ee      	b.n	80080b0 <_strtod_l+0xb0>
 80080d2:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80080d4:	b13a      	cbz	r2, 80080e6 <_strtod_l+0xe6>
 80080d6:	2135      	movs	r1, #53	; 0x35
 80080d8:	a820      	add	r0, sp, #128	; 0x80
 80080da:	f002 ff92 	bl	800b002 <__copybits>
 80080de:	991e      	ldr	r1, [sp, #120]	; 0x78
 80080e0:	4620      	mov	r0, r4
 80080e2:	f002 fb57 	bl	800a794 <_Bfree>
 80080e6:	3f01      	subs	r7, #1
 80080e8:	2f05      	cmp	r7, #5
 80080ea:	d807      	bhi.n	80080fc <_strtod_l+0xfc>
 80080ec:	e8df f007 	tbb	[pc, r7]
 80080f0:	1d180b0e 	.word	0x1d180b0e
 80080f4:	030e      	.short	0x030e
 80080f6:	f04f 0b00 	mov.w	fp, #0
 80080fa:	46da      	mov	sl, fp
 80080fc:	0728      	lsls	r0, r5, #28
 80080fe:	d5c1      	bpl.n	8008084 <_strtod_l+0x84>
 8008100:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008104:	e7be      	b.n	8008084 <_strtod_l+0x84>
 8008106:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800810a:	e7f7      	b.n	80080fc <_strtod_l+0xfc>
 800810c:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008110:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8008112:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008116:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800811a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800811e:	e7ed      	b.n	80080fc <_strtod_l+0xfc>
 8008120:	f8df b184 	ldr.w	fp, [pc, #388]	; 80082a8 <_strtod_l+0x2a8>
 8008124:	f04f 0a00 	mov.w	sl, #0
 8008128:	e7e8      	b.n	80080fc <_strtod_l+0xfc>
 800812a:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800812e:	f04f 3aff 	mov.w	sl, #4294967295
 8008132:	e7e3      	b.n	80080fc <_strtod_l+0xfc>
 8008134:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	921d      	str	r2, [sp, #116]	; 0x74
 800813a:	785b      	ldrb	r3, [r3, #1]
 800813c:	2b30      	cmp	r3, #48	; 0x30
 800813e:	d0f9      	beq.n	8008134 <_strtod_l+0x134>
 8008140:	2b00      	cmp	r3, #0
 8008142:	d09f      	beq.n	8008084 <_strtod_l+0x84>
 8008144:	2301      	movs	r3, #1
 8008146:	f04f 0900 	mov.w	r9, #0
 800814a:	9304      	str	r3, [sp, #16]
 800814c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800814e:	930a      	str	r3, [sp, #40]	; 0x28
 8008150:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008154:	464f      	mov	r7, r9
 8008156:	220a      	movs	r2, #10
 8008158:	981d      	ldr	r0, [sp, #116]	; 0x74
 800815a:	7806      	ldrb	r6, [r0, #0]
 800815c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008160:	b2d9      	uxtb	r1, r3
 8008162:	2909      	cmp	r1, #9
 8008164:	d92a      	bls.n	80081bc <_strtod_l+0x1bc>
 8008166:	9907      	ldr	r1, [sp, #28]
 8008168:	462a      	mov	r2, r5
 800816a:	f003 fba0 	bl	800b8ae <strncmp>
 800816e:	b398      	cbz	r0, 80081d8 <_strtod_l+0x1d8>
 8008170:	2000      	movs	r0, #0
 8008172:	4633      	mov	r3, r6
 8008174:	463d      	mov	r5, r7
 8008176:	9007      	str	r0, [sp, #28]
 8008178:	4602      	mov	r2, r0
 800817a:	2b65      	cmp	r3, #101	; 0x65
 800817c:	d001      	beq.n	8008182 <_strtod_l+0x182>
 800817e:	2b45      	cmp	r3, #69	; 0x45
 8008180:	d118      	bne.n	80081b4 <_strtod_l+0x1b4>
 8008182:	b91d      	cbnz	r5, 800818c <_strtod_l+0x18c>
 8008184:	9b04      	ldr	r3, [sp, #16]
 8008186:	4303      	orrs	r3, r0
 8008188:	d098      	beq.n	80080bc <_strtod_l+0xbc>
 800818a:	2500      	movs	r5, #0
 800818c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008190:	f108 0301 	add.w	r3, r8, #1
 8008194:	931d      	str	r3, [sp, #116]	; 0x74
 8008196:	f898 3001 	ldrb.w	r3, [r8, #1]
 800819a:	2b2b      	cmp	r3, #43	; 0x2b
 800819c:	d075      	beq.n	800828a <_strtod_l+0x28a>
 800819e:	2b2d      	cmp	r3, #45	; 0x2d
 80081a0:	d07b      	beq.n	800829a <_strtod_l+0x29a>
 80081a2:	f04f 0c00 	mov.w	ip, #0
 80081a6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80081aa:	2909      	cmp	r1, #9
 80081ac:	f240 8082 	bls.w	80082b4 <_strtod_l+0x2b4>
 80081b0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80081b4:	2600      	movs	r6, #0
 80081b6:	e09d      	b.n	80082f4 <_strtod_l+0x2f4>
 80081b8:	2300      	movs	r3, #0
 80081ba:	e7c4      	b.n	8008146 <_strtod_l+0x146>
 80081bc:	2f08      	cmp	r7, #8
 80081be:	bfd8      	it	le
 80081c0:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80081c2:	f100 0001 	add.w	r0, r0, #1
 80081c6:	bfda      	itte	le
 80081c8:	fb02 3301 	mlale	r3, r2, r1, r3
 80081cc:	9309      	strle	r3, [sp, #36]	; 0x24
 80081ce:	fb02 3909 	mlagt	r9, r2, r9, r3
 80081d2:	3701      	adds	r7, #1
 80081d4:	901d      	str	r0, [sp, #116]	; 0x74
 80081d6:	e7bf      	b.n	8008158 <_strtod_l+0x158>
 80081d8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081da:	195a      	adds	r2, r3, r5
 80081dc:	921d      	str	r2, [sp, #116]	; 0x74
 80081de:	5d5b      	ldrb	r3, [r3, r5]
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	d037      	beq.n	8008254 <_strtod_l+0x254>
 80081e4:	9007      	str	r0, [sp, #28]
 80081e6:	463d      	mov	r5, r7
 80081e8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80081ec:	2a09      	cmp	r2, #9
 80081ee:	d912      	bls.n	8008216 <_strtod_l+0x216>
 80081f0:	2201      	movs	r2, #1
 80081f2:	e7c2      	b.n	800817a <_strtod_l+0x17a>
 80081f4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80081f6:	1c5a      	adds	r2, r3, #1
 80081f8:	921d      	str	r2, [sp, #116]	; 0x74
 80081fa:	785b      	ldrb	r3, [r3, #1]
 80081fc:	3001      	adds	r0, #1
 80081fe:	2b30      	cmp	r3, #48	; 0x30
 8008200:	d0f8      	beq.n	80081f4 <_strtod_l+0x1f4>
 8008202:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8008206:	2a08      	cmp	r2, #8
 8008208:	f200 84db 	bhi.w	8008bc2 <_strtod_l+0xbc2>
 800820c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800820e:	9007      	str	r0, [sp, #28]
 8008210:	2000      	movs	r0, #0
 8008212:	920a      	str	r2, [sp, #40]	; 0x28
 8008214:	4605      	mov	r5, r0
 8008216:	3b30      	subs	r3, #48	; 0x30
 8008218:	f100 0201 	add.w	r2, r0, #1
 800821c:	d014      	beq.n	8008248 <_strtod_l+0x248>
 800821e:	9907      	ldr	r1, [sp, #28]
 8008220:	4411      	add	r1, r2
 8008222:	9107      	str	r1, [sp, #28]
 8008224:	462a      	mov	r2, r5
 8008226:	eb00 0e05 	add.w	lr, r0, r5
 800822a:	210a      	movs	r1, #10
 800822c:	4572      	cmp	r2, lr
 800822e:	d113      	bne.n	8008258 <_strtod_l+0x258>
 8008230:	182a      	adds	r2, r5, r0
 8008232:	2a08      	cmp	r2, #8
 8008234:	f105 0501 	add.w	r5, r5, #1
 8008238:	4405      	add	r5, r0
 800823a:	dc1c      	bgt.n	8008276 <_strtod_l+0x276>
 800823c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800823e:	220a      	movs	r2, #10
 8008240:	fb02 3301 	mla	r3, r2, r1, r3
 8008244:	9309      	str	r3, [sp, #36]	; 0x24
 8008246:	2200      	movs	r2, #0
 8008248:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800824a:	1c59      	adds	r1, r3, #1
 800824c:	911d      	str	r1, [sp, #116]	; 0x74
 800824e:	785b      	ldrb	r3, [r3, #1]
 8008250:	4610      	mov	r0, r2
 8008252:	e7c9      	b.n	80081e8 <_strtod_l+0x1e8>
 8008254:	4638      	mov	r0, r7
 8008256:	e7d2      	b.n	80081fe <_strtod_l+0x1fe>
 8008258:	2a08      	cmp	r2, #8
 800825a:	dc04      	bgt.n	8008266 <_strtod_l+0x266>
 800825c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800825e:	434e      	muls	r6, r1
 8008260:	9609      	str	r6, [sp, #36]	; 0x24
 8008262:	3201      	adds	r2, #1
 8008264:	e7e2      	b.n	800822c <_strtod_l+0x22c>
 8008266:	f102 0c01 	add.w	ip, r2, #1
 800826a:	f1bc 0f10 	cmp.w	ip, #16
 800826e:	bfd8      	it	le
 8008270:	fb01 f909 	mulle.w	r9, r1, r9
 8008274:	e7f5      	b.n	8008262 <_strtod_l+0x262>
 8008276:	2d10      	cmp	r5, #16
 8008278:	bfdc      	itt	le
 800827a:	220a      	movle	r2, #10
 800827c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008280:	e7e1      	b.n	8008246 <_strtod_l+0x246>
 8008282:	2300      	movs	r3, #0
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	2201      	movs	r2, #1
 8008288:	e77c      	b.n	8008184 <_strtod_l+0x184>
 800828a:	f04f 0c00 	mov.w	ip, #0
 800828e:	f108 0302 	add.w	r3, r8, #2
 8008292:	931d      	str	r3, [sp, #116]	; 0x74
 8008294:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008298:	e785      	b.n	80081a6 <_strtod_l+0x1a6>
 800829a:	f04f 0c01 	mov.w	ip, #1
 800829e:	e7f6      	b.n	800828e <_strtod_l+0x28e>
 80082a0:	0800bfa4 	.word	0x0800bfa4
 80082a4:	0800bcec 	.word	0x0800bcec
 80082a8:	7ff00000 	.word	0x7ff00000
 80082ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082ae:	1c59      	adds	r1, r3, #1
 80082b0:	911d      	str	r1, [sp, #116]	; 0x74
 80082b2:	785b      	ldrb	r3, [r3, #1]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d0f9      	beq.n	80082ac <_strtod_l+0x2ac>
 80082b8:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 80082bc:	2908      	cmp	r1, #8
 80082be:	f63f af79 	bhi.w	80081b4 <_strtod_l+0x1b4>
 80082c2:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 80082c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082c8:	9308      	str	r3, [sp, #32]
 80082ca:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80082cc:	1c59      	adds	r1, r3, #1
 80082ce:	911d      	str	r1, [sp, #116]	; 0x74
 80082d0:	785b      	ldrb	r3, [r3, #1]
 80082d2:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 80082d6:	2e09      	cmp	r6, #9
 80082d8:	d937      	bls.n	800834a <_strtod_l+0x34a>
 80082da:	9e08      	ldr	r6, [sp, #32]
 80082dc:	1b89      	subs	r1, r1, r6
 80082de:	2908      	cmp	r1, #8
 80082e0:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80082e4:	dc02      	bgt.n	80082ec <_strtod_l+0x2ec>
 80082e6:	4576      	cmp	r6, lr
 80082e8:	bfa8      	it	ge
 80082ea:	4676      	movge	r6, lr
 80082ec:	f1bc 0f00 	cmp.w	ip, #0
 80082f0:	d000      	beq.n	80082f4 <_strtod_l+0x2f4>
 80082f2:	4276      	negs	r6, r6
 80082f4:	2d00      	cmp	r5, #0
 80082f6:	d14f      	bne.n	8008398 <_strtod_l+0x398>
 80082f8:	9904      	ldr	r1, [sp, #16]
 80082fa:	4301      	orrs	r1, r0
 80082fc:	f47f aec2 	bne.w	8008084 <_strtod_l+0x84>
 8008300:	2a00      	cmp	r2, #0
 8008302:	f47f aedb 	bne.w	80080bc <_strtod_l+0xbc>
 8008306:	2b69      	cmp	r3, #105	; 0x69
 8008308:	d027      	beq.n	800835a <_strtod_l+0x35a>
 800830a:	dc24      	bgt.n	8008356 <_strtod_l+0x356>
 800830c:	2b49      	cmp	r3, #73	; 0x49
 800830e:	d024      	beq.n	800835a <_strtod_l+0x35a>
 8008310:	2b4e      	cmp	r3, #78	; 0x4e
 8008312:	f47f aed3 	bne.w	80080bc <_strtod_l+0xbc>
 8008316:	499e      	ldr	r1, [pc, #632]	; (8008590 <_strtod_l+0x590>)
 8008318:	a81d      	add	r0, sp, #116	; 0x74
 800831a:	f002 f8b7 	bl	800a48c <__match>
 800831e:	2800      	cmp	r0, #0
 8008320:	f43f aecc 	beq.w	80080bc <_strtod_l+0xbc>
 8008324:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b28      	cmp	r3, #40	; 0x28
 800832a:	d12d      	bne.n	8008388 <_strtod_l+0x388>
 800832c:	4999      	ldr	r1, [pc, #612]	; (8008594 <_strtod_l+0x594>)
 800832e:	aa20      	add	r2, sp, #128	; 0x80
 8008330:	a81d      	add	r0, sp, #116	; 0x74
 8008332:	f002 f8bf 	bl	800a4b4 <__hexnan>
 8008336:	2805      	cmp	r0, #5
 8008338:	d126      	bne.n	8008388 <_strtod_l+0x388>
 800833a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800833c:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008340:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008344:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008348:	e69c      	b.n	8008084 <_strtod_l+0x84>
 800834a:	210a      	movs	r1, #10
 800834c:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008350:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008354:	e7b9      	b.n	80082ca <_strtod_l+0x2ca>
 8008356:	2b6e      	cmp	r3, #110	; 0x6e
 8008358:	e7db      	b.n	8008312 <_strtod_l+0x312>
 800835a:	498f      	ldr	r1, [pc, #572]	; (8008598 <_strtod_l+0x598>)
 800835c:	a81d      	add	r0, sp, #116	; 0x74
 800835e:	f002 f895 	bl	800a48c <__match>
 8008362:	2800      	cmp	r0, #0
 8008364:	f43f aeaa 	beq.w	80080bc <_strtod_l+0xbc>
 8008368:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800836a:	498c      	ldr	r1, [pc, #560]	; (800859c <_strtod_l+0x59c>)
 800836c:	3b01      	subs	r3, #1
 800836e:	a81d      	add	r0, sp, #116	; 0x74
 8008370:	931d      	str	r3, [sp, #116]	; 0x74
 8008372:	f002 f88b 	bl	800a48c <__match>
 8008376:	b910      	cbnz	r0, 800837e <_strtod_l+0x37e>
 8008378:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800837a:	3301      	adds	r3, #1
 800837c:	931d      	str	r3, [sp, #116]	; 0x74
 800837e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 80085ac <_strtod_l+0x5ac>
 8008382:	f04f 0a00 	mov.w	sl, #0
 8008386:	e67d      	b.n	8008084 <_strtod_l+0x84>
 8008388:	4885      	ldr	r0, [pc, #532]	; (80085a0 <_strtod_l+0x5a0>)
 800838a:	f003 fa35 	bl	800b7f8 <nan>
 800838e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008392:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008396:	e675      	b.n	8008084 <_strtod_l+0x84>
 8008398:	9b07      	ldr	r3, [sp, #28]
 800839a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800839c:	1af3      	subs	r3, r6, r3
 800839e:	2f00      	cmp	r7, #0
 80083a0:	bf08      	it	eq
 80083a2:	462f      	moveq	r7, r5
 80083a4:	2d10      	cmp	r5, #16
 80083a6:	9308      	str	r3, [sp, #32]
 80083a8:	46a8      	mov	r8, r5
 80083aa:	bfa8      	it	ge
 80083ac:	f04f 0810 	movge.w	r8, #16
 80083b0:	f7f8 f8b8 	bl	8000524 <__aeabi_ui2d>
 80083b4:	2d09      	cmp	r5, #9
 80083b6:	4682      	mov	sl, r0
 80083b8:	468b      	mov	fp, r1
 80083ba:	dd13      	ble.n	80083e4 <_strtod_l+0x3e4>
 80083bc:	4b79      	ldr	r3, [pc, #484]	; (80085a4 <_strtod_l+0x5a4>)
 80083be:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80083c2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80083c6:	f7f8 f927 	bl	8000618 <__aeabi_dmul>
 80083ca:	4682      	mov	sl, r0
 80083cc:	4648      	mov	r0, r9
 80083ce:	468b      	mov	fp, r1
 80083d0:	f7f8 f8a8 	bl	8000524 <__aeabi_ui2d>
 80083d4:	4602      	mov	r2, r0
 80083d6:	460b      	mov	r3, r1
 80083d8:	4650      	mov	r0, sl
 80083da:	4659      	mov	r1, fp
 80083dc:	f7f7 ff66 	bl	80002ac <__adddf3>
 80083e0:	4682      	mov	sl, r0
 80083e2:	468b      	mov	fp, r1
 80083e4:	2d0f      	cmp	r5, #15
 80083e6:	dc38      	bgt.n	800845a <_strtod_l+0x45a>
 80083e8:	9b08      	ldr	r3, [sp, #32]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f43f ae4a 	beq.w	8008084 <_strtod_l+0x84>
 80083f0:	dd24      	ble.n	800843c <_strtod_l+0x43c>
 80083f2:	2b16      	cmp	r3, #22
 80083f4:	dc0b      	bgt.n	800840e <_strtod_l+0x40e>
 80083f6:	4d6b      	ldr	r5, [pc, #428]	; (80085a4 <_strtod_l+0x5a4>)
 80083f8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 80083fc:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008400:	4652      	mov	r2, sl
 8008402:	465b      	mov	r3, fp
 8008404:	f7f8 f908 	bl	8000618 <__aeabi_dmul>
 8008408:	4682      	mov	sl, r0
 800840a:	468b      	mov	fp, r1
 800840c:	e63a      	b.n	8008084 <_strtod_l+0x84>
 800840e:	9a08      	ldr	r2, [sp, #32]
 8008410:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008414:	4293      	cmp	r3, r2
 8008416:	db20      	blt.n	800845a <_strtod_l+0x45a>
 8008418:	4c62      	ldr	r4, [pc, #392]	; (80085a4 <_strtod_l+0x5a4>)
 800841a:	f1c5 050f 	rsb	r5, r5, #15
 800841e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008422:	4652      	mov	r2, sl
 8008424:	465b      	mov	r3, fp
 8008426:	e9d1 0100 	ldrd	r0, r1, [r1]
 800842a:	f7f8 f8f5 	bl	8000618 <__aeabi_dmul>
 800842e:	9b08      	ldr	r3, [sp, #32]
 8008430:	1b5d      	subs	r5, r3, r5
 8008432:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008436:	e9d4 2300 	ldrd	r2, r3, [r4]
 800843a:	e7e3      	b.n	8008404 <_strtod_l+0x404>
 800843c:	9b08      	ldr	r3, [sp, #32]
 800843e:	3316      	adds	r3, #22
 8008440:	db0b      	blt.n	800845a <_strtod_l+0x45a>
 8008442:	9b07      	ldr	r3, [sp, #28]
 8008444:	4a57      	ldr	r2, [pc, #348]	; (80085a4 <_strtod_l+0x5a4>)
 8008446:	1b9e      	subs	r6, r3, r6
 8008448:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800844c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008450:	4650      	mov	r0, sl
 8008452:	4659      	mov	r1, fp
 8008454:	f7f8 fa0a 	bl	800086c <__aeabi_ddiv>
 8008458:	e7d6      	b.n	8008408 <_strtod_l+0x408>
 800845a:	9b08      	ldr	r3, [sp, #32]
 800845c:	eba5 0808 	sub.w	r8, r5, r8
 8008460:	4498      	add	r8, r3
 8008462:	f1b8 0f00 	cmp.w	r8, #0
 8008466:	dd71      	ble.n	800854c <_strtod_l+0x54c>
 8008468:	f018 030f 	ands.w	r3, r8, #15
 800846c:	d00a      	beq.n	8008484 <_strtod_l+0x484>
 800846e:	494d      	ldr	r1, [pc, #308]	; (80085a4 <_strtod_l+0x5a4>)
 8008470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008474:	4652      	mov	r2, sl
 8008476:	465b      	mov	r3, fp
 8008478:	e9d1 0100 	ldrd	r0, r1, [r1]
 800847c:	f7f8 f8cc 	bl	8000618 <__aeabi_dmul>
 8008480:	4682      	mov	sl, r0
 8008482:	468b      	mov	fp, r1
 8008484:	f038 080f 	bics.w	r8, r8, #15
 8008488:	d04d      	beq.n	8008526 <_strtod_l+0x526>
 800848a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800848e:	dd22      	ble.n	80084d6 <_strtod_l+0x4d6>
 8008490:	2500      	movs	r5, #0
 8008492:	462e      	mov	r6, r5
 8008494:	9509      	str	r5, [sp, #36]	; 0x24
 8008496:	9507      	str	r5, [sp, #28]
 8008498:	2322      	movs	r3, #34	; 0x22
 800849a:	f8df b110 	ldr.w	fp, [pc, #272]	; 80085ac <_strtod_l+0x5ac>
 800849e:	6023      	str	r3, [r4, #0]
 80084a0:	f04f 0a00 	mov.w	sl, #0
 80084a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	f43f adec 	beq.w	8008084 <_strtod_l+0x84>
 80084ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80084ae:	4620      	mov	r0, r4
 80084b0:	f002 f970 	bl	800a794 <_Bfree>
 80084b4:	9907      	ldr	r1, [sp, #28]
 80084b6:	4620      	mov	r0, r4
 80084b8:	f002 f96c 	bl	800a794 <_Bfree>
 80084bc:	4631      	mov	r1, r6
 80084be:	4620      	mov	r0, r4
 80084c0:	f002 f968 	bl	800a794 <_Bfree>
 80084c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80084c6:	4620      	mov	r0, r4
 80084c8:	f002 f964 	bl	800a794 <_Bfree>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4620      	mov	r0, r4
 80084d0:	f002 f960 	bl	800a794 <_Bfree>
 80084d4:	e5d6      	b.n	8008084 <_strtod_l+0x84>
 80084d6:	2300      	movs	r3, #0
 80084d8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80084dc:	4650      	mov	r0, sl
 80084de:	4659      	mov	r1, fp
 80084e0:	4699      	mov	r9, r3
 80084e2:	f1b8 0f01 	cmp.w	r8, #1
 80084e6:	dc21      	bgt.n	800852c <_strtod_l+0x52c>
 80084e8:	b10b      	cbz	r3, 80084ee <_strtod_l+0x4ee>
 80084ea:	4682      	mov	sl, r0
 80084ec:	468b      	mov	fp, r1
 80084ee:	4b2e      	ldr	r3, [pc, #184]	; (80085a8 <_strtod_l+0x5a8>)
 80084f0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80084f4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80084f8:	4652      	mov	r2, sl
 80084fa:	465b      	mov	r3, fp
 80084fc:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008500:	f7f8 f88a 	bl	8000618 <__aeabi_dmul>
 8008504:	4b29      	ldr	r3, [pc, #164]	; (80085ac <_strtod_l+0x5ac>)
 8008506:	460a      	mov	r2, r1
 8008508:	400b      	ands	r3, r1
 800850a:	4929      	ldr	r1, [pc, #164]	; (80085b0 <_strtod_l+0x5b0>)
 800850c:	428b      	cmp	r3, r1
 800850e:	4682      	mov	sl, r0
 8008510:	d8be      	bhi.n	8008490 <_strtod_l+0x490>
 8008512:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008516:	428b      	cmp	r3, r1
 8008518:	bf86      	itte	hi
 800851a:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 80085b4 <_strtod_l+0x5b4>
 800851e:	f04f 3aff 	movhi.w	sl, #4294967295
 8008522:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008526:	2300      	movs	r3, #0
 8008528:	9304      	str	r3, [sp, #16]
 800852a:	e081      	b.n	8008630 <_strtod_l+0x630>
 800852c:	f018 0f01 	tst.w	r8, #1
 8008530:	d007      	beq.n	8008542 <_strtod_l+0x542>
 8008532:	4b1d      	ldr	r3, [pc, #116]	; (80085a8 <_strtod_l+0x5a8>)
 8008534:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800853c:	f7f8 f86c 	bl	8000618 <__aeabi_dmul>
 8008540:	2301      	movs	r3, #1
 8008542:	f109 0901 	add.w	r9, r9, #1
 8008546:	ea4f 0868 	mov.w	r8, r8, asr #1
 800854a:	e7ca      	b.n	80084e2 <_strtod_l+0x4e2>
 800854c:	d0eb      	beq.n	8008526 <_strtod_l+0x526>
 800854e:	f1c8 0800 	rsb	r8, r8, #0
 8008552:	f018 020f 	ands.w	r2, r8, #15
 8008556:	d00a      	beq.n	800856e <_strtod_l+0x56e>
 8008558:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <_strtod_l+0x5a4>)
 800855a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800855e:	4650      	mov	r0, sl
 8008560:	4659      	mov	r1, fp
 8008562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008566:	f7f8 f981 	bl	800086c <__aeabi_ddiv>
 800856a:	4682      	mov	sl, r0
 800856c:	468b      	mov	fp, r1
 800856e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008572:	d0d8      	beq.n	8008526 <_strtod_l+0x526>
 8008574:	f1b8 0f1f 	cmp.w	r8, #31
 8008578:	dd1e      	ble.n	80085b8 <_strtod_l+0x5b8>
 800857a:	2500      	movs	r5, #0
 800857c:	462e      	mov	r6, r5
 800857e:	9509      	str	r5, [sp, #36]	; 0x24
 8008580:	9507      	str	r5, [sp, #28]
 8008582:	2322      	movs	r3, #34	; 0x22
 8008584:	f04f 0a00 	mov.w	sl, #0
 8008588:	f04f 0b00 	mov.w	fp, #0
 800858c:	6023      	str	r3, [r4, #0]
 800858e:	e789      	b.n	80084a4 <_strtod_l+0x4a4>
 8008590:	0800bcbd 	.word	0x0800bcbd
 8008594:	0800bd00 	.word	0x0800bd00
 8008598:	0800bcb5 	.word	0x0800bcb5
 800859c:	0800be44 	.word	0x0800be44
 80085a0:	0800c160 	.word	0x0800c160
 80085a4:	0800c040 	.word	0x0800c040
 80085a8:	0800c018 	.word	0x0800c018
 80085ac:	7ff00000 	.word	0x7ff00000
 80085b0:	7ca00000 	.word	0x7ca00000
 80085b4:	7fefffff 	.word	0x7fefffff
 80085b8:	f018 0310 	ands.w	r3, r8, #16
 80085bc:	bf18      	it	ne
 80085be:	236a      	movne	r3, #106	; 0x6a
 80085c0:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8008978 <_strtod_l+0x978>
 80085c4:	9304      	str	r3, [sp, #16]
 80085c6:	4650      	mov	r0, sl
 80085c8:	4659      	mov	r1, fp
 80085ca:	2300      	movs	r3, #0
 80085cc:	f018 0f01 	tst.w	r8, #1
 80085d0:	d004      	beq.n	80085dc <_strtod_l+0x5dc>
 80085d2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80085d6:	f7f8 f81f 	bl	8000618 <__aeabi_dmul>
 80085da:	2301      	movs	r3, #1
 80085dc:	ea5f 0868 	movs.w	r8, r8, asr #1
 80085e0:	f109 0908 	add.w	r9, r9, #8
 80085e4:	d1f2      	bne.n	80085cc <_strtod_l+0x5cc>
 80085e6:	b10b      	cbz	r3, 80085ec <_strtod_l+0x5ec>
 80085e8:	4682      	mov	sl, r0
 80085ea:	468b      	mov	fp, r1
 80085ec:	9b04      	ldr	r3, [sp, #16]
 80085ee:	b1bb      	cbz	r3, 8008620 <_strtod_l+0x620>
 80085f0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80085f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	4659      	mov	r1, fp
 80085fc:	dd10      	ble.n	8008620 <_strtod_l+0x620>
 80085fe:	2b1f      	cmp	r3, #31
 8008600:	f340 8128 	ble.w	8008854 <_strtod_l+0x854>
 8008604:	2b34      	cmp	r3, #52	; 0x34
 8008606:	bfde      	ittt	le
 8008608:	3b20      	suble	r3, #32
 800860a:	f04f 32ff 	movle.w	r2, #4294967295
 800860e:	fa02 f303 	lslle.w	r3, r2, r3
 8008612:	f04f 0a00 	mov.w	sl, #0
 8008616:	bfcc      	ite	gt
 8008618:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800861c:	ea03 0b01 	andle.w	fp, r3, r1
 8008620:	2200      	movs	r2, #0
 8008622:	2300      	movs	r3, #0
 8008624:	4650      	mov	r0, sl
 8008626:	4659      	mov	r1, fp
 8008628:	f7f8 fa5e 	bl	8000ae8 <__aeabi_dcmpeq>
 800862c:	2800      	cmp	r0, #0
 800862e:	d1a4      	bne.n	800857a <_strtod_l+0x57a>
 8008630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008632:	9300      	str	r3, [sp, #0]
 8008634:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008636:	462b      	mov	r3, r5
 8008638:	463a      	mov	r2, r7
 800863a:	4620      	mov	r0, r4
 800863c:	f002 f916 	bl	800a86c <__s2b>
 8008640:	9009      	str	r0, [sp, #36]	; 0x24
 8008642:	2800      	cmp	r0, #0
 8008644:	f43f af24 	beq.w	8008490 <_strtod_l+0x490>
 8008648:	9b07      	ldr	r3, [sp, #28]
 800864a:	1b9e      	subs	r6, r3, r6
 800864c:	9b08      	ldr	r3, [sp, #32]
 800864e:	2b00      	cmp	r3, #0
 8008650:	bfb4      	ite	lt
 8008652:	4633      	movlt	r3, r6
 8008654:	2300      	movge	r3, #0
 8008656:	9310      	str	r3, [sp, #64]	; 0x40
 8008658:	9b08      	ldr	r3, [sp, #32]
 800865a:	2500      	movs	r5, #0
 800865c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008660:	9318      	str	r3, [sp, #96]	; 0x60
 8008662:	462e      	mov	r6, r5
 8008664:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008666:	4620      	mov	r0, r4
 8008668:	6859      	ldr	r1, [r3, #4]
 800866a:	f002 f853 	bl	800a714 <_Balloc>
 800866e:	9007      	str	r0, [sp, #28]
 8008670:	2800      	cmp	r0, #0
 8008672:	f43f af11 	beq.w	8008498 <_strtod_l+0x498>
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	691a      	ldr	r2, [r3, #16]
 800867a:	3202      	adds	r2, #2
 800867c:	f103 010c 	add.w	r1, r3, #12
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	300c      	adds	r0, #12
 8008684:	f002 f838 	bl	800a6f8 <memcpy>
 8008688:	ec4b ab10 	vmov	d0, sl, fp
 800868c:	aa20      	add	r2, sp, #128	; 0x80
 800868e:	a91f      	add	r1, sp, #124	; 0x7c
 8008690:	4620      	mov	r0, r4
 8008692:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008696:	f002 fc25 	bl	800aee4 <__d2b>
 800869a:	901e      	str	r0, [sp, #120]	; 0x78
 800869c:	2800      	cmp	r0, #0
 800869e:	f43f aefb 	beq.w	8008498 <_strtod_l+0x498>
 80086a2:	2101      	movs	r1, #1
 80086a4:	4620      	mov	r0, r4
 80086a6:	f002 f97b 	bl	800a9a0 <__i2b>
 80086aa:	4606      	mov	r6, r0
 80086ac:	2800      	cmp	r0, #0
 80086ae:	f43f aef3 	beq.w	8008498 <_strtod_l+0x498>
 80086b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80086b4:	9904      	ldr	r1, [sp, #16]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bfab      	itete	ge
 80086ba:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 80086bc:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 80086be:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 80086c0:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 80086c4:	bfac      	ite	ge
 80086c6:	eb03 0902 	addge.w	r9, r3, r2
 80086ca:	1ad7      	sublt	r7, r2, r3
 80086cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80086ce:	eba3 0801 	sub.w	r8, r3, r1
 80086d2:	4490      	add	r8, r2
 80086d4:	4ba3      	ldr	r3, [pc, #652]	; (8008964 <_strtod_l+0x964>)
 80086d6:	f108 38ff 	add.w	r8, r8, #4294967295
 80086da:	4598      	cmp	r8, r3
 80086dc:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80086e0:	f280 80cc 	bge.w	800887c <_strtod_l+0x87c>
 80086e4:	eba3 0308 	sub.w	r3, r3, r8
 80086e8:	2b1f      	cmp	r3, #31
 80086ea:	eba2 0203 	sub.w	r2, r2, r3
 80086ee:	f04f 0101 	mov.w	r1, #1
 80086f2:	f300 80b6 	bgt.w	8008862 <_strtod_l+0x862>
 80086f6:	fa01 f303 	lsl.w	r3, r1, r3
 80086fa:	9311      	str	r3, [sp, #68]	; 0x44
 80086fc:	2300      	movs	r3, #0
 80086fe:	930c      	str	r3, [sp, #48]	; 0x30
 8008700:	eb09 0802 	add.w	r8, r9, r2
 8008704:	9b04      	ldr	r3, [sp, #16]
 8008706:	45c1      	cmp	r9, r8
 8008708:	4417      	add	r7, r2
 800870a:	441f      	add	r7, r3
 800870c:	464b      	mov	r3, r9
 800870e:	bfa8      	it	ge
 8008710:	4643      	movge	r3, r8
 8008712:	42bb      	cmp	r3, r7
 8008714:	bfa8      	it	ge
 8008716:	463b      	movge	r3, r7
 8008718:	2b00      	cmp	r3, #0
 800871a:	bfc2      	ittt	gt
 800871c:	eba8 0803 	subgt.w	r8, r8, r3
 8008720:	1aff      	subgt	r7, r7, r3
 8008722:	eba9 0903 	subgt.w	r9, r9, r3
 8008726:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008728:	2b00      	cmp	r3, #0
 800872a:	dd17      	ble.n	800875c <_strtod_l+0x75c>
 800872c:	4631      	mov	r1, r6
 800872e:	461a      	mov	r2, r3
 8008730:	4620      	mov	r0, r4
 8008732:	f002 f9f1 	bl	800ab18 <__pow5mult>
 8008736:	4606      	mov	r6, r0
 8008738:	2800      	cmp	r0, #0
 800873a:	f43f aead 	beq.w	8008498 <_strtod_l+0x498>
 800873e:	4601      	mov	r1, r0
 8008740:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008742:	4620      	mov	r0, r4
 8008744:	f002 f942 	bl	800a9cc <__multiply>
 8008748:	900f      	str	r0, [sp, #60]	; 0x3c
 800874a:	2800      	cmp	r0, #0
 800874c:	f43f aea4 	beq.w	8008498 <_strtod_l+0x498>
 8008750:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008752:	4620      	mov	r0, r4
 8008754:	f002 f81e 	bl	800a794 <_Bfree>
 8008758:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800875a:	931e      	str	r3, [sp, #120]	; 0x78
 800875c:	f1b8 0f00 	cmp.w	r8, #0
 8008760:	f300 8091 	bgt.w	8008886 <_strtod_l+0x886>
 8008764:	9b08      	ldr	r3, [sp, #32]
 8008766:	2b00      	cmp	r3, #0
 8008768:	dd08      	ble.n	800877c <_strtod_l+0x77c>
 800876a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800876c:	9907      	ldr	r1, [sp, #28]
 800876e:	4620      	mov	r0, r4
 8008770:	f002 f9d2 	bl	800ab18 <__pow5mult>
 8008774:	9007      	str	r0, [sp, #28]
 8008776:	2800      	cmp	r0, #0
 8008778:	f43f ae8e 	beq.w	8008498 <_strtod_l+0x498>
 800877c:	2f00      	cmp	r7, #0
 800877e:	dd08      	ble.n	8008792 <_strtod_l+0x792>
 8008780:	9907      	ldr	r1, [sp, #28]
 8008782:	463a      	mov	r2, r7
 8008784:	4620      	mov	r0, r4
 8008786:	f002 fa21 	bl	800abcc <__lshift>
 800878a:	9007      	str	r0, [sp, #28]
 800878c:	2800      	cmp	r0, #0
 800878e:	f43f ae83 	beq.w	8008498 <_strtod_l+0x498>
 8008792:	f1b9 0f00 	cmp.w	r9, #0
 8008796:	dd08      	ble.n	80087aa <_strtod_l+0x7aa>
 8008798:	4631      	mov	r1, r6
 800879a:	464a      	mov	r2, r9
 800879c:	4620      	mov	r0, r4
 800879e:	f002 fa15 	bl	800abcc <__lshift>
 80087a2:	4606      	mov	r6, r0
 80087a4:	2800      	cmp	r0, #0
 80087a6:	f43f ae77 	beq.w	8008498 <_strtod_l+0x498>
 80087aa:	9a07      	ldr	r2, [sp, #28]
 80087ac:	991e      	ldr	r1, [sp, #120]	; 0x78
 80087ae:	4620      	mov	r0, r4
 80087b0:	f002 fa94 	bl	800acdc <__mdiff>
 80087b4:	4605      	mov	r5, r0
 80087b6:	2800      	cmp	r0, #0
 80087b8:	f43f ae6e 	beq.w	8008498 <_strtod_l+0x498>
 80087bc:	68c3      	ldr	r3, [r0, #12]
 80087be:	930f      	str	r3, [sp, #60]	; 0x3c
 80087c0:	2300      	movs	r3, #0
 80087c2:	60c3      	str	r3, [r0, #12]
 80087c4:	4631      	mov	r1, r6
 80087c6:	f002 fa6d 	bl	800aca4 <__mcmp>
 80087ca:	2800      	cmp	r0, #0
 80087cc:	da65      	bge.n	800889a <_strtod_l+0x89a>
 80087ce:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80087d0:	ea53 030a 	orrs.w	r3, r3, sl
 80087d4:	f040 8087 	bne.w	80088e6 <_strtod_l+0x8e6>
 80087d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f040 8082 	bne.w	80088e6 <_strtod_l+0x8e6>
 80087e2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80087e6:	0d1b      	lsrs	r3, r3, #20
 80087e8:	051b      	lsls	r3, r3, #20
 80087ea:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80087ee:	d97a      	bls.n	80088e6 <_strtod_l+0x8e6>
 80087f0:	696b      	ldr	r3, [r5, #20]
 80087f2:	b913      	cbnz	r3, 80087fa <_strtod_l+0x7fa>
 80087f4:	692b      	ldr	r3, [r5, #16]
 80087f6:	2b01      	cmp	r3, #1
 80087f8:	dd75      	ble.n	80088e6 <_strtod_l+0x8e6>
 80087fa:	4629      	mov	r1, r5
 80087fc:	2201      	movs	r2, #1
 80087fe:	4620      	mov	r0, r4
 8008800:	f002 f9e4 	bl	800abcc <__lshift>
 8008804:	4631      	mov	r1, r6
 8008806:	4605      	mov	r5, r0
 8008808:	f002 fa4c 	bl	800aca4 <__mcmp>
 800880c:	2800      	cmp	r0, #0
 800880e:	dd6a      	ble.n	80088e6 <_strtod_l+0x8e6>
 8008810:	9904      	ldr	r1, [sp, #16]
 8008812:	4a55      	ldr	r2, [pc, #340]	; (8008968 <_strtod_l+0x968>)
 8008814:	465b      	mov	r3, fp
 8008816:	2900      	cmp	r1, #0
 8008818:	f000 8085 	beq.w	8008926 <_strtod_l+0x926>
 800881c:	ea02 010b 	and.w	r1, r2, fp
 8008820:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008824:	dc7f      	bgt.n	8008926 <_strtod_l+0x926>
 8008826:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800882a:	f77f aeaa 	ble.w	8008582 <_strtod_l+0x582>
 800882e:	4a4f      	ldr	r2, [pc, #316]	; (800896c <_strtod_l+0x96c>)
 8008830:	2300      	movs	r3, #0
 8008832:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008836:	4650      	mov	r0, sl
 8008838:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800883c:	4659      	mov	r1, fp
 800883e:	f7f7 feeb 	bl	8000618 <__aeabi_dmul>
 8008842:	460b      	mov	r3, r1
 8008844:	4303      	orrs	r3, r0
 8008846:	bf08      	it	eq
 8008848:	2322      	moveq	r3, #34	; 0x22
 800884a:	4682      	mov	sl, r0
 800884c:	468b      	mov	fp, r1
 800884e:	bf08      	it	eq
 8008850:	6023      	streq	r3, [r4, #0]
 8008852:	e62b      	b.n	80084ac <_strtod_l+0x4ac>
 8008854:	f04f 32ff 	mov.w	r2, #4294967295
 8008858:	fa02 f303 	lsl.w	r3, r2, r3
 800885c:	ea03 0a0a 	and.w	sl, r3, sl
 8008860:	e6de      	b.n	8008620 <_strtod_l+0x620>
 8008862:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008866:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800886a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800886e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008872:	fa01 f308 	lsl.w	r3, r1, r8
 8008876:	930c      	str	r3, [sp, #48]	; 0x30
 8008878:	9111      	str	r1, [sp, #68]	; 0x44
 800887a:	e741      	b.n	8008700 <_strtod_l+0x700>
 800887c:	2300      	movs	r3, #0
 800887e:	930c      	str	r3, [sp, #48]	; 0x30
 8008880:	2301      	movs	r3, #1
 8008882:	9311      	str	r3, [sp, #68]	; 0x44
 8008884:	e73c      	b.n	8008700 <_strtod_l+0x700>
 8008886:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008888:	4642      	mov	r2, r8
 800888a:	4620      	mov	r0, r4
 800888c:	f002 f99e 	bl	800abcc <__lshift>
 8008890:	901e      	str	r0, [sp, #120]	; 0x78
 8008892:	2800      	cmp	r0, #0
 8008894:	f47f af66 	bne.w	8008764 <_strtod_l+0x764>
 8008898:	e5fe      	b.n	8008498 <_strtod_l+0x498>
 800889a:	465f      	mov	r7, fp
 800889c:	d16e      	bne.n	800897c <_strtod_l+0x97c>
 800889e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80088a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80088a4:	b342      	cbz	r2, 80088f8 <_strtod_l+0x8f8>
 80088a6:	4a32      	ldr	r2, [pc, #200]	; (8008970 <_strtod_l+0x970>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d128      	bne.n	80088fe <_strtod_l+0x8fe>
 80088ac:	9b04      	ldr	r3, [sp, #16]
 80088ae:	4650      	mov	r0, sl
 80088b0:	b1eb      	cbz	r3, 80088ee <_strtod_l+0x8ee>
 80088b2:	4a2d      	ldr	r2, [pc, #180]	; (8008968 <_strtod_l+0x968>)
 80088b4:	403a      	ands	r2, r7
 80088b6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80088ba:	f04f 31ff 	mov.w	r1, #4294967295
 80088be:	d819      	bhi.n	80088f4 <_strtod_l+0x8f4>
 80088c0:	0d12      	lsrs	r2, r2, #20
 80088c2:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80088c6:	fa01 f303 	lsl.w	r3, r1, r3
 80088ca:	4298      	cmp	r0, r3
 80088cc:	d117      	bne.n	80088fe <_strtod_l+0x8fe>
 80088ce:	4b29      	ldr	r3, [pc, #164]	; (8008974 <_strtod_l+0x974>)
 80088d0:	429f      	cmp	r7, r3
 80088d2:	d102      	bne.n	80088da <_strtod_l+0x8da>
 80088d4:	3001      	adds	r0, #1
 80088d6:	f43f addf 	beq.w	8008498 <_strtod_l+0x498>
 80088da:	4b23      	ldr	r3, [pc, #140]	; (8008968 <_strtod_l+0x968>)
 80088dc:	403b      	ands	r3, r7
 80088de:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80088e2:	f04f 0a00 	mov.w	sl, #0
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1a0      	bne.n	800882e <_strtod_l+0x82e>
 80088ec:	e5de      	b.n	80084ac <_strtod_l+0x4ac>
 80088ee:	f04f 33ff 	mov.w	r3, #4294967295
 80088f2:	e7ea      	b.n	80088ca <_strtod_l+0x8ca>
 80088f4:	460b      	mov	r3, r1
 80088f6:	e7e8      	b.n	80088ca <_strtod_l+0x8ca>
 80088f8:	ea53 030a 	orrs.w	r3, r3, sl
 80088fc:	d088      	beq.n	8008810 <_strtod_l+0x810>
 80088fe:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008900:	b1db      	cbz	r3, 800893a <_strtod_l+0x93a>
 8008902:	423b      	tst	r3, r7
 8008904:	d0ef      	beq.n	80088e6 <_strtod_l+0x8e6>
 8008906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008908:	9a04      	ldr	r2, [sp, #16]
 800890a:	4650      	mov	r0, sl
 800890c:	4659      	mov	r1, fp
 800890e:	b1c3      	cbz	r3, 8008942 <_strtod_l+0x942>
 8008910:	f7ff fb58 	bl	8007fc4 <sulp>
 8008914:	4602      	mov	r2, r0
 8008916:	460b      	mov	r3, r1
 8008918:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800891c:	f7f7 fcc6 	bl	80002ac <__adddf3>
 8008920:	4682      	mov	sl, r0
 8008922:	468b      	mov	fp, r1
 8008924:	e7df      	b.n	80088e6 <_strtod_l+0x8e6>
 8008926:	4013      	ands	r3, r2
 8008928:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800892c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008930:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008934:	f04f 3aff 	mov.w	sl, #4294967295
 8008938:	e7d5      	b.n	80088e6 <_strtod_l+0x8e6>
 800893a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800893c:	ea13 0f0a 	tst.w	r3, sl
 8008940:	e7e0      	b.n	8008904 <_strtod_l+0x904>
 8008942:	f7ff fb3f 	bl	8007fc4 <sulp>
 8008946:	4602      	mov	r2, r0
 8008948:	460b      	mov	r3, r1
 800894a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800894e:	f7f7 fcab 	bl	80002a8 <__aeabi_dsub>
 8008952:	2200      	movs	r2, #0
 8008954:	2300      	movs	r3, #0
 8008956:	4682      	mov	sl, r0
 8008958:	468b      	mov	fp, r1
 800895a:	f7f8 f8c5 	bl	8000ae8 <__aeabi_dcmpeq>
 800895e:	2800      	cmp	r0, #0
 8008960:	d0c1      	beq.n	80088e6 <_strtod_l+0x8e6>
 8008962:	e60e      	b.n	8008582 <_strtod_l+0x582>
 8008964:	fffffc02 	.word	0xfffffc02
 8008968:	7ff00000 	.word	0x7ff00000
 800896c:	39500000 	.word	0x39500000
 8008970:	000fffff 	.word	0x000fffff
 8008974:	7fefffff 	.word	0x7fefffff
 8008978:	0800bd18 	.word	0x0800bd18
 800897c:	4631      	mov	r1, r6
 800897e:	4628      	mov	r0, r5
 8008980:	f002 fb0c 	bl	800af9c <__ratio>
 8008984:	ec59 8b10 	vmov	r8, r9, d0
 8008988:	ee10 0a10 	vmov	r0, s0
 800898c:	2200      	movs	r2, #0
 800898e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008992:	4649      	mov	r1, r9
 8008994:	f7f8 f8bc 	bl	8000b10 <__aeabi_dcmple>
 8008998:	2800      	cmp	r0, #0
 800899a:	d07c      	beq.n	8008a96 <_strtod_l+0xa96>
 800899c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d04c      	beq.n	8008a3c <_strtod_l+0xa3c>
 80089a2:	4b95      	ldr	r3, [pc, #596]	; (8008bf8 <_strtod_l+0xbf8>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80089aa:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008bf8 <_strtod_l+0xbf8>
 80089ae:	f04f 0800 	mov.w	r8, #0
 80089b2:	4b92      	ldr	r3, [pc, #584]	; (8008bfc <_strtod_l+0xbfc>)
 80089b4:	403b      	ands	r3, r7
 80089b6:	9311      	str	r3, [sp, #68]	; 0x44
 80089b8:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80089ba:	4b91      	ldr	r3, [pc, #580]	; (8008c00 <_strtod_l+0xc00>)
 80089bc:	429a      	cmp	r2, r3
 80089be:	f040 80b2 	bne.w	8008b26 <_strtod_l+0xb26>
 80089c2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80089c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089ca:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80089ce:	ec4b ab10 	vmov	d0, sl, fp
 80089d2:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 80089d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80089da:	f002 fa07 	bl	800adec <__ulp>
 80089de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80089e2:	ec53 2b10 	vmov	r2, r3, d0
 80089e6:	f7f7 fe17 	bl	8000618 <__aeabi_dmul>
 80089ea:	4652      	mov	r2, sl
 80089ec:	465b      	mov	r3, fp
 80089ee:	f7f7 fc5d 	bl	80002ac <__adddf3>
 80089f2:	460b      	mov	r3, r1
 80089f4:	4981      	ldr	r1, [pc, #516]	; (8008bfc <_strtod_l+0xbfc>)
 80089f6:	4a83      	ldr	r2, [pc, #524]	; (8008c04 <_strtod_l+0xc04>)
 80089f8:	4019      	ands	r1, r3
 80089fa:	4291      	cmp	r1, r2
 80089fc:	4682      	mov	sl, r0
 80089fe:	d95e      	bls.n	8008abe <_strtod_l+0xabe>
 8008a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a02:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008a06:	4293      	cmp	r3, r2
 8008a08:	d103      	bne.n	8008a12 <_strtod_l+0xa12>
 8008a0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a0c:	3301      	adds	r3, #1
 8008a0e:	f43f ad43 	beq.w	8008498 <_strtod_l+0x498>
 8008a12:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8008c10 <_strtod_l+0xc10>
 8008a16:	f04f 3aff 	mov.w	sl, #4294967295
 8008a1a:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008a1c:	4620      	mov	r0, r4
 8008a1e:	f001 feb9 	bl	800a794 <_Bfree>
 8008a22:	9907      	ldr	r1, [sp, #28]
 8008a24:	4620      	mov	r0, r4
 8008a26:	f001 feb5 	bl	800a794 <_Bfree>
 8008a2a:	4631      	mov	r1, r6
 8008a2c:	4620      	mov	r0, r4
 8008a2e:	f001 feb1 	bl	800a794 <_Bfree>
 8008a32:	4629      	mov	r1, r5
 8008a34:	4620      	mov	r0, r4
 8008a36:	f001 fead 	bl	800a794 <_Bfree>
 8008a3a:	e613      	b.n	8008664 <_strtod_l+0x664>
 8008a3c:	f1ba 0f00 	cmp.w	sl, #0
 8008a40:	d11b      	bne.n	8008a7a <_strtod_l+0xa7a>
 8008a42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008a46:	b9f3      	cbnz	r3, 8008a86 <_strtod_l+0xa86>
 8008a48:	4b6b      	ldr	r3, [pc, #428]	; (8008bf8 <_strtod_l+0xbf8>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	4640      	mov	r0, r8
 8008a4e:	4649      	mov	r1, r9
 8008a50:	f7f8 f854 	bl	8000afc <__aeabi_dcmplt>
 8008a54:	b9d0      	cbnz	r0, 8008a8c <_strtod_l+0xa8c>
 8008a56:	4640      	mov	r0, r8
 8008a58:	4649      	mov	r1, r9
 8008a5a:	4b6b      	ldr	r3, [pc, #428]	; (8008c08 <_strtod_l+0xc08>)
 8008a5c:	2200      	movs	r2, #0
 8008a5e:	f7f7 fddb 	bl	8000618 <__aeabi_dmul>
 8008a62:	4680      	mov	r8, r0
 8008a64:	4689      	mov	r9, r1
 8008a66:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008a6a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8008a6e:	931b      	str	r3, [sp, #108]	; 0x6c
 8008a70:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8008a74:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008a78:	e79b      	b.n	80089b2 <_strtod_l+0x9b2>
 8008a7a:	f1ba 0f01 	cmp.w	sl, #1
 8008a7e:	d102      	bne.n	8008a86 <_strtod_l+0xa86>
 8008a80:	2f00      	cmp	r7, #0
 8008a82:	f43f ad7e 	beq.w	8008582 <_strtod_l+0x582>
 8008a86:	4b61      	ldr	r3, [pc, #388]	; (8008c0c <_strtod_l+0xc0c>)
 8008a88:	2200      	movs	r2, #0
 8008a8a:	e78c      	b.n	80089a6 <_strtod_l+0x9a6>
 8008a8c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8008c08 <_strtod_l+0xc08>
 8008a90:	f04f 0800 	mov.w	r8, #0
 8008a94:	e7e7      	b.n	8008a66 <_strtod_l+0xa66>
 8008a96:	4b5c      	ldr	r3, [pc, #368]	; (8008c08 <_strtod_l+0xc08>)
 8008a98:	4640      	mov	r0, r8
 8008a9a:	4649      	mov	r1, r9
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	f7f7 fdbb 	bl	8000618 <__aeabi_dmul>
 8008aa2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aa4:	4680      	mov	r8, r0
 8008aa6:	4689      	mov	r9, r1
 8008aa8:	b933      	cbnz	r3, 8008ab8 <_strtod_l+0xab8>
 8008aaa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008aae:	9012      	str	r0, [sp, #72]	; 0x48
 8008ab0:	9313      	str	r3, [sp, #76]	; 0x4c
 8008ab2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8008ab6:	e7dd      	b.n	8008a74 <_strtod_l+0xa74>
 8008ab8:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8008abc:	e7f9      	b.n	8008ab2 <_strtod_l+0xab2>
 8008abe:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008ac2:	9b04      	ldr	r3, [sp, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d1a8      	bne.n	8008a1a <_strtod_l+0xa1a>
 8008ac8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008acc:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008ace:	0d1b      	lsrs	r3, r3, #20
 8008ad0:	051b      	lsls	r3, r3, #20
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d1a1      	bne.n	8008a1a <_strtod_l+0xa1a>
 8008ad6:	4640      	mov	r0, r8
 8008ad8:	4649      	mov	r1, r9
 8008ada:	f7f8 f8fd 	bl	8000cd8 <__aeabi_d2lz>
 8008ade:	f7f7 fd6d 	bl	80005bc <__aeabi_l2d>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	460b      	mov	r3, r1
 8008ae6:	4640      	mov	r0, r8
 8008ae8:	4649      	mov	r1, r9
 8008aea:	f7f7 fbdd 	bl	80002a8 <__aeabi_dsub>
 8008aee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008af0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008af4:	ea43 030a 	orr.w	r3, r3, sl
 8008af8:	4313      	orrs	r3, r2
 8008afa:	4680      	mov	r8, r0
 8008afc:	4689      	mov	r9, r1
 8008afe:	d053      	beq.n	8008ba8 <_strtod_l+0xba8>
 8008b00:	a335      	add	r3, pc, #212	; (adr r3, 8008bd8 <_strtod_l+0xbd8>)
 8008b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b06:	f7f7 fff9 	bl	8000afc <__aeabi_dcmplt>
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f47f acce 	bne.w	80084ac <_strtod_l+0x4ac>
 8008b10:	a333      	add	r3, pc, #204	; (adr r3, 8008be0 <_strtod_l+0xbe0>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	4640      	mov	r0, r8
 8008b18:	4649      	mov	r1, r9
 8008b1a:	f7f8 f80d 	bl	8000b38 <__aeabi_dcmpgt>
 8008b1e:	2800      	cmp	r0, #0
 8008b20:	f43f af7b 	beq.w	8008a1a <_strtod_l+0xa1a>
 8008b24:	e4c2      	b.n	80084ac <_strtod_l+0x4ac>
 8008b26:	9b04      	ldr	r3, [sp, #16]
 8008b28:	b333      	cbz	r3, 8008b78 <_strtod_l+0xb78>
 8008b2a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008b2c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008b30:	d822      	bhi.n	8008b78 <_strtod_l+0xb78>
 8008b32:	a32d      	add	r3, pc, #180	; (adr r3, 8008be8 <_strtod_l+0xbe8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	4640      	mov	r0, r8
 8008b3a:	4649      	mov	r1, r9
 8008b3c:	f7f7 ffe8 	bl	8000b10 <__aeabi_dcmple>
 8008b40:	b1a0      	cbz	r0, 8008b6c <_strtod_l+0xb6c>
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	f7f8 f83f 	bl	8000bc8 <__aeabi_d2uiz>
 8008b4a:	2801      	cmp	r0, #1
 8008b4c:	bf38      	it	cc
 8008b4e:	2001      	movcc	r0, #1
 8008b50:	f7f7 fce8 	bl	8000524 <__aeabi_ui2d>
 8008b54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b56:	4680      	mov	r8, r0
 8008b58:	4689      	mov	r9, r1
 8008b5a:	bb13      	cbnz	r3, 8008ba2 <_strtod_l+0xba2>
 8008b5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b60:	9014      	str	r0, [sp, #80]	; 0x50
 8008b62:	9315      	str	r3, [sp, #84]	; 0x54
 8008b64:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008b68:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8008b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b6e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b70:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008b74:	1a9b      	subs	r3, r3, r2
 8008b76:	930d      	str	r3, [sp, #52]	; 0x34
 8008b78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b7c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8008b80:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008b84:	f002 f932 	bl	800adec <__ulp>
 8008b88:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008b8c:	ec53 2b10 	vmov	r2, r3, d0
 8008b90:	f7f7 fd42 	bl	8000618 <__aeabi_dmul>
 8008b94:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8008b98:	f7f7 fb88 	bl	80002ac <__adddf3>
 8008b9c:	4682      	mov	sl, r0
 8008b9e:	468b      	mov	fp, r1
 8008ba0:	e78f      	b.n	8008ac2 <_strtod_l+0xac2>
 8008ba2:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8008ba6:	e7dd      	b.n	8008b64 <_strtod_l+0xb64>
 8008ba8:	a311      	add	r3, pc, #68	; (adr r3, 8008bf0 <_strtod_l+0xbf0>)
 8008baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bae:	f7f7 ffa5 	bl	8000afc <__aeabi_dcmplt>
 8008bb2:	e7b4      	b.n	8008b1e <_strtod_l+0xb1e>
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	930e      	str	r3, [sp, #56]	; 0x38
 8008bb8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8008bba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008bbc:	6013      	str	r3, [r2, #0]
 8008bbe:	f7ff ba65 	b.w	800808c <_strtod_l+0x8c>
 8008bc2:	2b65      	cmp	r3, #101	; 0x65
 8008bc4:	f43f ab5d 	beq.w	8008282 <_strtod_l+0x282>
 8008bc8:	2b45      	cmp	r3, #69	; 0x45
 8008bca:	f43f ab5a 	beq.w	8008282 <_strtod_l+0x282>
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f7ff bb92 	b.w	80082f8 <_strtod_l+0x2f8>
 8008bd4:	f3af 8000 	nop.w
 8008bd8:	94a03595 	.word	0x94a03595
 8008bdc:	3fdfffff 	.word	0x3fdfffff
 8008be0:	35afe535 	.word	0x35afe535
 8008be4:	3fe00000 	.word	0x3fe00000
 8008be8:	ffc00000 	.word	0xffc00000
 8008bec:	41dfffff 	.word	0x41dfffff
 8008bf0:	94a03595 	.word	0x94a03595
 8008bf4:	3fcfffff 	.word	0x3fcfffff
 8008bf8:	3ff00000 	.word	0x3ff00000
 8008bfc:	7ff00000 	.word	0x7ff00000
 8008c00:	7fe00000 	.word	0x7fe00000
 8008c04:	7c9fffff 	.word	0x7c9fffff
 8008c08:	3fe00000 	.word	0x3fe00000
 8008c0c:	bff00000 	.word	0xbff00000
 8008c10:	7fefffff 	.word	0x7fefffff

08008c14 <_strtod_r>:
 8008c14:	4b01      	ldr	r3, [pc, #4]	; (8008c1c <_strtod_r+0x8>)
 8008c16:	f7ff b9f3 	b.w	8008000 <_strtod_l>
 8008c1a:	bf00      	nop
 8008c1c:	20000074 	.word	0x20000074

08008c20 <_strtol_l.isra.0>:
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c26:	d001      	beq.n	8008c2c <_strtol_l.isra.0+0xc>
 8008c28:	2b24      	cmp	r3, #36	; 0x24
 8008c2a:	d906      	bls.n	8008c3a <_strtol_l.isra.0+0x1a>
 8008c2c:	f7fe fa54 	bl	80070d8 <__errno>
 8008c30:	2316      	movs	r3, #22
 8008c32:	6003      	str	r3, [r0, #0]
 8008c34:	2000      	movs	r0, #0
 8008c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3a:	4f3a      	ldr	r7, [pc, #232]	; (8008d24 <_strtol_l.isra.0+0x104>)
 8008c3c:	468e      	mov	lr, r1
 8008c3e:	4676      	mov	r6, lr
 8008c40:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c44:	5de5      	ldrb	r5, [r4, r7]
 8008c46:	f015 0508 	ands.w	r5, r5, #8
 8008c4a:	d1f8      	bne.n	8008c3e <_strtol_l.isra.0+0x1e>
 8008c4c:	2c2d      	cmp	r4, #45	; 0x2d
 8008c4e:	d134      	bne.n	8008cba <_strtol_l.isra.0+0x9a>
 8008c50:	f89e 4000 	ldrb.w	r4, [lr]
 8008c54:	f04f 0801 	mov.w	r8, #1
 8008c58:	f106 0e02 	add.w	lr, r6, #2
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d05c      	beq.n	8008d1a <_strtol_l.isra.0+0xfa>
 8008c60:	2b10      	cmp	r3, #16
 8008c62:	d10c      	bne.n	8008c7e <_strtol_l.isra.0+0x5e>
 8008c64:	2c30      	cmp	r4, #48	; 0x30
 8008c66:	d10a      	bne.n	8008c7e <_strtol_l.isra.0+0x5e>
 8008c68:	f89e 4000 	ldrb.w	r4, [lr]
 8008c6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c70:	2c58      	cmp	r4, #88	; 0x58
 8008c72:	d14d      	bne.n	8008d10 <_strtol_l.isra.0+0xf0>
 8008c74:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c78:	2310      	movs	r3, #16
 8008c7a:	f10e 0e02 	add.w	lr, lr, #2
 8008c7e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c82:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c86:	2600      	movs	r6, #0
 8008c88:	fbbc f9f3 	udiv	r9, ip, r3
 8008c8c:	4635      	mov	r5, r6
 8008c8e:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c92:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c96:	2f09      	cmp	r7, #9
 8008c98:	d818      	bhi.n	8008ccc <_strtol_l.isra.0+0xac>
 8008c9a:	463c      	mov	r4, r7
 8008c9c:	42a3      	cmp	r3, r4
 8008c9e:	dd24      	ble.n	8008cea <_strtol_l.isra.0+0xca>
 8008ca0:	2e00      	cmp	r6, #0
 8008ca2:	db1f      	blt.n	8008ce4 <_strtol_l.isra.0+0xc4>
 8008ca4:	45a9      	cmp	r9, r5
 8008ca6:	d31d      	bcc.n	8008ce4 <_strtol_l.isra.0+0xc4>
 8008ca8:	d101      	bne.n	8008cae <_strtol_l.isra.0+0x8e>
 8008caa:	45a2      	cmp	sl, r4
 8008cac:	db1a      	blt.n	8008ce4 <_strtol_l.isra.0+0xc4>
 8008cae:	fb05 4503 	mla	r5, r5, r3, r4
 8008cb2:	2601      	movs	r6, #1
 8008cb4:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008cb8:	e7eb      	b.n	8008c92 <_strtol_l.isra.0+0x72>
 8008cba:	2c2b      	cmp	r4, #43	; 0x2b
 8008cbc:	bf08      	it	eq
 8008cbe:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008cc2:	46a8      	mov	r8, r5
 8008cc4:	bf08      	it	eq
 8008cc6:	f106 0e02 	addeq.w	lr, r6, #2
 8008cca:	e7c7      	b.n	8008c5c <_strtol_l.isra.0+0x3c>
 8008ccc:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008cd0:	2f19      	cmp	r7, #25
 8008cd2:	d801      	bhi.n	8008cd8 <_strtol_l.isra.0+0xb8>
 8008cd4:	3c37      	subs	r4, #55	; 0x37
 8008cd6:	e7e1      	b.n	8008c9c <_strtol_l.isra.0+0x7c>
 8008cd8:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008cdc:	2f19      	cmp	r7, #25
 8008cde:	d804      	bhi.n	8008cea <_strtol_l.isra.0+0xca>
 8008ce0:	3c57      	subs	r4, #87	; 0x57
 8008ce2:	e7db      	b.n	8008c9c <_strtol_l.isra.0+0x7c>
 8008ce4:	f04f 36ff 	mov.w	r6, #4294967295
 8008ce8:	e7e4      	b.n	8008cb4 <_strtol_l.isra.0+0x94>
 8008cea:	2e00      	cmp	r6, #0
 8008cec:	da05      	bge.n	8008cfa <_strtol_l.isra.0+0xda>
 8008cee:	2322      	movs	r3, #34	; 0x22
 8008cf0:	6003      	str	r3, [r0, #0]
 8008cf2:	4665      	mov	r5, ip
 8008cf4:	b942      	cbnz	r2, 8008d08 <_strtol_l.isra.0+0xe8>
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	e79d      	b.n	8008c36 <_strtol_l.isra.0+0x16>
 8008cfa:	f1b8 0f00 	cmp.w	r8, #0
 8008cfe:	d000      	beq.n	8008d02 <_strtol_l.isra.0+0xe2>
 8008d00:	426d      	negs	r5, r5
 8008d02:	2a00      	cmp	r2, #0
 8008d04:	d0f7      	beq.n	8008cf6 <_strtol_l.isra.0+0xd6>
 8008d06:	b10e      	cbz	r6, 8008d0c <_strtol_l.isra.0+0xec>
 8008d08:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008d0c:	6011      	str	r1, [r2, #0]
 8008d0e:	e7f2      	b.n	8008cf6 <_strtol_l.isra.0+0xd6>
 8008d10:	2430      	movs	r4, #48	; 0x30
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1b3      	bne.n	8008c7e <_strtol_l.isra.0+0x5e>
 8008d16:	2308      	movs	r3, #8
 8008d18:	e7b1      	b.n	8008c7e <_strtol_l.isra.0+0x5e>
 8008d1a:	2c30      	cmp	r4, #48	; 0x30
 8008d1c:	d0a4      	beq.n	8008c68 <_strtol_l.isra.0+0x48>
 8008d1e:	230a      	movs	r3, #10
 8008d20:	e7ad      	b.n	8008c7e <_strtol_l.isra.0+0x5e>
 8008d22:	bf00      	nop
 8008d24:	0800bd41 	.word	0x0800bd41

08008d28 <_strtol_r>:
 8008d28:	f7ff bf7a 	b.w	8008c20 <_strtol_l.isra.0>

08008d2c <__swbuf_r>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	460e      	mov	r6, r1
 8008d30:	4614      	mov	r4, r2
 8008d32:	4605      	mov	r5, r0
 8008d34:	b118      	cbz	r0, 8008d3e <__swbuf_r+0x12>
 8008d36:	6983      	ldr	r3, [r0, #24]
 8008d38:	b90b      	cbnz	r3, 8008d3e <__swbuf_r+0x12>
 8008d3a:	f001 f84b 	bl	8009dd4 <__sinit>
 8008d3e:	4b21      	ldr	r3, [pc, #132]	; (8008dc4 <__swbuf_r+0x98>)
 8008d40:	429c      	cmp	r4, r3
 8008d42:	d12b      	bne.n	8008d9c <__swbuf_r+0x70>
 8008d44:	686c      	ldr	r4, [r5, #4]
 8008d46:	69a3      	ldr	r3, [r4, #24]
 8008d48:	60a3      	str	r3, [r4, #8]
 8008d4a:	89a3      	ldrh	r3, [r4, #12]
 8008d4c:	071a      	lsls	r2, r3, #28
 8008d4e:	d52f      	bpl.n	8008db0 <__swbuf_r+0x84>
 8008d50:	6923      	ldr	r3, [r4, #16]
 8008d52:	b36b      	cbz	r3, 8008db0 <__swbuf_r+0x84>
 8008d54:	6923      	ldr	r3, [r4, #16]
 8008d56:	6820      	ldr	r0, [r4, #0]
 8008d58:	1ac0      	subs	r0, r0, r3
 8008d5a:	6963      	ldr	r3, [r4, #20]
 8008d5c:	b2f6      	uxtb	r6, r6
 8008d5e:	4283      	cmp	r3, r0
 8008d60:	4637      	mov	r7, r6
 8008d62:	dc04      	bgt.n	8008d6e <__swbuf_r+0x42>
 8008d64:	4621      	mov	r1, r4
 8008d66:	4628      	mov	r0, r5
 8008d68:	f000 ffa0 	bl	8009cac <_fflush_r>
 8008d6c:	bb30      	cbnz	r0, 8008dbc <__swbuf_r+0x90>
 8008d6e:	68a3      	ldr	r3, [r4, #8]
 8008d70:	3b01      	subs	r3, #1
 8008d72:	60a3      	str	r3, [r4, #8]
 8008d74:	6823      	ldr	r3, [r4, #0]
 8008d76:	1c5a      	adds	r2, r3, #1
 8008d78:	6022      	str	r2, [r4, #0]
 8008d7a:	701e      	strb	r6, [r3, #0]
 8008d7c:	6963      	ldr	r3, [r4, #20]
 8008d7e:	3001      	adds	r0, #1
 8008d80:	4283      	cmp	r3, r0
 8008d82:	d004      	beq.n	8008d8e <__swbuf_r+0x62>
 8008d84:	89a3      	ldrh	r3, [r4, #12]
 8008d86:	07db      	lsls	r3, r3, #31
 8008d88:	d506      	bpl.n	8008d98 <__swbuf_r+0x6c>
 8008d8a:	2e0a      	cmp	r6, #10
 8008d8c:	d104      	bne.n	8008d98 <__swbuf_r+0x6c>
 8008d8e:	4621      	mov	r1, r4
 8008d90:	4628      	mov	r0, r5
 8008d92:	f000 ff8b 	bl	8009cac <_fflush_r>
 8008d96:	b988      	cbnz	r0, 8008dbc <__swbuf_r+0x90>
 8008d98:	4638      	mov	r0, r7
 8008d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	; (8008dc8 <__swbuf_r+0x9c>)
 8008d9e:	429c      	cmp	r4, r3
 8008da0:	d101      	bne.n	8008da6 <__swbuf_r+0x7a>
 8008da2:	68ac      	ldr	r4, [r5, #8]
 8008da4:	e7cf      	b.n	8008d46 <__swbuf_r+0x1a>
 8008da6:	4b09      	ldr	r3, [pc, #36]	; (8008dcc <__swbuf_r+0xa0>)
 8008da8:	429c      	cmp	r4, r3
 8008daa:	bf08      	it	eq
 8008dac:	68ec      	ldreq	r4, [r5, #12]
 8008dae:	e7ca      	b.n	8008d46 <__swbuf_r+0x1a>
 8008db0:	4621      	mov	r1, r4
 8008db2:	4628      	mov	r0, r5
 8008db4:	f000 f80c 	bl	8008dd0 <__swsetup_r>
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0cb      	beq.n	8008d54 <__swbuf_r+0x28>
 8008dbc:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc0:	e7ea      	b.n	8008d98 <__swbuf_r+0x6c>
 8008dc2:	bf00      	nop
 8008dc4:	0800bef8 	.word	0x0800bef8
 8008dc8:	0800bf18 	.word	0x0800bf18
 8008dcc:	0800bed8 	.word	0x0800bed8

08008dd0 <__swsetup_r>:
 8008dd0:	4b32      	ldr	r3, [pc, #200]	; (8008e9c <__swsetup_r+0xcc>)
 8008dd2:	b570      	push	{r4, r5, r6, lr}
 8008dd4:	681d      	ldr	r5, [r3, #0]
 8008dd6:	4606      	mov	r6, r0
 8008dd8:	460c      	mov	r4, r1
 8008dda:	b125      	cbz	r5, 8008de6 <__swsetup_r+0x16>
 8008ddc:	69ab      	ldr	r3, [r5, #24]
 8008dde:	b913      	cbnz	r3, 8008de6 <__swsetup_r+0x16>
 8008de0:	4628      	mov	r0, r5
 8008de2:	f000 fff7 	bl	8009dd4 <__sinit>
 8008de6:	4b2e      	ldr	r3, [pc, #184]	; (8008ea0 <__swsetup_r+0xd0>)
 8008de8:	429c      	cmp	r4, r3
 8008dea:	d10f      	bne.n	8008e0c <__swsetup_r+0x3c>
 8008dec:	686c      	ldr	r4, [r5, #4]
 8008dee:	89a3      	ldrh	r3, [r4, #12]
 8008df0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008df4:	0719      	lsls	r1, r3, #28
 8008df6:	d42c      	bmi.n	8008e52 <__swsetup_r+0x82>
 8008df8:	06dd      	lsls	r5, r3, #27
 8008dfa:	d411      	bmi.n	8008e20 <__swsetup_r+0x50>
 8008dfc:	2309      	movs	r3, #9
 8008dfe:	6033      	str	r3, [r6, #0]
 8008e00:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e04:	81a3      	strh	r3, [r4, #12]
 8008e06:	f04f 30ff 	mov.w	r0, #4294967295
 8008e0a:	e03e      	b.n	8008e8a <__swsetup_r+0xba>
 8008e0c:	4b25      	ldr	r3, [pc, #148]	; (8008ea4 <__swsetup_r+0xd4>)
 8008e0e:	429c      	cmp	r4, r3
 8008e10:	d101      	bne.n	8008e16 <__swsetup_r+0x46>
 8008e12:	68ac      	ldr	r4, [r5, #8]
 8008e14:	e7eb      	b.n	8008dee <__swsetup_r+0x1e>
 8008e16:	4b24      	ldr	r3, [pc, #144]	; (8008ea8 <__swsetup_r+0xd8>)
 8008e18:	429c      	cmp	r4, r3
 8008e1a:	bf08      	it	eq
 8008e1c:	68ec      	ldreq	r4, [r5, #12]
 8008e1e:	e7e6      	b.n	8008dee <__swsetup_r+0x1e>
 8008e20:	0758      	lsls	r0, r3, #29
 8008e22:	d512      	bpl.n	8008e4a <__swsetup_r+0x7a>
 8008e24:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e26:	b141      	cbz	r1, 8008e3a <__swsetup_r+0x6a>
 8008e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e2c:	4299      	cmp	r1, r3
 8008e2e:	d002      	beq.n	8008e36 <__swsetup_r+0x66>
 8008e30:	4630      	mov	r0, r6
 8008e32:	f002 f939 	bl	800b0a8 <_free_r>
 8008e36:	2300      	movs	r3, #0
 8008e38:	6363      	str	r3, [r4, #52]	; 0x34
 8008e3a:	89a3      	ldrh	r3, [r4, #12]
 8008e3c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e40:	81a3      	strh	r3, [r4, #12]
 8008e42:	2300      	movs	r3, #0
 8008e44:	6063      	str	r3, [r4, #4]
 8008e46:	6923      	ldr	r3, [r4, #16]
 8008e48:	6023      	str	r3, [r4, #0]
 8008e4a:	89a3      	ldrh	r3, [r4, #12]
 8008e4c:	f043 0308 	orr.w	r3, r3, #8
 8008e50:	81a3      	strh	r3, [r4, #12]
 8008e52:	6923      	ldr	r3, [r4, #16]
 8008e54:	b94b      	cbnz	r3, 8008e6a <__swsetup_r+0x9a>
 8008e56:	89a3      	ldrh	r3, [r4, #12]
 8008e58:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e60:	d003      	beq.n	8008e6a <__swsetup_r+0x9a>
 8008e62:	4621      	mov	r1, r4
 8008e64:	4630      	mov	r0, r6
 8008e66:	f001 fbed 	bl	800a644 <__smakebuf_r>
 8008e6a:	89a0      	ldrh	r0, [r4, #12]
 8008e6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e70:	f010 0301 	ands.w	r3, r0, #1
 8008e74:	d00a      	beq.n	8008e8c <__swsetup_r+0xbc>
 8008e76:	2300      	movs	r3, #0
 8008e78:	60a3      	str	r3, [r4, #8]
 8008e7a:	6963      	ldr	r3, [r4, #20]
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	61a3      	str	r3, [r4, #24]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	b943      	cbnz	r3, 8008e96 <__swsetup_r+0xc6>
 8008e84:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008e88:	d1ba      	bne.n	8008e00 <__swsetup_r+0x30>
 8008e8a:	bd70      	pop	{r4, r5, r6, pc}
 8008e8c:	0781      	lsls	r1, r0, #30
 8008e8e:	bf58      	it	pl
 8008e90:	6963      	ldrpl	r3, [r4, #20]
 8008e92:	60a3      	str	r3, [r4, #8]
 8008e94:	e7f4      	b.n	8008e80 <__swsetup_r+0xb0>
 8008e96:	2000      	movs	r0, #0
 8008e98:	e7f7      	b.n	8008e8a <__swsetup_r+0xba>
 8008e9a:	bf00      	nop
 8008e9c:	2000000c 	.word	0x2000000c
 8008ea0:	0800bef8 	.word	0x0800bef8
 8008ea4:	0800bf18 	.word	0x0800bf18
 8008ea8:	0800bed8 	.word	0x0800bed8

08008eac <quorem>:
 8008eac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eb0:	6903      	ldr	r3, [r0, #16]
 8008eb2:	690c      	ldr	r4, [r1, #16]
 8008eb4:	42a3      	cmp	r3, r4
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	f2c0 8081 	blt.w	8008fbe <quorem+0x112>
 8008ebc:	3c01      	subs	r4, #1
 8008ebe:	f101 0814 	add.w	r8, r1, #20
 8008ec2:	f100 0514 	add.w	r5, r0, #20
 8008ec6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008eca:	9301      	str	r3, [sp, #4]
 8008ecc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008ed0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ed4:	3301      	adds	r3, #1
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008edc:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ee0:	fbb2 f6f3 	udiv	r6, r2, r3
 8008ee4:	d331      	bcc.n	8008f4a <quorem+0x9e>
 8008ee6:	f04f 0e00 	mov.w	lr, #0
 8008eea:	4640      	mov	r0, r8
 8008eec:	46ac      	mov	ip, r5
 8008eee:	46f2      	mov	sl, lr
 8008ef0:	f850 2b04 	ldr.w	r2, [r0], #4
 8008ef4:	b293      	uxth	r3, r2
 8008ef6:	fb06 e303 	mla	r3, r6, r3, lr
 8008efa:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008efe:	b29b      	uxth	r3, r3
 8008f00:	ebaa 0303 	sub.w	r3, sl, r3
 8008f04:	0c12      	lsrs	r2, r2, #16
 8008f06:	f8dc a000 	ldr.w	sl, [ip]
 8008f0a:	fb06 e202 	mla	r2, r6, r2, lr
 8008f0e:	fa13 f38a 	uxtah	r3, r3, sl
 8008f12:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008f16:	fa1f fa82 	uxth.w	sl, r2
 8008f1a:	f8dc 2000 	ldr.w	r2, [ip]
 8008f1e:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8008f22:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f26:	b29b      	uxth	r3, r3
 8008f28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f2c:	4581      	cmp	r9, r0
 8008f2e:	f84c 3b04 	str.w	r3, [ip], #4
 8008f32:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8008f36:	d2db      	bcs.n	8008ef0 <quorem+0x44>
 8008f38:	f855 300b 	ldr.w	r3, [r5, fp]
 8008f3c:	b92b      	cbnz	r3, 8008f4a <quorem+0x9e>
 8008f3e:	9b01      	ldr	r3, [sp, #4]
 8008f40:	3b04      	subs	r3, #4
 8008f42:	429d      	cmp	r5, r3
 8008f44:	461a      	mov	r2, r3
 8008f46:	d32e      	bcc.n	8008fa6 <quorem+0xfa>
 8008f48:	613c      	str	r4, [r7, #16]
 8008f4a:	4638      	mov	r0, r7
 8008f4c:	f001 feaa 	bl	800aca4 <__mcmp>
 8008f50:	2800      	cmp	r0, #0
 8008f52:	db24      	blt.n	8008f9e <quorem+0xf2>
 8008f54:	3601      	adds	r6, #1
 8008f56:	4628      	mov	r0, r5
 8008f58:	f04f 0c00 	mov.w	ip, #0
 8008f5c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f60:	f8d0 e000 	ldr.w	lr, [r0]
 8008f64:	b293      	uxth	r3, r2
 8008f66:	ebac 0303 	sub.w	r3, ip, r3
 8008f6a:	0c12      	lsrs	r2, r2, #16
 8008f6c:	fa13 f38e 	uxtah	r3, r3, lr
 8008f70:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008f74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008f78:	b29b      	uxth	r3, r3
 8008f7a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f7e:	45c1      	cmp	r9, r8
 8008f80:	f840 3b04 	str.w	r3, [r0], #4
 8008f84:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008f88:	d2e8      	bcs.n	8008f5c <quorem+0xb0>
 8008f8a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f8e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f92:	b922      	cbnz	r2, 8008f9e <quorem+0xf2>
 8008f94:	3b04      	subs	r3, #4
 8008f96:	429d      	cmp	r5, r3
 8008f98:	461a      	mov	r2, r3
 8008f9a:	d30a      	bcc.n	8008fb2 <quorem+0x106>
 8008f9c:	613c      	str	r4, [r7, #16]
 8008f9e:	4630      	mov	r0, r6
 8008fa0:	b003      	add	sp, #12
 8008fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fa6:	6812      	ldr	r2, [r2, #0]
 8008fa8:	3b04      	subs	r3, #4
 8008faa:	2a00      	cmp	r2, #0
 8008fac:	d1cc      	bne.n	8008f48 <quorem+0x9c>
 8008fae:	3c01      	subs	r4, #1
 8008fb0:	e7c7      	b.n	8008f42 <quorem+0x96>
 8008fb2:	6812      	ldr	r2, [r2, #0]
 8008fb4:	3b04      	subs	r3, #4
 8008fb6:	2a00      	cmp	r2, #0
 8008fb8:	d1f0      	bne.n	8008f9c <quorem+0xf0>
 8008fba:	3c01      	subs	r4, #1
 8008fbc:	e7eb      	b.n	8008f96 <quorem+0xea>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e7ee      	b.n	8008fa0 <quorem+0xf4>
 8008fc2:	0000      	movs	r0, r0
 8008fc4:	0000      	movs	r0, r0
	...

08008fc8 <_dtoa_r>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	ed2d 8b02 	vpush	{d8}
 8008fd0:	ec57 6b10 	vmov	r6, r7, d0
 8008fd4:	b095      	sub	sp, #84	; 0x54
 8008fd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008fd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008fdc:	9105      	str	r1, [sp, #20]
 8008fde:	e9cd 6702 	strd	r6, r7, [sp, #8]
 8008fe2:	4604      	mov	r4, r0
 8008fe4:	9209      	str	r2, [sp, #36]	; 0x24
 8008fe6:	930f      	str	r3, [sp, #60]	; 0x3c
 8008fe8:	b975      	cbnz	r5, 8009008 <_dtoa_r+0x40>
 8008fea:	2010      	movs	r0, #16
 8008fec:	f001 fb6a 	bl	800a6c4 <malloc>
 8008ff0:	4602      	mov	r2, r0
 8008ff2:	6260      	str	r0, [r4, #36]	; 0x24
 8008ff4:	b920      	cbnz	r0, 8009000 <_dtoa_r+0x38>
 8008ff6:	4bb2      	ldr	r3, [pc, #712]	; (80092c0 <_dtoa_r+0x2f8>)
 8008ff8:	21ea      	movs	r1, #234	; 0xea
 8008ffa:	48b2      	ldr	r0, [pc, #712]	; (80092c4 <_dtoa_r+0x2fc>)
 8008ffc:	f002 fc88 	bl	800b910 <__assert_func>
 8009000:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009004:	6005      	str	r5, [r0, #0]
 8009006:	60c5      	str	r5, [r0, #12]
 8009008:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800900a:	6819      	ldr	r1, [r3, #0]
 800900c:	b151      	cbz	r1, 8009024 <_dtoa_r+0x5c>
 800900e:	685a      	ldr	r2, [r3, #4]
 8009010:	604a      	str	r2, [r1, #4]
 8009012:	2301      	movs	r3, #1
 8009014:	4093      	lsls	r3, r2
 8009016:	608b      	str	r3, [r1, #8]
 8009018:	4620      	mov	r0, r4
 800901a:	f001 fbbb 	bl	800a794 <_Bfree>
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	2200      	movs	r2, #0
 8009022:	601a      	str	r2, [r3, #0]
 8009024:	1e3b      	subs	r3, r7, #0
 8009026:	bfb9      	ittee	lt
 8009028:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800902c:	9303      	strlt	r3, [sp, #12]
 800902e:	2300      	movge	r3, #0
 8009030:	f8c8 3000 	strge.w	r3, [r8]
 8009034:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8009038:	4ba3      	ldr	r3, [pc, #652]	; (80092c8 <_dtoa_r+0x300>)
 800903a:	bfbc      	itt	lt
 800903c:	2201      	movlt	r2, #1
 800903e:	f8c8 2000 	strlt.w	r2, [r8]
 8009042:	ea33 0309 	bics.w	r3, r3, r9
 8009046:	d11b      	bne.n	8009080 <_dtoa_r+0xb8>
 8009048:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800904a:	f242 730f 	movw	r3, #9999	; 0x270f
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009054:	4333      	orrs	r3, r6
 8009056:	f000 857a 	beq.w	8009b4e <_dtoa_r+0xb86>
 800905a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800905c:	b963      	cbnz	r3, 8009078 <_dtoa_r+0xb0>
 800905e:	4b9b      	ldr	r3, [pc, #620]	; (80092cc <_dtoa_r+0x304>)
 8009060:	e024      	b.n	80090ac <_dtoa_r+0xe4>
 8009062:	4b9b      	ldr	r3, [pc, #620]	; (80092d0 <_dtoa_r+0x308>)
 8009064:	9300      	str	r3, [sp, #0]
 8009066:	3308      	adds	r3, #8
 8009068:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	9800      	ldr	r0, [sp, #0]
 800906e:	b015      	add	sp, #84	; 0x54
 8009070:	ecbd 8b02 	vpop	{d8}
 8009074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009078:	4b94      	ldr	r3, [pc, #592]	; (80092cc <_dtoa_r+0x304>)
 800907a:	9300      	str	r3, [sp, #0]
 800907c:	3303      	adds	r3, #3
 800907e:	e7f3      	b.n	8009068 <_dtoa_r+0xa0>
 8009080:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009084:	2200      	movs	r2, #0
 8009086:	ec51 0b17 	vmov	r0, r1, d7
 800908a:	2300      	movs	r3, #0
 800908c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8009090:	f7f7 fd2a 	bl	8000ae8 <__aeabi_dcmpeq>
 8009094:	4680      	mov	r8, r0
 8009096:	b158      	cbz	r0, 80090b0 <_dtoa_r+0xe8>
 8009098:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800909a:	2301      	movs	r3, #1
 800909c:	6013      	str	r3, [r2, #0]
 800909e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	f000 8551 	beq.w	8009b48 <_dtoa_r+0xb80>
 80090a6:	488b      	ldr	r0, [pc, #556]	; (80092d4 <_dtoa_r+0x30c>)
 80090a8:	6018      	str	r0, [r3, #0]
 80090aa:	1e43      	subs	r3, r0, #1
 80090ac:	9300      	str	r3, [sp, #0]
 80090ae:	e7dd      	b.n	800906c <_dtoa_r+0xa4>
 80090b0:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80090b4:	aa12      	add	r2, sp, #72	; 0x48
 80090b6:	a913      	add	r1, sp, #76	; 0x4c
 80090b8:	4620      	mov	r0, r4
 80090ba:	f001 ff13 	bl	800aee4 <__d2b>
 80090be:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80090c2:	4683      	mov	fp, r0
 80090c4:	2d00      	cmp	r5, #0
 80090c6:	d07c      	beq.n	80091c2 <_dtoa_r+0x1fa>
 80090c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090ca:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 80090ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090d2:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 80090d6:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80090da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80090de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80090e2:	4b7d      	ldr	r3, [pc, #500]	; (80092d8 <_dtoa_r+0x310>)
 80090e4:	2200      	movs	r2, #0
 80090e6:	4630      	mov	r0, r6
 80090e8:	4639      	mov	r1, r7
 80090ea:	f7f7 f8dd 	bl	80002a8 <__aeabi_dsub>
 80090ee:	a36e      	add	r3, pc, #440	; (adr r3, 80092a8 <_dtoa_r+0x2e0>)
 80090f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f4:	f7f7 fa90 	bl	8000618 <__aeabi_dmul>
 80090f8:	a36d      	add	r3, pc, #436	; (adr r3, 80092b0 <_dtoa_r+0x2e8>)
 80090fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090fe:	f7f7 f8d5 	bl	80002ac <__adddf3>
 8009102:	4606      	mov	r6, r0
 8009104:	4628      	mov	r0, r5
 8009106:	460f      	mov	r7, r1
 8009108:	f7f7 fa1c 	bl	8000544 <__aeabi_i2d>
 800910c:	a36a      	add	r3, pc, #424	; (adr r3, 80092b8 <_dtoa_r+0x2f0>)
 800910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009112:	f7f7 fa81 	bl	8000618 <__aeabi_dmul>
 8009116:	4602      	mov	r2, r0
 8009118:	460b      	mov	r3, r1
 800911a:	4630      	mov	r0, r6
 800911c:	4639      	mov	r1, r7
 800911e:	f7f7 f8c5 	bl	80002ac <__adddf3>
 8009122:	4606      	mov	r6, r0
 8009124:	460f      	mov	r7, r1
 8009126:	f7f7 fd27 	bl	8000b78 <__aeabi_d2iz>
 800912a:	2200      	movs	r2, #0
 800912c:	4682      	mov	sl, r0
 800912e:	2300      	movs	r3, #0
 8009130:	4630      	mov	r0, r6
 8009132:	4639      	mov	r1, r7
 8009134:	f7f7 fce2 	bl	8000afc <__aeabi_dcmplt>
 8009138:	b148      	cbz	r0, 800914e <_dtoa_r+0x186>
 800913a:	4650      	mov	r0, sl
 800913c:	f7f7 fa02 	bl	8000544 <__aeabi_i2d>
 8009140:	4632      	mov	r2, r6
 8009142:	463b      	mov	r3, r7
 8009144:	f7f7 fcd0 	bl	8000ae8 <__aeabi_dcmpeq>
 8009148:	b908      	cbnz	r0, 800914e <_dtoa_r+0x186>
 800914a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800914e:	f1ba 0f16 	cmp.w	sl, #22
 8009152:	d854      	bhi.n	80091fe <_dtoa_r+0x236>
 8009154:	4b61      	ldr	r3, [pc, #388]	; (80092dc <_dtoa_r+0x314>)
 8009156:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800915a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800915e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009162:	f7f7 fccb 	bl	8000afc <__aeabi_dcmplt>
 8009166:	2800      	cmp	r0, #0
 8009168:	d04b      	beq.n	8009202 <_dtoa_r+0x23a>
 800916a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800916e:	2300      	movs	r3, #0
 8009170:	930e      	str	r3, [sp, #56]	; 0x38
 8009172:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009174:	1b5d      	subs	r5, r3, r5
 8009176:	1e6b      	subs	r3, r5, #1
 8009178:	9304      	str	r3, [sp, #16]
 800917a:	bf43      	ittte	mi
 800917c:	2300      	movmi	r3, #0
 800917e:	f1c5 0801 	rsbmi	r8, r5, #1
 8009182:	9304      	strmi	r3, [sp, #16]
 8009184:	f04f 0800 	movpl.w	r8, #0
 8009188:	f1ba 0f00 	cmp.w	sl, #0
 800918c:	db3b      	blt.n	8009206 <_dtoa_r+0x23e>
 800918e:	9b04      	ldr	r3, [sp, #16]
 8009190:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 8009194:	4453      	add	r3, sl
 8009196:	9304      	str	r3, [sp, #16]
 8009198:	2300      	movs	r3, #0
 800919a:	9306      	str	r3, [sp, #24]
 800919c:	9b05      	ldr	r3, [sp, #20]
 800919e:	2b09      	cmp	r3, #9
 80091a0:	d869      	bhi.n	8009276 <_dtoa_r+0x2ae>
 80091a2:	2b05      	cmp	r3, #5
 80091a4:	bfc4      	itt	gt
 80091a6:	3b04      	subgt	r3, #4
 80091a8:	9305      	strgt	r3, [sp, #20]
 80091aa:	9b05      	ldr	r3, [sp, #20]
 80091ac:	f1a3 0302 	sub.w	r3, r3, #2
 80091b0:	bfcc      	ite	gt
 80091b2:	2500      	movgt	r5, #0
 80091b4:	2501      	movle	r5, #1
 80091b6:	2b03      	cmp	r3, #3
 80091b8:	d869      	bhi.n	800928e <_dtoa_r+0x2c6>
 80091ba:	e8df f003 	tbb	[pc, r3]
 80091be:	4e2c      	.short	0x4e2c
 80091c0:	5a4c      	.short	0x5a4c
 80091c2:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 80091c6:	441d      	add	r5, r3
 80091c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80091cc:	2b20      	cmp	r3, #32
 80091ce:	bfc1      	itttt	gt
 80091d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80091d4:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80091d8:	fa09 f303 	lslgt.w	r3, r9, r3
 80091dc:	fa26 f000 	lsrgt.w	r0, r6, r0
 80091e0:	bfda      	itte	le
 80091e2:	f1c3 0320 	rsble	r3, r3, #32
 80091e6:	fa06 f003 	lslle.w	r0, r6, r3
 80091ea:	4318      	orrgt	r0, r3
 80091ec:	f7f7 f99a 	bl	8000524 <__aeabi_ui2d>
 80091f0:	2301      	movs	r3, #1
 80091f2:	4606      	mov	r6, r0
 80091f4:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80091f8:	3d01      	subs	r5, #1
 80091fa:	9310      	str	r3, [sp, #64]	; 0x40
 80091fc:	e771      	b.n	80090e2 <_dtoa_r+0x11a>
 80091fe:	2301      	movs	r3, #1
 8009200:	e7b6      	b.n	8009170 <_dtoa_r+0x1a8>
 8009202:	900e      	str	r0, [sp, #56]	; 0x38
 8009204:	e7b5      	b.n	8009172 <_dtoa_r+0x1aa>
 8009206:	f1ca 0300 	rsb	r3, sl, #0
 800920a:	9306      	str	r3, [sp, #24]
 800920c:	2300      	movs	r3, #0
 800920e:	eba8 080a 	sub.w	r8, r8, sl
 8009212:	930d      	str	r3, [sp, #52]	; 0x34
 8009214:	e7c2      	b.n	800919c <_dtoa_r+0x1d4>
 8009216:	2300      	movs	r3, #0
 8009218:	9308      	str	r3, [sp, #32]
 800921a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800921c:	2b00      	cmp	r3, #0
 800921e:	dc39      	bgt.n	8009294 <_dtoa_r+0x2cc>
 8009220:	f04f 0901 	mov.w	r9, #1
 8009224:	f8cd 9004 	str.w	r9, [sp, #4]
 8009228:	464b      	mov	r3, r9
 800922a:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800922e:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009230:	2200      	movs	r2, #0
 8009232:	6042      	str	r2, [r0, #4]
 8009234:	2204      	movs	r2, #4
 8009236:	f102 0614 	add.w	r6, r2, #20
 800923a:	429e      	cmp	r6, r3
 800923c:	6841      	ldr	r1, [r0, #4]
 800923e:	d92f      	bls.n	80092a0 <_dtoa_r+0x2d8>
 8009240:	4620      	mov	r0, r4
 8009242:	f001 fa67 	bl	800a714 <_Balloc>
 8009246:	9000      	str	r0, [sp, #0]
 8009248:	2800      	cmp	r0, #0
 800924a:	d14b      	bne.n	80092e4 <_dtoa_r+0x31c>
 800924c:	4b24      	ldr	r3, [pc, #144]	; (80092e0 <_dtoa_r+0x318>)
 800924e:	4602      	mov	r2, r0
 8009250:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009254:	e6d1      	b.n	8008ffa <_dtoa_r+0x32>
 8009256:	2301      	movs	r3, #1
 8009258:	e7de      	b.n	8009218 <_dtoa_r+0x250>
 800925a:	2300      	movs	r3, #0
 800925c:	9308      	str	r3, [sp, #32]
 800925e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009260:	eb0a 0903 	add.w	r9, sl, r3
 8009264:	f109 0301 	add.w	r3, r9, #1
 8009268:	2b01      	cmp	r3, #1
 800926a:	9301      	str	r3, [sp, #4]
 800926c:	bfb8      	it	lt
 800926e:	2301      	movlt	r3, #1
 8009270:	e7dd      	b.n	800922e <_dtoa_r+0x266>
 8009272:	2301      	movs	r3, #1
 8009274:	e7f2      	b.n	800925c <_dtoa_r+0x294>
 8009276:	2501      	movs	r5, #1
 8009278:	2300      	movs	r3, #0
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	9508      	str	r5, [sp, #32]
 800927e:	f04f 39ff 	mov.w	r9, #4294967295
 8009282:	2200      	movs	r2, #0
 8009284:	f8cd 9004 	str.w	r9, [sp, #4]
 8009288:	2312      	movs	r3, #18
 800928a:	9209      	str	r2, [sp, #36]	; 0x24
 800928c:	e7cf      	b.n	800922e <_dtoa_r+0x266>
 800928e:	2301      	movs	r3, #1
 8009290:	9308      	str	r3, [sp, #32]
 8009292:	e7f4      	b.n	800927e <_dtoa_r+0x2b6>
 8009294:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8009298:	f8cd 9004 	str.w	r9, [sp, #4]
 800929c:	464b      	mov	r3, r9
 800929e:	e7c6      	b.n	800922e <_dtoa_r+0x266>
 80092a0:	3101      	adds	r1, #1
 80092a2:	6041      	str	r1, [r0, #4]
 80092a4:	0052      	lsls	r2, r2, #1
 80092a6:	e7c6      	b.n	8009236 <_dtoa_r+0x26e>
 80092a8:	636f4361 	.word	0x636f4361
 80092ac:	3fd287a7 	.word	0x3fd287a7
 80092b0:	8b60c8b3 	.word	0x8b60c8b3
 80092b4:	3fc68a28 	.word	0x3fc68a28
 80092b8:	509f79fb 	.word	0x509f79fb
 80092bc:	3fd34413 	.word	0x3fd34413
 80092c0:	0800be4e 	.word	0x0800be4e
 80092c4:	0800be65 	.word	0x0800be65
 80092c8:	7ff00000 	.word	0x7ff00000
 80092cc:	0800be4a 	.word	0x0800be4a
 80092d0:	0800be41 	.word	0x0800be41
 80092d4:	0800bcc1 	.word	0x0800bcc1
 80092d8:	3ff80000 	.word	0x3ff80000
 80092dc:	0800c040 	.word	0x0800c040
 80092e0:	0800bec4 	.word	0x0800bec4
 80092e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80092e6:	9a00      	ldr	r2, [sp, #0]
 80092e8:	601a      	str	r2, [r3, #0]
 80092ea:	9b01      	ldr	r3, [sp, #4]
 80092ec:	2b0e      	cmp	r3, #14
 80092ee:	f200 80ad 	bhi.w	800944c <_dtoa_r+0x484>
 80092f2:	2d00      	cmp	r5, #0
 80092f4:	f000 80aa 	beq.w	800944c <_dtoa_r+0x484>
 80092f8:	f1ba 0f00 	cmp.w	sl, #0
 80092fc:	dd36      	ble.n	800936c <_dtoa_r+0x3a4>
 80092fe:	4ac3      	ldr	r2, [pc, #780]	; (800960c <_dtoa_r+0x644>)
 8009300:	f00a 030f 	and.w	r3, sl, #15
 8009304:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009308:	ed93 7b00 	vldr	d7, [r3]
 800930c:	f41a 7f80 	tst.w	sl, #256	; 0x100
 8009310:	ea4f 172a 	mov.w	r7, sl, asr #4
 8009314:	eeb0 8a47 	vmov.f32	s16, s14
 8009318:	eef0 8a67 	vmov.f32	s17, s15
 800931c:	d016      	beq.n	800934c <_dtoa_r+0x384>
 800931e:	4bbc      	ldr	r3, [pc, #752]	; (8009610 <_dtoa_r+0x648>)
 8009320:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009324:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009328:	f7f7 faa0 	bl	800086c <__aeabi_ddiv>
 800932c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009330:	f007 070f 	and.w	r7, r7, #15
 8009334:	2503      	movs	r5, #3
 8009336:	4eb6      	ldr	r6, [pc, #728]	; (8009610 <_dtoa_r+0x648>)
 8009338:	b957      	cbnz	r7, 8009350 <_dtoa_r+0x388>
 800933a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800933e:	ec53 2b18 	vmov	r2, r3, d8
 8009342:	f7f7 fa93 	bl	800086c <__aeabi_ddiv>
 8009346:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800934a:	e029      	b.n	80093a0 <_dtoa_r+0x3d8>
 800934c:	2502      	movs	r5, #2
 800934e:	e7f2      	b.n	8009336 <_dtoa_r+0x36e>
 8009350:	07f9      	lsls	r1, r7, #31
 8009352:	d508      	bpl.n	8009366 <_dtoa_r+0x39e>
 8009354:	ec51 0b18 	vmov	r0, r1, d8
 8009358:	e9d6 2300 	ldrd	r2, r3, [r6]
 800935c:	f7f7 f95c 	bl	8000618 <__aeabi_dmul>
 8009360:	ec41 0b18 	vmov	d8, r0, r1
 8009364:	3501      	adds	r5, #1
 8009366:	107f      	asrs	r7, r7, #1
 8009368:	3608      	adds	r6, #8
 800936a:	e7e5      	b.n	8009338 <_dtoa_r+0x370>
 800936c:	f000 80a6 	beq.w	80094bc <_dtoa_r+0x4f4>
 8009370:	f1ca 0600 	rsb	r6, sl, #0
 8009374:	4ba5      	ldr	r3, [pc, #660]	; (800960c <_dtoa_r+0x644>)
 8009376:	4fa6      	ldr	r7, [pc, #664]	; (8009610 <_dtoa_r+0x648>)
 8009378:	f006 020f 	and.w	r2, r6, #15
 800937c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009384:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009388:	f7f7 f946 	bl	8000618 <__aeabi_dmul>
 800938c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009390:	1136      	asrs	r6, r6, #4
 8009392:	2300      	movs	r3, #0
 8009394:	2502      	movs	r5, #2
 8009396:	2e00      	cmp	r6, #0
 8009398:	f040 8085 	bne.w	80094a6 <_dtoa_r+0x4de>
 800939c:	2b00      	cmp	r3, #0
 800939e:	d1d2      	bne.n	8009346 <_dtoa_r+0x37e>
 80093a0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	f000 808c 	beq.w	80094c0 <_dtoa_r+0x4f8>
 80093a8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ac:	4b99      	ldr	r3, [pc, #612]	; (8009614 <_dtoa_r+0x64c>)
 80093ae:	2200      	movs	r2, #0
 80093b0:	4630      	mov	r0, r6
 80093b2:	4639      	mov	r1, r7
 80093b4:	f7f7 fba2 	bl	8000afc <__aeabi_dcmplt>
 80093b8:	2800      	cmp	r0, #0
 80093ba:	f000 8081 	beq.w	80094c0 <_dtoa_r+0x4f8>
 80093be:	9b01      	ldr	r3, [sp, #4]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d07d      	beq.n	80094c0 <_dtoa_r+0x4f8>
 80093c4:	f1b9 0f00 	cmp.w	r9, #0
 80093c8:	dd3c      	ble.n	8009444 <_dtoa_r+0x47c>
 80093ca:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093ce:	9307      	str	r3, [sp, #28]
 80093d0:	2200      	movs	r2, #0
 80093d2:	4b91      	ldr	r3, [pc, #580]	; (8009618 <_dtoa_r+0x650>)
 80093d4:	4630      	mov	r0, r6
 80093d6:	4639      	mov	r1, r7
 80093d8:	f7f7 f91e 	bl	8000618 <__aeabi_dmul>
 80093dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093e0:	3501      	adds	r5, #1
 80093e2:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 80093e6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80093ea:	4628      	mov	r0, r5
 80093ec:	f7f7 f8aa 	bl	8000544 <__aeabi_i2d>
 80093f0:	4632      	mov	r2, r6
 80093f2:	463b      	mov	r3, r7
 80093f4:	f7f7 f910 	bl	8000618 <__aeabi_dmul>
 80093f8:	4b88      	ldr	r3, [pc, #544]	; (800961c <_dtoa_r+0x654>)
 80093fa:	2200      	movs	r2, #0
 80093fc:	f7f6 ff56 	bl	80002ac <__adddf3>
 8009400:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8009404:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009408:	9303      	str	r3, [sp, #12]
 800940a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800940c:	2b00      	cmp	r3, #0
 800940e:	d15c      	bne.n	80094ca <_dtoa_r+0x502>
 8009410:	4b83      	ldr	r3, [pc, #524]	; (8009620 <_dtoa_r+0x658>)
 8009412:	2200      	movs	r2, #0
 8009414:	4630      	mov	r0, r6
 8009416:	4639      	mov	r1, r7
 8009418:	f7f6 ff46 	bl	80002a8 <__aeabi_dsub>
 800941c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009420:	4606      	mov	r6, r0
 8009422:	460f      	mov	r7, r1
 8009424:	f7f7 fb88 	bl	8000b38 <__aeabi_dcmpgt>
 8009428:	2800      	cmp	r0, #0
 800942a:	f040 8296 	bne.w	800995a <_dtoa_r+0x992>
 800942e:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009432:	4630      	mov	r0, r6
 8009434:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009438:	4639      	mov	r1, r7
 800943a:	f7f7 fb5f 	bl	8000afc <__aeabi_dcmplt>
 800943e:	2800      	cmp	r0, #0
 8009440:	f040 8288 	bne.w	8009954 <_dtoa_r+0x98c>
 8009444:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009448:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800944c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800944e:	2b00      	cmp	r3, #0
 8009450:	f2c0 8158 	blt.w	8009704 <_dtoa_r+0x73c>
 8009454:	f1ba 0f0e 	cmp.w	sl, #14
 8009458:	f300 8154 	bgt.w	8009704 <_dtoa_r+0x73c>
 800945c:	4b6b      	ldr	r3, [pc, #428]	; (800960c <_dtoa_r+0x644>)
 800945e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8009462:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009466:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009468:	2b00      	cmp	r3, #0
 800946a:	f280 80e3 	bge.w	8009634 <_dtoa_r+0x66c>
 800946e:	9b01      	ldr	r3, [sp, #4]
 8009470:	2b00      	cmp	r3, #0
 8009472:	f300 80df 	bgt.w	8009634 <_dtoa_r+0x66c>
 8009476:	f040 826d 	bne.w	8009954 <_dtoa_r+0x98c>
 800947a:	4b69      	ldr	r3, [pc, #420]	; (8009620 <_dtoa_r+0x658>)
 800947c:	2200      	movs	r2, #0
 800947e:	4640      	mov	r0, r8
 8009480:	4649      	mov	r1, r9
 8009482:	f7f7 f8c9 	bl	8000618 <__aeabi_dmul>
 8009486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800948a:	f7f7 fb4b 	bl	8000b24 <__aeabi_dcmpge>
 800948e:	9e01      	ldr	r6, [sp, #4]
 8009490:	4637      	mov	r7, r6
 8009492:	2800      	cmp	r0, #0
 8009494:	f040 8243 	bne.w	800991e <_dtoa_r+0x956>
 8009498:	9d00      	ldr	r5, [sp, #0]
 800949a:	2331      	movs	r3, #49	; 0x31
 800949c:	f805 3b01 	strb.w	r3, [r5], #1
 80094a0:	f10a 0a01 	add.w	sl, sl, #1
 80094a4:	e23f      	b.n	8009926 <_dtoa_r+0x95e>
 80094a6:	07f2      	lsls	r2, r6, #31
 80094a8:	d505      	bpl.n	80094b6 <_dtoa_r+0x4ee>
 80094aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094ae:	f7f7 f8b3 	bl	8000618 <__aeabi_dmul>
 80094b2:	3501      	adds	r5, #1
 80094b4:	2301      	movs	r3, #1
 80094b6:	1076      	asrs	r6, r6, #1
 80094b8:	3708      	adds	r7, #8
 80094ba:	e76c      	b.n	8009396 <_dtoa_r+0x3ce>
 80094bc:	2502      	movs	r5, #2
 80094be:	e76f      	b.n	80093a0 <_dtoa_r+0x3d8>
 80094c0:	9b01      	ldr	r3, [sp, #4]
 80094c2:	f8cd a01c 	str.w	sl, [sp, #28]
 80094c6:	930c      	str	r3, [sp, #48]	; 0x30
 80094c8:	e78d      	b.n	80093e6 <_dtoa_r+0x41e>
 80094ca:	9900      	ldr	r1, [sp, #0]
 80094cc:	980c      	ldr	r0, [sp, #48]	; 0x30
 80094ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80094d0:	4b4e      	ldr	r3, [pc, #312]	; (800960c <_dtoa_r+0x644>)
 80094d2:	ed9d 7b02 	vldr	d7, [sp, #8]
 80094d6:	4401      	add	r1, r0
 80094d8:	9102      	str	r1, [sp, #8]
 80094da:	9908      	ldr	r1, [sp, #32]
 80094dc:	eeb0 8a47 	vmov.f32	s16, s14
 80094e0:	eef0 8a67 	vmov.f32	s17, s15
 80094e4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094e8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094ec:	2900      	cmp	r1, #0
 80094ee:	d045      	beq.n	800957c <_dtoa_r+0x5b4>
 80094f0:	494c      	ldr	r1, [pc, #304]	; (8009624 <_dtoa_r+0x65c>)
 80094f2:	2000      	movs	r0, #0
 80094f4:	f7f7 f9ba 	bl	800086c <__aeabi_ddiv>
 80094f8:	ec53 2b18 	vmov	r2, r3, d8
 80094fc:	f7f6 fed4 	bl	80002a8 <__aeabi_dsub>
 8009500:	9d00      	ldr	r5, [sp, #0]
 8009502:	ec41 0b18 	vmov	d8, r0, r1
 8009506:	4639      	mov	r1, r7
 8009508:	4630      	mov	r0, r6
 800950a:	f7f7 fb35 	bl	8000b78 <__aeabi_d2iz>
 800950e:	900c      	str	r0, [sp, #48]	; 0x30
 8009510:	f7f7 f818 	bl	8000544 <__aeabi_i2d>
 8009514:	4602      	mov	r2, r0
 8009516:	460b      	mov	r3, r1
 8009518:	4630      	mov	r0, r6
 800951a:	4639      	mov	r1, r7
 800951c:	f7f6 fec4 	bl	80002a8 <__aeabi_dsub>
 8009520:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009522:	3330      	adds	r3, #48	; 0x30
 8009524:	f805 3b01 	strb.w	r3, [r5], #1
 8009528:	ec53 2b18 	vmov	r2, r3, d8
 800952c:	4606      	mov	r6, r0
 800952e:	460f      	mov	r7, r1
 8009530:	f7f7 fae4 	bl	8000afc <__aeabi_dcmplt>
 8009534:	2800      	cmp	r0, #0
 8009536:	d165      	bne.n	8009604 <_dtoa_r+0x63c>
 8009538:	4632      	mov	r2, r6
 800953a:	463b      	mov	r3, r7
 800953c:	4935      	ldr	r1, [pc, #212]	; (8009614 <_dtoa_r+0x64c>)
 800953e:	2000      	movs	r0, #0
 8009540:	f7f6 feb2 	bl	80002a8 <__aeabi_dsub>
 8009544:	ec53 2b18 	vmov	r2, r3, d8
 8009548:	f7f7 fad8 	bl	8000afc <__aeabi_dcmplt>
 800954c:	2800      	cmp	r0, #0
 800954e:	f040 80b9 	bne.w	80096c4 <_dtoa_r+0x6fc>
 8009552:	9b02      	ldr	r3, [sp, #8]
 8009554:	429d      	cmp	r5, r3
 8009556:	f43f af75 	beq.w	8009444 <_dtoa_r+0x47c>
 800955a:	4b2f      	ldr	r3, [pc, #188]	; (8009618 <_dtoa_r+0x650>)
 800955c:	ec51 0b18 	vmov	r0, r1, d8
 8009560:	2200      	movs	r2, #0
 8009562:	f7f7 f859 	bl	8000618 <__aeabi_dmul>
 8009566:	4b2c      	ldr	r3, [pc, #176]	; (8009618 <_dtoa_r+0x650>)
 8009568:	ec41 0b18 	vmov	d8, r0, r1
 800956c:	2200      	movs	r2, #0
 800956e:	4630      	mov	r0, r6
 8009570:	4639      	mov	r1, r7
 8009572:	f7f7 f851 	bl	8000618 <__aeabi_dmul>
 8009576:	4606      	mov	r6, r0
 8009578:	460f      	mov	r7, r1
 800957a:	e7c4      	b.n	8009506 <_dtoa_r+0x53e>
 800957c:	ec51 0b17 	vmov	r0, r1, d7
 8009580:	f7f7 f84a 	bl	8000618 <__aeabi_dmul>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	9d00      	ldr	r5, [sp, #0]
 8009588:	930c      	str	r3, [sp, #48]	; 0x30
 800958a:	ec41 0b18 	vmov	d8, r0, r1
 800958e:	4639      	mov	r1, r7
 8009590:	4630      	mov	r0, r6
 8009592:	f7f7 faf1 	bl	8000b78 <__aeabi_d2iz>
 8009596:	9011      	str	r0, [sp, #68]	; 0x44
 8009598:	f7f6 ffd4 	bl	8000544 <__aeabi_i2d>
 800959c:	4602      	mov	r2, r0
 800959e:	460b      	mov	r3, r1
 80095a0:	4630      	mov	r0, r6
 80095a2:	4639      	mov	r1, r7
 80095a4:	f7f6 fe80 	bl	80002a8 <__aeabi_dsub>
 80095a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80095aa:	3330      	adds	r3, #48	; 0x30
 80095ac:	f805 3b01 	strb.w	r3, [r5], #1
 80095b0:	9b02      	ldr	r3, [sp, #8]
 80095b2:	429d      	cmp	r5, r3
 80095b4:	4606      	mov	r6, r0
 80095b6:	460f      	mov	r7, r1
 80095b8:	f04f 0200 	mov.w	r2, #0
 80095bc:	d134      	bne.n	8009628 <_dtoa_r+0x660>
 80095be:	4b19      	ldr	r3, [pc, #100]	; (8009624 <_dtoa_r+0x65c>)
 80095c0:	ec51 0b18 	vmov	r0, r1, d8
 80095c4:	f7f6 fe72 	bl	80002ac <__adddf3>
 80095c8:	4602      	mov	r2, r0
 80095ca:	460b      	mov	r3, r1
 80095cc:	4630      	mov	r0, r6
 80095ce:	4639      	mov	r1, r7
 80095d0:	f7f7 fab2 	bl	8000b38 <__aeabi_dcmpgt>
 80095d4:	2800      	cmp	r0, #0
 80095d6:	d175      	bne.n	80096c4 <_dtoa_r+0x6fc>
 80095d8:	ec53 2b18 	vmov	r2, r3, d8
 80095dc:	4911      	ldr	r1, [pc, #68]	; (8009624 <_dtoa_r+0x65c>)
 80095de:	2000      	movs	r0, #0
 80095e0:	f7f6 fe62 	bl	80002a8 <__aeabi_dsub>
 80095e4:	4602      	mov	r2, r0
 80095e6:	460b      	mov	r3, r1
 80095e8:	4630      	mov	r0, r6
 80095ea:	4639      	mov	r1, r7
 80095ec:	f7f7 fa86 	bl	8000afc <__aeabi_dcmplt>
 80095f0:	2800      	cmp	r0, #0
 80095f2:	f43f af27 	beq.w	8009444 <_dtoa_r+0x47c>
 80095f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095f8:	1e6b      	subs	r3, r5, #1
 80095fa:	930c      	str	r3, [sp, #48]	; 0x30
 80095fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009600:	2b30      	cmp	r3, #48	; 0x30
 8009602:	d0f8      	beq.n	80095f6 <_dtoa_r+0x62e>
 8009604:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009608:	e04a      	b.n	80096a0 <_dtoa_r+0x6d8>
 800960a:	bf00      	nop
 800960c:	0800c040 	.word	0x0800c040
 8009610:	0800c018 	.word	0x0800c018
 8009614:	3ff00000 	.word	0x3ff00000
 8009618:	40240000 	.word	0x40240000
 800961c:	401c0000 	.word	0x401c0000
 8009620:	40140000 	.word	0x40140000
 8009624:	3fe00000 	.word	0x3fe00000
 8009628:	4baf      	ldr	r3, [pc, #700]	; (80098e8 <_dtoa_r+0x920>)
 800962a:	f7f6 fff5 	bl	8000618 <__aeabi_dmul>
 800962e:	4606      	mov	r6, r0
 8009630:	460f      	mov	r7, r1
 8009632:	e7ac      	b.n	800958e <_dtoa_r+0x5c6>
 8009634:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009638:	9d00      	ldr	r5, [sp, #0]
 800963a:	4642      	mov	r2, r8
 800963c:	464b      	mov	r3, r9
 800963e:	4630      	mov	r0, r6
 8009640:	4639      	mov	r1, r7
 8009642:	f7f7 f913 	bl	800086c <__aeabi_ddiv>
 8009646:	f7f7 fa97 	bl	8000b78 <__aeabi_d2iz>
 800964a:	9002      	str	r0, [sp, #8]
 800964c:	f7f6 ff7a 	bl	8000544 <__aeabi_i2d>
 8009650:	4642      	mov	r2, r8
 8009652:	464b      	mov	r3, r9
 8009654:	f7f6 ffe0 	bl	8000618 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fe22 	bl	80002a8 <__aeabi_dsub>
 8009664:	9e02      	ldr	r6, [sp, #8]
 8009666:	9f01      	ldr	r7, [sp, #4]
 8009668:	3630      	adds	r6, #48	; 0x30
 800966a:	f805 6b01 	strb.w	r6, [r5], #1
 800966e:	9e00      	ldr	r6, [sp, #0]
 8009670:	1bae      	subs	r6, r5, r6
 8009672:	42b7      	cmp	r7, r6
 8009674:	4602      	mov	r2, r0
 8009676:	460b      	mov	r3, r1
 8009678:	d137      	bne.n	80096ea <_dtoa_r+0x722>
 800967a:	f7f6 fe17 	bl	80002ac <__adddf3>
 800967e:	4642      	mov	r2, r8
 8009680:	464b      	mov	r3, r9
 8009682:	4606      	mov	r6, r0
 8009684:	460f      	mov	r7, r1
 8009686:	f7f7 fa57 	bl	8000b38 <__aeabi_dcmpgt>
 800968a:	b9c8      	cbnz	r0, 80096c0 <_dtoa_r+0x6f8>
 800968c:	4642      	mov	r2, r8
 800968e:	464b      	mov	r3, r9
 8009690:	4630      	mov	r0, r6
 8009692:	4639      	mov	r1, r7
 8009694:	f7f7 fa28 	bl	8000ae8 <__aeabi_dcmpeq>
 8009698:	b110      	cbz	r0, 80096a0 <_dtoa_r+0x6d8>
 800969a:	9b02      	ldr	r3, [sp, #8]
 800969c:	07d9      	lsls	r1, r3, #31
 800969e:	d40f      	bmi.n	80096c0 <_dtoa_r+0x6f8>
 80096a0:	4620      	mov	r0, r4
 80096a2:	4659      	mov	r1, fp
 80096a4:	f001 f876 	bl	800a794 <_Bfree>
 80096a8:	2300      	movs	r3, #0
 80096aa:	702b      	strb	r3, [r5, #0]
 80096ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ae:	f10a 0001 	add.w	r0, sl, #1
 80096b2:	6018      	str	r0, [r3, #0]
 80096b4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	f43f acd8 	beq.w	800906c <_dtoa_r+0xa4>
 80096bc:	601d      	str	r5, [r3, #0]
 80096be:	e4d5      	b.n	800906c <_dtoa_r+0xa4>
 80096c0:	f8cd a01c 	str.w	sl, [sp, #28]
 80096c4:	462b      	mov	r3, r5
 80096c6:	461d      	mov	r5, r3
 80096c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096cc:	2a39      	cmp	r2, #57	; 0x39
 80096ce:	d108      	bne.n	80096e2 <_dtoa_r+0x71a>
 80096d0:	9a00      	ldr	r2, [sp, #0]
 80096d2:	429a      	cmp	r2, r3
 80096d4:	d1f7      	bne.n	80096c6 <_dtoa_r+0x6fe>
 80096d6:	9a07      	ldr	r2, [sp, #28]
 80096d8:	9900      	ldr	r1, [sp, #0]
 80096da:	3201      	adds	r2, #1
 80096dc:	9207      	str	r2, [sp, #28]
 80096de:	2230      	movs	r2, #48	; 0x30
 80096e0:	700a      	strb	r2, [r1, #0]
 80096e2:	781a      	ldrb	r2, [r3, #0]
 80096e4:	3201      	adds	r2, #1
 80096e6:	701a      	strb	r2, [r3, #0]
 80096e8:	e78c      	b.n	8009604 <_dtoa_r+0x63c>
 80096ea:	4b7f      	ldr	r3, [pc, #508]	; (80098e8 <_dtoa_r+0x920>)
 80096ec:	2200      	movs	r2, #0
 80096ee:	f7f6 ff93 	bl	8000618 <__aeabi_dmul>
 80096f2:	2200      	movs	r2, #0
 80096f4:	2300      	movs	r3, #0
 80096f6:	4606      	mov	r6, r0
 80096f8:	460f      	mov	r7, r1
 80096fa:	f7f7 f9f5 	bl	8000ae8 <__aeabi_dcmpeq>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d09b      	beq.n	800963a <_dtoa_r+0x672>
 8009702:	e7cd      	b.n	80096a0 <_dtoa_r+0x6d8>
 8009704:	9a08      	ldr	r2, [sp, #32]
 8009706:	2a00      	cmp	r2, #0
 8009708:	f000 80c4 	beq.w	8009894 <_dtoa_r+0x8cc>
 800970c:	9a05      	ldr	r2, [sp, #20]
 800970e:	2a01      	cmp	r2, #1
 8009710:	f300 80a8 	bgt.w	8009864 <_dtoa_r+0x89c>
 8009714:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009716:	2a00      	cmp	r2, #0
 8009718:	f000 80a0 	beq.w	800985c <_dtoa_r+0x894>
 800971c:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009720:	9e06      	ldr	r6, [sp, #24]
 8009722:	4645      	mov	r5, r8
 8009724:	9a04      	ldr	r2, [sp, #16]
 8009726:	2101      	movs	r1, #1
 8009728:	441a      	add	r2, r3
 800972a:	4620      	mov	r0, r4
 800972c:	4498      	add	r8, r3
 800972e:	9204      	str	r2, [sp, #16]
 8009730:	f001 f936 	bl	800a9a0 <__i2b>
 8009734:	4607      	mov	r7, r0
 8009736:	2d00      	cmp	r5, #0
 8009738:	dd0b      	ble.n	8009752 <_dtoa_r+0x78a>
 800973a:	9b04      	ldr	r3, [sp, #16]
 800973c:	2b00      	cmp	r3, #0
 800973e:	dd08      	ble.n	8009752 <_dtoa_r+0x78a>
 8009740:	42ab      	cmp	r3, r5
 8009742:	9a04      	ldr	r2, [sp, #16]
 8009744:	bfa8      	it	ge
 8009746:	462b      	movge	r3, r5
 8009748:	eba8 0803 	sub.w	r8, r8, r3
 800974c:	1aed      	subs	r5, r5, r3
 800974e:	1ad3      	subs	r3, r2, r3
 8009750:	9304      	str	r3, [sp, #16]
 8009752:	9b06      	ldr	r3, [sp, #24]
 8009754:	b1fb      	cbz	r3, 8009796 <_dtoa_r+0x7ce>
 8009756:	9b08      	ldr	r3, [sp, #32]
 8009758:	2b00      	cmp	r3, #0
 800975a:	f000 809f 	beq.w	800989c <_dtoa_r+0x8d4>
 800975e:	2e00      	cmp	r6, #0
 8009760:	dd11      	ble.n	8009786 <_dtoa_r+0x7be>
 8009762:	4639      	mov	r1, r7
 8009764:	4632      	mov	r2, r6
 8009766:	4620      	mov	r0, r4
 8009768:	f001 f9d6 	bl	800ab18 <__pow5mult>
 800976c:	465a      	mov	r2, fp
 800976e:	4601      	mov	r1, r0
 8009770:	4607      	mov	r7, r0
 8009772:	4620      	mov	r0, r4
 8009774:	f001 f92a 	bl	800a9cc <__multiply>
 8009778:	4659      	mov	r1, fp
 800977a:	9007      	str	r0, [sp, #28]
 800977c:	4620      	mov	r0, r4
 800977e:	f001 f809 	bl	800a794 <_Bfree>
 8009782:	9b07      	ldr	r3, [sp, #28]
 8009784:	469b      	mov	fp, r3
 8009786:	9b06      	ldr	r3, [sp, #24]
 8009788:	1b9a      	subs	r2, r3, r6
 800978a:	d004      	beq.n	8009796 <_dtoa_r+0x7ce>
 800978c:	4659      	mov	r1, fp
 800978e:	4620      	mov	r0, r4
 8009790:	f001 f9c2 	bl	800ab18 <__pow5mult>
 8009794:	4683      	mov	fp, r0
 8009796:	2101      	movs	r1, #1
 8009798:	4620      	mov	r0, r4
 800979a:	f001 f901 	bl	800a9a0 <__i2b>
 800979e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	4606      	mov	r6, r0
 80097a4:	dd7c      	ble.n	80098a0 <_dtoa_r+0x8d8>
 80097a6:	461a      	mov	r2, r3
 80097a8:	4601      	mov	r1, r0
 80097aa:	4620      	mov	r0, r4
 80097ac:	f001 f9b4 	bl	800ab18 <__pow5mult>
 80097b0:	9b05      	ldr	r3, [sp, #20]
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	4606      	mov	r6, r0
 80097b6:	dd76      	ble.n	80098a6 <_dtoa_r+0x8de>
 80097b8:	2300      	movs	r3, #0
 80097ba:	9306      	str	r3, [sp, #24]
 80097bc:	6933      	ldr	r3, [r6, #16]
 80097be:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80097c2:	6918      	ldr	r0, [r3, #16]
 80097c4:	f001 f89c 	bl	800a900 <__hi0bits>
 80097c8:	f1c0 0020 	rsb	r0, r0, #32
 80097cc:	9b04      	ldr	r3, [sp, #16]
 80097ce:	4418      	add	r0, r3
 80097d0:	f010 001f 	ands.w	r0, r0, #31
 80097d4:	f000 8086 	beq.w	80098e4 <_dtoa_r+0x91c>
 80097d8:	f1c0 0320 	rsb	r3, r0, #32
 80097dc:	2b04      	cmp	r3, #4
 80097de:	dd7f      	ble.n	80098e0 <_dtoa_r+0x918>
 80097e0:	f1c0 001c 	rsb	r0, r0, #28
 80097e4:	9b04      	ldr	r3, [sp, #16]
 80097e6:	4403      	add	r3, r0
 80097e8:	4480      	add	r8, r0
 80097ea:	4405      	add	r5, r0
 80097ec:	9304      	str	r3, [sp, #16]
 80097ee:	f1b8 0f00 	cmp.w	r8, #0
 80097f2:	dd05      	ble.n	8009800 <_dtoa_r+0x838>
 80097f4:	4659      	mov	r1, fp
 80097f6:	4642      	mov	r2, r8
 80097f8:	4620      	mov	r0, r4
 80097fa:	f001 f9e7 	bl	800abcc <__lshift>
 80097fe:	4683      	mov	fp, r0
 8009800:	9b04      	ldr	r3, [sp, #16]
 8009802:	2b00      	cmp	r3, #0
 8009804:	dd05      	ble.n	8009812 <_dtoa_r+0x84a>
 8009806:	4631      	mov	r1, r6
 8009808:	461a      	mov	r2, r3
 800980a:	4620      	mov	r0, r4
 800980c:	f001 f9de 	bl	800abcc <__lshift>
 8009810:	4606      	mov	r6, r0
 8009812:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009814:	2b00      	cmp	r3, #0
 8009816:	d069      	beq.n	80098ec <_dtoa_r+0x924>
 8009818:	4631      	mov	r1, r6
 800981a:	4658      	mov	r0, fp
 800981c:	f001 fa42 	bl	800aca4 <__mcmp>
 8009820:	2800      	cmp	r0, #0
 8009822:	da63      	bge.n	80098ec <_dtoa_r+0x924>
 8009824:	2300      	movs	r3, #0
 8009826:	4659      	mov	r1, fp
 8009828:	220a      	movs	r2, #10
 800982a:	4620      	mov	r0, r4
 800982c:	f000 ffd4 	bl	800a7d8 <__multadd>
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009836:	4683      	mov	fp, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	f000 818f 	beq.w	8009b5c <_dtoa_r+0xb94>
 800983e:	4639      	mov	r1, r7
 8009840:	2300      	movs	r3, #0
 8009842:	220a      	movs	r2, #10
 8009844:	4620      	mov	r0, r4
 8009846:	f000 ffc7 	bl	800a7d8 <__multadd>
 800984a:	f1b9 0f00 	cmp.w	r9, #0
 800984e:	4607      	mov	r7, r0
 8009850:	f300 808e 	bgt.w	8009970 <_dtoa_r+0x9a8>
 8009854:	9b05      	ldr	r3, [sp, #20]
 8009856:	2b02      	cmp	r3, #2
 8009858:	dc50      	bgt.n	80098fc <_dtoa_r+0x934>
 800985a:	e089      	b.n	8009970 <_dtoa_r+0x9a8>
 800985c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800985e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009862:	e75d      	b.n	8009720 <_dtoa_r+0x758>
 8009864:	9b01      	ldr	r3, [sp, #4]
 8009866:	1e5e      	subs	r6, r3, #1
 8009868:	9b06      	ldr	r3, [sp, #24]
 800986a:	42b3      	cmp	r3, r6
 800986c:	bfbf      	itttt	lt
 800986e:	9b06      	ldrlt	r3, [sp, #24]
 8009870:	9606      	strlt	r6, [sp, #24]
 8009872:	1af2      	sublt	r2, r6, r3
 8009874:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 8009876:	bfb6      	itet	lt
 8009878:	189b      	addlt	r3, r3, r2
 800987a:	1b9e      	subge	r6, r3, r6
 800987c:	930d      	strlt	r3, [sp, #52]	; 0x34
 800987e:	9b01      	ldr	r3, [sp, #4]
 8009880:	bfb8      	it	lt
 8009882:	2600      	movlt	r6, #0
 8009884:	2b00      	cmp	r3, #0
 8009886:	bfb5      	itete	lt
 8009888:	eba8 0503 	sublt.w	r5, r8, r3
 800988c:	9b01      	ldrge	r3, [sp, #4]
 800988e:	2300      	movlt	r3, #0
 8009890:	4645      	movge	r5, r8
 8009892:	e747      	b.n	8009724 <_dtoa_r+0x75c>
 8009894:	9e06      	ldr	r6, [sp, #24]
 8009896:	9f08      	ldr	r7, [sp, #32]
 8009898:	4645      	mov	r5, r8
 800989a:	e74c      	b.n	8009736 <_dtoa_r+0x76e>
 800989c:	9a06      	ldr	r2, [sp, #24]
 800989e:	e775      	b.n	800978c <_dtoa_r+0x7c4>
 80098a0:	9b05      	ldr	r3, [sp, #20]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	dc18      	bgt.n	80098d8 <_dtoa_r+0x910>
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	b9b3      	cbnz	r3, 80098d8 <_dtoa_r+0x910>
 80098aa:	9b03      	ldr	r3, [sp, #12]
 80098ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80098b0:	b9a3      	cbnz	r3, 80098dc <_dtoa_r+0x914>
 80098b2:	9b03      	ldr	r3, [sp, #12]
 80098b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80098b8:	0d1b      	lsrs	r3, r3, #20
 80098ba:	051b      	lsls	r3, r3, #20
 80098bc:	b12b      	cbz	r3, 80098ca <_dtoa_r+0x902>
 80098be:	9b04      	ldr	r3, [sp, #16]
 80098c0:	3301      	adds	r3, #1
 80098c2:	9304      	str	r3, [sp, #16]
 80098c4:	f108 0801 	add.w	r8, r8, #1
 80098c8:	2301      	movs	r3, #1
 80098ca:	9306      	str	r3, [sp, #24]
 80098cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	f47f af74 	bne.w	80097bc <_dtoa_r+0x7f4>
 80098d4:	2001      	movs	r0, #1
 80098d6:	e779      	b.n	80097cc <_dtoa_r+0x804>
 80098d8:	2300      	movs	r3, #0
 80098da:	e7f6      	b.n	80098ca <_dtoa_r+0x902>
 80098dc:	9b02      	ldr	r3, [sp, #8]
 80098de:	e7f4      	b.n	80098ca <_dtoa_r+0x902>
 80098e0:	d085      	beq.n	80097ee <_dtoa_r+0x826>
 80098e2:	4618      	mov	r0, r3
 80098e4:	301c      	adds	r0, #28
 80098e6:	e77d      	b.n	80097e4 <_dtoa_r+0x81c>
 80098e8:	40240000 	.word	0x40240000
 80098ec:	9b01      	ldr	r3, [sp, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	dc38      	bgt.n	8009964 <_dtoa_r+0x99c>
 80098f2:	9b05      	ldr	r3, [sp, #20]
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	dd35      	ble.n	8009964 <_dtoa_r+0x99c>
 80098f8:	f8dd 9004 	ldr.w	r9, [sp, #4]
 80098fc:	f1b9 0f00 	cmp.w	r9, #0
 8009900:	d10d      	bne.n	800991e <_dtoa_r+0x956>
 8009902:	4631      	mov	r1, r6
 8009904:	464b      	mov	r3, r9
 8009906:	2205      	movs	r2, #5
 8009908:	4620      	mov	r0, r4
 800990a:	f000 ff65 	bl	800a7d8 <__multadd>
 800990e:	4601      	mov	r1, r0
 8009910:	4606      	mov	r6, r0
 8009912:	4658      	mov	r0, fp
 8009914:	f001 f9c6 	bl	800aca4 <__mcmp>
 8009918:	2800      	cmp	r0, #0
 800991a:	f73f adbd 	bgt.w	8009498 <_dtoa_r+0x4d0>
 800991e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009920:	9d00      	ldr	r5, [sp, #0]
 8009922:	ea6f 0a03 	mvn.w	sl, r3
 8009926:	f04f 0800 	mov.w	r8, #0
 800992a:	4631      	mov	r1, r6
 800992c:	4620      	mov	r0, r4
 800992e:	f000 ff31 	bl	800a794 <_Bfree>
 8009932:	2f00      	cmp	r7, #0
 8009934:	f43f aeb4 	beq.w	80096a0 <_dtoa_r+0x6d8>
 8009938:	f1b8 0f00 	cmp.w	r8, #0
 800993c:	d005      	beq.n	800994a <_dtoa_r+0x982>
 800993e:	45b8      	cmp	r8, r7
 8009940:	d003      	beq.n	800994a <_dtoa_r+0x982>
 8009942:	4641      	mov	r1, r8
 8009944:	4620      	mov	r0, r4
 8009946:	f000 ff25 	bl	800a794 <_Bfree>
 800994a:	4639      	mov	r1, r7
 800994c:	4620      	mov	r0, r4
 800994e:	f000 ff21 	bl	800a794 <_Bfree>
 8009952:	e6a5      	b.n	80096a0 <_dtoa_r+0x6d8>
 8009954:	2600      	movs	r6, #0
 8009956:	4637      	mov	r7, r6
 8009958:	e7e1      	b.n	800991e <_dtoa_r+0x956>
 800995a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800995c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8009960:	4637      	mov	r7, r6
 8009962:	e599      	b.n	8009498 <_dtoa_r+0x4d0>
 8009964:	9b08      	ldr	r3, [sp, #32]
 8009966:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800996a:	2b00      	cmp	r3, #0
 800996c:	f000 80fd 	beq.w	8009b6a <_dtoa_r+0xba2>
 8009970:	2d00      	cmp	r5, #0
 8009972:	dd05      	ble.n	8009980 <_dtoa_r+0x9b8>
 8009974:	4639      	mov	r1, r7
 8009976:	462a      	mov	r2, r5
 8009978:	4620      	mov	r0, r4
 800997a:	f001 f927 	bl	800abcc <__lshift>
 800997e:	4607      	mov	r7, r0
 8009980:	9b06      	ldr	r3, [sp, #24]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d05c      	beq.n	8009a40 <_dtoa_r+0xa78>
 8009986:	6879      	ldr	r1, [r7, #4]
 8009988:	4620      	mov	r0, r4
 800998a:	f000 fec3 	bl	800a714 <_Balloc>
 800998e:	4605      	mov	r5, r0
 8009990:	b928      	cbnz	r0, 800999e <_dtoa_r+0x9d6>
 8009992:	4b80      	ldr	r3, [pc, #512]	; (8009b94 <_dtoa_r+0xbcc>)
 8009994:	4602      	mov	r2, r0
 8009996:	f240 21ea 	movw	r1, #746	; 0x2ea
 800999a:	f7ff bb2e 	b.w	8008ffa <_dtoa_r+0x32>
 800999e:	693a      	ldr	r2, [r7, #16]
 80099a0:	3202      	adds	r2, #2
 80099a2:	0092      	lsls	r2, r2, #2
 80099a4:	f107 010c 	add.w	r1, r7, #12
 80099a8:	300c      	adds	r0, #12
 80099aa:	f000 fea5 	bl	800a6f8 <memcpy>
 80099ae:	2201      	movs	r2, #1
 80099b0:	4629      	mov	r1, r5
 80099b2:	4620      	mov	r0, r4
 80099b4:	f001 f90a 	bl	800abcc <__lshift>
 80099b8:	9b00      	ldr	r3, [sp, #0]
 80099ba:	3301      	adds	r3, #1
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	9b00      	ldr	r3, [sp, #0]
 80099c0:	444b      	add	r3, r9
 80099c2:	9307      	str	r3, [sp, #28]
 80099c4:	9b02      	ldr	r3, [sp, #8]
 80099c6:	f003 0301 	and.w	r3, r3, #1
 80099ca:	46b8      	mov	r8, r7
 80099cc:	9306      	str	r3, [sp, #24]
 80099ce:	4607      	mov	r7, r0
 80099d0:	9b01      	ldr	r3, [sp, #4]
 80099d2:	4631      	mov	r1, r6
 80099d4:	3b01      	subs	r3, #1
 80099d6:	4658      	mov	r0, fp
 80099d8:	9302      	str	r3, [sp, #8]
 80099da:	f7ff fa67 	bl	8008eac <quorem>
 80099de:	4603      	mov	r3, r0
 80099e0:	3330      	adds	r3, #48	; 0x30
 80099e2:	9004      	str	r0, [sp, #16]
 80099e4:	4641      	mov	r1, r8
 80099e6:	4658      	mov	r0, fp
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	f001 f95b 	bl	800aca4 <__mcmp>
 80099ee:	463a      	mov	r2, r7
 80099f0:	4681      	mov	r9, r0
 80099f2:	4631      	mov	r1, r6
 80099f4:	4620      	mov	r0, r4
 80099f6:	f001 f971 	bl	800acdc <__mdiff>
 80099fa:	68c2      	ldr	r2, [r0, #12]
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	4605      	mov	r5, r0
 8009a00:	bb02      	cbnz	r2, 8009a44 <_dtoa_r+0xa7c>
 8009a02:	4601      	mov	r1, r0
 8009a04:	4658      	mov	r0, fp
 8009a06:	f001 f94d 	bl	800aca4 <__mcmp>
 8009a0a:	9b08      	ldr	r3, [sp, #32]
 8009a0c:	4602      	mov	r2, r0
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4620      	mov	r0, r4
 8009a12:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8009a16:	f000 febd 	bl	800a794 <_Bfree>
 8009a1a:	9b05      	ldr	r3, [sp, #20]
 8009a1c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009a1e:	9d01      	ldr	r5, [sp, #4]
 8009a20:	ea43 0102 	orr.w	r1, r3, r2
 8009a24:	9b06      	ldr	r3, [sp, #24]
 8009a26:	430b      	orrs	r3, r1
 8009a28:	9b08      	ldr	r3, [sp, #32]
 8009a2a:	d10d      	bne.n	8009a48 <_dtoa_r+0xa80>
 8009a2c:	2b39      	cmp	r3, #57	; 0x39
 8009a2e:	d029      	beq.n	8009a84 <_dtoa_r+0xabc>
 8009a30:	f1b9 0f00 	cmp.w	r9, #0
 8009a34:	dd01      	ble.n	8009a3a <_dtoa_r+0xa72>
 8009a36:	9b04      	ldr	r3, [sp, #16]
 8009a38:	3331      	adds	r3, #49	; 0x31
 8009a3a:	9a02      	ldr	r2, [sp, #8]
 8009a3c:	7013      	strb	r3, [r2, #0]
 8009a3e:	e774      	b.n	800992a <_dtoa_r+0x962>
 8009a40:	4638      	mov	r0, r7
 8009a42:	e7b9      	b.n	80099b8 <_dtoa_r+0x9f0>
 8009a44:	2201      	movs	r2, #1
 8009a46:	e7e2      	b.n	8009a0e <_dtoa_r+0xa46>
 8009a48:	f1b9 0f00 	cmp.w	r9, #0
 8009a4c:	db06      	blt.n	8009a5c <_dtoa_r+0xa94>
 8009a4e:	9905      	ldr	r1, [sp, #20]
 8009a50:	ea41 0909 	orr.w	r9, r1, r9
 8009a54:	9906      	ldr	r1, [sp, #24]
 8009a56:	ea59 0101 	orrs.w	r1, r9, r1
 8009a5a:	d120      	bne.n	8009a9e <_dtoa_r+0xad6>
 8009a5c:	2a00      	cmp	r2, #0
 8009a5e:	ddec      	ble.n	8009a3a <_dtoa_r+0xa72>
 8009a60:	4659      	mov	r1, fp
 8009a62:	2201      	movs	r2, #1
 8009a64:	4620      	mov	r0, r4
 8009a66:	9301      	str	r3, [sp, #4]
 8009a68:	f001 f8b0 	bl	800abcc <__lshift>
 8009a6c:	4631      	mov	r1, r6
 8009a6e:	4683      	mov	fp, r0
 8009a70:	f001 f918 	bl	800aca4 <__mcmp>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	9b01      	ldr	r3, [sp, #4]
 8009a78:	dc02      	bgt.n	8009a80 <_dtoa_r+0xab8>
 8009a7a:	d1de      	bne.n	8009a3a <_dtoa_r+0xa72>
 8009a7c:	07da      	lsls	r2, r3, #31
 8009a7e:	d5dc      	bpl.n	8009a3a <_dtoa_r+0xa72>
 8009a80:	2b39      	cmp	r3, #57	; 0x39
 8009a82:	d1d8      	bne.n	8009a36 <_dtoa_r+0xa6e>
 8009a84:	9a02      	ldr	r2, [sp, #8]
 8009a86:	2339      	movs	r3, #57	; 0x39
 8009a88:	7013      	strb	r3, [r2, #0]
 8009a8a:	462b      	mov	r3, r5
 8009a8c:	461d      	mov	r5, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009a94:	2a39      	cmp	r2, #57	; 0x39
 8009a96:	d050      	beq.n	8009b3a <_dtoa_r+0xb72>
 8009a98:	3201      	adds	r2, #1
 8009a9a:	701a      	strb	r2, [r3, #0]
 8009a9c:	e745      	b.n	800992a <_dtoa_r+0x962>
 8009a9e:	2a00      	cmp	r2, #0
 8009aa0:	dd03      	ble.n	8009aaa <_dtoa_r+0xae2>
 8009aa2:	2b39      	cmp	r3, #57	; 0x39
 8009aa4:	d0ee      	beq.n	8009a84 <_dtoa_r+0xabc>
 8009aa6:	3301      	adds	r3, #1
 8009aa8:	e7c7      	b.n	8009a3a <_dtoa_r+0xa72>
 8009aaa:	9a01      	ldr	r2, [sp, #4]
 8009aac:	9907      	ldr	r1, [sp, #28]
 8009aae:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009ab2:	428a      	cmp	r2, r1
 8009ab4:	d02a      	beq.n	8009b0c <_dtoa_r+0xb44>
 8009ab6:	4659      	mov	r1, fp
 8009ab8:	2300      	movs	r3, #0
 8009aba:	220a      	movs	r2, #10
 8009abc:	4620      	mov	r0, r4
 8009abe:	f000 fe8b 	bl	800a7d8 <__multadd>
 8009ac2:	45b8      	cmp	r8, r7
 8009ac4:	4683      	mov	fp, r0
 8009ac6:	f04f 0300 	mov.w	r3, #0
 8009aca:	f04f 020a 	mov.w	r2, #10
 8009ace:	4641      	mov	r1, r8
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	d107      	bne.n	8009ae4 <_dtoa_r+0xb1c>
 8009ad4:	f000 fe80 	bl	800a7d8 <__multadd>
 8009ad8:	4680      	mov	r8, r0
 8009ada:	4607      	mov	r7, r0
 8009adc:	9b01      	ldr	r3, [sp, #4]
 8009ade:	3301      	adds	r3, #1
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	e775      	b.n	80099d0 <_dtoa_r+0xa08>
 8009ae4:	f000 fe78 	bl	800a7d8 <__multadd>
 8009ae8:	4639      	mov	r1, r7
 8009aea:	4680      	mov	r8, r0
 8009aec:	2300      	movs	r3, #0
 8009aee:	220a      	movs	r2, #10
 8009af0:	4620      	mov	r0, r4
 8009af2:	f000 fe71 	bl	800a7d8 <__multadd>
 8009af6:	4607      	mov	r7, r0
 8009af8:	e7f0      	b.n	8009adc <_dtoa_r+0xb14>
 8009afa:	f1b9 0f00 	cmp.w	r9, #0
 8009afe:	9a00      	ldr	r2, [sp, #0]
 8009b00:	bfcc      	ite	gt
 8009b02:	464d      	movgt	r5, r9
 8009b04:	2501      	movle	r5, #1
 8009b06:	4415      	add	r5, r2
 8009b08:	f04f 0800 	mov.w	r8, #0
 8009b0c:	4659      	mov	r1, fp
 8009b0e:	2201      	movs	r2, #1
 8009b10:	4620      	mov	r0, r4
 8009b12:	9301      	str	r3, [sp, #4]
 8009b14:	f001 f85a 	bl	800abcc <__lshift>
 8009b18:	4631      	mov	r1, r6
 8009b1a:	4683      	mov	fp, r0
 8009b1c:	f001 f8c2 	bl	800aca4 <__mcmp>
 8009b20:	2800      	cmp	r0, #0
 8009b22:	dcb2      	bgt.n	8009a8a <_dtoa_r+0xac2>
 8009b24:	d102      	bne.n	8009b2c <_dtoa_r+0xb64>
 8009b26:	9b01      	ldr	r3, [sp, #4]
 8009b28:	07db      	lsls	r3, r3, #31
 8009b2a:	d4ae      	bmi.n	8009a8a <_dtoa_r+0xac2>
 8009b2c:	462b      	mov	r3, r5
 8009b2e:	461d      	mov	r5, r3
 8009b30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b34:	2a30      	cmp	r2, #48	; 0x30
 8009b36:	d0fa      	beq.n	8009b2e <_dtoa_r+0xb66>
 8009b38:	e6f7      	b.n	800992a <_dtoa_r+0x962>
 8009b3a:	9a00      	ldr	r2, [sp, #0]
 8009b3c:	429a      	cmp	r2, r3
 8009b3e:	d1a5      	bne.n	8009a8c <_dtoa_r+0xac4>
 8009b40:	f10a 0a01 	add.w	sl, sl, #1
 8009b44:	2331      	movs	r3, #49	; 0x31
 8009b46:	e779      	b.n	8009a3c <_dtoa_r+0xa74>
 8009b48:	4b13      	ldr	r3, [pc, #76]	; (8009b98 <_dtoa_r+0xbd0>)
 8009b4a:	f7ff baaf 	b.w	80090ac <_dtoa_r+0xe4>
 8009b4e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	f47f aa86 	bne.w	8009062 <_dtoa_r+0x9a>
 8009b56:	4b11      	ldr	r3, [pc, #68]	; (8009b9c <_dtoa_r+0xbd4>)
 8009b58:	f7ff baa8 	b.w	80090ac <_dtoa_r+0xe4>
 8009b5c:	f1b9 0f00 	cmp.w	r9, #0
 8009b60:	dc03      	bgt.n	8009b6a <_dtoa_r+0xba2>
 8009b62:	9b05      	ldr	r3, [sp, #20]
 8009b64:	2b02      	cmp	r3, #2
 8009b66:	f73f aec9 	bgt.w	80098fc <_dtoa_r+0x934>
 8009b6a:	9d00      	ldr	r5, [sp, #0]
 8009b6c:	4631      	mov	r1, r6
 8009b6e:	4658      	mov	r0, fp
 8009b70:	f7ff f99c 	bl	8008eac <quorem>
 8009b74:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8009b78:	f805 3b01 	strb.w	r3, [r5], #1
 8009b7c:	9a00      	ldr	r2, [sp, #0]
 8009b7e:	1aaa      	subs	r2, r5, r2
 8009b80:	4591      	cmp	r9, r2
 8009b82:	ddba      	ble.n	8009afa <_dtoa_r+0xb32>
 8009b84:	4659      	mov	r1, fp
 8009b86:	2300      	movs	r3, #0
 8009b88:	220a      	movs	r2, #10
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	f000 fe24 	bl	800a7d8 <__multadd>
 8009b90:	4683      	mov	fp, r0
 8009b92:	e7eb      	b.n	8009b6c <_dtoa_r+0xba4>
 8009b94:	0800bec4 	.word	0x0800bec4
 8009b98:	0800bcc0 	.word	0x0800bcc0
 8009b9c:	0800be41 	.word	0x0800be41

08009ba0 <__sflush_r>:
 8009ba0:	898a      	ldrh	r2, [r1, #12]
 8009ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ba6:	4605      	mov	r5, r0
 8009ba8:	0710      	lsls	r0, r2, #28
 8009baa:	460c      	mov	r4, r1
 8009bac:	d458      	bmi.n	8009c60 <__sflush_r+0xc0>
 8009bae:	684b      	ldr	r3, [r1, #4]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	dc05      	bgt.n	8009bc0 <__sflush_r+0x20>
 8009bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	dc02      	bgt.n	8009bc0 <__sflush_r+0x20>
 8009bba:	2000      	movs	r0, #0
 8009bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bc2:	2e00      	cmp	r6, #0
 8009bc4:	d0f9      	beq.n	8009bba <__sflush_r+0x1a>
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009bcc:	682f      	ldr	r7, [r5, #0]
 8009bce:	602b      	str	r3, [r5, #0]
 8009bd0:	d032      	beq.n	8009c38 <__sflush_r+0x98>
 8009bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009bd4:	89a3      	ldrh	r3, [r4, #12]
 8009bd6:	075a      	lsls	r2, r3, #29
 8009bd8:	d505      	bpl.n	8009be6 <__sflush_r+0x46>
 8009bda:	6863      	ldr	r3, [r4, #4]
 8009bdc:	1ac0      	subs	r0, r0, r3
 8009bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009be0:	b10b      	cbz	r3, 8009be6 <__sflush_r+0x46>
 8009be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009be4:	1ac0      	subs	r0, r0, r3
 8009be6:	2300      	movs	r3, #0
 8009be8:	4602      	mov	r2, r0
 8009bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009bec:	6a21      	ldr	r1, [r4, #32]
 8009bee:	4628      	mov	r0, r5
 8009bf0:	47b0      	blx	r6
 8009bf2:	1c43      	adds	r3, r0, #1
 8009bf4:	89a3      	ldrh	r3, [r4, #12]
 8009bf6:	d106      	bne.n	8009c06 <__sflush_r+0x66>
 8009bf8:	6829      	ldr	r1, [r5, #0]
 8009bfa:	291d      	cmp	r1, #29
 8009bfc:	d82c      	bhi.n	8009c58 <__sflush_r+0xb8>
 8009bfe:	4a2a      	ldr	r2, [pc, #168]	; (8009ca8 <__sflush_r+0x108>)
 8009c00:	40ca      	lsrs	r2, r1
 8009c02:	07d6      	lsls	r6, r2, #31
 8009c04:	d528      	bpl.n	8009c58 <__sflush_r+0xb8>
 8009c06:	2200      	movs	r2, #0
 8009c08:	6062      	str	r2, [r4, #4]
 8009c0a:	04d9      	lsls	r1, r3, #19
 8009c0c:	6922      	ldr	r2, [r4, #16]
 8009c0e:	6022      	str	r2, [r4, #0]
 8009c10:	d504      	bpl.n	8009c1c <__sflush_r+0x7c>
 8009c12:	1c42      	adds	r2, r0, #1
 8009c14:	d101      	bne.n	8009c1a <__sflush_r+0x7a>
 8009c16:	682b      	ldr	r3, [r5, #0]
 8009c18:	b903      	cbnz	r3, 8009c1c <__sflush_r+0x7c>
 8009c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8009c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009c1e:	602f      	str	r7, [r5, #0]
 8009c20:	2900      	cmp	r1, #0
 8009c22:	d0ca      	beq.n	8009bba <__sflush_r+0x1a>
 8009c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009c28:	4299      	cmp	r1, r3
 8009c2a:	d002      	beq.n	8009c32 <__sflush_r+0x92>
 8009c2c:	4628      	mov	r0, r5
 8009c2e:	f001 fa3b 	bl	800b0a8 <_free_r>
 8009c32:	2000      	movs	r0, #0
 8009c34:	6360      	str	r0, [r4, #52]	; 0x34
 8009c36:	e7c1      	b.n	8009bbc <__sflush_r+0x1c>
 8009c38:	6a21      	ldr	r1, [r4, #32]
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b0      	blx	r6
 8009c40:	1c41      	adds	r1, r0, #1
 8009c42:	d1c7      	bne.n	8009bd4 <__sflush_r+0x34>
 8009c44:	682b      	ldr	r3, [r5, #0]
 8009c46:	2b00      	cmp	r3, #0
 8009c48:	d0c4      	beq.n	8009bd4 <__sflush_r+0x34>
 8009c4a:	2b1d      	cmp	r3, #29
 8009c4c:	d001      	beq.n	8009c52 <__sflush_r+0xb2>
 8009c4e:	2b16      	cmp	r3, #22
 8009c50:	d101      	bne.n	8009c56 <__sflush_r+0xb6>
 8009c52:	602f      	str	r7, [r5, #0]
 8009c54:	e7b1      	b.n	8009bba <__sflush_r+0x1a>
 8009c56:	89a3      	ldrh	r3, [r4, #12]
 8009c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c5c:	81a3      	strh	r3, [r4, #12]
 8009c5e:	e7ad      	b.n	8009bbc <__sflush_r+0x1c>
 8009c60:	690f      	ldr	r7, [r1, #16]
 8009c62:	2f00      	cmp	r7, #0
 8009c64:	d0a9      	beq.n	8009bba <__sflush_r+0x1a>
 8009c66:	0793      	lsls	r3, r2, #30
 8009c68:	680e      	ldr	r6, [r1, #0]
 8009c6a:	bf08      	it	eq
 8009c6c:	694b      	ldreq	r3, [r1, #20]
 8009c6e:	600f      	str	r7, [r1, #0]
 8009c70:	bf18      	it	ne
 8009c72:	2300      	movne	r3, #0
 8009c74:	eba6 0807 	sub.w	r8, r6, r7
 8009c78:	608b      	str	r3, [r1, #8]
 8009c7a:	f1b8 0f00 	cmp.w	r8, #0
 8009c7e:	dd9c      	ble.n	8009bba <__sflush_r+0x1a>
 8009c80:	6a21      	ldr	r1, [r4, #32]
 8009c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009c84:	4643      	mov	r3, r8
 8009c86:	463a      	mov	r2, r7
 8009c88:	4628      	mov	r0, r5
 8009c8a:	47b0      	blx	r6
 8009c8c:	2800      	cmp	r0, #0
 8009c8e:	dc06      	bgt.n	8009c9e <__sflush_r+0xfe>
 8009c90:	89a3      	ldrh	r3, [r4, #12]
 8009c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c96:	81a3      	strh	r3, [r4, #12]
 8009c98:	f04f 30ff 	mov.w	r0, #4294967295
 8009c9c:	e78e      	b.n	8009bbc <__sflush_r+0x1c>
 8009c9e:	4407      	add	r7, r0
 8009ca0:	eba8 0800 	sub.w	r8, r8, r0
 8009ca4:	e7e9      	b.n	8009c7a <__sflush_r+0xda>
 8009ca6:	bf00      	nop
 8009ca8:	20400001 	.word	0x20400001

08009cac <_fflush_r>:
 8009cac:	b538      	push	{r3, r4, r5, lr}
 8009cae:	690b      	ldr	r3, [r1, #16]
 8009cb0:	4605      	mov	r5, r0
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	b913      	cbnz	r3, 8009cbc <_fflush_r+0x10>
 8009cb6:	2500      	movs	r5, #0
 8009cb8:	4628      	mov	r0, r5
 8009cba:	bd38      	pop	{r3, r4, r5, pc}
 8009cbc:	b118      	cbz	r0, 8009cc6 <_fflush_r+0x1a>
 8009cbe:	6983      	ldr	r3, [r0, #24]
 8009cc0:	b90b      	cbnz	r3, 8009cc6 <_fflush_r+0x1a>
 8009cc2:	f000 f887 	bl	8009dd4 <__sinit>
 8009cc6:	4b14      	ldr	r3, [pc, #80]	; (8009d18 <_fflush_r+0x6c>)
 8009cc8:	429c      	cmp	r4, r3
 8009cca:	d11b      	bne.n	8009d04 <_fflush_r+0x58>
 8009ccc:	686c      	ldr	r4, [r5, #4]
 8009cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d0ef      	beq.n	8009cb6 <_fflush_r+0xa>
 8009cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009cd8:	07d0      	lsls	r0, r2, #31
 8009cda:	d404      	bmi.n	8009ce6 <_fflush_r+0x3a>
 8009cdc:	0599      	lsls	r1, r3, #22
 8009cde:	d402      	bmi.n	8009ce6 <_fflush_r+0x3a>
 8009ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ce2:	f000 fc88 	bl	800a5f6 <__retarget_lock_acquire_recursive>
 8009ce6:	4628      	mov	r0, r5
 8009ce8:	4621      	mov	r1, r4
 8009cea:	f7ff ff59 	bl	8009ba0 <__sflush_r>
 8009cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009cf0:	07da      	lsls	r2, r3, #31
 8009cf2:	4605      	mov	r5, r0
 8009cf4:	d4e0      	bmi.n	8009cb8 <_fflush_r+0xc>
 8009cf6:	89a3      	ldrh	r3, [r4, #12]
 8009cf8:	059b      	lsls	r3, r3, #22
 8009cfa:	d4dd      	bmi.n	8009cb8 <_fflush_r+0xc>
 8009cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009cfe:	f000 fc7b 	bl	800a5f8 <__retarget_lock_release_recursive>
 8009d02:	e7d9      	b.n	8009cb8 <_fflush_r+0xc>
 8009d04:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <_fflush_r+0x70>)
 8009d06:	429c      	cmp	r4, r3
 8009d08:	d101      	bne.n	8009d0e <_fflush_r+0x62>
 8009d0a:	68ac      	ldr	r4, [r5, #8]
 8009d0c:	e7df      	b.n	8009cce <_fflush_r+0x22>
 8009d0e:	4b04      	ldr	r3, [pc, #16]	; (8009d20 <_fflush_r+0x74>)
 8009d10:	429c      	cmp	r4, r3
 8009d12:	bf08      	it	eq
 8009d14:	68ec      	ldreq	r4, [r5, #12]
 8009d16:	e7da      	b.n	8009cce <_fflush_r+0x22>
 8009d18:	0800bef8 	.word	0x0800bef8
 8009d1c:	0800bf18 	.word	0x0800bf18
 8009d20:	0800bed8 	.word	0x0800bed8

08009d24 <std>:
 8009d24:	2300      	movs	r3, #0
 8009d26:	b510      	push	{r4, lr}
 8009d28:	4604      	mov	r4, r0
 8009d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8009d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009d32:	6083      	str	r3, [r0, #8]
 8009d34:	8181      	strh	r1, [r0, #12]
 8009d36:	6643      	str	r3, [r0, #100]	; 0x64
 8009d38:	81c2      	strh	r2, [r0, #14]
 8009d3a:	6183      	str	r3, [r0, #24]
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	2208      	movs	r2, #8
 8009d40:	305c      	adds	r0, #92	; 0x5c
 8009d42:	f7fd f9f3 	bl	800712c <memset>
 8009d46:	4b05      	ldr	r3, [pc, #20]	; (8009d5c <std+0x38>)
 8009d48:	6263      	str	r3, [r4, #36]	; 0x24
 8009d4a:	4b05      	ldr	r3, [pc, #20]	; (8009d60 <std+0x3c>)
 8009d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d4e:	4b05      	ldr	r3, [pc, #20]	; (8009d64 <std+0x40>)
 8009d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d52:	4b05      	ldr	r3, [pc, #20]	; (8009d68 <std+0x44>)
 8009d54:	6224      	str	r4, [r4, #32]
 8009d56:	6323      	str	r3, [r4, #48]	; 0x30
 8009d58:	bd10      	pop	{r4, pc}
 8009d5a:	bf00      	nop
 8009d5c:	0800b829 	.word	0x0800b829
 8009d60:	0800b84b 	.word	0x0800b84b
 8009d64:	0800b883 	.word	0x0800b883
 8009d68:	0800b8a7 	.word	0x0800b8a7

08009d6c <_cleanup_r>:
 8009d6c:	4901      	ldr	r1, [pc, #4]	; (8009d74 <_cleanup_r+0x8>)
 8009d6e:	f000 b8af 	b.w	8009ed0 <_fwalk_reent>
 8009d72:	bf00      	nop
 8009d74:	08009cad 	.word	0x08009cad

08009d78 <__sfmoreglue>:
 8009d78:	b570      	push	{r4, r5, r6, lr}
 8009d7a:	1e4a      	subs	r2, r1, #1
 8009d7c:	2568      	movs	r5, #104	; 0x68
 8009d7e:	4355      	muls	r5, r2
 8009d80:	460e      	mov	r6, r1
 8009d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009d86:	f001 f9df 	bl	800b148 <_malloc_r>
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	b140      	cbz	r0, 8009da0 <__sfmoreglue+0x28>
 8009d8e:	2100      	movs	r1, #0
 8009d90:	e9c0 1600 	strd	r1, r6, [r0]
 8009d94:	300c      	adds	r0, #12
 8009d96:	60a0      	str	r0, [r4, #8]
 8009d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009d9c:	f7fd f9c6 	bl	800712c <memset>
 8009da0:	4620      	mov	r0, r4
 8009da2:	bd70      	pop	{r4, r5, r6, pc}

08009da4 <__sfp_lock_acquire>:
 8009da4:	4801      	ldr	r0, [pc, #4]	; (8009dac <__sfp_lock_acquire+0x8>)
 8009da6:	f000 bc26 	b.w	800a5f6 <__retarget_lock_acquire_recursive>
 8009daa:	bf00      	nop
 8009dac:	2000050c 	.word	0x2000050c

08009db0 <__sfp_lock_release>:
 8009db0:	4801      	ldr	r0, [pc, #4]	; (8009db8 <__sfp_lock_release+0x8>)
 8009db2:	f000 bc21 	b.w	800a5f8 <__retarget_lock_release_recursive>
 8009db6:	bf00      	nop
 8009db8:	2000050c 	.word	0x2000050c

08009dbc <__sinit_lock_acquire>:
 8009dbc:	4801      	ldr	r0, [pc, #4]	; (8009dc4 <__sinit_lock_acquire+0x8>)
 8009dbe:	f000 bc1a 	b.w	800a5f6 <__retarget_lock_acquire_recursive>
 8009dc2:	bf00      	nop
 8009dc4:	20000507 	.word	0x20000507

08009dc8 <__sinit_lock_release>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	; (8009dd0 <__sinit_lock_release+0x8>)
 8009dca:	f000 bc15 	b.w	800a5f8 <__retarget_lock_release_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20000507 	.word	0x20000507

08009dd4 <__sinit>:
 8009dd4:	b510      	push	{r4, lr}
 8009dd6:	4604      	mov	r4, r0
 8009dd8:	f7ff fff0 	bl	8009dbc <__sinit_lock_acquire>
 8009ddc:	69a3      	ldr	r3, [r4, #24]
 8009dde:	b11b      	cbz	r3, 8009de8 <__sinit+0x14>
 8009de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009de4:	f7ff bff0 	b.w	8009dc8 <__sinit_lock_release>
 8009de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009dec:	6523      	str	r3, [r4, #80]	; 0x50
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <__sinit+0x68>)
 8009df0:	4a13      	ldr	r2, [pc, #76]	; (8009e40 <__sinit+0x6c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8009df6:	42a3      	cmp	r3, r4
 8009df8:	bf04      	itt	eq
 8009dfa:	2301      	moveq	r3, #1
 8009dfc:	61a3      	streq	r3, [r4, #24]
 8009dfe:	4620      	mov	r0, r4
 8009e00:	f000 f820 	bl	8009e44 <__sfp>
 8009e04:	6060      	str	r0, [r4, #4]
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 f81c 	bl	8009e44 <__sfp>
 8009e0c:	60a0      	str	r0, [r4, #8]
 8009e0e:	4620      	mov	r0, r4
 8009e10:	f000 f818 	bl	8009e44 <__sfp>
 8009e14:	2200      	movs	r2, #0
 8009e16:	60e0      	str	r0, [r4, #12]
 8009e18:	2104      	movs	r1, #4
 8009e1a:	6860      	ldr	r0, [r4, #4]
 8009e1c:	f7ff ff82 	bl	8009d24 <std>
 8009e20:	68a0      	ldr	r0, [r4, #8]
 8009e22:	2201      	movs	r2, #1
 8009e24:	2109      	movs	r1, #9
 8009e26:	f7ff ff7d 	bl	8009d24 <std>
 8009e2a:	68e0      	ldr	r0, [r4, #12]
 8009e2c:	2202      	movs	r2, #2
 8009e2e:	2112      	movs	r1, #18
 8009e30:	f7ff ff78 	bl	8009d24 <std>
 8009e34:	2301      	movs	r3, #1
 8009e36:	61a3      	str	r3, [r4, #24]
 8009e38:	e7d2      	b.n	8009de0 <__sinit+0xc>
 8009e3a:	bf00      	nop
 8009e3c:	0800bcac 	.word	0x0800bcac
 8009e40:	08009d6d 	.word	0x08009d6d

08009e44 <__sfp>:
 8009e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e46:	4607      	mov	r7, r0
 8009e48:	f7ff ffac 	bl	8009da4 <__sfp_lock_acquire>
 8009e4c:	4b1e      	ldr	r3, [pc, #120]	; (8009ec8 <__sfp+0x84>)
 8009e4e:	681e      	ldr	r6, [r3, #0]
 8009e50:	69b3      	ldr	r3, [r6, #24]
 8009e52:	b913      	cbnz	r3, 8009e5a <__sfp+0x16>
 8009e54:	4630      	mov	r0, r6
 8009e56:	f7ff ffbd 	bl	8009dd4 <__sinit>
 8009e5a:	3648      	adds	r6, #72	; 0x48
 8009e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009e60:	3b01      	subs	r3, #1
 8009e62:	d503      	bpl.n	8009e6c <__sfp+0x28>
 8009e64:	6833      	ldr	r3, [r6, #0]
 8009e66:	b30b      	cbz	r3, 8009eac <__sfp+0x68>
 8009e68:	6836      	ldr	r6, [r6, #0]
 8009e6a:	e7f7      	b.n	8009e5c <__sfp+0x18>
 8009e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009e70:	b9d5      	cbnz	r5, 8009ea8 <__sfp+0x64>
 8009e72:	4b16      	ldr	r3, [pc, #88]	; (8009ecc <__sfp+0x88>)
 8009e74:	60e3      	str	r3, [r4, #12]
 8009e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8009e7c:	f000 fbba 	bl	800a5f4 <__retarget_lock_init_recursive>
 8009e80:	f7ff ff96 	bl	8009db0 <__sfp_lock_release>
 8009e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009e8c:	6025      	str	r5, [r4, #0]
 8009e8e:	61a5      	str	r5, [r4, #24]
 8009e90:	2208      	movs	r2, #8
 8009e92:	4629      	mov	r1, r5
 8009e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009e98:	f7fd f948 	bl	800712c <memset>
 8009e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009ea4:	4620      	mov	r0, r4
 8009ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009ea8:	3468      	adds	r4, #104	; 0x68
 8009eaa:	e7d9      	b.n	8009e60 <__sfp+0x1c>
 8009eac:	2104      	movs	r1, #4
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7ff ff62 	bl	8009d78 <__sfmoreglue>
 8009eb4:	4604      	mov	r4, r0
 8009eb6:	6030      	str	r0, [r6, #0]
 8009eb8:	2800      	cmp	r0, #0
 8009eba:	d1d5      	bne.n	8009e68 <__sfp+0x24>
 8009ebc:	f7ff ff78 	bl	8009db0 <__sfp_lock_release>
 8009ec0:	230c      	movs	r3, #12
 8009ec2:	603b      	str	r3, [r7, #0]
 8009ec4:	e7ee      	b.n	8009ea4 <__sfp+0x60>
 8009ec6:	bf00      	nop
 8009ec8:	0800bcac 	.word	0x0800bcac
 8009ecc:	ffff0001 	.word	0xffff0001

08009ed0 <_fwalk_reent>:
 8009ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ed4:	4606      	mov	r6, r0
 8009ed6:	4688      	mov	r8, r1
 8009ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009edc:	2700      	movs	r7, #0
 8009ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8009ee6:	d505      	bpl.n	8009ef4 <_fwalk_reent+0x24>
 8009ee8:	6824      	ldr	r4, [r4, #0]
 8009eea:	2c00      	cmp	r4, #0
 8009eec:	d1f7      	bne.n	8009ede <_fwalk_reent+0xe>
 8009eee:	4638      	mov	r0, r7
 8009ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009ef4:	89ab      	ldrh	r3, [r5, #12]
 8009ef6:	2b01      	cmp	r3, #1
 8009ef8:	d907      	bls.n	8009f0a <_fwalk_reent+0x3a>
 8009efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009efe:	3301      	adds	r3, #1
 8009f00:	d003      	beq.n	8009f0a <_fwalk_reent+0x3a>
 8009f02:	4629      	mov	r1, r5
 8009f04:	4630      	mov	r0, r6
 8009f06:	47c0      	blx	r8
 8009f08:	4307      	orrs	r7, r0
 8009f0a:	3568      	adds	r5, #104	; 0x68
 8009f0c:	e7e9      	b.n	8009ee2 <_fwalk_reent+0x12>

08009f0e <rshift>:
 8009f0e:	6903      	ldr	r3, [r0, #16]
 8009f10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f1c:	f100 0414 	add.w	r4, r0, #20
 8009f20:	dd45      	ble.n	8009fae <rshift+0xa0>
 8009f22:	f011 011f 	ands.w	r1, r1, #31
 8009f26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f2e:	d10c      	bne.n	8009f4a <rshift+0x3c>
 8009f30:	f100 0710 	add.w	r7, r0, #16
 8009f34:	4629      	mov	r1, r5
 8009f36:	42b1      	cmp	r1, r6
 8009f38:	d334      	bcc.n	8009fa4 <rshift+0x96>
 8009f3a:	1a9b      	subs	r3, r3, r2
 8009f3c:	009b      	lsls	r3, r3, #2
 8009f3e:	1eea      	subs	r2, r5, #3
 8009f40:	4296      	cmp	r6, r2
 8009f42:	bf38      	it	cc
 8009f44:	2300      	movcc	r3, #0
 8009f46:	4423      	add	r3, r4
 8009f48:	e015      	b.n	8009f76 <rshift+0x68>
 8009f4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f4e:	f1c1 0820 	rsb	r8, r1, #32
 8009f52:	40cf      	lsrs	r7, r1
 8009f54:	f105 0e04 	add.w	lr, r5, #4
 8009f58:	46a1      	mov	r9, r4
 8009f5a:	4576      	cmp	r6, lr
 8009f5c:	46f4      	mov	ip, lr
 8009f5e:	d815      	bhi.n	8009f8c <rshift+0x7e>
 8009f60:	1a9b      	subs	r3, r3, r2
 8009f62:	009a      	lsls	r2, r3, #2
 8009f64:	3a04      	subs	r2, #4
 8009f66:	3501      	adds	r5, #1
 8009f68:	42ae      	cmp	r6, r5
 8009f6a:	bf38      	it	cc
 8009f6c:	2200      	movcc	r2, #0
 8009f6e:	18a3      	adds	r3, r4, r2
 8009f70:	50a7      	str	r7, [r4, r2]
 8009f72:	b107      	cbz	r7, 8009f76 <rshift+0x68>
 8009f74:	3304      	adds	r3, #4
 8009f76:	1b1a      	subs	r2, r3, r4
 8009f78:	42a3      	cmp	r3, r4
 8009f7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f7e:	bf08      	it	eq
 8009f80:	2300      	moveq	r3, #0
 8009f82:	6102      	str	r2, [r0, #16]
 8009f84:	bf08      	it	eq
 8009f86:	6143      	streq	r3, [r0, #20]
 8009f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f8c:	f8dc c000 	ldr.w	ip, [ip]
 8009f90:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f94:	ea4c 0707 	orr.w	r7, ip, r7
 8009f98:	f849 7b04 	str.w	r7, [r9], #4
 8009f9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009fa0:	40cf      	lsrs	r7, r1
 8009fa2:	e7da      	b.n	8009f5a <rshift+0x4c>
 8009fa4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fa8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fac:	e7c3      	b.n	8009f36 <rshift+0x28>
 8009fae:	4623      	mov	r3, r4
 8009fb0:	e7e1      	b.n	8009f76 <rshift+0x68>

08009fb2 <__hexdig_fun>:
 8009fb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009fb6:	2b09      	cmp	r3, #9
 8009fb8:	d802      	bhi.n	8009fc0 <__hexdig_fun+0xe>
 8009fba:	3820      	subs	r0, #32
 8009fbc:	b2c0      	uxtb	r0, r0
 8009fbe:	4770      	bx	lr
 8009fc0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009fc4:	2b05      	cmp	r3, #5
 8009fc6:	d801      	bhi.n	8009fcc <__hexdig_fun+0x1a>
 8009fc8:	3847      	subs	r0, #71	; 0x47
 8009fca:	e7f7      	b.n	8009fbc <__hexdig_fun+0xa>
 8009fcc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fd0:	2b05      	cmp	r3, #5
 8009fd2:	d801      	bhi.n	8009fd8 <__hexdig_fun+0x26>
 8009fd4:	3827      	subs	r0, #39	; 0x27
 8009fd6:	e7f1      	b.n	8009fbc <__hexdig_fun+0xa>
 8009fd8:	2000      	movs	r0, #0
 8009fda:	4770      	bx	lr

08009fdc <__gethex>:
 8009fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe0:	ed2d 8b02 	vpush	{d8}
 8009fe4:	b089      	sub	sp, #36	; 0x24
 8009fe6:	ee08 0a10 	vmov	s16, r0
 8009fea:	9304      	str	r3, [sp, #16]
 8009fec:	4bbc      	ldr	r3, [pc, #752]	; (800a2e0 <__gethex+0x304>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	468b      	mov	fp, r1
 8009ff6:	4690      	mov	r8, r2
 8009ff8:	f7f6 f8fa 	bl	80001f0 <strlen>
 8009ffc:	9b01      	ldr	r3, [sp, #4]
 8009ffe:	f8db 2000 	ldr.w	r2, [fp]
 800a002:	4403      	add	r3, r0
 800a004:	4682      	mov	sl, r0
 800a006:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	1c93      	adds	r3, r2, #2
 800a00e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a012:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a016:	32fe      	adds	r2, #254	; 0xfe
 800a018:	18d1      	adds	r1, r2, r3
 800a01a:	461f      	mov	r7, r3
 800a01c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a020:	9100      	str	r1, [sp, #0]
 800a022:	2830      	cmp	r0, #48	; 0x30
 800a024:	d0f8      	beq.n	800a018 <__gethex+0x3c>
 800a026:	f7ff ffc4 	bl	8009fb2 <__hexdig_fun>
 800a02a:	4604      	mov	r4, r0
 800a02c:	2800      	cmp	r0, #0
 800a02e:	d13a      	bne.n	800a0a6 <__gethex+0xca>
 800a030:	9901      	ldr	r1, [sp, #4]
 800a032:	4652      	mov	r2, sl
 800a034:	4638      	mov	r0, r7
 800a036:	f001 fc3a 	bl	800b8ae <strncmp>
 800a03a:	4605      	mov	r5, r0
 800a03c:	2800      	cmp	r0, #0
 800a03e:	d168      	bne.n	800a112 <__gethex+0x136>
 800a040:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a044:	eb07 060a 	add.w	r6, r7, sl
 800a048:	f7ff ffb3 	bl	8009fb2 <__hexdig_fun>
 800a04c:	2800      	cmp	r0, #0
 800a04e:	d062      	beq.n	800a116 <__gethex+0x13a>
 800a050:	4633      	mov	r3, r6
 800a052:	7818      	ldrb	r0, [r3, #0]
 800a054:	2830      	cmp	r0, #48	; 0x30
 800a056:	461f      	mov	r7, r3
 800a058:	f103 0301 	add.w	r3, r3, #1
 800a05c:	d0f9      	beq.n	800a052 <__gethex+0x76>
 800a05e:	f7ff ffa8 	bl	8009fb2 <__hexdig_fun>
 800a062:	2301      	movs	r3, #1
 800a064:	fab0 f480 	clz	r4, r0
 800a068:	0964      	lsrs	r4, r4, #5
 800a06a:	4635      	mov	r5, r6
 800a06c:	9300      	str	r3, [sp, #0]
 800a06e:	463a      	mov	r2, r7
 800a070:	4616      	mov	r6, r2
 800a072:	3201      	adds	r2, #1
 800a074:	7830      	ldrb	r0, [r6, #0]
 800a076:	f7ff ff9c 	bl	8009fb2 <__hexdig_fun>
 800a07a:	2800      	cmp	r0, #0
 800a07c:	d1f8      	bne.n	800a070 <__gethex+0x94>
 800a07e:	9901      	ldr	r1, [sp, #4]
 800a080:	4652      	mov	r2, sl
 800a082:	4630      	mov	r0, r6
 800a084:	f001 fc13 	bl	800b8ae <strncmp>
 800a088:	b980      	cbnz	r0, 800a0ac <__gethex+0xd0>
 800a08a:	b94d      	cbnz	r5, 800a0a0 <__gethex+0xc4>
 800a08c:	eb06 050a 	add.w	r5, r6, sl
 800a090:	462a      	mov	r2, r5
 800a092:	4616      	mov	r6, r2
 800a094:	3201      	adds	r2, #1
 800a096:	7830      	ldrb	r0, [r6, #0]
 800a098:	f7ff ff8b 	bl	8009fb2 <__hexdig_fun>
 800a09c:	2800      	cmp	r0, #0
 800a09e:	d1f8      	bne.n	800a092 <__gethex+0xb6>
 800a0a0:	1bad      	subs	r5, r5, r6
 800a0a2:	00ad      	lsls	r5, r5, #2
 800a0a4:	e004      	b.n	800a0b0 <__gethex+0xd4>
 800a0a6:	2400      	movs	r4, #0
 800a0a8:	4625      	mov	r5, r4
 800a0aa:	e7e0      	b.n	800a06e <__gethex+0x92>
 800a0ac:	2d00      	cmp	r5, #0
 800a0ae:	d1f7      	bne.n	800a0a0 <__gethex+0xc4>
 800a0b0:	7833      	ldrb	r3, [r6, #0]
 800a0b2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0b6:	2b50      	cmp	r3, #80	; 0x50
 800a0b8:	d13b      	bne.n	800a132 <__gethex+0x156>
 800a0ba:	7873      	ldrb	r3, [r6, #1]
 800a0bc:	2b2b      	cmp	r3, #43	; 0x2b
 800a0be:	d02c      	beq.n	800a11a <__gethex+0x13e>
 800a0c0:	2b2d      	cmp	r3, #45	; 0x2d
 800a0c2:	d02e      	beq.n	800a122 <__gethex+0x146>
 800a0c4:	1c71      	adds	r1, r6, #1
 800a0c6:	f04f 0900 	mov.w	r9, #0
 800a0ca:	7808      	ldrb	r0, [r1, #0]
 800a0cc:	f7ff ff71 	bl	8009fb2 <__hexdig_fun>
 800a0d0:	1e43      	subs	r3, r0, #1
 800a0d2:	b2db      	uxtb	r3, r3
 800a0d4:	2b18      	cmp	r3, #24
 800a0d6:	d82c      	bhi.n	800a132 <__gethex+0x156>
 800a0d8:	f1a0 0210 	sub.w	r2, r0, #16
 800a0dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0e0:	f7ff ff67 	bl	8009fb2 <__hexdig_fun>
 800a0e4:	1e43      	subs	r3, r0, #1
 800a0e6:	b2db      	uxtb	r3, r3
 800a0e8:	2b18      	cmp	r3, #24
 800a0ea:	d91d      	bls.n	800a128 <__gethex+0x14c>
 800a0ec:	f1b9 0f00 	cmp.w	r9, #0
 800a0f0:	d000      	beq.n	800a0f4 <__gethex+0x118>
 800a0f2:	4252      	negs	r2, r2
 800a0f4:	4415      	add	r5, r2
 800a0f6:	f8cb 1000 	str.w	r1, [fp]
 800a0fa:	b1e4      	cbz	r4, 800a136 <__gethex+0x15a>
 800a0fc:	9b00      	ldr	r3, [sp, #0]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	bf14      	ite	ne
 800a102:	2700      	movne	r7, #0
 800a104:	2706      	moveq	r7, #6
 800a106:	4638      	mov	r0, r7
 800a108:	b009      	add	sp, #36	; 0x24
 800a10a:	ecbd 8b02 	vpop	{d8}
 800a10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a112:	463e      	mov	r6, r7
 800a114:	4625      	mov	r5, r4
 800a116:	2401      	movs	r4, #1
 800a118:	e7ca      	b.n	800a0b0 <__gethex+0xd4>
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	1cb1      	adds	r1, r6, #2
 800a120:	e7d3      	b.n	800a0ca <__gethex+0xee>
 800a122:	f04f 0901 	mov.w	r9, #1
 800a126:	e7fa      	b.n	800a11e <__gethex+0x142>
 800a128:	230a      	movs	r3, #10
 800a12a:	fb03 0202 	mla	r2, r3, r2, r0
 800a12e:	3a10      	subs	r2, #16
 800a130:	e7d4      	b.n	800a0dc <__gethex+0x100>
 800a132:	4631      	mov	r1, r6
 800a134:	e7df      	b.n	800a0f6 <__gethex+0x11a>
 800a136:	1bf3      	subs	r3, r6, r7
 800a138:	3b01      	subs	r3, #1
 800a13a:	4621      	mov	r1, r4
 800a13c:	2b07      	cmp	r3, #7
 800a13e:	dc0b      	bgt.n	800a158 <__gethex+0x17c>
 800a140:	ee18 0a10 	vmov	r0, s16
 800a144:	f000 fae6 	bl	800a714 <_Balloc>
 800a148:	4604      	mov	r4, r0
 800a14a:	b940      	cbnz	r0, 800a15e <__gethex+0x182>
 800a14c:	4b65      	ldr	r3, [pc, #404]	; (800a2e4 <__gethex+0x308>)
 800a14e:	4602      	mov	r2, r0
 800a150:	21de      	movs	r1, #222	; 0xde
 800a152:	4865      	ldr	r0, [pc, #404]	; (800a2e8 <__gethex+0x30c>)
 800a154:	f001 fbdc 	bl	800b910 <__assert_func>
 800a158:	3101      	adds	r1, #1
 800a15a:	105b      	asrs	r3, r3, #1
 800a15c:	e7ee      	b.n	800a13c <__gethex+0x160>
 800a15e:	f100 0914 	add.w	r9, r0, #20
 800a162:	f04f 0b00 	mov.w	fp, #0
 800a166:	f1ca 0301 	rsb	r3, sl, #1
 800a16a:	f8cd 9008 	str.w	r9, [sp, #8]
 800a16e:	f8cd b000 	str.w	fp, [sp]
 800a172:	9306      	str	r3, [sp, #24]
 800a174:	42b7      	cmp	r7, r6
 800a176:	d340      	bcc.n	800a1fa <__gethex+0x21e>
 800a178:	9802      	ldr	r0, [sp, #8]
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	f840 3b04 	str.w	r3, [r0], #4
 800a180:	eba0 0009 	sub.w	r0, r0, r9
 800a184:	1080      	asrs	r0, r0, #2
 800a186:	0146      	lsls	r6, r0, #5
 800a188:	6120      	str	r0, [r4, #16]
 800a18a:	4618      	mov	r0, r3
 800a18c:	f000 fbb8 	bl	800a900 <__hi0bits>
 800a190:	1a30      	subs	r0, r6, r0
 800a192:	f8d8 6000 	ldr.w	r6, [r8]
 800a196:	42b0      	cmp	r0, r6
 800a198:	dd63      	ble.n	800a262 <__gethex+0x286>
 800a19a:	1b87      	subs	r7, r0, r6
 800a19c:	4639      	mov	r1, r7
 800a19e:	4620      	mov	r0, r4
 800a1a0:	f000 ff52 	bl	800b048 <__any_on>
 800a1a4:	4682      	mov	sl, r0
 800a1a6:	b1a8      	cbz	r0, 800a1d4 <__gethex+0x1f8>
 800a1a8:	1e7b      	subs	r3, r7, #1
 800a1aa:	1159      	asrs	r1, r3, #5
 800a1ac:	f003 021f 	and.w	r2, r3, #31
 800a1b0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a1b4:	f04f 0a01 	mov.w	sl, #1
 800a1b8:	fa0a f202 	lsl.w	r2, sl, r2
 800a1bc:	420a      	tst	r2, r1
 800a1be:	d009      	beq.n	800a1d4 <__gethex+0x1f8>
 800a1c0:	4553      	cmp	r3, sl
 800a1c2:	dd05      	ble.n	800a1d0 <__gethex+0x1f4>
 800a1c4:	1eb9      	subs	r1, r7, #2
 800a1c6:	4620      	mov	r0, r4
 800a1c8:	f000 ff3e 	bl	800b048 <__any_on>
 800a1cc:	2800      	cmp	r0, #0
 800a1ce:	d145      	bne.n	800a25c <__gethex+0x280>
 800a1d0:	f04f 0a02 	mov.w	sl, #2
 800a1d4:	4639      	mov	r1, r7
 800a1d6:	4620      	mov	r0, r4
 800a1d8:	f7ff fe99 	bl	8009f0e <rshift>
 800a1dc:	443d      	add	r5, r7
 800a1de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1e2:	42ab      	cmp	r3, r5
 800a1e4:	da4c      	bge.n	800a280 <__gethex+0x2a4>
 800a1e6:	ee18 0a10 	vmov	r0, s16
 800a1ea:	4621      	mov	r1, r4
 800a1ec:	f000 fad2 	bl	800a794 <_Bfree>
 800a1f0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	6013      	str	r3, [r2, #0]
 800a1f6:	27a3      	movs	r7, #163	; 0xa3
 800a1f8:	e785      	b.n	800a106 <__gethex+0x12a>
 800a1fa:	1e73      	subs	r3, r6, #1
 800a1fc:	9a05      	ldr	r2, [sp, #20]
 800a1fe:	9303      	str	r3, [sp, #12]
 800a200:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a204:	4293      	cmp	r3, r2
 800a206:	d019      	beq.n	800a23c <__gethex+0x260>
 800a208:	f1bb 0f20 	cmp.w	fp, #32
 800a20c:	d107      	bne.n	800a21e <__gethex+0x242>
 800a20e:	9b02      	ldr	r3, [sp, #8]
 800a210:	9a00      	ldr	r2, [sp, #0]
 800a212:	f843 2b04 	str.w	r2, [r3], #4
 800a216:	9302      	str	r3, [sp, #8]
 800a218:	2300      	movs	r3, #0
 800a21a:	9300      	str	r3, [sp, #0]
 800a21c:	469b      	mov	fp, r3
 800a21e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a222:	f7ff fec6 	bl	8009fb2 <__hexdig_fun>
 800a226:	9b00      	ldr	r3, [sp, #0]
 800a228:	f000 000f 	and.w	r0, r0, #15
 800a22c:	fa00 f00b 	lsl.w	r0, r0, fp
 800a230:	4303      	orrs	r3, r0
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	f10b 0b04 	add.w	fp, fp, #4
 800a238:	9b03      	ldr	r3, [sp, #12]
 800a23a:	e00d      	b.n	800a258 <__gethex+0x27c>
 800a23c:	9b03      	ldr	r3, [sp, #12]
 800a23e:	9a06      	ldr	r2, [sp, #24]
 800a240:	4413      	add	r3, r2
 800a242:	42bb      	cmp	r3, r7
 800a244:	d3e0      	bcc.n	800a208 <__gethex+0x22c>
 800a246:	4618      	mov	r0, r3
 800a248:	9901      	ldr	r1, [sp, #4]
 800a24a:	9307      	str	r3, [sp, #28]
 800a24c:	4652      	mov	r2, sl
 800a24e:	f001 fb2e 	bl	800b8ae <strncmp>
 800a252:	9b07      	ldr	r3, [sp, #28]
 800a254:	2800      	cmp	r0, #0
 800a256:	d1d7      	bne.n	800a208 <__gethex+0x22c>
 800a258:	461e      	mov	r6, r3
 800a25a:	e78b      	b.n	800a174 <__gethex+0x198>
 800a25c:	f04f 0a03 	mov.w	sl, #3
 800a260:	e7b8      	b.n	800a1d4 <__gethex+0x1f8>
 800a262:	da0a      	bge.n	800a27a <__gethex+0x29e>
 800a264:	1a37      	subs	r7, r6, r0
 800a266:	4621      	mov	r1, r4
 800a268:	ee18 0a10 	vmov	r0, s16
 800a26c:	463a      	mov	r2, r7
 800a26e:	f000 fcad 	bl	800abcc <__lshift>
 800a272:	1bed      	subs	r5, r5, r7
 800a274:	4604      	mov	r4, r0
 800a276:	f100 0914 	add.w	r9, r0, #20
 800a27a:	f04f 0a00 	mov.w	sl, #0
 800a27e:	e7ae      	b.n	800a1de <__gethex+0x202>
 800a280:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a284:	42a8      	cmp	r0, r5
 800a286:	dd72      	ble.n	800a36e <__gethex+0x392>
 800a288:	1b45      	subs	r5, r0, r5
 800a28a:	42ae      	cmp	r6, r5
 800a28c:	dc36      	bgt.n	800a2fc <__gethex+0x320>
 800a28e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a292:	2b02      	cmp	r3, #2
 800a294:	d02a      	beq.n	800a2ec <__gethex+0x310>
 800a296:	2b03      	cmp	r3, #3
 800a298:	d02c      	beq.n	800a2f4 <__gethex+0x318>
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d115      	bne.n	800a2ca <__gethex+0x2ee>
 800a29e:	42ae      	cmp	r6, r5
 800a2a0:	d113      	bne.n	800a2ca <__gethex+0x2ee>
 800a2a2:	2e01      	cmp	r6, #1
 800a2a4:	d10b      	bne.n	800a2be <__gethex+0x2e2>
 800a2a6:	9a04      	ldr	r2, [sp, #16]
 800a2a8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2ac:	6013      	str	r3, [r2, #0]
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	6123      	str	r3, [r4, #16]
 800a2b2:	f8c9 3000 	str.w	r3, [r9]
 800a2b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2b8:	2762      	movs	r7, #98	; 0x62
 800a2ba:	601c      	str	r4, [r3, #0]
 800a2bc:	e723      	b.n	800a106 <__gethex+0x12a>
 800a2be:	1e71      	subs	r1, r6, #1
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f000 fec1 	bl	800b048 <__any_on>
 800a2c6:	2800      	cmp	r0, #0
 800a2c8:	d1ed      	bne.n	800a2a6 <__gethex+0x2ca>
 800a2ca:	ee18 0a10 	vmov	r0, s16
 800a2ce:	4621      	mov	r1, r4
 800a2d0:	f000 fa60 	bl	800a794 <_Bfree>
 800a2d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	6013      	str	r3, [r2, #0]
 800a2da:	2750      	movs	r7, #80	; 0x50
 800a2dc:	e713      	b.n	800a106 <__gethex+0x12a>
 800a2de:	bf00      	nop
 800a2e0:	0800bfa4 	.word	0x0800bfa4
 800a2e4:	0800bec4 	.word	0x0800bec4
 800a2e8:	0800bf38 	.word	0x0800bf38
 800a2ec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d1eb      	bne.n	800a2ca <__gethex+0x2ee>
 800a2f2:	e7d8      	b.n	800a2a6 <__gethex+0x2ca>
 800a2f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d1d5      	bne.n	800a2a6 <__gethex+0x2ca>
 800a2fa:	e7e6      	b.n	800a2ca <__gethex+0x2ee>
 800a2fc:	1e6f      	subs	r7, r5, #1
 800a2fe:	f1ba 0f00 	cmp.w	sl, #0
 800a302:	d131      	bne.n	800a368 <__gethex+0x38c>
 800a304:	b127      	cbz	r7, 800a310 <__gethex+0x334>
 800a306:	4639      	mov	r1, r7
 800a308:	4620      	mov	r0, r4
 800a30a:	f000 fe9d 	bl	800b048 <__any_on>
 800a30e:	4682      	mov	sl, r0
 800a310:	117b      	asrs	r3, r7, #5
 800a312:	2101      	movs	r1, #1
 800a314:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a318:	f007 071f 	and.w	r7, r7, #31
 800a31c:	fa01 f707 	lsl.w	r7, r1, r7
 800a320:	421f      	tst	r7, r3
 800a322:	4629      	mov	r1, r5
 800a324:	4620      	mov	r0, r4
 800a326:	bf18      	it	ne
 800a328:	f04a 0a02 	orrne.w	sl, sl, #2
 800a32c:	1b76      	subs	r6, r6, r5
 800a32e:	f7ff fdee 	bl	8009f0e <rshift>
 800a332:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a336:	2702      	movs	r7, #2
 800a338:	f1ba 0f00 	cmp.w	sl, #0
 800a33c:	d048      	beq.n	800a3d0 <__gethex+0x3f4>
 800a33e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a342:	2b02      	cmp	r3, #2
 800a344:	d015      	beq.n	800a372 <__gethex+0x396>
 800a346:	2b03      	cmp	r3, #3
 800a348:	d017      	beq.n	800a37a <__gethex+0x39e>
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d109      	bne.n	800a362 <__gethex+0x386>
 800a34e:	f01a 0f02 	tst.w	sl, #2
 800a352:	d006      	beq.n	800a362 <__gethex+0x386>
 800a354:	f8d9 0000 	ldr.w	r0, [r9]
 800a358:	ea4a 0a00 	orr.w	sl, sl, r0
 800a35c:	f01a 0f01 	tst.w	sl, #1
 800a360:	d10e      	bne.n	800a380 <__gethex+0x3a4>
 800a362:	f047 0710 	orr.w	r7, r7, #16
 800a366:	e033      	b.n	800a3d0 <__gethex+0x3f4>
 800a368:	f04f 0a01 	mov.w	sl, #1
 800a36c:	e7d0      	b.n	800a310 <__gethex+0x334>
 800a36e:	2701      	movs	r7, #1
 800a370:	e7e2      	b.n	800a338 <__gethex+0x35c>
 800a372:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a374:	f1c3 0301 	rsb	r3, r3, #1
 800a378:	9315      	str	r3, [sp, #84]	; 0x54
 800a37a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d0f0      	beq.n	800a362 <__gethex+0x386>
 800a380:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a384:	f104 0314 	add.w	r3, r4, #20
 800a388:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a38c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a390:	f04f 0c00 	mov.w	ip, #0
 800a394:	4618      	mov	r0, r3
 800a396:	f853 2b04 	ldr.w	r2, [r3], #4
 800a39a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a39e:	d01c      	beq.n	800a3da <__gethex+0x3fe>
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	6002      	str	r2, [r0, #0]
 800a3a4:	2f02      	cmp	r7, #2
 800a3a6:	f104 0314 	add.w	r3, r4, #20
 800a3aa:	d13f      	bne.n	800a42c <__gethex+0x450>
 800a3ac:	f8d8 2000 	ldr.w	r2, [r8]
 800a3b0:	3a01      	subs	r2, #1
 800a3b2:	42b2      	cmp	r2, r6
 800a3b4:	d10a      	bne.n	800a3cc <__gethex+0x3f0>
 800a3b6:	1171      	asrs	r1, r6, #5
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3be:	f006 061f 	and.w	r6, r6, #31
 800a3c2:	fa02 f606 	lsl.w	r6, r2, r6
 800a3c6:	421e      	tst	r6, r3
 800a3c8:	bf18      	it	ne
 800a3ca:	4617      	movne	r7, r2
 800a3cc:	f047 0720 	orr.w	r7, r7, #32
 800a3d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3d2:	601c      	str	r4, [r3, #0]
 800a3d4:	9b04      	ldr	r3, [sp, #16]
 800a3d6:	601d      	str	r5, [r3, #0]
 800a3d8:	e695      	b.n	800a106 <__gethex+0x12a>
 800a3da:	4299      	cmp	r1, r3
 800a3dc:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3e0:	d8d8      	bhi.n	800a394 <__gethex+0x3b8>
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	459b      	cmp	fp, r3
 800a3e6:	db19      	blt.n	800a41c <__gethex+0x440>
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	ee18 0a10 	vmov	r0, s16
 800a3ee:	3101      	adds	r1, #1
 800a3f0:	f000 f990 	bl	800a714 <_Balloc>
 800a3f4:	4681      	mov	r9, r0
 800a3f6:	b918      	cbnz	r0, 800a400 <__gethex+0x424>
 800a3f8:	4b1a      	ldr	r3, [pc, #104]	; (800a464 <__gethex+0x488>)
 800a3fa:	4602      	mov	r2, r0
 800a3fc:	2184      	movs	r1, #132	; 0x84
 800a3fe:	e6a8      	b.n	800a152 <__gethex+0x176>
 800a400:	6922      	ldr	r2, [r4, #16]
 800a402:	3202      	adds	r2, #2
 800a404:	f104 010c 	add.w	r1, r4, #12
 800a408:	0092      	lsls	r2, r2, #2
 800a40a:	300c      	adds	r0, #12
 800a40c:	f000 f974 	bl	800a6f8 <memcpy>
 800a410:	4621      	mov	r1, r4
 800a412:	ee18 0a10 	vmov	r0, s16
 800a416:	f000 f9bd 	bl	800a794 <_Bfree>
 800a41a:	464c      	mov	r4, r9
 800a41c:	6923      	ldr	r3, [r4, #16]
 800a41e:	1c5a      	adds	r2, r3, #1
 800a420:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a424:	6122      	str	r2, [r4, #16]
 800a426:	2201      	movs	r2, #1
 800a428:	615a      	str	r2, [r3, #20]
 800a42a:	e7bb      	b.n	800a3a4 <__gethex+0x3c8>
 800a42c:	6922      	ldr	r2, [r4, #16]
 800a42e:	455a      	cmp	r2, fp
 800a430:	dd0b      	ble.n	800a44a <__gethex+0x46e>
 800a432:	2101      	movs	r1, #1
 800a434:	4620      	mov	r0, r4
 800a436:	f7ff fd6a 	bl	8009f0e <rshift>
 800a43a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a43e:	3501      	adds	r5, #1
 800a440:	42ab      	cmp	r3, r5
 800a442:	f6ff aed0 	blt.w	800a1e6 <__gethex+0x20a>
 800a446:	2701      	movs	r7, #1
 800a448:	e7c0      	b.n	800a3cc <__gethex+0x3f0>
 800a44a:	f016 061f 	ands.w	r6, r6, #31
 800a44e:	d0fa      	beq.n	800a446 <__gethex+0x46a>
 800a450:	449a      	add	sl, r3
 800a452:	f1c6 0620 	rsb	r6, r6, #32
 800a456:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800a45a:	f000 fa51 	bl	800a900 <__hi0bits>
 800a45e:	42b0      	cmp	r0, r6
 800a460:	dbe7      	blt.n	800a432 <__gethex+0x456>
 800a462:	e7f0      	b.n	800a446 <__gethex+0x46a>
 800a464:	0800bec4 	.word	0x0800bec4

0800a468 <L_shift>:
 800a468:	f1c2 0208 	rsb	r2, r2, #8
 800a46c:	0092      	lsls	r2, r2, #2
 800a46e:	b570      	push	{r4, r5, r6, lr}
 800a470:	f1c2 0620 	rsb	r6, r2, #32
 800a474:	6843      	ldr	r3, [r0, #4]
 800a476:	6804      	ldr	r4, [r0, #0]
 800a478:	fa03 f506 	lsl.w	r5, r3, r6
 800a47c:	432c      	orrs	r4, r5
 800a47e:	40d3      	lsrs	r3, r2
 800a480:	6004      	str	r4, [r0, #0]
 800a482:	f840 3f04 	str.w	r3, [r0, #4]!
 800a486:	4288      	cmp	r0, r1
 800a488:	d3f4      	bcc.n	800a474 <L_shift+0xc>
 800a48a:	bd70      	pop	{r4, r5, r6, pc}

0800a48c <__match>:
 800a48c:	b530      	push	{r4, r5, lr}
 800a48e:	6803      	ldr	r3, [r0, #0]
 800a490:	3301      	adds	r3, #1
 800a492:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a496:	b914      	cbnz	r4, 800a49e <__match+0x12>
 800a498:	6003      	str	r3, [r0, #0]
 800a49a:	2001      	movs	r0, #1
 800a49c:	bd30      	pop	{r4, r5, pc}
 800a49e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4a2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4a6:	2d19      	cmp	r5, #25
 800a4a8:	bf98      	it	ls
 800a4aa:	3220      	addls	r2, #32
 800a4ac:	42a2      	cmp	r2, r4
 800a4ae:	d0f0      	beq.n	800a492 <__match+0x6>
 800a4b0:	2000      	movs	r0, #0
 800a4b2:	e7f3      	b.n	800a49c <__match+0x10>

0800a4b4 <__hexnan>:
 800a4b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4b8:	680b      	ldr	r3, [r1, #0]
 800a4ba:	6801      	ldr	r1, [r0, #0]
 800a4bc:	115e      	asrs	r6, r3, #5
 800a4be:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4c2:	f013 031f 	ands.w	r3, r3, #31
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	bf18      	it	ne
 800a4ca:	3604      	addne	r6, #4
 800a4cc:	2500      	movs	r5, #0
 800a4ce:	1f37      	subs	r7, r6, #4
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	4690      	mov	r8, r2
 800a4d4:	9301      	str	r3, [sp, #4]
 800a4d6:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4da:	46b9      	mov	r9, r7
 800a4dc:	463c      	mov	r4, r7
 800a4de:	9502      	str	r5, [sp, #8]
 800a4e0:	46ab      	mov	fp, r5
 800a4e2:	784a      	ldrb	r2, [r1, #1]
 800a4e4:	1c4b      	adds	r3, r1, #1
 800a4e6:	9303      	str	r3, [sp, #12]
 800a4e8:	b342      	cbz	r2, 800a53c <__hexnan+0x88>
 800a4ea:	4610      	mov	r0, r2
 800a4ec:	9105      	str	r1, [sp, #20]
 800a4ee:	9204      	str	r2, [sp, #16]
 800a4f0:	f7ff fd5f 	bl	8009fb2 <__hexdig_fun>
 800a4f4:	2800      	cmp	r0, #0
 800a4f6:	d14f      	bne.n	800a598 <__hexnan+0xe4>
 800a4f8:	9a04      	ldr	r2, [sp, #16]
 800a4fa:	9905      	ldr	r1, [sp, #20]
 800a4fc:	2a20      	cmp	r2, #32
 800a4fe:	d818      	bhi.n	800a532 <__hexnan+0x7e>
 800a500:	9b02      	ldr	r3, [sp, #8]
 800a502:	459b      	cmp	fp, r3
 800a504:	dd13      	ble.n	800a52e <__hexnan+0x7a>
 800a506:	454c      	cmp	r4, r9
 800a508:	d206      	bcs.n	800a518 <__hexnan+0x64>
 800a50a:	2d07      	cmp	r5, #7
 800a50c:	dc04      	bgt.n	800a518 <__hexnan+0x64>
 800a50e:	462a      	mov	r2, r5
 800a510:	4649      	mov	r1, r9
 800a512:	4620      	mov	r0, r4
 800a514:	f7ff ffa8 	bl	800a468 <L_shift>
 800a518:	4544      	cmp	r4, r8
 800a51a:	d950      	bls.n	800a5be <__hexnan+0x10a>
 800a51c:	2300      	movs	r3, #0
 800a51e:	f1a4 0904 	sub.w	r9, r4, #4
 800a522:	f844 3c04 	str.w	r3, [r4, #-4]
 800a526:	f8cd b008 	str.w	fp, [sp, #8]
 800a52a:	464c      	mov	r4, r9
 800a52c:	461d      	mov	r5, r3
 800a52e:	9903      	ldr	r1, [sp, #12]
 800a530:	e7d7      	b.n	800a4e2 <__hexnan+0x2e>
 800a532:	2a29      	cmp	r2, #41	; 0x29
 800a534:	d156      	bne.n	800a5e4 <__hexnan+0x130>
 800a536:	3102      	adds	r1, #2
 800a538:	f8ca 1000 	str.w	r1, [sl]
 800a53c:	f1bb 0f00 	cmp.w	fp, #0
 800a540:	d050      	beq.n	800a5e4 <__hexnan+0x130>
 800a542:	454c      	cmp	r4, r9
 800a544:	d206      	bcs.n	800a554 <__hexnan+0xa0>
 800a546:	2d07      	cmp	r5, #7
 800a548:	dc04      	bgt.n	800a554 <__hexnan+0xa0>
 800a54a:	462a      	mov	r2, r5
 800a54c:	4649      	mov	r1, r9
 800a54e:	4620      	mov	r0, r4
 800a550:	f7ff ff8a 	bl	800a468 <L_shift>
 800a554:	4544      	cmp	r4, r8
 800a556:	d934      	bls.n	800a5c2 <__hexnan+0x10e>
 800a558:	f1a8 0204 	sub.w	r2, r8, #4
 800a55c:	4623      	mov	r3, r4
 800a55e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a562:	f842 1f04 	str.w	r1, [r2, #4]!
 800a566:	429f      	cmp	r7, r3
 800a568:	d2f9      	bcs.n	800a55e <__hexnan+0xaa>
 800a56a:	1b3b      	subs	r3, r7, r4
 800a56c:	f023 0303 	bic.w	r3, r3, #3
 800a570:	3304      	adds	r3, #4
 800a572:	3401      	adds	r4, #1
 800a574:	3e03      	subs	r6, #3
 800a576:	42b4      	cmp	r4, r6
 800a578:	bf88      	it	hi
 800a57a:	2304      	movhi	r3, #4
 800a57c:	4443      	add	r3, r8
 800a57e:	2200      	movs	r2, #0
 800a580:	f843 2b04 	str.w	r2, [r3], #4
 800a584:	429f      	cmp	r7, r3
 800a586:	d2fb      	bcs.n	800a580 <__hexnan+0xcc>
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	b91b      	cbnz	r3, 800a594 <__hexnan+0xe0>
 800a58c:	4547      	cmp	r7, r8
 800a58e:	d127      	bne.n	800a5e0 <__hexnan+0x12c>
 800a590:	2301      	movs	r3, #1
 800a592:	603b      	str	r3, [r7, #0]
 800a594:	2005      	movs	r0, #5
 800a596:	e026      	b.n	800a5e6 <__hexnan+0x132>
 800a598:	3501      	adds	r5, #1
 800a59a:	2d08      	cmp	r5, #8
 800a59c:	f10b 0b01 	add.w	fp, fp, #1
 800a5a0:	dd06      	ble.n	800a5b0 <__hexnan+0xfc>
 800a5a2:	4544      	cmp	r4, r8
 800a5a4:	d9c3      	bls.n	800a52e <__hexnan+0x7a>
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5ac:	2501      	movs	r5, #1
 800a5ae:	3c04      	subs	r4, #4
 800a5b0:	6822      	ldr	r2, [r4, #0]
 800a5b2:	f000 000f 	and.w	r0, r0, #15
 800a5b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a5ba:	6022      	str	r2, [r4, #0]
 800a5bc:	e7b7      	b.n	800a52e <__hexnan+0x7a>
 800a5be:	2508      	movs	r5, #8
 800a5c0:	e7b5      	b.n	800a52e <__hexnan+0x7a>
 800a5c2:	9b01      	ldr	r3, [sp, #4]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d0df      	beq.n	800a588 <__hexnan+0xd4>
 800a5c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a5cc:	f1c3 0320 	rsb	r3, r3, #32
 800a5d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a5d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5d8:	401a      	ands	r2, r3
 800a5da:	f846 2c04 	str.w	r2, [r6, #-4]
 800a5de:	e7d3      	b.n	800a588 <__hexnan+0xd4>
 800a5e0:	3f04      	subs	r7, #4
 800a5e2:	e7d1      	b.n	800a588 <__hexnan+0xd4>
 800a5e4:	2004      	movs	r0, #4
 800a5e6:	b007      	add	sp, #28
 800a5e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5ec <_localeconv_r>:
 800a5ec:	4800      	ldr	r0, [pc, #0]	; (800a5f0 <_localeconv_r+0x4>)
 800a5ee:	4770      	bx	lr
 800a5f0:	20000164 	.word	0x20000164

0800a5f4 <__retarget_lock_init_recursive>:
 800a5f4:	4770      	bx	lr

0800a5f6 <__retarget_lock_acquire_recursive>:
 800a5f6:	4770      	bx	lr

0800a5f8 <__retarget_lock_release_recursive>:
 800a5f8:	4770      	bx	lr

0800a5fa <__swhatbuf_r>:
 800a5fa:	b570      	push	{r4, r5, r6, lr}
 800a5fc:	460e      	mov	r6, r1
 800a5fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a602:	2900      	cmp	r1, #0
 800a604:	b096      	sub	sp, #88	; 0x58
 800a606:	4614      	mov	r4, r2
 800a608:	461d      	mov	r5, r3
 800a60a:	da07      	bge.n	800a61c <__swhatbuf_r+0x22>
 800a60c:	2300      	movs	r3, #0
 800a60e:	602b      	str	r3, [r5, #0]
 800a610:	89b3      	ldrh	r3, [r6, #12]
 800a612:	061a      	lsls	r2, r3, #24
 800a614:	d410      	bmi.n	800a638 <__swhatbuf_r+0x3e>
 800a616:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a61a:	e00e      	b.n	800a63a <__swhatbuf_r+0x40>
 800a61c:	466a      	mov	r2, sp
 800a61e:	f001 f9b7 	bl	800b990 <_fstat_r>
 800a622:	2800      	cmp	r0, #0
 800a624:	dbf2      	blt.n	800a60c <__swhatbuf_r+0x12>
 800a626:	9a01      	ldr	r2, [sp, #4]
 800a628:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a62c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a630:	425a      	negs	r2, r3
 800a632:	415a      	adcs	r2, r3
 800a634:	602a      	str	r2, [r5, #0]
 800a636:	e7ee      	b.n	800a616 <__swhatbuf_r+0x1c>
 800a638:	2340      	movs	r3, #64	; 0x40
 800a63a:	2000      	movs	r0, #0
 800a63c:	6023      	str	r3, [r4, #0]
 800a63e:	b016      	add	sp, #88	; 0x58
 800a640:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a644 <__smakebuf_r>:
 800a644:	898b      	ldrh	r3, [r1, #12]
 800a646:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a648:	079d      	lsls	r5, r3, #30
 800a64a:	4606      	mov	r6, r0
 800a64c:	460c      	mov	r4, r1
 800a64e:	d507      	bpl.n	800a660 <__smakebuf_r+0x1c>
 800a650:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	6123      	str	r3, [r4, #16]
 800a658:	2301      	movs	r3, #1
 800a65a:	6163      	str	r3, [r4, #20]
 800a65c:	b002      	add	sp, #8
 800a65e:	bd70      	pop	{r4, r5, r6, pc}
 800a660:	ab01      	add	r3, sp, #4
 800a662:	466a      	mov	r2, sp
 800a664:	f7ff ffc9 	bl	800a5fa <__swhatbuf_r>
 800a668:	9900      	ldr	r1, [sp, #0]
 800a66a:	4605      	mov	r5, r0
 800a66c:	4630      	mov	r0, r6
 800a66e:	f000 fd6b 	bl	800b148 <_malloc_r>
 800a672:	b948      	cbnz	r0, 800a688 <__smakebuf_r+0x44>
 800a674:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a678:	059a      	lsls	r2, r3, #22
 800a67a:	d4ef      	bmi.n	800a65c <__smakebuf_r+0x18>
 800a67c:	f023 0303 	bic.w	r3, r3, #3
 800a680:	f043 0302 	orr.w	r3, r3, #2
 800a684:	81a3      	strh	r3, [r4, #12]
 800a686:	e7e3      	b.n	800a650 <__smakebuf_r+0xc>
 800a688:	4b0d      	ldr	r3, [pc, #52]	; (800a6c0 <__smakebuf_r+0x7c>)
 800a68a:	62b3      	str	r3, [r6, #40]	; 0x28
 800a68c:	89a3      	ldrh	r3, [r4, #12]
 800a68e:	6020      	str	r0, [r4, #0]
 800a690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a694:	81a3      	strh	r3, [r4, #12]
 800a696:	9b00      	ldr	r3, [sp, #0]
 800a698:	6163      	str	r3, [r4, #20]
 800a69a:	9b01      	ldr	r3, [sp, #4]
 800a69c:	6120      	str	r0, [r4, #16]
 800a69e:	b15b      	cbz	r3, 800a6b8 <__smakebuf_r+0x74>
 800a6a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a6a4:	4630      	mov	r0, r6
 800a6a6:	f001 f985 	bl	800b9b4 <_isatty_r>
 800a6aa:	b128      	cbz	r0, 800a6b8 <__smakebuf_r+0x74>
 800a6ac:	89a3      	ldrh	r3, [r4, #12]
 800a6ae:	f023 0303 	bic.w	r3, r3, #3
 800a6b2:	f043 0301 	orr.w	r3, r3, #1
 800a6b6:	81a3      	strh	r3, [r4, #12]
 800a6b8:	89a0      	ldrh	r0, [r4, #12]
 800a6ba:	4305      	orrs	r5, r0
 800a6bc:	81a5      	strh	r5, [r4, #12]
 800a6be:	e7cd      	b.n	800a65c <__smakebuf_r+0x18>
 800a6c0:	08009d6d 	.word	0x08009d6d

0800a6c4 <malloc>:
 800a6c4:	4b02      	ldr	r3, [pc, #8]	; (800a6d0 <malloc+0xc>)
 800a6c6:	4601      	mov	r1, r0
 800a6c8:	6818      	ldr	r0, [r3, #0]
 800a6ca:	f000 bd3d 	b.w	800b148 <_malloc_r>
 800a6ce:	bf00      	nop
 800a6d0:	2000000c 	.word	0x2000000c

0800a6d4 <__ascii_mbtowc>:
 800a6d4:	b082      	sub	sp, #8
 800a6d6:	b901      	cbnz	r1, 800a6da <__ascii_mbtowc+0x6>
 800a6d8:	a901      	add	r1, sp, #4
 800a6da:	b142      	cbz	r2, 800a6ee <__ascii_mbtowc+0x1a>
 800a6dc:	b14b      	cbz	r3, 800a6f2 <__ascii_mbtowc+0x1e>
 800a6de:	7813      	ldrb	r3, [r2, #0]
 800a6e0:	600b      	str	r3, [r1, #0]
 800a6e2:	7812      	ldrb	r2, [r2, #0]
 800a6e4:	1e10      	subs	r0, r2, #0
 800a6e6:	bf18      	it	ne
 800a6e8:	2001      	movne	r0, #1
 800a6ea:	b002      	add	sp, #8
 800a6ec:	4770      	bx	lr
 800a6ee:	4610      	mov	r0, r2
 800a6f0:	e7fb      	b.n	800a6ea <__ascii_mbtowc+0x16>
 800a6f2:	f06f 0001 	mvn.w	r0, #1
 800a6f6:	e7f8      	b.n	800a6ea <__ascii_mbtowc+0x16>

0800a6f8 <memcpy>:
 800a6f8:	440a      	add	r2, r1
 800a6fa:	4291      	cmp	r1, r2
 800a6fc:	f100 33ff 	add.w	r3, r0, #4294967295
 800a700:	d100      	bne.n	800a704 <memcpy+0xc>
 800a702:	4770      	bx	lr
 800a704:	b510      	push	{r4, lr}
 800a706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a70a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a70e:	4291      	cmp	r1, r2
 800a710:	d1f9      	bne.n	800a706 <memcpy+0xe>
 800a712:	bd10      	pop	{r4, pc}

0800a714 <_Balloc>:
 800a714:	b570      	push	{r4, r5, r6, lr}
 800a716:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a718:	4604      	mov	r4, r0
 800a71a:	460d      	mov	r5, r1
 800a71c:	b976      	cbnz	r6, 800a73c <_Balloc+0x28>
 800a71e:	2010      	movs	r0, #16
 800a720:	f7ff ffd0 	bl	800a6c4 <malloc>
 800a724:	4602      	mov	r2, r0
 800a726:	6260      	str	r0, [r4, #36]	; 0x24
 800a728:	b920      	cbnz	r0, 800a734 <_Balloc+0x20>
 800a72a:	4b18      	ldr	r3, [pc, #96]	; (800a78c <_Balloc+0x78>)
 800a72c:	4818      	ldr	r0, [pc, #96]	; (800a790 <_Balloc+0x7c>)
 800a72e:	2166      	movs	r1, #102	; 0x66
 800a730:	f001 f8ee 	bl	800b910 <__assert_func>
 800a734:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a738:	6006      	str	r6, [r0, #0]
 800a73a:	60c6      	str	r6, [r0, #12]
 800a73c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a73e:	68f3      	ldr	r3, [r6, #12]
 800a740:	b183      	cbz	r3, 800a764 <_Balloc+0x50>
 800a742:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a74a:	b9b8      	cbnz	r0, 800a77c <_Balloc+0x68>
 800a74c:	2101      	movs	r1, #1
 800a74e:	fa01 f605 	lsl.w	r6, r1, r5
 800a752:	1d72      	adds	r2, r6, #5
 800a754:	0092      	lsls	r2, r2, #2
 800a756:	4620      	mov	r0, r4
 800a758:	f000 fc97 	bl	800b08a <_calloc_r>
 800a75c:	b160      	cbz	r0, 800a778 <_Balloc+0x64>
 800a75e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a762:	e00e      	b.n	800a782 <_Balloc+0x6e>
 800a764:	2221      	movs	r2, #33	; 0x21
 800a766:	2104      	movs	r1, #4
 800a768:	4620      	mov	r0, r4
 800a76a:	f000 fc8e 	bl	800b08a <_calloc_r>
 800a76e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a770:	60f0      	str	r0, [r6, #12]
 800a772:	68db      	ldr	r3, [r3, #12]
 800a774:	2b00      	cmp	r3, #0
 800a776:	d1e4      	bne.n	800a742 <_Balloc+0x2e>
 800a778:	2000      	movs	r0, #0
 800a77a:	bd70      	pop	{r4, r5, r6, pc}
 800a77c:	6802      	ldr	r2, [r0, #0]
 800a77e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a782:	2300      	movs	r3, #0
 800a784:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a788:	e7f7      	b.n	800a77a <_Balloc+0x66>
 800a78a:	bf00      	nop
 800a78c:	0800be4e 	.word	0x0800be4e
 800a790:	0800bfb8 	.word	0x0800bfb8

0800a794 <_Bfree>:
 800a794:	b570      	push	{r4, r5, r6, lr}
 800a796:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a798:	4605      	mov	r5, r0
 800a79a:	460c      	mov	r4, r1
 800a79c:	b976      	cbnz	r6, 800a7bc <_Bfree+0x28>
 800a79e:	2010      	movs	r0, #16
 800a7a0:	f7ff ff90 	bl	800a6c4 <malloc>
 800a7a4:	4602      	mov	r2, r0
 800a7a6:	6268      	str	r0, [r5, #36]	; 0x24
 800a7a8:	b920      	cbnz	r0, 800a7b4 <_Bfree+0x20>
 800a7aa:	4b09      	ldr	r3, [pc, #36]	; (800a7d0 <_Bfree+0x3c>)
 800a7ac:	4809      	ldr	r0, [pc, #36]	; (800a7d4 <_Bfree+0x40>)
 800a7ae:	218a      	movs	r1, #138	; 0x8a
 800a7b0:	f001 f8ae 	bl	800b910 <__assert_func>
 800a7b4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7b8:	6006      	str	r6, [r0, #0]
 800a7ba:	60c6      	str	r6, [r0, #12]
 800a7bc:	b13c      	cbz	r4, 800a7ce <_Bfree+0x3a>
 800a7be:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a7c0:	6862      	ldr	r2, [r4, #4]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7c8:	6021      	str	r1, [r4, #0]
 800a7ca:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}
 800a7d0:	0800be4e 	.word	0x0800be4e
 800a7d4:	0800bfb8 	.word	0x0800bfb8

0800a7d8 <__multadd>:
 800a7d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a7dc:	690e      	ldr	r6, [r1, #16]
 800a7de:	4607      	mov	r7, r0
 800a7e0:	4698      	mov	r8, r3
 800a7e2:	460c      	mov	r4, r1
 800a7e4:	f101 0014 	add.w	r0, r1, #20
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	6805      	ldr	r5, [r0, #0]
 800a7ec:	b2a9      	uxth	r1, r5
 800a7ee:	fb02 8101 	mla	r1, r2, r1, r8
 800a7f2:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a7f6:	0c2d      	lsrs	r5, r5, #16
 800a7f8:	fb02 c505 	mla	r5, r2, r5, ip
 800a7fc:	b289      	uxth	r1, r1
 800a7fe:	3301      	adds	r3, #1
 800a800:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a804:	429e      	cmp	r6, r3
 800a806:	f840 1b04 	str.w	r1, [r0], #4
 800a80a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a80e:	dcec      	bgt.n	800a7ea <__multadd+0x12>
 800a810:	f1b8 0f00 	cmp.w	r8, #0
 800a814:	d022      	beq.n	800a85c <__multadd+0x84>
 800a816:	68a3      	ldr	r3, [r4, #8]
 800a818:	42b3      	cmp	r3, r6
 800a81a:	dc19      	bgt.n	800a850 <__multadd+0x78>
 800a81c:	6861      	ldr	r1, [r4, #4]
 800a81e:	4638      	mov	r0, r7
 800a820:	3101      	adds	r1, #1
 800a822:	f7ff ff77 	bl	800a714 <_Balloc>
 800a826:	4605      	mov	r5, r0
 800a828:	b928      	cbnz	r0, 800a836 <__multadd+0x5e>
 800a82a:	4602      	mov	r2, r0
 800a82c:	4b0d      	ldr	r3, [pc, #52]	; (800a864 <__multadd+0x8c>)
 800a82e:	480e      	ldr	r0, [pc, #56]	; (800a868 <__multadd+0x90>)
 800a830:	21b5      	movs	r1, #181	; 0xb5
 800a832:	f001 f86d 	bl	800b910 <__assert_func>
 800a836:	6922      	ldr	r2, [r4, #16]
 800a838:	3202      	adds	r2, #2
 800a83a:	f104 010c 	add.w	r1, r4, #12
 800a83e:	0092      	lsls	r2, r2, #2
 800a840:	300c      	adds	r0, #12
 800a842:	f7ff ff59 	bl	800a6f8 <memcpy>
 800a846:	4621      	mov	r1, r4
 800a848:	4638      	mov	r0, r7
 800a84a:	f7ff ffa3 	bl	800a794 <_Bfree>
 800a84e:	462c      	mov	r4, r5
 800a850:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a854:	3601      	adds	r6, #1
 800a856:	f8c3 8014 	str.w	r8, [r3, #20]
 800a85a:	6126      	str	r6, [r4, #16]
 800a85c:	4620      	mov	r0, r4
 800a85e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a862:	bf00      	nop
 800a864:	0800bec4 	.word	0x0800bec4
 800a868:	0800bfb8 	.word	0x0800bfb8

0800a86c <__s2b>:
 800a86c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a870:	460c      	mov	r4, r1
 800a872:	4615      	mov	r5, r2
 800a874:	461f      	mov	r7, r3
 800a876:	2209      	movs	r2, #9
 800a878:	3308      	adds	r3, #8
 800a87a:	4606      	mov	r6, r0
 800a87c:	fb93 f3f2 	sdiv	r3, r3, r2
 800a880:	2100      	movs	r1, #0
 800a882:	2201      	movs	r2, #1
 800a884:	429a      	cmp	r2, r3
 800a886:	db09      	blt.n	800a89c <__s2b+0x30>
 800a888:	4630      	mov	r0, r6
 800a88a:	f7ff ff43 	bl	800a714 <_Balloc>
 800a88e:	b940      	cbnz	r0, 800a8a2 <__s2b+0x36>
 800a890:	4602      	mov	r2, r0
 800a892:	4b19      	ldr	r3, [pc, #100]	; (800a8f8 <__s2b+0x8c>)
 800a894:	4819      	ldr	r0, [pc, #100]	; (800a8fc <__s2b+0x90>)
 800a896:	21ce      	movs	r1, #206	; 0xce
 800a898:	f001 f83a 	bl	800b910 <__assert_func>
 800a89c:	0052      	lsls	r2, r2, #1
 800a89e:	3101      	adds	r1, #1
 800a8a0:	e7f0      	b.n	800a884 <__s2b+0x18>
 800a8a2:	9b08      	ldr	r3, [sp, #32]
 800a8a4:	6143      	str	r3, [r0, #20]
 800a8a6:	2d09      	cmp	r5, #9
 800a8a8:	f04f 0301 	mov.w	r3, #1
 800a8ac:	6103      	str	r3, [r0, #16]
 800a8ae:	dd16      	ble.n	800a8de <__s2b+0x72>
 800a8b0:	f104 0909 	add.w	r9, r4, #9
 800a8b4:	46c8      	mov	r8, r9
 800a8b6:	442c      	add	r4, r5
 800a8b8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8bc:	4601      	mov	r1, r0
 800a8be:	3b30      	subs	r3, #48	; 0x30
 800a8c0:	220a      	movs	r2, #10
 800a8c2:	4630      	mov	r0, r6
 800a8c4:	f7ff ff88 	bl	800a7d8 <__multadd>
 800a8c8:	45a0      	cmp	r8, r4
 800a8ca:	d1f5      	bne.n	800a8b8 <__s2b+0x4c>
 800a8cc:	f1a5 0408 	sub.w	r4, r5, #8
 800a8d0:	444c      	add	r4, r9
 800a8d2:	1b2d      	subs	r5, r5, r4
 800a8d4:	1963      	adds	r3, r4, r5
 800a8d6:	42bb      	cmp	r3, r7
 800a8d8:	db04      	blt.n	800a8e4 <__s2b+0x78>
 800a8da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8de:	340a      	adds	r4, #10
 800a8e0:	2509      	movs	r5, #9
 800a8e2:	e7f6      	b.n	800a8d2 <__s2b+0x66>
 800a8e4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	3b30      	subs	r3, #48	; 0x30
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff72 	bl	800a7d8 <__multadd>
 800a8f4:	e7ee      	b.n	800a8d4 <__s2b+0x68>
 800a8f6:	bf00      	nop
 800a8f8:	0800bec4 	.word	0x0800bec4
 800a8fc:	0800bfb8 	.word	0x0800bfb8

0800a900 <__hi0bits>:
 800a900:	0c03      	lsrs	r3, r0, #16
 800a902:	041b      	lsls	r3, r3, #16
 800a904:	b9d3      	cbnz	r3, 800a93c <__hi0bits+0x3c>
 800a906:	0400      	lsls	r0, r0, #16
 800a908:	2310      	movs	r3, #16
 800a90a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a90e:	bf04      	itt	eq
 800a910:	0200      	lsleq	r0, r0, #8
 800a912:	3308      	addeq	r3, #8
 800a914:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a918:	bf04      	itt	eq
 800a91a:	0100      	lsleq	r0, r0, #4
 800a91c:	3304      	addeq	r3, #4
 800a91e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a922:	bf04      	itt	eq
 800a924:	0080      	lsleq	r0, r0, #2
 800a926:	3302      	addeq	r3, #2
 800a928:	2800      	cmp	r0, #0
 800a92a:	db05      	blt.n	800a938 <__hi0bits+0x38>
 800a92c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a930:	f103 0301 	add.w	r3, r3, #1
 800a934:	bf08      	it	eq
 800a936:	2320      	moveq	r3, #32
 800a938:	4618      	mov	r0, r3
 800a93a:	4770      	bx	lr
 800a93c:	2300      	movs	r3, #0
 800a93e:	e7e4      	b.n	800a90a <__hi0bits+0xa>

0800a940 <__lo0bits>:
 800a940:	6803      	ldr	r3, [r0, #0]
 800a942:	f013 0207 	ands.w	r2, r3, #7
 800a946:	4601      	mov	r1, r0
 800a948:	d00b      	beq.n	800a962 <__lo0bits+0x22>
 800a94a:	07da      	lsls	r2, r3, #31
 800a94c:	d424      	bmi.n	800a998 <__lo0bits+0x58>
 800a94e:	0798      	lsls	r0, r3, #30
 800a950:	bf49      	itett	mi
 800a952:	085b      	lsrmi	r3, r3, #1
 800a954:	089b      	lsrpl	r3, r3, #2
 800a956:	2001      	movmi	r0, #1
 800a958:	600b      	strmi	r3, [r1, #0]
 800a95a:	bf5c      	itt	pl
 800a95c:	600b      	strpl	r3, [r1, #0]
 800a95e:	2002      	movpl	r0, #2
 800a960:	4770      	bx	lr
 800a962:	b298      	uxth	r0, r3
 800a964:	b9b0      	cbnz	r0, 800a994 <__lo0bits+0x54>
 800a966:	0c1b      	lsrs	r3, r3, #16
 800a968:	2010      	movs	r0, #16
 800a96a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a96e:	bf04      	itt	eq
 800a970:	0a1b      	lsreq	r3, r3, #8
 800a972:	3008      	addeq	r0, #8
 800a974:	071a      	lsls	r2, r3, #28
 800a976:	bf04      	itt	eq
 800a978:	091b      	lsreq	r3, r3, #4
 800a97a:	3004      	addeq	r0, #4
 800a97c:	079a      	lsls	r2, r3, #30
 800a97e:	bf04      	itt	eq
 800a980:	089b      	lsreq	r3, r3, #2
 800a982:	3002      	addeq	r0, #2
 800a984:	07da      	lsls	r2, r3, #31
 800a986:	d403      	bmi.n	800a990 <__lo0bits+0x50>
 800a988:	085b      	lsrs	r3, r3, #1
 800a98a:	f100 0001 	add.w	r0, r0, #1
 800a98e:	d005      	beq.n	800a99c <__lo0bits+0x5c>
 800a990:	600b      	str	r3, [r1, #0]
 800a992:	4770      	bx	lr
 800a994:	4610      	mov	r0, r2
 800a996:	e7e8      	b.n	800a96a <__lo0bits+0x2a>
 800a998:	2000      	movs	r0, #0
 800a99a:	4770      	bx	lr
 800a99c:	2020      	movs	r0, #32
 800a99e:	4770      	bx	lr

0800a9a0 <__i2b>:
 800a9a0:	b510      	push	{r4, lr}
 800a9a2:	460c      	mov	r4, r1
 800a9a4:	2101      	movs	r1, #1
 800a9a6:	f7ff feb5 	bl	800a714 <_Balloc>
 800a9aa:	4602      	mov	r2, r0
 800a9ac:	b928      	cbnz	r0, 800a9ba <__i2b+0x1a>
 800a9ae:	4b05      	ldr	r3, [pc, #20]	; (800a9c4 <__i2b+0x24>)
 800a9b0:	4805      	ldr	r0, [pc, #20]	; (800a9c8 <__i2b+0x28>)
 800a9b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a9b6:	f000 ffab 	bl	800b910 <__assert_func>
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	6144      	str	r4, [r0, #20]
 800a9be:	6103      	str	r3, [r0, #16]
 800a9c0:	bd10      	pop	{r4, pc}
 800a9c2:	bf00      	nop
 800a9c4:	0800bec4 	.word	0x0800bec4
 800a9c8:	0800bfb8 	.word	0x0800bfb8

0800a9cc <__multiply>:
 800a9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9d0:	4614      	mov	r4, r2
 800a9d2:	690a      	ldr	r2, [r1, #16]
 800a9d4:	6923      	ldr	r3, [r4, #16]
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	bfb8      	it	lt
 800a9da:	460b      	movlt	r3, r1
 800a9dc:	460d      	mov	r5, r1
 800a9de:	bfbc      	itt	lt
 800a9e0:	4625      	movlt	r5, r4
 800a9e2:	461c      	movlt	r4, r3
 800a9e4:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a9e8:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a9ec:	68ab      	ldr	r3, [r5, #8]
 800a9ee:	6869      	ldr	r1, [r5, #4]
 800a9f0:	eb0a 0709 	add.w	r7, sl, r9
 800a9f4:	42bb      	cmp	r3, r7
 800a9f6:	b085      	sub	sp, #20
 800a9f8:	bfb8      	it	lt
 800a9fa:	3101      	addlt	r1, #1
 800a9fc:	f7ff fe8a 	bl	800a714 <_Balloc>
 800aa00:	b930      	cbnz	r0, 800aa10 <__multiply+0x44>
 800aa02:	4602      	mov	r2, r0
 800aa04:	4b42      	ldr	r3, [pc, #264]	; (800ab10 <__multiply+0x144>)
 800aa06:	4843      	ldr	r0, [pc, #268]	; (800ab14 <__multiply+0x148>)
 800aa08:	f240 115d 	movw	r1, #349	; 0x15d
 800aa0c:	f000 ff80 	bl	800b910 <__assert_func>
 800aa10:	f100 0614 	add.w	r6, r0, #20
 800aa14:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800aa18:	4633      	mov	r3, r6
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	4543      	cmp	r3, r8
 800aa1e:	d31e      	bcc.n	800aa5e <__multiply+0x92>
 800aa20:	f105 0c14 	add.w	ip, r5, #20
 800aa24:	f104 0314 	add.w	r3, r4, #20
 800aa28:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800aa2c:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800aa30:	9202      	str	r2, [sp, #8]
 800aa32:	ebac 0205 	sub.w	r2, ip, r5
 800aa36:	3a15      	subs	r2, #21
 800aa38:	f022 0203 	bic.w	r2, r2, #3
 800aa3c:	3204      	adds	r2, #4
 800aa3e:	f105 0115 	add.w	r1, r5, #21
 800aa42:	458c      	cmp	ip, r1
 800aa44:	bf38      	it	cc
 800aa46:	2204      	movcc	r2, #4
 800aa48:	9201      	str	r2, [sp, #4]
 800aa4a:	9a02      	ldr	r2, [sp, #8]
 800aa4c:	9303      	str	r3, [sp, #12]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d808      	bhi.n	800aa64 <__multiply+0x98>
 800aa52:	2f00      	cmp	r7, #0
 800aa54:	dc55      	bgt.n	800ab02 <__multiply+0x136>
 800aa56:	6107      	str	r7, [r0, #16]
 800aa58:	b005      	add	sp, #20
 800aa5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa5e:	f843 2b04 	str.w	r2, [r3], #4
 800aa62:	e7db      	b.n	800aa1c <__multiply+0x50>
 800aa64:	f8b3 a000 	ldrh.w	sl, [r3]
 800aa68:	f1ba 0f00 	cmp.w	sl, #0
 800aa6c:	d020      	beq.n	800aab0 <__multiply+0xe4>
 800aa6e:	f105 0e14 	add.w	lr, r5, #20
 800aa72:	46b1      	mov	r9, r6
 800aa74:	2200      	movs	r2, #0
 800aa76:	f85e 4b04 	ldr.w	r4, [lr], #4
 800aa7a:	f8d9 b000 	ldr.w	fp, [r9]
 800aa7e:	b2a1      	uxth	r1, r4
 800aa80:	fa1f fb8b 	uxth.w	fp, fp
 800aa84:	fb0a b101 	mla	r1, sl, r1, fp
 800aa88:	4411      	add	r1, r2
 800aa8a:	f8d9 2000 	ldr.w	r2, [r9]
 800aa8e:	0c24      	lsrs	r4, r4, #16
 800aa90:	0c12      	lsrs	r2, r2, #16
 800aa92:	fb0a 2404 	mla	r4, sl, r4, r2
 800aa96:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800aa9a:	b289      	uxth	r1, r1
 800aa9c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800aaa0:	45f4      	cmp	ip, lr
 800aaa2:	f849 1b04 	str.w	r1, [r9], #4
 800aaa6:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800aaaa:	d8e4      	bhi.n	800aa76 <__multiply+0xaa>
 800aaac:	9901      	ldr	r1, [sp, #4]
 800aaae:	5072      	str	r2, [r6, r1]
 800aab0:	9a03      	ldr	r2, [sp, #12]
 800aab2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800aab6:	3304      	adds	r3, #4
 800aab8:	f1b9 0f00 	cmp.w	r9, #0
 800aabc:	d01f      	beq.n	800aafe <__multiply+0x132>
 800aabe:	6834      	ldr	r4, [r6, #0]
 800aac0:	f105 0114 	add.w	r1, r5, #20
 800aac4:	46b6      	mov	lr, r6
 800aac6:	f04f 0a00 	mov.w	sl, #0
 800aaca:	880a      	ldrh	r2, [r1, #0]
 800aacc:	f8be b002 	ldrh.w	fp, [lr, #2]
 800aad0:	fb09 b202 	mla	r2, r9, r2, fp
 800aad4:	4492      	add	sl, r2
 800aad6:	b2a4      	uxth	r4, r4
 800aad8:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800aadc:	f84e 4b04 	str.w	r4, [lr], #4
 800aae0:	f851 4b04 	ldr.w	r4, [r1], #4
 800aae4:	f8be 2000 	ldrh.w	r2, [lr]
 800aae8:	0c24      	lsrs	r4, r4, #16
 800aaea:	fb09 2404 	mla	r4, r9, r4, r2
 800aaee:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800aaf2:	458c      	cmp	ip, r1
 800aaf4:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800aaf8:	d8e7      	bhi.n	800aaca <__multiply+0xfe>
 800aafa:	9a01      	ldr	r2, [sp, #4]
 800aafc:	50b4      	str	r4, [r6, r2]
 800aafe:	3604      	adds	r6, #4
 800ab00:	e7a3      	b.n	800aa4a <__multiply+0x7e>
 800ab02:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	d1a5      	bne.n	800aa56 <__multiply+0x8a>
 800ab0a:	3f01      	subs	r7, #1
 800ab0c:	e7a1      	b.n	800aa52 <__multiply+0x86>
 800ab0e:	bf00      	nop
 800ab10:	0800bec4 	.word	0x0800bec4
 800ab14:	0800bfb8 	.word	0x0800bfb8

0800ab18 <__pow5mult>:
 800ab18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab1c:	4615      	mov	r5, r2
 800ab1e:	f012 0203 	ands.w	r2, r2, #3
 800ab22:	4606      	mov	r6, r0
 800ab24:	460f      	mov	r7, r1
 800ab26:	d007      	beq.n	800ab38 <__pow5mult+0x20>
 800ab28:	4c25      	ldr	r4, [pc, #148]	; (800abc0 <__pow5mult+0xa8>)
 800ab2a:	3a01      	subs	r2, #1
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab32:	f7ff fe51 	bl	800a7d8 <__multadd>
 800ab36:	4607      	mov	r7, r0
 800ab38:	10ad      	asrs	r5, r5, #2
 800ab3a:	d03d      	beq.n	800abb8 <__pow5mult+0xa0>
 800ab3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ab3e:	b97c      	cbnz	r4, 800ab60 <__pow5mult+0x48>
 800ab40:	2010      	movs	r0, #16
 800ab42:	f7ff fdbf 	bl	800a6c4 <malloc>
 800ab46:	4602      	mov	r2, r0
 800ab48:	6270      	str	r0, [r6, #36]	; 0x24
 800ab4a:	b928      	cbnz	r0, 800ab58 <__pow5mult+0x40>
 800ab4c:	4b1d      	ldr	r3, [pc, #116]	; (800abc4 <__pow5mult+0xac>)
 800ab4e:	481e      	ldr	r0, [pc, #120]	; (800abc8 <__pow5mult+0xb0>)
 800ab50:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ab54:	f000 fedc 	bl	800b910 <__assert_func>
 800ab58:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab5c:	6004      	str	r4, [r0, #0]
 800ab5e:	60c4      	str	r4, [r0, #12]
 800ab60:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ab64:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab68:	b94c      	cbnz	r4, 800ab7e <__pow5mult+0x66>
 800ab6a:	f240 2171 	movw	r1, #625	; 0x271
 800ab6e:	4630      	mov	r0, r6
 800ab70:	f7ff ff16 	bl	800a9a0 <__i2b>
 800ab74:	2300      	movs	r3, #0
 800ab76:	f8c8 0008 	str.w	r0, [r8, #8]
 800ab7a:	4604      	mov	r4, r0
 800ab7c:	6003      	str	r3, [r0, #0]
 800ab7e:	f04f 0900 	mov.w	r9, #0
 800ab82:	07eb      	lsls	r3, r5, #31
 800ab84:	d50a      	bpl.n	800ab9c <__pow5mult+0x84>
 800ab86:	4639      	mov	r1, r7
 800ab88:	4622      	mov	r2, r4
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7ff ff1e 	bl	800a9cc <__multiply>
 800ab90:	4639      	mov	r1, r7
 800ab92:	4680      	mov	r8, r0
 800ab94:	4630      	mov	r0, r6
 800ab96:	f7ff fdfd 	bl	800a794 <_Bfree>
 800ab9a:	4647      	mov	r7, r8
 800ab9c:	106d      	asrs	r5, r5, #1
 800ab9e:	d00b      	beq.n	800abb8 <__pow5mult+0xa0>
 800aba0:	6820      	ldr	r0, [r4, #0]
 800aba2:	b938      	cbnz	r0, 800abb4 <__pow5mult+0x9c>
 800aba4:	4622      	mov	r2, r4
 800aba6:	4621      	mov	r1, r4
 800aba8:	4630      	mov	r0, r6
 800abaa:	f7ff ff0f 	bl	800a9cc <__multiply>
 800abae:	6020      	str	r0, [r4, #0]
 800abb0:	f8c0 9000 	str.w	r9, [r0]
 800abb4:	4604      	mov	r4, r0
 800abb6:	e7e4      	b.n	800ab82 <__pow5mult+0x6a>
 800abb8:	4638      	mov	r0, r7
 800abba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abbe:	bf00      	nop
 800abc0:	0800c108 	.word	0x0800c108
 800abc4:	0800be4e 	.word	0x0800be4e
 800abc8:	0800bfb8 	.word	0x0800bfb8

0800abcc <__lshift>:
 800abcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abd0:	460c      	mov	r4, r1
 800abd2:	6849      	ldr	r1, [r1, #4]
 800abd4:	6923      	ldr	r3, [r4, #16]
 800abd6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800abda:	68a3      	ldr	r3, [r4, #8]
 800abdc:	4607      	mov	r7, r0
 800abde:	4691      	mov	r9, r2
 800abe0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800abe4:	f108 0601 	add.w	r6, r8, #1
 800abe8:	42b3      	cmp	r3, r6
 800abea:	db0b      	blt.n	800ac04 <__lshift+0x38>
 800abec:	4638      	mov	r0, r7
 800abee:	f7ff fd91 	bl	800a714 <_Balloc>
 800abf2:	4605      	mov	r5, r0
 800abf4:	b948      	cbnz	r0, 800ac0a <__lshift+0x3e>
 800abf6:	4602      	mov	r2, r0
 800abf8:	4b28      	ldr	r3, [pc, #160]	; (800ac9c <__lshift+0xd0>)
 800abfa:	4829      	ldr	r0, [pc, #164]	; (800aca0 <__lshift+0xd4>)
 800abfc:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac00:	f000 fe86 	bl	800b910 <__assert_func>
 800ac04:	3101      	adds	r1, #1
 800ac06:	005b      	lsls	r3, r3, #1
 800ac08:	e7ee      	b.n	800abe8 <__lshift+0x1c>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	f100 0114 	add.w	r1, r0, #20
 800ac10:	f100 0210 	add.w	r2, r0, #16
 800ac14:	4618      	mov	r0, r3
 800ac16:	4553      	cmp	r3, sl
 800ac18:	db33      	blt.n	800ac82 <__lshift+0xb6>
 800ac1a:	6920      	ldr	r0, [r4, #16]
 800ac1c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac20:	f104 0314 	add.w	r3, r4, #20
 800ac24:	f019 091f 	ands.w	r9, r9, #31
 800ac28:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac2c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac30:	d02b      	beq.n	800ac8a <__lshift+0xbe>
 800ac32:	f1c9 0e20 	rsb	lr, r9, #32
 800ac36:	468a      	mov	sl, r1
 800ac38:	2200      	movs	r2, #0
 800ac3a:	6818      	ldr	r0, [r3, #0]
 800ac3c:	fa00 f009 	lsl.w	r0, r0, r9
 800ac40:	4302      	orrs	r2, r0
 800ac42:	f84a 2b04 	str.w	r2, [sl], #4
 800ac46:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac4a:	459c      	cmp	ip, r3
 800ac4c:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac50:	d8f3      	bhi.n	800ac3a <__lshift+0x6e>
 800ac52:	ebac 0304 	sub.w	r3, ip, r4
 800ac56:	3b15      	subs	r3, #21
 800ac58:	f023 0303 	bic.w	r3, r3, #3
 800ac5c:	3304      	adds	r3, #4
 800ac5e:	f104 0015 	add.w	r0, r4, #21
 800ac62:	4584      	cmp	ip, r0
 800ac64:	bf38      	it	cc
 800ac66:	2304      	movcc	r3, #4
 800ac68:	50ca      	str	r2, [r1, r3]
 800ac6a:	b10a      	cbz	r2, 800ac70 <__lshift+0xa4>
 800ac6c:	f108 0602 	add.w	r6, r8, #2
 800ac70:	3e01      	subs	r6, #1
 800ac72:	4638      	mov	r0, r7
 800ac74:	612e      	str	r6, [r5, #16]
 800ac76:	4621      	mov	r1, r4
 800ac78:	f7ff fd8c 	bl	800a794 <_Bfree>
 800ac7c:	4628      	mov	r0, r5
 800ac7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ac82:	f842 0f04 	str.w	r0, [r2, #4]!
 800ac86:	3301      	adds	r3, #1
 800ac88:	e7c5      	b.n	800ac16 <__lshift+0x4a>
 800ac8a:	3904      	subs	r1, #4
 800ac8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac90:	f841 2f04 	str.w	r2, [r1, #4]!
 800ac94:	459c      	cmp	ip, r3
 800ac96:	d8f9      	bhi.n	800ac8c <__lshift+0xc0>
 800ac98:	e7ea      	b.n	800ac70 <__lshift+0xa4>
 800ac9a:	bf00      	nop
 800ac9c:	0800bec4 	.word	0x0800bec4
 800aca0:	0800bfb8 	.word	0x0800bfb8

0800aca4 <__mcmp>:
 800aca4:	b530      	push	{r4, r5, lr}
 800aca6:	6902      	ldr	r2, [r0, #16]
 800aca8:	690c      	ldr	r4, [r1, #16]
 800acaa:	1b12      	subs	r2, r2, r4
 800acac:	d10e      	bne.n	800accc <__mcmp+0x28>
 800acae:	f100 0314 	add.w	r3, r0, #20
 800acb2:	3114      	adds	r1, #20
 800acb4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800acb8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800acbc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800acc0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800acc4:	42a5      	cmp	r5, r4
 800acc6:	d003      	beq.n	800acd0 <__mcmp+0x2c>
 800acc8:	d305      	bcc.n	800acd6 <__mcmp+0x32>
 800acca:	2201      	movs	r2, #1
 800accc:	4610      	mov	r0, r2
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	4283      	cmp	r3, r0
 800acd2:	d3f3      	bcc.n	800acbc <__mcmp+0x18>
 800acd4:	e7fa      	b.n	800accc <__mcmp+0x28>
 800acd6:	f04f 32ff 	mov.w	r2, #4294967295
 800acda:	e7f7      	b.n	800accc <__mcmp+0x28>

0800acdc <__mdiff>:
 800acdc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ace0:	460c      	mov	r4, r1
 800ace2:	4606      	mov	r6, r0
 800ace4:	4611      	mov	r1, r2
 800ace6:	4620      	mov	r0, r4
 800ace8:	4617      	mov	r7, r2
 800acea:	f7ff ffdb 	bl	800aca4 <__mcmp>
 800acee:	1e05      	subs	r5, r0, #0
 800acf0:	d110      	bne.n	800ad14 <__mdiff+0x38>
 800acf2:	4629      	mov	r1, r5
 800acf4:	4630      	mov	r0, r6
 800acf6:	f7ff fd0d 	bl	800a714 <_Balloc>
 800acfa:	b930      	cbnz	r0, 800ad0a <__mdiff+0x2e>
 800acfc:	4b39      	ldr	r3, [pc, #228]	; (800ade4 <__mdiff+0x108>)
 800acfe:	4602      	mov	r2, r0
 800ad00:	f240 2132 	movw	r1, #562	; 0x232
 800ad04:	4838      	ldr	r0, [pc, #224]	; (800ade8 <__mdiff+0x10c>)
 800ad06:	f000 fe03 	bl	800b910 <__assert_func>
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad14:	bfa4      	itt	ge
 800ad16:	463b      	movge	r3, r7
 800ad18:	4627      	movge	r7, r4
 800ad1a:	4630      	mov	r0, r6
 800ad1c:	6879      	ldr	r1, [r7, #4]
 800ad1e:	bfa6      	itte	ge
 800ad20:	461c      	movge	r4, r3
 800ad22:	2500      	movge	r5, #0
 800ad24:	2501      	movlt	r5, #1
 800ad26:	f7ff fcf5 	bl	800a714 <_Balloc>
 800ad2a:	b920      	cbnz	r0, 800ad36 <__mdiff+0x5a>
 800ad2c:	4b2d      	ldr	r3, [pc, #180]	; (800ade4 <__mdiff+0x108>)
 800ad2e:	4602      	mov	r2, r0
 800ad30:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ad34:	e7e6      	b.n	800ad04 <__mdiff+0x28>
 800ad36:	693e      	ldr	r6, [r7, #16]
 800ad38:	60c5      	str	r5, [r0, #12]
 800ad3a:	6925      	ldr	r5, [r4, #16]
 800ad3c:	f107 0114 	add.w	r1, r7, #20
 800ad40:	f104 0914 	add.w	r9, r4, #20
 800ad44:	f100 0e14 	add.w	lr, r0, #20
 800ad48:	f107 0210 	add.w	r2, r7, #16
 800ad4c:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800ad50:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800ad54:	46f2      	mov	sl, lr
 800ad56:	2700      	movs	r7, #0
 800ad58:	f859 3b04 	ldr.w	r3, [r9], #4
 800ad5c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ad60:	fa1f f883 	uxth.w	r8, r3
 800ad64:	fa17 f78b 	uxtah	r7, r7, fp
 800ad68:	0c1b      	lsrs	r3, r3, #16
 800ad6a:	eba7 0808 	sub.w	r8, r7, r8
 800ad6e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ad72:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ad76:	fa1f f888 	uxth.w	r8, r8
 800ad7a:	141f      	asrs	r7, r3, #16
 800ad7c:	454d      	cmp	r5, r9
 800ad7e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ad82:	f84a 3b04 	str.w	r3, [sl], #4
 800ad86:	d8e7      	bhi.n	800ad58 <__mdiff+0x7c>
 800ad88:	1b2b      	subs	r3, r5, r4
 800ad8a:	3b15      	subs	r3, #21
 800ad8c:	f023 0303 	bic.w	r3, r3, #3
 800ad90:	3304      	adds	r3, #4
 800ad92:	3415      	adds	r4, #21
 800ad94:	42a5      	cmp	r5, r4
 800ad96:	bf38      	it	cc
 800ad98:	2304      	movcc	r3, #4
 800ad9a:	4419      	add	r1, r3
 800ad9c:	4473      	add	r3, lr
 800ad9e:	469e      	mov	lr, r3
 800ada0:	460d      	mov	r5, r1
 800ada2:	4565      	cmp	r5, ip
 800ada4:	d30e      	bcc.n	800adc4 <__mdiff+0xe8>
 800ada6:	f10c 0203 	add.w	r2, ip, #3
 800adaa:	1a52      	subs	r2, r2, r1
 800adac:	f022 0203 	bic.w	r2, r2, #3
 800adb0:	3903      	subs	r1, #3
 800adb2:	458c      	cmp	ip, r1
 800adb4:	bf38      	it	cc
 800adb6:	2200      	movcc	r2, #0
 800adb8:	441a      	add	r2, r3
 800adba:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800adbe:	b17b      	cbz	r3, 800ade0 <__mdiff+0x104>
 800adc0:	6106      	str	r6, [r0, #16]
 800adc2:	e7a5      	b.n	800ad10 <__mdiff+0x34>
 800adc4:	f855 8b04 	ldr.w	r8, [r5], #4
 800adc8:	fa17 f488 	uxtah	r4, r7, r8
 800adcc:	1422      	asrs	r2, r4, #16
 800adce:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800add2:	b2a4      	uxth	r4, r4
 800add4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800add8:	f84e 4b04 	str.w	r4, [lr], #4
 800addc:	1417      	asrs	r7, r2, #16
 800adde:	e7e0      	b.n	800ada2 <__mdiff+0xc6>
 800ade0:	3e01      	subs	r6, #1
 800ade2:	e7ea      	b.n	800adba <__mdiff+0xde>
 800ade4:	0800bec4 	.word	0x0800bec4
 800ade8:	0800bfb8 	.word	0x0800bfb8

0800adec <__ulp>:
 800adec:	b082      	sub	sp, #8
 800adee:	ed8d 0b00 	vstr	d0, [sp]
 800adf2:	9b01      	ldr	r3, [sp, #4]
 800adf4:	4912      	ldr	r1, [pc, #72]	; (800ae40 <__ulp+0x54>)
 800adf6:	4019      	ands	r1, r3
 800adf8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800adfc:	2900      	cmp	r1, #0
 800adfe:	dd05      	ble.n	800ae0c <__ulp+0x20>
 800ae00:	2200      	movs	r2, #0
 800ae02:	460b      	mov	r3, r1
 800ae04:	ec43 2b10 	vmov	d0, r2, r3
 800ae08:	b002      	add	sp, #8
 800ae0a:	4770      	bx	lr
 800ae0c:	4249      	negs	r1, r1
 800ae0e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ae12:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ae16:	f04f 0200 	mov.w	r2, #0
 800ae1a:	f04f 0300 	mov.w	r3, #0
 800ae1e:	da04      	bge.n	800ae2a <__ulp+0x3e>
 800ae20:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ae24:	fa41 f300 	asr.w	r3, r1, r0
 800ae28:	e7ec      	b.n	800ae04 <__ulp+0x18>
 800ae2a:	f1a0 0114 	sub.w	r1, r0, #20
 800ae2e:	291e      	cmp	r1, #30
 800ae30:	bfda      	itte	le
 800ae32:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ae36:	fa20 f101 	lsrle.w	r1, r0, r1
 800ae3a:	2101      	movgt	r1, #1
 800ae3c:	460a      	mov	r2, r1
 800ae3e:	e7e1      	b.n	800ae04 <__ulp+0x18>
 800ae40:	7ff00000 	.word	0x7ff00000

0800ae44 <__b2d>:
 800ae44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ae46:	6905      	ldr	r5, [r0, #16]
 800ae48:	f100 0714 	add.w	r7, r0, #20
 800ae4c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ae50:	1f2e      	subs	r6, r5, #4
 800ae52:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7ff fd52 	bl	800a900 <__hi0bits>
 800ae5c:	f1c0 0320 	rsb	r3, r0, #32
 800ae60:	280a      	cmp	r0, #10
 800ae62:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800aee0 <__b2d+0x9c>
 800ae66:	600b      	str	r3, [r1, #0]
 800ae68:	dc14      	bgt.n	800ae94 <__b2d+0x50>
 800ae6a:	f1c0 0e0b 	rsb	lr, r0, #11
 800ae6e:	fa24 f10e 	lsr.w	r1, r4, lr
 800ae72:	42b7      	cmp	r7, r6
 800ae74:	ea41 030c 	orr.w	r3, r1, ip
 800ae78:	bf34      	ite	cc
 800ae7a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae7e:	2100      	movcs	r1, #0
 800ae80:	3015      	adds	r0, #21
 800ae82:	fa04 f000 	lsl.w	r0, r4, r0
 800ae86:	fa21 f10e 	lsr.w	r1, r1, lr
 800ae8a:	ea40 0201 	orr.w	r2, r0, r1
 800ae8e:	ec43 2b10 	vmov	d0, r2, r3
 800ae92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae94:	42b7      	cmp	r7, r6
 800ae96:	bf3a      	itte	cc
 800ae98:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ae9c:	f1a5 0608 	subcc.w	r6, r5, #8
 800aea0:	2100      	movcs	r1, #0
 800aea2:	380b      	subs	r0, #11
 800aea4:	d017      	beq.n	800aed6 <__b2d+0x92>
 800aea6:	f1c0 0c20 	rsb	ip, r0, #32
 800aeaa:	fa04 f500 	lsl.w	r5, r4, r0
 800aeae:	42be      	cmp	r6, r7
 800aeb0:	fa21 f40c 	lsr.w	r4, r1, ip
 800aeb4:	ea45 0504 	orr.w	r5, r5, r4
 800aeb8:	bf8c      	ite	hi
 800aeba:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800aebe:	2400      	movls	r4, #0
 800aec0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800aec4:	fa01 f000 	lsl.w	r0, r1, r0
 800aec8:	fa24 f40c 	lsr.w	r4, r4, ip
 800aecc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aed0:	ea40 0204 	orr.w	r2, r0, r4
 800aed4:	e7db      	b.n	800ae8e <__b2d+0x4a>
 800aed6:	ea44 030c 	orr.w	r3, r4, ip
 800aeda:	460a      	mov	r2, r1
 800aedc:	e7d7      	b.n	800ae8e <__b2d+0x4a>
 800aede:	bf00      	nop
 800aee0:	3ff00000 	.word	0x3ff00000

0800aee4 <__d2b>:
 800aee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aee8:	4689      	mov	r9, r1
 800aeea:	2101      	movs	r1, #1
 800aeec:	ec57 6b10 	vmov	r6, r7, d0
 800aef0:	4690      	mov	r8, r2
 800aef2:	f7ff fc0f 	bl	800a714 <_Balloc>
 800aef6:	4604      	mov	r4, r0
 800aef8:	b930      	cbnz	r0, 800af08 <__d2b+0x24>
 800aefa:	4602      	mov	r2, r0
 800aefc:	4b25      	ldr	r3, [pc, #148]	; (800af94 <__d2b+0xb0>)
 800aefe:	4826      	ldr	r0, [pc, #152]	; (800af98 <__d2b+0xb4>)
 800af00:	f240 310a 	movw	r1, #778	; 0x30a
 800af04:	f000 fd04 	bl	800b910 <__assert_func>
 800af08:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800af0c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800af10:	bb35      	cbnz	r5, 800af60 <__d2b+0x7c>
 800af12:	2e00      	cmp	r6, #0
 800af14:	9301      	str	r3, [sp, #4]
 800af16:	d028      	beq.n	800af6a <__d2b+0x86>
 800af18:	4668      	mov	r0, sp
 800af1a:	9600      	str	r6, [sp, #0]
 800af1c:	f7ff fd10 	bl	800a940 <__lo0bits>
 800af20:	9900      	ldr	r1, [sp, #0]
 800af22:	b300      	cbz	r0, 800af66 <__d2b+0x82>
 800af24:	9a01      	ldr	r2, [sp, #4]
 800af26:	f1c0 0320 	rsb	r3, r0, #32
 800af2a:	fa02 f303 	lsl.w	r3, r2, r3
 800af2e:	430b      	orrs	r3, r1
 800af30:	40c2      	lsrs	r2, r0
 800af32:	6163      	str	r3, [r4, #20]
 800af34:	9201      	str	r2, [sp, #4]
 800af36:	9b01      	ldr	r3, [sp, #4]
 800af38:	61a3      	str	r3, [r4, #24]
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	bf14      	ite	ne
 800af3e:	2202      	movne	r2, #2
 800af40:	2201      	moveq	r2, #1
 800af42:	6122      	str	r2, [r4, #16]
 800af44:	b1d5      	cbz	r5, 800af7c <__d2b+0x98>
 800af46:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800af4a:	4405      	add	r5, r0
 800af4c:	f8c9 5000 	str.w	r5, [r9]
 800af50:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800af54:	f8c8 0000 	str.w	r0, [r8]
 800af58:	4620      	mov	r0, r4
 800af5a:	b003      	add	sp, #12
 800af5c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800af64:	e7d5      	b.n	800af12 <__d2b+0x2e>
 800af66:	6161      	str	r1, [r4, #20]
 800af68:	e7e5      	b.n	800af36 <__d2b+0x52>
 800af6a:	a801      	add	r0, sp, #4
 800af6c:	f7ff fce8 	bl	800a940 <__lo0bits>
 800af70:	9b01      	ldr	r3, [sp, #4]
 800af72:	6163      	str	r3, [r4, #20]
 800af74:	2201      	movs	r2, #1
 800af76:	6122      	str	r2, [r4, #16]
 800af78:	3020      	adds	r0, #32
 800af7a:	e7e3      	b.n	800af44 <__d2b+0x60>
 800af7c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af80:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af84:	f8c9 0000 	str.w	r0, [r9]
 800af88:	6918      	ldr	r0, [r3, #16]
 800af8a:	f7ff fcb9 	bl	800a900 <__hi0bits>
 800af8e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af92:	e7df      	b.n	800af54 <__d2b+0x70>
 800af94:	0800bec4 	.word	0x0800bec4
 800af98:	0800bfb8 	.word	0x0800bfb8

0800af9c <__ratio>:
 800af9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afa0:	4688      	mov	r8, r1
 800afa2:	4669      	mov	r1, sp
 800afa4:	4681      	mov	r9, r0
 800afa6:	f7ff ff4d 	bl	800ae44 <__b2d>
 800afaa:	a901      	add	r1, sp, #4
 800afac:	4640      	mov	r0, r8
 800afae:	ec55 4b10 	vmov	r4, r5, d0
 800afb2:	f7ff ff47 	bl	800ae44 <__b2d>
 800afb6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800afba:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800afbe:	eba3 0c02 	sub.w	ip, r3, r2
 800afc2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800afc6:	1a9b      	subs	r3, r3, r2
 800afc8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800afcc:	ec51 0b10 	vmov	r0, r1, d0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	bfd6      	itet	le
 800afd4:	460a      	movle	r2, r1
 800afd6:	462a      	movgt	r2, r5
 800afd8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800afdc:	468b      	mov	fp, r1
 800afde:	462f      	mov	r7, r5
 800afe0:	bfd4      	ite	le
 800afe2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800afe6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800afea:	4620      	mov	r0, r4
 800afec:	ee10 2a10 	vmov	r2, s0
 800aff0:	465b      	mov	r3, fp
 800aff2:	4639      	mov	r1, r7
 800aff4:	f7f5 fc3a 	bl	800086c <__aeabi_ddiv>
 800aff8:	ec41 0b10 	vmov	d0, r0, r1
 800affc:	b003      	add	sp, #12
 800affe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b002 <__copybits>:
 800b002:	3901      	subs	r1, #1
 800b004:	b570      	push	{r4, r5, r6, lr}
 800b006:	1149      	asrs	r1, r1, #5
 800b008:	6914      	ldr	r4, [r2, #16]
 800b00a:	3101      	adds	r1, #1
 800b00c:	f102 0314 	add.w	r3, r2, #20
 800b010:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b014:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b018:	1f05      	subs	r5, r0, #4
 800b01a:	42a3      	cmp	r3, r4
 800b01c:	d30c      	bcc.n	800b038 <__copybits+0x36>
 800b01e:	1aa3      	subs	r3, r4, r2
 800b020:	3b11      	subs	r3, #17
 800b022:	f023 0303 	bic.w	r3, r3, #3
 800b026:	3211      	adds	r2, #17
 800b028:	42a2      	cmp	r2, r4
 800b02a:	bf88      	it	hi
 800b02c:	2300      	movhi	r3, #0
 800b02e:	4418      	add	r0, r3
 800b030:	2300      	movs	r3, #0
 800b032:	4288      	cmp	r0, r1
 800b034:	d305      	bcc.n	800b042 <__copybits+0x40>
 800b036:	bd70      	pop	{r4, r5, r6, pc}
 800b038:	f853 6b04 	ldr.w	r6, [r3], #4
 800b03c:	f845 6f04 	str.w	r6, [r5, #4]!
 800b040:	e7eb      	b.n	800b01a <__copybits+0x18>
 800b042:	f840 3b04 	str.w	r3, [r0], #4
 800b046:	e7f4      	b.n	800b032 <__copybits+0x30>

0800b048 <__any_on>:
 800b048:	f100 0214 	add.w	r2, r0, #20
 800b04c:	6900      	ldr	r0, [r0, #16]
 800b04e:	114b      	asrs	r3, r1, #5
 800b050:	4298      	cmp	r0, r3
 800b052:	b510      	push	{r4, lr}
 800b054:	db11      	blt.n	800b07a <__any_on+0x32>
 800b056:	dd0a      	ble.n	800b06e <__any_on+0x26>
 800b058:	f011 011f 	ands.w	r1, r1, #31
 800b05c:	d007      	beq.n	800b06e <__any_on+0x26>
 800b05e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b062:	fa24 f001 	lsr.w	r0, r4, r1
 800b066:	fa00 f101 	lsl.w	r1, r0, r1
 800b06a:	428c      	cmp	r4, r1
 800b06c:	d10b      	bne.n	800b086 <__any_on+0x3e>
 800b06e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b072:	4293      	cmp	r3, r2
 800b074:	d803      	bhi.n	800b07e <__any_on+0x36>
 800b076:	2000      	movs	r0, #0
 800b078:	bd10      	pop	{r4, pc}
 800b07a:	4603      	mov	r3, r0
 800b07c:	e7f7      	b.n	800b06e <__any_on+0x26>
 800b07e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b082:	2900      	cmp	r1, #0
 800b084:	d0f5      	beq.n	800b072 <__any_on+0x2a>
 800b086:	2001      	movs	r0, #1
 800b088:	e7f6      	b.n	800b078 <__any_on+0x30>

0800b08a <_calloc_r>:
 800b08a:	b513      	push	{r0, r1, r4, lr}
 800b08c:	434a      	muls	r2, r1
 800b08e:	4611      	mov	r1, r2
 800b090:	9201      	str	r2, [sp, #4]
 800b092:	f000 f859 	bl	800b148 <_malloc_r>
 800b096:	4604      	mov	r4, r0
 800b098:	b118      	cbz	r0, 800b0a2 <_calloc_r+0x18>
 800b09a:	9a01      	ldr	r2, [sp, #4]
 800b09c:	2100      	movs	r1, #0
 800b09e:	f7fc f845 	bl	800712c <memset>
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	b002      	add	sp, #8
 800b0a6:	bd10      	pop	{r4, pc}

0800b0a8 <_free_r>:
 800b0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0aa:	2900      	cmp	r1, #0
 800b0ac:	d048      	beq.n	800b140 <_free_r+0x98>
 800b0ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0b2:	9001      	str	r0, [sp, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	f1a1 0404 	sub.w	r4, r1, #4
 800b0ba:	bfb8      	it	lt
 800b0bc:	18e4      	addlt	r4, r4, r3
 800b0be:	f000 fcb5 	bl	800ba2c <__malloc_lock>
 800b0c2:	4a20      	ldr	r2, [pc, #128]	; (800b144 <_free_r+0x9c>)
 800b0c4:	9801      	ldr	r0, [sp, #4]
 800b0c6:	6813      	ldr	r3, [r2, #0]
 800b0c8:	4615      	mov	r5, r2
 800b0ca:	b933      	cbnz	r3, 800b0da <_free_r+0x32>
 800b0cc:	6063      	str	r3, [r4, #4]
 800b0ce:	6014      	str	r4, [r2, #0]
 800b0d0:	b003      	add	sp, #12
 800b0d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b0d6:	f000 bcaf 	b.w	800ba38 <__malloc_unlock>
 800b0da:	42a3      	cmp	r3, r4
 800b0dc:	d90b      	bls.n	800b0f6 <_free_r+0x4e>
 800b0de:	6821      	ldr	r1, [r4, #0]
 800b0e0:	1862      	adds	r2, r4, r1
 800b0e2:	4293      	cmp	r3, r2
 800b0e4:	bf04      	itt	eq
 800b0e6:	681a      	ldreq	r2, [r3, #0]
 800b0e8:	685b      	ldreq	r3, [r3, #4]
 800b0ea:	6063      	str	r3, [r4, #4]
 800b0ec:	bf04      	itt	eq
 800b0ee:	1852      	addeq	r2, r2, r1
 800b0f0:	6022      	streq	r2, [r4, #0]
 800b0f2:	602c      	str	r4, [r5, #0]
 800b0f4:	e7ec      	b.n	800b0d0 <_free_r+0x28>
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	685b      	ldr	r3, [r3, #4]
 800b0fa:	b10b      	cbz	r3, 800b100 <_free_r+0x58>
 800b0fc:	42a3      	cmp	r3, r4
 800b0fe:	d9fa      	bls.n	800b0f6 <_free_r+0x4e>
 800b100:	6811      	ldr	r1, [r2, #0]
 800b102:	1855      	adds	r5, r2, r1
 800b104:	42a5      	cmp	r5, r4
 800b106:	d10b      	bne.n	800b120 <_free_r+0x78>
 800b108:	6824      	ldr	r4, [r4, #0]
 800b10a:	4421      	add	r1, r4
 800b10c:	1854      	adds	r4, r2, r1
 800b10e:	42a3      	cmp	r3, r4
 800b110:	6011      	str	r1, [r2, #0]
 800b112:	d1dd      	bne.n	800b0d0 <_free_r+0x28>
 800b114:	681c      	ldr	r4, [r3, #0]
 800b116:	685b      	ldr	r3, [r3, #4]
 800b118:	6053      	str	r3, [r2, #4]
 800b11a:	4421      	add	r1, r4
 800b11c:	6011      	str	r1, [r2, #0]
 800b11e:	e7d7      	b.n	800b0d0 <_free_r+0x28>
 800b120:	d902      	bls.n	800b128 <_free_r+0x80>
 800b122:	230c      	movs	r3, #12
 800b124:	6003      	str	r3, [r0, #0]
 800b126:	e7d3      	b.n	800b0d0 <_free_r+0x28>
 800b128:	6825      	ldr	r5, [r4, #0]
 800b12a:	1961      	adds	r1, r4, r5
 800b12c:	428b      	cmp	r3, r1
 800b12e:	bf04      	itt	eq
 800b130:	6819      	ldreq	r1, [r3, #0]
 800b132:	685b      	ldreq	r3, [r3, #4]
 800b134:	6063      	str	r3, [r4, #4]
 800b136:	bf04      	itt	eq
 800b138:	1949      	addeq	r1, r1, r5
 800b13a:	6021      	streq	r1, [r4, #0]
 800b13c:	6054      	str	r4, [r2, #4]
 800b13e:	e7c7      	b.n	800b0d0 <_free_r+0x28>
 800b140:	b003      	add	sp, #12
 800b142:	bd30      	pop	{r4, r5, pc}
 800b144:	20000208 	.word	0x20000208

0800b148 <_malloc_r>:
 800b148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b14a:	1ccd      	adds	r5, r1, #3
 800b14c:	f025 0503 	bic.w	r5, r5, #3
 800b150:	3508      	adds	r5, #8
 800b152:	2d0c      	cmp	r5, #12
 800b154:	bf38      	it	cc
 800b156:	250c      	movcc	r5, #12
 800b158:	2d00      	cmp	r5, #0
 800b15a:	4606      	mov	r6, r0
 800b15c:	db01      	blt.n	800b162 <_malloc_r+0x1a>
 800b15e:	42a9      	cmp	r1, r5
 800b160:	d903      	bls.n	800b16a <_malloc_r+0x22>
 800b162:	230c      	movs	r3, #12
 800b164:	6033      	str	r3, [r6, #0]
 800b166:	2000      	movs	r0, #0
 800b168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b16a:	f000 fc5f 	bl	800ba2c <__malloc_lock>
 800b16e:	4921      	ldr	r1, [pc, #132]	; (800b1f4 <_malloc_r+0xac>)
 800b170:	680a      	ldr	r2, [r1, #0]
 800b172:	4614      	mov	r4, r2
 800b174:	b99c      	cbnz	r4, 800b19e <_malloc_r+0x56>
 800b176:	4f20      	ldr	r7, [pc, #128]	; (800b1f8 <_malloc_r+0xb0>)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	b923      	cbnz	r3, 800b186 <_malloc_r+0x3e>
 800b17c:	4621      	mov	r1, r4
 800b17e:	4630      	mov	r0, r6
 800b180:	f000 fb42 	bl	800b808 <_sbrk_r>
 800b184:	6038      	str	r0, [r7, #0]
 800b186:	4629      	mov	r1, r5
 800b188:	4630      	mov	r0, r6
 800b18a:	f000 fb3d 	bl	800b808 <_sbrk_r>
 800b18e:	1c43      	adds	r3, r0, #1
 800b190:	d123      	bne.n	800b1da <_malloc_r+0x92>
 800b192:	230c      	movs	r3, #12
 800b194:	6033      	str	r3, [r6, #0]
 800b196:	4630      	mov	r0, r6
 800b198:	f000 fc4e 	bl	800ba38 <__malloc_unlock>
 800b19c:	e7e3      	b.n	800b166 <_malloc_r+0x1e>
 800b19e:	6823      	ldr	r3, [r4, #0]
 800b1a0:	1b5b      	subs	r3, r3, r5
 800b1a2:	d417      	bmi.n	800b1d4 <_malloc_r+0x8c>
 800b1a4:	2b0b      	cmp	r3, #11
 800b1a6:	d903      	bls.n	800b1b0 <_malloc_r+0x68>
 800b1a8:	6023      	str	r3, [r4, #0]
 800b1aa:	441c      	add	r4, r3
 800b1ac:	6025      	str	r5, [r4, #0]
 800b1ae:	e004      	b.n	800b1ba <_malloc_r+0x72>
 800b1b0:	6863      	ldr	r3, [r4, #4]
 800b1b2:	42a2      	cmp	r2, r4
 800b1b4:	bf0c      	ite	eq
 800b1b6:	600b      	streq	r3, [r1, #0]
 800b1b8:	6053      	strne	r3, [r2, #4]
 800b1ba:	4630      	mov	r0, r6
 800b1bc:	f000 fc3c 	bl	800ba38 <__malloc_unlock>
 800b1c0:	f104 000b 	add.w	r0, r4, #11
 800b1c4:	1d23      	adds	r3, r4, #4
 800b1c6:	f020 0007 	bic.w	r0, r0, #7
 800b1ca:	1ac2      	subs	r2, r0, r3
 800b1cc:	d0cc      	beq.n	800b168 <_malloc_r+0x20>
 800b1ce:	1a1b      	subs	r3, r3, r0
 800b1d0:	50a3      	str	r3, [r4, r2]
 800b1d2:	e7c9      	b.n	800b168 <_malloc_r+0x20>
 800b1d4:	4622      	mov	r2, r4
 800b1d6:	6864      	ldr	r4, [r4, #4]
 800b1d8:	e7cc      	b.n	800b174 <_malloc_r+0x2c>
 800b1da:	1cc4      	adds	r4, r0, #3
 800b1dc:	f024 0403 	bic.w	r4, r4, #3
 800b1e0:	42a0      	cmp	r0, r4
 800b1e2:	d0e3      	beq.n	800b1ac <_malloc_r+0x64>
 800b1e4:	1a21      	subs	r1, r4, r0
 800b1e6:	4630      	mov	r0, r6
 800b1e8:	f000 fb0e 	bl	800b808 <_sbrk_r>
 800b1ec:	3001      	adds	r0, #1
 800b1ee:	d1dd      	bne.n	800b1ac <_malloc_r+0x64>
 800b1f0:	e7cf      	b.n	800b192 <_malloc_r+0x4a>
 800b1f2:	bf00      	nop
 800b1f4:	20000208 	.word	0x20000208
 800b1f8:	2000020c 	.word	0x2000020c

0800b1fc <__ssputs_r>:
 800b1fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b200:	688e      	ldr	r6, [r1, #8]
 800b202:	429e      	cmp	r6, r3
 800b204:	4682      	mov	sl, r0
 800b206:	460c      	mov	r4, r1
 800b208:	4690      	mov	r8, r2
 800b20a:	461f      	mov	r7, r3
 800b20c:	d838      	bhi.n	800b280 <__ssputs_r+0x84>
 800b20e:	898a      	ldrh	r2, [r1, #12]
 800b210:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b214:	d032      	beq.n	800b27c <__ssputs_r+0x80>
 800b216:	6825      	ldr	r5, [r4, #0]
 800b218:	6909      	ldr	r1, [r1, #16]
 800b21a:	eba5 0901 	sub.w	r9, r5, r1
 800b21e:	6965      	ldr	r5, [r4, #20]
 800b220:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b224:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b228:	3301      	adds	r3, #1
 800b22a:	444b      	add	r3, r9
 800b22c:	106d      	asrs	r5, r5, #1
 800b22e:	429d      	cmp	r5, r3
 800b230:	bf38      	it	cc
 800b232:	461d      	movcc	r5, r3
 800b234:	0553      	lsls	r3, r2, #21
 800b236:	d531      	bpl.n	800b29c <__ssputs_r+0xa0>
 800b238:	4629      	mov	r1, r5
 800b23a:	f7ff ff85 	bl	800b148 <_malloc_r>
 800b23e:	4606      	mov	r6, r0
 800b240:	b950      	cbnz	r0, 800b258 <__ssputs_r+0x5c>
 800b242:	230c      	movs	r3, #12
 800b244:	f8ca 3000 	str.w	r3, [sl]
 800b248:	89a3      	ldrh	r3, [r4, #12]
 800b24a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b24e:	81a3      	strh	r3, [r4, #12]
 800b250:	f04f 30ff 	mov.w	r0, #4294967295
 800b254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b258:	6921      	ldr	r1, [r4, #16]
 800b25a:	464a      	mov	r2, r9
 800b25c:	f7ff fa4c 	bl	800a6f8 <memcpy>
 800b260:	89a3      	ldrh	r3, [r4, #12]
 800b262:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b266:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b26a:	81a3      	strh	r3, [r4, #12]
 800b26c:	6126      	str	r6, [r4, #16]
 800b26e:	6165      	str	r5, [r4, #20]
 800b270:	444e      	add	r6, r9
 800b272:	eba5 0509 	sub.w	r5, r5, r9
 800b276:	6026      	str	r6, [r4, #0]
 800b278:	60a5      	str	r5, [r4, #8]
 800b27a:	463e      	mov	r6, r7
 800b27c:	42be      	cmp	r6, r7
 800b27e:	d900      	bls.n	800b282 <__ssputs_r+0x86>
 800b280:	463e      	mov	r6, r7
 800b282:	4632      	mov	r2, r6
 800b284:	6820      	ldr	r0, [r4, #0]
 800b286:	4641      	mov	r1, r8
 800b288:	f000 fbb6 	bl	800b9f8 <memmove>
 800b28c:	68a3      	ldr	r3, [r4, #8]
 800b28e:	6822      	ldr	r2, [r4, #0]
 800b290:	1b9b      	subs	r3, r3, r6
 800b292:	4432      	add	r2, r6
 800b294:	60a3      	str	r3, [r4, #8]
 800b296:	6022      	str	r2, [r4, #0]
 800b298:	2000      	movs	r0, #0
 800b29a:	e7db      	b.n	800b254 <__ssputs_r+0x58>
 800b29c:	462a      	mov	r2, r5
 800b29e:	f000 fbd1 	bl	800ba44 <_realloc_r>
 800b2a2:	4606      	mov	r6, r0
 800b2a4:	2800      	cmp	r0, #0
 800b2a6:	d1e1      	bne.n	800b26c <__ssputs_r+0x70>
 800b2a8:	6921      	ldr	r1, [r4, #16]
 800b2aa:	4650      	mov	r0, sl
 800b2ac:	f7ff fefc 	bl	800b0a8 <_free_r>
 800b2b0:	e7c7      	b.n	800b242 <__ssputs_r+0x46>
	...

0800b2b4 <_svfiprintf_r>:
 800b2b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2b8:	4698      	mov	r8, r3
 800b2ba:	898b      	ldrh	r3, [r1, #12]
 800b2bc:	061b      	lsls	r3, r3, #24
 800b2be:	b09d      	sub	sp, #116	; 0x74
 800b2c0:	4607      	mov	r7, r0
 800b2c2:	460d      	mov	r5, r1
 800b2c4:	4614      	mov	r4, r2
 800b2c6:	d50e      	bpl.n	800b2e6 <_svfiprintf_r+0x32>
 800b2c8:	690b      	ldr	r3, [r1, #16]
 800b2ca:	b963      	cbnz	r3, 800b2e6 <_svfiprintf_r+0x32>
 800b2cc:	2140      	movs	r1, #64	; 0x40
 800b2ce:	f7ff ff3b 	bl	800b148 <_malloc_r>
 800b2d2:	6028      	str	r0, [r5, #0]
 800b2d4:	6128      	str	r0, [r5, #16]
 800b2d6:	b920      	cbnz	r0, 800b2e2 <_svfiprintf_r+0x2e>
 800b2d8:	230c      	movs	r3, #12
 800b2da:	603b      	str	r3, [r7, #0]
 800b2dc:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e0:	e0d1      	b.n	800b486 <_svfiprintf_r+0x1d2>
 800b2e2:	2340      	movs	r3, #64	; 0x40
 800b2e4:	616b      	str	r3, [r5, #20]
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ea:	2320      	movs	r3, #32
 800b2ec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2f0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2f4:	2330      	movs	r3, #48	; 0x30
 800b2f6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b4a0 <_svfiprintf_r+0x1ec>
 800b2fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2fe:	f04f 0901 	mov.w	r9, #1
 800b302:	4623      	mov	r3, r4
 800b304:	469a      	mov	sl, r3
 800b306:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b30a:	b10a      	cbz	r2, 800b310 <_svfiprintf_r+0x5c>
 800b30c:	2a25      	cmp	r2, #37	; 0x25
 800b30e:	d1f9      	bne.n	800b304 <_svfiprintf_r+0x50>
 800b310:	ebba 0b04 	subs.w	fp, sl, r4
 800b314:	d00b      	beq.n	800b32e <_svfiprintf_r+0x7a>
 800b316:	465b      	mov	r3, fp
 800b318:	4622      	mov	r2, r4
 800b31a:	4629      	mov	r1, r5
 800b31c:	4638      	mov	r0, r7
 800b31e:	f7ff ff6d 	bl	800b1fc <__ssputs_r>
 800b322:	3001      	adds	r0, #1
 800b324:	f000 80aa 	beq.w	800b47c <_svfiprintf_r+0x1c8>
 800b328:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b32a:	445a      	add	r2, fp
 800b32c:	9209      	str	r2, [sp, #36]	; 0x24
 800b32e:	f89a 3000 	ldrb.w	r3, [sl]
 800b332:	2b00      	cmp	r3, #0
 800b334:	f000 80a2 	beq.w	800b47c <_svfiprintf_r+0x1c8>
 800b338:	2300      	movs	r3, #0
 800b33a:	f04f 32ff 	mov.w	r2, #4294967295
 800b33e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b342:	f10a 0a01 	add.w	sl, sl, #1
 800b346:	9304      	str	r3, [sp, #16]
 800b348:	9307      	str	r3, [sp, #28]
 800b34a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b34e:	931a      	str	r3, [sp, #104]	; 0x68
 800b350:	4654      	mov	r4, sl
 800b352:	2205      	movs	r2, #5
 800b354:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b358:	4851      	ldr	r0, [pc, #324]	; (800b4a0 <_svfiprintf_r+0x1ec>)
 800b35a:	f7f4 ff51 	bl	8000200 <memchr>
 800b35e:	9a04      	ldr	r2, [sp, #16]
 800b360:	b9d8      	cbnz	r0, 800b39a <_svfiprintf_r+0xe6>
 800b362:	06d0      	lsls	r0, r2, #27
 800b364:	bf44      	itt	mi
 800b366:	2320      	movmi	r3, #32
 800b368:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b36c:	0711      	lsls	r1, r2, #28
 800b36e:	bf44      	itt	mi
 800b370:	232b      	movmi	r3, #43	; 0x2b
 800b372:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b376:	f89a 3000 	ldrb.w	r3, [sl]
 800b37a:	2b2a      	cmp	r3, #42	; 0x2a
 800b37c:	d015      	beq.n	800b3aa <_svfiprintf_r+0xf6>
 800b37e:	9a07      	ldr	r2, [sp, #28]
 800b380:	4654      	mov	r4, sl
 800b382:	2000      	movs	r0, #0
 800b384:	f04f 0c0a 	mov.w	ip, #10
 800b388:	4621      	mov	r1, r4
 800b38a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b38e:	3b30      	subs	r3, #48	; 0x30
 800b390:	2b09      	cmp	r3, #9
 800b392:	d94e      	bls.n	800b432 <_svfiprintf_r+0x17e>
 800b394:	b1b0      	cbz	r0, 800b3c4 <_svfiprintf_r+0x110>
 800b396:	9207      	str	r2, [sp, #28]
 800b398:	e014      	b.n	800b3c4 <_svfiprintf_r+0x110>
 800b39a:	eba0 0308 	sub.w	r3, r0, r8
 800b39e:	fa09 f303 	lsl.w	r3, r9, r3
 800b3a2:	4313      	orrs	r3, r2
 800b3a4:	9304      	str	r3, [sp, #16]
 800b3a6:	46a2      	mov	sl, r4
 800b3a8:	e7d2      	b.n	800b350 <_svfiprintf_r+0x9c>
 800b3aa:	9b03      	ldr	r3, [sp, #12]
 800b3ac:	1d19      	adds	r1, r3, #4
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	9103      	str	r1, [sp, #12]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	bfbb      	ittet	lt
 800b3b6:	425b      	neglt	r3, r3
 800b3b8:	f042 0202 	orrlt.w	r2, r2, #2
 800b3bc:	9307      	strge	r3, [sp, #28]
 800b3be:	9307      	strlt	r3, [sp, #28]
 800b3c0:	bfb8      	it	lt
 800b3c2:	9204      	strlt	r2, [sp, #16]
 800b3c4:	7823      	ldrb	r3, [r4, #0]
 800b3c6:	2b2e      	cmp	r3, #46	; 0x2e
 800b3c8:	d10c      	bne.n	800b3e4 <_svfiprintf_r+0x130>
 800b3ca:	7863      	ldrb	r3, [r4, #1]
 800b3cc:	2b2a      	cmp	r3, #42	; 0x2a
 800b3ce:	d135      	bne.n	800b43c <_svfiprintf_r+0x188>
 800b3d0:	9b03      	ldr	r3, [sp, #12]
 800b3d2:	1d1a      	adds	r2, r3, #4
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	9203      	str	r2, [sp, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	bfb8      	it	lt
 800b3dc:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3e0:	3402      	adds	r4, #2
 800b3e2:	9305      	str	r3, [sp, #20]
 800b3e4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b4b0 <_svfiprintf_r+0x1fc>
 800b3e8:	7821      	ldrb	r1, [r4, #0]
 800b3ea:	2203      	movs	r2, #3
 800b3ec:	4650      	mov	r0, sl
 800b3ee:	f7f4 ff07 	bl	8000200 <memchr>
 800b3f2:	b140      	cbz	r0, 800b406 <_svfiprintf_r+0x152>
 800b3f4:	2340      	movs	r3, #64	; 0x40
 800b3f6:	eba0 000a 	sub.w	r0, r0, sl
 800b3fa:	fa03 f000 	lsl.w	r0, r3, r0
 800b3fe:	9b04      	ldr	r3, [sp, #16]
 800b400:	4303      	orrs	r3, r0
 800b402:	3401      	adds	r4, #1
 800b404:	9304      	str	r3, [sp, #16]
 800b406:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40a:	4826      	ldr	r0, [pc, #152]	; (800b4a4 <_svfiprintf_r+0x1f0>)
 800b40c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b410:	2206      	movs	r2, #6
 800b412:	f7f4 fef5 	bl	8000200 <memchr>
 800b416:	2800      	cmp	r0, #0
 800b418:	d038      	beq.n	800b48c <_svfiprintf_r+0x1d8>
 800b41a:	4b23      	ldr	r3, [pc, #140]	; (800b4a8 <_svfiprintf_r+0x1f4>)
 800b41c:	bb1b      	cbnz	r3, 800b466 <_svfiprintf_r+0x1b2>
 800b41e:	9b03      	ldr	r3, [sp, #12]
 800b420:	3307      	adds	r3, #7
 800b422:	f023 0307 	bic.w	r3, r3, #7
 800b426:	3308      	adds	r3, #8
 800b428:	9303      	str	r3, [sp, #12]
 800b42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b42c:	4433      	add	r3, r6
 800b42e:	9309      	str	r3, [sp, #36]	; 0x24
 800b430:	e767      	b.n	800b302 <_svfiprintf_r+0x4e>
 800b432:	fb0c 3202 	mla	r2, ip, r2, r3
 800b436:	460c      	mov	r4, r1
 800b438:	2001      	movs	r0, #1
 800b43a:	e7a5      	b.n	800b388 <_svfiprintf_r+0xd4>
 800b43c:	2300      	movs	r3, #0
 800b43e:	3401      	adds	r4, #1
 800b440:	9305      	str	r3, [sp, #20]
 800b442:	4619      	mov	r1, r3
 800b444:	f04f 0c0a 	mov.w	ip, #10
 800b448:	4620      	mov	r0, r4
 800b44a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b44e:	3a30      	subs	r2, #48	; 0x30
 800b450:	2a09      	cmp	r2, #9
 800b452:	d903      	bls.n	800b45c <_svfiprintf_r+0x1a8>
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0c5      	beq.n	800b3e4 <_svfiprintf_r+0x130>
 800b458:	9105      	str	r1, [sp, #20]
 800b45a:	e7c3      	b.n	800b3e4 <_svfiprintf_r+0x130>
 800b45c:	fb0c 2101 	mla	r1, ip, r1, r2
 800b460:	4604      	mov	r4, r0
 800b462:	2301      	movs	r3, #1
 800b464:	e7f0      	b.n	800b448 <_svfiprintf_r+0x194>
 800b466:	ab03      	add	r3, sp, #12
 800b468:	9300      	str	r3, [sp, #0]
 800b46a:	462a      	mov	r2, r5
 800b46c:	4b0f      	ldr	r3, [pc, #60]	; (800b4ac <_svfiprintf_r+0x1f8>)
 800b46e:	a904      	add	r1, sp, #16
 800b470:	4638      	mov	r0, r7
 800b472:	f7fb ff03 	bl	800727c <_printf_float>
 800b476:	1c42      	adds	r2, r0, #1
 800b478:	4606      	mov	r6, r0
 800b47a:	d1d6      	bne.n	800b42a <_svfiprintf_r+0x176>
 800b47c:	89ab      	ldrh	r3, [r5, #12]
 800b47e:	065b      	lsls	r3, r3, #25
 800b480:	f53f af2c 	bmi.w	800b2dc <_svfiprintf_r+0x28>
 800b484:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b486:	b01d      	add	sp, #116	; 0x74
 800b488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b48c:	ab03      	add	r3, sp, #12
 800b48e:	9300      	str	r3, [sp, #0]
 800b490:	462a      	mov	r2, r5
 800b492:	4b06      	ldr	r3, [pc, #24]	; (800b4ac <_svfiprintf_r+0x1f8>)
 800b494:	a904      	add	r1, sp, #16
 800b496:	4638      	mov	r0, r7
 800b498:	f7fc f994 	bl	80077c4 <_printf_i>
 800b49c:	e7eb      	b.n	800b476 <_svfiprintf_r+0x1c2>
 800b49e:	bf00      	nop
 800b4a0:	0800c114 	.word	0x0800c114
 800b4a4:	0800c11e 	.word	0x0800c11e
 800b4a8:	0800727d 	.word	0x0800727d
 800b4ac:	0800b1fd 	.word	0x0800b1fd
 800b4b0:	0800c11a 	.word	0x0800c11a

0800b4b4 <__sfputc_r>:
 800b4b4:	6893      	ldr	r3, [r2, #8]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	b410      	push	{r4}
 800b4bc:	6093      	str	r3, [r2, #8]
 800b4be:	da08      	bge.n	800b4d2 <__sfputc_r+0x1e>
 800b4c0:	6994      	ldr	r4, [r2, #24]
 800b4c2:	42a3      	cmp	r3, r4
 800b4c4:	db01      	blt.n	800b4ca <__sfputc_r+0x16>
 800b4c6:	290a      	cmp	r1, #10
 800b4c8:	d103      	bne.n	800b4d2 <__sfputc_r+0x1e>
 800b4ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4ce:	f7fd bc2d 	b.w	8008d2c <__swbuf_r>
 800b4d2:	6813      	ldr	r3, [r2, #0]
 800b4d4:	1c58      	adds	r0, r3, #1
 800b4d6:	6010      	str	r0, [r2, #0]
 800b4d8:	7019      	strb	r1, [r3, #0]
 800b4da:	4608      	mov	r0, r1
 800b4dc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4e0:	4770      	bx	lr

0800b4e2 <__sfputs_r>:
 800b4e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4e4:	4606      	mov	r6, r0
 800b4e6:	460f      	mov	r7, r1
 800b4e8:	4614      	mov	r4, r2
 800b4ea:	18d5      	adds	r5, r2, r3
 800b4ec:	42ac      	cmp	r4, r5
 800b4ee:	d101      	bne.n	800b4f4 <__sfputs_r+0x12>
 800b4f0:	2000      	movs	r0, #0
 800b4f2:	e007      	b.n	800b504 <__sfputs_r+0x22>
 800b4f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4f8:	463a      	mov	r2, r7
 800b4fa:	4630      	mov	r0, r6
 800b4fc:	f7ff ffda 	bl	800b4b4 <__sfputc_r>
 800b500:	1c43      	adds	r3, r0, #1
 800b502:	d1f3      	bne.n	800b4ec <__sfputs_r+0xa>
 800b504:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b508 <_vfiprintf_r>:
 800b508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b50c:	460d      	mov	r5, r1
 800b50e:	b09d      	sub	sp, #116	; 0x74
 800b510:	4614      	mov	r4, r2
 800b512:	4698      	mov	r8, r3
 800b514:	4606      	mov	r6, r0
 800b516:	b118      	cbz	r0, 800b520 <_vfiprintf_r+0x18>
 800b518:	6983      	ldr	r3, [r0, #24]
 800b51a:	b90b      	cbnz	r3, 800b520 <_vfiprintf_r+0x18>
 800b51c:	f7fe fc5a 	bl	8009dd4 <__sinit>
 800b520:	4b89      	ldr	r3, [pc, #548]	; (800b748 <_vfiprintf_r+0x240>)
 800b522:	429d      	cmp	r5, r3
 800b524:	d11b      	bne.n	800b55e <_vfiprintf_r+0x56>
 800b526:	6875      	ldr	r5, [r6, #4]
 800b528:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b52a:	07d9      	lsls	r1, r3, #31
 800b52c:	d405      	bmi.n	800b53a <_vfiprintf_r+0x32>
 800b52e:	89ab      	ldrh	r3, [r5, #12]
 800b530:	059a      	lsls	r2, r3, #22
 800b532:	d402      	bmi.n	800b53a <_vfiprintf_r+0x32>
 800b534:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b536:	f7ff f85e 	bl	800a5f6 <__retarget_lock_acquire_recursive>
 800b53a:	89ab      	ldrh	r3, [r5, #12]
 800b53c:	071b      	lsls	r3, r3, #28
 800b53e:	d501      	bpl.n	800b544 <_vfiprintf_r+0x3c>
 800b540:	692b      	ldr	r3, [r5, #16]
 800b542:	b9eb      	cbnz	r3, 800b580 <_vfiprintf_r+0x78>
 800b544:	4629      	mov	r1, r5
 800b546:	4630      	mov	r0, r6
 800b548:	f7fd fc42 	bl	8008dd0 <__swsetup_r>
 800b54c:	b1c0      	cbz	r0, 800b580 <_vfiprintf_r+0x78>
 800b54e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b550:	07dc      	lsls	r4, r3, #31
 800b552:	d50e      	bpl.n	800b572 <_vfiprintf_r+0x6a>
 800b554:	f04f 30ff 	mov.w	r0, #4294967295
 800b558:	b01d      	add	sp, #116	; 0x74
 800b55a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b55e:	4b7b      	ldr	r3, [pc, #492]	; (800b74c <_vfiprintf_r+0x244>)
 800b560:	429d      	cmp	r5, r3
 800b562:	d101      	bne.n	800b568 <_vfiprintf_r+0x60>
 800b564:	68b5      	ldr	r5, [r6, #8]
 800b566:	e7df      	b.n	800b528 <_vfiprintf_r+0x20>
 800b568:	4b79      	ldr	r3, [pc, #484]	; (800b750 <_vfiprintf_r+0x248>)
 800b56a:	429d      	cmp	r5, r3
 800b56c:	bf08      	it	eq
 800b56e:	68f5      	ldreq	r5, [r6, #12]
 800b570:	e7da      	b.n	800b528 <_vfiprintf_r+0x20>
 800b572:	89ab      	ldrh	r3, [r5, #12]
 800b574:	0598      	lsls	r0, r3, #22
 800b576:	d4ed      	bmi.n	800b554 <_vfiprintf_r+0x4c>
 800b578:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b57a:	f7ff f83d 	bl	800a5f8 <__retarget_lock_release_recursive>
 800b57e:	e7e9      	b.n	800b554 <_vfiprintf_r+0x4c>
 800b580:	2300      	movs	r3, #0
 800b582:	9309      	str	r3, [sp, #36]	; 0x24
 800b584:	2320      	movs	r3, #32
 800b586:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b58a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b58e:	2330      	movs	r3, #48	; 0x30
 800b590:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b754 <_vfiprintf_r+0x24c>
 800b594:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b598:	f04f 0901 	mov.w	r9, #1
 800b59c:	4623      	mov	r3, r4
 800b59e:	469a      	mov	sl, r3
 800b5a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5a4:	b10a      	cbz	r2, 800b5aa <_vfiprintf_r+0xa2>
 800b5a6:	2a25      	cmp	r2, #37	; 0x25
 800b5a8:	d1f9      	bne.n	800b59e <_vfiprintf_r+0x96>
 800b5aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b5ae:	d00b      	beq.n	800b5c8 <_vfiprintf_r+0xc0>
 800b5b0:	465b      	mov	r3, fp
 800b5b2:	4622      	mov	r2, r4
 800b5b4:	4629      	mov	r1, r5
 800b5b6:	4630      	mov	r0, r6
 800b5b8:	f7ff ff93 	bl	800b4e2 <__sfputs_r>
 800b5bc:	3001      	adds	r0, #1
 800b5be:	f000 80aa 	beq.w	800b716 <_vfiprintf_r+0x20e>
 800b5c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b5c4:	445a      	add	r2, fp
 800b5c6:	9209      	str	r2, [sp, #36]	; 0x24
 800b5c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	f000 80a2 	beq.w	800b716 <_vfiprintf_r+0x20e>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5dc:	f10a 0a01 	add.w	sl, sl, #1
 800b5e0:	9304      	str	r3, [sp, #16]
 800b5e2:	9307      	str	r3, [sp, #28]
 800b5e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5e8:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ea:	4654      	mov	r4, sl
 800b5ec:	2205      	movs	r2, #5
 800b5ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5f2:	4858      	ldr	r0, [pc, #352]	; (800b754 <_vfiprintf_r+0x24c>)
 800b5f4:	f7f4 fe04 	bl	8000200 <memchr>
 800b5f8:	9a04      	ldr	r2, [sp, #16]
 800b5fa:	b9d8      	cbnz	r0, 800b634 <_vfiprintf_r+0x12c>
 800b5fc:	06d1      	lsls	r1, r2, #27
 800b5fe:	bf44      	itt	mi
 800b600:	2320      	movmi	r3, #32
 800b602:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b606:	0713      	lsls	r3, r2, #28
 800b608:	bf44      	itt	mi
 800b60a:	232b      	movmi	r3, #43	; 0x2b
 800b60c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b610:	f89a 3000 	ldrb.w	r3, [sl]
 800b614:	2b2a      	cmp	r3, #42	; 0x2a
 800b616:	d015      	beq.n	800b644 <_vfiprintf_r+0x13c>
 800b618:	9a07      	ldr	r2, [sp, #28]
 800b61a:	4654      	mov	r4, sl
 800b61c:	2000      	movs	r0, #0
 800b61e:	f04f 0c0a 	mov.w	ip, #10
 800b622:	4621      	mov	r1, r4
 800b624:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b628:	3b30      	subs	r3, #48	; 0x30
 800b62a:	2b09      	cmp	r3, #9
 800b62c:	d94e      	bls.n	800b6cc <_vfiprintf_r+0x1c4>
 800b62e:	b1b0      	cbz	r0, 800b65e <_vfiprintf_r+0x156>
 800b630:	9207      	str	r2, [sp, #28]
 800b632:	e014      	b.n	800b65e <_vfiprintf_r+0x156>
 800b634:	eba0 0308 	sub.w	r3, r0, r8
 800b638:	fa09 f303 	lsl.w	r3, r9, r3
 800b63c:	4313      	orrs	r3, r2
 800b63e:	9304      	str	r3, [sp, #16]
 800b640:	46a2      	mov	sl, r4
 800b642:	e7d2      	b.n	800b5ea <_vfiprintf_r+0xe2>
 800b644:	9b03      	ldr	r3, [sp, #12]
 800b646:	1d19      	adds	r1, r3, #4
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	9103      	str	r1, [sp, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bfbb      	ittet	lt
 800b650:	425b      	neglt	r3, r3
 800b652:	f042 0202 	orrlt.w	r2, r2, #2
 800b656:	9307      	strge	r3, [sp, #28]
 800b658:	9307      	strlt	r3, [sp, #28]
 800b65a:	bfb8      	it	lt
 800b65c:	9204      	strlt	r2, [sp, #16]
 800b65e:	7823      	ldrb	r3, [r4, #0]
 800b660:	2b2e      	cmp	r3, #46	; 0x2e
 800b662:	d10c      	bne.n	800b67e <_vfiprintf_r+0x176>
 800b664:	7863      	ldrb	r3, [r4, #1]
 800b666:	2b2a      	cmp	r3, #42	; 0x2a
 800b668:	d135      	bne.n	800b6d6 <_vfiprintf_r+0x1ce>
 800b66a:	9b03      	ldr	r3, [sp, #12]
 800b66c:	1d1a      	adds	r2, r3, #4
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	9203      	str	r2, [sp, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	bfb8      	it	lt
 800b676:	f04f 33ff 	movlt.w	r3, #4294967295
 800b67a:	3402      	adds	r4, #2
 800b67c:	9305      	str	r3, [sp, #20]
 800b67e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b764 <_vfiprintf_r+0x25c>
 800b682:	7821      	ldrb	r1, [r4, #0]
 800b684:	2203      	movs	r2, #3
 800b686:	4650      	mov	r0, sl
 800b688:	f7f4 fdba 	bl	8000200 <memchr>
 800b68c:	b140      	cbz	r0, 800b6a0 <_vfiprintf_r+0x198>
 800b68e:	2340      	movs	r3, #64	; 0x40
 800b690:	eba0 000a 	sub.w	r0, r0, sl
 800b694:	fa03 f000 	lsl.w	r0, r3, r0
 800b698:	9b04      	ldr	r3, [sp, #16]
 800b69a:	4303      	orrs	r3, r0
 800b69c:	3401      	adds	r4, #1
 800b69e:	9304      	str	r3, [sp, #16]
 800b6a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6a4:	482c      	ldr	r0, [pc, #176]	; (800b758 <_vfiprintf_r+0x250>)
 800b6a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b6aa:	2206      	movs	r2, #6
 800b6ac:	f7f4 fda8 	bl	8000200 <memchr>
 800b6b0:	2800      	cmp	r0, #0
 800b6b2:	d03f      	beq.n	800b734 <_vfiprintf_r+0x22c>
 800b6b4:	4b29      	ldr	r3, [pc, #164]	; (800b75c <_vfiprintf_r+0x254>)
 800b6b6:	bb1b      	cbnz	r3, 800b700 <_vfiprintf_r+0x1f8>
 800b6b8:	9b03      	ldr	r3, [sp, #12]
 800b6ba:	3307      	adds	r3, #7
 800b6bc:	f023 0307 	bic.w	r3, r3, #7
 800b6c0:	3308      	adds	r3, #8
 800b6c2:	9303      	str	r3, [sp, #12]
 800b6c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c6:	443b      	add	r3, r7
 800b6c8:	9309      	str	r3, [sp, #36]	; 0x24
 800b6ca:	e767      	b.n	800b59c <_vfiprintf_r+0x94>
 800b6cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6d0:	460c      	mov	r4, r1
 800b6d2:	2001      	movs	r0, #1
 800b6d4:	e7a5      	b.n	800b622 <_vfiprintf_r+0x11a>
 800b6d6:	2300      	movs	r3, #0
 800b6d8:	3401      	adds	r4, #1
 800b6da:	9305      	str	r3, [sp, #20]
 800b6dc:	4619      	mov	r1, r3
 800b6de:	f04f 0c0a 	mov.w	ip, #10
 800b6e2:	4620      	mov	r0, r4
 800b6e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6e8:	3a30      	subs	r2, #48	; 0x30
 800b6ea:	2a09      	cmp	r2, #9
 800b6ec:	d903      	bls.n	800b6f6 <_vfiprintf_r+0x1ee>
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d0c5      	beq.n	800b67e <_vfiprintf_r+0x176>
 800b6f2:	9105      	str	r1, [sp, #20]
 800b6f4:	e7c3      	b.n	800b67e <_vfiprintf_r+0x176>
 800b6f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6fa:	4604      	mov	r4, r0
 800b6fc:	2301      	movs	r3, #1
 800b6fe:	e7f0      	b.n	800b6e2 <_vfiprintf_r+0x1da>
 800b700:	ab03      	add	r3, sp, #12
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	462a      	mov	r2, r5
 800b706:	4b16      	ldr	r3, [pc, #88]	; (800b760 <_vfiprintf_r+0x258>)
 800b708:	a904      	add	r1, sp, #16
 800b70a:	4630      	mov	r0, r6
 800b70c:	f7fb fdb6 	bl	800727c <_printf_float>
 800b710:	4607      	mov	r7, r0
 800b712:	1c78      	adds	r0, r7, #1
 800b714:	d1d6      	bne.n	800b6c4 <_vfiprintf_r+0x1bc>
 800b716:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b718:	07d9      	lsls	r1, r3, #31
 800b71a:	d405      	bmi.n	800b728 <_vfiprintf_r+0x220>
 800b71c:	89ab      	ldrh	r3, [r5, #12]
 800b71e:	059a      	lsls	r2, r3, #22
 800b720:	d402      	bmi.n	800b728 <_vfiprintf_r+0x220>
 800b722:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b724:	f7fe ff68 	bl	800a5f8 <__retarget_lock_release_recursive>
 800b728:	89ab      	ldrh	r3, [r5, #12]
 800b72a:	065b      	lsls	r3, r3, #25
 800b72c:	f53f af12 	bmi.w	800b554 <_vfiprintf_r+0x4c>
 800b730:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b732:	e711      	b.n	800b558 <_vfiprintf_r+0x50>
 800b734:	ab03      	add	r3, sp, #12
 800b736:	9300      	str	r3, [sp, #0]
 800b738:	462a      	mov	r2, r5
 800b73a:	4b09      	ldr	r3, [pc, #36]	; (800b760 <_vfiprintf_r+0x258>)
 800b73c:	a904      	add	r1, sp, #16
 800b73e:	4630      	mov	r0, r6
 800b740:	f7fc f840 	bl	80077c4 <_printf_i>
 800b744:	e7e4      	b.n	800b710 <_vfiprintf_r+0x208>
 800b746:	bf00      	nop
 800b748:	0800bef8 	.word	0x0800bef8
 800b74c:	0800bf18 	.word	0x0800bf18
 800b750:	0800bed8 	.word	0x0800bed8
 800b754:	0800c114 	.word	0x0800c114
 800b758:	0800c11e 	.word	0x0800c11e
 800b75c:	0800727d 	.word	0x0800727d
 800b760:	0800b4e3 	.word	0x0800b4e3
 800b764:	0800c11a 	.word	0x0800c11a

0800b768 <_putc_r>:
 800b768:	b570      	push	{r4, r5, r6, lr}
 800b76a:	460d      	mov	r5, r1
 800b76c:	4614      	mov	r4, r2
 800b76e:	4606      	mov	r6, r0
 800b770:	b118      	cbz	r0, 800b77a <_putc_r+0x12>
 800b772:	6983      	ldr	r3, [r0, #24]
 800b774:	b90b      	cbnz	r3, 800b77a <_putc_r+0x12>
 800b776:	f7fe fb2d 	bl	8009dd4 <__sinit>
 800b77a:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <_putc_r+0x84>)
 800b77c:	429c      	cmp	r4, r3
 800b77e:	d124      	bne.n	800b7ca <_putc_r+0x62>
 800b780:	6874      	ldr	r4, [r6, #4]
 800b782:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b784:	07d8      	lsls	r0, r3, #31
 800b786:	d405      	bmi.n	800b794 <_putc_r+0x2c>
 800b788:	89a3      	ldrh	r3, [r4, #12]
 800b78a:	0599      	lsls	r1, r3, #22
 800b78c:	d402      	bmi.n	800b794 <_putc_r+0x2c>
 800b78e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b790:	f7fe ff31 	bl	800a5f6 <__retarget_lock_acquire_recursive>
 800b794:	68a3      	ldr	r3, [r4, #8]
 800b796:	3b01      	subs	r3, #1
 800b798:	2b00      	cmp	r3, #0
 800b79a:	60a3      	str	r3, [r4, #8]
 800b79c:	da05      	bge.n	800b7aa <_putc_r+0x42>
 800b79e:	69a2      	ldr	r2, [r4, #24]
 800b7a0:	4293      	cmp	r3, r2
 800b7a2:	db1c      	blt.n	800b7de <_putc_r+0x76>
 800b7a4:	b2eb      	uxtb	r3, r5
 800b7a6:	2b0a      	cmp	r3, #10
 800b7a8:	d019      	beq.n	800b7de <_putc_r+0x76>
 800b7aa:	6823      	ldr	r3, [r4, #0]
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	6022      	str	r2, [r4, #0]
 800b7b0:	701d      	strb	r5, [r3, #0]
 800b7b2:	b2ed      	uxtb	r5, r5
 800b7b4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7b6:	07da      	lsls	r2, r3, #31
 800b7b8:	d405      	bmi.n	800b7c6 <_putc_r+0x5e>
 800b7ba:	89a3      	ldrh	r3, [r4, #12]
 800b7bc:	059b      	lsls	r3, r3, #22
 800b7be:	d402      	bmi.n	800b7c6 <_putc_r+0x5e>
 800b7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7c2:	f7fe ff19 	bl	800a5f8 <__retarget_lock_release_recursive>
 800b7c6:	4628      	mov	r0, r5
 800b7c8:	bd70      	pop	{r4, r5, r6, pc}
 800b7ca:	4b09      	ldr	r3, [pc, #36]	; (800b7f0 <_putc_r+0x88>)
 800b7cc:	429c      	cmp	r4, r3
 800b7ce:	d101      	bne.n	800b7d4 <_putc_r+0x6c>
 800b7d0:	68b4      	ldr	r4, [r6, #8]
 800b7d2:	e7d6      	b.n	800b782 <_putc_r+0x1a>
 800b7d4:	4b07      	ldr	r3, [pc, #28]	; (800b7f4 <_putc_r+0x8c>)
 800b7d6:	429c      	cmp	r4, r3
 800b7d8:	bf08      	it	eq
 800b7da:	68f4      	ldreq	r4, [r6, #12]
 800b7dc:	e7d1      	b.n	800b782 <_putc_r+0x1a>
 800b7de:	4629      	mov	r1, r5
 800b7e0:	4622      	mov	r2, r4
 800b7e2:	4630      	mov	r0, r6
 800b7e4:	f7fd faa2 	bl	8008d2c <__swbuf_r>
 800b7e8:	4605      	mov	r5, r0
 800b7ea:	e7e3      	b.n	800b7b4 <_putc_r+0x4c>
 800b7ec:	0800bef8 	.word	0x0800bef8
 800b7f0:	0800bf18 	.word	0x0800bf18
 800b7f4:	0800bed8 	.word	0x0800bed8

0800b7f8 <nan>:
 800b7f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b800 <nan+0x8>
 800b7fc:	4770      	bx	lr
 800b7fe:	bf00      	nop
 800b800:	00000000 	.word	0x00000000
 800b804:	7ff80000 	.word	0x7ff80000

0800b808 <_sbrk_r>:
 800b808:	b538      	push	{r3, r4, r5, lr}
 800b80a:	4d06      	ldr	r5, [pc, #24]	; (800b824 <_sbrk_r+0x1c>)
 800b80c:	2300      	movs	r3, #0
 800b80e:	4604      	mov	r4, r0
 800b810:	4608      	mov	r0, r1
 800b812:	602b      	str	r3, [r5, #0]
 800b814:	f7f6 fb7a 	bl	8001f0c <_sbrk>
 800b818:	1c43      	adds	r3, r0, #1
 800b81a:	d102      	bne.n	800b822 <_sbrk_r+0x1a>
 800b81c:	682b      	ldr	r3, [r5, #0]
 800b81e:	b103      	cbz	r3, 800b822 <_sbrk_r+0x1a>
 800b820:	6023      	str	r3, [r4, #0]
 800b822:	bd38      	pop	{r3, r4, r5, pc}
 800b824:	20000510 	.word	0x20000510

0800b828 <__sread>:
 800b828:	b510      	push	{r4, lr}
 800b82a:	460c      	mov	r4, r1
 800b82c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b830:	f000 f92e 	bl	800ba90 <_read_r>
 800b834:	2800      	cmp	r0, #0
 800b836:	bfab      	itete	ge
 800b838:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b83a:	89a3      	ldrhlt	r3, [r4, #12]
 800b83c:	181b      	addge	r3, r3, r0
 800b83e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b842:	bfac      	ite	ge
 800b844:	6563      	strge	r3, [r4, #84]	; 0x54
 800b846:	81a3      	strhlt	r3, [r4, #12]
 800b848:	bd10      	pop	{r4, pc}

0800b84a <__swrite>:
 800b84a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84e:	461f      	mov	r7, r3
 800b850:	898b      	ldrh	r3, [r1, #12]
 800b852:	05db      	lsls	r3, r3, #23
 800b854:	4605      	mov	r5, r0
 800b856:	460c      	mov	r4, r1
 800b858:	4616      	mov	r6, r2
 800b85a:	d505      	bpl.n	800b868 <__swrite+0x1e>
 800b85c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b860:	2302      	movs	r3, #2
 800b862:	2200      	movs	r2, #0
 800b864:	f000 f8b6 	bl	800b9d4 <_lseek_r>
 800b868:	89a3      	ldrh	r3, [r4, #12]
 800b86a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b86e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b872:	81a3      	strh	r3, [r4, #12]
 800b874:	4632      	mov	r2, r6
 800b876:	463b      	mov	r3, r7
 800b878:	4628      	mov	r0, r5
 800b87a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b87e:	f000 b835 	b.w	800b8ec <_write_r>

0800b882 <__sseek>:
 800b882:	b510      	push	{r4, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b88a:	f000 f8a3 	bl	800b9d4 <_lseek_r>
 800b88e:	1c43      	adds	r3, r0, #1
 800b890:	89a3      	ldrh	r3, [r4, #12]
 800b892:	bf15      	itete	ne
 800b894:	6560      	strne	r0, [r4, #84]	; 0x54
 800b896:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b89a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b89e:	81a3      	strheq	r3, [r4, #12]
 800b8a0:	bf18      	it	ne
 800b8a2:	81a3      	strhne	r3, [r4, #12]
 800b8a4:	bd10      	pop	{r4, pc}

0800b8a6 <__sclose>:
 800b8a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b8aa:	f000 b84f 	b.w	800b94c <_close_r>

0800b8ae <strncmp>:
 800b8ae:	b510      	push	{r4, lr}
 800b8b0:	b16a      	cbz	r2, 800b8ce <strncmp+0x20>
 800b8b2:	3901      	subs	r1, #1
 800b8b4:	1884      	adds	r4, r0, r2
 800b8b6:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b8ba:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b8be:	4293      	cmp	r3, r2
 800b8c0:	d103      	bne.n	800b8ca <strncmp+0x1c>
 800b8c2:	42a0      	cmp	r0, r4
 800b8c4:	d001      	beq.n	800b8ca <strncmp+0x1c>
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d1f5      	bne.n	800b8b6 <strncmp+0x8>
 800b8ca:	1a98      	subs	r0, r3, r2
 800b8cc:	bd10      	pop	{r4, pc}
 800b8ce:	4610      	mov	r0, r2
 800b8d0:	e7fc      	b.n	800b8cc <strncmp+0x1e>

0800b8d2 <__ascii_wctomb>:
 800b8d2:	b149      	cbz	r1, 800b8e8 <__ascii_wctomb+0x16>
 800b8d4:	2aff      	cmp	r2, #255	; 0xff
 800b8d6:	bf85      	ittet	hi
 800b8d8:	238a      	movhi	r3, #138	; 0x8a
 800b8da:	6003      	strhi	r3, [r0, #0]
 800b8dc:	700a      	strbls	r2, [r1, #0]
 800b8de:	f04f 30ff 	movhi.w	r0, #4294967295
 800b8e2:	bf98      	it	ls
 800b8e4:	2001      	movls	r0, #1
 800b8e6:	4770      	bx	lr
 800b8e8:	4608      	mov	r0, r1
 800b8ea:	4770      	bx	lr

0800b8ec <_write_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_write_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f5 fee0 	bl	80016c0 <_write>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_write_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_write_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20000510 	.word	0x20000510

0800b910 <__assert_func>:
 800b910:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b912:	4614      	mov	r4, r2
 800b914:	461a      	mov	r2, r3
 800b916:	4b09      	ldr	r3, [pc, #36]	; (800b93c <__assert_func+0x2c>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	4605      	mov	r5, r0
 800b91c:	68d8      	ldr	r0, [r3, #12]
 800b91e:	b14c      	cbz	r4, 800b934 <__assert_func+0x24>
 800b920:	4b07      	ldr	r3, [pc, #28]	; (800b940 <__assert_func+0x30>)
 800b922:	9100      	str	r1, [sp, #0]
 800b924:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b928:	4906      	ldr	r1, [pc, #24]	; (800b944 <__assert_func+0x34>)
 800b92a:	462b      	mov	r3, r5
 800b92c:	f000 f81e 	bl	800b96c <fiprintf>
 800b930:	f000 f8c0 	bl	800bab4 <abort>
 800b934:	4b04      	ldr	r3, [pc, #16]	; (800b948 <__assert_func+0x38>)
 800b936:	461c      	mov	r4, r3
 800b938:	e7f3      	b.n	800b922 <__assert_func+0x12>
 800b93a:	bf00      	nop
 800b93c:	2000000c 	.word	0x2000000c
 800b940:	0800c125 	.word	0x0800c125
 800b944:	0800c132 	.word	0x0800c132
 800b948:	0800c160 	.word	0x0800c160

0800b94c <_close_r>:
 800b94c:	b538      	push	{r3, r4, r5, lr}
 800b94e:	4d06      	ldr	r5, [pc, #24]	; (800b968 <_close_r+0x1c>)
 800b950:	2300      	movs	r3, #0
 800b952:	4604      	mov	r4, r0
 800b954:	4608      	mov	r0, r1
 800b956:	602b      	str	r3, [r5, #0]
 800b958:	f7f6 faa3 	bl	8001ea2 <_close>
 800b95c:	1c43      	adds	r3, r0, #1
 800b95e:	d102      	bne.n	800b966 <_close_r+0x1a>
 800b960:	682b      	ldr	r3, [r5, #0]
 800b962:	b103      	cbz	r3, 800b966 <_close_r+0x1a>
 800b964:	6023      	str	r3, [r4, #0]
 800b966:	bd38      	pop	{r3, r4, r5, pc}
 800b968:	20000510 	.word	0x20000510

0800b96c <fiprintf>:
 800b96c:	b40e      	push	{r1, r2, r3}
 800b96e:	b503      	push	{r0, r1, lr}
 800b970:	4601      	mov	r1, r0
 800b972:	ab03      	add	r3, sp, #12
 800b974:	4805      	ldr	r0, [pc, #20]	; (800b98c <fiprintf+0x20>)
 800b976:	f853 2b04 	ldr.w	r2, [r3], #4
 800b97a:	6800      	ldr	r0, [r0, #0]
 800b97c:	9301      	str	r3, [sp, #4]
 800b97e:	f7ff fdc3 	bl	800b508 <_vfiprintf_r>
 800b982:	b002      	add	sp, #8
 800b984:	f85d eb04 	ldr.w	lr, [sp], #4
 800b988:	b003      	add	sp, #12
 800b98a:	4770      	bx	lr
 800b98c:	2000000c 	.word	0x2000000c

0800b990 <_fstat_r>:
 800b990:	b538      	push	{r3, r4, r5, lr}
 800b992:	4d07      	ldr	r5, [pc, #28]	; (800b9b0 <_fstat_r+0x20>)
 800b994:	2300      	movs	r3, #0
 800b996:	4604      	mov	r4, r0
 800b998:	4608      	mov	r0, r1
 800b99a:	4611      	mov	r1, r2
 800b99c:	602b      	str	r3, [r5, #0]
 800b99e:	f7f6 fa8c 	bl	8001eba <_fstat>
 800b9a2:	1c43      	adds	r3, r0, #1
 800b9a4:	d102      	bne.n	800b9ac <_fstat_r+0x1c>
 800b9a6:	682b      	ldr	r3, [r5, #0]
 800b9a8:	b103      	cbz	r3, 800b9ac <_fstat_r+0x1c>
 800b9aa:	6023      	str	r3, [r4, #0]
 800b9ac:	bd38      	pop	{r3, r4, r5, pc}
 800b9ae:	bf00      	nop
 800b9b0:	20000510 	.word	0x20000510

0800b9b4 <_isatty_r>:
 800b9b4:	b538      	push	{r3, r4, r5, lr}
 800b9b6:	4d06      	ldr	r5, [pc, #24]	; (800b9d0 <_isatty_r+0x1c>)
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4604      	mov	r4, r0
 800b9bc:	4608      	mov	r0, r1
 800b9be:	602b      	str	r3, [r5, #0]
 800b9c0:	f7f6 fa8b 	bl	8001eda <_isatty>
 800b9c4:	1c43      	adds	r3, r0, #1
 800b9c6:	d102      	bne.n	800b9ce <_isatty_r+0x1a>
 800b9c8:	682b      	ldr	r3, [r5, #0]
 800b9ca:	b103      	cbz	r3, 800b9ce <_isatty_r+0x1a>
 800b9cc:	6023      	str	r3, [r4, #0]
 800b9ce:	bd38      	pop	{r3, r4, r5, pc}
 800b9d0:	20000510 	.word	0x20000510

0800b9d4 <_lseek_r>:
 800b9d4:	b538      	push	{r3, r4, r5, lr}
 800b9d6:	4d07      	ldr	r5, [pc, #28]	; (800b9f4 <_lseek_r+0x20>)
 800b9d8:	4604      	mov	r4, r0
 800b9da:	4608      	mov	r0, r1
 800b9dc:	4611      	mov	r1, r2
 800b9de:	2200      	movs	r2, #0
 800b9e0:	602a      	str	r2, [r5, #0]
 800b9e2:	461a      	mov	r2, r3
 800b9e4:	f7f6 fa84 	bl	8001ef0 <_lseek>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <_lseek_r+0x1e>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	b103      	cbz	r3, 800b9f2 <_lseek_r+0x1e>
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	bd38      	pop	{r3, r4, r5, pc}
 800b9f4:	20000510 	.word	0x20000510

0800b9f8 <memmove>:
 800b9f8:	4288      	cmp	r0, r1
 800b9fa:	b510      	push	{r4, lr}
 800b9fc:	eb01 0402 	add.w	r4, r1, r2
 800ba00:	d902      	bls.n	800ba08 <memmove+0x10>
 800ba02:	4284      	cmp	r4, r0
 800ba04:	4623      	mov	r3, r4
 800ba06:	d807      	bhi.n	800ba18 <memmove+0x20>
 800ba08:	1e43      	subs	r3, r0, #1
 800ba0a:	42a1      	cmp	r1, r4
 800ba0c:	d008      	beq.n	800ba20 <memmove+0x28>
 800ba0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba12:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ba16:	e7f8      	b.n	800ba0a <memmove+0x12>
 800ba18:	4402      	add	r2, r0
 800ba1a:	4601      	mov	r1, r0
 800ba1c:	428a      	cmp	r2, r1
 800ba1e:	d100      	bne.n	800ba22 <memmove+0x2a>
 800ba20:	bd10      	pop	{r4, pc}
 800ba22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ba26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ba2a:	e7f7      	b.n	800ba1c <memmove+0x24>

0800ba2c <__malloc_lock>:
 800ba2c:	4801      	ldr	r0, [pc, #4]	; (800ba34 <__malloc_lock+0x8>)
 800ba2e:	f7fe bde2 	b.w	800a5f6 <__retarget_lock_acquire_recursive>
 800ba32:	bf00      	nop
 800ba34:	20000508 	.word	0x20000508

0800ba38 <__malloc_unlock>:
 800ba38:	4801      	ldr	r0, [pc, #4]	; (800ba40 <__malloc_unlock+0x8>)
 800ba3a:	f7fe bddd 	b.w	800a5f8 <__retarget_lock_release_recursive>
 800ba3e:	bf00      	nop
 800ba40:	20000508 	.word	0x20000508

0800ba44 <_realloc_r>:
 800ba44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ba46:	4607      	mov	r7, r0
 800ba48:	4614      	mov	r4, r2
 800ba4a:	460e      	mov	r6, r1
 800ba4c:	b921      	cbnz	r1, 800ba58 <_realloc_r+0x14>
 800ba4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ba52:	4611      	mov	r1, r2
 800ba54:	f7ff bb78 	b.w	800b148 <_malloc_r>
 800ba58:	b922      	cbnz	r2, 800ba64 <_realloc_r+0x20>
 800ba5a:	f7ff fb25 	bl	800b0a8 <_free_r>
 800ba5e:	4625      	mov	r5, r4
 800ba60:	4628      	mov	r0, r5
 800ba62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ba64:	f000 f82d 	bl	800bac2 <_malloc_usable_size_r>
 800ba68:	42a0      	cmp	r0, r4
 800ba6a:	d20f      	bcs.n	800ba8c <_realloc_r+0x48>
 800ba6c:	4621      	mov	r1, r4
 800ba6e:	4638      	mov	r0, r7
 800ba70:	f7ff fb6a 	bl	800b148 <_malloc_r>
 800ba74:	4605      	mov	r5, r0
 800ba76:	2800      	cmp	r0, #0
 800ba78:	d0f2      	beq.n	800ba60 <_realloc_r+0x1c>
 800ba7a:	4631      	mov	r1, r6
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	f7fe fe3b 	bl	800a6f8 <memcpy>
 800ba82:	4631      	mov	r1, r6
 800ba84:	4638      	mov	r0, r7
 800ba86:	f7ff fb0f 	bl	800b0a8 <_free_r>
 800ba8a:	e7e9      	b.n	800ba60 <_realloc_r+0x1c>
 800ba8c:	4635      	mov	r5, r6
 800ba8e:	e7e7      	b.n	800ba60 <_realloc_r+0x1c>

0800ba90 <_read_r>:
 800ba90:	b538      	push	{r3, r4, r5, lr}
 800ba92:	4d07      	ldr	r5, [pc, #28]	; (800bab0 <_read_r+0x20>)
 800ba94:	4604      	mov	r4, r0
 800ba96:	4608      	mov	r0, r1
 800ba98:	4611      	mov	r1, r2
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	602a      	str	r2, [r5, #0]
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f7f6 f9e2 	bl	8001e68 <_read>
 800baa4:	1c43      	adds	r3, r0, #1
 800baa6:	d102      	bne.n	800baae <_read_r+0x1e>
 800baa8:	682b      	ldr	r3, [r5, #0]
 800baaa:	b103      	cbz	r3, 800baae <_read_r+0x1e>
 800baac:	6023      	str	r3, [r4, #0]
 800baae:	bd38      	pop	{r3, r4, r5, pc}
 800bab0:	20000510 	.word	0x20000510

0800bab4 <abort>:
 800bab4:	b508      	push	{r3, lr}
 800bab6:	2006      	movs	r0, #6
 800bab8:	f000 f834 	bl	800bb24 <raise>
 800babc:	2001      	movs	r0, #1
 800babe:	f7f6 f9c9 	bl	8001e54 <_exit>

0800bac2 <_malloc_usable_size_r>:
 800bac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bac6:	1f18      	subs	r0, r3, #4
 800bac8:	2b00      	cmp	r3, #0
 800baca:	bfbc      	itt	lt
 800bacc:	580b      	ldrlt	r3, [r1, r0]
 800bace:	18c0      	addlt	r0, r0, r3
 800bad0:	4770      	bx	lr

0800bad2 <_raise_r>:
 800bad2:	291f      	cmp	r1, #31
 800bad4:	b538      	push	{r3, r4, r5, lr}
 800bad6:	4604      	mov	r4, r0
 800bad8:	460d      	mov	r5, r1
 800bada:	d904      	bls.n	800bae6 <_raise_r+0x14>
 800badc:	2316      	movs	r3, #22
 800bade:	6003      	str	r3, [r0, #0]
 800bae0:	f04f 30ff 	mov.w	r0, #4294967295
 800bae4:	bd38      	pop	{r3, r4, r5, pc}
 800bae6:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bae8:	b112      	cbz	r2, 800baf0 <_raise_r+0x1e>
 800baea:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800baee:	b94b      	cbnz	r3, 800bb04 <_raise_r+0x32>
 800baf0:	4620      	mov	r0, r4
 800baf2:	f000 f831 	bl	800bb58 <_getpid_r>
 800baf6:	462a      	mov	r2, r5
 800baf8:	4601      	mov	r1, r0
 800bafa:	4620      	mov	r0, r4
 800bafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bb00:	f000 b818 	b.w	800bb34 <_kill_r>
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d00a      	beq.n	800bb1e <_raise_r+0x4c>
 800bb08:	1c59      	adds	r1, r3, #1
 800bb0a:	d103      	bne.n	800bb14 <_raise_r+0x42>
 800bb0c:	2316      	movs	r3, #22
 800bb0e:	6003      	str	r3, [r0, #0]
 800bb10:	2001      	movs	r0, #1
 800bb12:	e7e7      	b.n	800bae4 <_raise_r+0x12>
 800bb14:	2400      	movs	r4, #0
 800bb16:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	4798      	blx	r3
 800bb1e:	2000      	movs	r0, #0
 800bb20:	e7e0      	b.n	800bae4 <_raise_r+0x12>
	...

0800bb24 <raise>:
 800bb24:	4b02      	ldr	r3, [pc, #8]	; (800bb30 <raise+0xc>)
 800bb26:	4601      	mov	r1, r0
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f7ff bfd2 	b.w	800bad2 <_raise_r>
 800bb2e:	bf00      	nop
 800bb30:	2000000c 	.word	0x2000000c

0800bb34 <_kill_r>:
 800bb34:	b538      	push	{r3, r4, r5, lr}
 800bb36:	4d07      	ldr	r5, [pc, #28]	; (800bb54 <_kill_r+0x20>)
 800bb38:	2300      	movs	r3, #0
 800bb3a:	4604      	mov	r4, r0
 800bb3c:	4608      	mov	r0, r1
 800bb3e:	4611      	mov	r1, r2
 800bb40:	602b      	str	r3, [r5, #0]
 800bb42:	f7f6 f977 	bl	8001e34 <_kill>
 800bb46:	1c43      	adds	r3, r0, #1
 800bb48:	d102      	bne.n	800bb50 <_kill_r+0x1c>
 800bb4a:	682b      	ldr	r3, [r5, #0]
 800bb4c:	b103      	cbz	r3, 800bb50 <_kill_r+0x1c>
 800bb4e:	6023      	str	r3, [r4, #0]
 800bb50:	bd38      	pop	{r3, r4, r5, pc}
 800bb52:	bf00      	nop
 800bb54:	20000510 	.word	0x20000510

0800bb58 <_getpid_r>:
 800bb58:	f7f6 b964 	b.w	8001e24 <_getpid>

0800bb5c <_init>:
 800bb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5e:	bf00      	nop
 800bb60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb62:	bc08      	pop	{r3}
 800bb64:	469e      	mov	lr, r3
 800bb66:	4770      	bx	lr

0800bb68 <_fini>:
 800bb68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb6a:	bf00      	nop
 800bb6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6e:	bc08      	pop	{r3}
 800bb70:	469e      	mov	lr, r3
 800bb72:	4770      	bx	lr
