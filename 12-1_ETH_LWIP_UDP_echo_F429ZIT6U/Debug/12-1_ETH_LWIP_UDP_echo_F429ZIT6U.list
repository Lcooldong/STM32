
12-1_ETH_LWIP_UDP_echo_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ee0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c44  08015090  08015090  00025090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017cd4  08017cd4  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08017cd4  08017cd4  00027cd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017cdc  08017cdc  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017cdc  08017cdc  00027cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017ce0  08017ce0  00027ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08017ce4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          000071b8  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20007230  20007230  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004663b  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008892  00000000  00000000  000766e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024c8  00000000  00000000  0007ef78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022f0  00000000  00000000  00081440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036f5b  00000000  00000000  00083730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003dee4  00000000  00000000  000ba68b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b73c  00000000  00000000  000f856f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00203cab  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f24  00000000  00000000  00203d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08015078 	.word	0x08015078

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08015078 	.word	0x08015078

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ea:	f001 fc6d 	bl	8001ec8 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f4:	f000 fbee 	bl	8000dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000600:	2304      	movs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <MX_ADC1_Init+0xec>)
 800060a:	f001 fca1 	bl	8001f50 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000614:	f000 fbde 	bl	8000dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_ADC1_Init+0xec>)
 8000626:	f001 fc93 	bl	8001f50 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000630:	f000 fbd0 	bl	8000dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000634:	230d      	movs	r3, #13
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xec>)
 8000642:	f001 fc85 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800064c:	f000 fbc2 	bl	8000dd4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000650:	2309      	movs	r3, #9
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xec>)
 800065e:	f001 fc77 	bl	8001f50 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000668:	f000 fbb4 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000224 	.word	0x20000224
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230d      	movs	r3, #13
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f003 fd05 	bl	8004118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f003 fcf9 	bl	8004118 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f001 ffa0 	bl	80026b0 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f000 fb2d 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	2000026c 	.word	0x2000026c
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_DAC_Init+0x50>)
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007be:	f001 ff06 	bl	80025ce <HAL_DAC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c8:	f000 fb04 	bl	8000dd4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007dc:	f001 ff19 	bl	8002612 <HAL_DAC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e6:	f000 faf5 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200002cc 	.word	0x200002cc
 80007f8:	40007400 	.word	0x40007400

080007fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_DAC_MspInit+0x7c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d127      	bne.n	800086e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_DAC_MspInit+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000856:	2310      	movs	r3, #16
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_DAC_MspInit+0x84>)
 800086a:	f003 fc55 	bl	8004118 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40007400 	.word	0x40007400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_DMA_Init+0x5c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_DMA_Init+0x5c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_DMA_Init+0x5c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2038      	movs	r0, #56	; 0x38
 80008ac:	f001 fe59 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b0:	2038      	movs	r0, #56	; 0x38
 80008b2:	f001 fe72 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	203b      	movs	r0, #59	; 0x3b
 80008bc:	f001 fe51 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c0:	203b      	movs	r0, #59	; 0x3b
 80008c2:	f001 fe6a 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2045      	movs	r0, #69	; 0x45
 80008cc:	f001 fe49 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008d0:	2045      	movs	r0, #69	; 0x45
 80008d2:	f001 fe62 	bl	800259a <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x158>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <MX_GPIO_Init+0x158>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a47      	ldr	r2, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x158>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a32      	ldr	r2, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_GPIO_Init+0x158>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x158>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <MX_GPIO_Init+0x15c>)
 80009a8:	f003 fd7a 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2181      	movs	r1, #129	; 0x81
 80009b0:	4824      	ldr	r0, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x160>)
 80009b2:	f003 fd75 	bl	80044a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x15c>)
 80009ce:	f003 fba3 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80009d2:	2381      	movs	r3, #129	; 0x81
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x160>)
 80009ea:	f003 fb95 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009fa:	2302      	movs	r3, #2
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x164>)
 8000a06:	f003 fb87 	bl	8004118 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x164>)
 8000a1e:	f003 fb7b 	bl	8004118 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f001 fd9b 	bl	8002562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fdb4 	bl	800259a <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_I2C1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <MX_I2C1_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a8a:	f003 fd47 	bl	800451c <HAL_I2C_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 f99e 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a9c:	f003 fe82 	bl	80047a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aa6:	f000 f995 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000aae:	f003 feb5 	bl	800481c <HAL_I2CEx_ConfigDigitalFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 f98c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	00061a80 	.word	0x00061a80

08000acc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_I2C2_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_I2C2_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b0a:	f003 fd07 	bl	800451c <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f95e 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b1c:	f003 fe42 	bl	80047a4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b26:	f000 f955 	bl	8000dd4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b2e:	f003 fe75 	bl	800481c <HAL_I2CEx_ConfigDigitalFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b38:	f000 f94c 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000334 	.word	0x20000334
 8000b44:	40005800 	.word	0x40005800
 8000b48:	000186a0 	.word	0x000186a0

08000b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_I2C_MspInit+0xe8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12d      	bne.n	8000bca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4825      	ldr	r0, [pc, #148]	; (8000c3c <HAL_I2C_MspInit+0xf0>)
 8000ba8:	f003 fab6 	bl	8004118 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bc8:	e030      	b.n	8000c2c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_I2C_MspInit+0xf4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d12b      	bne.n	8000c2c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <HAL_I2C_MspInit+0xf8>)
 8000c0c:	f003 fa84 	bl	8004118 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40005800 	.word	0x40005800
 8000c44:	40021400 	.word	0x40021400

08000c48 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char* p, int len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b084      	sub	sp, #16
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t*)p, len, 10) == HAL_OK) return len;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	230a      	movs	r3, #10
 8000c5a:	68b9      	ldr	r1, [r7, #8]
 8000c5c:	4806      	ldr	r0, [pc, #24]	; (8000c78 <_write+0x30>)
 8000c5e:	f006 fdcc 	bl	80077fa <HAL_UART_Transmit>
 8000c62:	4603      	mov	r3, r0
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <_write+0x24>
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	e000      	b.n	8000c6e <_write+0x26>
	else return 0;
 8000c6c:	2300      	movs	r3, #0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3710      	adds	r7, #16
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200006d8 	.word	0x200006d8

08000c7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c80:	f001 f88c 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c84:	f000 f836 	bl	8000cf4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c88:	f7ff fe2c 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c8c:	f000 ffe2 	bl	8001c54 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000c90:	f7ff fedc 	bl	8000a4c <MX_I2C1_Init>
  MX_TIM7_Init();
 8000c94:	f000 fd94 	bl	80017c0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000c98:	f000 fc06 	bl	80014a8 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c9c:	f000 fc7a 	bl	8001594 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000ca0:	f000 fdc4 	bl	800182c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000ca4:	f000 fb8a 	bl	80013bc <MX_TIM2_Init>
  MX_DMA_Init();
 8000ca8:	f7ff fdec 	bl	8000884 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cac:	f7ff fc6c 	bl	8000588 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000cb0:	f000 fd04 	bl	80016bc <MX_TIM5_Init>
  MX_DAC_Init();
 8000cb4:	f7ff fd78 	bl	80007a8 <MX_DAC_Init>
  MX_I2C2_Init();
 8000cb8:	f7ff ff08 	bl	8000acc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000cbc:	f000 f9a0 	bl	8001000 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000cc0:	f000 f88e 	bl	8000de0 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000cc4:	f008 fa28 	bl	8009118 <MX_FATFS_Init>
  MX_LWIP_Init();
 8000cc8:	f008 fc80 	bl	80095cc <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* tcp echo server Init */
  udp_echoserver_init();
 8000ccc:	f000 ff6e 	bl	8001bac <udp_echoserver_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   /* Read a received packet from the Ethernet buffers and send it
	   to the lwIP for handling */
	ethernetif_input(&gnetif);
 8000cd0:	4806      	ldr	r0, [pc, #24]	; (8000cec <main+0x70>)
 8000cd2:	f009 f853 	bl	8009d7c <ethernetif_input>

	/* Handle timeouts */
	sys_check_timeouts();
 8000cd6:	f010 f939 	bl	8010f4c <sys_check_timeouts>

	if(udp_flag)
 8000cda:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <main+0x74>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d0f6      	beq.n	8000cd0 <main+0x54>
	{
		udp_flag = 0;
 8000ce2:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <main+0x74>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
	ethernetif_input(&gnetif);
 8000ce8:	e7f2      	b.n	8000cd0 <main+0x54>
 8000cea:	bf00      	nop
 8000cec:	20000b90 	.word	0x20000b90
 8000cf0:	200006d4 	.word	0x200006d4

08000cf4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b094      	sub	sp, #80	; 0x50
 8000cf8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	2230      	movs	r2, #48	; 0x30
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f013 f996 	bl	8014034 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d08:	f107 030c 	add.w	r3, r7, #12
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]
 8000d12:	609a      	str	r2, [r3, #8]
 8000d14:	60da      	str	r2, [r3, #12]
 8000d16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d18:	2300      	movs	r3, #0
 8000d1a:	60bb      	str	r3, [r7, #8]
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d20:	4a2a      	ldr	r2, [pc, #168]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d26:	6413      	str	r3, [r2, #64]	; 0x40
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <SystemClock_Config+0xd8>)
 8000d2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d34:	2300      	movs	r3, #0
 8000d36:	607b      	str	r3, [r7, #4]
 8000d38:	4b25      	ldr	r3, [pc, #148]	; (8000dd0 <SystemClock_Config+0xdc>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a24      	ldr	r2, [pc, #144]	; (8000dd0 <SystemClock_Config+0xdc>)
 8000d3e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d42:	6013      	str	r3, [r2, #0]
 8000d44:	4b22      	ldr	r3, [pc, #136]	; (8000dd0 <SystemClock_Config+0xdc>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d4c:	607b      	str	r3, [r7, #4]
 8000d4e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d50:	2301      	movs	r3, #1
 8000d52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d54:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5a:	2302      	movs	r3, #2
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d5e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d64:	2304      	movs	r3, #4
 8000d66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d68:	23b4      	movs	r3, #180	; 0xb4
 8000d6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d70:	2308      	movs	r3, #8
 8000d72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d74:	f107 0320 	add.w	r3, r7, #32
 8000d78:	4618      	mov	r0, r3
 8000d7a:	f003 fddf 	bl	800493c <HAL_RCC_OscConfig>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d84:	f000 f826 	bl	8000dd4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d88:	f003 fd88 	bl	800489c <HAL_PWREx_EnableOverDrive>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d92:	f000 f81f 	bl	8000dd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d96:	230f      	movs	r3, #15
 8000d98:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000da2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000da6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000dae:	f107 030c 	add.w	r3, r7, #12
 8000db2:	2105      	movs	r1, #5
 8000db4:	4618      	mov	r0, r3
 8000db6:	f004 f839 	bl	8004e2c <HAL_RCC_ClockConfig>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000dc0:	f000 f808 	bl	8000dd4 <Error_Handler>
  }
}
 8000dc4:	bf00      	nop
 8000dc6:	3750      	adds	r7, #80	; 0x50
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40023800 	.word	0x40023800
 8000dd0:	40007000 	.word	0x40007000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <Error_Handler+0x8>
	...

08000de0 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000de4:	4b0c      	ldr	r3, [pc, #48]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000de6:	4a0d      	ldr	r2, [pc, #52]	; (8000e1c <MX_SDIO_SD_Init+0x3c>)
 8000de8:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000dea:	4b0b      	ldr	r3, [pc, #44]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000df0:	4b09      	ldr	r3, [pc, #36]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000df6:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000e02:	4b05      	ldr	r3, [pc, #20]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000e08:	4b03      	ldr	r3, [pc, #12]	; (8000e18 <MX_SDIO_SD_Init+0x38>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000e0e:	bf00      	nop
 8000e10:	46bd      	mov	sp, r7
 8000e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e16:	4770      	bx	lr
 8000e18:	20000448 	.word	0x20000448
 8000e1c:	40012c00 	.word	0x40012c00

08000e20 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a68      	ldr	r2, [pc, #416]	; (8000fe0 <HAL_SD_MspInit+0x1c0>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	f040 80c9 	bne.w	8000fd6 <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000e44:	2300      	movs	r3, #0
 8000e46:	613b      	str	r3, [r7, #16]
 8000e48:	4b66      	ldr	r3, [pc, #408]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4c:	4a65      	ldr	r2, [pc, #404]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e4e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e52:	6453      	str	r3, [r2, #68]	; 0x44
 8000e54:	4b63      	ldr	r3, [pc, #396]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e5c:	613b      	str	r3, [r7, #16]
 8000e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
 8000e64:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e68:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e6a:	f043 0304 	orr.w	r3, r3, #4
 8000e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000e70:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e74:	f003 0304 	and.w	r3, r3, #4
 8000e78:	60fb      	str	r3, [r7, #12]
 8000e7a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60bb      	str	r3, [r7, #8]
 8000e80:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a57      	ldr	r2, [pc, #348]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e86:	f043 0308 	orr.w	r3, r3, #8
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <HAL_SD_MspInit+0x1c4>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0308 	and.w	r3, r3, #8
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e98:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e9c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea6:	2303      	movs	r3, #3
 8000ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eaa:	230c      	movs	r3, #12
 8000eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000eae:	f107 0314 	add.w	r3, r7, #20
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	484c      	ldr	r0, [pc, #304]	; (8000fe8 <HAL_SD_MspInit+0x1c8>)
 8000eb6:	f003 f92f 	bl	8004118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000eba:	2304      	movs	r3, #4
 8000ebc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ec6:	2303      	movs	r3, #3
 8000ec8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000eca:	230c      	movs	r3, #12
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ece:	f107 0314 	add.w	r3, r7, #20
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4845      	ldr	r0, [pc, #276]	; (8000fec <HAL_SD_MspInit+0x1cc>)
 8000ed6:	f003 f91f 	bl	8004118 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000eda:	4b45      	ldr	r3, [pc, #276]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000edc:	4a45      	ldr	r2, [pc, #276]	; (8000ff4 <HAL_SD_MspInit+0x1d4>)
 8000ede:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000ee0:	4b43      	ldr	r3, [pc, #268]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000ee2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ee6:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee8:	4b41      	ldr	r3, [pc, #260]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000eea:	2240      	movs	r2, #64	; 0x40
 8000eec:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eee:	4b40      	ldr	r3, [pc, #256]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef4:	4b3e      	ldr	r3, [pc, #248]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000ef6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000efa:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000efc:	4b3c      	ldr	r3, [pc, #240]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000efe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f02:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f04:	4b3a      	ldr	r3, [pc, #232]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f0a:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000f0c:	4b38      	ldr	r3, [pc, #224]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f0e:	2220      	movs	r2, #32
 8000f10:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f12:	4b37      	ldr	r3, [pc, #220]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f18:	4b35      	ldr	r3, [pc, #212]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f1a:	2204      	movs	r2, #4
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f1e:	4b34      	ldr	r3, [pc, #208]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f20:	2203      	movs	r2, #3
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000f24:	4b32      	ldr	r3, [pc, #200]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f26:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f2c:	4b30      	ldr	r3, [pc, #192]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f2e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f32:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000f34:	482e      	ldr	r0, [pc, #184]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f36:	f001 fbbb 	bl	80026b0 <HAL_DMA_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000f40:	f7ff ff48 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	4a2a      	ldr	r2, [pc, #168]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f48:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f4a:	4a29      	ldr	r2, [pc, #164]	; (8000ff0 <HAL_SD_MspInit+0x1d0>)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000f50:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f52:	4a2a      	ldr	r2, [pc, #168]	; (8000ffc <HAL_SD_MspInit+0x1dc>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000f56:	4b28      	ldr	r3, [pc, #160]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f58:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f5c:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f5e:	4b26      	ldr	r3, [pc, #152]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f6a:	4b23      	ldr	r3, [pc, #140]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f6c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f70:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f72:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f74:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f78:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f7c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f80:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000f82:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f84:	2220      	movs	r2, #32
 8000f86:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f8e:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f90:	2204      	movs	r2, #4
 8000f92:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f94:	4b18      	ldr	r3, [pc, #96]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f96:	2203      	movs	r2, #3
 8000f98:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000f9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000fa0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000fa4:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000fa8:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000faa:	4813      	ldr	r0, [pc, #76]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000fac:	f001 fb80 	bl	80026b0 <HAL_DMA_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000fb6:	f7ff ff0d 	bl	8000dd4 <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4a0e      	ldr	r2, [pc, #56]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000fbe:	641a      	str	r2, [r3, #64]	; 0x40
 8000fc0:	4a0d      	ldr	r2, [pc, #52]	; (8000ff8 <HAL_SD_MspInit+0x1d8>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2100      	movs	r1, #0
 8000fca:	2031      	movs	r0, #49	; 0x31
 8000fcc:	f001 fac9 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000fd0:	2031      	movs	r0, #49	; 0x31
 8000fd2:	f001 fae2 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000fd6:	bf00      	nop
 8000fd8:	3728      	adds	r7, #40	; 0x28
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40012c00 	.word	0x40012c00
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40020800 	.word	0x40020800
 8000fec:	40020c00 	.word	0x40020c00
 8000ff0:	200003e8 	.word	0x200003e8
 8000ff4:	40026458 	.word	0x40026458
 8000ff8:	20000388 	.word	0x20000388
 8000ffc:	400264a0 	.word	0x400264a0

08001000 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001004:	4b17      	ldr	r3, [pc, #92]	; (8001064 <MX_SPI2_Init+0x64>)
 8001006:	4a18      	ldr	r2, [pc, #96]	; (8001068 <MX_SPI2_Init+0x68>)
 8001008:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800100a:	4b16      	ldr	r3, [pc, #88]	; (8001064 <MX_SPI2_Init+0x64>)
 800100c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001010:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001012:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_SPI2_Init+0x64>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <MX_SPI2_Init+0x64>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_SPI2_Init+0x64>)
 8001020:	2202      	movs	r2, #2
 8001022:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_SPI2_Init+0x64>)
 8001026:	2201      	movs	r2, #1
 8001028:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_SPI2_Init+0x64>)
 800102c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001030:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001032:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_SPI2_Init+0x64>)
 8001034:	2210      	movs	r2, #16
 8001036:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001038:	4b0a      	ldr	r3, [pc, #40]	; (8001064 <MX_SPI2_Init+0x64>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800103e:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_SPI2_Init+0x64>)
 8001040:	2200      	movs	r2, #0
 8001042:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001044:	4b07      	ldr	r3, [pc, #28]	; (8001064 <MX_SPI2_Init+0x64>)
 8001046:	2200      	movs	r2, #0
 8001048:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800104a:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_SPI2_Init+0x64>)
 800104c:	220a      	movs	r2, #10
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001050:	4804      	ldr	r0, [pc, #16]	; (8001064 <MX_SPI2_Init+0x64>)
 8001052:	f005 fc16 	bl	8006882 <HAL_SPI_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800105c:	f7ff feba 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}
 8001064:	200004cc 	.word	0x200004cc
 8001068:	40003800 	.word	0x40003800

0800106c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08a      	sub	sp, #40	; 0x28
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 0314 	add.w	r3, r7, #20
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a19      	ldr	r2, [pc, #100]	; (80010f0 <HAL_SPI_MspInit+0x84>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d12c      	bne.n	80010e8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	613b      	str	r3, [r7, #16]
 8001092:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a17      	ldr	r2, [pc, #92]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 8001098:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b2:	4a10      	ldr	r2, [pc, #64]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010b4:	f043 0302 	orr.w	r3, r3, #2
 80010b8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ba:	4b0e      	ldr	r3, [pc, #56]	; (80010f4 <HAL_SPI_MspInit+0x88>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60fb      	str	r3, [r7, #12]
 80010c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80010c6:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 80010ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010cc:	2302      	movs	r3, #2
 80010ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d4:	2303      	movs	r3, #3
 80010d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80010d8:	2305      	movs	r3, #5
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	4805      	ldr	r0, [pc, #20]	; (80010f8 <HAL_SPI_MspInit+0x8c>)
 80010e4:	f003 f818 	bl	8004118 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010e8:	bf00      	nop
 80010ea:	3728      	adds	r7, #40	; 0x28
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	40003800 	.word	0x40003800
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400

080010fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <HAL_MspInit+0x4c>)
 8001108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800110a:	4a0f      	ldr	r2, [pc, #60]	; (8001148 <HAL_MspInit+0x4c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001110:	6453      	str	r3, [r2, #68]	; 0x44
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <HAL_MspInit+0x4c>)
 8001114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001116:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800111a:	607b      	str	r3, [r7, #4]
 800111c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	603b      	str	r3, [r7, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <HAL_MspInit+0x4c>)
 8001124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001126:	4a08      	ldr	r2, [pc, #32]	; (8001148 <HAL_MspInit+0x4c>)
 8001128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800112c:	6413      	str	r3, [r2, #64]	; 0x40
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <HAL_MspInit+0x4c>)
 8001130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001136:	603b      	str	r3, [r7, #0]
 8001138:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800113a:	bf00      	nop
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
 8001146:	bf00      	nop
 8001148:	40023800 	.word	0x40023800

0800114c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <NMI_Handler+0x4>

08001152 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <HardFault_Handler+0x4>

08001158 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <MemManage_Handler+0x4>

0800115e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001162:	e7fe      	b.n	8001162 <BusFault_Handler+0x4>

08001164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001168:	e7fe      	b.n	8001168 <UsageFault_Handler+0x4>

0800116a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800116a:	b480      	push	{r7}
 800116c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800117c:	bf00      	nop
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr

08001186 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800118a:	bf00      	nop
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001198:	f000 fe52 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800119c:	bf00      	nop
 800119e:	bd80      	pop	{r7, pc}

080011a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80011a4:	4802      	ldr	r0, [pc, #8]	; (80011b0 <TIM4_IRQHandler+0x10>)
 80011a6:	f005 fc9d 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000524 	.word	0x20000524

080011b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011b8:	4802      	ldr	r0, [pc, #8]	; (80011c4 <USART3_IRQHandler+0x10>)
 80011ba:	f006 fbb1 	bl	8007920 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200006d8 	.word	0x200006d8

080011c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011cc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80011d0:	f003 f980 	bl	80044d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 80011dc:	4802      	ldr	r0, [pc, #8]	; (80011e8 <SDIO_IRQHandler+0x10>)
 80011de:	f004 fa97 	bl	8005710 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000448 	.word	0x20000448

080011ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011f0:	4802      	ldr	r0, [pc, #8]	; (80011fc <TIM7_IRQHandler+0x10>)
 80011f2:	f005 fc77 	bl	8006ae4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	2000068c 	.word	0x2000068c

08001200 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001204:	4802      	ldr	r0, [pc, #8]	; (8001210 <DMA2_Stream0_IRQHandler+0x10>)
 8001206:	f001 fbeb 	bl	80029e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	2000026c 	.word	0x2000026c

08001214 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 8001218:	4802      	ldr	r0, [pc, #8]	; (8001224 <DMA2_Stream3_IRQHandler+0x10>)
 800121a:	f001 fbe1 	bl	80029e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	200003e8 	.word	0x200003e8

08001228 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 800122c:	4802      	ldr	r0, [pc, #8]	; (8001238 <DMA2_Stream6_IRQHandler+0x10>)
 800122e:	f001 fbd7 	bl	80029e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	20000388 	.word	0x20000388

0800123c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
	return 1;
 8001240:	2301      	movs	r3, #1
}
 8001242:	4618      	mov	r0, r3
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_kill>:

int _kill(int pid, int sig)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001256:	4b05      	ldr	r3, [pc, #20]	; (800126c <_kill+0x20>)
 8001258:	2216      	movs	r2, #22
 800125a:	601a      	str	r2, [r3, #0]
	return -1;
 800125c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001260:	4618      	mov	r0, r3
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	20007220 	.word	0x20007220

08001270 <_exit>:

void _exit (int status)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff ffe5 	bl	800124c <_kill>
	while (1) {}		/* Make sure we hang here */
 8001282:	e7fe      	b.n	8001282 <_exit+0x12>

08001284 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b086      	sub	sp, #24
 8001288:	af00      	add	r7, sp, #0
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001290:	2300      	movs	r3, #0
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	e00a      	b.n	80012ac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001296:	f3af 8000 	nop.w
 800129a:	4601      	mov	r1, r0
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	1c5a      	adds	r2, r3, #1
 80012a0:	60ba      	str	r2, [r7, #8]
 80012a2:	b2ca      	uxtb	r2, r1
 80012a4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a6:	697b      	ldr	r3, [r7, #20]
 80012a8:	3301      	adds	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	697a      	ldr	r2, [r7, #20]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	dbf0      	blt.n	8001296 <_read+0x12>
	}

return len;
 80012b4:	687b      	ldr	r3, [r7, #4]
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3718      	adds	r7, #24
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}

080012be <_close>:
	}
	return len;
}

int _close(int file)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
	return -1;
 80012c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
 80012de:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012e6:	605a      	str	r2, [r3, #4]
	return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <_isatty>:

int _isatty(int file)
{
 80012f6:	b480      	push	{r7}
 80012f8:	b083      	sub	sp, #12
 80012fa:	af00      	add	r7, sp, #0
 80012fc:	6078      	str	r0, [r7, #4]
	return 1;
 80012fe:	2301      	movs	r3, #1
}
 8001300:	4618      	mov	r0, r3
 8001302:	370c      	adds	r7, #12
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	60f8      	str	r0, [r7, #12]
 8001314:	60b9      	str	r1, [r7, #8]
 8001316:	607a      	str	r2, [r7, #4]
	return 0;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3714      	adds	r7, #20
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
	...

08001328 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001330:	4a14      	ldr	r2, [pc, #80]	; (8001384 <_sbrk+0x5c>)
 8001332:	4b15      	ldr	r3, [pc, #84]	; (8001388 <_sbrk+0x60>)
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <_sbrk+0x64>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d102      	bne.n	800134a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001344:	4b11      	ldr	r3, [pc, #68]	; (800138c <_sbrk+0x64>)
 8001346:	4a12      	ldr	r2, [pc, #72]	; (8001390 <_sbrk+0x68>)
 8001348:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <_sbrk+0x64>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4413      	add	r3, r2
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	429a      	cmp	r2, r3
 8001356:	d205      	bcs.n	8001364 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <_sbrk+0x6c>)
 800135a:	220c      	movs	r2, #12
 800135c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e009      	b.n	8001378 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001364:	4b09      	ldr	r3, [pc, #36]	; (800138c <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800136a:	4b08      	ldr	r3, [pc, #32]	; (800138c <_sbrk+0x64>)
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	4413      	add	r3, r2
 8001372:	4a06      	ldr	r2, [pc, #24]	; (800138c <_sbrk+0x64>)
 8001374:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001376:	68fb      	ldr	r3, [r7, #12]
}
 8001378:	4618      	mov	r0, r3
 800137a:	371c      	adds	r7, #28
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr
 8001384:	20030000 	.word	0x20030000
 8001388:	00000400 	.word	0x00000400
 800138c:	20000094 	.word	0x20000094
 8001390:	20007230 	.word	0x20007230
 8001394:	20007220 	.word	0x20007220

08001398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001398:	b480      	push	{r7}
 800139a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800139c:	4b06      	ldr	r3, [pc, #24]	; (80013b8 <SystemInit+0x20>)
 800139e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013a2:	4a05      	ldr	r2, [pc, #20]	; (80013b8 <SystemInit+0x20>)
 80013a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013ac:	bf00      	nop
 80013ae:	46bd      	mov	sp, r7
 80013b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b4:	4770      	bx	lr
 80013b6:	bf00      	nop
 80013b8:	e000ed00 	.word	0xe000ed00

080013bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08e      	sub	sp, #56	; 0x38
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]
 80013ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d0:	f107 0320 	add.w	r3, r7, #32
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013da:	1d3b      	adds	r3, r7, #4
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
 80013e8:	615a      	str	r2, [r3, #20]
 80013ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ec:	4b2d      	ldr	r3, [pc, #180]	; (80014a4 <MX_TIM2_Init+0xe8>)
 80013ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80013f4:	4b2b      	ldr	r3, [pc, #172]	; (80014a4 <MX_TIM2_Init+0xe8>)
 80013f6:	22b3      	movs	r2, #179	; 0xb3
 80013f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fa:	4b2a      	ldr	r3, [pc, #168]	; (80014a4 <MX_TIM2_Init+0xe8>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8001400:	4b28      	ldr	r3, [pc, #160]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001402:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001406:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001408:	4b26      	ldr	r3, [pc, #152]	; (80014a4 <MX_TIM2_Init+0xe8>)
 800140a:	2200      	movs	r2, #0
 800140c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800140e:	4b25      	ldr	r3, [pc, #148]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001410:	2200      	movs	r2, #0
 8001412:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001414:	4823      	ldr	r0, [pc, #140]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001416:	f005 fabd 	bl	8006994 <HAL_TIM_Base_Init>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001420:	f7ff fcd8 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001424:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001428:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800142a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800142e:	4619      	mov	r1, r3
 8001430:	481c      	ldr	r0, [pc, #112]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001432:	f005 fd21 	bl	8006e78 <HAL_TIM_ConfigClockSource>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800143c:	f7ff fcca 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001440:	4818      	ldr	r0, [pc, #96]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001442:	f005 faf6 	bl	8006a32 <HAL_TIM_PWM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800144c:	f7ff fcc2 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001450:	2300      	movs	r3, #0
 8001452:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001454:	2300      	movs	r3, #0
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001458:	f107 0320 	add.w	r3, r7, #32
 800145c:	4619      	mov	r1, r3
 800145e:	4811      	ldr	r0, [pc, #68]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001460:	f006 f8ee 	bl	8007640 <HAL_TIMEx_MasterConfigSynchronization>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800146a:	f7ff fcb3 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800146e:	2360      	movs	r3, #96	; 0x60
 8001470:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001472:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001476:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001478:	2300      	movs	r3, #0
 800147a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001480:	1d3b      	adds	r3, r7, #4
 8001482:	2200      	movs	r2, #0
 8001484:	4619      	mov	r1, r3
 8001486:	4807      	ldr	r0, [pc, #28]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001488:	f005 fc34 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001492:	f7ff fc9f 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001496:	4803      	ldr	r0, [pc, #12]	; (80014a4 <MX_TIM2_Init+0xe8>)
 8001498:	f000 fab2 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 800149c:	bf00      	nop
 800149e:	3738      	adds	r7, #56	; 0x38
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000644 	.word	0x20000644

080014a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b08e      	sub	sp, #56	; 0x38
 80014ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014b2:	2200      	movs	r2, #0
 80014b4:	601a      	str	r2, [r3, #0]
 80014b6:	605a      	str	r2, [r3, #4]
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014bc:	f107 0320 	add.w	r3, r7, #32
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014c6:	1d3b      	adds	r3, r7, #4
 80014c8:	2200      	movs	r2, #0
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	609a      	str	r2, [r3, #8]
 80014d0:	60da      	str	r2, [r3, #12]
 80014d2:	611a      	str	r2, [r3, #16]
 80014d4:	615a      	str	r2, [r3, #20]
 80014d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014d8:	4b2c      	ldr	r3, [pc, #176]	; (800158c <MX_TIM3_Init+0xe4>)
 80014da:	4a2d      	ldr	r2, [pc, #180]	; (8001590 <MX_TIM3_Init+0xe8>)
 80014dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <MX_TIM3_Init+0xe4>)
 80014e0:	2208      	movs	r2, #8
 80014e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e4:	4b29      	ldr	r3, [pc, #164]	; (800158c <MX_TIM3_Init+0xe4>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80014ea:	4b28      	ldr	r3, [pc, #160]	; (800158c <MX_TIM3_Init+0xe4>)
 80014ec:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f2:	4b26      	ldr	r3, [pc, #152]	; (800158c <MX_TIM3_Init+0xe4>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <MX_TIM3_Init+0xe4>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014fe:	4823      	ldr	r0, [pc, #140]	; (800158c <MX_TIM3_Init+0xe4>)
 8001500:	f005 fa48 	bl	8006994 <HAL_TIM_Base_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800150a:	f7ff fc63 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001512:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	4619      	mov	r1, r3
 800151a:	481c      	ldr	r0, [pc, #112]	; (800158c <MX_TIM3_Init+0xe4>)
 800151c:	f005 fcac 	bl	8006e78 <HAL_TIM_ConfigClockSource>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001526:	f7ff fc55 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800152a:	4818      	ldr	r0, [pc, #96]	; (800158c <MX_TIM3_Init+0xe4>)
 800152c:	f005 fa81 	bl	8006a32 <HAL_TIM_PWM_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001536:	f7ff fc4d 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001542:	f107 0320 	add.w	r3, r7, #32
 8001546:	4619      	mov	r1, r3
 8001548:	4810      	ldr	r0, [pc, #64]	; (800158c <MX_TIM3_Init+0xe4>)
 800154a:	f006 f879 	bl	8007640 <HAL_TIMEx_MasterConfigSynchronization>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001554:	f7ff fc3e 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001558:	2360      	movs	r3, #96	; 0x60
 800155a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001568:	1d3b      	adds	r3, r7, #4
 800156a:	2200      	movs	r2, #0
 800156c:	4619      	mov	r1, r3
 800156e:	4807      	ldr	r0, [pc, #28]	; (800158c <MX_TIM3_Init+0xe4>)
 8001570:	f005 fbc0 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800157a:	f7ff fc2b 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800157e:	4803      	ldr	r0, [pc, #12]	; (800158c <MX_TIM3_Init+0xe4>)
 8001580:	f000 fa3e 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 8001584:	bf00      	nop
 8001586:	3738      	adds	r7, #56	; 0x38
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	200005fc 	.word	0x200005fc
 8001590:	40000400 	.word	0x40000400

08001594 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b08e      	sub	sp, #56	; 0x38
 8001598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800159a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a8:	f107 0320 	add.w	r3, r7, #32
 80015ac:	2200      	movs	r2, #0
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015b2:	1d3b      	adds	r3, r7, #4
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
 80015c0:	615a      	str	r2, [r3, #20]
 80015c2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015c4:	4b3b      	ldr	r3, [pc, #236]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015c6:	4a3c      	ldr	r2, [pc, #240]	; (80016b8 <MX_TIM4_Init+0x124>)
 80015c8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015cc:	2211      	movs	r2, #17
 80015ce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015d0:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015d8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015dc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015de:	4b35      	ldr	r3, [pc, #212]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e4:	4b33      	ldr	r3, [pc, #204]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015ea:	4832      	ldr	r0, [pc, #200]	; (80016b4 <MX_TIM4_Init+0x120>)
 80015ec:	f005 f9d2 	bl	8006994 <HAL_TIM_Base_Init>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015f6:	f7ff fbed 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015fe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001600:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001604:	4619      	mov	r1, r3
 8001606:	482b      	ldr	r0, [pc, #172]	; (80016b4 <MX_TIM4_Init+0x120>)
 8001608:	f005 fc36 	bl	8006e78 <HAL_TIM_ConfigClockSource>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001612:	f7ff fbdf 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001616:	4827      	ldr	r0, [pc, #156]	; (80016b4 <MX_TIM4_Init+0x120>)
 8001618:	f005 fa0b 	bl	8006a32 <HAL_TIM_PWM_Init>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001622:	f7ff fbd7 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001626:	2300      	movs	r3, #0
 8001628:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800162e:	f107 0320 	add.w	r3, r7, #32
 8001632:	4619      	mov	r1, r3
 8001634:	481f      	ldr	r0, [pc, #124]	; (80016b4 <MX_TIM4_Init+0x120>)
 8001636:	f006 f803 	bl	8007640 <HAL_TIMEx_MasterConfigSynchronization>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001640:	f7ff fbc8 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001644:	2360      	movs	r3, #96	; 0x60
 8001646:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001648:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800164c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	4619      	mov	r1, r3
 800165c:	4815      	ldr	r0, [pc, #84]	; (80016b4 <MX_TIM4_Init+0x120>)
 800165e:	f005 fb49 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001668:	f7ff fbb4 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800166c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001670:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2204      	movs	r2, #4
 8001676:	4619      	mov	r1, r3
 8001678:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_TIM4_Init+0x120>)
 800167a:	f005 fb3b 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001684:	f7ff fba6 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001688:	f641 4351 	movw	r3, #7249	; 0x1c51
 800168c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2208      	movs	r2, #8
 8001692:	4619      	mov	r1, r3
 8001694:	4807      	ldr	r0, [pc, #28]	; (80016b4 <MX_TIM4_Init+0x120>)
 8001696:	f005 fb2d 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 80016a0:	f7ff fb98 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016a4:	4803      	ldr	r0, [pc, #12]	; (80016b4 <MX_TIM4_Init+0x120>)
 80016a6:	f000 f9ab 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 80016aa:	bf00      	nop
 80016ac:	3738      	adds	r7, #56	; 0x38
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	20000524 	.word	0x20000524
 80016b8:	40000800 	.word	0x40000800

080016bc <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016ec:	4b31      	ldr	r3, [pc, #196]	; (80017b4 <MX_TIM5_Init+0xf8>)
 80016ee:	4a32      	ldr	r2, [pc, #200]	; (80017b8 <MX_TIM5_Init+0xfc>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80016f2:	4b30      	ldr	r3, [pc, #192]	; (80017b4 <MX_TIM5_Init+0xf8>)
 80016f4:	2209      	movs	r2, #9
 80016f6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b2e      	ldr	r3, [pc, #184]	; (80017b4 <MX_TIM5_Init+0xf8>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80016fe:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <MX_TIM5_Init+0xf8>)
 8001700:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <MX_TIM5_Init+0x100>)
 8001702:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001704:	4b2b      	ldr	r3, [pc, #172]	; (80017b4 <MX_TIM5_Init+0xf8>)
 8001706:	2200      	movs	r2, #0
 8001708:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <MX_TIM5_Init+0xf8>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001710:	4828      	ldr	r0, [pc, #160]	; (80017b4 <MX_TIM5_Init+0xf8>)
 8001712:	f005 f93f 	bl	8006994 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800171c:	f7ff fb5a 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001724:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001726:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172a:	4619      	mov	r1, r3
 800172c:	4821      	ldr	r0, [pc, #132]	; (80017b4 <MX_TIM5_Init+0xf8>)
 800172e:	f005 fba3 	bl	8006e78 <HAL_TIM_ConfigClockSource>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001738:	f7ff fb4c 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800173c:	481d      	ldr	r0, [pc, #116]	; (80017b4 <MX_TIM5_Init+0xf8>)
 800173e:	f005 f978 	bl	8006a32 <HAL_TIM_PWM_Init>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001748:	f7ff fb44 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174c:	2300      	movs	r3, #0
 800174e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001754:	f107 0320 	add.w	r3, r7, #32
 8001758:	4619      	mov	r1, r3
 800175a:	4816      	ldr	r0, [pc, #88]	; (80017b4 <MX_TIM5_Init+0xf8>)
 800175c:	f005 ff70 	bl	8007640 <HAL_TIMEx_MasterConfigSynchronization>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001766:	f7ff fb35 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176a:	2360      	movs	r3, #96	; 0x60
 800176c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001772:	2300      	movs	r3, #0
 8001774:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	4619      	mov	r1, r3
 8001780:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_TIM5_Init+0xf8>)
 8001782:	f005 fab7 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 8001786:	4603      	mov	r3, r0
 8001788:	2b00      	cmp	r3, #0
 800178a:	d001      	beq.n	8001790 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800178c:	f7ff fb22 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001790:	1d3b      	adds	r3, r7, #4
 8001792:	220c      	movs	r2, #12
 8001794:	4619      	mov	r1, r3
 8001796:	4807      	ldr	r0, [pc, #28]	; (80017b4 <MX_TIM5_Init+0xf8>)
 8001798:	f005 faac 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 80017a2:	f7ff fb17 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM5_Init+0xf8>)
 80017a8:	f000 f92a 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 80017ac:	bf00      	nop
 80017ae:	3738      	adds	r7, #56	; 0x38
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	200005b4 	.word	0x200005b4
 80017b8:	40000c00 	.word	0x40000c00
 80017bc:	0001869f 	.word	0x0001869f

080017c0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c6:	463b      	mov	r3, r7
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <MX_TIM7_Init+0x64>)
 80017d0:	4a15      	ldr	r2, [pc, #84]	; (8001828 <MX_TIM7_Init+0x68>)
 80017d2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 80017d4:	4b13      	ldr	r3, [pc, #76]	; (8001824 <MX_TIM7_Init+0x64>)
 80017d6:	2208      	movs	r2, #8
 80017d8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017da:	4b12      	ldr	r3, [pc, #72]	; (8001824 <MX_TIM7_Init+0x64>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80017e0:	4b10      	ldr	r3, [pc, #64]	; (8001824 <MX_TIM7_Init+0x64>)
 80017e2:	f242 720f 	movw	r2, #9999	; 0x270f
 80017e6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017e8:	4b0e      	ldr	r3, [pc, #56]	; (8001824 <MX_TIM7_Init+0x64>)
 80017ea:	2280      	movs	r2, #128	; 0x80
 80017ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017ee:	480d      	ldr	r0, [pc, #52]	; (8001824 <MX_TIM7_Init+0x64>)
 80017f0:	f005 f8d0 	bl	8006994 <HAL_TIM_Base_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80017fa:	f7ff faeb 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fe:	2300      	movs	r3, #0
 8001800:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001802:	2300      	movs	r3, #0
 8001804:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001806:	463b      	mov	r3, r7
 8001808:	4619      	mov	r1, r3
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <MX_TIM7_Init+0x64>)
 800180c:	f005 ff18 	bl	8007640 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001816:	f7ff fadd 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000068c 	.word	0x2000068c
 8001828:	40001400 	.word	0x40001400

0800182c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b088      	sub	sp, #32
 8001830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001844:	4b1e      	ldr	r3, [pc, #120]	; (80018c0 <MX_TIM10_Init+0x94>)
 8001846:	4a1f      	ldr	r2, [pc, #124]	; (80018c4 <MX_TIM10_Init+0x98>)
 8001848:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800184a:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <MX_TIM10_Init+0x94>)
 800184c:	2247      	movs	r2, #71	; 0x47
 800184e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001850:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <MX_TIM10_Init+0x94>)
 8001852:	2200      	movs	r2, #0
 8001854:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001856:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <MX_TIM10_Init+0x94>)
 8001858:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800185c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b18      	ldr	r3, [pc, #96]	; (80018c0 <MX_TIM10_Init+0x94>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b16      	ldr	r3, [pc, #88]	; (80018c0 <MX_TIM10_Init+0x94>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800186a:	4815      	ldr	r0, [pc, #84]	; (80018c0 <MX_TIM10_Init+0x94>)
 800186c:	f005 f892 	bl	8006994 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001876:	f7ff faad 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800187a:	4811      	ldr	r0, [pc, #68]	; (80018c0 <MX_TIM10_Init+0x94>)
 800187c:	f005 f8d9 	bl	8006a32 <HAL_TIM_PWM_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001886:	f7ff faa5 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800188a:	2360      	movs	r3, #96	; 0x60
 800188c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800188e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001892:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001898:	2300      	movs	r3, #0
 800189a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800189c:	1d3b      	adds	r3, r7, #4
 800189e:	2200      	movs	r2, #0
 80018a0:	4619      	mov	r1, r3
 80018a2:	4807      	ldr	r0, [pc, #28]	; (80018c0 <MX_TIM10_Init+0x94>)
 80018a4:	f005 fa26 	bl	8006cf4 <HAL_TIM_PWM_ConfigChannel>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80018ae:	f7ff fa91 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80018b2:	4803      	ldr	r0, [pc, #12]	; (80018c0 <MX_TIM10_Init+0x94>)
 80018b4:	f000 f8a4 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 80018b8:	bf00      	nop
 80018ba:	3720      	adds	r7, #32
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	2000056c 	.word	0x2000056c
 80018c4:	40014400 	.word	0x40014400

080018c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018d8:	d10e      	bne.n	80018f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	4b42      	ldr	r3, [pc, #264]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a41      	ldr	r2, [pc, #260]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80018e4:	f043 0301 	orr.w	r3, r3, #1
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b3f      	ldr	r3, [pc, #252]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 0301 	and.w	r3, r3, #1
 80018f2:	61fb      	str	r3, [r7, #28]
 80018f4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80018f6:	e072      	b.n	80019de <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a3b      	ldr	r2, [pc, #236]	; (80019ec <HAL_TIM_Base_MspInit+0x124>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d10e      	bne.n	8001920 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	4b38      	ldr	r3, [pc, #224]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a37      	ldr	r2, [pc, #220]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 800190c:	f043 0302 	orr.w	r3, r3, #2
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
 8001912:	4b35      	ldr	r3, [pc, #212]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	61bb      	str	r3, [r7, #24]
 800191c:	69bb      	ldr	r3, [r7, #24]
}
 800191e:	e05e      	b.n	80019de <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <HAL_TIM_Base_MspInit+0x128>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d116      	bne.n	8001958 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	4a2d      	ldr	r2, [pc, #180]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001934:	f043 0304 	orr.w	r3, r3, #4
 8001938:	6413      	str	r3, [r2, #64]	; 0x40
 800193a:	4b2b      	ldr	r3, [pc, #172]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	f003 0304 	and.w	r3, r3, #4
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001946:	2200      	movs	r2, #0
 8001948:	2100      	movs	r1, #0
 800194a:	201e      	movs	r0, #30
 800194c:	f000 fe09 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001950:	201e      	movs	r0, #30
 8001952:	f000 fe22 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 8001956:	e042      	b.n	80019de <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a25      	ldr	r2, [pc, #148]	; (80019f4 <HAL_TIM_Base_MspInit+0x12c>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d10e      	bne.n	8001980 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001962:	2300      	movs	r3, #0
 8001964:	613b      	str	r3, [r7, #16]
 8001966:	4b20      	ldr	r3, [pc, #128]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800196a:	4a1f      	ldr	r2, [pc, #124]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 800196c:	f043 0308 	orr.w	r3, r3, #8
 8001970:	6413      	str	r3, [r2, #64]	; 0x40
 8001972:	4b1d      	ldr	r3, [pc, #116]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f003 0308 	and.w	r3, r3, #8
 800197a:	613b      	str	r3, [r7, #16]
 800197c:	693b      	ldr	r3, [r7, #16]
}
 800197e:	e02e      	b.n	80019de <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a1c      	ldr	r2, [pc, #112]	; (80019f8 <HAL_TIM_Base_MspInit+0x130>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d116      	bne.n	80019b8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b16      	ldr	r3, [pc, #88]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	4a15      	ldr	r2, [pc, #84]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 8001994:	f043 0320 	orr.w	r3, r3, #32
 8001998:	6413      	str	r3, [r2, #64]	; 0x40
 800199a:	4b13      	ldr	r3, [pc, #76]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 800199c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199e:	f003 0320 	and.w	r3, r3, #32
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2037      	movs	r0, #55	; 0x37
 80019ac:	f000 fdd9 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019b0:	2037      	movs	r0, #55	; 0x37
 80019b2:	f000 fdf2 	bl	800259a <HAL_NVIC_EnableIRQ>
}
 80019b6:	e012      	b.n	80019de <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a0f      	ldr	r2, [pc, #60]	; (80019fc <HAL_TIM_Base_MspInit+0x134>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10d      	bne.n	80019de <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60bb      	str	r3, [r7, #8]
 80019c6:	4b08      	ldr	r3, [pc, #32]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80019c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ca:	4a07      	ldr	r2, [pc, #28]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80019cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019d0:	6453      	str	r3, [r2, #68]	; 0x44
 80019d2:	4b05      	ldr	r3, [pc, #20]	; (80019e8 <HAL_TIM_Base_MspInit+0x120>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
}
 80019de:	bf00      	nop
 80019e0:	3720      	adds	r7, #32
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40023800 	.word	0x40023800
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40000c00 	.word	0x40000c00
 80019f8:	40001400 	.word	0x40001400
 80019fc:	40014400 	.word	0x40014400

08001a00 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08c      	sub	sp, #48	; 0x30
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a20:	d11e      	bne.n	8001a60 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	4b58      	ldr	r3, [pc, #352]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a57      	ldr	r2, [pc, #348]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	61bb      	str	r3, [r7, #24]
 8001a3c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a3e:	2320      	movs	r3, #32
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 031c 	add.w	r3, r7, #28
 8001a56:	4619      	mov	r1, r3
 8001a58:	484c      	ldr	r0, [pc, #304]	; (8001b8c <HAL_TIM_MspPostInit+0x18c>)
 8001a5a:	f002 fb5d 	bl	8004118 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a5e:	e08f      	b.n	8001b80 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a4a      	ldr	r2, [pc, #296]	; (8001b90 <HAL_TIM_MspPostInit+0x190>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d11e      	bne.n	8001aa8 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	617b      	str	r3, [r7, #20]
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a72:	4a45      	ldr	r2, [pc, #276]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a74:	f043 0304 	orr.w	r3, r3, #4
 8001a78:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7a:	4b43      	ldr	r3, [pc, #268]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	617b      	str	r3, [r7, #20]
 8001a84:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a86:	2340      	movs	r3, #64	; 0x40
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a92:	2300      	movs	r3, #0
 8001a94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a96:	2302      	movs	r3, #2
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a9a:	f107 031c 	add.w	r3, r7, #28
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	483c      	ldr	r0, [pc, #240]	; (8001b94 <HAL_TIM_MspPostInit+0x194>)
 8001aa2:	f002 fb39 	bl	8004118 <HAL_GPIO_Init>
}
 8001aa6:	e06b      	b.n	8001b80 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_TIM_MspPostInit+0x198>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d11f      	bne.n	8001af2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
 8001ab6:	4b34      	ldr	r3, [pc, #208]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a33      	ldr	r2, [pc, #204]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001abc:	f043 0308 	orr.w	r3, r3, #8
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0308 	and.w	r3, r3, #8
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001ace:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001adc:	2300      	movs	r3, #0
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	482c      	ldr	r0, [pc, #176]	; (8001b9c <HAL_TIM_MspPostInit+0x19c>)
 8001aec:	f002 fb14 	bl	8004118 <HAL_GPIO_Init>
}
 8001af0:	e046      	b.n	8001b80 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a2a      	ldr	r2, [pc, #168]	; (8001ba0 <HAL_TIM_MspPostInit+0x1a0>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d11e      	bne.n	8001b3a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	4b21      	ldr	r3, [pc, #132]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b04:	4a20      	ldr	r2, [pc, #128]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b0c:	4b1e      	ldr	r3, [pc, #120]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001b18:	2309      	movs	r3, #9
 8001b1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1c:	2302      	movs	r3, #2
 8001b1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b2c:	f107 031c 	add.w	r3, r7, #28
 8001b30:	4619      	mov	r1, r3
 8001b32:	4816      	ldr	r0, [pc, #88]	; (8001b8c <HAL_TIM_MspPostInit+0x18c>)
 8001b34:	f002 faf0 	bl	8004118 <HAL_GPIO_Init>
}
 8001b38:	e022      	b.n	8001b80 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	4a19      	ldr	r2, [pc, #100]	; (8001ba4 <HAL_TIM_MspPostInit+0x1a4>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d11d      	bne.n	8001b80 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b44:	2300      	movs	r3, #0
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	4b0f      	ldr	r3, [pc, #60]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4c:	4a0e      	ldr	r2, [pc, #56]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b4e:	f043 0320 	orr.w	r3, r3, #32
 8001b52:	6313      	str	r3, [r2, #48]	; 0x30
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_MspPostInit+0x188>)
 8001b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b58:	f003 0320 	and.w	r3, r3, #32
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b60:	2340      	movs	r3, #64	; 0x40
 8001b62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b64:	2302      	movs	r3, #2
 8001b66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001b70:	2303      	movs	r3, #3
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b74:	f107 031c 	add.w	r3, r7, #28
 8001b78:	4619      	mov	r1, r3
 8001b7a:	480b      	ldr	r0, [pc, #44]	; (8001ba8 <HAL_TIM_MspPostInit+0x1a8>)
 8001b7c:	f002 facc 	bl	8004118 <HAL_GPIO_Init>
}
 8001b80:	bf00      	nop
 8001b82:	3730      	adds	r7, #48	; 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40000400 	.word	0x40000400
 8001b94:	40020800 	.word	0x40020800
 8001b98:	40000800 	.word	0x40000800
 8001b9c:	40020c00 	.word	0x40020c00
 8001ba0:	40000c00 	.word	0x40000c00
 8001ba4:	40014400 	.word	0x40014400
 8001ba8:	40021400 	.word	0x40021400

08001bac <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8001bb2:	f00f fef7 	bl	80119a4 <udp_new>
 8001bb6:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d00f      	beq.n	8001bde <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8001bbe:	2207      	movs	r2, #7
 8001bc0:	4909      	ldr	r1, [pc, #36]	; (8001be8 <udp_echoserver_init+0x3c>)
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f00f fdb0 	bl	8011728 <udp_bind>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8001bcc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d104      	bne.n	8001bde <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	4905      	ldr	r1, [pc, #20]	; (8001bec <udp_echoserver_init+0x40>)
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f00f fec3 	bl	8011964 <udp_recv>
      }
   }
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	08017b74 	.word	0x08017b74
 8001bec:	08001bf1 	.word	0x08001bf1

08001bf0 <udp_echoserver_receive_callback>:

extern UART_HandleTypeDef huart3;
uint8_t udp_data;
uint8_t udp_flag;
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
  MEMCPY(&udp_data ,p->payload, p->len);	//macro
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6859      	ldr	r1, [r3, #4]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	895b      	ldrh	r3, [r3, #10]
 8001c06:	461a      	mov	r2, r3
 8001c08:	480f      	ldr	r0, [pc, #60]	; (8001c48 <udp_echoserver_receive_callback+0x58>)
 8001c0a:	f012 fa05 	bl	8014018 <memcpy>
  udp_flag = 1;
 8001c0e:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <udp_echoserver_receive_callback+0x5c>)
 8001c10:	2201      	movs	r2, #1
 8001c12:	701a      	strb	r2, [r3, #0]

  HAL_UART_Transmit(&huart3, &udp_data, sizeof(udp_data), 10);	// to terminal
 8001c14:	230a      	movs	r3, #10
 8001c16:	2201      	movs	r2, #1
 8001c18:	490b      	ldr	r1, [pc, #44]	; (8001c48 <udp_echoserver_receive_callback+0x58>)
 8001c1a:	480d      	ldr	r0, [pc, #52]	; (8001c50 <udp_echoserver_receive_callback+0x60>)
 8001c1c:	f005 fded 	bl	80077fa <HAL_UART_Transmit>

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8001c20:	2207      	movs	r2, #7
 8001c22:	6839      	ldr	r1, [r7, #0]
 8001c24:	68b8      	ldr	r0, [r7, #8]
 8001c26:	f00f fe07 	bl	8011838 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8001c2a:	6879      	ldr	r1, [r7, #4]
 8001c2c:	68b8      	ldr	r0, [r7, #8]
 8001c2e:	f00f fb91 	bl	8011354 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8001c32:	68b8      	ldr	r0, [r7, #8]
 8001c34:	f00f fe6e 	bl	8011914 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f009 fc89 	bl	800b550 <pbuf_free>
   
}
 8001c3e:	bf00      	nop
 8001c40:	3710      	adds	r7, #16
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200006d5 	.word	0x200006d5
 8001c4c:	200006d4 	.word	0x200006d4
 8001c50:	200006d8 	.word	0x200006d8

08001c54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c58:	4b11      	ldr	r3, [pc, #68]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c5a:	4a12      	ldr	r2, [pc, #72]	; (8001ca4 <MX_USART3_UART_Init+0x50>)
 8001c5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c66:	4b0e      	ldr	r3, [pc, #56]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c72:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c78:	4b09      	ldr	r3, [pc, #36]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7e:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c84:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c8a:	4805      	ldr	r0, [pc, #20]	; (8001ca0 <MX_USART3_UART_Init+0x4c>)
 8001c8c:	f005 fd68 	bl	8007760 <HAL_UART_Init>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c96:	f7ff f89d 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200006d8 	.word	0x200006d8
 8001ca4:	40004800 	.word	0x40004800

08001ca8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	; 0x28
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb0:	f107 0314 	add.w	r3, r7, #20
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	601a      	str	r2, [r3, #0]
 8001cb8:	605a      	str	r2, [r3, #4]
 8001cba:	609a      	str	r2, [r3, #8]
 8001cbc:	60da      	str	r2, [r3, #12]
 8001cbe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	4a1d      	ldr	r2, [pc, #116]	; (8001d3c <HAL_UART_MspInit+0x94>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d134      	bne.n	8001d34 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	613b      	str	r3, [r7, #16]
 8001cce:	4b1c      	ldr	r3, [pc, #112]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd2:	4a1b      	ldr	r2, [pc, #108]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cda:	4b19      	ldr	r3, [pc, #100]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	60fb      	str	r3, [r7, #12]
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	4a14      	ldr	r2, [pc, #80]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cf0:	f043 0308 	orr.w	r3, r3, #8
 8001cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <HAL_UART_MspInit+0x98>)
 8001cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfa:	f003 0308 	and.w	r3, r3, #8
 8001cfe:	60fb      	str	r3, [r7, #12]
 8001d00:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d02:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d08:	2302      	movs	r3, #2
 8001d0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d10:	2303      	movs	r3, #3
 8001d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001d14:	2307      	movs	r3, #7
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4809      	ldr	r0, [pc, #36]	; (8001d44 <HAL_UART_MspInit+0x9c>)
 8001d20:	f002 f9fa 	bl	8004118 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d24:	2200      	movs	r2, #0
 8001d26:	2100      	movs	r1, #0
 8001d28:	2027      	movs	r0, #39	; 0x27
 8001d2a:	f000 fc1a 	bl	8002562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d2e:	2027      	movs	r0, #39	; 0x27
 8001d30:	f000 fc33 	bl	800259a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001d34:	bf00      	nop
 8001d36:	3728      	adds	r7, #40	; 0x28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	40004800 	.word	0x40004800
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020c00 	.word	0x40020c00

08001d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4e:	490e      	ldr	r1, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d64:	4c0b      	ldr	r4, [pc, #44]	; (8001d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d72:	f7ff fb11 	bl	8001398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f012 f91d 	bl	8013fb4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7fe ff7f 	bl	8000c7c <main>
  bx  lr    
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d80:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d8c:	08017ce4 	.word	0x08017ce4
  ldr r2, =_sbss
 8001d90:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d94:	20007230 	.word	0x20007230

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_Init+0x40>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_Init+0x40>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_Init+0x40>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 fbc1 	bl	800254c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	200f      	movs	r0, #15
 8001dcc:	f000 f808 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd0:	f7ff f994 	bl	80010fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x54>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x58>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 fbd9 	bl	80025b6 <HAL_SYSTICK_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00e      	b.n	8001e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d80a      	bhi.n	8001e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295
 8001e1c:	f000 fba1 	bl	8002562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_InitTick+0x5c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20000000 	.word	0x20000000
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20000004 	.word	0x20000004

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20000008 	.word	0x20000008
 8001e64:	2000071c 	.word	0x2000071c

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	2000071c 	.word	0x2000071c

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20000008 	.word	0x20000008

08001ec8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e033      	b.n	8001f46 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d109      	bne.n	8001efa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f7fe fbca 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f003 0310 	and.w	r3, r3, #16
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d118      	bne.n	8001f38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001f0e:	f023 0302 	bic.w	r3, r3, #2
 8001f12:	f043 0202 	orr.w	r2, r3, #2
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 f94a 	bl	80021b4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	f023 0303 	bic.w	r3, r3, #3
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	641a      	str	r2, [r3, #64]	; 0x40
 8001f36:	e001      	b.n	8001f3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d101      	bne.n	8001f6c <HAL_ADC_ConfigChannel+0x1c>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	e113      	b.n	8002194 <HAL_ADC_ConfigChannel+0x244>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2b09      	cmp	r3, #9
 8001f7a:	d925      	bls.n	8001fc8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68d9      	ldr	r1, [r3, #12]
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4613      	mov	r3, r2
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	4413      	add	r3, r2
 8001f90:	3b1e      	subs	r3, #30
 8001f92:	2207      	movs	r2, #7
 8001f94:	fa02 f303 	lsl.w	r3, r2, r3
 8001f98:	43da      	mvns	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	400a      	ands	r2, r1
 8001fa0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68d9      	ldr	r1, [r3, #12]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	b29b      	uxth	r3, r3
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	005b      	lsls	r3, r3, #1
 8001fb8:	4403      	add	r3, r0
 8001fba:	3b1e      	subs	r3, #30
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	60da      	str	r2, [r3, #12]
 8001fc6:	e022      	b.n	800200e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	6919      	ldr	r1, [r3, #16]
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	4413      	add	r3, r2
 8001fdc:	2207      	movs	r2, #7
 8001fde:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe2:	43da      	mvns	r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	400a      	ands	r2, r1
 8001fea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6919      	ldr	r1, [r3, #16]
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	4603      	mov	r3, r0
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4403      	add	r3, r0
 8002004:	409a      	lsls	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	430a      	orrs	r2, r1
 800200c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b06      	cmp	r3, #6
 8002014:	d824      	bhi.n	8002060 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	4613      	mov	r3, r2
 8002022:	009b      	lsls	r3, r3, #2
 8002024:	4413      	add	r3, r2
 8002026:	3b05      	subs	r3, #5
 8002028:	221f      	movs	r2, #31
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	43da      	mvns	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	400a      	ands	r2, r1
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	b29b      	uxth	r3, r3
 8002044:	4618      	mov	r0, r3
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	685a      	ldr	r2, [r3, #4]
 800204a:	4613      	mov	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	4413      	add	r3, r2
 8002050:	3b05      	subs	r3, #5
 8002052:	fa00 f203 	lsl.w	r2, r0, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	635a      	str	r2, [r3, #52]	; 0x34
 800205e:	e04c      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d824      	bhi.n	80020b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685a      	ldr	r2, [r3, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	4413      	add	r3, r2
 8002078:	3b23      	subs	r3, #35	; 0x23
 800207a:	221f      	movs	r2, #31
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43da      	mvns	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	400a      	ands	r2, r1
 8002088:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	4618      	mov	r0, r3
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	4613      	mov	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	4413      	add	r3, r2
 80020a2:	3b23      	subs	r3, #35	; 0x23
 80020a4:	fa00 f203 	lsl.w	r2, r0, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	430a      	orrs	r2, r1
 80020ae:	631a      	str	r2, [r3, #48]	; 0x30
 80020b0:	e023      	b.n	80020fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	685a      	ldr	r2, [r3, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4413      	add	r3, r2
 80020c2:	3b41      	subs	r3, #65	; 0x41
 80020c4:	221f      	movs	r2, #31
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685a      	ldr	r2, [r3, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	4413      	add	r3, r2
 80020ec:	3b41      	subs	r3, #65	; 0x41
 80020ee:	fa00 f203 	lsl.w	r2, r0, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	430a      	orrs	r2, r1
 80020f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020fa:	4b29      	ldr	r3, [pc, #164]	; (80021a0 <HAL_ADC_ConfigChannel+0x250>)
 80020fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a28      	ldr	r2, [pc, #160]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d10f      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	2b12      	cmp	r3, #18
 800210e:	d10b      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a1d      	ldr	r2, [pc, #116]	; (80021a4 <HAL_ADC_ConfigChannel+0x254>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12b      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d003      	beq.n	8002144 <HAL_ADC_ConfigChannel+0x1f4>
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2b11      	cmp	r3, #17
 8002142:	d122      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a11      	ldr	r2, [pc, #68]	; (80021a8 <HAL_ADC_ConfigChannel+0x258>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d111      	bne.n	800218a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002166:	4b11      	ldr	r3, [pc, #68]	; (80021ac <HAL_ADC_ConfigChannel+0x25c>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a11      	ldr	r2, [pc, #68]	; (80021b0 <HAL_ADC_ConfigChannel+0x260>)
 800216c:	fba2 2303 	umull	r2, r3, r2, r3
 8002170:	0c9a      	lsrs	r2, r3, #18
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800217c:	e002      	b.n	8002184 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	3b01      	subs	r3, #1
 8002182:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f9      	bne.n	800217e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3714      	adds	r7, #20
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr
 80021a0:	40012300 	.word	0x40012300
 80021a4:	40012000 	.word	0x40012000
 80021a8:	10000012 	.word	0x10000012
 80021ac:	20000000 	.word	0x20000000
 80021b0:	431bde83 	.word	0x431bde83

080021b4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021bc:	4b79      	ldr	r3, [pc, #484]	; (80023a4 <ADC_Init+0x1f0>)
 80021be:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	685a      	ldr	r2, [r3, #4]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	431a      	orrs	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685a      	ldr	r2, [r3, #4]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	6859      	ldr	r1, [r3, #4]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	691b      	ldr	r3, [r3, #16]
 80021f4:	021a      	lsls	r2, r3, #8
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	430a      	orrs	r2, r1
 80021fc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685a      	ldr	r2, [r3, #4]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800220c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	6859      	ldr	r1, [r3, #4]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689a      	ldr	r2, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	430a      	orrs	r2, r1
 800221e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	689a      	ldr	r2, [r3, #8]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800222e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	6899      	ldr	r1, [r3, #8]
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	430a      	orrs	r2, r1
 8002240:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002246:	4a58      	ldr	r2, [pc, #352]	; (80023a8 <ADC_Init+0x1f4>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d022      	beq.n	8002292 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	689a      	ldr	r2, [r3, #8]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800225a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	6899      	ldr	r1, [r3, #8]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6899      	ldr	r1, [r3, #8]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	430a      	orrs	r2, r1
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	e00f      	b.n	80022b2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	689a      	ldr	r2, [r3, #8]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022a0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022b0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f022 0202 	bic.w	r2, r2, #2
 80022c0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6899      	ldr	r1, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	7e1b      	ldrb	r3, [r3, #24]
 80022cc:	005a      	lsls	r2, r3, #1
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	685a      	ldr	r2, [r3, #4]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ee:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	685a      	ldr	r2, [r3, #4]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022fe:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	6859      	ldr	r1, [r3, #4]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230a:	3b01      	subs	r3, #1
 800230c:	035a      	lsls	r2, r3, #13
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	430a      	orrs	r2, r1
 8002314:	605a      	str	r2, [r3, #4]
 8002316:	e007      	b.n	8002328 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002326:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002336:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69db      	ldr	r3, [r3, #28]
 8002342:	3b01      	subs	r3, #1
 8002344:	051a      	lsls	r2, r3, #20
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	430a      	orrs	r2, r1
 800234c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	689a      	ldr	r2, [r3, #8]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800235c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	6899      	ldr	r1, [r3, #8]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800236a:	025a      	lsls	r2, r3, #9
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	430a      	orrs	r2, r1
 8002372:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	689a      	ldr	r2, [r3, #8]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	6899      	ldr	r1, [r3, #8]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	695b      	ldr	r3, [r3, #20]
 800238e:	029a      	lsls	r2, r3, #10
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	430a      	orrs	r2, r1
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	0f000001 	.word	0x0f000001

080023ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b085      	sub	sp, #20
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	f003 0307 	and.w	r3, r3, #7
 80023ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023c2:	68ba      	ldr	r2, [r7, #8]
 80023c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023c8:	4013      	ands	r3, r2
 80023ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80023d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80023d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023de:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <__NVIC_SetPriorityGrouping+0x44>)
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	60d3      	str	r3, [r2, #12]
}
 80023e4:	bf00      	nop
 80023e6:	3714      	adds	r7, #20
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr
 80023f0:	e000ed00 	.word	0xe000ed00

080023f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <__NVIC_GetPriorityGrouping+0x18>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	0a1b      	lsrs	r3, r3, #8
 80023fe:	f003 0307 	and.w	r3, r3, #7
}
 8002402:	4618      	mov	r0, r3
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr
 800240c:	e000ed00 	.word	0xe000ed00

08002410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	2b00      	cmp	r3, #0
 8002420:	db0b      	blt.n	800243a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002422:	79fb      	ldrb	r3, [r7, #7]
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	4907      	ldr	r1, [pc, #28]	; (8002448 <__NVIC_EnableIRQ+0x38>)
 800242a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242e:	095b      	lsrs	r3, r3, #5
 8002430:	2001      	movs	r0, #1
 8002432:	fa00 f202 	lsl.w	r2, r0, r2
 8002436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000e100 	.word	0xe000e100

0800244c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	4603      	mov	r3, r0
 8002454:	6039      	str	r1, [r7, #0]
 8002456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245c:	2b00      	cmp	r3, #0
 800245e:	db0a      	blt.n	8002476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	490c      	ldr	r1, [pc, #48]	; (8002498 <__NVIC_SetPriority+0x4c>)
 8002466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800246a:	0112      	lsls	r2, r2, #4
 800246c:	b2d2      	uxtb	r2, r2
 800246e:	440b      	add	r3, r1
 8002470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002474:	e00a      	b.n	800248c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	b2da      	uxtb	r2, r3
 800247a:	4908      	ldr	r1, [pc, #32]	; (800249c <__NVIC_SetPriority+0x50>)
 800247c:	79fb      	ldrb	r3, [r7, #7]
 800247e:	f003 030f 	and.w	r3, r3, #15
 8002482:	3b04      	subs	r3, #4
 8002484:	0112      	lsls	r2, r2, #4
 8002486:	b2d2      	uxtb	r2, r2
 8002488:	440b      	add	r3, r1
 800248a:	761a      	strb	r2, [r3, #24]
}
 800248c:	bf00      	nop
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	e000e100 	.word	0xe000e100
 800249c:	e000ed00 	.word	0xe000ed00

080024a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b089      	sub	sp, #36	; 0x24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	f003 0307 	and.w	r3, r3, #7
 80024b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	f1c3 0307 	rsb	r3, r3, #7
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	bf28      	it	cs
 80024be:	2304      	movcs	r3, #4
 80024c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	3304      	adds	r3, #4
 80024c6:	2b06      	cmp	r3, #6
 80024c8:	d902      	bls.n	80024d0 <NVIC_EncodePriority+0x30>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	3b03      	subs	r3, #3
 80024ce:	e000      	b.n	80024d2 <NVIC_EncodePriority+0x32>
 80024d0:	2300      	movs	r3, #0
 80024d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024d4:	f04f 32ff 	mov.w	r2, #4294967295
 80024d8:	69bb      	ldr	r3, [r7, #24]
 80024da:	fa02 f303 	lsl.w	r3, r2, r3
 80024de:	43da      	mvns	r2, r3
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	401a      	ands	r2, r3
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024e8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ec:	697b      	ldr	r3, [r7, #20]
 80024ee:	fa01 f303 	lsl.w	r3, r1, r3
 80024f2:	43d9      	mvns	r1, r3
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024f8:	4313      	orrs	r3, r2
         );
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3724      	adds	r7, #36	; 0x24
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
	...

08002508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	3b01      	subs	r3, #1
 8002514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002518:	d301      	bcc.n	800251e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800251a:	2301      	movs	r3, #1
 800251c:	e00f      	b.n	800253e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800251e:	4a0a      	ldr	r2, [pc, #40]	; (8002548 <SysTick_Config+0x40>)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3b01      	subs	r3, #1
 8002524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002526:	210f      	movs	r1, #15
 8002528:	f04f 30ff 	mov.w	r0, #4294967295
 800252c:	f7ff ff8e 	bl	800244c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002530:	4b05      	ldr	r3, [pc, #20]	; (8002548 <SysTick_Config+0x40>)
 8002532:	2200      	movs	r2, #0
 8002534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002536:	4b04      	ldr	r3, [pc, #16]	; (8002548 <SysTick_Config+0x40>)
 8002538:	2207      	movs	r2, #7
 800253a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800253c:	2300      	movs	r3, #0
}
 800253e:	4618      	mov	r0, r3
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	e000e010 	.word	0xe000e010

0800254c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002554:	6878      	ldr	r0, [r7, #4]
 8002556:	f7ff ff29 	bl	80023ac <__NVIC_SetPriorityGrouping>
}
 800255a:	bf00      	nop
 800255c:	3708      	adds	r7, #8
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}

08002562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002562:	b580      	push	{r7, lr}
 8002564:	b086      	sub	sp, #24
 8002566:	af00      	add	r7, sp, #0
 8002568:	4603      	mov	r3, r0
 800256a:	60b9      	str	r1, [r7, #8]
 800256c:	607a      	str	r2, [r7, #4]
 800256e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002570:	2300      	movs	r3, #0
 8002572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002574:	f7ff ff3e 	bl	80023f4 <__NVIC_GetPriorityGrouping>
 8002578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	68b9      	ldr	r1, [r7, #8]
 800257e:	6978      	ldr	r0, [r7, #20]
 8002580:	f7ff ff8e 	bl	80024a0 <NVIC_EncodePriority>
 8002584:	4602      	mov	r2, r0
 8002586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800258a:	4611      	mov	r1, r2
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff ff5d 	bl	800244c <__NVIC_SetPriority>
}
 8002592:	bf00      	nop
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}

0800259a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800259a:	b580      	push	{r7, lr}
 800259c:	b082      	sub	sp, #8
 800259e:	af00      	add	r7, sp, #0
 80025a0:	4603      	mov	r3, r0
 80025a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a8:	4618      	mov	r0, r3
 80025aa:	f7ff ff31 	bl	8002410 <__NVIC_EnableIRQ>
}
 80025ae:	bf00      	nop
 80025b0:	3708      	adds	r7, #8
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b082      	sub	sp, #8
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025be:	6878      	ldr	r0, [r7, #4]
 80025c0:	f7ff ffa2 	bl	8002508 <SysTick_Config>
 80025c4:	4603      	mov	r3, r0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3708      	adds	r7, #8
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b082      	sub	sp, #8
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d101      	bne.n	80025e0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80025dc:	2301      	movs	r3, #1
 80025de:	e014      	b.n	800260a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	791b      	ldrb	r3, [r3, #4]
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d105      	bne.n	80025f6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f7fe f903 	bl	80007fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2202      	movs	r2, #2
 80025fa:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2201      	movs	r2, #1
 8002606:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3708      	adds	r7, #8
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}

08002612 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002612:	b480      	push	{r7}
 8002614:	b087      	sub	sp, #28
 8002616:	af00      	add	r7, sp, #0
 8002618:	60f8      	str	r0, [r7, #12]
 800261a:	60b9      	str	r1, [r7, #8]
 800261c:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	795b      	ldrb	r3, [r3, #5]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_DAC_ConfigChannel+0x18>
 8002626:	2302      	movs	r3, #2
 8002628:	e03c      	b.n	80026a4 <HAL_DAC_ConfigChannel+0x92>
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2202      	movs	r2, #2
 8002634:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	f003 0310 	and.w	r3, r3, #16
 8002644:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43db      	mvns	r3, r3
 800264e:	697a      	ldr	r2, [r7, #20]
 8002650:	4013      	ands	r3, r2
 8002652:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	685b      	ldr	r3, [r3, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	f003 0310 	and.w	r3, r3, #16
 8002666:	693a      	ldr	r2, [r7, #16]
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	697a      	ldr	r2, [r7, #20]
 800266e:	4313      	orrs	r3, r2
 8002670:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	697a      	ldr	r2, [r7, #20]
 8002678:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6819      	ldr	r1, [r3, #0]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	22c0      	movs	r2, #192	; 0xc0
 8002688:	fa02 f303 	lsl.w	r3, r2, r3
 800268c:	43da      	mvns	r2, r3
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	400a      	ands	r2, r1
 8002694:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2201      	movs	r2, #1
 800269a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80026a2:	2300      	movs	r3, #0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	371c      	adds	r7, #28
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026bc:	f7ff fbd4 	bl	8001e68 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e099      	b.n	8002800 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2202      	movs	r2, #2
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f022 0201 	bic.w	r2, r2, #1
 80026ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ec:	e00f      	b.n	800270e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ee:	f7ff fbbb 	bl	8001e68 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	d908      	bls.n	800270e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	2220      	movs	r2, #32
 8002700:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2203      	movs	r2, #3
 8002706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e078      	b.n	8002800 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0301 	and.w	r3, r3, #1
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1e8      	bne.n	80026ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	4b38      	ldr	r3, [pc, #224]	; (8002808 <HAL_DMA_Init+0x158>)
 8002728:	4013      	ands	r3, r2
 800272a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	685a      	ldr	r2, [r3, #4]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800273a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002746:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002752:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6a1b      	ldr	r3, [r3, #32]
 8002758:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	4313      	orrs	r3, r2
 800275e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b04      	cmp	r3, #4
 8002766:	d107      	bne.n	8002778 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	4313      	orrs	r3, r2
 8002772:	697a      	ldr	r2, [r7, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	697a      	ldr	r2, [r7, #20]
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	f023 0307 	bic.w	r3, r3, #7
 800278e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002794:	697a      	ldr	r2, [r7, #20]
 8002796:	4313      	orrs	r3, r2
 8002798:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	2b04      	cmp	r3, #4
 80027a0:	d117      	bne.n	80027d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a6:	697a      	ldr	r2, [r7, #20]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d00e      	beq.n	80027d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027b4:	6878      	ldr	r0, [r7, #4]
 80027b6:	f000 fb0d 	bl	8002dd4 <DMA_CheckFifoParam>
 80027ba:	4603      	mov	r3, r0
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d008      	beq.n	80027d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027ce:	2301      	movs	r3, #1
 80027d0:	e016      	b.n	8002800 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	697a      	ldr	r2, [r7, #20]
 80027d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 fac4 	bl	8002d68 <DMA_CalcBaseAndBitshift>
 80027e0:	4603      	mov	r3, r0
 80027e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	223f      	movs	r2, #63	; 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027fe:	2300      	movs	r3, #0
}
 8002800:	4618      	mov	r0, r3
 8002802:	3718      	adds	r7, #24
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}
 8002808:	f010803f 	.word	0xf010803f

0800280c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b086      	sub	sp, #24
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	60b9      	str	r1, [r7, #8]
 8002816:	607a      	str	r2, [r7, #4]
 8002818:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002822:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_DMA_Start_IT+0x26>
 800282e:	2302      	movs	r3, #2
 8002830:	e040      	b.n	80028b4 <HAL_DMA_Start_IT+0xa8>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002840:	b2db      	uxtb	r3, r3
 8002842:	2b01      	cmp	r3, #1
 8002844:	d12f      	bne.n	80028a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	2200      	movs	r2, #0
 8002852:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	68b9      	ldr	r1, [r7, #8]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 fa56 	bl	8002d0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002864:	223f      	movs	r2, #63	; 0x3f
 8002866:	409a      	lsls	r2, r3
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f042 0216 	orr.w	r2, r2, #22
 800287a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 0208 	orr.w	r2, r2, #8
 8002892:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f042 0201 	orr.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	e005      	b.n	80028b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80028ae:	2302      	movs	r3, #2
 80028b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80028b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}

080028bc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b084      	sub	sp, #16
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028c8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80028ca:	f7ff facd 	bl	8001e68 <HAL_GetTick>
 80028ce:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	2b02      	cmp	r3, #2
 80028da:	d008      	beq.n	80028ee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2280      	movs	r2, #128	; 0x80
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e052      	b.n	8002994 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0216 	bic.w	r2, r2, #22
 80028fc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	695a      	ldr	r2, [r3, #20]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800290c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002912:	2b00      	cmp	r3, #0
 8002914:	d103      	bne.n	800291e <HAL_DMA_Abort+0x62>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800291a:	2b00      	cmp	r3, #0
 800291c:	d007      	beq.n	800292e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f022 0208 	bic.w	r2, r2, #8
 800292c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	681a      	ldr	r2, [r3, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f022 0201 	bic.w	r2, r2, #1
 800293c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800293e:	e013      	b.n	8002968 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002940:	f7ff fa92 	bl	8001e68 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b05      	cmp	r3, #5
 800294c:	d90c      	bls.n	8002968 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2220      	movs	r2, #32
 8002952:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2203      	movs	r2, #3
 8002958:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2200      	movs	r2, #0
 8002960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e015      	b.n	8002994 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0301 	and.w	r3, r3, #1
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1e4      	bne.n	8002940 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297a:	223f      	movs	r2, #63	; 0x3f
 800297c:	409a      	lsls	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2201      	movs	r2, #1
 8002986:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d004      	beq.n	80029ba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e00c      	b.n	80029d4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	2205      	movs	r2, #5
 80029be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f022 0201 	bic.w	r2, r2, #1
 80029d0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b086      	sub	sp, #24
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ec:	4b92      	ldr	r3, [pc, #584]	; (8002c38 <HAL_DMA_IRQHandler+0x258>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a92      	ldr	r2, [pc, #584]	; (8002c3c <HAL_DMA_IRQHandler+0x25c>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a9b      	lsrs	r3, r3, #10
 80029f8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0a:	2208      	movs	r2, #8
 8002a0c:	409a      	lsls	r2, r3
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	4013      	ands	r3, r2
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d01a      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f003 0304 	and.w	r3, r3, #4
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0204 	bic.w	r2, r2, #4
 8002a32:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a38:	2208      	movs	r2, #8
 8002a3a:	409a      	lsls	r2, r3
 8002a3c:	693b      	ldr	r3, [r7, #16]
 8002a3e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a44:	f043 0201 	orr.w	r2, r3, #1
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d012      	beq.n	8002a82 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	695b      	ldr	r3, [r3, #20]
 8002a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00b      	beq.n	8002a82 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6e:	2201      	movs	r2, #1
 8002a70:	409a      	lsls	r2, r3
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a7a:	f043 0202 	orr.w	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	2204      	movs	r2, #4
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d012      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d00b      	beq.n	8002ab8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa4:	2204      	movs	r2, #4
 8002aa6:	409a      	lsls	r2, r3
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ab0:	f043 0204 	orr.w	r2, r3, #4
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abc:	2210      	movs	r2, #16
 8002abe:	409a      	lsls	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d043      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d03c      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ada:	2210      	movs	r2, #16
 8002adc:	409a      	lsls	r2, r3
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d018      	beq.n	8002b22 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d108      	bne.n	8002b10 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d024      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	4798      	blx	r3
 8002b0e:	e01f      	b.n	8002b50 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d01b      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
 8002b20:	e016      	b.n	8002b50 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d107      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681a      	ldr	r2, [r3, #0]
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0208 	bic.w	r2, r2, #8
 8002b3e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b54:	2220      	movs	r2, #32
 8002b56:	409a      	lsls	r2, r3
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 808e 	beq.w	8002c7e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0310 	and.w	r3, r3, #16
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	f000 8086 	beq.w	8002c7e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b76:	2220      	movs	r2, #32
 8002b78:	409a      	lsls	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	2b05      	cmp	r3, #5
 8002b88:	d136      	bne.n	8002bf8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f022 0216 	bic.w	r2, r2, #22
 8002b98:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	695a      	ldr	r2, [r3, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ba8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d103      	bne.n	8002bba <HAL_DMA_IRQHandler+0x1da>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d007      	beq.n	8002bca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0208 	bic.w	r2, r2, #8
 8002bc8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	223f      	movs	r2, #63	; 0x3f
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2201      	movs	r2, #1
 8002bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2200      	movs	r2, #0
 8002be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d07d      	beq.n	8002cea <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
        }
        return;
 8002bf6:	e078      	b.n	8002cea <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d01c      	beq.n	8002c40 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d108      	bne.n	8002c26 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d030      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e02b      	b.n	8002c7e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d027      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	4798      	blx	r3
 8002c36:	e022      	b.n	8002c7e <HAL_DMA_IRQHandler+0x29e>
 8002c38:	20000000 	.word	0x20000000
 8002c3c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10f      	bne.n	8002c6e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0210 	bic.w	r2, r2, #16
 8002c5c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2201      	movs	r2, #1
 8002c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d003      	beq.n	8002c7e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d032      	beq.n	8002cec <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c8a:	f003 0301 	and.w	r3, r3, #1
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d022      	beq.n	8002cd8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2205      	movs	r2, #5
 8002c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	681a      	ldr	r2, [r3, #0]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f022 0201 	bic.w	r2, r2, #1
 8002ca8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3301      	adds	r3, #1
 8002cae:	60bb      	str	r3, [r7, #8]
 8002cb0:	697a      	ldr	r2, [r7, #20]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d307      	bcc.n	8002cc6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d1f2      	bne.n	8002caa <HAL_DMA_IRQHandler+0x2ca>
 8002cc4:	e000      	b.n	8002cc8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002cc6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2201      	movs	r2, #1
 8002ccc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d005      	beq.n	8002cec <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e000      	b.n	8002cec <HAL_DMA_IRQHandler+0x30c>
        return;
 8002cea:	bf00      	nop
    }
  }
}
 8002cec:	3718      	adds	r7, #24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop

08002cf4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b085      	sub	sp, #20
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002d28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	683a      	ldr	r2, [r7, #0]
 8002d30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	2b40      	cmp	r3, #64	; 0x40
 8002d38:	d108      	bne.n	8002d4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68ba      	ldr	r2, [r7, #8]
 8002d48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d4a:	e007      	b.n	8002d5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68ba      	ldr	r2, [r7, #8]
 8002d52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	60da      	str	r2, [r3, #12]
}
 8002d5c:	bf00      	nop
 8002d5e:	3714      	adds	r7, #20
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b085      	sub	sp, #20
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	b2db      	uxtb	r3, r3
 8002d76:	3b10      	subs	r3, #16
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <DMA_CalcBaseAndBitshift+0x64>)
 8002d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d82:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	4413      	add	r3, r2
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2b03      	cmp	r3, #3
 8002d94:	d909      	bls.n	8002daa <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d9e:	f023 0303 	bic.w	r3, r3, #3
 8002da2:	1d1a      	adds	r2, r3, #4
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	659a      	str	r2, [r3, #88]	; 0x58
 8002da8:	e007      	b.n	8002dba <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop
 8002dcc:	aaaaaaab 	.word	0xaaaaaaab
 8002dd0:	08017a88 	.word	0x08017a88

08002dd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	699b      	ldr	r3, [r3, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d11f      	bne.n	8002e2e <DMA_CheckFifoParam+0x5a>
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d856      	bhi.n	8002ea2 <DMA_CheckFifoParam+0xce>
 8002df4:	a201      	add	r2, pc, #4	; (adr r2, 8002dfc <DMA_CheckFifoParam+0x28>)
 8002df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfa:	bf00      	nop
 8002dfc:	08002e0d 	.word	0x08002e0d
 8002e00:	08002e1f 	.word	0x08002e1f
 8002e04:	08002e0d 	.word	0x08002e0d
 8002e08:	08002ea3 	.word	0x08002ea3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d046      	beq.n	8002ea6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e1c:	e043      	b.n	8002ea6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e26:	d140      	bne.n	8002eaa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2c:	e03d      	b.n	8002eaa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e36:	d121      	bne.n	8002e7c <DMA_CheckFifoParam+0xa8>
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	2b03      	cmp	r3, #3
 8002e3c:	d837      	bhi.n	8002eae <DMA_CheckFifoParam+0xda>
 8002e3e:	a201      	add	r2, pc, #4	; (adr r2, 8002e44 <DMA_CheckFifoParam+0x70>)
 8002e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e44:	08002e55 	.word	0x08002e55
 8002e48:	08002e5b 	.word	0x08002e5b
 8002e4c:	08002e55 	.word	0x08002e55
 8002e50:	08002e6d 	.word	0x08002e6d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	73fb      	strb	r3, [r7, #15]
      break;
 8002e58:	e030      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d025      	beq.n	8002eb2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e6a:	e022      	b.n	8002eb2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e74:	d11f      	bne.n	8002eb6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e7a:	e01c      	b.n	8002eb6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d903      	bls.n	8002e8a <DMA_CheckFifoParam+0xb6>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d003      	beq.n	8002e90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e88:	e018      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e8e:	e015      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00e      	beq.n	8002eba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e00b      	b.n	8002eba <DMA_CheckFifoParam+0xe6>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e00a      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002ea6:	bf00      	nop
 8002ea8:	e008      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eaa:	bf00      	nop
 8002eac:	e006      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eae:	bf00      	nop
 8002eb0:	e004      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eb2:	bf00      	nop
 8002eb4:	e002      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;   
 8002eb6:	bf00      	nop
 8002eb8:	e000      	b.n	8002ebc <DMA_CheckFifoParam+0xe8>
      break;
 8002eba:	bf00      	nop
    }
  } 
  
  return status; 
 8002ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop

08002ecc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	61fb      	str	r3, [r7, #28]
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002edc:	4baa      	ldr	r3, [pc, #680]	; (8003188 <HAL_ETH_Init+0x2bc>)
 8002ede:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e183      	b.n	80031fa <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f006 fc92 	bl	8009830 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	60bb      	str	r3, [r7, #8]
 8002f10:	4b9e      	ldr	r3, [pc, #632]	; (800318c <HAL_ETH_Init+0x2c0>)
 8002f12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f14:	4a9d      	ldr	r2, [pc, #628]	; (800318c <HAL_ETH_Init+0x2c0>)
 8002f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f1a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f1c:	4b9b      	ldr	r3, [pc, #620]	; (800318c <HAL_ETH_Init+0x2c0>)
 8002f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f24:	60bb      	str	r3, [r7, #8]
 8002f26:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002f28:	4b99      	ldr	r3, [pc, #612]	; (8003190 <HAL_ETH_Init+0x2c4>)
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	4a98      	ldr	r2, [pc, #608]	; (8003190 <HAL_ETH_Init+0x2c4>)
 8002f2e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f32:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002f34:	4b96      	ldr	r3, [pc, #600]	; (8003190 <HAL_ETH_Init+0x2c4>)
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a1b      	ldr	r3, [r3, #32]
 8002f3c:	4994      	ldr	r1, [pc, #592]	; (8003190 <HAL_ETH_Init+0x2c4>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0201 	orr.w	r2, r2, #1
 8002f54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f58:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f5a:	f7fe ff85 	bl	8001e68 <HAL_GetTick>
 8002f5e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f60:	e011      	b.n	8002f86 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f62:	f7fe ff81 	bl	8001e68 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f70:	d909      	bls.n	8002f86 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2203      	movs	r2, #3
 8002f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e139      	b.n	80031fa <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1e4      	bne.n	8002f62 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691b      	ldr	r3, [r3, #16]
 8002f9e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f023 031c 	bic.w	r3, r3, #28
 8002fa6:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002fa8:	f002 f908 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8002fac:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	4a78      	ldr	r2, [pc, #480]	; (8003194 <HAL_ETH_Init+0x2c8>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d908      	bls.n	8002fc8 <HAL_ETH_Init+0xfc>
 8002fb6:	69bb      	ldr	r3, [r7, #24]
 8002fb8:	4a77      	ldr	r2, [pc, #476]	; (8003198 <HAL_ETH_Init+0x2cc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d804      	bhi.n	8002fc8 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	f043 0308 	orr.w	r3, r3, #8
 8002fc4:	61fb      	str	r3, [r7, #28]
 8002fc6:	e027      	b.n	8003018 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4a73      	ldr	r2, [pc, #460]	; (8003198 <HAL_ETH_Init+0x2cc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d908      	bls.n	8002fe2 <HAL_ETH_Init+0x116>
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4a6d      	ldr	r2, [pc, #436]	; (8003188 <HAL_ETH_Init+0x2bc>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d204      	bcs.n	8002fe2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	f043 030c 	orr.w	r3, r3, #12
 8002fde:	61fb      	str	r3, [r7, #28]
 8002fe0:	e01a      	b.n	8003018 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002fe2:	69bb      	ldr	r3, [r7, #24]
 8002fe4:	4a68      	ldr	r2, [pc, #416]	; (8003188 <HAL_ETH_Init+0x2bc>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d303      	bcc.n	8002ff2 <HAL_ETH_Init+0x126>
 8002fea:	69bb      	ldr	r3, [r7, #24]
 8002fec:	4a6b      	ldr	r2, [pc, #428]	; (800319c <HAL_ETH_Init+0x2d0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d911      	bls.n	8003016 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002ff2:	69bb      	ldr	r3, [r7, #24]
 8002ff4:	4a69      	ldr	r2, [pc, #420]	; (800319c <HAL_ETH_Init+0x2d0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d908      	bls.n	800300c <HAL_ETH_Init+0x140>
 8002ffa:	69bb      	ldr	r3, [r7, #24]
 8002ffc:	4a68      	ldr	r2, [pc, #416]	; (80031a0 <HAL_ETH_Init+0x2d4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d804      	bhi.n	800300c <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	f043 0304 	orr.w	r3, r3, #4
 8003008:	61fb      	str	r3, [r7, #28]
 800300a:	e005      	b.n	8003018 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	f043 0310 	orr.w	r3, r3, #16
 8003012:	61fb      	str	r3, [r7, #28]
 8003014:	e000      	b.n	8003018 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8003016:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69fa      	ldr	r2, [r7, #28]
 800301e:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8003020:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003024:	2100      	movs	r1, #0
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f000 fb98 	bl	800375c <HAL_ETH_WritePHYRegister>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d00b      	beq.n	800304a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8003036:	6939      	ldr	r1, [r7, #16]
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 fd4d 	bl	8003ad8 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0d7      	b.n	80031fa <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800304a:	20ff      	movs	r0, #255	; 0xff
 800304c:	f7fe ff18 	bl	8001e80 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80a5 	beq.w	80031a4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800305a:	f7fe ff05 	bl	8001e68 <HAL_GetTick>
 800305e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003060:	f107 030c 	add.w	r3, r7, #12
 8003064:	461a      	mov	r2, r3
 8003066:	2101      	movs	r1, #1
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fb0f 	bl	800368c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800306e:	f7fe fefb 	bl	8001e68 <HAL_GetTick>
 8003072:	4602      	mov	r2, r0
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	1ad3      	subs	r3, r2, r3
 8003078:	f241 3288 	movw	r2, #5000	; 0x1388
 800307c:	4293      	cmp	r3, r2
 800307e:	d90f      	bls.n	80030a0 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003084:	6939      	ldr	r1, [r7, #16]
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fd26 	bl	8003ad8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800309c:	2303      	movs	r3, #3
 800309e:	e0ac      	b.n	80031fa <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	f003 0304 	and.w	r3, r3, #4
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d0da      	beq.n	8003060 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 80030aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80030ae:	2100      	movs	r1, #0
 80030b0:	6878      	ldr	r0, [r7, #4]
 80030b2:	f000 fb53 	bl	800375c <HAL_ETH_WritePHYRegister>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00b      	beq.n	80030d4 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030c0:	6939      	ldr	r1, [r7, #16]
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fd08 	bl	8003ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 80030d0:	2301      	movs	r3, #1
 80030d2:	e092      	b.n	80031fa <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 80030d4:	f7fe fec8 	bl	8001e68 <HAL_GetTick>
 80030d8:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 80030da:	f107 030c 	add.w	r3, r7, #12
 80030de:	461a      	mov	r2, r3
 80030e0:	2101      	movs	r1, #1
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 fad2 	bl	800368c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030e8:	f7fe febe 	bl	8001e68 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d90f      	bls.n	800311a <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030fe:	6939      	ldr	r1, [r7, #16]
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 fce9 	bl	8003ad8 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2200      	movs	r2, #0
 8003112:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e06f      	b.n	80031fa <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f003 0320 	and.w	r3, r3, #32
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0da      	beq.n	80030da <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8003124:	f107 030c 	add.w	r3, r7, #12
 8003128:	461a      	mov	r2, r3
 800312a:	2110      	movs	r1, #16
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 faad 	bl	800368c <HAL_ETH_ReadPHYRegister>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d00b      	beq.n	8003150 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800313c:	6939      	ldr	r1, [r7, #16]
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f000 fcca 	bl	8003ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800314c:	2301      	movs	r3, #1
 800314e:	e054      	b.n	80031fa <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0304 	and.w	r3, r3, #4
 8003156:	2b00      	cmp	r3, #0
 8003158:	d004      	beq.n	8003164 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	e002      	b.n	800316a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f003 0302 	and.w	r3, r3, #2
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	609a      	str	r2, [r3, #8]
 800317a:	e035      	b.n	80031e8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e030      	b.n	80031e8 <HAL_ETH_Init+0x31c>
 8003186:	bf00      	nop
 8003188:	03938700 	.word	0x03938700
 800318c:	40023800 	.word	0x40023800
 8003190:	40013800 	.word	0x40013800
 8003194:	01312cff 	.word	0x01312cff
 8003198:	02160ebf 	.word	0x02160ebf
 800319c:	05f5e0ff 	.word	0x05f5e0ff
 80031a0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	08db      	lsrs	r3, r3, #3
 80031aa:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	689b      	ldr	r3, [r3, #8]
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 80031b4:	4313      	orrs	r3, r2
 80031b6:	b29b      	uxth	r3, r3
 80031b8:	461a      	mov	r2, r3
 80031ba:	2100      	movs	r1, #0
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	f000 facd 	bl	800375c <HAL_ETH_WritePHYRegister>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00b      	beq.n	80031e0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80031cc:	6939      	ldr	r1, [r7, #16]
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 fc82 	bl	8003ad8 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2201      	movs	r2, #1
 80031d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e00c      	b.n	80031fa <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031e0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031e4:	f7fe fe4c 	bl	8001e80 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031e8:	6939      	ldr	r1, [r7, #16]
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 fc74 	bl	8003ad8 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3720      	adds	r7, #32
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop

08003204 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
 800320a:	60f8      	str	r0, [r7, #12]
 800320c:	60b9      	str	r1, [r7, #8]
 800320e:	607a      	str	r2, [r7, #4]
 8003210:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800321c:	2b01      	cmp	r3, #1
 800321e:	d101      	bne.n	8003224 <HAL_ETH_DMATxDescListInit+0x20>
 8003220:	2302      	movs	r3, #2
 8003222:	e052      	b.n	80032ca <HAL_ETH_DMATxDescListInit+0xc6>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2202      	movs	r2, #2
 8003230:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 800323a:	2300      	movs	r3, #0
 800323c:	617b      	str	r3, [r7, #20]
 800323e:	e030      	b.n	80032a2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	015b      	lsls	r3, r3, #5
 8003244:	68ba      	ldr	r2, [r7, #8]
 8003246:	4413      	add	r3, r2
 8003248:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003250:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003252:	697b      	ldr	r3, [r7, #20]
 8003254:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003258:	fb02 f303 	mul.w	r3, r2, r3
 800325c:	687a      	ldr	r2, [r7, #4]
 800325e:	4413      	add	r3, r2
 8003260:	461a      	mov	r2, r3
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d105      	bne.n	800327a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	3b01      	subs	r3, #1
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	429a      	cmp	r2, r3
 8003282:	d208      	bcs.n	8003296 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	015b      	lsls	r3, r3, #5
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	4413      	add	r3, r2
 800328e:	461a      	mov	r2, r3
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	60da      	str	r2, [r3, #12]
 8003294:	e002      	b.n	800329c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	3301      	adds	r3, #1
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d3ca      	bcc.n	8003240 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68ba      	ldr	r2, [r7, #8]
 80032b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b4:	3310      	adds	r3, #16
 80032b6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	4618      	mov	r0, r3
 80032cc:	371c      	adds	r7, #28
 80032ce:	46bd      	mov	sp, r7
 80032d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d4:	4770      	bx	lr

080032d6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 80032d6:	b480      	push	{r7}
 80032d8:	b087      	sub	sp, #28
 80032da:	af00      	add	r7, sp, #0
 80032dc:	60f8      	str	r0, [r7, #12]
 80032de:	60b9      	str	r1, [r7, #8]
 80032e0:	607a      	str	r2, [r7, #4]
 80032e2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_ETH_DMARxDescListInit+0x20>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e056      	b.n	80033a4 <HAL_ETH_DMARxDescListInit+0xce>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2202      	movs	r2, #2
 8003302:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	68ba      	ldr	r2, [r7, #8]
 800330a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e034      	b.n	800337c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	015b      	lsls	r3, r3, #5
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	4413      	add	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003322:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	f244 52f4 	movw	r2, #17908	; 0x45f4
 800332a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003332:	fb02 f303 	mul.w	r3, r2, r3
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	461a      	mov	r2, r3
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d105      	bne.n	8003354 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	3b01      	subs	r3, #1
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	429a      	cmp	r2, r3
 800335c:	d208      	bcs.n	8003370 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	3301      	adds	r3, #1
 8003362:	015b      	lsls	r3, r3, #5
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	4413      	add	r3, r2
 8003368:	461a      	mov	r2, r3
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	60da      	str	r2, [r3, #12]
 800336e:	e002      	b.n	8003376 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	3301      	adds	r3, #1
 800337a:	617b      	str	r3, [r7, #20]
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	429a      	cmp	r2, r3
 8003382:	d3c6      	bcc.n	8003312 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	68ba      	ldr	r2, [r7, #8]
 800338a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338e:	330c      	adds	r3, #12
 8003390:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	371c      	adds	r7, #28
 80033a8:	46bd      	mov	sp, r7
 80033aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ae:	4770      	bx	lr

080033b0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b087      	sub	sp, #28
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
 80033b8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 80033ba:	2300      	movs	r3, #0
 80033bc:	617b      	str	r3, [r7, #20]
 80033be:	2300      	movs	r3, #0
 80033c0:	60fb      	str	r3, [r7, #12]
 80033c2:	2300      	movs	r3, #0
 80033c4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d101      	bne.n	80033d4 <HAL_ETH_TransmitFrame+0x24>
 80033d0:	2302      	movs	r3, #2
 80033d2:	e0cd      	b.n	8003570 <HAL_ETH_TransmitFrame+0x1c0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2201      	movs	r2, #1
 80033d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2201      	movs	r2, #1
 80033ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2200      	movs	r2, #0
 80033f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80033fa:	2301      	movs	r3, #1
 80033fc:	e0b8      	b.n	8003570 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	da09      	bge.n	800341c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2212      	movs	r2, #18
 800340c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0a9      	b.n	8003570 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003422:	4293      	cmp	r3, r2
 8003424:	d915      	bls.n	8003452 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	4a54      	ldr	r2, [pc, #336]	; (800357c <HAL_ETH_TransmitFrame+0x1cc>)
 800342a:	fba2 2303 	umull	r2, r3, r2, r3
 800342e:	0a9b      	lsrs	r3, r3, #10
 8003430:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8003432:	683a      	ldr	r2, [r7, #0]
 8003434:	4b51      	ldr	r3, [pc, #324]	; (800357c <HAL_ETH_TransmitFrame+0x1cc>)
 8003436:	fba3 1302 	umull	r1, r3, r3, r2
 800343a:	0a9b      	lsrs	r3, r3, #10
 800343c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d005      	beq.n	8003456 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e001      	b.n	8003456 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003452:	2301      	movs	r3, #1
 8003454:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d11c      	bne.n	8003496 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800346a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003470:	683a      	ldr	r2, [r7, #0]
 8003472:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003476:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003482:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003486:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	461a      	mov	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	62da      	str	r2, [r3, #44]	; 0x2c
 8003494:	e04b      	b.n	800352e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
 800349a:	e044      	b.n	8003526 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	681a      	ldr	r2, [r3, #0]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034aa:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80034c0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80034ca:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	693a      	ldr	r2, [r7, #16]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d116      	bne.n	8003504 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034e4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4a25      	ldr	r2, [pc, #148]	; (8003580 <HAL_ETH_TransmitFrame+0x1d0>)
 80034ea:	fb02 f203 	mul.w	r2, r2, r3
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	4413      	add	r3, r2
 80034f2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034f6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003502:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003512:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	461a      	mov	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	3301      	adds	r3, #1
 8003524:	613b      	str	r3, [r7, #16]
 8003526:	693a      	ldr	r2, [r7, #16]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	429a      	cmp	r2, r3
 800352c:	d3b6      	bcc.n	800349c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003536:	3314      	adds	r3, #20
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0304 	and.w	r3, r3, #4
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00d      	beq.n	800355e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800354a:	3314      	adds	r3, #20
 800354c:	2204      	movs	r2, #4
 800354e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003558:	3304      	adds	r3, #4
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800356e:	2300      	movs	r3, #0
}
 8003570:	4618      	mov	r0, r3
 8003572:	371c      	adds	r7, #28
 8003574:	46bd      	mov	sp, r7
 8003576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357a:	4770      	bx	lr
 800357c:	ac02b00b 	.word	0xac02b00b
 8003580:	fffffa0c 	.word	0xfffffa0c

08003584 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ETH_GetReceivedFrame+0x1a>
 800359a:	2302      	movs	r3, #2
 800359c:	e070      	b.n	8003680 <HAL_ETH_GetReceivedFrame+0xfc>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2202      	movs	r2, #2
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	db5a      	blt.n	800366e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d030      	beq.n	8003628 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ca:	1c5a      	adds	r2, r3, #1
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d103      	bne.n	80035e0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035f4:	3b04      	subs	r3, #4
 80035f6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	68fa      	ldr	r2, [r7, #12]
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003602:	689a      	ldr	r2, [r3, #8]
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	461a      	mov	r2, r3
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 8003624:	2300      	movs	r3, #0
 8003626:	e02b      	b.n	8003680 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003632:	2b00      	cmp	r3, #0
 8003634:	d010      	beq.n	8003658 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	461a      	mov	r2, r3
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	629a      	str	r2, [r3, #40]	; 0x28
 8003656:	e00a      	b.n	800366e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800365c:	1c5a      	adds	r2, r3, #1
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2201      	movs	r2, #1
 8003672:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
}
 8003680:	4618      	mov	r0, r3
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr

0800368c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	60f8      	str	r0, [r7, #12]
 8003694:	460b      	mov	r3, r1
 8003696:	607a      	str	r2, [r7, #4]
 8003698:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800369e:	2300      	movs	r3, #0
 80036a0:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	2b82      	cmp	r3, #130	; 0x82
 80036ac:	d101      	bne.n	80036b2 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80036ae:	2302      	movs	r3, #2
 80036b0:	e050      	b.n	8003754 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2282      	movs	r2, #130	; 0x82
 80036b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	691b      	ldr	r3, [r3, #16]
 80036c0:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	f003 031c 	and.w	r3, r3, #28
 80036c8:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	8a1b      	ldrh	r3, [r3, #16]
 80036ce:	02db      	lsls	r3, r3, #11
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	697a      	ldr	r2, [r7, #20]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80036d8:	897b      	ldrh	r3, [r7, #10]
 80036da:	019b      	lsls	r3, r3, #6
 80036dc:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	4313      	orrs	r3, r2
 80036e4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80036e6:	697b      	ldr	r3, [r7, #20]
 80036e8:	f023 0302 	bic.w	r3, r3, #2
 80036ec:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	697a      	ldr	r2, [r7, #20]
 80036fc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036fe:	f7fe fbb3 	bl	8001e68 <HAL_GetTick>
 8003702:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003704:	e015      	b.n	8003732 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8003706:	f7fe fbaf 	bl	8001e68 <HAL_GetTick>
 800370a:	4602      	mov	r2, r0
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	1ad3      	subs	r3, r2, r3
 8003710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003714:	d309      	bcc.n	800372a <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e014      	b.n	8003754 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	691b      	ldr	r3, [r3, #16]
 8003730:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8003732:	697b      	ldr	r3, [r7, #20]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b00      	cmp	r3, #0
 800373a:	d1e4      	bne.n	8003706 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	695b      	ldr	r3, [r3, #20]
 8003742:	b29b      	uxth	r3, r3
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003752:	2300      	movs	r3, #0
}
 8003754:	4618      	mov	r0, r3
 8003756:	3718      	adds	r7, #24
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}

0800375c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	460b      	mov	r3, r1
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800376a:	2300      	movs	r3, #0
 800376c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800376e:	2300      	movs	r3, #0
 8003770:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b42      	cmp	r3, #66	; 0x42
 800377c:	d101      	bne.n	8003782 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800377e:	2302      	movs	r3, #2
 8003780:	e04e      	b.n	8003820 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2242      	movs	r2, #66	; 0x42
 8003786:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f003 031c 	and.w	r3, r3, #28
 8003798:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8a1b      	ldrh	r3, [r3, #16]
 800379e:	02db      	lsls	r3, r3, #11
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80037a8:	897b      	ldrh	r3, [r7, #10]
 80037aa:	019b      	lsls	r3, r3, #6
 80037ac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80037b0:	697a      	ldr	r2, [r7, #20]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f043 0302 	orr.w	r3, r3, #2
 80037bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	f043 0301 	orr.w	r3, r3, #1
 80037c4:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	b29a      	uxth	r2, r3
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	697a      	ldr	r2, [r7, #20]
 80037d6:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80037d8:	f7fe fb46 	bl	8001e68 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037de:	e015      	b.n	800380c <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80037e0:	f7fe fb42 	bl	8001e68 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ee:	d309      	bcc.n	8003804 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e00d      	b.n	8003820 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f003 0301 	and.w	r3, r3, #1
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1e4      	bne.n	80037e0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2201      	movs	r2, #1
 800381a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800381e:	2300      	movs	r3, #0
}
 8003820:	4618      	mov	r0, r3
 8003822:	3718      	adds	r7, #24
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003836:	2b01      	cmp	r3, #1
 8003838:	d101      	bne.n	800383e <HAL_ETH_Start+0x16>
 800383a:	2302      	movs	r3, #2
 800383c:	e01f      	b.n	800387e <HAL_ETH_Start+0x56>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	f000 fb44 	bl	8003edc <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f000 fb7b 	bl	8003f50 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fc12 	bl	8004084 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fbaf 	bl	8003fc4 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f000 fbdc 	bl	8004024 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2200      	movs	r2, #0
 8003878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003886:	b580      	push	{r7, lr}
 8003888:	b082      	sub	sp, #8
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003894:	2b01      	cmp	r3, #1
 8003896:	d101      	bne.n	800389c <HAL_ETH_Stop+0x16>
 8003898:	2302      	movs	r3, #2
 800389a:	e01f      	b.n	80038dc <HAL_ETH_Stop+0x56>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2201      	movs	r2, #1
 80038a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 fba1 	bl	8003ff4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 fbce 	bl	8004054 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 fb66 	bl	8003f8a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fbe0 	bl	8004084 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fb26 	bl	8003f16 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2201      	movs	r2, #1
 80038ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 80038da:	2300      	movs	r3, #0
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3708      	adds	r7, #8
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d101      	bne.n	8003900 <HAL_ETH_ConfigMAC+0x1c>
 80038fc:	2302      	movs	r3, #2
 80038fe:	e0e4      	b.n	8003aca <HAL_ETH_ConfigMAC+0x1e6>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2202      	movs	r2, #2
 800390c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	2b00      	cmp	r3, #0
 8003914:	f000 80b1 	beq.w	8003a7a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003920:	68fa      	ldr	r2, [r7, #12]
 8003922:	4b6c      	ldr	r3, [pc, #432]	; (8003ad4 <HAL_ETH_ConfigMAC+0x1f0>)
 8003924:	4013      	ands	r3, r2
 8003926:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003930:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 8003936:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 800393c:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003942:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003948:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800394e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003954:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800395a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003960:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003966:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800396c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003972:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800398a:	2001      	movs	r0, #1
 800398c:	f7fe fa78 	bl	8001e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039a0:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 80039a6:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 80039ac:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 80039b2:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 80039b4:	683b      	ldr	r3, [r7, #0]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 80039b8:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 80039be:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 80039ca:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 80039cc:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80039d6:	2001      	movs	r0, #1
 80039d8:	f7fe fa52 	bl	8001e80 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039ec:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	683a      	ldr	r2, [r7, #0]
 80039f4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039f6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699b      	ldr	r3, [r3, #24]
 80039fe:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003a06:	4013      	ands	r3, r2
 8003a08:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a0e:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003a14:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 8003a1a:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 8003a20:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 8003a26:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 8003a2c:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 8003a2e:	68fa      	ldr	r2, [r7, #12]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a44:	2001      	movs	r0, #1
 8003a46:	f7fe fa1b 	bl	8001e80 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68fa      	ldr	r2, [r7, #12]
 8003a50:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	69db      	ldr	r3, [r3, #28]
 8003a68:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7fe fa08 	bl	8001e80 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	61da      	str	r2, [r3, #28]
 8003a78:	e01e      	b.n	8003ab8 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a88:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	689a      	ldr	r2, [r3, #8]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	68db      	ldr	r3, [r3, #12]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f7fe f9e8 	bl	8001e80 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003ac8:	2300      	movs	r3, #0
}
 8003aca:	4618      	mov	r0, r3
 8003acc:	3710      	adds	r7, #16
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	bd80      	pop	{r7, pc}
 8003ad2:	bf00      	nop
 8003ad4:	ff20810f 	.word	0xff20810f

08003ad8 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b0b0      	sub	sp, #192	; 0xc0
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d007      	beq.n	8003afe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003af4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003afc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003afe:	2300      	movs	r3, #0
 8003b00:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003b02:	2300      	movs	r3, #0
 8003b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003b06:	2300      	movs	r3, #0
 8003b08:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003b12:	2300      	movs	r3, #0
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d103      	bne.n	8003b26 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b22:	663b      	str	r3, [r7, #96]	; 0x60
 8003b24:	e001      	b.n	8003b2a <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003b26:	2300      	movs	r3, #0
 8003b28:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003b2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b2e:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003b34:	2300      	movs	r3, #0
 8003b36:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003b3c:	2300      	movs	r3, #0
 8003b3e:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003b40:	2300      	movs	r3, #0
 8003b42:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003b44:	2340      	movs	r3, #64	; 0x40
 8003b46:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003b54:	2300      	movs	r3, #0
 8003b56:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003b60:	2300      	movs	r3, #0
 8003b62:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003b66:	2300      	movs	r3, #0
 8003b68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003b72:	2300      	movs	r3, #0
 8003b74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003b84:	2300      	movs	r3, #0
 8003b86:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003b96:	2300      	movs	r3, #0
 8003b98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003bac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bb0:	4bac      	ldr	r3, [pc, #688]	; (8003e64 <ETH_MACDMAConfig+0x38c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003bb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003bba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003bbc:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003bbe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003bc0:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003bc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003bc4:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003bca:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003bcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003bce:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003bd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003bd2:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003bd8:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003bda:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003bdc:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003bde:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003be0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003be2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003be4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003be6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003be8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003bea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003bec:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003bee:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c00:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c0c:	2001      	movs	r0, #1
 8003c0e:	f7fe f937 	bl	8001e80 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c1a:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c1c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003c1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c20:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003c22:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003c24:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003c26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003c2a:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003c2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003c30:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003c32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003c36:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003c38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003c40:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003c48:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c4a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c56:	2001      	movs	r0, #1
 8003c58:	f7fe f912 	bl	8001e80 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c64:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c6e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c78:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c88:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c92:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c96:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003c98:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c9c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003c9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003ca2:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003ca4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003ca8:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003caa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003cae:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003cb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003cb4:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003cb6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003cc8:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cd4:	2001      	movs	r0, #1
 8003cd6:	f7fe f8d3 	bl	8001e80 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ce2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ce4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003ce8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f7fe f8be 	bl	8001e80 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d0c:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d16:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003d1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003d20:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003d22:	2300      	movs	r3, #0
 8003d24:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003d32:	2304      	movs	r3, #4
 8003d34:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003d36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003d3c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d40:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d42:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d46:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d48:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d4c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003d52:	2300      	movs	r3, #0
 8003d54:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d62:	3318      	adds	r3, #24
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d6a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d6e:	4b3e      	ldr	r3, [pc, #248]	; (8003e68 <ETH_MACDMAConfig+0x390>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d76:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003d78:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d7a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003d7c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003d7e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003d80:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003d82:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003d84:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003d86:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003d88:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003d8a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003d8e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003d92:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003d96:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d98:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003daa:	3318      	adds	r3, #24
 8003dac:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003db0:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dba:	3318      	adds	r3, #24
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dc2:	2001      	movs	r0, #1
 8003dc4:	f7fe f85c 	bl	8001e80 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dd0:	3318      	adds	r3, #24
 8003dd2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003dd6:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003dd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003ddc:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003de0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003de4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003de6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003de8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003dea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dec:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003dee:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003df2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e00:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003e10:	2001      	movs	r0, #1
 8003e12:	f7fe f835 	bl	8001e80 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003e22:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d10f      	bne.n	8003e4c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e34:	331c      	adds	r3, #28
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e48:	331c      	adds	r3, #28
 8003e4a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	695b      	ldr	r3, [r3, #20]
 8003e50:	461a      	mov	r2, r3
 8003e52:	2100      	movs	r1, #0
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f809 	bl	8003e6c <ETH_MACAddressConfig>
}
 8003e5a:	bf00      	nop
 8003e5c:	37c0      	adds	r7, #192	; 0xc0
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	ff20810f 	.word	0xff20810f
 8003e68:	f8de3f23 	.word	0xf8de3f23

08003e6c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b087      	sub	sp, #28
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	60f8      	str	r0, [r7, #12]
 8003e74:	60b9      	str	r1, [r7, #8]
 8003e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	3305      	adds	r3, #5
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	687a      	ldr	r2, [r7, #4]
 8003e82:	3204      	adds	r2, #4
 8003e84:	7812      	ldrb	r2, [r2, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	4b11      	ldr	r3, [pc, #68]	; (8003ed4 <ETH_MACAddressConfig+0x68>)
 8003e8e:	4413      	add	r3, r2
 8003e90:	461a      	mov	r2, r3
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	3303      	adds	r3, #3
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	061a      	lsls	r2, r3, #24
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	3302      	adds	r3, #2
 8003ea2:	781b      	ldrb	r3, [r3, #0]
 8003ea4:	041b      	lsls	r3, r3, #16
 8003ea6:	431a      	orrs	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	3301      	adds	r3, #1
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	021b      	lsls	r3, r3, #8
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	7812      	ldrb	r2, [r2, #0]
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003eba:	68ba      	ldr	r2, [r7, #8]
 8003ebc:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <ETH_MACAddressConfig+0x6c>)
 8003ebe:	4413      	add	r3, r2
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	6013      	str	r3, [r2, #0]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40028040 	.word	0x40028040
 8003ed8:	40028044 	.word	0x40028044

08003edc <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 0208 	orr.w	r2, r2, #8
 8003ef6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f00:	2001      	movs	r0, #1
 8003f02:	f000 f8e9 	bl	80040d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68fa      	ldr	r2, [r7, #12]
 8003f0c:	601a      	str	r2, [r3, #0]
}
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}

08003f16 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f16:	b580      	push	{r7, lr}
 8003f18:	b084      	sub	sp, #16
 8003f1a:	af00      	add	r7, sp, #0
 8003f1c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f1e:	2300      	movs	r3, #0
 8003f20:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f022 0208 	bic.w	r2, r2, #8
 8003f30:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f3a:	2001      	movs	r0, #1
 8003f3c:	f000 f8cc 	bl	80040d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	601a      	str	r2, [r3, #0]
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	681a      	ldr	r2, [r3, #0]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f042 0204 	orr.w	r2, r2, #4
 8003f6a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f74:	2001      	movs	r0, #1
 8003f76:	f000 f8af 	bl	80040d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3710      	adds	r7, #16
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}

08003f8a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f8a:	b580      	push	{r7, lr}
 8003f8c:	b084      	sub	sp, #16
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0204 	bic.w	r2, r2, #4
 8003fa4:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003fae:	2001      	movs	r0, #1
 8003fb0:	f000 f892 	bl	80040d8 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	601a      	str	r2, [r3, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	3710      	adds	r7, #16
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	bd80      	pop	{r7, pc}

08003fc4 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fe4:	3318      	adds	r3, #24
 8003fe6:	601a      	str	r2, [r3, #0]
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	3318      	adds	r3, #24
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004010:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004014:	3318      	adds	r3, #24
 8004016:	601a      	str	r2, [r3, #0]
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	3318      	adds	r3, #24
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0202 	orr.w	r2, r2, #2
 8004040:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004044:	3318      	adds	r3, #24
 8004046:	601a      	str	r2, [r3, #0]
}
 8004048:	bf00      	nop
 800404a:	370c      	adds	r7, #12
 800404c:	46bd      	mov	sp, r7
 800404e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004052:	4770      	bx	lr

08004054 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004064:	3318      	adds	r3, #24
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 0202 	bic.w	r2, r2, #2
 8004070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004074:	3318      	adds	r3, #24
 8004076:	601a      	str	r2, [r3, #0]
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b084      	sub	sp, #16
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004098:	3318      	adds	r3, #24
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80040a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040a8:	3318      	adds	r3, #24
 80040aa:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b4:	3318      	adds	r3, #24
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 80040ba:	2001      	movs	r0, #1
 80040bc:	f000 f80c 	bl	80040d8 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040ca:	3318      	adds	r3, #24
 80040cc:	601a      	str	r2, [r3, #0]
}
 80040ce:	bf00      	nop
 80040d0:	3710      	adds	r7, #16
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}
	...

080040d8 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040e0:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <ETH_Delay+0x38>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <ETH_Delay+0x3c>)
 80040e6:	fba2 2303 	umull	r2, r3, r2, r3
 80040ea:	0a5b      	lsrs	r3, r3, #9
 80040ec:	687a      	ldr	r2, [r7, #4]
 80040ee:	fb02 f303 	mul.w	r3, r2, r3
 80040f2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80040f4:	bf00      	nop
  } 
  while (Delay --);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1e5a      	subs	r2, r3, #1
 80040fa:	60fa      	str	r2, [r7, #12]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d1f9      	bne.n	80040f4 <ETH_Delay+0x1c>
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000000 	.word	0x20000000
 8004114:	10624dd3 	.word	0x10624dd3

08004118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004118:	b480      	push	{r7}
 800411a:	b089      	sub	sp, #36	; 0x24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004122:	2300      	movs	r3, #0
 8004124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004126:	2300      	movs	r3, #0
 8004128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800412a:	2300      	movs	r3, #0
 800412c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800412e:	2300      	movs	r3, #0
 8004130:	61fb      	str	r3, [r7, #28]
 8004132:	e177      	b.n	8004424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004134:	2201      	movs	r2, #1
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	fa02 f303 	lsl.w	r3, r2, r3
 800413c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	697a      	ldr	r2, [r7, #20]
 8004144:	4013      	ands	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	429a      	cmp	r2, r3
 800414e:	f040 8166 	bne.w	800441e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	f003 0303 	and.w	r3, r3, #3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d005      	beq.n	800416a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004166:	2b02      	cmp	r3, #2
 8004168:	d130      	bne.n	80041cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	2203      	movs	r2, #3
 8004176:	fa02 f303 	lsl.w	r3, r2, r3
 800417a:	43db      	mvns	r3, r3
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	4013      	ands	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	68da      	ldr	r2, [r3, #12]
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	fa02 f303 	lsl.w	r3, r2, r3
 800418e:	69ba      	ldr	r2, [r7, #24]
 8004190:	4313      	orrs	r3, r2
 8004192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	69ba      	ldr	r2, [r7, #24]
 8004198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80041a0:	2201      	movs	r2, #1
 80041a2:	69fb      	ldr	r3, [r7, #28]
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	091b      	lsrs	r3, r3, #4
 80041b6:	f003 0201 	and.w	r2, r3, #1
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	fa02 f303 	lsl.w	r3, r2, r3
 80041c0:	69ba      	ldr	r2, [r7, #24]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69ba      	ldr	r2, [r7, #24]
 80041ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	2b03      	cmp	r3, #3
 80041d6:	d017      	beq.n	8004208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	2203      	movs	r2, #3
 80041e4:	fa02 f303 	lsl.w	r3, r2, r3
 80041e8:	43db      	mvns	r3, r3
 80041ea:	69ba      	ldr	r2, [r7, #24]
 80041ec:	4013      	ands	r3, r2
 80041ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	005b      	lsls	r3, r3, #1
 80041f8:	fa02 f303 	lsl.w	r3, r2, r3
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	4313      	orrs	r3, r2
 8004200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	69ba      	ldr	r2, [r7, #24]
 8004206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f003 0303 	and.w	r3, r3, #3
 8004210:	2b02      	cmp	r3, #2
 8004212:	d123      	bne.n	800425c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	08da      	lsrs	r2, r3, #3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	3208      	adds	r2, #8
 800421c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	220f      	movs	r2, #15
 800422c:	fa02 f303 	lsl.w	r3, r2, r3
 8004230:	43db      	mvns	r3, r3
 8004232:	69ba      	ldr	r2, [r7, #24]
 8004234:	4013      	ands	r3, r2
 8004236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	691a      	ldr	r2, [r3, #16]
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	fa02 f303 	lsl.w	r3, r2, r3
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4313      	orrs	r3, r2
 800424c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800424e:	69fb      	ldr	r3, [r7, #28]
 8004250:	08da      	lsrs	r2, r3, #3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	3208      	adds	r2, #8
 8004256:	69b9      	ldr	r1, [r7, #24]
 8004258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	2203      	movs	r2, #3
 8004268:	fa02 f303 	lsl.w	r3, r2, r3
 800426c:	43db      	mvns	r3, r3
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	4013      	ands	r3, r2
 8004272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	f003 0203 	and.w	r2, r3, #3
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	005b      	lsls	r3, r3, #1
 8004280:	fa02 f303 	lsl.w	r3, r2, r3
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	4313      	orrs	r3, r2
 8004288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004298:	2b00      	cmp	r3, #0
 800429a:	f000 80c0 	beq.w	800441e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	60fb      	str	r3, [r7, #12]
 80042a2:	4b66      	ldr	r3, [pc, #408]	; (800443c <HAL_GPIO_Init+0x324>)
 80042a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a6:	4a65      	ldr	r2, [pc, #404]	; (800443c <HAL_GPIO_Init+0x324>)
 80042a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80042ac:	6453      	str	r3, [r2, #68]	; 0x44
 80042ae:	4b63      	ldr	r3, [pc, #396]	; (800443c <HAL_GPIO_Init+0x324>)
 80042b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80042ba:	4a61      	ldr	r2, [pc, #388]	; (8004440 <HAL_GPIO_Init+0x328>)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	089b      	lsrs	r3, r3, #2
 80042c0:	3302      	adds	r3, #2
 80042c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80042c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80042c8:	69fb      	ldr	r3, [r7, #28]
 80042ca:	f003 0303 	and.w	r3, r3, #3
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	220f      	movs	r2, #15
 80042d2:	fa02 f303 	lsl.w	r3, r2, r3
 80042d6:	43db      	mvns	r3, r3
 80042d8:	69ba      	ldr	r2, [r7, #24]
 80042da:	4013      	ands	r3, r2
 80042dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a58      	ldr	r2, [pc, #352]	; (8004444 <HAL_GPIO_Init+0x32c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d037      	beq.n	8004356 <HAL_GPIO_Init+0x23e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a57      	ldr	r2, [pc, #348]	; (8004448 <HAL_GPIO_Init+0x330>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d031      	beq.n	8004352 <HAL_GPIO_Init+0x23a>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a56      	ldr	r2, [pc, #344]	; (800444c <HAL_GPIO_Init+0x334>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d02b      	beq.n	800434e <HAL_GPIO_Init+0x236>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a55      	ldr	r2, [pc, #340]	; (8004450 <HAL_GPIO_Init+0x338>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d025      	beq.n	800434a <HAL_GPIO_Init+0x232>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a54      	ldr	r2, [pc, #336]	; (8004454 <HAL_GPIO_Init+0x33c>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d01f      	beq.n	8004346 <HAL_GPIO_Init+0x22e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	4a53      	ldr	r2, [pc, #332]	; (8004458 <HAL_GPIO_Init+0x340>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d019      	beq.n	8004342 <HAL_GPIO_Init+0x22a>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	4a52      	ldr	r2, [pc, #328]	; (800445c <HAL_GPIO_Init+0x344>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d013      	beq.n	800433e <HAL_GPIO_Init+0x226>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	4a51      	ldr	r2, [pc, #324]	; (8004460 <HAL_GPIO_Init+0x348>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d00d      	beq.n	800433a <HAL_GPIO_Init+0x222>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4a50      	ldr	r2, [pc, #320]	; (8004464 <HAL_GPIO_Init+0x34c>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d007      	beq.n	8004336 <HAL_GPIO_Init+0x21e>
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a4f      	ldr	r2, [pc, #316]	; (8004468 <HAL_GPIO_Init+0x350>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d101      	bne.n	8004332 <HAL_GPIO_Init+0x21a>
 800432e:	2309      	movs	r3, #9
 8004330:	e012      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004332:	230a      	movs	r3, #10
 8004334:	e010      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004336:	2308      	movs	r3, #8
 8004338:	e00e      	b.n	8004358 <HAL_GPIO_Init+0x240>
 800433a:	2307      	movs	r3, #7
 800433c:	e00c      	b.n	8004358 <HAL_GPIO_Init+0x240>
 800433e:	2306      	movs	r3, #6
 8004340:	e00a      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004342:	2305      	movs	r3, #5
 8004344:	e008      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004346:	2304      	movs	r3, #4
 8004348:	e006      	b.n	8004358 <HAL_GPIO_Init+0x240>
 800434a:	2303      	movs	r3, #3
 800434c:	e004      	b.n	8004358 <HAL_GPIO_Init+0x240>
 800434e:	2302      	movs	r3, #2
 8004350:	e002      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004352:	2301      	movs	r3, #1
 8004354:	e000      	b.n	8004358 <HAL_GPIO_Init+0x240>
 8004356:	2300      	movs	r3, #0
 8004358:	69fa      	ldr	r2, [r7, #28]
 800435a:	f002 0203 	and.w	r2, r2, #3
 800435e:	0092      	lsls	r2, r2, #2
 8004360:	4093      	lsls	r3, r2
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4313      	orrs	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004368:	4935      	ldr	r1, [pc, #212]	; (8004440 <HAL_GPIO_Init+0x328>)
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	089b      	lsrs	r3, r3, #2
 800436e:	3302      	adds	r3, #2
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004376:	4b3d      	ldr	r3, [pc, #244]	; (800446c <HAL_GPIO_Init+0x354>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	43db      	mvns	r3, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4013      	ands	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	685b      	ldr	r3, [r3, #4]
 800438a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	4313      	orrs	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800439a:	4a34      	ldr	r2, [pc, #208]	; (800446c <HAL_GPIO_Init+0x354>)
 800439c:	69bb      	ldr	r3, [r7, #24]
 800439e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80043a0:	4b32      	ldr	r3, [pc, #200]	; (800446c <HAL_GPIO_Init+0x354>)
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d003      	beq.n	80043c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80043c4:	4a29      	ldr	r2, [pc, #164]	; (800446c <HAL_GPIO_Init+0x354>)
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80043ca:	4b28      	ldr	r3, [pc, #160]	; (800446c <HAL_GPIO_Init+0x354>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	43db      	mvns	r3, r3
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	4013      	ands	r3, r2
 80043d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d003      	beq.n	80043ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043e6:	69ba      	ldr	r2, [r7, #24]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ee:	4a1f      	ldr	r2, [pc, #124]	; (800446c <HAL_GPIO_Init+0x354>)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043f4:	4b1d      	ldr	r3, [pc, #116]	; (800446c <HAL_GPIO_Init+0x354>)
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	43db      	mvns	r3, r3
 80043fe:	69ba      	ldr	r2, [r7, #24]
 8004400:	4013      	ands	r3, r2
 8004402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d003      	beq.n	8004418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004410:	69ba      	ldr	r2, [r7, #24]
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004418:	4a14      	ldr	r2, [pc, #80]	; (800446c <HAL_GPIO_Init+0x354>)
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	3301      	adds	r3, #1
 8004422:	61fb      	str	r3, [r7, #28]
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b0f      	cmp	r3, #15
 8004428:	f67f ae84 	bls.w	8004134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800442c:	bf00      	nop
 800442e:	bf00      	nop
 8004430:	3724      	adds	r7, #36	; 0x24
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	40023800 	.word	0x40023800
 8004440:	40013800 	.word	0x40013800
 8004444:	40020000 	.word	0x40020000
 8004448:	40020400 	.word	0x40020400
 800444c:	40020800 	.word	0x40020800
 8004450:	40020c00 	.word	0x40020c00
 8004454:	40021000 	.word	0x40021000
 8004458:	40021400 	.word	0x40021400
 800445c:	40021800 	.word	0x40021800
 8004460:	40021c00 	.word	0x40021c00
 8004464:	40022000 	.word	0x40022000
 8004468:	40022400 	.word	0x40022400
 800446c:	40013c00 	.word	0x40013c00

08004470 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004470:	b480      	push	{r7}
 8004472:	b085      	sub	sp, #20
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	460b      	mov	r3, r1
 800447a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	691a      	ldr	r2, [r3, #16]
 8004480:	887b      	ldrh	r3, [r7, #2]
 8004482:	4013      	ands	r3, r2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d002      	beq.n	800448e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004488:	2301      	movs	r3, #1
 800448a:	73fb      	strb	r3, [r7, #15]
 800448c:	e001      	b.n	8004492 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800448e:	2300      	movs	r3, #0
 8004490:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004492:	7bfb      	ldrb	r3, [r7, #15]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	460b      	mov	r3, r1
 80044aa:	807b      	strh	r3, [r7, #2]
 80044ac:	4613      	mov	r3, r2
 80044ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80044b0:	787b      	ldrb	r3, [r7, #1]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d003      	beq.n	80044be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044b6:	887a      	ldrh	r2, [r7, #2]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80044bc:	e003      	b.n	80044c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80044be:	887b      	ldrh	r3, [r7, #2]
 80044c0:	041a      	lsls	r2, r3, #16
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	619a      	str	r2, [r3, #24]
}
 80044c6:	bf00      	nop
 80044c8:	370c      	adds	r7, #12
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
	...

080044d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80044de:	4b08      	ldr	r3, [pc, #32]	; (8004500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044e0:	695a      	ldr	r2, [r3, #20]
 80044e2:	88fb      	ldrh	r3, [r7, #6]
 80044e4:	4013      	ands	r3, r2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d006      	beq.n	80044f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044ea:	4a05      	ldr	r2, [pc, #20]	; (8004500 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ec:	88fb      	ldrh	r3, [r7, #6]
 80044ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044f0:	88fb      	ldrh	r3, [r7, #6]
 80044f2:	4618      	mov	r0, r3
 80044f4:	f000 f806 	bl	8004504 <HAL_GPIO_EXTI_Callback>
  }
}
 80044f8:	bf00      	nop
 80044fa:	3708      	adds	r7, #8
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40013c00 	.word	0x40013c00

08004504 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	4603      	mov	r3, r0
 800450c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800450e:	bf00      	nop
 8004510:	370c      	adds	r7, #12
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
	...

0800451c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d101      	bne.n	800452e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	e12b      	b.n	8004786 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d106      	bne.n	8004548 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f7fc fb02 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2224      	movs	r2, #36	; 0x24
 800454c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	681a      	ldr	r2, [r3, #0]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 0201 	bic.w	r2, r2, #1
 800455e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800456e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800457e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004580:	f000 fe28 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 8004584:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	4a81      	ldr	r2, [pc, #516]	; (8004790 <HAL_I2C_Init+0x274>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d807      	bhi.n	80045a0 <HAL_I2C_Init+0x84>
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	4a80      	ldr	r2, [pc, #512]	; (8004794 <HAL_I2C_Init+0x278>)
 8004594:	4293      	cmp	r3, r2
 8004596:	bf94      	ite	ls
 8004598:	2301      	movls	r3, #1
 800459a:	2300      	movhi	r3, #0
 800459c:	b2db      	uxtb	r3, r3
 800459e:	e006      	b.n	80045ae <HAL_I2C_Init+0x92>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	4a7d      	ldr	r2, [pc, #500]	; (8004798 <HAL_I2C_Init+0x27c>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	bf94      	ite	ls
 80045a8:	2301      	movls	r3, #1
 80045aa:	2300      	movhi	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e0e7      	b.n	8004786 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a78      	ldr	r2, [pc, #480]	; (800479c <HAL_I2C_Init+0x280>)
 80045ba:	fba2 2303 	umull	r2, r3, r2, r3
 80045be:	0c9b      	lsrs	r3, r3, #18
 80045c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	430a      	orrs	r2, r1
 80045d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a1b      	ldr	r3, [r3, #32]
 80045dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a6a      	ldr	r2, [pc, #424]	; (8004790 <HAL_I2C_Init+0x274>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d802      	bhi.n	80045f0 <HAL_I2C_Init+0xd4>
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	3301      	adds	r3, #1
 80045ee:	e009      	b.n	8004604 <HAL_I2C_Init+0xe8>
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045f6:	fb02 f303 	mul.w	r3, r2, r3
 80045fa:	4a69      	ldr	r2, [pc, #420]	; (80047a0 <HAL_I2C_Init+0x284>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	099b      	lsrs	r3, r3, #6
 8004602:	3301      	adds	r3, #1
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	6812      	ldr	r2, [r2, #0]
 8004608:	430b      	orrs	r3, r1
 800460a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	69db      	ldr	r3, [r3, #28]
 8004612:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004616:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	495c      	ldr	r1, [pc, #368]	; (8004790 <HAL_I2C_Init+0x274>)
 8004620:	428b      	cmp	r3, r1
 8004622:	d819      	bhi.n	8004658 <HAL_I2C_Init+0x13c>
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	1e59      	subs	r1, r3, #1
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004632:	1c59      	adds	r1, r3, #1
 8004634:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004638:	400b      	ands	r3, r1
 800463a:	2b00      	cmp	r3, #0
 800463c:	d00a      	beq.n	8004654 <HAL_I2C_Init+0x138>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	1e59      	subs	r1, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	fbb1 f3f3 	udiv	r3, r1, r3
 800464c:	3301      	adds	r3, #1
 800464e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004652:	e051      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 8004654:	2304      	movs	r3, #4
 8004656:	e04f      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d111      	bne.n	8004684 <HAL_I2C_Init+0x168>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1e58      	subs	r0, r3, #1
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	460b      	mov	r3, r1
 800466a:	005b      	lsls	r3, r3, #1
 800466c:	440b      	add	r3, r1
 800466e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004672:	3301      	adds	r3, #1
 8004674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004678:	2b00      	cmp	r3, #0
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	e012      	b.n	80046aa <HAL_I2C_Init+0x18e>
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	1e58      	subs	r0, r3, #1
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6859      	ldr	r1, [r3, #4]
 800468c:	460b      	mov	r3, r1
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	0099      	lsls	r1, r3, #2
 8004694:	440b      	add	r3, r1
 8004696:	fbb0 f3f3 	udiv	r3, r0, r3
 800469a:	3301      	adds	r3, #1
 800469c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	bf0c      	ite	eq
 80046a4:	2301      	moveq	r3, #1
 80046a6:	2300      	movne	r3, #0
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d001      	beq.n	80046b2 <HAL_I2C_Init+0x196>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e022      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d10e      	bne.n	80046d8 <HAL_I2C_Init+0x1bc>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	1e58      	subs	r0, r3, #1
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6859      	ldr	r1, [r3, #4]
 80046c2:	460b      	mov	r3, r1
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	440b      	add	r3, r1
 80046c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80046cc:	3301      	adds	r3, #1
 80046ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046d6:	e00f      	b.n	80046f8 <HAL_I2C_Init+0x1dc>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	009b      	lsls	r3, r3, #2
 80046e4:	440b      	add	r3, r1
 80046e6:	0099      	lsls	r1, r3, #2
 80046e8:	440b      	add	r3, r1
 80046ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ee:	3301      	adds	r3, #1
 80046f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046f8:	6879      	ldr	r1, [r7, #4]
 80046fa:	6809      	ldr	r1, [r1, #0]
 80046fc:	4313      	orrs	r3, r2
 80046fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	69da      	ldr	r2, [r3, #28]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	430a      	orrs	r2, r1
 800471a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004726:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800472a:	687a      	ldr	r2, [r7, #4]
 800472c:	6911      	ldr	r1, [r2, #16]
 800472e:	687a      	ldr	r2, [r7, #4]
 8004730:	68d2      	ldr	r2, [r2, #12]
 8004732:	4311      	orrs	r1, r2
 8004734:	687a      	ldr	r2, [r7, #4]
 8004736:	6812      	ldr	r2, [r2, #0]
 8004738:	430b      	orrs	r3, r1
 800473a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	695a      	ldr	r2, [r3, #20]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	431a      	orrs	r2, r3
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0201 	orr.w	r2, r2, #1
 8004766:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2220      	movs	r2, #32
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3710      	adds	r7, #16
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	000186a0 	.word	0x000186a0
 8004794:	001e847f 	.word	0x001e847f
 8004798:	003d08ff 	.word	0x003d08ff
 800479c:	431bde83 	.word	0x431bde83
 80047a0:	10624dd3 	.word	0x10624dd3

080047a4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047b4:	b2db      	uxtb	r3, r3
 80047b6:	2b20      	cmp	r3, #32
 80047b8:	d129      	bne.n	800480e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2224      	movs	r2, #36	; 0x24
 80047be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	681a      	ldr	r2, [r3, #0]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 0201 	bic.w	r2, r2, #1
 80047d0:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f022 0210 	bic.w	r2, r2, #16
 80047e0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	430a      	orrs	r2, r1
 80047f0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	f042 0201 	orr.w	r2, r2, #1
 8004800:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2220      	movs	r2, #32
 8004806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	e000      	b.n	8004810 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800480e:	2302      	movs	r3, #2
  }
}
 8004810:	4618      	mov	r0, r3
 8004812:	370c      	adds	r7, #12
 8004814:	46bd      	mov	sp, r7
 8004816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481a:	4770      	bx	lr

0800481c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b085      	sub	sp, #20
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004826:	2300      	movs	r3, #0
 8004828:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b20      	cmp	r3, #32
 8004834:	d12a      	bne.n	800488c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2224      	movs	r2, #36	; 0x24
 800483a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004854:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004856:	89fb      	ldrh	r3, [r7, #14]
 8004858:	f023 030f 	bic.w	r3, r3, #15
 800485c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	b29a      	uxth	r2, r3
 8004862:	89fb      	ldrh	r3, [r7, #14]
 8004864:	4313      	orrs	r3, r2
 8004866:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	89fa      	ldrh	r2, [r7, #14]
 800486e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f042 0201 	orr.w	r2, r2, #1
 800487e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2220      	movs	r2, #32
 8004884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004888:	2300      	movs	r3, #0
 800488a:	e000      	b.n	800488e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800488c:	2302      	movs	r3, #2
  }
}
 800488e:	4618      	mov	r0, r3
 8004890:	3714      	adds	r7, #20
 8004892:	46bd      	mov	sp, r7
 8004894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004898:	4770      	bx	lr
	...

0800489c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80048a6:	2300      	movs	r3, #0
 80048a8:	603b      	str	r3, [r7, #0]
 80048aa:	4b20      	ldr	r3, [pc, #128]	; (800492c <HAL_PWREx_EnableOverDrive+0x90>)
 80048ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ae:	4a1f      	ldr	r2, [pc, #124]	; (800492c <HAL_PWREx_EnableOverDrive+0x90>)
 80048b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b4:	6413      	str	r3, [r2, #64]	; 0x40
 80048b6:	4b1d      	ldr	r3, [pc, #116]	; (800492c <HAL_PWREx_EnableOverDrive+0x90>)
 80048b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048be:	603b      	str	r3, [r7, #0]
 80048c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80048c2:	4b1b      	ldr	r3, [pc, #108]	; (8004930 <HAL_PWREx_EnableOverDrive+0x94>)
 80048c4:	2201      	movs	r2, #1
 80048c6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048c8:	f7fd face 	bl	8001e68 <HAL_GetTick>
 80048cc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048ce:	e009      	b.n	80048e4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048d0:	f7fd faca 	bl	8001e68 <HAL_GetTick>
 80048d4:	4602      	mov	r2, r0
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	1ad3      	subs	r3, r2, r3
 80048da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048de:	d901      	bls.n	80048e4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e01f      	b.n	8004924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048e4:	4b13      	ldr	r3, [pc, #76]	; (8004934 <HAL_PWREx_EnableOverDrive+0x98>)
 80048e6:	685b      	ldr	r3, [r3, #4]
 80048e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048f0:	d1ee      	bne.n	80048d0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048f2:	4b11      	ldr	r3, [pc, #68]	; (8004938 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048f8:	f7fd fab6 	bl	8001e68 <HAL_GetTick>
 80048fc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048fe:	e009      	b.n	8004914 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004900:	f7fd fab2 	bl	8001e68 <HAL_GetTick>
 8004904:	4602      	mov	r2, r0
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	1ad3      	subs	r3, r2, r3
 800490a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800490e:	d901      	bls.n	8004914 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8004910:	2303      	movs	r3, #3
 8004912:	e007      	b.n	8004924 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004914:	4b07      	ldr	r3, [pc, #28]	; (8004934 <HAL_PWREx_EnableOverDrive+0x98>)
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800491c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004920:	d1ee      	bne.n	8004900 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8004922:	2300      	movs	r3, #0
}
 8004924:	4618      	mov	r0, r3
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	40023800 	.word	0x40023800
 8004930:	420e0040 	.word	0x420e0040
 8004934:	40007000 	.word	0x40007000
 8004938:	420e0044 	.word	0x420e0044

0800493c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e264      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	2b00      	cmp	r3, #0
 8004958:	d075      	beq.n	8004a46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800495a:	4ba3      	ldr	r3, [pc, #652]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f003 030c 	and.w	r3, r3, #12
 8004962:	2b04      	cmp	r3, #4
 8004964:	d00c      	beq.n	8004980 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004966:	4ba0      	ldr	r3, [pc, #640]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800496e:	2b08      	cmp	r3, #8
 8004970:	d112      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004972:	4b9d      	ldr	r3, [pc, #628]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004974:	685b      	ldr	r3, [r3, #4]
 8004976:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800497a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800497e:	d10b      	bne.n	8004998 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004980:	4b99      	ldr	r3, [pc, #612]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004988:	2b00      	cmp	r3, #0
 800498a:	d05b      	beq.n	8004a44 <HAL_RCC_OscConfig+0x108>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d157      	bne.n	8004a44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e23f      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049a0:	d106      	bne.n	80049b0 <HAL_RCC_OscConfig+0x74>
 80049a2:	4b91      	ldr	r3, [pc, #580]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4a90      	ldr	r2, [pc, #576]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049ac:	6013      	str	r3, [r2, #0]
 80049ae:	e01d      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049b8:	d10c      	bne.n	80049d4 <HAL_RCC_OscConfig+0x98>
 80049ba:	4b8b      	ldr	r3, [pc, #556]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a8a      	ldr	r2, [pc, #552]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049c4:	6013      	str	r3, [r2, #0]
 80049c6:	4b88      	ldr	r3, [pc, #544]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a87      	ldr	r2, [pc, #540]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d0:	6013      	str	r3, [r2, #0]
 80049d2:	e00b      	b.n	80049ec <HAL_RCC_OscConfig+0xb0>
 80049d4:	4b84      	ldr	r3, [pc, #528]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a83      	ldr	r2, [pc, #524]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049de:	6013      	str	r3, [r2, #0]
 80049e0:	4b81      	ldr	r3, [pc, #516]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a80      	ldr	r2, [pc, #512]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 80049e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d013      	beq.n	8004a1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049f4:	f7fd fa38 	bl	8001e68 <HAL_GetTick>
 80049f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fa:	e008      	b.n	8004a0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049fc:	f7fd fa34 	bl	8001e68 <HAL_GetTick>
 8004a00:	4602      	mov	r2, r0
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	1ad3      	subs	r3, r2, r3
 8004a06:	2b64      	cmp	r3, #100	; 0x64
 8004a08:	d901      	bls.n	8004a0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e204      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a0e:	4b76      	ldr	r3, [pc, #472]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d0f0      	beq.n	80049fc <HAL_RCC_OscConfig+0xc0>
 8004a1a:	e014      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a1c:	f7fd fa24 	bl	8001e68 <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a22:	e008      	b.n	8004a36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a24:	f7fd fa20 	bl	8001e68 <HAL_GetTick>
 8004a28:	4602      	mov	r2, r0
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	1ad3      	subs	r3, r2, r3
 8004a2e:	2b64      	cmp	r3, #100	; 0x64
 8004a30:	d901      	bls.n	8004a36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a32:	2303      	movs	r3, #3
 8004a34:	e1f0      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1f0      	bne.n	8004a24 <HAL_RCC_OscConfig+0xe8>
 8004a42:	e000      	b.n	8004a46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 0302 	and.w	r3, r3, #2
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d063      	beq.n	8004b1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a52:	4b65      	ldr	r3, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f003 030c 	and.w	r3, r3, #12
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00b      	beq.n	8004a76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a5e:	4b62      	ldr	r3, [pc, #392]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a60:	689b      	ldr	r3, [r3, #8]
 8004a62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a66:	2b08      	cmp	r3, #8
 8004a68:	d11c      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d116      	bne.n	8004aa4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a76:	4b5c      	ldr	r3, [pc, #368]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d005      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d001      	beq.n	8004a8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e1c4      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a8e:	4b56      	ldr	r3, [pc, #344]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	691b      	ldr	r3, [r3, #16]
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4952      	ldr	r1, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aa2:	e03a      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d020      	beq.n	8004aee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004aac:	4b4f      	ldr	r3, [pc, #316]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab2:	f7fd f9d9 	bl	8001e68 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004aba:	f7fd f9d5 	bl	8001e68 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e1a5      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004acc:	4b46      	ldr	r3, [pc, #280]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	00db      	lsls	r3, r3, #3
 8004ae6:	4940      	ldr	r1, [pc, #256]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	600b      	str	r3, [r1, #0]
 8004aec:	e015      	b.n	8004b1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aee:	4b3f      	ldr	r3, [pc, #252]	; (8004bec <HAL_RCC_OscConfig+0x2b0>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af4:	f7fd f9b8 	bl	8001e68 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004afc:	f7fd f9b4 	bl	8001e68 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e184      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0e:	4b36      	ldr	r3, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d030      	beq.n	8004b88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	695b      	ldr	r3, [r3, #20]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d016      	beq.n	8004b5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2e:	4b30      	ldr	r3, [pc, #192]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b30:	2201      	movs	r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b34:	f7fd f998 	bl	8001e68 <HAL_GetTick>
 8004b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3a:	e008      	b.n	8004b4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b3c:	f7fd f994 	bl	8001e68 <HAL_GetTick>
 8004b40:	4602      	mov	r2, r0
 8004b42:	693b      	ldr	r3, [r7, #16]
 8004b44:	1ad3      	subs	r3, r2, r3
 8004b46:	2b02      	cmp	r3, #2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e164      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b4e:	4b26      	ldr	r3, [pc, #152]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d0f0      	beq.n	8004b3c <HAL_RCC_OscConfig+0x200>
 8004b5a:	e015      	b.n	8004b88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5c:	4b24      	ldr	r3, [pc, #144]	; (8004bf0 <HAL_RCC_OscConfig+0x2b4>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b62:	f7fd f981 	bl	8001e68 <HAL_GetTick>
 8004b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b6a:	f7fd f97d 	bl	8001e68 <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e14d      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b7c:	4b1a      	ldr	r3, [pc, #104]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d1f0      	bne.n	8004b6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 80a0 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b96:	2300      	movs	r3, #0
 8004b98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b9a:	4b13      	ldr	r3, [pc, #76]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	60bb      	str	r3, [r7, #8]
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	4a0e      	ldr	r2, [pc, #56]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8004bb6:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCC_OscConfig+0x2ac>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bbe:	60bb      	str	r3, [r7, #8]
 8004bc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bc6:	4b0b      	ldr	r3, [pc, #44]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d121      	bne.n	8004c16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004bd2:	4b08      	ldr	r3, [pc, #32]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a07      	ldr	r2, [pc, #28]	; (8004bf4 <HAL_RCC_OscConfig+0x2b8>)
 8004bd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bdc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004bde:	f7fd f943 	bl	8001e68 <HAL_GetTick>
 8004be2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004be4:	e011      	b.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
 8004be6:	bf00      	nop
 8004be8:	40023800 	.word	0x40023800
 8004bec:	42470000 	.word	0x42470000
 8004bf0:	42470e80 	.word	0x42470e80
 8004bf4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bf8:	f7fd f936 	bl	8001e68 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e106      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c0a:	4b85      	ldr	r3, [pc, #532]	; (8004e20 <HAL_RCC_OscConfig+0x4e4>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0f0      	beq.n	8004bf8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	689b      	ldr	r3, [r3, #8]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d106      	bne.n	8004c2c <HAL_RCC_OscConfig+0x2f0>
 8004c1e:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	4a80      	ldr	r2, [pc, #512]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c24:	f043 0301 	orr.w	r3, r3, #1
 8004c28:	6713      	str	r3, [r2, #112]	; 0x70
 8004c2a:	e01c      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	689b      	ldr	r3, [r3, #8]
 8004c30:	2b05      	cmp	r3, #5
 8004c32:	d10c      	bne.n	8004c4e <HAL_RCC_OscConfig+0x312>
 8004c34:	4b7b      	ldr	r3, [pc, #492]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c38:	4a7a      	ldr	r2, [pc, #488]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c3a:	f043 0304 	orr.w	r3, r3, #4
 8004c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c40:	4b78      	ldr	r3, [pc, #480]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c44:	4a77      	ldr	r2, [pc, #476]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c46:	f043 0301 	orr.w	r3, r3, #1
 8004c4a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c4c:	e00b      	b.n	8004c66 <HAL_RCC_OscConfig+0x32a>
 8004c4e:	4b75      	ldr	r3, [pc, #468]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c52:	4a74      	ldr	r2, [pc, #464]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	6713      	str	r3, [r2, #112]	; 0x70
 8004c5a:	4b72      	ldr	r3, [pc, #456]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c5e:	4a71      	ldr	r2, [pc, #452]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c60:	f023 0304 	bic.w	r3, r3, #4
 8004c64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d015      	beq.n	8004c9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6e:	f7fd f8fb 	bl	8001e68 <HAL_GetTick>
 8004c72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fd f8f7 	bl	8001e68 <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e0c5      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c8c:	4b65      	ldr	r3, [pc, #404]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c90:	f003 0302 	and.w	r3, r3, #2
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d0ee      	beq.n	8004c76 <HAL_RCC_OscConfig+0x33a>
 8004c98:	e014      	b.n	8004cc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fd f8e5 	bl	8001e68 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ca0:	e00a      	b.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ca2:	f7fd f8e1 	bl	8001e68 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d901      	bls.n	8004cb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004cb4:	2303      	movs	r3, #3
 8004cb6:	e0af      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb8:	4b5a      	ldr	r3, [pc, #360]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ee      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cc4:	7dfb      	ldrb	r3, [r7, #23]
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d105      	bne.n	8004cd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cca:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cce:	4a55      	ldr	r2, [pc, #340]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004cd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004cd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	f000 809b 	beq.w	8004e16 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ce0:	4b50      	ldr	r3, [pc, #320]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004ce2:	689b      	ldr	r3, [r3, #8]
 8004ce4:	f003 030c 	and.w	r3, r3, #12
 8004ce8:	2b08      	cmp	r3, #8
 8004cea:	d05c      	beq.n	8004da6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	699b      	ldr	r3, [r3, #24]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	d141      	bne.n	8004d78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf4:	4b4c      	ldr	r3, [pc, #304]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfa:	f7fd f8b5 	bl	8001e68 <HAL_GetTick>
 8004cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d00:	e008      	b.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d02:	f7fd f8b1 	bl	8001e68 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	2b02      	cmp	r3, #2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e081      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d14:	4b43      	ldr	r3, [pc, #268]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f0      	bne.n	8004d02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	69da      	ldr	r2, [r3, #28]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	431a      	orrs	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d2e:	019b      	lsls	r3, r3, #6
 8004d30:	431a      	orrs	r2, r3
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d36:	085b      	lsrs	r3, r3, #1
 8004d38:	3b01      	subs	r3, #1
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	431a      	orrs	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d42:	061b      	lsls	r3, r3, #24
 8004d44:	4937      	ldr	r1, [pc, #220]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d46:	4313      	orrs	r3, r2
 8004d48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d4a:	4b37      	ldr	r3, [pc, #220]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d50:	f7fd f88a 	bl	8001e68 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d56:	e008      	b.n	8004d6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d58:	f7fd f886 	bl	8001e68 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d901      	bls.n	8004d6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d66:	2303      	movs	r3, #3
 8004d68:	e056      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d6a:	4b2e      	ldr	r3, [pc, #184]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d0f0      	beq.n	8004d58 <HAL_RCC_OscConfig+0x41c>
 8004d76:	e04e      	b.n	8004e16 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d78:	4b2b      	ldr	r3, [pc, #172]	; (8004e28 <HAL_RCC_OscConfig+0x4ec>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d7e:	f7fd f873 	bl	8001e68 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d86:	f7fd f86f 	bl	8001e68 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b02      	cmp	r3, #2
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e03f      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d98:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d1f0      	bne.n	8004d86 <HAL_RCC_OscConfig+0x44a>
 8004da4:	e037      	b.n	8004e16 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e032      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004db2:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <HAL_RCC_OscConfig+0x4e8>)
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b01      	cmp	r3, #1
 8004dbe:	d028      	beq.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d121      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d11a      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004de2:	4013      	ands	r3, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004de8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d111      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004df8:	085b      	lsrs	r3, r3, #1
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d107      	bne.n	8004e12 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d001      	beq.n	8004e16 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	40007000 	.word	0x40007000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	42470060 	.word	0x42470060

08004e2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
 8004e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e0cc      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e40:	4b68      	ldr	r3, [pc, #416]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	683a      	ldr	r2, [r7, #0]
 8004e4a:	429a      	cmp	r2, r3
 8004e4c:	d90c      	bls.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e4e:	4b65      	ldr	r3, [pc, #404]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	b2d2      	uxtb	r2, r2
 8004e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e56:	4b63      	ldr	r3, [pc, #396]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f003 030f 	and.w	r3, r3, #15
 8004e5e:	683a      	ldr	r2, [r7, #0]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d001      	beq.n	8004e68 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e64:	2301      	movs	r3, #1
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d020      	beq.n	8004eb6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f003 0304 	and.w	r3, r3, #4
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e80:	4b59      	ldr	r3, [pc, #356]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e82:	689b      	ldr	r3, [r3, #8]
 8004e84:	4a58      	ldr	r2, [pc, #352]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e86:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e8a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f003 0308 	and.w	r3, r3, #8
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d005      	beq.n	8004ea4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e98:	4b53      	ldr	r3, [pc, #332]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9a:	689b      	ldr	r3, [r3, #8]
 8004e9c:	4a52      	ldr	r2, [pc, #328]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e9e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ea2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ea4:	4b50      	ldr	r3, [pc, #320]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	494d      	ldr	r1, [pc, #308]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d044      	beq.n	8004f4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d107      	bne.n	8004eda <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004eca:	4b47      	ldr	r3, [pc, #284]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d119      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e07f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2b02      	cmp	r3, #2
 8004ee0:	d003      	beq.n	8004eea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ee6:	2b03      	cmp	r3, #3
 8004ee8:	d107      	bne.n	8004efa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eea:	4b3f      	ldr	r3, [pc, #252]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d109      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e06f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004efa:	4b3b      	ldr	r3, [pc, #236]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d101      	bne.n	8004f0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e067      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f0a:	4b37      	ldr	r3, [pc, #220]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0c:	689b      	ldr	r3, [r3, #8]
 8004f0e:	f023 0203 	bic.w	r2, r3, #3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	4934      	ldr	r1, [pc, #208]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f18:	4313      	orrs	r3, r2
 8004f1a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f1c:	f7fc ffa4 	bl	8001e68 <HAL_GetTick>
 8004f20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f22:	e00a      	b.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f24:	f7fc ffa0 	bl	8001e68 <HAL_GetTick>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	1ad3      	subs	r3, r2, r3
 8004f2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d901      	bls.n	8004f3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f36:	2303      	movs	r3, #3
 8004f38:	e04f      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f3a:	4b2b      	ldr	r3, [pc, #172]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	f003 020c 	and.w	r2, r3, #12
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	685b      	ldr	r3, [r3, #4]
 8004f46:	009b      	lsls	r3, r3, #2
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d1eb      	bne.n	8004f24 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f4c:	4b25      	ldr	r3, [pc, #148]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 030f 	and.w	r3, r3, #15
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d20c      	bcs.n	8004f74 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f5a:	4b22      	ldr	r3, [pc, #136]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f5c:	683a      	ldr	r2, [r7, #0]
 8004f5e:	b2d2      	uxtb	r2, r2
 8004f60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f62:	4b20      	ldr	r3, [pc, #128]	; (8004fe4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 030f 	and.w	r3, r3, #15
 8004f6a:	683a      	ldr	r2, [r7, #0]
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d001      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	e032      	b.n	8004fda <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0304 	and.w	r3, r3, #4
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d008      	beq.n	8004f92 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f80:	4b19      	ldr	r3, [pc, #100]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	4916      	ldr	r1, [pc, #88]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f003 0308 	and.w	r3, r3, #8
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d009      	beq.n	8004fb2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f9e:	4b12      	ldr	r3, [pc, #72]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	691b      	ldr	r3, [r3, #16]
 8004faa:	00db      	lsls	r3, r3, #3
 8004fac:	490e      	ldr	r1, [pc, #56]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004fb2:	f000 f821 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	4b0b      	ldr	r3, [pc, #44]	; (8004fe8 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	091b      	lsrs	r3, r3, #4
 8004fbe:	f003 030f 	and.w	r3, r3, #15
 8004fc2:	490a      	ldr	r1, [pc, #40]	; (8004fec <HAL_RCC_ClockConfig+0x1c0>)
 8004fc4:	5ccb      	ldrb	r3, [r1, r3]
 8004fc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004fca:	4a09      	ldr	r2, [pc, #36]	; (8004ff0 <HAL_RCC_ClockConfig+0x1c4>)
 8004fcc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004fce:	4b09      	ldr	r3, [pc, #36]	; (8004ff4 <HAL_RCC_ClockConfig+0x1c8>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	f7fc ff04 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3710      	adds	r7, #16
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023c00 	.word	0x40023c00
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	08017a70 	.word	0x08017a70
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	20000004 	.word	0x20000004

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005000:	2300      	movs	r3, #0
 8005002:	607b      	str	r3, [r7, #4]
 8005004:	2300      	movs	r3, #0
 8005006:	60fb      	str	r3, [r7, #12]
 8005008:	2300      	movs	r3, #0
 800500a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800500c:	2300      	movs	r3, #0
 800500e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005010:	4b67      	ldr	r3, [pc, #412]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d00d      	beq.n	8005038 <HAL_RCC_GetSysClockFreq+0x40>
 800501c:	2b08      	cmp	r3, #8
 800501e:	f200 80bd 	bhi.w	800519c <HAL_RCC_GetSysClockFreq+0x1a4>
 8005022:	2b00      	cmp	r3, #0
 8005024:	d002      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0x34>
 8005026:	2b04      	cmp	r3, #4
 8005028:	d003      	beq.n	8005032 <HAL_RCC_GetSysClockFreq+0x3a>
 800502a:	e0b7      	b.n	800519c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800502c:	4b61      	ldr	r3, [pc, #388]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800502e:	60bb      	str	r3, [r7, #8]
       break;
 8005030:	e0b7      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005032:	4b61      	ldr	r3, [pc, #388]	; (80051b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005034:	60bb      	str	r3, [r7, #8]
      break;
 8005036:	e0b4      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005038:	4b5d      	ldr	r3, [pc, #372]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005040:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005042:	4b5b      	ldr	r3, [pc, #364]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800504a:	2b00      	cmp	r3, #0
 800504c:	d04d      	beq.n	80050ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800504e:	4b58      	ldr	r3, [pc, #352]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	099b      	lsrs	r3, r3, #6
 8005054:	461a      	mov	r2, r3
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800505e:	f04f 0100 	mov.w	r1, #0
 8005062:	ea02 0800 	and.w	r8, r2, r0
 8005066:	ea03 0901 	and.w	r9, r3, r1
 800506a:	4640      	mov	r0, r8
 800506c:	4649      	mov	r1, r9
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	014b      	lsls	r3, r1, #5
 8005078:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800507c:	0142      	lsls	r2, r0, #5
 800507e:	4610      	mov	r0, r2
 8005080:	4619      	mov	r1, r3
 8005082:	ebb0 0008 	subs.w	r0, r0, r8
 8005086:	eb61 0109 	sbc.w	r1, r1, r9
 800508a:	f04f 0200 	mov.w	r2, #0
 800508e:	f04f 0300 	mov.w	r3, #0
 8005092:	018b      	lsls	r3, r1, #6
 8005094:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005098:	0182      	lsls	r2, r0, #6
 800509a:	1a12      	subs	r2, r2, r0
 800509c:	eb63 0301 	sbc.w	r3, r3, r1
 80050a0:	f04f 0000 	mov.w	r0, #0
 80050a4:	f04f 0100 	mov.w	r1, #0
 80050a8:	00d9      	lsls	r1, r3, #3
 80050aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80050ae:	00d0      	lsls	r0, r2, #3
 80050b0:	4602      	mov	r2, r0
 80050b2:	460b      	mov	r3, r1
 80050b4:	eb12 0208 	adds.w	r2, r2, r8
 80050b8:	eb43 0309 	adc.w	r3, r3, r9
 80050bc:	f04f 0000 	mov.w	r0, #0
 80050c0:	f04f 0100 	mov.w	r1, #0
 80050c4:	0259      	lsls	r1, r3, #9
 80050c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80050ca:	0250      	lsls	r0, r2, #9
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4610      	mov	r0, r2
 80050d2:	4619      	mov	r1, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	461a      	mov	r2, r3
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	f7fb f8d8 	bl	8000290 <__aeabi_uldivmod>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	4613      	mov	r3, r2
 80050e6:	60fb      	str	r3, [r7, #12]
 80050e8:	e04a      	b.n	8005180 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ea:	4b31      	ldr	r3, [pc, #196]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	099b      	lsrs	r3, r3, #6
 80050f0:	461a      	mov	r2, r3
 80050f2:	f04f 0300 	mov.w	r3, #0
 80050f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050fa:	f04f 0100 	mov.w	r1, #0
 80050fe:	ea02 0400 	and.w	r4, r2, r0
 8005102:	ea03 0501 	and.w	r5, r3, r1
 8005106:	4620      	mov	r0, r4
 8005108:	4629      	mov	r1, r5
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	014b      	lsls	r3, r1, #5
 8005114:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005118:	0142      	lsls	r2, r0, #5
 800511a:	4610      	mov	r0, r2
 800511c:	4619      	mov	r1, r3
 800511e:	1b00      	subs	r0, r0, r4
 8005120:	eb61 0105 	sbc.w	r1, r1, r5
 8005124:	f04f 0200 	mov.w	r2, #0
 8005128:	f04f 0300 	mov.w	r3, #0
 800512c:	018b      	lsls	r3, r1, #6
 800512e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005132:	0182      	lsls	r2, r0, #6
 8005134:	1a12      	subs	r2, r2, r0
 8005136:	eb63 0301 	sbc.w	r3, r3, r1
 800513a:	f04f 0000 	mov.w	r0, #0
 800513e:	f04f 0100 	mov.w	r1, #0
 8005142:	00d9      	lsls	r1, r3, #3
 8005144:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005148:	00d0      	lsls	r0, r2, #3
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	1912      	adds	r2, r2, r4
 8005150:	eb45 0303 	adc.w	r3, r5, r3
 8005154:	f04f 0000 	mov.w	r0, #0
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	0299      	lsls	r1, r3, #10
 800515e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005162:	0290      	lsls	r0, r2, #10
 8005164:	4602      	mov	r2, r0
 8005166:	460b      	mov	r3, r1
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	461a      	mov	r2, r3
 8005170:	f04f 0300 	mov.w	r3, #0
 8005174:	f7fb f88c 	bl	8000290 <__aeabi_uldivmod>
 8005178:	4602      	mov	r2, r0
 800517a:	460b      	mov	r3, r1
 800517c:	4613      	mov	r3, r2
 800517e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	0c1b      	lsrs	r3, r3, #16
 8005186:	f003 0303 	and.w	r3, r3, #3
 800518a:	3301      	adds	r3, #1
 800518c:	005b      	lsls	r3, r3, #1
 800518e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005190:	68fa      	ldr	r2, [r7, #12]
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	fbb2 f3f3 	udiv	r3, r2, r3
 8005198:	60bb      	str	r3, [r7, #8]
      break;
 800519a:	e002      	b.n	80051a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800519e:	60bb      	str	r3, [r7, #8]
      break;
 80051a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80051a2:	68bb      	ldr	r3, [r7, #8]
}
 80051a4:	4618      	mov	r0, r3
 80051a6:	3710      	adds	r7, #16
 80051a8:	46bd      	mov	sp, r7
 80051aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80051ae:	bf00      	nop
 80051b0:	40023800 	.word	0x40023800
 80051b4:	00f42400 	.word	0x00f42400
 80051b8:	007a1200 	.word	0x007a1200

080051bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20000000 	.word	0x20000000

080051d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80051d8:	f7ff fff0 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0a9b      	lsrs	r3, r3, #10
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4903      	ldr	r1, [pc, #12]	; (80051f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40023800 	.word	0x40023800
 80051f8:	08017a80 	.word	0x08017a80

080051fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005200:	f7ff ffdc 	bl	80051bc <HAL_RCC_GetHCLKFreq>
 8005204:	4602      	mov	r2, r0
 8005206:	4b05      	ldr	r3, [pc, #20]	; (800521c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	0b5b      	lsrs	r3, r3, #13
 800520c:	f003 0307 	and.w	r3, r3, #7
 8005210:	4903      	ldr	r1, [pc, #12]	; (8005220 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005212:	5ccb      	ldrb	r3, [r1, r3]
 8005214:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005218:	4618      	mov	r0, r3
 800521a:	bd80      	pop	{r7, pc}
 800521c:	40023800 	.word	0x40023800
 8005220:	08017a80 	.word	0x08017a80

08005224 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8005224:	b580      	push	{r7, lr}
 8005226:	b082      	sub	sp, #8
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d101      	bne.n	8005236 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	e022      	b.n	800527c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d105      	bne.n	800524e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2200      	movs	r2, #0
 8005246:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7fb fde9 	bl	8000e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2203      	movs	r2, #3
 8005252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f000 f814 	bl	8005284 <HAL_SD_InitCard>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d001      	beq.n	8005266 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e00a      	b.n	800527c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005284:	b5b0      	push	{r4, r5, r7, lr}
 8005286:	b08e      	sub	sp, #56	; 0x38
 8005288:	af04      	add	r7, sp, #16
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800528c:	2300      	movs	r3, #0
 800528e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005290:	2300      	movs	r3, #0
 8005292:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005294:	2300      	movs	r3, #0
 8005296:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005298:	2300      	movs	r3, #0
 800529a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800529c:	2300      	movs	r3, #0
 800529e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 80052a0:	2376      	movs	r3, #118	; 0x76
 80052a2:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681d      	ldr	r5, [r3, #0]
 80052a8:	466c      	mov	r4, sp
 80052aa:	f107 0314 	add.w	r3, r7, #20
 80052ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80052b2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80052b6:	f107 0308 	add.w	r3, r7, #8
 80052ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052bc:	4628      	mov	r0, r5
 80052be:	f003 f9b7 	bl	8008630 <SDIO_Init>
 80052c2:	4603      	mov	r3, r0
 80052c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80052c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80052d0:	2301      	movs	r3, #1
 80052d2:	e04c      	b.n	800536e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80052d4:	4b28      	ldr	r3, [pc, #160]	; (8005378 <HAL_SD_InitCard+0xf4>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f003 f9ef 	bl	80086c2 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_SD_InitCard+0xf4>)
 80052e6:	2201      	movs	r2, #1
 80052e8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f001 f804 	bl	80062f8 <SD_PowerON>
 80052f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d00b      	beq.n	8005310 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2201      	movs	r2, #1
 80052fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	431a      	orrs	r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e02e      	b.n	800536e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f000 ff25 	bl	8006160 <SD_InitCard>
 8005316:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00b      	beq.n	8005336 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800532a:	6a3b      	ldr	r3, [r7, #32]
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e01b      	b.n	800536e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800533e:	4618      	mov	r0, r3
 8005340:	f003 fa52 	bl	80087e8 <SDMMC_CmdBlockLength>
 8005344:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00f      	beq.n	800536c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <HAL_SD_InitCard+0xf8>)
 8005352:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005358:	6a3b      	ldr	r3, [r7, #32]
 800535a:	431a      	orrs	r2, r3
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e000      	b.n	800536e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800536c:	2300      	movs	r3, #0
}
 800536e:	4618      	mov	r0, r3
 8005370:	3728      	adds	r7, #40	; 0x28
 8005372:	46bd      	mov	sp, r7
 8005374:	bdb0      	pop	{r4, r5, r7, pc}
 8005376:	bf00      	nop
 8005378:	422580a0 	.word	0x422580a0
 800537c:	004005ff 	.word	0x004005ff

08005380 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b08c      	sub	sp, #48	; 0x30
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
 800538c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005392:	68bb      	ldr	r3, [r7, #8]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d107      	bne.n	80053a8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0c0      	b.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 80b9 	bne.w	8005528 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2200      	movs	r2, #0
 80053ba:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80053bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053c6:	429a      	cmp	r2, r3
 80053c8:	d907      	bls.n	80053da <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ce:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80053d6:	2301      	movs	r3, #1
 80053d8:	e0a7      	b.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2203      	movs	r2, #3
 80053de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	2200      	movs	r2, #0
 80053e8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	6812      	ldr	r2, [r2, #0]
 80053f4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80053f8:	f043 0302 	orr.w	r3, r3, #2
 80053fc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005402:	4a4c      	ldr	r2, [pc, #304]	; (8005534 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 8005404:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a4b      	ldr	r2, [pc, #300]	; (8005538 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800540c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	2200      	movs	r2, #0
 8005414:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541a:	2200      	movs	r2, #0
 800541c:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	3380      	adds	r3, #128	; 0x80
 8005444:	4619      	mov	r1, r3
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	025b      	lsls	r3, r3, #9
 800544c:	089b      	lsrs	r3, r3, #2
 800544e:	f7fd f9dd 	bl	800280c <HAL_DMA_Start_IT>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d017      	beq.n	8005488 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005466:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a33      	ldr	r2, [pc, #204]	; (800553c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800546e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005474:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2201      	movs	r2, #1
 8005480:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e050      	b.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005488:	4b2d      	ldr	r3, [pc, #180]	; (8005540 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800548a:	2201      	movs	r2, #1
 800548c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005492:	2b01      	cmp	r3, #1
 8005494:	d002      	beq.n	800549c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005498:	025b      	lsls	r3, r3, #9
 800549a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800549c:	f04f 33ff 	mov.w	r3, #4294967295
 80054a0:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	025b      	lsls	r3, r3, #9
 80054a6:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80054a8:	2390      	movs	r3, #144	; 0x90
 80054aa:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80054ac:	2302      	movs	r3, #2
 80054ae:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80054b0:	2300      	movs	r3, #0
 80054b2:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80054b4:	2301      	movs	r3, #1
 80054b6:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f107 0210 	add.w	r2, r7, #16
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f003 f964 	bl	8008790 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d90a      	bls.n	80054e4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	2282      	movs	r2, #130	; 0x82
 80054d2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054da:	4618      	mov	r0, r3
 80054dc:	f003 f9c8 	bl	8008870 <SDMMC_CmdReadMultiBlock>
 80054e0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054e2:	e009      	b.n	80054f8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	2281      	movs	r2, #129	; 0x81
 80054e8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054f0:	4618      	mov	r0, r3
 80054f2:	f003 f99b 	bl	800882c <SDMMC_CmdReadSingleBlock>
 80054f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80054f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d012      	beq.n	8005524 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a0e      	ldr	r2, [pc, #56]	; (800553c <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8005504:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	431a      	orrs	r2, r3
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	2200      	movs	r2, #0
 800551e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005520:	2301      	movs	r3, #1
 8005522:	e002      	b.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 8005524:	2300      	movs	r3, #0
 8005526:	e000      	b.n	800552a <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 8005528:	2302      	movs	r3, #2
  }
}
 800552a:	4618      	mov	r0, r3
 800552c:	3730      	adds	r7, #48	; 0x30
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	08005f6f 	.word	0x08005f6f
 8005538:	08005fe1 	.word	0x08005fe1
 800553c:	004005ff 	.word	0x004005ff
 8005540:	4225858c 	.word	0x4225858c

08005544 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08c      	sub	sp, #48	; 0x30
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	607a      	str	r2, [r7, #4]
 8005550:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d107      	bne.n	800556c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	e0c5      	b.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b01      	cmp	r3, #1
 8005576:	f040 80be 	bne.w	80056f6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2200      	movs	r2, #0
 800557e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005580:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	441a      	add	r2, r3
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800558a:	429a      	cmp	r2, r3
 800558c:	d907      	bls.n	800559e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005592:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800559a:	2301      	movs	r3, #1
 800559c:	e0ac      	b.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2203      	movs	r2, #3
 80055a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2200      	movs	r2, #0
 80055ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055b4:	68fa      	ldr	r2, [r7, #12]
 80055b6:	6812      	ldr	r2, [r2, #0]
 80055b8:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 80055bc:	f043 0302 	orr.w	r3, r3, #2
 80055c0:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c6:	4a4e      	ldr	r2, [pc, #312]	; (8005700 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 80055c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ce:	4a4d      	ldr	r2, [pc, #308]	; (8005704 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 80055d0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055d6:	2200      	movs	r2, #0
 80055d8:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055de:	2b01      	cmp	r3, #1
 80055e0:	d002      	beq.n	80055e8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80055e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e4:	025b      	lsls	r3, r3, #9
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d90a      	bls.n	8005604 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	22a0      	movs	r2, #160	; 0xa0
 80055f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055fa:	4618      	mov	r0, r3
 80055fc:	f003 f97c 	bl	80088f8 <SDMMC_CmdWriteMultiBlock>
 8005600:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005602:	e009      	b.n	8005618 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2290      	movs	r2, #144	; 0x90
 8005608:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005610:	4618      	mov	r0, r3
 8005612:	f003 f94f 	bl	80088b4 <SDMMC_CmdWriteSingleBlock>
 8005616:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561a:	2b00      	cmp	r3, #0
 800561c:	d012      	beq.n	8005644 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a39      	ldr	r2, [pc, #228]	; (8005708 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005624:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800562a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800562c:	431a      	orrs	r2, r3
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2201      	movs	r2, #1
 8005636:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	2200      	movs	r2, #0
 800563e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005640:	2301      	movs	r3, #1
 8005642:	e059      	b.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005644:	4b31      	ldr	r3, [pc, #196]	; (800570c <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800564e:	2240      	movs	r2, #64	; 0x40
 8005650:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005662:	689a      	ldr	r2, [r3, #8]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005672:	68b9      	ldr	r1, [r7, #8]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	3380      	adds	r3, #128	; 0x80
 800567a:	461a      	mov	r2, r3
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	025b      	lsls	r3, r3, #9
 8005680:	089b      	lsrs	r3, r3, #2
 8005682:	f7fd f8c3 	bl	800280c <HAL_DMA_Start_IT>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d01c      	beq.n	80056c6 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	6812      	ldr	r2, [r2, #0]
 8005696:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800569a:	f023 0302 	bic.w	r3, r3, #2
 800569e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	4a18      	ldr	r2, [pc, #96]	; (8005708 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80056a6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80056c2:	2301      	movs	r3, #1
 80056c4:	e018      	b.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80056c6:	f04f 33ff 	mov.w	r3, #4294967295
 80056ca:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	025b      	lsls	r3, r3, #9
 80056d0:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80056d2:	2390      	movs	r3, #144	; 0x90
 80056d4:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 80056d6:	2300      	movs	r3, #0
 80056d8:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80056da:	2300      	movs	r3, #0
 80056dc:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 80056de:	2301      	movs	r3, #1
 80056e0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f107 0210 	add.w	r2, r7, #16
 80056ea:	4611      	mov	r1, r2
 80056ec:	4618      	mov	r0, r3
 80056ee:	f003 f84f 	bl	8008790 <SDIO_ConfigData>

      return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	08005f45 	.word	0x08005f45
 8005704:	08005fe1 	.word	0x08005fe1
 8005708:	004005ff 	.word	0x004005ff
 800570c:	4225858c 	.word	0x4225858c

08005710 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800571c:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005724:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d008      	beq.n	800573e <HAL_SD_IRQHandler+0x2e>
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	f003 0308 	and.w	r3, r3, #8
 8005732:	2b00      	cmp	r3, #0
 8005734:	d003      	beq.n	800573e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 fffd 	bl	8006736 <SD_Read_IT>
 800573c:	e165      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005744:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 808f 	beq.w	800586c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005756:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800575e:	687a      	ldr	r2, [r7, #4]
 8005760:	6812      	ldr	r2, [r2, #0]
 8005762:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005766:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800576a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f022 0201 	bic.w	r2, r2, #1
 800577a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f003 0308 	and.w	r3, r3, #8
 8005782:	2b00      	cmp	r3, #0
 8005784:	d039      	beq.n	80057fa <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d104      	bne.n	800579a <HAL_SD_IRQHandler+0x8a>
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f003 0320 	and.w	r3, r3, #32
 8005796:	2b00      	cmp	r3, #0
 8005798:	d011      	beq.n	80057be <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f003 f8cc 	bl	800893c <SDMMC_CmdStopTransfer>
 80057a4:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057a6:	68bb      	ldr	r3, [r7, #8]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d008      	beq.n	80057be <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	431a      	orrs	r2, r3
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f92f 	bl	8005a1c <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f240 523a 	movw	r2, #1338	; 0x53a
 80057c6:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2201      	movs	r2, #1
 80057cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	f003 0301 	and.w	r3, r3, #1
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d104      	bne.n	80057ea <HAL_SD_IRQHandler+0xda>
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f003 0302 	and.w	r3, r3, #2
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f003 fd32 	bl	8009254 <HAL_SD_RxCpltCallback>
 80057f0:	e10b      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f003 fd24 	bl	8009240 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057f8:	e107      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 8102 	beq.w	8005a0a <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d011      	beq.n	8005834 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	4618      	mov	r0, r3
 8005816:	f003 f891 	bl	800893c <SDMMC_CmdStopTransfer>
 800581a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f8f4 	bl	8005a1c <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	f040 80e5 	bne.w	8005a0a <HAL_SD_IRQHandler+0x2fa>
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 0302 	and.w	r3, r3, #2
 8005846:	2b00      	cmp	r3, #0
 8005848:	f040 80df 	bne.w	8005a0a <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f022 0208 	bic.w	r2, r2, #8
 800585a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2201      	movs	r2, #1
 8005860:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f003 fceb 	bl	8009240 <HAL_SD_TxCpltCallback>
}
 800586a:	e0ce      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005876:	2b00      	cmp	r3, #0
 8005878:	d008      	beq.n	800588c <HAL_SD_IRQHandler+0x17c>
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f003 0308 	and.w	r3, r3, #8
 8005880:	2b00      	cmp	r3, #0
 8005882:	d003      	beq.n	800588c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f000 ffa7 	bl	80067d8 <SD_Write_IT>
 800588a:	e0be      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005892:	f240 233a 	movw	r3, #570	; 0x23a
 8005896:	4013      	ands	r3, r2
 8005898:	2b00      	cmp	r3, #0
 800589a:	f000 80b6 	beq.w	8005a0a <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a4:	f003 0302 	and.w	r3, r3, #2
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d005      	beq.n	80058b8 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b0:	f043 0202 	orr.w	r2, r3, #2
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058be:	f003 0308 	and.w	r3, r3, #8
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ca:	f043 0208 	orr.w	r2, r3, #8
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058d8:	f003 0320 	and.w	r3, r3, #32
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d005      	beq.n	80058ec <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058e4:	f043 0220 	orr.w	r2, r3, #32
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f2:	f003 0310 	and.w	r3, r3, #16
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d005      	beq.n	8005906 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058fe:	f043 0210 	orr.w	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800590c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005910:	2b00      	cmp	r3, #0
 8005912:	d005      	beq.n	8005920 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005918:	f043 0208 	orr.w	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f240 723a 	movw	r2, #1850	; 0x73a
 8005928:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005930:	687a      	ldr	r2, [r7, #4]
 8005932:	6812      	ldr	r2, [r2, #0]
 8005934:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 8005938:	f023 0302 	bic.w	r3, r3, #2
 800593c:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4618      	mov	r0, r3
 8005944:	f002 fffa 	bl	800893c <SDMMC_CmdStopTransfer>
 8005948:	4602      	mov	r2, r0
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594e:	431a      	orrs	r2, r3
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f003 0308 	and.w	r3, r3, #8
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2201      	movs	r2, #1
 8005962:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2200      	movs	r2, #0
 800596a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 f855 	bl	8005a1c <HAL_SD_ErrorCallback>
}
 8005972:	e04a      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800597a:	2b00      	cmp	r3, #0
 800597c:	d045      	beq.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0310 	and.w	r3, r3, #16
 8005984:	2b00      	cmp	r3, #0
 8005986:	d104      	bne.n	8005992 <HAL_SD_IRQHandler+0x282>
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	f003 0320 	and.w	r3, r3, #32
 800598e:	2b00      	cmp	r3, #0
 8005990:	d011      	beq.n	80059b6 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005996:	4a1f      	ldr	r2, [pc, #124]	; (8005a14 <HAL_SD_IRQHandler+0x304>)
 8005998:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800599e:	4618      	mov	r0, r3
 80059a0:	f7fc fffc 	bl	800299c <HAL_DMA_Abort_IT>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d02f      	beq.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 fb68 	bl	8006084 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 80059b4:	e029      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d104      	bne.n	80059ca <HAL_SD_IRQHandler+0x2ba>
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0302 	and.w	r3, r3, #2
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d011      	beq.n	80059ee <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <HAL_SD_IRQHandler+0x308>)
 80059d0:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d6:	4618      	mov	r0, r3
 80059d8:	f7fc ffe0 	bl	800299c <HAL_DMA_Abort_IT>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d013      	beq.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 fb83 	bl	80060f2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059ec:	e00d      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2200      	movs	r2, #0
 80059f2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f003 fc12 	bl	800922c <HAL_SD_AbortCallback>
}
 8005a08:	e7ff      	b.n	8005a0a <HAL_SD_IRQHandler+0x2fa>
 8005a0a:	bf00      	nop
 8005a0c:	3710      	adds	r7, #16
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
 8005a12:	bf00      	nop
 8005a14:	08006085 	.word	0x08006085
 8005a18:	080060f3 	.word	0x080060f3

08005a1c <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	b083      	sub	sp, #12
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8005a24:	bf00      	nop
 8005a26:	370c      	adds	r7, #12
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2e:	4770      	bx	lr

08005a30 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
 8005a38:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3e:	0f9b      	lsrs	r3, r3, #30
 8005a40:	b2da      	uxtb	r2, r3
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a4a:	0e9b      	lsrs	r3, r3, #26
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a5c:	0e1b      	lsrs	r3, r3, #24
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 0303 	and.w	r3, r3, #3
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a6e:	0c1b      	lsrs	r3, r3, #16
 8005a70:	b2da      	uxtb	r2, r3
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7a:	0a1b      	lsrs	r3, r3, #8
 8005a7c:	b2da      	uxtb	r2, r3
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a86:	b2da      	uxtb	r2, r3
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a90:	0d1b      	lsrs	r3, r3, #20
 8005a92:	b29a      	uxth	r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	f003 030f 	and.w	r3, r3, #15
 8005aa4:	b2da      	uxtb	r2, r3
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aae:	0bdb      	lsrs	r3, r3, #15
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	f003 0301 	and.w	r3, r3, #1
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac0:	0b9b      	lsrs	r3, r3, #14
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	f003 0301 	and.w	r3, r3, #1
 8005ac8:	b2da      	uxtb	r2, r3
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ad2:	0b5b      	lsrs	r3, r3, #13
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f003 0301 	and.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ae4:	0b1b      	lsrs	r3, r3, #12
 8005ae6:	b2db      	uxtb	r3, r3
 8005ae8:	f003 0301 	and.w	r3, r3, #1
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	2200      	movs	r2, #0
 8005af6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d163      	bne.n	8005bc8 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b04:	009a      	lsls	r2, r3, #2
 8005b06:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005b0a:	4013      	ands	r3, r2
 8005b0c:	687a      	ldr	r2, [r7, #4]
 8005b0e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005b10:	0f92      	lsrs	r2, r2, #30
 8005b12:	431a      	orrs	r2, r3
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b1c:	0edb      	lsrs	r3, r3, #27
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	f003 0307 	and.w	r3, r3, #7
 8005b24:	b2da      	uxtb	r2, r3
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b2e:	0e1b      	lsrs	r3, r3, #24
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f003 0307 	and.w	r3, r3, #7
 8005b36:	b2da      	uxtb	r2, r3
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b40:	0d5b      	lsrs	r3, r3, #21
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b52:	0c9b      	lsrs	r3, r3, #18
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	f003 0307 	and.w	r3, r3, #7
 8005b5a:	b2da      	uxtb	r2, r3
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b64:	0bdb      	lsrs	r3, r3, #15
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 0307 	and.w	r3, r3, #7
 8005b6c:	b2da      	uxtb	r2, r3
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	691b      	ldr	r3, [r3, #16]
 8005b76:	1c5a      	adds	r2, r3, #1
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	7e1b      	ldrb	r3, [r3, #24]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	3302      	adds	r3, #2
 8005b88:	2201      	movs	r2, #1
 8005b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8e:	687a      	ldr	r2, [r7, #4]
 8005b90:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b92:	fb02 f203 	mul.w	r2, r2, r3
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	7a1b      	ldrb	r3, [r3, #8]
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	f003 030f 	and.w	r3, r3, #15
 8005ba4:	2201      	movs	r2, #1
 8005ba6:	409a      	lsls	r2, r3
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005bb4:	0a52      	lsrs	r2, r2, #9
 8005bb6:	fb02 f203 	mul.w	r2, r2, r3
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc4:	661a      	str	r2, [r3, #96]	; 0x60
 8005bc6:	e031      	b.n	8005c2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d11d      	bne.n	8005c0c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005bd4:	041b      	lsls	r3, r3, #16
 8005bd6:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bde:	0c1b      	lsrs	r3, r3, #16
 8005be0:	431a      	orrs	r2, r3
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	3301      	adds	r3, #1
 8005bec:	029a      	lsls	r2, r3, #10
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c00:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	661a      	str	r2, [r3, #96]	; 0x60
 8005c0a:	e00f      	b.n	8005c2c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	4a58      	ldr	r2, [pc, #352]	; (8005d74 <HAL_SD_GetCardCSD+0x344>)
 8005c12:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c18:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2201      	movs	r2, #1
 8005c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e09d      	b.n	8005d68 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c30:	0b9b      	lsrs	r3, r3, #14
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0301 	and.w	r3, r3, #1
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c42:	09db      	lsrs	r3, r3, #7
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5a:	b2da      	uxtb	r2, r3
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c64:	0fdb      	lsrs	r3, r3, #31
 8005c66:	b2da      	uxtb	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c70:	0f5b      	lsrs	r3, r3, #29
 8005c72:	b2db      	uxtb	r3, r3
 8005c74:	f003 0303 	and.w	r3, r3, #3
 8005c78:	b2da      	uxtb	r2, r3
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	0e9b      	lsrs	r3, r3, #26
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 0307 	and.w	r3, r3, #7
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c94:	0d9b      	lsrs	r3, r3, #22
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	f003 030f 	and.w	r3, r3, #15
 8005c9c:	b2da      	uxtb	r2, r3
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ca6:	0d5b      	lsrs	r3, r3, #21
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	b2da      	uxtb	r2, r3
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	0c1b      	lsrs	r3, r3, #16
 8005cc4:	b2db      	uxtb	r3, r3
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	b2da      	uxtb	r2, r3
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd6:	0bdb      	lsrs	r3, r3, #15
 8005cd8:	b2db      	uxtb	r3, r3
 8005cda:	f003 0301 	and.w	r3, r3, #1
 8005cde:	b2da      	uxtb	r2, r3
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cea:	0b9b      	lsrs	r3, r3, #14
 8005cec:	b2db      	uxtb	r3, r3
 8005cee:	f003 0301 	and.w	r3, r3, #1
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfe:	0b5b      	lsrs	r3, r3, #13
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	f003 0301 	and.w	r3, r3, #1
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d12:	0b1b      	lsrs	r3, r3, #12
 8005d14:	b2db      	uxtb	r3, r3
 8005d16:	f003 0301 	and.w	r3, r3, #1
 8005d1a:	b2da      	uxtb	r2, r3
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d26:	0a9b      	lsrs	r3, r3, #10
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	b2da      	uxtb	r2, r3
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	0a1b      	lsrs	r3, r3, #8
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	f003 0303 	and.w	r3, r3, #3
 8005d42:	b2da      	uxtb	r2, r3
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d4e:	085b      	lsrs	r3, r3, #1
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d56:	b2da      	uxtb	r2, r3
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2201      	movs	r2, #1
 8005d62:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d66:	2300      	movs	r3, #0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	370c      	adds	r7, #12
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	004005ff 	.word	0x004005ff

08005d78 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b083      	sub	sp, #12
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
 8005d80:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005dc2:	2300      	movs	r3, #0
}
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	370c      	adds	r7, #12
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr

08005dd0 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005dd0:	b5b0      	push	{r4, r5, r7, lr}
 8005dd2:	b08e      	sub	sp, #56	; 0x38
 8005dd4:	af04      	add	r7, sp, #16
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2203      	movs	r2, #3
 8005de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dec:	2b03      	cmp	r3, #3
 8005dee:	d02e      	beq.n	8005e4e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df6:	d106      	bne.n	8005e06 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dfc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	639a      	str	r2, [r3, #56]	; 0x38
 8005e04:	e029      	b.n	8005e5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e0c:	d10a      	bne.n	8005e24 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fb28 	bl	8006464 <SD_WideBus_Enable>
 8005e14:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	431a      	orrs	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	639a      	str	r2, [r3, #56]	; 0x38
 8005e22:	e01a      	b.n	8005e5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 fb65 	bl	80064fa <SD_WideBus_Disable>
 8005e30:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e36:	6a3b      	ldr	r3, [r7, #32]
 8005e38:	431a      	orrs	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	639a      	str	r2, [r3, #56]	; 0x38
 8005e3e:	e00c      	b.n	8005e5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e44:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e4c:	e005      	b.n	8005e5a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d00b      	beq.n	8005e7a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	4a26      	ldr	r2, [pc, #152]	; (8005f00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e68:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e78:	e01f      	b.n	8005eba <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	685b      	ldr	r3, [r3, #4]
 8005e7e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
 8005e8a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	699b      	ldr	r3, [r3, #24]
 8005e9a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681d      	ldr	r5, [r3, #0]
 8005ea0:	466c      	mov	r4, sp
 8005ea2:	f107 0314 	add.w	r3, r7, #20
 8005ea6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005eaa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005eb4:	4628      	mov	r0, r5
 8005eb6:	f002 fbbb 	bl	8008630 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f002 fc90 	bl	80087e8 <SDMMC_CmdBlockLength>
 8005ec8:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005eca:	6a3b      	ldr	r3, [r7, #32]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00c      	beq.n	8005eea <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a0a      	ldr	r2, [pc, #40]	; (8005f00 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005ed6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005edc:	6a3b      	ldr	r3, [r7, #32]
 8005ede:	431a      	orrs	r2, r3
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005ee4:	2301      	movs	r3, #1
 8005ee6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2201      	movs	r2, #1
 8005eee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005ef6:	4618      	mov	r0, r3
 8005ef8:	3728      	adds	r7, #40	; 0x28
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bdb0      	pop	{r4, r5, r7, pc}
 8005efe:	bf00      	nop
 8005f00:	004005ff 	.word	0x004005ff

08005f04 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b086      	sub	sp, #24
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005f10:	f107 030c 	add.w	r3, r7, #12
 8005f14:	4619      	mov	r1, r3
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fa7c 	bl	8006414 <SD_SendStatus>
 8005f1c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d005      	beq.n	8005f30 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f28:	697b      	ldr	r3, [r7, #20]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	0a5b      	lsrs	r3, r3, #9
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005f3a:	693b      	ldr	r3, [r7, #16]
}
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	3718      	adds	r7, #24
 8005f40:	46bd      	mov	sp, r7
 8005f42:	bd80      	pop	{r7, pc}

08005f44 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f50:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f62:	bf00      	nop
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr

08005f6e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b084      	sub	sp, #16
 8005f72:	af00      	add	r7, sp, #0
 8005f74:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f7a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f80:	2b82      	cmp	r3, #130	; 0x82
 8005f82:	d111      	bne.n	8005fa8 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f002 fcd7 	bl	800893c <SDMMC_CmdStopTransfer>
 8005f8e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d008      	beq.n	8005fa8 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	431a      	orrs	r2, r3
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7ff fd3a 	bl	8005a1c <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 0208 	bic.w	r2, r2, #8
 8005fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f240 523a 	movw	r2, #1338	; 0x53a
 8005fc0:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2201      	movs	r2, #1
 8005fc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005fd0:	68f8      	ldr	r0, [r7, #12]
 8005fd2:	f003 f93f 	bl	8009254 <HAL_SD_RxCpltCallback>
#endif
}
 8005fd6:	bf00      	nop
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fec:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f7fc fe80 	bl	8002cf4 <HAL_DMA_GetError>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d03e      	beq.n	8006078 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005ffa:	697b      	ldr	r3, [r7, #20]
 8005ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006000:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006008:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800600a:	693b      	ldr	r3, [r7, #16]
 800600c:	2b01      	cmp	r3, #1
 800600e:	d002      	beq.n	8006016 <SD_DMAError+0x36>
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b01      	cmp	r3, #1
 8006014:	d12d      	bne.n	8006072 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a19      	ldr	r2, [pc, #100]	; (8006080 <SD_DMAError+0xa0>)
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800602c:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006032:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800603a:	6978      	ldr	r0, [r7, #20]
 800603c:	f7ff ff62 	bl	8005f04 <HAL_SD_GetCardState>
 8006040:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	2b06      	cmp	r3, #6
 8006046:	d002      	beq.n	800604e <SD_DMAError+0x6e>
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	2b05      	cmp	r3, #5
 800604c:	d10a      	bne.n	8006064 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4618      	mov	r0, r3
 8006054:	f002 fc72 	bl	800893c <SDMMC_CmdStopTransfer>
 8006058:	4602      	mov	r2, r0
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800605e:	431a      	orrs	r2, r3
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f7ff fcd2 	bl	8005a1c <HAL_SD_ErrorCallback>
#endif
  }
}
 8006078:	bf00      	nop
 800607a:	3718      	adds	r7, #24
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}
 8006080:	004005ff 	.word	0x004005ff

08006084 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006084:	b580      	push	{r7, lr}
 8006086:	b084      	sub	sp, #16
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006090:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f240 523a 	movw	r2, #1338	; 0x53a
 800609a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f7ff ff31 	bl	8005f04 <HAL_SD_GetCardState>
 80060a2:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2200      	movs	r2, #0
 80060b0:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	2b06      	cmp	r3, #6
 80060b6:	d002      	beq.n	80060be <SD_DMATxAbort+0x3a>
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	2b05      	cmp	r3, #5
 80060bc:	d10a      	bne.n	80060d4 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f002 fc3a 	bl	800893c <SDMMC_CmdStopTransfer>
 80060c8:	4602      	mov	r2, r0
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ce:	431a      	orrs	r2, r3
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f003 f8a5 	bl	800922c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060e2:	e002      	b.n	80060ea <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f7ff fc99 	bl	8005a1c <HAL_SD_ErrorCallback>
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b084      	sub	sp, #16
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fe:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f240 523a 	movw	r2, #1338	; 0x53a
 8006108:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f7ff fefa 	bl	8005f04 <HAL_SD_GetCardState>
 8006110:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	2b06      	cmp	r3, #6
 8006124:	d002      	beq.n	800612c <SD_DMARxAbort+0x3a>
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b05      	cmp	r3, #5
 800612a:	d10a      	bne.n	8006142 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f002 fc03 	bl	800893c <SDMMC_CmdStopTransfer>
 8006136:	4602      	mov	r2, r0
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800613c:	431a      	orrs	r2, r3
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800614a:	68f8      	ldr	r0, [r7, #12]
 800614c:	f003 f86e 	bl	800922c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006150:	e002      	b.n	8006158 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006152:	68f8      	ldr	r0, [r7, #12]
 8006154:	f7ff fc62 	bl	8005a1c <HAL_SD_ErrorCallback>
}
 8006158:	bf00      	nop
 800615a:	3710      	adds	r7, #16
 800615c:	46bd      	mov	sp, r7
 800615e:	bd80      	pop	{r7, pc}

08006160 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006160:	b5b0      	push	{r4, r5, r7, lr}
 8006162:	b094      	sub	sp, #80	; 0x50
 8006164:	af04      	add	r7, sp, #16
 8006166:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006168:	2301      	movs	r3, #1
 800616a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4618      	mov	r0, r3
 8006172:	f002 fab5 	bl	80086e0 <SDIO_GetPowerState>
 8006176:	4603      	mov	r3, r0
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800617c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006180:	e0b6      	b.n	80062f0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006186:	2b03      	cmp	r3, #3
 8006188:	d02f      	beq.n	80061ea <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	4618      	mov	r0, r3
 8006190:	f002 fcde 	bl	8008b50 <SDMMC_CmdSendCID>
 8006194:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	2b00      	cmp	r3, #0
 800619a:	d001      	beq.n	80061a0 <SD_InitCard+0x40>
    {
      return errorstate;
 800619c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619e:	e0a7      	b.n	80062f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2100      	movs	r1, #0
 80061a6:	4618      	mov	r0, r3
 80061a8:	f002 fadf 	bl	800876a <SDIO_GetResponse>
 80061ac:	4602      	mov	r2, r0
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2104      	movs	r1, #4
 80061b8:	4618      	mov	r0, r3
 80061ba:	f002 fad6 	bl	800876a <SDIO_GetResponse>
 80061be:	4602      	mov	r2, r0
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	2108      	movs	r1, #8
 80061ca:	4618      	mov	r0, r3
 80061cc:	f002 facd 	bl	800876a <SDIO_GetResponse>
 80061d0:	4602      	mov	r2, r0
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	210c      	movs	r1, #12
 80061dc:	4618      	mov	r0, r3
 80061de:	f002 fac4 	bl	800876a <SDIO_GetResponse>
 80061e2:	4602      	mov	r2, r0
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ee:	2b03      	cmp	r3, #3
 80061f0:	d00d      	beq.n	800620e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f107 020e 	add.w	r2, r7, #14
 80061fa:	4611      	mov	r1, r2
 80061fc:	4618      	mov	r0, r3
 80061fe:	f002 fce4 	bl	8008bca <SDMMC_CmdSetRelAdd>
 8006202:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006204:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <SD_InitCard+0xae>
    {
      return errorstate;
 800620a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800620c:	e070      	b.n	80062f0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006212:	2b03      	cmp	r3, #3
 8006214:	d036      	beq.n	8006284 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8006216:	89fb      	ldrh	r3, [r7, #14]
 8006218:	461a      	mov	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006226:	041b      	lsls	r3, r3, #16
 8006228:	4619      	mov	r1, r3
 800622a:	4610      	mov	r0, r2
 800622c:	f002 fcae 	bl	8008b8c <SDMMC_CmdSendCSD>
 8006230:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006232:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006234:	2b00      	cmp	r3, #0
 8006236:	d001      	beq.n	800623c <SD_InitCard+0xdc>
    {
      return errorstate;
 8006238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800623a:	e059      	b.n	80062f0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	2100      	movs	r1, #0
 8006242:	4618      	mov	r0, r3
 8006244:	f002 fa91 	bl	800876a <SDIO_GetResponse>
 8006248:	4602      	mov	r2, r0
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2104      	movs	r1, #4
 8006254:	4618      	mov	r0, r3
 8006256:	f002 fa88 	bl	800876a <SDIO_GetResponse>
 800625a:	4602      	mov	r2, r0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	2108      	movs	r1, #8
 8006266:	4618      	mov	r0, r3
 8006268:	f002 fa7f 	bl	800876a <SDIO_GetResponse>
 800626c:	4602      	mov	r2, r0
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	210c      	movs	r1, #12
 8006278:	4618      	mov	r0, r3
 800627a:	f002 fa76 	bl	800876a <SDIO_GetResponse>
 800627e:	4602      	mov	r2, r0
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	2104      	movs	r1, #4
 800628a:	4618      	mov	r0, r3
 800628c:	f002 fa6d 	bl	800876a <SDIO_GetResponse>
 8006290:	4603      	mov	r3, r0
 8006292:	0d1a      	lsrs	r2, r3, #20
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006298:	f107 0310 	add.w	r3, r7, #16
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fbc6 	bl	8005a30 <HAL_SD_GetCardCSD>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80062ae:	e01f      	b.n	80062f0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6819      	ldr	r1, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062b8:	041b      	lsls	r3, r3, #16
 80062ba:	461a      	mov	r2, r3
 80062bc:	f04f 0300 	mov.w	r3, #0
 80062c0:	4608      	mov	r0, r1
 80062c2:	f002 fb5d 	bl	8008980 <SDMMC_CmdSelDesel>
 80062c6:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80062c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d001      	beq.n	80062d2 <SD_InitCard+0x172>
  {
    return errorstate;
 80062ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062d0:	e00e      	b.n	80062f0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681d      	ldr	r5, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	466c      	mov	r4, sp
 80062da:	f103 0210 	add.w	r2, r3, #16
 80062de:	ca07      	ldmia	r2, {r0, r1, r2}
 80062e0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062e4:	3304      	adds	r3, #4
 80062e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062e8:	4628      	mov	r0, r5
 80062ea:	f002 f9a1 	bl	8008630 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3740      	adds	r7, #64	; 0x40
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bdb0      	pop	{r4, r5, r7, pc}

080062f8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b086      	sub	sp, #24
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006300:	2300      	movs	r3, #0
 8006302:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8006304:	2300      	movs	r3, #0
 8006306:	617b      	str	r3, [r7, #20]
 8006308:	2300      	movs	r3, #0
 800630a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f002 fb58 	bl	80089c6 <SDMMC_CmdGoIdleState>
 8006316:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <SD_PowerON+0x2a>
  {
    return errorstate;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	e072      	b.n	8006408 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4618      	mov	r0, r3
 8006328:	f002 fb6b 	bl	8008a02 <SDMMC_CmdOperCond>
 800632c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00d      	beq.n	8006350 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4618      	mov	r0, r3
 8006340:	f002 fb41 	bl	80089c6 <SDMMC_CmdGoIdleState>
 8006344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d004      	beq.n	8006356 <SD_PowerON+0x5e>
    {
      return errorstate;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e05b      	b.n	8006408 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800635a:	2b01      	cmp	r3, #1
 800635c:	d137      	bne.n	80063ce <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	2100      	movs	r1, #0
 8006364:	4618      	mov	r0, r3
 8006366:	f002 fb6b 	bl	8008a40 <SDMMC_CmdAppCommand>
 800636a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d02d      	beq.n	80063ce <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006372:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006376:	e047      	b.n	8006408 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	2100      	movs	r1, #0
 800637e:	4618      	mov	r0, r3
 8006380:	f002 fb5e 	bl	8008a40 <SDMMC_CmdAppCommand>
 8006384:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d001      	beq.n	8006390 <SD_PowerON+0x98>
    {
      return errorstate;
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	e03b      	b.n	8006408 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	491e      	ldr	r1, [pc, #120]	; (8006410 <SD_PowerON+0x118>)
 8006396:	4618      	mov	r0, r3
 8006398:	f002 fb74 	bl	8008a84 <SDMMC_CmdAppOperCommand>
 800639c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d002      	beq.n	80063aa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80063a4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80063a8:	e02e      	b.n	8006408 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	2100      	movs	r1, #0
 80063b0:	4618      	mov	r0, r3
 80063b2:	f002 f9da 	bl	800876a <SDIO_GetResponse>
 80063b6:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80063b8:	697b      	ldr	r3, [r7, #20]
 80063ba:	0fdb      	lsrs	r3, r3, #31
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d101      	bne.n	80063c4 <SD_PowerON+0xcc>
 80063c0:	2301      	movs	r3, #1
 80063c2:	e000      	b.n	80063c6 <SD_PowerON+0xce>
 80063c4:	2300      	movs	r3, #0
 80063c6:	613b      	str	r3, [r7, #16]

    count++;
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	3301      	adds	r3, #1
 80063cc:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d802      	bhi.n	80063de <SD_PowerON+0xe6>
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d0cc      	beq.n	8006378 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063e4:	4293      	cmp	r3, r2
 80063e6:	d902      	bls.n	80063ee <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80063e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ec:	e00c      	b.n	8006408 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	645a      	str	r2, [r3, #68]	; 0x44
 80063fe:	e002      	b.n	8006406 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8006406:	2300      	movs	r3, #0
}
 8006408:	4618      	mov	r0, r3
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	c1100000 	.word	0xc1100000

08006414 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b084      	sub	sp, #16
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d102      	bne.n	800642a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8006424:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006428:	e018      	b.n	800645c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006432:	041b      	lsls	r3, r3, #16
 8006434:	4619      	mov	r1, r3
 8006436:	4610      	mov	r0, r2
 8006438:	f002 fbe8 	bl	8008c0c <SDMMC_CmdSendStatus>
 800643c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d001      	beq.n	8006448 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	e009      	b.n	800645c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2100      	movs	r1, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f002 f98b 	bl	800876a <SDIO_GetResponse>
 8006454:	4602      	mov	r2, r0
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800645a:	2300      	movs	r3, #0
}
 800645c:	4618      	mov	r0, r3
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800646c:	2300      	movs	r3, #0
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	2300      	movs	r3, #0
 8006472:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2100      	movs	r1, #0
 800647a:	4618      	mov	r0, r3
 800647c:	f002 f975 	bl	800876a <SDIO_GetResponse>
 8006480:	4603      	mov	r3, r0
 8006482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006486:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800648a:	d102      	bne.n	8006492 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800648c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006490:	e02f      	b.n	80064f2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006492:	f107 030c 	add.w	r3, r7, #12
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 f879 	bl	8006590 <SD_FindSCR>
 800649e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	e023      	b.n	80064f2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01c      	beq.n	80064ee <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064bc:	041b      	lsls	r3, r3, #16
 80064be:	4619      	mov	r1, r3
 80064c0:	4610      	mov	r0, r2
 80064c2:	f002 fabd 	bl	8008a40 <SDMMC_CmdAppCommand>
 80064c6:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	e00f      	b.n	80064f2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	2102      	movs	r1, #2
 80064d8:	4618      	mov	r0, r3
 80064da:	f002 faf6 	bl	8008aca <SDMMC_CmdBusWidth>
 80064de:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d001      	beq.n	80064ea <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064e6:	697b      	ldr	r3, [r7, #20]
 80064e8:	e003      	b.n	80064f2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e001      	b.n	80064f2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064ee:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3718      	adds	r7, #24
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}

080064fa <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064fa:	b580      	push	{r7, lr}
 80064fc:	b086      	sub	sp, #24
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006502:	2300      	movs	r3, #0
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	2300      	movs	r3, #0
 8006508:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2100      	movs	r1, #0
 8006510:	4618      	mov	r0, r3
 8006512:	f002 f92a 	bl	800876a <SDIO_GetResponse>
 8006516:	4603      	mov	r3, r0
 8006518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800651c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006520:	d102      	bne.n	8006528 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006522:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006526:	e02f      	b.n	8006588 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006528:	f107 030c 	add.w	r3, r7, #12
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f82e 	bl	8006590 <SD_FindSCR>
 8006534:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	e023      	b.n	8006588 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006546:	2b00      	cmp	r3, #0
 8006548:	d01c      	beq.n	8006584 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006552:	041b      	lsls	r3, r3, #16
 8006554:	4619      	mov	r1, r3
 8006556:	4610      	mov	r0, r2
 8006558:	f002 fa72 	bl	8008a40 <SDMMC_CmdAppCommand>
 800655c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	e00f      	b.n	8006588 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	2100      	movs	r1, #0
 800656e:	4618      	mov	r0, r3
 8006570:	f002 faab 	bl	8008aca <SDMMC_CmdBusWidth>
 8006574:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	e003      	b.n	8006588 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006580:	2300      	movs	r3, #0
 8006582:	e001      	b.n	8006588 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006584:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006590:	b590      	push	{r4, r7, lr}
 8006592:	b08f      	sub	sp, #60	; 0x3c
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800659a:	f7fb fc65 	bl	8001e68 <HAL_GetTick>
 800659e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80065a0:	2300      	movs	r3, #0
 80065a2:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 80065a4:	2300      	movs	r3, #0
 80065a6:	60bb      	str	r3, [r7, #8]
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	2108      	movs	r1, #8
 80065b6:	4618      	mov	r0, r3
 80065b8:	f002 f916 	bl	80087e8 <SDMMC_CmdBlockLength>
 80065bc:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d001      	beq.n	80065c8 <SD_FindSCR+0x38>
  {
    return errorstate;
 80065c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065c6:	e0b2      	b.n	800672e <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065d0:	041b      	lsls	r3, r3, #16
 80065d2:	4619      	mov	r1, r3
 80065d4:	4610      	mov	r0, r2
 80065d6:	f002 fa33 	bl	8008a40 <SDMMC_CmdAppCommand>
 80065da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d001      	beq.n	80065e6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	e0a3      	b.n	800672e <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065e6:	f04f 33ff 	mov.w	r3, #4294967295
 80065ea:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065ec:	2308      	movs	r3, #8
 80065ee:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80065f0:	2330      	movs	r3, #48	; 0x30
 80065f2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80065f4:	2302      	movs	r3, #2
 80065f6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065f8:	2300      	movs	r3, #0
 80065fa:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80065fc:	2301      	movs	r3, #1
 80065fe:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f107 0210 	add.w	r2, r7, #16
 8006608:	4611      	mov	r1, r2
 800660a:	4618      	mov	r0, r3
 800660c:	f002 f8c0 	bl	8008790 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	4618      	mov	r0, r3
 8006616:	f002 fa7a 	bl	8008b0e <SDMMC_CmdSendSCR>
 800661a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800661c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800661e:	2b00      	cmp	r3, #0
 8006620:	d02a      	beq.n	8006678 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8006622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006624:	e083      	b.n	800672e <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800662c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00f      	beq.n	8006654 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6819      	ldr	r1, [r3, #0]
 8006638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	f107 0208 	add.w	r2, r7, #8
 8006640:	18d4      	adds	r4, r2, r3
 8006642:	4608      	mov	r0, r1
 8006644:	f002 f81f 	bl	8008686 <SDIO_ReadFIFO>
 8006648:	4603      	mov	r3, r0
 800664a:	6023      	str	r3, [r4, #0]
      index++;
 800664c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800664e:	3301      	adds	r3, #1
 8006650:	637b      	str	r3, [r7, #52]	; 0x34
 8006652:	e006      	b.n	8006662 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800665a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d012      	beq.n	8006688 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006662:	f7fb fc01 	bl	8001e68 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006670:	d102      	bne.n	8006678 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006672:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006676:	e05a      	b.n	800672e <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800667e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006682:	2b00      	cmp	r3, #0
 8006684:	d0cf      	beq.n	8006626 <SD_FindSCR+0x96>
 8006686:	e000      	b.n	800668a <SD_FindSCR+0xfa>
      break;
 8006688:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006690:	f003 0308 	and.w	r3, r3, #8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d005      	beq.n	80066a4 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2208      	movs	r2, #8
 800669e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80066a0:	2308      	movs	r3, #8
 80066a2:	e044      	b.n	800672e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d005      	beq.n	80066be <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2202      	movs	r2, #2
 80066b8:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80066ba:	2302      	movs	r3, #2
 80066bc:	e037      	b.n	800672e <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80066c4:	f003 0320 	and.w	r3, r3, #32
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d005      	beq.n	80066d8 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2220      	movs	r2, #32
 80066d2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80066d4:	2320      	movs	r3, #32
 80066d6:	e02a      	b.n	800672e <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80066e0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	061a      	lsls	r2, r3, #24
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	021b      	lsls	r3, r3, #8
 80066ea:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066ee:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	0a1b      	lsrs	r3, r3, #8
 80066f4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066f8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	0e1b      	lsrs	r3, r3, #24
 80066fe:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006702:	601a      	str	r2, [r3, #0]
    scr++;
 8006704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006706:	3304      	adds	r3, #4
 8006708:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	061a      	lsls	r2, r3, #24
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	021b      	lsls	r3, r3, #8
 8006712:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006716:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	0a1b      	lsrs	r3, r3, #8
 800671c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006720:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	0e1b      	lsrs	r3, r3, #24
 8006726:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8006728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800672a:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	373c      	adds	r7, #60	; 0x3c
 8006732:	46bd      	mov	sp, r7
 8006734:	bd90      	pop	{r4, r7, pc}

08006736 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b086      	sub	sp, #24
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006742:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006748:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d03f      	beq.n	80067d0 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
 8006754:	e033      	b.n	80067be <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4618      	mov	r0, r3
 800675c:	f001 ff93 	bl	8008686 <SDIO_ReadFIFO>
 8006760:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	b2da      	uxtb	r2, r3
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	701a      	strb	r2, [r3, #0]
      tmp++;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3301      	adds	r3, #1
 800676e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	3b01      	subs	r3, #1
 8006774:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	0a1b      	lsrs	r3, r3, #8
 800677a:	b2da      	uxtb	r2, r3
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	3301      	adds	r3, #1
 8006784:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006786:	693b      	ldr	r3, [r7, #16]
 8006788:	3b01      	subs	r3, #1
 800678a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	0c1b      	lsrs	r3, r3, #16
 8006790:	b2da      	uxtb	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	3301      	adds	r3, #1
 800679a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	3b01      	subs	r3, #1
 80067a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	0e1b      	lsrs	r3, r3, #24
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	3301      	adds	r3, #1
 80067b0:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	3b01      	subs	r3, #1
 80067b6:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 80067b8:	697b      	ldr	r3, [r7, #20]
 80067ba:	3301      	adds	r3, #1
 80067bc:	617b      	str	r3, [r7, #20]
 80067be:	697b      	ldr	r3, [r7, #20]
 80067c0:	2b07      	cmp	r3, #7
 80067c2:	d9c8      	bls.n	8006756 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	693a      	ldr	r2, [r7, #16]
 80067ce:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 80067d0:	bf00      	nop
 80067d2:	3718      	adds	r7, #24
 80067d4:	46bd      	mov	sp, r7
 80067d6:	bd80      	pop	{r7, pc}

080067d8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	6a1b      	ldr	r3, [r3, #32]
 80067e4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ea:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d043      	beq.n	800687a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
 80067f6:	e037      	b.n	8006868 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	781b      	ldrb	r3, [r3, #0]
 80067fc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	3301      	adds	r3, #1
 8006802:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006804:	693b      	ldr	r3, [r7, #16]
 8006806:	3b01      	subs	r3, #1
 8006808:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	021a      	lsls	r2, r3, #8
 8006810:	68bb      	ldr	r3, [r7, #8]
 8006812:	4313      	orrs	r3, r2
 8006814:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	3301      	adds	r3, #1
 800681a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	3b01      	subs	r3, #1
 8006820:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	041a      	lsls	r2, r3, #16
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	4313      	orrs	r3, r2
 800682c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	3301      	adds	r3, #1
 8006832:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3b01      	subs	r3, #1
 8006838:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	061a      	lsls	r2, r3, #24
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3301      	adds	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	3b01      	subs	r3, #1
 8006850:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f107 0208 	add.w	r2, r7, #8
 800685a:	4611      	mov	r1, r2
 800685c:	4618      	mov	r0, r3
 800685e:	f001 ff1f 	bl	80086a0 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006862:	697b      	ldr	r3, [r7, #20]
 8006864:	3301      	adds	r3, #1
 8006866:	617b      	str	r3, [r7, #20]
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	2b07      	cmp	r3, #7
 800686c:	d9c4      	bls.n	80067f8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68fa      	ldr	r2, [r7, #12]
 8006872:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800687a:	bf00      	nop
 800687c:	3718      	adds	r7, #24
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b082      	sub	sp, #8
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d101      	bne.n	8006894 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006890:	2301      	movs	r3, #1
 8006892:	e07b      	b.n	800698c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	2b00      	cmp	r3, #0
 800689a:	d108      	bne.n	80068ae <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	685b      	ldr	r3, [r3, #4]
 80068a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80068a4:	d009      	beq.n	80068ba <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	61da      	str	r2, [r3, #28]
 80068ac:	e005      	b.n	80068ba <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2200      	movs	r2, #0
 80068b2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2200      	movs	r2, #0
 80068b8:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2200      	movs	r2, #0
 80068be:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d106      	bne.n	80068da <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f7fa fbc9 	bl	800106c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	2202      	movs	r2, #2
 80068de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068f0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	685b      	ldr	r3, [r3, #4]
 80068f6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006902:	431a      	orrs	r2, r3
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	691b      	ldr	r3, [r3, #16]
 8006912:	f003 0302 	and.w	r3, r3, #2
 8006916:	431a      	orrs	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	695b      	ldr	r3, [r3, #20]
 800691c:	f003 0301 	and.w	r3, r3, #1
 8006920:	431a      	orrs	r2, r3
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800692a:	431a      	orrs	r2, r3
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	69db      	ldr	r3, [r3, #28]
 8006930:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006934:	431a      	orrs	r2, r3
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a1b      	ldr	r3, [r3, #32]
 800693a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800693e:	ea42 0103 	orr.w	r1, r2, r3
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	699b      	ldr	r3, [r3, #24]
 8006956:	0c1b      	lsrs	r3, r3, #16
 8006958:	f003 0104 	and.w	r1, r3, #4
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006960:	f003 0210 	and.w	r2, r3, #16
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	430a      	orrs	r2, r1
 800696a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	69da      	ldr	r2, [r3, #28]
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800697a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2200      	movs	r2, #0
 8006980:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2201      	movs	r2, #1
 8006986:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800698a:	2300      	movs	r3, #0
}
 800698c:	4618      	mov	r0, r3
 800698e:	3708      	adds	r7, #8
 8006990:	46bd      	mov	sp, r7
 8006992:	bd80      	pop	{r7, pc}

08006994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	e041      	b.n	8006a2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7fa ff84 	bl	80018c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2202      	movs	r2, #2
 80069c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	3304      	adds	r3, #4
 80069d0:	4619      	mov	r1, r3
 80069d2:	4610      	mov	r0, r2
 80069d4:	f000 fb4a 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2201      	movs	r2, #1
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}

08006a32 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006a32:	b580      	push	{r7, lr}
 8006a34:	b082      	sub	sp, #8
 8006a36:	af00      	add	r7, sp, #0
 8006a38:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a40:	2301      	movs	r3, #1
 8006a42:	e041      	b.n	8006ac8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a4a:	b2db      	uxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d106      	bne.n	8006a5e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a58:	6878      	ldr	r0, [r7, #4]
 8006a5a:	f000 f839 	bl	8006ad0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2202      	movs	r2, #2
 8006a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	3304      	adds	r3, #4
 8006a6e:	4619      	mov	r1, r3
 8006a70:	4610      	mov	r0, r2
 8006a72:	f000 fafb 	bl	800706c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2201      	movs	r2, #1
 8006a8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2201      	movs	r2, #1
 8006a92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2201      	movs	r2, #1
 8006a9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2201      	movs	r2, #1
 8006aa2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2201      	movs	r2, #1
 8006aba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3708      	adds	r7, #8
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b02      	cmp	r3, #2
 8006af8:	d122      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	2b02      	cmp	r3, #2
 8006b06:	d11b      	bne.n	8006b40 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f06f 0202 	mvn.w	r2, #2
 8006b10:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2201      	movs	r2, #1
 8006b16:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	f003 0303 	and.w	r3, r3, #3
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d003      	beq.n	8006b2e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fa81 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006b2c:	e005      	b.n	8006b3a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 fa73 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f000 fa84 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	f003 0304 	and.w	r3, r3, #4
 8006b4a:	2b04      	cmp	r3, #4
 8006b4c:	d122      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	f003 0304 	and.w	r3, r3, #4
 8006b58:	2b04      	cmp	r3, #4
 8006b5a:	d11b      	bne.n	8006b94 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f06f 0204 	mvn.w	r2, #4
 8006b64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2202      	movs	r2, #2
 8006b6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d003      	beq.n	8006b82 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7a:	6878      	ldr	r0, [r7, #4]
 8006b7c:	f000 fa57 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006b80:	e005      	b.n	8006b8e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 fa49 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f000 fa5a 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2200      	movs	r2, #0
 8006b92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	691b      	ldr	r3, [r3, #16]
 8006b9a:	f003 0308 	and.w	r3, r3, #8
 8006b9e:	2b08      	cmp	r3, #8
 8006ba0:	d122      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d11b      	bne.n	8006be8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	f06f 0208 	mvn.w	r2, #8
 8006bb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2204      	movs	r2, #4
 8006bbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	69db      	ldr	r3, [r3, #28]
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f000 fa2d 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006bd4:	e005      	b.n	8006be2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fa1f 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fa30 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	f003 0310 	and.w	r3, r3, #16
 8006bf2:	2b10      	cmp	r3, #16
 8006bf4:	d122      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	68db      	ldr	r3, [r3, #12]
 8006bfc:	f003 0310 	and.w	r3, r3, #16
 8006c00:	2b10      	cmp	r3, #16
 8006c02:	d11b      	bne.n	8006c3c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f06f 0210 	mvn.w	r2, #16
 8006c0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	2208      	movs	r2, #8
 8006c12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	69db      	ldr	r3, [r3, #28]
 8006c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 fa03 	bl	800702e <HAL_TIM_IC_CaptureCallback>
 8006c28:	e005      	b.n	8006c36 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f9f5 	bl	800701a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa06 	bl	8007042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	691b      	ldr	r3, [r3, #16]
 8006c42:	f003 0301 	and.w	r3, r3, #1
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d10e      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	68db      	ldr	r3, [r3, #12]
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b01      	cmp	r3, #1
 8006c56:	d107      	bne.n	8006c68 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f06f 0201 	mvn.w	r2, #1
 8006c60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f9cf 	bl	8007006 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	691b      	ldr	r3, [r3, #16]
 8006c6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c72:	2b80      	cmp	r3, #128	; 0x80
 8006c74:	d10e      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	68db      	ldr	r3, [r3, #12]
 8006c7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c80:	2b80      	cmp	r3, #128	; 0x80
 8006c82:	d107      	bne.n	8006c94 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fd5c 	bl	800774c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	691b      	ldr	r3, [r3, #16]
 8006c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c9e:	2b40      	cmp	r3, #64	; 0x40
 8006ca0:	d10e      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cac:	2b40      	cmp	r3, #64	; 0x40
 8006cae:	d107      	bne.n	8006cc0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006cb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006cba:	6878      	ldr	r0, [r7, #4]
 8006cbc:	f000 f9cb 	bl	8007056 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	691b      	ldr	r3, [r3, #16]
 8006cc6:	f003 0320 	and.w	r3, r3, #32
 8006cca:	2b20      	cmp	r3, #32
 8006ccc:	d10e      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	68db      	ldr	r3, [r3, #12]
 8006cd4:	f003 0320 	and.w	r3, r3, #32
 8006cd8:	2b20      	cmp	r3, #32
 8006cda:	d107      	bne.n	8006cec <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0220 	mvn.w	r2, #32
 8006ce4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fd26 	bl	8007738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cec:	bf00      	nop
 8006cee:	3708      	adds	r7, #8
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}

08006cf4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b086      	sub	sp, #24
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d00:	2300      	movs	r3, #0
 8006d02:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	d101      	bne.n	8006d12 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006d0e:	2302      	movs	r3, #2
 8006d10:	e0ae      	b.n	8006e70 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	2201      	movs	r2, #1
 8006d16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2b0c      	cmp	r3, #12
 8006d1e:	f200 809f 	bhi.w	8006e60 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d5d 	.word	0x08006d5d
 8006d2c:	08006e61 	.word	0x08006e61
 8006d30:	08006e61 	.word	0x08006e61
 8006d34:	08006e61 	.word	0x08006e61
 8006d38:	08006d9d 	.word	0x08006d9d
 8006d3c:	08006e61 	.word	0x08006e61
 8006d40:	08006e61 	.word	0x08006e61
 8006d44:	08006e61 	.word	0x08006e61
 8006d48:	08006ddf 	.word	0x08006ddf
 8006d4c:	08006e61 	.word	0x08006e61
 8006d50:	08006e61 	.word	0x08006e61
 8006d54:	08006e61 	.word	0x08006e61
 8006d58:	08006e1f 	.word	0x08006e1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fa22 	bl	80071ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f042 0208 	orr.w	r2, r2, #8
 8006d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f022 0204 	bic.w	r2, r2, #4
 8006d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6999      	ldr	r1, [r3, #24]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691a      	ldr	r2, [r3, #16]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	619a      	str	r2, [r3, #24]
      break;
 8006d9a:	e064      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68b9      	ldr	r1, [r7, #8]
 8006da2:	4618      	mov	r0, r3
 8006da4:	f000 fa72 	bl	800728c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	699a      	ldr	r2, [r3, #24]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006db6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	699a      	ldr	r2, [r3, #24]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006dc6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	6999      	ldr	r1, [r3, #24]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	691b      	ldr	r3, [r3, #16]
 8006dd2:	021a      	lsls	r2, r3, #8
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	619a      	str	r2, [r3, #24]
      break;
 8006ddc:	e043      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fac7 	bl	8007378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f042 0208 	orr.w	r2, r2, #8
 8006df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f022 0204 	bic.w	r2, r2, #4
 8006e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69d9      	ldr	r1, [r3, #28]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691a      	ldr	r2, [r3, #16]
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	430a      	orrs	r2, r1
 8006e1a:	61da      	str	r2, [r3, #28]
      break;
 8006e1c:	e023      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68b9      	ldr	r1, [r7, #8]
 8006e24:	4618      	mov	r0, r3
 8006e26:	f000 fb1b 	bl	8007460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	69da      	ldr	r2, [r3, #28]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e38:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	69da      	ldr	r2, [r3, #28]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e48:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	69d9      	ldr	r1, [r3, #28]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	691b      	ldr	r3, [r3, #16]
 8006e54:	021a      	lsls	r2, r3, #8
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	430a      	orrs	r2, r1
 8006e5c:	61da      	str	r2, [r3, #28]
      break;
 8006e5e:	e002      	b.n	8006e66 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e60:	2301      	movs	r3, #1
 8006e62:	75fb      	strb	r3, [r7, #23]
      break;
 8006e64:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2200      	movs	r2, #0
 8006e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3718      	adds	r7, #24
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e82:	2300      	movs	r3, #0
 8006e84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e8c:	2b01      	cmp	r3, #1
 8006e8e:	d101      	bne.n	8006e94 <HAL_TIM_ConfigClockSource+0x1c>
 8006e90:	2302      	movs	r3, #2
 8006e92:	e0b4      	b.n	8006ffe <HAL_TIM_ConfigClockSource+0x186>
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	2201      	movs	r2, #1
 8006e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2202      	movs	r2, #2
 8006ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006eb2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	68ba      	ldr	r2, [r7, #8]
 8006ec2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ecc:	d03e      	beq.n	8006f4c <HAL_TIM_ConfigClockSource+0xd4>
 8006ece:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ed2:	f200 8087 	bhi.w	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006eda:	f000 8086 	beq.w	8006fea <HAL_TIM_ConfigClockSource+0x172>
 8006ede:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ee2:	d87f      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee4:	2b70      	cmp	r3, #112	; 0x70
 8006ee6:	d01a      	beq.n	8006f1e <HAL_TIM_ConfigClockSource+0xa6>
 8006ee8:	2b70      	cmp	r3, #112	; 0x70
 8006eea:	d87b      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eec:	2b60      	cmp	r3, #96	; 0x60
 8006eee:	d050      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x11a>
 8006ef0:	2b60      	cmp	r3, #96	; 0x60
 8006ef2:	d877      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef4:	2b50      	cmp	r3, #80	; 0x50
 8006ef6:	d03c      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0xfa>
 8006ef8:	2b50      	cmp	r3, #80	; 0x50
 8006efa:	d873      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006efc:	2b40      	cmp	r3, #64	; 0x40
 8006efe:	d058      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0x13a>
 8006f00:	2b40      	cmp	r3, #64	; 0x40
 8006f02:	d86f      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006f04:	2b30      	cmp	r3, #48	; 0x30
 8006f06:	d064      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f08:	2b30      	cmp	r3, #48	; 0x30
 8006f0a:	d86b      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006f0c:	2b20      	cmp	r3, #32
 8006f0e:	d060      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f10:	2b20      	cmp	r3, #32
 8006f12:	d867      	bhi.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d05c      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f18:	2b10      	cmp	r3, #16
 8006f1a:	d05a      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x15a>
 8006f1c:	e062      	b.n	8006fe4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6818      	ldr	r0, [r3, #0]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	6899      	ldr	r1, [r3, #8]
 8006f26:	683b      	ldr	r3, [r7, #0]
 8006f28:	685a      	ldr	r2, [r3, #4]
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	f000 fb67 	bl	8007600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f40:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	609a      	str	r2, [r3, #8]
      break;
 8006f4a:	e04f      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6818      	ldr	r0, [r3, #0]
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	6899      	ldr	r1, [r3, #8]
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	685a      	ldr	r2, [r3, #4]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f000 fb50 	bl	8007600 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	689a      	ldr	r2, [r3, #8]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f6e:	609a      	str	r2, [r3, #8]
      break;
 8006f70:	e03c      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6859      	ldr	r1, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f000 fac4 	bl	800750c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2150      	movs	r1, #80	; 0x50
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fb1d 	bl	80075ca <TIM_ITRx_SetConfig>
      break;
 8006f90:	e02c      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6818      	ldr	r0, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	6859      	ldr	r1, [r3, #4]
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	68db      	ldr	r3, [r3, #12]
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	f000 fae3 	bl	800756a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2160      	movs	r1, #96	; 0x60
 8006faa:	4618      	mov	r0, r3
 8006fac:	f000 fb0d 	bl	80075ca <TIM_ITRx_SetConfig>
      break;
 8006fb0:	e01c      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6859      	ldr	r1, [r3, #4]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	68db      	ldr	r3, [r3, #12]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f000 faa4 	bl	800750c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	2140      	movs	r1, #64	; 0x40
 8006fca:	4618      	mov	r0, r3
 8006fcc:	f000 fafd 	bl	80075ca <TIM_ITRx_SetConfig>
      break;
 8006fd0:	e00c      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681a      	ldr	r2, [r3, #0]
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4619      	mov	r1, r3
 8006fdc:	4610      	mov	r0, r2
 8006fde:	f000 faf4 	bl	80075ca <TIM_ITRx_SetConfig>
      break;
 8006fe2:	e003      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fe4:	2301      	movs	r3, #1
 8006fe6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fe8:	e000      	b.n	8006fec <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ffe:	4618      	mov	r0, r3
 8007000:	3710      	adds	r7, #16
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}

08007006 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007006:	b480      	push	{r7}
 8007008:	b083      	sub	sp, #12
 800700a:	af00      	add	r7, sp, #0
 800700c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800700e:	bf00      	nop
 8007010:	370c      	adds	r7, #12
 8007012:	46bd      	mov	sp, r7
 8007014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007018:	4770      	bx	lr

0800701a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800701a:	b480      	push	{r7}
 800701c:	b083      	sub	sp, #12
 800701e:	af00      	add	r7, sp, #0
 8007020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007022:	bf00      	nop
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr

0800702e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
	...

0800706c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	4a40      	ldr	r2, [pc, #256]	; (8007180 <TIM_Base_SetConfig+0x114>)
 8007080:	4293      	cmp	r3, r2
 8007082:	d013      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708a:	d00f      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	4a3d      	ldr	r2, [pc, #244]	; (8007184 <TIM_Base_SetConfig+0x118>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00b      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	4a3c      	ldr	r2, [pc, #240]	; (8007188 <TIM_Base_SetConfig+0x11c>)
 8007098:	4293      	cmp	r3, r2
 800709a:	d007      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	4a3b      	ldr	r2, [pc, #236]	; (800718c <TIM_Base_SetConfig+0x120>)
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d003      	beq.n	80070ac <TIM_Base_SetConfig+0x40>
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a3a      	ldr	r2, [pc, #232]	; (8007190 <TIM_Base_SetConfig+0x124>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d108      	bne.n	80070be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	68fa      	ldr	r2, [r7, #12]
 80070ba:	4313      	orrs	r3, r2
 80070bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a2f      	ldr	r2, [pc, #188]	; (8007180 <TIM_Base_SetConfig+0x114>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d02b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070cc:	d027      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a2c      	ldr	r2, [pc, #176]	; (8007184 <TIM_Base_SetConfig+0x118>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d023      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a2b      	ldr	r2, [pc, #172]	; (8007188 <TIM_Base_SetConfig+0x11c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d01f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a2a      	ldr	r2, [pc, #168]	; (800718c <TIM_Base_SetConfig+0x120>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d01b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	4a29      	ldr	r2, [pc, #164]	; (8007190 <TIM_Base_SetConfig+0x124>)
 80070ea:	4293      	cmp	r3, r2
 80070ec:	d017      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a28      	ldr	r2, [pc, #160]	; (8007194 <TIM_Base_SetConfig+0x128>)
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d013      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	4a27      	ldr	r2, [pc, #156]	; (8007198 <TIM_Base_SetConfig+0x12c>)
 80070fa:	4293      	cmp	r3, r2
 80070fc:	d00f      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	4a26      	ldr	r2, [pc, #152]	; (800719c <TIM_Base_SetConfig+0x130>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00b      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	4a25      	ldr	r2, [pc, #148]	; (80071a0 <TIM_Base_SetConfig+0x134>)
 800710a:	4293      	cmp	r3, r2
 800710c:	d007      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	4a24      	ldr	r2, [pc, #144]	; (80071a4 <TIM_Base_SetConfig+0x138>)
 8007112:	4293      	cmp	r3, r2
 8007114:	d003      	beq.n	800711e <TIM_Base_SetConfig+0xb2>
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	4a23      	ldr	r2, [pc, #140]	; (80071a8 <TIM_Base_SetConfig+0x13c>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d108      	bne.n	8007130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	68fa      	ldr	r2, [r7, #12]
 800712c:	4313      	orrs	r3, r2
 800712e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	695b      	ldr	r3, [r3, #20]
 800713a:	4313      	orrs	r3, r2
 800713c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	68fa      	ldr	r2, [r7, #12]
 8007142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	689a      	ldr	r2, [r3, #8]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a0a      	ldr	r2, [pc, #40]	; (8007180 <TIM_Base_SetConfig+0x114>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d003      	beq.n	8007164 <TIM_Base_SetConfig+0xf8>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	4a0c      	ldr	r2, [pc, #48]	; (8007190 <TIM_Base_SetConfig+0x124>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d103      	bne.n	800716c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	2201      	movs	r2, #1
 8007170:	615a      	str	r2, [r3, #20]
}
 8007172:	bf00      	nop
 8007174:	3714      	adds	r7, #20
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr
 800717e:	bf00      	nop
 8007180:	40010000 	.word	0x40010000
 8007184:	40000400 	.word	0x40000400
 8007188:	40000800 	.word	0x40000800
 800718c:	40000c00 	.word	0x40000c00
 8007190:	40010400 	.word	0x40010400
 8007194:	40014000 	.word	0x40014000
 8007198:	40014400 	.word	0x40014400
 800719c:	40014800 	.word	0x40014800
 80071a0:	40001800 	.word	0x40001800
 80071a4:	40001c00 	.word	0x40001c00
 80071a8:	40002000 	.word	0x40002000

080071ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ac:	b480      	push	{r7}
 80071ae:	b087      	sub	sp, #28
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	6078      	str	r0, [r7, #4]
 80071b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a1b      	ldr	r3, [r3, #32]
 80071c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	699b      	ldr	r3, [r3, #24]
 80071d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	f023 0303 	bic.w	r3, r3, #3
 80071e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	68fa      	ldr	r2, [r7, #12]
 80071ea:	4313      	orrs	r3, r2
 80071ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	f023 0302 	bic.w	r3, r3, #2
 80071f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	689b      	ldr	r3, [r3, #8]
 80071fa:	697a      	ldr	r2, [r7, #20]
 80071fc:	4313      	orrs	r3, r2
 80071fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	4a20      	ldr	r2, [pc, #128]	; (8007284 <TIM_OC1_SetConfig+0xd8>)
 8007204:	4293      	cmp	r3, r2
 8007206:	d003      	beq.n	8007210 <TIM_OC1_SetConfig+0x64>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	4a1f      	ldr	r2, [pc, #124]	; (8007288 <TIM_OC1_SetConfig+0xdc>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d10c      	bne.n	800722a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007210:	697b      	ldr	r3, [r7, #20]
 8007212:	f023 0308 	bic.w	r3, r3, #8
 8007216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	68db      	ldr	r3, [r3, #12]
 800721c:	697a      	ldr	r2, [r7, #20]
 800721e:	4313      	orrs	r3, r2
 8007220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	f023 0304 	bic.w	r3, r3, #4
 8007228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	4a15      	ldr	r2, [pc, #84]	; (8007284 <TIM_OC1_SetConfig+0xd8>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d003      	beq.n	800723a <TIM_OC1_SetConfig+0x8e>
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	4a14      	ldr	r2, [pc, #80]	; (8007288 <TIM_OC1_SetConfig+0xdc>)
 8007236:	4293      	cmp	r3, r2
 8007238:	d111      	bne.n	800725e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	693a      	ldr	r2, [r7, #16]
 8007250:	4313      	orrs	r3, r2
 8007252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	4313      	orrs	r3, r2
 800725c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	693a      	ldr	r2, [r7, #16]
 8007262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	68fa      	ldr	r2, [r7, #12]
 8007268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	697a      	ldr	r2, [r7, #20]
 8007276:	621a      	str	r2, [r3, #32]
}
 8007278:	bf00      	nop
 800727a:	371c      	adds	r7, #28
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr
 8007284:	40010000 	.word	0x40010000
 8007288:	40010400 	.word	0x40010400

0800728c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800728c:	b480      	push	{r7}
 800728e:	b087      	sub	sp, #28
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
 8007294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a1b      	ldr	r3, [r3, #32]
 800729a:	f023 0210 	bic.w	r2, r3, #16
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6a1b      	ldr	r3, [r3, #32]
 80072a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	699b      	ldr	r3, [r3, #24]
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072c4:	683b      	ldr	r3, [r7, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	021b      	lsls	r3, r3, #8
 80072ca:	68fa      	ldr	r2, [r7, #12]
 80072cc:	4313      	orrs	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072d0:	697b      	ldr	r3, [r7, #20]
 80072d2:	f023 0320 	bic.w	r3, r3, #32
 80072d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	689b      	ldr	r3, [r3, #8]
 80072dc:	011b      	lsls	r3, r3, #4
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a22      	ldr	r2, [pc, #136]	; (8007370 <TIM_OC2_SetConfig+0xe4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_OC2_SetConfig+0x68>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a21      	ldr	r2, [pc, #132]	; (8007374 <TIM_OC2_SetConfig+0xe8>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d10d      	bne.n	8007310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	68db      	ldr	r3, [r3, #12]
 8007300:	011b      	lsls	r3, r3, #4
 8007302:	697a      	ldr	r2, [r7, #20]
 8007304:	4313      	orrs	r3, r2
 8007306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800730e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a17      	ldr	r2, [pc, #92]	; (8007370 <TIM_OC2_SetConfig+0xe4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d003      	beq.n	8007320 <TIM_OC2_SetConfig+0x94>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	4a16      	ldr	r2, [pc, #88]	; (8007374 <TIM_OC2_SetConfig+0xe8>)
 800731c:	4293      	cmp	r3, r2
 800731e:	d113      	bne.n	8007348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007328:	693b      	ldr	r3, [r7, #16]
 800732a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800732e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	009b      	lsls	r3, r3, #2
 8007336:	693a      	ldr	r2, [r7, #16]
 8007338:	4313      	orrs	r3, r2
 800733a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	699b      	ldr	r3, [r3, #24]
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	693a      	ldr	r2, [r7, #16]
 8007344:	4313      	orrs	r3, r2
 8007346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	693a      	ldr	r2, [r7, #16]
 800734c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007354:	683b      	ldr	r3, [r7, #0]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	697a      	ldr	r2, [r7, #20]
 8007360:	621a      	str	r2, [r3, #32]
}
 8007362:	bf00      	nop
 8007364:	371c      	adds	r7, #28
 8007366:	46bd      	mov	sp, r7
 8007368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736c:	4770      	bx	lr
 800736e:	bf00      	nop
 8007370:	40010000 	.word	0x40010000
 8007374:	40010400 	.word	0x40010400

08007378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007378:	b480      	push	{r7}
 800737a:	b087      	sub	sp, #28
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6a1b      	ldr	r3, [r3, #32]
 8007386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6a1b      	ldr	r3, [r3, #32]
 8007392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	685b      	ldr	r3, [r3, #4]
 8007398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073b0:	683b      	ldr	r3, [r7, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4313      	orrs	r3, r2
 80073b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	021b      	lsls	r3, r3, #8
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	4313      	orrs	r3, r2
 80073cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a21      	ldr	r2, [pc, #132]	; (8007458 <TIM_OC3_SetConfig+0xe0>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d003      	beq.n	80073de <TIM_OC3_SetConfig+0x66>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a20      	ldr	r2, [pc, #128]	; (800745c <TIM_OC3_SetConfig+0xe4>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d10d      	bne.n	80073fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	68db      	ldr	r3, [r3, #12]
 80073ea:	021b      	lsls	r3, r3, #8
 80073ec:	697a      	ldr	r2, [r7, #20]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	4a16      	ldr	r2, [pc, #88]	; (8007458 <TIM_OC3_SetConfig+0xe0>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d003      	beq.n	800740a <TIM_OC3_SetConfig+0x92>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	4a15      	ldr	r2, [pc, #84]	; (800745c <TIM_OC3_SetConfig+0xe4>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d113      	bne.n	8007432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	011b      	lsls	r3, r3, #4
 8007420:	693a      	ldr	r2, [r7, #16]
 8007422:	4313      	orrs	r3, r2
 8007424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	699b      	ldr	r3, [r3, #24]
 800742a:	011b      	lsls	r3, r3, #4
 800742c:	693a      	ldr	r2, [r7, #16]
 800742e:	4313      	orrs	r3, r2
 8007430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	685a      	ldr	r2, [r3, #4]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	621a      	str	r2, [r3, #32]
}
 800744c:	bf00      	nop
 800744e:	371c      	adds	r7, #28
 8007450:	46bd      	mov	sp, r7
 8007452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007456:	4770      	bx	lr
 8007458:	40010000 	.word	0x40010000
 800745c:	40010400 	.word	0x40010400

08007460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007460:	b480      	push	{r7}
 8007462:	b087      	sub	sp, #28
 8007464:	af00      	add	r7, sp, #0
 8007466:	6078      	str	r0, [r7, #4]
 8007468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a1b      	ldr	r3, [r3, #32]
 800746e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6a1b      	ldr	r3, [r3, #32]
 800747a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	685b      	ldr	r3, [r3, #4]
 8007480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800748e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	021b      	lsls	r3, r3, #8
 800749e:	68fa      	ldr	r2, [r7, #12]
 80074a0:	4313      	orrs	r3, r2
 80074a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074a4:	693b      	ldr	r3, [r7, #16]
 80074a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	031b      	lsls	r3, r3, #12
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	4313      	orrs	r3, r2
 80074b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	4a12      	ldr	r2, [pc, #72]	; (8007504 <TIM_OC4_SetConfig+0xa4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d003      	beq.n	80074c8 <TIM_OC4_SetConfig+0x68>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	4a11      	ldr	r2, [pc, #68]	; (8007508 <TIM_OC4_SetConfig+0xa8>)
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d109      	bne.n	80074dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	695b      	ldr	r3, [r3, #20]
 80074d4:	019b      	lsls	r3, r3, #6
 80074d6:	697a      	ldr	r2, [r7, #20]
 80074d8:	4313      	orrs	r3, r2
 80074da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	68fa      	ldr	r2, [r7, #12]
 80074e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	693a      	ldr	r2, [r7, #16]
 80074f4:	621a      	str	r2, [r3, #32]
}
 80074f6:	bf00      	nop
 80074f8:	371c      	adds	r7, #28
 80074fa:	46bd      	mov	sp, r7
 80074fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007500:	4770      	bx	lr
 8007502:	bf00      	nop
 8007504:	40010000 	.word	0x40010000
 8007508:	40010400 	.word	0x40010400

0800750c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800750c:	b480      	push	{r7}
 800750e:	b087      	sub	sp, #28
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	60b9      	str	r1, [r7, #8]
 8007516:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	f023 0201 	bic.w	r2, r3, #1
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007530:	693b      	ldr	r3, [r7, #16]
 8007532:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007536:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	011b      	lsls	r3, r3, #4
 800753c:	693a      	ldr	r2, [r7, #16]
 800753e:	4313      	orrs	r3, r2
 8007540:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	f023 030a 	bic.w	r3, r3, #10
 8007548:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800754a:	697a      	ldr	r2, [r7, #20]
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	4313      	orrs	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	693a      	ldr	r2, [r7, #16]
 8007556:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	621a      	str	r2, [r3, #32]
}
 800755e:	bf00      	nop
 8007560:	371c      	adds	r7, #28
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr

0800756a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800756a:	b480      	push	{r7}
 800756c:	b087      	sub	sp, #28
 800756e:	af00      	add	r7, sp, #0
 8007570:	60f8      	str	r0, [r7, #12]
 8007572:	60b9      	str	r1, [r7, #8]
 8007574:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	6a1b      	ldr	r3, [r3, #32]
 800757a:	f023 0210 	bic.w	r2, r3, #16
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	699b      	ldr	r3, [r3, #24]
 8007586:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6a1b      	ldr	r3, [r3, #32]
 800758c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	031b      	lsls	r3, r3, #12
 800759a:	697a      	ldr	r2, [r7, #20]
 800759c:	4313      	orrs	r3, r2
 800759e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	011b      	lsls	r3, r3, #4
 80075ac:	693a      	ldr	r2, [r7, #16]
 80075ae:	4313      	orrs	r3, r2
 80075b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	697a      	ldr	r2, [r7, #20]
 80075b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	693a      	ldr	r2, [r7, #16]
 80075bc:	621a      	str	r2, [r3, #32]
}
 80075be:	bf00      	nop
 80075c0:	371c      	adds	r7, #28
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80075ca:	b480      	push	{r7}
 80075cc:	b085      	sub	sp, #20
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075e2:	683a      	ldr	r2, [r7, #0]
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	f043 0307 	orr.w	r3, r3, #7
 80075ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68fa      	ldr	r2, [r7, #12]
 80075f2:	609a      	str	r2, [r3, #8]
}
 80075f4:	bf00      	nop
 80075f6:	3714      	adds	r7, #20
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800761a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	021a      	lsls	r2, r3, #8
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	431a      	orrs	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	4313      	orrs	r3, r2
 8007628:	697a      	ldr	r2, [r7, #20]
 800762a:	4313      	orrs	r3, r2
 800762c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	697a      	ldr	r2, [r7, #20]
 8007632:	609a      	str	r2, [r3, #8]
}
 8007634:	bf00      	nop
 8007636:	371c      	adds	r7, #28
 8007638:	46bd      	mov	sp, r7
 800763a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763e:	4770      	bx	lr

08007640 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
 8007648:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007650:	2b01      	cmp	r3, #1
 8007652:	d101      	bne.n	8007658 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007654:	2302      	movs	r3, #2
 8007656:	e05a      	b.n	800770e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2201      	movs	r2, #1
 800765c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2202      	movs	r2, #2
 8007664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68fa      	ldr	r2, [r7, #12]
 8007686:	4313      	orrs	r3, r2
 8007688:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	68fa      	ldr	r2, [r7, #12]
 8007690:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	4a21      	ldr	r2, [pc, #132]	; (800771c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007698:	4293      	cmp	r3, r2
 800769a:	d022      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80076a4:	d01d      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a1d      	ldr	r2, [pc, #116]	; (8007720 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d018      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a1b      	ldr	r2, [pc, #108]	; (8007724 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80076b6:	4293      	cmp	r3, r2
 80076b8:	d013      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	4a1a      	ldr	r2, [pc, #104]	; (8007728 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80076c0:	4293      	cmp	r3, r2
 80076c2:	d00e      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	4a18      	ldr	r2, [pc, #96]	; (800772c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d009      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	4a17      	ldr	r2, [pc, #92]	; (8007730 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	4a15      	ldr	r2, [pc, #84]	; (8007734 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80076de:	4293      	cmp	r3, r2
 80076e0:	d10c      	bne.n	80076fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076ea:	683b      	ldr	r3, [r7, #0]
 80076ec:	685b      	ldr	r3, [r3, #4]
 80076ee:	68ba      	ldr	r2, [r7, #8]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	68ba      	ldr	r2, [r7, #8]
 80076fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2201      	movs	r2, #1
 8007700:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800770c:	2300      	movs	r3, #0
}
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop
 800771c:	40010000 	.word	0x40010000
 8007720:	40000400 	.word	0x40000400
 8007724:	40000800 	.word	0x40000800
 8007728:	40000c00 	.word	0x40000c00
 800772c:	40010400 	.word	0x40010400
 8007730:	40014000 	.word	0x40014000
 8007734:	40001800 	.word	0x40001800

08007738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007740:	bf00      	nop
 8007742:	370c      	adds	r7, #12
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e03f      	b.n	80077f2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fa fa8e 	bl	8001ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2224      	movs	r2, #36	; 0x24
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68da      	ldr	r2, [r3, #12]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fd7b 	bl	80082a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	695a      	ldr	r2, [r3, #20]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2200      	movs	r2, #0
 80077de:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2220      	movs	r2, #32
 80077e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077f0:	2300      	movs	r3, #0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b08a      	sub	sp, #40	; 0x28
 80077fe:	af02      	add	r7, sp, #8
 8007800:	60f8      	str	r0, [r7, #12]
 8007802:	60b9      	str	r1, [r7, #8]
 8007804:	603b      	str	r3, [r7, #0]
 8007806:	4613      	mov	r3, r2
 8007808:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800780a:	2300      	movs	r3, #0
 800780c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007814:	b2db      	uxtb	r3, r3
 8007816:	2b20      	cmp	r3, #32
 8007818:	d17c      	bne.n	8007914 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800781a:	68bb      	ldr	r3, [r7, #8]
 800781c:	2b00      	cmp	r3, #0
 800781e:	d002      	beq.n	8007826 <HAL_UART_Transmit+0x2c>
 8007820:	88fb      	ldrh	r3, [r7, #6]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d101      	bne.n	800782a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	e075      	b.n	8007916 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007830:	2b01      	cmp	r3, #1
 8007832:	d101      	bne.n	8007838 <HAL_UART_Transmit+0x3e>
 8007834:	2302      	movs	r3, #2
 8007836:	e06e      	b.n	8007916 <HAL_UART_Transmit+0x11c>
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2201      	movs	r2, #1
 800783c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2200      	movs	r2, #0
 8007844:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	2221      	movs	r2, #33	; 0x21
 800784a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800784e:	f7fa fb0b 	bl	8001e68 <HAL_GetTick>
 8007852:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	88fa      	ldrh	r2, [r7, #6]
 8007858:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	88fa      	ldrh	r2, [r7, #6]
 800785e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007868:	d108      	bne.n	800787c <HAL_UART_Transmit+0x82>
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	691b      	ldr	r3, [r3, #16]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d104      	bne.n	800787c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007872:	2300      	movs	r3, #0
 8007874:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	61bb      	str	r3, [r7, #24]
 800787a:	e003      	b.n	8007884 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007880:	2300      	movs	r3, #0
 8007882:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800788c:	e02a      	b.n	80078e4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	9300      	str	r3, [sp, #0]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	2200      	movs	r2, #0
 8007896:	2180      	movs	r1, #128	; 0x80
 8007898:	68f8      	ldr	r0, [r7, #12]
 800789a:	f000 faf9 	bl	8007e90 <UART_WaitOnFlagUntilTimeout>
 800789e:	4603      	mov	r3, r0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d001      	beq.n	80078a8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80078a4:	2303      	movs	r3, #3
 80078a6:	e036      	b.n	8007916 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80078a8:	69fb      	ldr	r3, [r7, #28]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d10b      	bne.n	80078c6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80078ae:	69bb      	ldr	r3, [r7, #24]
 80078b0:	881b      	ldrh	r3, [r3, #0]
 80078b2:	461a      	mov	r2, r3
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078bc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80078be:	69bb      	ldr	r3, [r7, #24]
 80078c0:	3302      	adds	r3, #2
 80078c2:	61bb      	str	r3, [r7, #24]
 80078c4:	e007      	b.n	80078d6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	781a      	ldrb	r2, [r3, #0]
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80078d0:	69fb      	ldr	r3, [r7, #28]
 80078d2:	3301      	adds	r3, #1
 80078d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078da:	b29b      	uxth	r3, r3
 80078dc:	3b01      	subs	r3, #1
 80078de:	b29a      	uxth	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078e8:	b29b      	uxth	r3, r3
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d1cf      	bne.n	800788e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	9300      	str	r3, [sp, #0]
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	2200      	movs	r2, #0
 80078f6:	2140      	movs	r1, #64	; 0x40
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f000 fac9 	bl	8007e90 <UART_WaitOnFlagUntilTimeout>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b00      	cmp	r3, #0
 8007902:	d001      	beq.n	8007908 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007904:	2303      	movs	r3, #3
 8007906:	e006      	b.n	8007916 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2220      	movs	r2, #32
 800790c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007910:	2300      	movs	r3, #0
 8007912:	e000      	b.n	8007916 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007914:	2302      	movs	r3, #2
  }
}
 8007916:	4618      	mov	r0, r3
 8007918:	3720      	adds	r7, #32
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
	...

08007920 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b0ba      	sub	sp, #232	; 0xe8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007946:	2300      	movs	r3, #0
 8007948:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800794c:	2300      	movs	r3, #0
 800794e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007952:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007956:	f003 030f 	and.w	r3, r3, #15
 800795a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800795e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10f      	bne.n	8007986 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007966:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800796a:	f003 0320 	and.w	r3, r3, #32
 800796e:	2b00      	cmp	r3, #0
 8007970:	d009      	beq.n	8007986 <HAL_UART_IRQHandler+0x66>
 8007972:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007976:	f003 0320 	and.w	r3, r3, #32
 800797a:	2b00      	cmp	r3, #0
 800797c:	d003      	beq.n	8007986 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fbd3 	bl	800812a <UART_Receive_IT>
      return;
 8007984:	e256      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007986:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800798a:	2b00      	cmp	r3, #0
 800798c:	f000 80de 	beq.w	8007b4c <HAL_UART_IRQHandler+0x22c>
 8007990:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d106      	bne.n	80079aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800799c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 80d1 	beq.w	8007b4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80079aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079ae:	f003 0301 	and.w	r3, r3, #1
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d00b      	beq.n	80079ce <HAL_UART_IRQHandler+0xae>
 80079b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80079ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d005      	beq.n	80079ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	f043 0201 	orr.w	r2, r3, #1
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079d2:	f003 0304 	and.w	r3, r3, #4
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d00b      	beq.n	80079f2 <HAL_UART_IRQHandler+0xd2>
 80079da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079de:	f003 0301 	and.w	r3, r3, #1
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d005      	beq.n	80079f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ea:	f043 0202 	orr.w	r2, r3, #2
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0302 	and.w	r3, r3, #2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d00b      	beq.n	8007a16 <HAL_UART_IRQHandler+0xf6>
 80079fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d005      	beq.n	8007a16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a1a:	f003 0308 	and.w	r3, r3, #8
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d011      	beq.n	8007a46 <HAL_UART_IRQHandler+0x126>
 8007a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a26:	f003 0320 	and.w	r3, r3, #32
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d105      	bne.n	8007a3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007a2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a32:	f003 0301 	and.w	r3, r3, #1
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d005      	beq.n	8007a46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f043 0208 	orr.w	r2, r3, #8
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 81ed 	beq.w	8007e2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a54:	f003 0320 	and.w	r3, r3, #32
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d008      	beq.n	8007a6e <HAL_UART_IRQHandler+0x14e>
 8007a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a60:	f003 0320 	and.w	r3, r3, #32
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d002      	beq.n	8007a6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007a68:	6878      	ldr	r0, [r7, #4]
 8007a6a:	f000 fb5e 	bl	800812a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	695b      	ldr	r3, [r3, #20]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b40      	cmp	r3, #64	; 0x40
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2301      	moveq	r3, #1
 8007a7e:	2300      	movne	r3, #0
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a8a:	f003 0308 	and.w	r3, r3, #8
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d103      	bne.n	8007a9a <HAL_UART_IRQHandler+0x17a>
 8007a92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d04f      	beq.n	8007b3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f000 fa66 	bl	8007f6c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	695b      	ldr	r3, [r3, #20]
 8007aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aaa:	2b40      	cmp	r3, #64	; 0x40
 8007aac:	d141      	bne.n	8007b32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007abc:	e853 3f00 	ldrex	r3, [r3]
 8007ac0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007ac4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007ac8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007acc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3314      	adds	r3, #20
 8007ad6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007ada:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007ade:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007ae6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d1d9      	bne.n	8007aae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d013      	beq.n	8007b2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b06:	4a7d      	ldr	r2, [pc, #500]	; (8007cfc <HAL_UART_IRQHandler+0x3dc>)
 8007b08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0e:	4618      	mov	r0, r3
 8007b10:	f7fa ff44 	bl	800299c <HAL_DMA_Abort_IT>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d016      	beq.n	8007b48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b24:	4610      	mov	r0, r2
 8007b26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b28:	e00e      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b2a:	6878      	ldr	r0, [r7, #4]
 8007b2c:	f000 f99a 	bl	8007e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b30:	e00a      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 f996 	bl	8007e64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b38:	e006      	b.n	8007b48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	f000 f992 	bl	8007e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2200      	movs	r2, #0
 8007b44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007b46:	e170      	b.n	8007e2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b48:	bf00      	nop
    return;
 8007b4a:	e16e      	b.n	8007e2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	f040 814a 	bne.w	8007dea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007b56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b5a:	f003 0310 	and.w	r3, r3, #16
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	f000 8143 	beq.w	8007dea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007b64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b68:	f003 0310 	and.w	r3, r3, #16
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	f000 813c 	beq.w	8007dea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007b72:	2300      	movs	r3, #0
 8007b74:	60bb      	str	r3, [r7, #8]
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	60bb      	str	r3, [r7, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	60bb      	str	r3, [r7, #8]
 8007b86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	695b      	ldr	r3, [r3, #20]
 8007b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b92:	2b40      	cmp	r3, #64	; 0x40
 8007b94:	f040 80b4 	bne.w	8007d00 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007ba4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	f000 8140 	beq.w	8007e2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	f080 8139 	bcs.w	8007e2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007bc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bc8:	69db      	ldr	r3, [r3, #28]
 8007bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007bce:	f000 8088 	beq.w	8007ce2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	330c      	adds	r3, #12
 8007bd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007be8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007bec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007bf0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	330c      	adds	r3, #12
 8007bfa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007bfe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007c02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c06:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007c0a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007c0e:	e841 2300 	strex	r3, r2, [r1]
 8007c12:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007c16:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d1d9      	bne.n	8007bd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	3314      	adds	r3, #20
 8007c24:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007c28:	e853 3f00 	ldrex	r3, [r3]
 8007c2c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007c2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3314      	adds	r3, #20
 8007c3e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007c42:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007c46:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c48:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007c4a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007c54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e1      	bne.n	8007c1e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	3314      	adds	r3, #20
 8007c60:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007c64:	e853 3f00 	ldrex	r3, [r3]
 8007c68:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007c6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007c6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	3314      	adds	r3, #20
 8007c7a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007c7e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007c80:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c82:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007c84:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007c8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1e3      	bne.n	8007c5a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2220      	movs	r2, #32
 8007c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	330c      	adds	r3, #12
 8007ca6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	e853 3f00 	ldrex	r3, [r3]
 8007cae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007cb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb2:	f023 0310 	bic.w	r3, r3, #16
 8007cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	330c      	adds	r3, #12
 8007cc0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007cc4:	65ba      	str	r2, [r7, #88]	; 0x58
 8007cc6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cc8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007cca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007ccc:	e841 2300 	strex	r3, r2, [r1]
 8007cd0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007cd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1e3      	bne.n	8007ca0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cdc:	4618      	mov	r0, r3
 8007cde:	f7fa fded 	bl	80028bc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cea:	b29b      	uxth	r3, r3
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	b29b      	uxth	r3, r3
 8007cf0:	4619      	mov	r1, r3
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 f8c0 	bl	8007e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007cf8:	e099      	b.n	8007e2e <HAL_UART_IRQHandler+0x50e>
 8007cfa:	bf00      	nop
 8007cfc:	08008033 	.word	0x08008033
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d08:	b29b      	uxth	r3, r3
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007d14:	b29b      	uxth	r3, r3
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f000 808b 	beq.w	8007e32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007d1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	f000 8086 	beq.w	8007e32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	330c      	adds	r3, #12
 8007d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d30:	e853 3f00 	ldrex	r3, [r3]
 8007d34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d3c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	330c      	adds	r3, #12
 8007d46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007d4a:	647a      	str	r2, [r7, #68]	; 0x44
 8007d4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d4e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007d50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007d52:	e841 2300 	strex	r3, r2, [r1]
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007d58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1e3      	bne.n	8007d26 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	3314      	adds	r3, #20
 8007d64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d68:	e853 3f00 	ldrex	r3, [r3]
 8007d6c:	623b      	str	r3, [r7, #32]
   return(result);
 8007d6e:	6a3b      	ldr	r3, [r7, #32]
 8007d70:	f023 0301 	bic.w	r3, r3, #1
 8007d74:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	3314      	adds	r3, #20
 8007d7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007d82:	633a      	str	r2, [r7, #48]	; 0x30
 8007d84:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007d88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007d8a:	e841 2300 	strex	r3, r2, [r1]
 8007d8e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d1e3      	bne.n	8007d5e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	330c      	adds	r3, #12
 8007dc4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007dc8:	61fa      	str	r2, [r7, #28]
 8007dca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dcc:	69b9      	ldr	r1, [r7, #24]
 8007dce:	69fa      	ldr	r2, [r7, #28]
 8007dd0:	e841 2300 	strex	r3, r2, [r1]
 8007dd4:	617b      	str	r3, [r7, #20]
   return(result);
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1e3      	bne.n	8007da4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ddc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007de0:	4619      	mov	r1, r3
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	f000 f848 	bl	8007e78 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007de8:	e023      	b.n	8007e32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007dea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d009      	beq.n	8007e0a <HAL_UART_IRQHandler+0x4ea>
 8007df6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d003      	beq.n	8007e0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007e02:	6878      	ldr	r0, [r7, #4]
 8007e04:	f000 f929 	bl	800805a <UART_Transmit_IT>
    return;
 8007e08:	e014      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007e0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d00e      	beq.n	8007e34 <HAL_UART_IRQHandler+0x514>
 8007e16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d008      	beq.n	8007e34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007e22:	6878      	ldr	r0, [r7, #4]
 8007e24:	f000 f969 	bl	80080fa <UART_EndTransmit_IT>
    return;
 8007e28:	e004      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
    return;
 8007e2a:	bf00      	nop
 8007e2c:	e002      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
      return;
 8007e2e:	bf00      	nop
 8007e30:	e000      	b.n	8007e34 <HAL_UART_IRQHandler+0x514>
      return;
 8007e32:	bf00      	nop
  }
}
 8007e34:	37e8      	adds	r7, #232	; 0xe8
 8007e36:	46bd      	mov	sp, r7
 8007e38:	bd80      	pop	{r7, pc}
 8007e3a:	bf00      	nop

08007e3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e58:	bf00      	nop
 8007e5a:	370c      	adds	r7, #12
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e62:	4770      	bx	lr

08007e64 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007e64:	b480      	push	{r7}
 8007e66:	b083      	sub	sp, #12
 8007e68:	af00      	add	r7, sp, #0
 8007e6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007e6c:	bf00      	nop
 8007e6e:	370c      	adds	r7, #12
 8007e70:	46bd      	mov	sp, r7
 8007e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e76:	4770      	bx	lr

08007e78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e78:	b480      	push	{r7}
 8007e7a:	b083      	sub	sp, #12
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
 8007e80:	460b      	mov	r3, r1
 8007e82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e84:	bf00      	nop
 8007e86:	370c      	adds	r7, #12
 8007e88:	46bd      	mov	sp, r7
 8007e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8e:	4770      	bx	lr

08007e90 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b090      	sub	sp, #64	; 0x40
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ea0:	e050      	b.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ea2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ea4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ea8:	d04c      	beq.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d007      	beq.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x30>
 8007eb0:	f7f9 ffda 	bl	8001e68 <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d241      	bcs.n	8007f44 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	330c      	adds	r3, #12
 8007ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	330c      	adds	r3, #12
 8007ede:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007ee0:	637a      	str	r2, [r7, #52]	; 0x34
 8007ee2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e5      	bne.n	8007ec0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	3314      	adds	r3, #20
 8007efa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	e853 3f00 	ldrex	r3, [r3]
 8007f02:	613b      	str	r3, [r7, #16]
   return(result);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	f023 0301 	bic.w	r3, r3, #1
 8007f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	3314      	adds	r3, #20
 8007f12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007f14:	623a      	str	r2, [r7, #32]
 8007f16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f18:	69f9      	ldr	r1, [r7, #28]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	e841 2300 	strex	r3, r2, [r1]
 8007f20:	61bb      	str	r3, [r7, #24]
   return(result);
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1e5      	bne.n	8007ef4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2220      	movs	r2, #32
 8007f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2220      	movs	r2, #32
 8007f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e00f      	b.n	8007f64 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	681a      	ldr	r2, [r3, #0]
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	68ba      	ldr	r2, [r7, #8]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	bf0c      	ite	eq
 8007f54:	2301      	moveq	r3, #1
 8007f56:	2300      	movne	r3, #0
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	79fb      	ldrb	r3, [r7, #7]
 8007f5e:	429a      	cmp	r2, r3
 8007f60:	d09f      	beq.n	8007ea2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007f62:	2300      	movs	r3, #0
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3740      	adds	r7, #64	; 0x40
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}

08007f6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b095      	sub	sp, #84	; 0x54
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	330c      	adds	r3, #12
 8007f7a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f7e:	e853 3f00 	ldrex	r3, [r3]
 8007f82:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f86:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	330c      	adds	r3, #12
 8007f92:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007f94:	643a      	str	r2, [r7, #64]	; 0x40
 8007f96:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f98:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007f9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007f9c:	e841 2300 	strex	r3, r2, [r1]
 8007fa0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d1e5      	bne.n	8007f74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3314      	adds	r3, #20
 8007fae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fb0:	6a3b      	ldr	r3, [r7, #32]
 8007fb2:	e853 3f00 	ldrex	r3, [r3]
 8007fb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8007fb8:	69fb      	ldr	r3, [r7, #28]
 8007fba:	f023 0301 	bic.w	r3, r3, #1
 8007fbe:	64bb      	str	r3, [r7, #72]	; 0x48
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	3314      	adds	r3, #20
 8007fc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007fc8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007fca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007fce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e5      	bne.n	8007fa8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d119      	bne.n	8008018 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	330c      	adds	r3, #12
 8007fea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	e853 3f00 	ldrex	r3, [r3]
 8007ff2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	f023 0310 	bic.w	r3, r3, #16
 8007ffa:	647b      	str	r3, [r7, #68]	; 0x44
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	330c      	adds	r3, #12
 8008002:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008004:	61ba      	str	r2, [r7, #24]
 8008006:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008008:	6979      	ldr	r1, [r7, #20]
 800800a:	69ba      	ldr	r2, [r7, #24]
 800800c:	e841 2300 	strex	r3, r2, [r1]
 8008010:	613b      	str	r3, [r7, #16]
   return(result);
 8008012:	693b      	ldr	r3, [r7, #16]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d1e5      	bne.n	8007fe4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2220      	movs	r2, #32
 800801c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2200      	movs	r2, #0
 8008024:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008026:	bf00      	nop
 8008028:	3754      	adds	r7, #84	; 0x54
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr

08008032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008032:	b580      	push	{r7, lr}
 8008034:	b084      	sub	sp, #16
 8008036:	af00      	add	r7, sp, #0
 8008038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	2200      	movs	r2, #0
 8008044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	2200      	movs	r2, #0
 800804a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804c:	68f8      	ldr	r0, [r7, #12]
 800804e:	f7ff ff09 	bl	8007e64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008052:	bf00      	nop
 8008054:	3710      	adds	r7, #16
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008068:	b2db      	uxtb	r3, r3
 800806a:	2b21      	cmp	r3, #33	; 0x21
 800806c:	d13e      	bne.n	80080ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	689b      	ldr	r3, [r3, #8]
 8008072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008076:	d114      	bne.n	80080a2 <UART_Transmit_IT+0x48>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d110      	bne.n	80080a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6a1b      	ldr	r3, [r3, #32]
 8008084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	881b      	ldrh	r3, [r3, #0]
 800808a:	461a      	mov	r2, r3
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	1c9a      	adds	r2, r3, #2
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	621a      	str	r2, [r3, #32]
 80080a0:	e008      	b.n	80080b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	1c59      	adds	r1, r3, #1
 80080a8:	687a      	ldr	r2, [r7, #4]
 80080aa:	6211      	str	r1, [r2, #32]
 80080ac:	781a      	ldrb	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	3b01      	subs	r3, #1
 80080bc:	b29b      	uxth	r3, r3
 80080be:	687a      	ldr	r2, [r7, #4]
 80080c0:	4619      	mov	r1, r3
 80080c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d10f      	bne.n	80080e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80080e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80080e8:	2300      	movs	r3, #0
 80080ea:	e000      	b.n	80080ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80080ec:	2302      	movs	r3, #2
  }
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3714      	adds	r7, #20
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80080fa:	b580      	push	{r7, lr}
 80080fc:	b082      	sub	sp, #8
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	68da      	ldr	r2, [r3, #12]
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008110:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2220      	movs	r2, #32
 8008116:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f7ff fe8e 	bl	8007e3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008120:	2300      	movs	r3, #0
}
 8008122:	4618      	mov	r0, r3
 8008124:	3708      	adds	r7, #8
 8008126:	46bd      	mov	sp, r7
 8008128:	bd80      	pop	{r7, pc}

0800812a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800812a:	b580      	push	{r7, lr}
 800812c:	b08c      	sub	sp, #48	; 0x30
 800812e:	af00      	add	r7, sp, #0
 8008130:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b22      	cmp	r3, #34	; 0x22
 800813c:	f040 80ab 	bne.w	8008296 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008148:	d117      	bne.n	800817a <UART_Receive_IT+0x50>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	691b      	ldr	r3, [r3, #16]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d113      	bne.n	800817a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008152:	2300      	movs	r3, #0
 8008154:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800815a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	b29b      	uxth	r3, r3
 8008164:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008168:	b29a      	uxth	r2, r3
 800816a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800816c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008172:	1c9a      	adds	r2, r3, #2
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	629a      	str	r2, [r3, #40]	; 0x28
 8008178:	e026      	b.n	80081c8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800817e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008180:	2300      	movs	r3, #0
 8008182:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818c:	d007      	beq.n	800819e <UART_Receive_IT+0x74>
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	689b      	ldr	r3, [r3, #8]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d10a      	bne.n	80081ac <UART_Receive_IT+0x82>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d106      	bne.n	80081ac <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	b2da      	uxtb	r2, r3
 80081a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a8:	701a      	strb	r2, [r3, #0]
 80081aa:	e008      	b.n	80081be <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	685b      	ldr	r3, [r3, #4]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081bc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	687a      	ldr	r2, [r7, #4]
 80081d4:	4619      	mov	r1, r3
 80081d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d15a      	bne.n	8008292 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	68da      	ldr	r2, [r3, #12]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	f022 0220 	bic.w	r2, r2, #32
 80081ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	68da      	ldr	r2, [r3, #12]
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	695a      	ldr	r2, [r3, #20]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f022 0201 	bic.w	r2, r2, #1
 800820a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	2220      	movs	r2, #32
 8008210:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008218:	2b01      	cmp	r3, #1
 800821a:	d135      	bne.n	8008288 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	330c      	adds	r3, #12
 8008228:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800822a:	697b      	ldr	r3, [r7, #20]
 800822c:	e853 3f00 	ldrex	r3, [r3]
 8008230:	613b      	str	r3, [r7, #16]
   return(result);
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f023 0310 	bic.w	r3, r3, #16
 8008238:	627b      	str	r3, [r7, #36]	; 0x24
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	330c      	adds	r3, #12
 8008240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008242:	623a      	str	r2, [r7, #32]
 8008244:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008246:	69f9      	ldr	r1, [r7, #28]
 8008248:	6a3a      	ldr	r2, [r7, #32]
 800824a:	e841 2300 	strex	r3, r2, [r1]
 800824e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008250:	69bb      	ldr	r3, [r7, #24]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d1e5      	bne.n	8008222 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 0310 	and.w	r3, r3, #16
 8008260:	2b10      	cmp	r3, #16
 8008262:	d10a      	bne.n	800827a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008264:	2300      	movs	r3, #0
 8008266:	60fb      	str	r3, [r7, #12]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	60fb      	str	r3, [r7, #12]
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	60fb      	str	r3, [r7, #12]
 8008278:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800827e:	4619      	mov	r1, r3
 8008280:	6878      	ldr	r0, [r7, #4]
 8008282:	f7ff fdf9 	bl	8007e78 <HAL_UARTEx_RxEventCallback>
 8008286:	e002      	b.n	800828e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008288:	6878      	ldr	r0, [r7, #4]
 800828a:	f7ff fde1 	bl	8007e50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800828e:	2300      	movs	r3, #0
 8008290:	e002      	b.n	8008298 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	e000      	b.n	8008298 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008296:	2302      	movs	r3, #2
  }
}
 8008298:	4618      	mov	r0, r3
 800829a:	3730      	adds	r7, #48	; 0x30
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80082a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082a4:	b09f      	sub	sp, #124	; 0x7c
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80082aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	691b      	ldr	r3, [r3, #16]
 80082b0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80082b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082b6:	68d9      	ldr	r1, [r3, #12]
 80082b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ba:	681a      	ldr	r2, [r3, #0]
 80082bc:	ea40 0301 	orr.w	r3, r0, r1
 80082c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80082c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c4:	689a      	ldr	r2, [r3, #8]
 80082c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082c8:	691b      	ldr	r3, [r3, #16]
 80082ca:	431a      	orrs	r2, r3
 80082cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ce:	695b      	ldr	r3, [r3, #20]
 80082d0:	431a      	orrs	r2, r3
 80082d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082d4:	69db      	ldr	r3, [r3, #28]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80082da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80082e4:	f021 010c 	bic.w	r1, r1, #12
 80082e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082ee:	430b      	orrs	r3, r1
 80082f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80082f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	695b      	ldr	r3, [r3, #20]
 80082f8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80082fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082fe:	6999      	ldr	r1, [r3, #24]
 8008300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008302:	681a      	ldr	r2, [r3, #0]
 8008304:	ea40 0301 	orr.w	r3, r0, r1
 8008308:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800830a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830c:	681a      	ldr	r2, [r3, #0]
 800830e:	4bc5      	ldr	r3, [pc, #788]	; (8008624 <UART_SetConfig+0x384>)
 8008310:	429a      	cmp	r2, r3
 8008312:	d004      	beq.n	800831e <UART_SetConfig+0x7e>
 8008314:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008316:	681a      	ldr	r2, [r3, #0]
 8008318:	4bc3      	ldr	r3, [pc, #780]	; (8008628 <UART_SetConfig+0x388>)
 800831a:	429a      	cmp	r2, r3
 800831c:	d103      	bne.n	8008326 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800831e:	f7fc ff6d 	bl	80051fc <HAL_RCC_GetPCLK2Freq>
 8008322:	6778      	str	r0, [r7, #116]	; 0x74
 8008324:	e002      	b.n	800832c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008326:	f7fc ff55 	bl	80051d4 <HAL_RCC_GetPCLK1Freq>
 800832a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	69db      	ldr	r3, [r3, #28]
 8008330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008334:	f040 80b6 	bne.w	80084a4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800833a:	461c      	mov	r4, r3
 800833c:	f04f 0500 	mov.w	r5, #0
 8008340:	4622      	mov	r2, r4
 8008342:	462b      	mov	r3, r5
 8008344:	1891      	adds	r1, r2, r2
 8008346:	6439      	str	r1, [r7, #64]	; 0x40
 8008348:	415b      	adcs	r3, r3
 800834a:	647b      	str	r3, [r7, #68]	; 0x44
 800834c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008350:	1912      	adds	r2, r2, r4
 8008352:	eb45 0303 	adc.w	r3, r5, r3
 8008356:	f04f 0000 	mov.w	r0, #0
 800835a:	f04f 0100 	mov.w	r1, #0
 800835e:	00d9      	lsls	r1, r3, #3
 8008360:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008364:	00d0      	lsls	r0, r2, #3
 8008366:	4602      	mov	r2, r0
 8008368:	460b      	mov	r3, r1
 800836a:	1911      	adds	r1, r2, r4
 800836c:	6639      	str	r1, [r7, #96]	; 0x60
 800836e:	416b      	adcs	r3, r5
 8008370:	667b      	str	r3, [r7, #100]	; 0x64
 8008372:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008374:	685b      	ldr	r3, [r3, #4]
 8008376:	461a      	mov	r2, r3
 8008378:	f04f 0300 	mov.w	r3, #0
 800837c:	1891      	adds	r1, r2, r2
 800837e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008380:	415b      	adcs	r3, r3
 8008382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008384:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008388:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800838c:	f7f7 ff80 	bl	8000290 <__aeabi_uldivmod>
 8008390:	4602      	mov	r2, r0
 8008392:	460b      	mov	r3, r1
 8008394:	4ba5      	ldr	r3, [pc, #660]	; (800862c <UART_SetConfig+0x38c>)
 8008396:	fba3 2302 	umull	r2, r3, r3, r2
 800839a:	095b      	lsrs	r3, r3, #5
 800839c:	011e      	lsls	r6, r3, #4
 800839e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083a0:	461c      	mov	r4, r3
 80083a2:	f04f 0500 	mov.w	r5, #0
 80083a6:	4622      	mov	r2, r4
 80083a8:	462b      	mov	r3, r5
 80083aa:	1891      	adds	r1, r2, r2
 80083ac:	6339      	str	r1, [r7, #48]	; 0x30
 80083ae:	415b      	adcs	r3, r3
 80083b0:	637b      	str	r3, [r7, #52]	; 0x34
 80083b2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80083b6:	1912      	adds	r2, r2, r4
 80083b8:	eb45 0303 	adc.w	r3, r5, r3
 80083bc:	f04f 0000 	mov.w	r0, #0
 80083c0:	f04f 0100 	mov.w	r1, #0
 80083c4:	00d9      	lsls	r1, r3, #3
 80083c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083ca:	00d0      	lsls	r0, r2, #3
 80083cc:	4602      	mov	r2, r0
 80083ce:	460b      	mov	r3, r1
 80083d0:	1911      	adds	r1, r2, r4
 80083d2:	65b9      	str	r1, [r7, #88]	; 0x58
 80083d4:	416b      	adcs	r3, r5
 80083d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	461a      	mov	r2, r3
 80083de:	f04f 0300 	mov.w	r3, #0
 80083e2:	1891      	adds	r1, r2, r2
 80083e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80083e6:	415b      	adcs	r3, r3
 80083e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80083ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80083ee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80083f2:	f7f7 ff4d 	bl	8000290 <__aeabi_uldivmod>
 80083f6:	4602      	mov	r2, r0
 80083f8:	460b      	mov	r3, r1
 80083fa:	4b8c      	ldr	r3, [pc, #560]	; (800862c <UART_SetConfig+0x38c>)
 80083fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008400:	095b      	lsrs	r3, r3, #5
 8008402:	2164      	movs	r1, #100	; 0x64
 8008404:	fb01 f303 	mul.w	r3, r1, r3
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	3332      	adds	r3, #50	; 0x32
 800840e:	4a87      	ldr	r2, [pc, #540]	; (800862c <UART_SetConfig+0x38c>)
 8008410:	fba2 2303 	umull	r2, r3, r2, r3
 8008414:	095b      	lsrs	r3, r3, #5
 8008416:	005b      	lsls	r3, r3, #1
 8008418:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800841c:	441e      	add	r6, r3
 800841e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008420:	4618      	mov	r0, r3
 8008422:	f04f 0100 	mov.w	r1, #0
 8008426:	4602      	mov	r2, r0
 8008428:	460b      	mov	r3, r1
 800842a:	1894      	adds	r4, r2, r2
 800842c:	623c      	str	r4, [r7, #32]
 800842e:	415b      	adcs	r3, r3
 8008430:	627b      	str	r3, [r7, #36]	; 0x24
 8008432:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008436:	1812      	adds	r2, r2, r0
 8008438:	eb41 0303 	adc.w	r3, r1, r3
 800843c:	f04f 0400 	mov.w	r4, #0
 8008440:	f04f 0500 	mov.w	r5, #0
 8008444:	00dd      	lsls	r5, r3, #3
 8008446:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800844a:	00d4      	lsls	r4, r2, #3
 800844c:	4622      	mov	r2, r4
 800844e:	462b      	mov	r3, r5
 8008450:	1814      	adds	r4, r2, r0
 8008452:	653c      	str	r4, [r7, #80]	; 0x50
 8008454:	414b      	adcs	r3, r1
 8008456:	657b      	str	r3, [r7, #84]	; 0x54
 8008458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	461a      	mov	r2, r3
 800845e:	f04f 0300 	mov.w	r3, #0
 8008462:	1891      	adds	r1, r2, r2
 8008464:	61b9      	str	r1, [r7, #24]
 8008466:	415b      	adcs	r3, r3
 8008468:	61fb      	str	r3, [r7, #28]
 800846a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800846e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008472:	f7f7 ff0d 	bl	8000290 <__aeabi_uldivmod>
 8008476:	4602      	mov	r2, r0
 8008478:	460b      	mov	r3, r1
 800847a:	4b6c      	ldr	r3, [pc, #432]	; (800862c <UART_SetConfig+0x38c>)
 800847c:	fba3 1302 	umull	r1, r3, r3, r2
 8008480:	095b      	lsrs	r3, r3, #5
 8008482:	2164      	movs	r1, #100	; 0x64
 8008484:	fb01 f303 	mul.w	r3, r1, r3
 8008488:	1ad3      	subs	r3, r2, r3
 800848a:	00db      	lsls	r3, r3, #3
 800848c:	3332      	adds	r3, #50	; 0x32
 800848e:	4a67      	ldr	r2, [pc, #412]	; (800862c <UART_SetConfig+0x38c>)
 8008490:	fba2 2303 	umull	r2, r3, r2, r3
 8008494:	095b      	lsrs	r3, r3, #5
 8008496:	f003 0207 	and.w	r2, r3, #7
 800849a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	4432      	add	r2, r6
 80084a0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80084a2:	e0b9      	b.n	8008618 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80084a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80084a6:	461c      	mov	r4, r3
 80084a8:	f04f 0500 	mov.w	r5, #0
 80084ac:	4622      	mov	r2, r4
 80084ae:	462b      	mov	r3, r5
 80084b0:	1891      	adds	r1, r2, r2
 80084b2:	6139      	str	r1, [r7, #16]
 80084b4:	415b      	adcs	r3, r3
 80084b6:	617b      	str	r3, [r7, #20]
 80084b8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80084bc:	1912      	adds	r2, r2, r4
 80084be:	eb45 0303 	adc.w	r3, r5, r3
 80084c2:	f04f 0000 	mov.w	r0, #0
 80084c6:	f04f 0100 	mov.w	r1, #0
 80084ca:	00d9      	lsls	r1, r3, #3
 80084cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80084d0:	00d0      	lsls	r0, r2, #3
 80084d2:	4602      	mov	r2, r0
 80084d4:	460b      	mov	r3, r1
 80084d6:	eb12 0804 	adds.w	r8, r2, r4
 80084da:	eb43 0905 	adc.w	r9, r3, r5
 80084de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	4618      	mov	r0, r3
 80084e4:	f04f 0100 	mov.w	r1, #0
 80084e8:	f04f 0200 	mov.w	r2, #0
 80084ec:	f04f 0300 	mov.w	r3, #0
 80084f0:	008b      	lsls	r3, r1, #2
 80084f2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80084f6:	0082      	lsls	r2, r0, #2
 80084f8:	4640      	mov	r0, r8
 80084fa:	4649      	mov	r1, r9
 80084fc:	f7f7 fec8 	bl	8000290 <__aeabi_uldivmod>
 8008500:	4602      	mov	r2, r0
 8008502:	460b      	mov	r3, r1
 8008504:	4b49      	ldr	r3, [pc, #292]	; (800862c <UART_SetConfig+0x38c>)
 8008506:	fba3 2302 	umull	r2, r3, r3, r2
 800850a:	095b      	lsrs	r3, r3, #5
 800850c:	011e      	lsls	r6, r3, #4
 800850e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008510:	4618      	mov	r0, r3
 8008512:	f04f 0100 	mov.w	r1, #0
 8008516:	4602      	mov	r2, r0
 8008518:	460b      	mov	r3, r1
 800851a:	1894      	adds	r4, r2, r2
 800851c:	60bc      	str	r4, [r7, #8]
 800851e:	415b      	adcs	r3, r3
 8008520:	60fb      	str	r3, [r7, #12]
 8008522:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008526:	1812      	adds	r2, r2, r0
 8008528:	eb41 0303 	adc.w	r3, r1, r3
 800852c:	f04f 0400 	mov.w	r4, #0
 8008530:	f04f 0500 	mov.w	r5, #0
 8008534:	00dd      	lsls	r5, r3, #3
 8008536:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800853a:	00d4      	lsls	r4, r2, #3
 800853c:	4622      	mov	r2, r4
 800853e:	462b      	mov	r3, r5
 8008540:	1814      	adds	r4, r2, r0
 8008542:	64bc      	str	r4, [r7, #72]	; 0x48
 8008544:	414b      	adcs	r3, r1
 8008546:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008548:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	4618      	mov	r0, r3
 800854e:	f04f 0100 	mov.w	r1, #0
 8008552:	f04f 0200 	mov.w	r2, #0
 8008556:	f04f 0300 	mov.w	r3, #0
 800855a:	008b      	lsls	r3, r1, #2
 800855c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008560:	0082      	lsls	r2, r0, #2
 8008562:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008566:	f7f7 fe93 	bl	8000290 <__aeabi_uldivmod>
 800856a:	4602      	mov	r2, r0
 800856c:	460b      	mov	r3, r1
 800856e:	4b2f      	ldr	r3, [pc, #188]	; (800862c <UART_SetConfig+0x38c>)
 8008570:	fba3 1302 	umull	r1, r3, r3, r2
 8008574:	095b      	lsrs	r3, r3, #5
 8008576:	2164      	movs	r1, #100	; 0x64
 8008578:	fb01 f303 	mul.w	r3, r1, r3
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	011b      	lsls	r3, r3, #4
 8008580:	3332      	adds	r3, #50	; 0x32
 8008582:	4a2a      	ldr	r2, [pc, #168]	; (800862c <UART_SetConfig+0x38c>)
 8008584:	fba2 2303 	umull	r2, r3, r2, r3
 8008588:	095b      	lsrs	r3, r3, #5
 800858a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800858e:	441e      	add	r6, r3
 8008590:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008592:	4618      	mov	r0, r3
 8008594:	f04f 0100 	mov.w	r1, #0
 8008598:	4602      	mov	r2, r0
 800859a:	460b      	mov	r3, r1
 800859c:	1894      	adds	r4, r2, r2
 800859e:	603c      	str	r4, [r7, #0]
 80085a0:	415b      	adcs	r3, r3
 80085a2:	607b      	str	r3, [r7, #4]
 80085a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085a8:	1812      	adds	r2, r2, r0
 80085aa:	eb41 0303 	adc.w	r3, r1, r3
 80085ae:	f04f 0400 	mov.w	r4, #0
 80085b2:	f04f 0500 	mov.w	r5, #0
 80085b6:	00dd      	lsls	r5, r3, #3
 80085b8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085bc:	00d4      	lsls	r4, r2, #3
 80085be:	4622      	mov	r2, r4
 80085c0:	462b      	mov	r3, r5
 80085c2:	eb12 0a00 	adds.w	sl, r2, r0
 80085c6:	eb43 0b01 	adc.w	fp, r3, r1
 80085ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085cc:	685b      	ldr	r3, [r3, #4]
 80085ce:	4618      	mov	r0, r3
 80085d0:	f04f 0100 	mov.w	r1, #0
 80085d4:	f04f 0200 	mov.w	r2, #0
 80085d8:	f04f 0300 	mov.w	r3, #0
 80085dc:	008b      	lsls	r3, r1, #2
 80085de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085e2:	0082      	lsls	r2, r0, #2
 80085e4:	4650      	mov	r0, sl
 80085e6:	4659      	mov	r1, fp
 80085e8:	f7f7 fe52 	bl	8000290 <__aeabi_uldivmod>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4b0e      	ldr	r3, [pc, #56]	; (800862c <UART_SetConfig+0x38c>)
 80085f2:	fba3 1302 	umull	r1, r3, r3, r2
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	2164      	movs	r1, #100	; 0x64
 80085fa:	fb01 f303 	mul.w	r3, r1, r3
 80085fe:	1ad3      	subs	r3, r2, r3
 8008600:	011b      	lsls	r3, r3, #4
 8008602:	3332      	adds	r3, #50	; 0x32
 8008604:	4a09      	ldr	r2, [pc, #36]	; (800862c <UART_SetConfig+0x38c>)
 8008606:	fba2 2303 	umull	r2, r3, r2, r3
 800860a:	095b      	lsrs	r3, r3, #5
 800860c:	f003 020f 	and.w	r2, r3, #15
 8008610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	4432      	add	r2, r6
 8008616:	609a      	str	r2, [r3, #8]
}
 8008618:	bf00      	nop
 800861a:	377c      	adds	r7, #124	; 0x7c
 800861c:	46bd      	mov	sp, r7
 800861e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008622:	bf00      	nop
 8008624:	40011000 	.word	0x40011000
 8008628:	40011400 	.word	0x40011400
 800862c:	51eb851f 	.word	0x51eb851f

08008630 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8008630:	b084      	sub	sp, #16
 8008632:	b480      	push	{r7}
 8008634:	b085      	sub	sp, #20
 8008636:	af00      	add	r7, sp, #0
 8008638:	6078      	str	r0, [r7, #4]
 800863a:	f107 001c 	add.w	r0, r7, #28
 800863e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008642:	2300      	movs	r3, #0
 8008644:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008646:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008648:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800864a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800864c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800864e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008650:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008652:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008656:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800865a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800865c:	68fa      	ldr	r2, [r7, #12]
 800865e:	4313      	orrs	r3, r2
 8008660:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800866a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800866e:	68fa      	ldr	r2, [r7, #12]
 8008670:	431a      	orrs	r2, r3
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008676:	2300      	movs	r3, #0
}
 8008678:	4618      	mov	r0, r3
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	b004      	add	sp, #16
 8008684:	4770      	bx	lr

08008686 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008686:	b480      	push	{r7}
 8008688:	b083      	sub	sp, #12
 800868a:	af00      	add	r7, sp, #0
 800868c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008694:	4618      	mov	r0, r3
 8008696:	370c      	adds	r7, #12
 8008698:	46bd      	mov	sp, r7
 800869a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800869e:	4770      	bx	lr

080086a0 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
 80086a8:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80086b4:	2300      	movs	r3, #0
}
 80086b6:	4618      	mov	r0, r3
 80086b8:	370c      	adds	r7, #12
 80086ba:	46bd      	mov	sp, r7
 80086bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c0:	4770      	bx	lr

080086c2 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2203      	movs	r2, #3
 80086ce:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80086d0:	2002      	movs	r0, #2
 80086d2:	f7f9 fbd5 	bl	8001e80 <HAL_Delay>
  
  return HAL_OK;
 80086d6:	2300      	movs	r3, #0
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3708      	adds	r7, #8
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}

080086e0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80086e0:	b480      	push	{r7}
 80086e2:	b083      	sub	sp, #12
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0303 	and.w	r3, r3, #3
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	370c      	adds	r7, #12
 80086f4:	46bd      	mov	sp, r7
 80086f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fa:	4770      	bx	lr

080086fc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b085      	sub	sp, #20
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
 8008704:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800871a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800871c:	683b      	ldr	r3, [r7, #0]
 800871e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8008720:	431a      	orrs	r2, r3
                       Command->CPSM);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8008726:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8008728:	68fa      	ldr	r2, [r7, #12]
 800872a:	4313      	orrs	r3, r2
 800872c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8008736:	f023 030f 	bic.w	r3, r3, #15
 800873a:	68fa      	ldr	r2, [r7, #12]
 800873c:	431a      	orrs	r2, r3
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008742:	2300      	movs	r3, #0
}
 8008744:	4618      	mov	r0, r3
 8008746:	3714      	adds	r7, #20
 8008748:	46bd      	mov	sp, r7
 800874a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874e:	4770      	bx	lr

08008750 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008750:	b480      	push	{r7}
 8008752:	b083      	sub	sp, #12
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	691b      	ldr	r3, [r3, #16]
 800875c:	b2db      	uxtb	r3, r3
}
 800875e:	4618      	mov	r0, r3
 8008760:	370c      	adds	r7, #12
 8008762:	46bd      	mov	sp, r7
 8008764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008768:	4770      	bx	lr

0800876a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800876a:	b480      	push	{r7}
 800876c:	b085      	sub	sp, #20
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
 8008772:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	3314      	adds	r3, #20
 8008778:	461a      	mov	r2, r3
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	4413      	add	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	681b      	ldr	r3, [r3, #0]
}  
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr

08008790 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008790:	b480      	push	{r7}
 8008792:	b085      	sub	sp, #20
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	681a      	ldr	r2, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685a      	ldr	r2, [r3, #4]
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 80087b2:	683b      	ldr	r3, [r7, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80087b6:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 80087bc:	431a      	orrs	r2, r3
                       Data->DPSM);
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80087c2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80087c4:	68fa      	ldr	r2, [r7, #12]
 80087c6:	4313      	orrs	r3, r2
 80087c8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ce:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	431a      	orrs	r2, r3
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80087da:	2300      	movs	r3, #0

}
 80087dc:	4618      	mov	r0, r3
 80087de:	3714      	adds	r7, #20
 80087e0:	46bd      	mov	sp, r7
 80087e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e6:	4770      	bx	lr

080087e8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b088      	sub	sp, #32
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80087f6:	2310      	movs	r3, #16
 80087f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087fa:	2340      	movs	r3, #64	; 0x40
 80087fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087fe:	2300      	movs	r3, #0
 8008800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008802:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008806:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008808:	f107 0308 	add.w	r3, r7, #8
 800880c:	4619      	mov	r1, r3
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f7ff ff74 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8008814:	f241 3288 	movw	r2, #5000	; 0x1388
 8008818:	2110      	movs	r1, #16
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa44 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008820:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008822:	69fb      	ldr	r3, [r7, #28]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
 8008834:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800883a:	2311      	movs	r3, #17
 800883c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800883e:	2340      	movs	r3, #64	; 0x40
 8008840:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008842:	2300      	movs	r3, #0
 8008844:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800884a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800884c:	f107 0308 	add.w	r3, r7, #8
 8008850:	4619      	mov	r1, r3
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f7ff ff52 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008858:	f241 3288 	movw	r2, #5000	; 0x1388
 800885c:	2111      	movs	r1, #17
 800885e:	6878      	ldr	r0, [r7, #4]
 8008860:	f000 fa22 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008864:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008866:	69fb      	ldr	r3, [r7, #28]
}
 8008868:	4618      	mov	r0, r3
 800886a:	3720      	adds	r7, #32
 800886c:	46bd      	mov	sp, r7
 800886e:	bd80      	pop	{r7, pc}

08008870 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b088      	sub	sp, #32
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
 8008878:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800887e:	2312      	movs	r3, #18
 8008880:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008882:	2340      	movs	r3, #64	; 0x40
 8008884:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008886:	2300      	movs	r3, #0
 8008888:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800888a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800888e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008890:	f107 0308 	add.w	r3, r7, #8
 8008894:	4619      	mov	r1, r3
 8008896:	6878      	ldr	r0, [r7, #4]
 8008898:	f7ff ff30 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	2112      	movs	r1, #18
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f000 fa00 	bl	8008ca8 <SDMMC_GetCmdResp1>
 80088a8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088aa:	69fb      	ldr	r3, [r7, #28]
}
 80088ac:	4618      	mov	r0, r3
 80088ae:	3720      	adds	r7, #32
 80088b0:	46bd      	mov	sp, r7
 80088b2:	bd80      	pop	{r7, pc}

080088b4 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80088b4:	b580      	push	{r7, lr}
 80088b6:	b088      	sub	sp, #32
 80088b8:	af00      	add	r7, sp, #0
 80088ba:	6078      	str	r0, [r7, #4]
 80088bc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 80088c2:	2318      	movs	r3, #24
 80088c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088c6:	2340      	movs	r3, #64	; 0x40
 80088c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088ca:	2300      	movs	r3, #0
 80088cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088d4:	f107 0308 	add.w	r3, r7, #8
 80088d8:	4619      	mov	r1, r3
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff ff0e 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80088e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80088e4:	2118      	movs	r1, #24
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f000 f9de 	bl	8008ca8 <SDMMC_GetCmdResp1>
 80088ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088ee:	69fb      	ldr	r3, [r7, #28]
}
 80088f0:	4618      	mov	r0, r3
 80088f2:	3720      	adds	r7, #32
 80088f4:	46bd      	mov	sp, r7
 80088f6:	bd80      	pop	{r7, pc}

080088f8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b088      	sub	sp, #32
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8008906:	2319      	movs	r3, #25
 8008908:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800890a:	2340      	movs	r3, #64	; 0x40
 800890c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800890e:	2300      	movs	r3, #0
 8008910:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008912:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008916:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	4619      	mov	r1, r3
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f7ff feec 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8008924:	f241 3288 	movw	r2, #5000	; 0x1388
 8008928:	2119      	movs	r1, #25
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f9bc 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008930:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008932:	69fb      	ldr	r3, [r7, #28]
}
 8008934:	4618      	mov	r0, r3
 8008936:	3720      	adds	r7, #32
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b088      	sub	sp, #32
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008944:	2300      	movs	r3, #0
 8008946:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008948:	230c      	movs	r3, #12
 800894a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800894c:	2340      	movs	r3, #64	; 0x40
 800894e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008950:	2300      	movs	r3, #0
 8008952:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008954:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008958:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800895a:	f107 0308 	add.w	r3, r7, #8
 800895e:	4619      	mov	r1, r3
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f7ff fecb 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008966:	4a05      	ldr	r2, [pc, #20]	; (800897c <SDMMC_CmdStopTransfer+0x40>)
 8008968:	210c      	movs	r1, #12
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f000 f99c 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008970:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008972:	69fb      	ldr	r3, [r7, #28]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3720      	adds	r7, #32
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	05f5e100 	.word	0x05f5e100

08008980 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b08a      	sub	sp, #40	; 0x28
 8008984:	af00      	add	r7, sp, #0
 8008986:	60f8      	str	r0, [r7, #12]
 8008988:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008990:	2307      	movs	r3, #7
 8008992:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008994:	2340      	movs	r3, #64	; 0x40
 8008996:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008998:	2300      	movs	r3, #0
 800899a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800899c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a0:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089a2:	f107 0310 	add.w	r3, r7, #16
 80089a6:	4619      	mov	r1, r3
 80089a8:	68f8      	ldr	r0, [r7, #12]
 80089aa:	f7ff fea7 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 80089ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80089b2:	2107      	movs	r1, #7
 80089b4:	68f8      	ldr	r0, [r7, #12]
 80089b6:	f000 f977 	bl	8008ca8 <SDMMC_GetCmdResp1>
 80089ba:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 80089bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3728      	adds	r7, #40	; 0x28
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b088      	sub	sp, #32
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80089ce:	2300      	movs	r3, #0
 80089d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80089d2:	2300      	movs	r3, #0
 80089d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80089d6:	2300      	movs	r3, #0
 80089d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089da:	2300      	movs	r3, #0
 80089dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089e4:	f107 0308 	add.w	r3, r7, #8
 80089e8:	4619      	mov	r1, r3
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fe86 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f92d 	bl	8008c50 <SDMMC_GetCmdError>
 80089f6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089f8:	69fb      	ldr	r3, [r7, #28]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}

08008a02 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8008a02:	b580      	push	{r7, lr}
 8008a04:	b088      	sub	sp, #32
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8008a0a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8008a0e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8008a10:	2308      	movs	r3, #8
 8008a12:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a14:	2340      	movs	r3, #64	; 0x40
 8008a16:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a20:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a22:	f107 0308 	add.w	r3, r7, #8
 8008a26:	4619      	mov	r1, r3
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f7ff fe67 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8008a2e:	6878      	ldr	r0, [r7, #4]
 8008a30:	f000 fb24 	bl	800907c <SDMMC_GetCmdResp7>
 8008a34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a36:	69fb      	ldr	r3, [r7, #28]
}
 8008a38:	4618      	mov	r0, r3
 8008a3a:	3720      	adds	r7, #32
 8008a3c:	46bd      	mov	sp, r7
 8008a3e:	bd80      	pop	{r7, pc}

08008a40 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b088      	sub	sp, #32
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8008a4e:	2337      	movs	r3, #55	; 0x37
 8008a50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a52:	2340      	movs	r3, #64	; 0x40
 8008a54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008a56:	2300      	movs	r3, #0
 8008a58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008a5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a5e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008a60:	f107 0308 	add.w	r3, r7, #8
 8008a64:	4619      	mov	r1, r3
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f7ff fe48 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8008a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a70:	2137      	movs	r1, #55	; 0x37
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f918 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008a78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a7a:	69fb      	ldr	r3, [r7, #28]
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3720      	adds	r7, #32
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b088      	sub	sp, #32
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008a94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008a98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8008a9a:	2329      	movs	r3, #41	; 0x29
 8008a9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008a9e:	2340      	movs	r3, #64	; 0x40
 8008aa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008aa6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008aaa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aac:	f107 0308 	add.w	r3, r7, #8
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f7ff fe22 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008ab8:	6878      	ldr	r0, [r7, #4]
 8008aba:	f000 fa2b 	bl	8008f14 <SDMMC_GetCmdResp3>
 8008abe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008ac0:	69fb      	ldr	r3, [r7, #28]
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3720      	adds	r7, #32
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}

08008aca <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 8008aca:	b580      	push	{r7, lr}
 8008acc:	b088      	sub	sp, #32
 8008ace:	af00      	add	r7, sp, #0
 8008ad0:	6078      	str	r0, [r7, #4]
 8008ad2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008ad8:	2306      	movs	r3, #6
 8008ada:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008adc:	2340      	movs	r3, #64	; 0x40
 8008ade:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ae4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ae8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008aea:	f107 0308 	add.w	r3, r7, #8
 8008aee:	4619      	mov	r1, r3
 8008af0:	6878      	ldr	r0, [r7, #4]
 8008af2:	f7ff fe03 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 8008af6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008afa:	2106      	movs	r1, #6
 8008afc:	6878      	ldr	r0, [r7, #4]
 8008afe:	f000 f8d3 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008b02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b04:	69fb      	ldr	r3, [r7, #28]
}
 8008b06:	4618      	mov	r0, r3
 8008b08:	3720      	adds	r7, #32
 8008b0a:	46bd      	mov	sp, r7
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 8008b0e:	b580      	push	{r7, lr}
 8008b10:	b088      	sub	sp, #32
 8008b12:	af00      	add	r7, sp, #0
 8008b14:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8008b16:	2300      	movs	r3, #0
 8008b18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8008b1a:	2333      	movs	r3, #51	; 0x33
 8008b1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008b1e:	2340      	movs	r3, #64	; 0x40
 8008b20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b22:	2300      	movs	r3, #0
 8008b24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b2c:	f107 0308 	add.w	r3, r7, #8
 8008b30:	4619      	mov	r1, r3
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff fde2 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 8008b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b3c:	2133      	movs	r1, #51	; 0x33
 8008b3e:	6878      	ldr	r0, [r7, #4]
 8008b40:	f000 f8b2 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008b44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b46:	69fb      	ldr	r3, [r7, #28]
}
 8008b48:	4618      	mov	r0, r3
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}

08008b50 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008b50:	b580      	push	{r7, lr}
 8008b52:	b088      	sub	sp, #32
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008b60:	23c0      	movs	r3, #192	; 0xc0
 8008b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008b64:	2300      	movs	r3, #0
 8008b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b6c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008b6e:	f107 0308 	add.w	r3, r7, #8
 8008b72:	4619      	mov	r1, r3
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f7ff fdc1 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008b7a:	6878      	ldr	r0, [r7, #4]
 8008b7c:	f000 f982 	bl	8008e84 <SDMMC_GetCmdResp2>
 8008b80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008b82:	69fb      	ldr	r3, [r7, #28]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3720      	adds	r7, #32
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8008b9a:	2309      	movs	r3, #9
 8008b9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008b9e:	23c0      	movs	r3, #192	; 0xc0
 8008ba0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008ba6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008baa:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bac:	f107 0308 	add.w	r3, r7, #8
 8008bb0:	4619      	mov	r1, r3
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff fda2 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	f000 f963 	bl	8008e84 <SDMMC_GetCmdResp2>
 8008bbe:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008bc0:	69fb      	ldr	r3, [r7, #28]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3720      	adds	r7, #32
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008bd8:	2303      	movs	r3, #3
 8008bda:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008bdc:	2340      	movs	r3, #64	; 0x40
 8008bde:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008be4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008be8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008bea:	f107 0308 	add.w	r3, r7, #8
 8008bee:	4619      	mov	r1, r3
 8008bf0:	6878      	ldr	r0, [r7, #4]
 8008bf2:	f7ff fd83 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8008bf6:	683a      	ldr	r2, [r7, #0]
 8008bf8:	2103      	movs	r1, #3
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f9c8 	bl	8008f90 <SDMMC_GetCmdResp6>
 8008c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c02:	69fb      	ldr	r3, [r7, #28]
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3720      	adds	r7, #32
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8008c16:	683b      	ldr	r3, [r7, #0]
 8008c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8008c1a:	230d      	movs	r3, #13
 8008c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008c1e:	2340      	movs	r3, #64	; 0x40
 8008c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008c22:	2300      	movs	r3, #0
 8008c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c2a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008c2c:	f107 0308 	add.w	r3, r7, #8
 8008c30:	4619      	mov	r1, r3
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f7ff fd62 	bl	80086fc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8008c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c3c:	210d      	movs	r1, #13
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f000 f832 	bl	8008ca8 <SDMMC_GetCmdResp1>
 8008c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008c46:	69fb      	ldr	r3, [r7, #28]
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3720      	adds	r7, #32
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	bd80      	pop	{r7, pc}

08008c50 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008c50:	b480      	push	{r7}
 8008c52:	b085      	sub	sp, #20
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c58:	4b11      	ldr	r3, [pc, #68]	; (8008ca0 <SDMMC_GetCmdError+0x50>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a11      	ldr	r2, [pc, #68]	; (8008ca4 <SDMMC_GetCmdError+0x54>)
 8008c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8008c62:	0a5b      	lsrs	r3, r3, #9
 8008c64:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c68:	fb02 f303 	mul.w	r3, r2, r3
 8008c6c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	1e5a      	subs	r2, r3, #1
 8008c72:	60fa      	str	r2, [r7, #12]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d102      	bne.n	8008c7e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c78:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c7c:	e009      	b.n	8008c92 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d0f1      	beq.n	8008c6e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	22c5      	movs	r2, #197	; 0xc5
 8008c8e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008c90:	2300      	movs	r3, #0
}
 8008c92:	4618      	mov	r0, r3
 8008c94:	3714      	adds	r7, #20
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	20000000 	.word	0x20000000
 8008ca4:	10624dd3 	.word	0x10624dd3

08008ca8 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b088      	sub	sp, #32
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008cb6:	4b70      	ldr	r3, [pc, #448]	; (8008e78 <SDMMC_GetCmdResp1+0x1d0>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a70      	ldr	r2, [pc, #448]	; (8008e7c <SDMMC_GetCmdResp1+0x1d4>)
 8008cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8008cc0:	0a5a      	lsrs	r2, r3, #9
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	fb02 f303 	mul.w	r3, r2, r3
 8008cc8:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	1e5a      	subs	r2, r3, #1
 8008cce:	61fa      	str	r2, [r7, #28]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d102      	bne.n	8008cda <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cd4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008cd8:	e0c9      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cde:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d0ef      	beq.n	8008cca <SDMMC_GetCmdResp1+0x22>
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d1ea      	bne.n	8008cca <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cf8:	f003 0304 	and.w	r3, r3, #4
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d004      	beq.n	8008d0a <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2204      	movs	r2, #4
 8008d04:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d06:	2304      	movs	r3, #4
 8008d08:	e0b1      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d0e:	f003 0301 	and.w	r3, r3, #1
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d004      	beq.n	8008d20 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	e0a6      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	22c5      	movs	r2, #197	; 0xc5
 8008d24:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008d26:	68f8      	ldr	r0, [r7, #12]
 8008d28:	f7ff fd12 	bl	8008750 <SDIO_GetCommandResponse>
 8008d2c:	4603      	mov	r3, r0
 8008d2e:	461a      	mov	r2, r3
 8008d30:	7afb      	ldrb	r3, [r7, #11]
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d001      	beq.n	8008d3a <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008d36:	2301      	movs	r3, #1
 8008d38:	e099      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008d3a:	2100      	movs	r1, #0
 8008d3c:	68f8      	ldr	r0, [r7, #12]
 8008d3e:	f7ff fd14 	bl	800876a <SDIO_GetResponse>
 8008d42:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008d44:	697a      	ldr	r2, [r7, #20]
 8008d46:	4b4e      	ldr	r3, [pc, #312]	; (8008e80 <SDMMC_GetCmdResp1+0x1d8>)
 8008d48:	4013      	ands	r3, r2
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d101      	bne.n	8008d52 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	e08d      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008d52:	697b      	ldr	r3, [r7, #20]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	da02      	bge.n	8008d5e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008d58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d5c:	e087      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d001      	beq.n	8008d6c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008d68:	2340      	movs	r3, #64	; 0x40
 8008d6a:	e080      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d001      	beq.n	8008d7a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008d76:	2380      	movs	r3, #128	; 0x80
 8008d78:	e079      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008d7a:	697b      	ldr	r3, [r7, #20]
 8008d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d002      	beq.n	8008d8a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008d84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d88:	e071      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008d8a:	697b      	ldr	r3, [r7, #20]
 8008d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008d94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d98:	e069      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008da4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008da8:	e061      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008daa:	697b      	ldr	r3, [r7, #20]
 8008dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d002      	beq.n	8008dba <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008db4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008db8:	e059      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dc8:	e051      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d002      	beq.n	8008dda <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008dd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008dd8:	e049      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d002      	beq.n	8008dea <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008de4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008de8:	e041      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d002      	beq.n	8008dfa <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008df8:	e039      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d002      	beq.n	8008e0a <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008e08:	e031      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d002      	beq.n	8008e1a <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008e14:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008e18:	e029      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d002      	beq.n	8008e2a <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008e24:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008e28:	e021      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008e2a:	697b      	ldr	r3, [r7, #20]
 8008e2c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d002      	beq.n	8008e3a <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008e34:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008e38:	e019      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008e3a:	697b      	ldr	r3, [r7, #20]
 8008e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d002      	beq.n	8008e4a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008e44:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e48:	e011      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008e4a:	697b      	ldr	r3, [r7, #20]
 8008e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d002      	beq.n	8008e5a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008e54:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008e58:	e009      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f003 0308 	and.w	r3, r3, #8
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d002      	beq.n	8008e6a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008e64:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008e68:	e001      	b.n	8008e6e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e6a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3720      	adds	r7, #32
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	20000000 	.word	0x20000000
 8008e7c:	10624dd3 	.word	0x10624dd3
 8008e80:	fdffe008 	.word	0xfdffe008

08008e84 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008e84:	b480      	push	{r7}
 8008e86:	b085      	sub	sp, #20
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e8c:	4b1f      	ldr	r3, [pc, #124]	; (8008f0c <SDMMC_GetCmdResp2+0x88>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1f      	ldr	r2, [pc, #124]	; (8008f10 <SDMMC_GetCmdResp2+0x8c>)
 8008e92:	fba2 2303 	umull	r2, r3, r2, r3
 8008e96:	0a5b      	lsrs	r3, r3, #9
 8008e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e9c:	fb02 f303 	mul.w	r3, r2, r3
 8008ea0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	1e5a      	subs	r2, r3, #1
 8008ea6:	60fa      	str	r2, [r7, #12]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d102      	bne.n	8008eb2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008eac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008eb0:	e026      	b.n	8008f00 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d0ef      	beq.n	8008ea2 <SDMMC_GetCmdResp2+0x1e>
 8008ec2:	68bb      	ldr	r3, [r7, #8]
 8008ec4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d1ea      	bne.n	8008ea2 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ed0:	f003 0304 	and.w	r3, r3, #4
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d004      	beq.n	8008ee2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2204      	movs	r2, #4
 8008edc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ede:	2304      	movs	r3, #4
 8008ee0:	e00e      	b.n	8008f00 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ee6:	f003 0301 	and.w	r3, r3, #1
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d004      	beq.n	8008ef8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e003      	b.n	8008f00 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	22c5      	movs	r2, #197	; 0xc5
 8008efc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008efe:	2300      	movs	r3, #0
}
 8008f00:	4618      	mov	r0, r3
 8008f02:	3714      	adds	r7, #20
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr
 8008f0c:	20000000 	.word	0x20000000
 8008f10:	10624dd3 	.word	0x10624dd3

08008f14 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b085      	sub	sp, #20
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f1c:	4b1a      	ldr	r3, [pc, #104]	; (8008f88 <SDMMC_GetCmdResp3+0x74>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a1a      	ldr	r2, [pc, #104]	; (8008f8c <SDMMC_GetCmdResp3+0x78>)
 8008f22:	fba2 2303 	umull	r2, r3, r2, r3
 8008f26:	0a5b      	lsrs	r3, r3, #9
 8008f28:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f2c:	fb02 f303 	mul.w	r3, r2, r3
 8008f30:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	1e5a      	subs	r2, r3, #1
 8008f36:	60fa      	str	r2, [r7, #12]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008f3c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f40:	e01b      	b.n	8008f7a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f46:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0ef      	beq.n	8008f32 <SDMMC_GetCmdResp3+0x1e>
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d1ea      	bne.n	8008f32 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	f003 0304 	and.w	r3, r3, #4
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d004      	beq.n	8008f72 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2204      	movs	r2, #4
 8008f6c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008f6e:	2304      	movs	r3, #4
 8008f70:	e003      	b.n	8008f7a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	22c5      	movs	r2, #197	; 0xc5
 8008f76:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008f78:	2300      	movs	r3, #0
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3714      	adds	r7, #20
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f84:	4770      	bx	lr
 8008f86:	bf00      	nop
 8008f88:	20000000 	.word	0x20000000
 8008f8c:	10624dd3 	.word	0x10624dd3

08008f90 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b088      	sub	sp, #32
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	60f8      	str	r0, [r7, #12]
 8008f98:	460b      	mov	r3, r1
 8008f9a:	607a      	str	r2, [r7, #4]
 8008f9c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008f9e:	4b35      	ldr	r3, [pc, #212]	; (8009074 <SDMMC_GetCmdResp6+0xe4>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a35      	ldr	r2, [pc, #212]	; (8009078 <SDMMC_GetCmdResp6+0xe8>)
 8008fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fa8:	0a5b      	lsrs	r3, r3, #9
 8008faa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008fae:	fb02 f303 	mul.w	r3, r2, r3
 8008fb2:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008fb4:	69fb      	ldr	r3, [r7, #28]
 8008fb6:	1e5a      	subs	r2, r3, #1
 8008fb8:	61fa      	str	r2, [r7, #28]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d102      	bne.n	8008fc4 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008fbe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fc2:	e052      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fc8:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d0ef      	beq.n	8008fb4 <SDMMC_GetCmdResp6+0x24>
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d1ea      	bne.n	8008fb4 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fe2:	f003 0304 	and.w	r3, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d004      	beq.n	8008ff4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	2204      	movs	r2, #4
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ff0:	2304      	movs	r3, #4
 8008ff2:	e03a      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ff8:	f003 0301 	and.w	r3, r3, #1
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d004      	beq.n	800900a <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2201      	movs	r2, #1
 8009004:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8009006:	2301      	movs	r3, #1
 8009008:	e02f      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 800900a:	68f8      	ldr	r0, [r7, #12]
 800900c:	f7ff fba0 	bl	8008750 <SDIO_GetCommandResponse>
 8009010:	4603      	mov	r3, r0
 8009012:	461a      	mov	r2, r3
 8009014:	7afb      	ldrb	r3, [r7, #11]
 8009016:	4293      	cmp	r3, r2
 8009018:	d001      	beq.n	800901e <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800901a:	2301      	movs	r3, #1
 800901c:	e025      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	22c5      	movs	r2, #197	; 0xc5
 8009022:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8009024:	2100      	movs	r1, #0
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f7ff fb9f 	bl	800876a <SDIO_GetResponse>
 800902c:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009034:	2b00      	cmp	r3, #0
 8009036:	d106      	bne.n	8009046 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	0c1b      	lsrs	r3, r3, #16
 800903c:	b29a      	uxth	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8009042:	2300      	movs	r3, #0
 8009044:	e011      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800904c:	2b00      	cmp	r3, #0
 800904e:	d002      	beq.n	8009056 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8009050:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009054:	e009      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8009056:	697b      	ldr	r3, [r7, #20]
 8009058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800905c:	2b00      	cmp	r3, #0
 800905e:	d002      	beq.n	8009066 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8009060:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009064:	e001      	b.n	800906a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8009066:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800906a:	4618      	mov	r0, r3
 800906c:	3720      	adds	r7, #32
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	20000000 	.word	0x20000000
 8009078:	10624dd3 	.word	0x10624dd3

0800907c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 800907c:	b480      	push	{r7}
 800907e:	b085      	sub	sp, #20
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8009084:	4b22      	ldr	r3, [pc, #136]	; (8009110 <SDMMC_GetCmdResp7+0x94>)
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	4a22      	ldr	r2, [pc, #136]	; (8009114 <SDMMC_GetCmdResp7+0x98>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	0a5b      	lsrs	r3, r3, #9
 8009090:	f241 3288 	movw	r2, #5000	; 0x1388
 8009094:	fb02 f303 	mul.w	r3, r2, r3
 8009098:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	1e5a      	subs	r2, r3, #1
 800909e:	60fa      	str	r2, [r7, #12]
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d102      	bne.n	80090aa <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80090a4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80090a8:	e02c      	b.n	8009104 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ae:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d0ef      	beq.n	800909a <SDMMC_GetCmdResp7+0x1e>
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1ea      	bne.n	800909a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d004      	beq.n	80090da <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2204      	movs	r2, #4
 80090d4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80090d6:	2304      	movs	r3, #4
 80090d8:	e014      	b.n	8009104 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d004      	beq.n	80090f0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2201      	movs	r2, #1
 80090ea:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80090ec:	2301      	movs	r3, #1
 80090ee:	e009      	b.n	8009104 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d002      	beq.n	8009102 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2240      	movs	r2, #64	; 0x40
 8009100:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8009102:	2300      	movs	r3, #0
  
}
 8009104:	4618      	mov	r0, r3
 8009106:	3714      	adds	r7, #20
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr
 8009110:	20000000 	.word	0x20000000
 8009114:	10624dd3 	.word	0x10624dd3

08009118 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8009118:	b580      	push	{r7, lr}
 800911a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800911c:	4904      	ldr	r1, [pc, #16]	; (8009130 <MX_FATFS_Init+0x18>)
 800911e:	4805      	ldr	r0, [pc, #20]	; (8009134 <MX_FATFS_Init+0x1c>)
 8009120:	f000 ff54 	bl	8009fcc <FATFS_LinkDriver>
 8009124:	4603      	mov	r3, r0
 8009126:	461a      	mov	r2, r3
 8009128:	4b03      	ldr	r3, [pc, #12]	; (8009138 <MX_FATFS_Init+0x20>)
 800912a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800912c:	bf00      	nop
 800912e:	bd80      	pop	{r7, pc}
 8009130:	20000724 	.word	0x20000724
 8009134:	08017a90 	.word	0x08017a90
 8009138:	20000720 	.word	0x20000720

0800913c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800913c:	b580      	push	{r7, lr}
 800913e:	b082      	sub	sp, #8
 8009140:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8009142:	2300      	movs	r3, #0
 8009144:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8009146:	f000 f896 	bl	8009276 <BSP_SD_IsDetected>
 800914a:	4603      	mov	r3, r0
 800914c:	2b01      	cmp	r3, #1
 800914e:	d001      	beq.n	8009154 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8009150:	2301      	movs	r3, #1
 8009152:	e012      	b.n	800917a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8009154:	480b      	ldr	r0, [pc, #44]	; (8009184 <BSP_SD_Init+0x48>)
 8009156:	f7fc f865 	bl	8005224 <HAL_SD_Init>
 800915a:	4603      	mov	r3, r0
 800915c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800915e:	79fb      	ldrb	r3, [r7, #7]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d109      	bne.n	8009178 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8009164:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009168:	4806      	ldr	r0, [pc, #24]	; (8009184 <BSP_SD_Init+0x48>)
 800916a:	f7fc fe31 	bl	8005dd0 <HAL_SD_ConfigWideBusOperation>
 800916e:	4603      	mov	r3, r0
 8009170:	2b00      	cmp	r3, #0
 8009172:	d001      	beq.n	8009178 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8009178:	79fb      	ldrb	r3, [r7, #7]
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}
 8009182:	bf00      	nop
 8009184:	20000448 	.word	0x20000448

08009188 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8009188:	b580      	push	{r7, lr}
 800918a:	b086      	sub	sp, #24
 800918c:	af00      	add	r7, sp, #0
 800918e:	60f8      	str	r0, [r7, #12]
 8009190:	60b9      	str	r1, [r7, #8]
 8009192:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8009194:	2300      	movs	r3, #0
 8009196:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	68ba      	ldr	r2, [r7, #8]
 800919c:	68f9      	ldr	r1, [r7, #12]
 800919e:	4806      	ldr	r0, [pc, #24]	; (80091b8 <BSP_SD_ReadBlocks_DMA+0x30>)
 80091a0:	f7fc f8ee 	bl	8005380 <HAL_SD_ReadBlocks_DMA>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80091ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80091b0:	4618      	mov	r0, r3
 80091b2:	3718      	adds	r7, #24
 80091b4:	46bd      	mov	sp, r7
 80091b6:	bd80      	pop	{r7, pc}
 80091b8:	20000448 	.word	0x20000448

080091bc <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b086      	sub	sp, #24
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	60f8      	str	r0, [r7, #12]
 80091c4:	60b9      	str	r1, [r7, #8]
 80091c6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80091c8:	2300      	movs	r3, #0
 80091ca:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	68ba      	ldr	r2, [r7, #8]
 80091d0:	68f9      	ldr	r1, [r7, #12]
 80091d2:	4806      	ldr	r0, [pc, #24]	; (80091ec <BSP_SD_WriteBlocks_DMA+0x30>)
 80091d4:	f7fc f9b6 	bl	8005544 <HAL_SD_WriteBlocks_DMA>
 80091d8:	4603      	mov	r3, r0
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d001      	beq.n	80091e2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80091de:	2301      	movs	r3, #1
 80091e0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20000448 	.word	0x20000448

080091f0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80091f0:	b580      	push	{r7, lr}
 80091f2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80091f4:	4805      	ldr	r0, [pc, #20]	; (800920c <BSP_SD_GetCardState+0x1c>)
 80091f6:	f7fc fe85 	bl	8005f04 <HAL_SD_GetCardState>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b04      	cmp	r3, #4
 80091fe:	bf14      	ite	ne
 8009200:	2301      	movne	r3, #1
 8009202:	2300      	moveq	r3, #0
 8009204:	b2db      	uxtb	r3, r3
}
 8009206:	4618      	mov	r0, r3
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20000448 	.word	0x20000448

08009210 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8009210:	b580      	push	{r7, lr}
 8009212:	b082      	sub	sp, #8
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8009218:	6879      	ldr	r1, [r7, #4]
 800921a:	4803      	ldr	r0, [pc, #12]	; (8009228 <BSP_SD_GetCardInfo+0x18>)
 800921c:	f7fc fdac 	bl	8005d78 <HAL_SD_GetCardInfo>
}
 8009220:	bf00      	nop
 8009222:	3708      	adds	r7, #8
 8009224:	46bd      	mov	sp, r7
 8009226:	bd80      	pop	{r7, pc}
 8009228:	20000448 	.word	0x20000448

0800922c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8009234:	f000 f818 	bl	8009268 <BSP_SD_AbortCallback>
}
 8009238:	bf00      	nop
 800923a:	3708      	adds	r7, #8
 800923c:	46bd      	mov	sp, r7
 800923e:	bd80      	pop	{r7, pc}

08009240 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b082      	sub	sp, #8
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009248:	f000 f9a8 	bl	800959c <BSP_SD_WriteCpltCallback>
}
 800924c:	bf00      	nop
 800924e:	3708      	adds	r7, #8
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b082      	sub	sp, #8
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800925c:	f000 f9aa 	bl	80095b4 <BSP_SD_ReadCpltCallback>
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009268:	b480      	push	{r7}
 800926a:	af00      	add	r7, sp, #0

}
 800926c:	bf00      	nop
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr

08009276 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800927c:	2301      	movs	r3, #1
 800927e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009280:	f000 f80c 	bl	800929c <BSP_PlatformIsDetected>
 8009284:	4603      	mov	r3, r0
 8009286:	2b00      	cmp	r3, #0
 8009288:	d101      	bne.n	800928e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800928a:	2300      	movs	r3, #0
 800928c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800928e:	79fb      	ldrb	r3, [r7, #7]
 8009290:	b2db      	uxtb	r3, r3
}
 8009292:	4618      	mov	r0, r3
 8009294:	3708      	adds	r7, #8
 8009296:	46bd      	mov	sp, r7
 8009298:	bd80      	pop	{r7, pc}
	...

0800929c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800929c:	b580      	push	{r7, lr}
 800929e:	b082      	sub	sp, #8
 80092a0:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 80092a2:	2301      	movs	r3, #1
 80092a4:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 80092a6:	2108      	movs	r1, #8
 80092a8:	4806      	ldr	r0, [pc, #24]	; (80092c4 <BSP_PlatformIsDetected+0x28>)
 80092aa:	f7fb f8e1 	bl	8004470 <HAL_GPIO_ReadPin>
 80092ae:	4603      	mov	r3, r0
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d001      	beq.n	80092b8 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 80092b4:	2300      	movs	r3, #0
 80092b6:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 80092b8:	79fb      	ldrb	r3, [r7, #7]
}
 80092ba:	4618      	mov	r0, r3
 80092bc:	3708      	adds	r7, #8
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	40020c00 	.word	0x40020c00

080092c8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80092d0:	f7f8 fdca 	bl	8001e68 <HAL_GetTick>
 80092d4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80092d6:	e006      	b.n	80092e6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80092d8:	f7ff ff8a 	bl	80091f0 <BSP_SD_GetCardState>
 80092dc:	4603      	mov	r3, r0
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e009      	b.n	80092fa <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80092e6:	f7f8 fdbf 	bl	8001e68 <HAL_GetTick>
 80092ea:	4602      	mov	r2, r0
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	1ad3      	subs	r3, r2, r3
 80092f0:	687a      	ldr	r2, [r7, #4]
 80092f2:	429a      	cmp	r2, r3
 80092f4:	d8f0      	bhi.n	80092d8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80092f6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
	...

08009304 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b082      	sub	sp, #8
 8009308:	af00      	add	r7, sp, #0
 800930a:	4603      	mov	r3, r0
 800930c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800930e:	4b0b      	ldr	r3, [pc, #44]	; (800933c <SD_CheckStatus+0x38>)
 8009310:	2201      	movs	r2, #1
 8009312:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8009314:	f7ff ff6c 	bl	80091f0 <BSP_SD_GetCardState>
 8009318:	4603      	mov	r3, r0
 800931a:	2b00      	cmp	r3, #0
 800931c:	d107      	bne.n	800932e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800931e:	4b07      	ldr	r3, [pc, #28]	; (800933c <SD_CheckStatus+0x38>)
 8009320:	781b      	ldrb	r3, [r3, #0]
 8009322:	b2db      	uxtb	r3, r3
 8009324:	f023 0301 	bic.w	r3, r3, #1
 8009328:	b2da      	uxtb	r2, r3
 800932a:	4b04      	ldr	r3, [pc, #16]	; (800933c <SD_CheckStatus+0x38>)
 800932c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800932e:	4b03      	ldr	r3, [pc, #12]	; (800933c <SD_CheckStatus+0x38>)
 8009330:	781b      	ldrb	r3, [r3, #0]
 8009332:	b2db      	uxtb	r3, r3
}
 8009334:	4618      	mov	r0, r3
 8009336:	3708      	adds	r7, #8
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	20000009 	.word	0x20000009

08009340 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009340:	b580      	push	{r7, lr}
 8009342:	b082      	sub	sp, #8
 8009344:	af00      	add	r7, sp, #0
 8009346:	4603      	mov	r3, r0
 8009348:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800934a:	f7ff fef7 	bl	800913c <BSP_SD_Init>
 800934e:	4603      	mov	r3, r0
 8009350:	2b00      	cmp	r3, #0
 8009352:	d107      	bne.n	8009364 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009354:	79fb      	ldrb	r3, [r7, #7]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff ffd4 	bl	8009304 <SD_CheckStatus>
 800935c:	4603      	mov	r3, r0
 800935e:	461a      	mov	r2, r3
 8009360:	4b04      	ldr	r3, [pc, #16]	; (8009374 <SD_initialize+0x34>)
 8009362:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009364:	4b03      	ldr	r3, [pc, #12]	; (8009374 <SD_initialize+0x34>)
 8009366:	781b      	ldrb	r3, [r3, #0]
 8009368:	b2db      	uxtb	r3, r3
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	20000009 	.word	0x20000009

08009378 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	4603      	mov	r3, r0
 8009380:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009382:	79fb      	ldrb	r3, [r7, #7]
 8009384:	4618      	mov	r0, r3
 8009386:	f7ff ffbd 	bl	8009304 <SD_CheckStatus>
 800938a:	4603      	mov	r3, r0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3708      	adds	r7, #8
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b086      	sub	sp, #24
 8009398:	af00      	add	r7, sp, #0
 800939a:	60b9      	str	r1, [r7, #8]
 800939c:	607a      	str	r2, [r7, #4]
 800939e:	603b      	str	r3, [r7, #0]
 80093a0:	4603      	mov	r3, r0
 80093a2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80093a4:	2301      	movs	r3, #1
 80093a6:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80093a8:	f247 5030 	movw	r0, #30000	; 0x7530
 80093ac:	f7ff ff8c 	bl	80092c8 <SD_CheckStatusWithTimeout>
 80093b0:	4603      	mov	r3, r0
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	da01      	bge.n	80093ba <SD_read+0x26>
  {
    return res;
 80093b6:	7dfb      	ldrb	r3, [r7, #23]
 80093b8:	e03b      	b.n	8009432 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	6879      	ldr	r1, [r7, #4]
 80093be:	68b8      	ldr	r0, [r7, #8]
 80093c0:	f7ff fee2 	bl	8009188 <BSP_SD_ReadBlocks_DMA>
 80093c4:	4603      	mov	r3, r0
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d132      	bne.n	8009430 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80093ca:	4b1c      	ldr	r3, [pc, #112]	; (800943c <SD_read+0xa8>)
 80093cc:	2200      	movs	r2, #0
 80093ce:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80093d0:	f7f8 fd4a 	bl	8001e68 <HAL_GetTick>
 80093d4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80093d6:	bf00      	nop
 80093d8:	4b18      	ldr	r3, [pc, #96]	; (800943c <SD_read+0xa8>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d108      	bne.n	80093f2 <SD_read+0x5e>
 80093e0:	f7f8 fd42 	bl	8001e68 <HAL_GetTick>
 80093e4:	4602      	mov	r2, r0
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	1ad3      	subs	r3, r2, r3
 80093ea:	f247 522f 	movw	r2, #29999	; 0x752f
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d9f2      	bls.n	80093d8 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80093f2:	4b12      	ldr	r3, [pc, #72]	; (800943c <SD_read+0xa8>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d102      	bne.n	8009400 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80093fa:	2301      	movs	r3, #1
 80093fc:	75fb      	strb	r3, [r7, #23]
 80093fe:	e017      	b.n	8009430 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8009400:	4b0e      	ldr	r3, [pc, #56]	; (800943c <SD_read+0xa8>)
 8009402:	2200      	movs	r2, #0
 8009404:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009406:	f7f8 fd2f 	bl	8001e68 <HAL_GetTick>
 800940a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800940c:	e007      	b.n	800941e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800940e:	f7ff feef 	bl	80091f0 <BSP_SD_GetCardState>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d102      	bne.n	800941e <SD_read+0x8a>
          {
            res = RES_OK;
 8009418:	2300      	movs	r3, #0
 800941a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800941c:	e008      	b.n	8009430 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800941e:	f7f8 fd23 	bl	8001e68 <HAL_GetTick>
 8009422:	4602      	mov	r2, r0
 8009424:	693b      	ldr	r3, [r7, #16]
 8009426:	1ad3      	subs	r3, r2, r3
 8009428:	f247 522f 	movw	r2, #29999	; 0x752f
 800942c:	4293      	cmp	r3, r2
 800942e:	d9ee      	bls.n	800940e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8009430:	7dfb      	ldrb	r3, [r7, #23]
}
 8009432:	4618      	mov	r0, r3
 8009434:	3718      	adds	r7, #24
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	2000009c 	.word	0x2000009c

08009440 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b086      	sub	sp, #24
 8009444:	af00      	add	r7, sp, #0
 8009446:	60b9      	str	r1, [r7, #8]
 8009448:	607a      	str	r2, [r7, #4]
 800944a:	603b      	str	r3, [r7, #0]
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009450:	2301      	movs	r3, #1
 8009452:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009454:	4b24      	ldr	r3, [pc, #144]	; (80094e8 <SD_write+0xa8>)
 8009456:	2200      	movs	r2, #0
 8009458:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800945a:	f247 5030 	movw	r0, #30000	; 0x7530
 800945e:	f7ff ff33 	bl	80092c8 <SD_CheckStatusWithTimeout>
 8009462:	4603      	mov	r3, r0
 8009464:	2b00      	cmp	r3, #0
 8009466:	da01      	bge.n	800946c <SD_write+0x2c>
  {
    return res;
 8009468:	7dfb      	ldrb	r3, [r7, #23]
 800946a:	e038      	b.n	80094de <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800946c:	683a      	ldr	r2, [r7, #0]
 800946e:	6879      	ldr	r1, [r7, #4]
 8009470:	68b8      	ldr	r0, [r7, #8]
 8009472:	f7ff fea3 	bl	80091bc <BSP_SD_WriteBlocks_DMA>
 8009476:	4603      	mov	r3, r0
 8009478:	2b00      	cmp	r3, #0
 800947a:	d12f      	bne.n	80094dc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800947c:	f7f8 fcf4 	bl	8001e68 <HAL_GetTick>
 8009480:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009482:	bf00      	nop
 8009484:	4b18      	ldr	r3, [pc, #96]	; (80094e8 <SD_write+0xa8>)
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d108      	bne.n	800949e <SD_write+0x5e>
 800948c:	f7f8 fcec 	bl	8001e68 <HAL_GetTick>
 8009490:	4602      	mov	r2, r0
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	1ad3      	subs	r3, r2, r3
 8009496:	f247 522f 	movw	r2, #29999	; 0x752f
 800949a:	4293      	cmp	r3, r2
 800949c:	d9f2      	bls.n	8009484 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800949e:	4b12      	ldr	r3, [pc, #72]	; (80094e8 <SD_write+0xa8>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <SD_write+0x6c>
      {
        res = RES_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	75fb      	strb	r3, [r7, #23]
 80094aa:	e017      	b.n	80094dc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 80094ac:	4b0e      	ldr	r3, [pc, #56]	; (80094e8 <SD_write+0xa8>)
 80094ae:	2200      	movs	r2, #0
 80094b0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80094b2:	f7f8 fcd9 	bl	8001e68 <HAL_GetTick>
 80094b6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80094b8:	e007      	b.n	80094ca <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80094ba:	f7ff fe99 	bl	80091f0 <BSP_SD_GetCardState>
 80094be:	4603      	mov	r3, r0
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d102      	bne.n	80094ca <SD_write+0x8a>
          {
            res = RES_OK;
 80094c4:	2300      	movs	r3, #0
 80094c6:	75fb      	strb	r3, [r7, #23]
            break;
 80094c8:	e008      	b.n	80094dc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80094ca:	f7f8 fccd 	bl	8001e68 <HAL_GetTick>
 80094ce:	4602      	mov	r2, r0
 80094d0:	693b      	ldr	r3, [r7, #16]
 80094d2:	1ad3      	subs	r3, r2, r3
 80094d4:	f247 522f 	movw	r2, #29999	; 0x752f
 80094d8:	4293      	cmp	r3, r2
 80094da:	d9ee      	bls.n	80094ba <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80094dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80094de:	4618      	mov	r0, r3
 80094e0:	3718      	adds	r7, #24
 80094e2:	46bd      	mov	sp, r7
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000098 	.word	0x20000098

080094ec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08c      	sub	sp, #48	; 0x30
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	4603      	mov	r3, r0
 80094f4:	603a      	str	r2, [r7, #0]
 80094f6:	71fb      	strb	r3, [r7, #7]
 80094f8:	460b      	mov	r3, r1
 80094fa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8009502:	4b25      	ldr	r3, [pc, #148]	; (8009598 <SD_ioctl+0xac>)
 8009504:	781b      	ldrb	r3, [r3, #0]
 8009506:	b2db      	uxtb	r3, r3
 8009508:	f003 0301 	and.w	r3, r3, #1
 800950c:	2b00      	cmp	r3, #0
 800950e:	d001      	beq.n	8009514 <SD_ioctl+0x28>
 8009510:	2303      	movs	r3, #3
 8009512:	e03c      	b.n	800958e <SD_ioctl+0xa2>

  switch (cmd)
 8009514:	79bb      	ldrb	r3, [r7, #6]
 8009516:	2b03      	cmp	r3, #3
 8009518:	d834      	bhi.n	8009584 <SD_ioctl+0x98>
 800951a:	a201      	add	r2, pc, #4	; (adr r2, 8009520 <SD_ioctl+0x34>)
 800951c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009520:	08009531 	.word	0x08009531
 8009524:	08009539 	.word	0x08009539
 8009528:	08009551 	.word	0x08009551
 800952c:	0800956b 	.word	0x0800956b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8009530:	2300      	movs	r3, #0
 8009532:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009536:	e028      	b.n	800958a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8009538:	f107 030c 	add.w	r3, r7, #12
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff fe67 	bl	8009210 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009542:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009548:	2300      	movs	r3, #0
 800954a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800954e:	e01c      	b.n	800958a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009550:	f107 030c 	add.w	r3, r7, #12
 8009554:	4618      	mov	r0, r3
 8009556:	f7ff fe5b 	bl	8009210 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800955a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955c:	b29a      	uxth	r2, r3
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009562:	2300      	movs	r3, #0
 8009564:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009568:	e00f      	b.n	800958a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800956a:	f107 030c 	add.w	r3, r7, #12
 800956e:	4618      	mov	r0, r3
 8009570:	f7ff fe4e 	bl	8009210 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009576:	0a5a      	lsrs	r2, r3, #9
 8009578:	683b      	ldr	r3, [r7, #0]
 800957a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800957c:	2300      	movs	r3, #0
 800957e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009582:	e002      	b.n	800958a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009584:	2304      	movs	r3, #4
 8009586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800958a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800958e:	4618      	mov	r0, r3
 8009590:	3730      	adds	r7, #48	; 0x30
 8009592:	46bd      	mov	sp, r7
 8009594:	bd80      	pop	{r7, pc}
 8009596:	bf00      	nop
 8009598:	20000009 	.word	0x20000009

0800959c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 80095a0:	4b03      	ldr	r3, [pc, #12]	; (80095b0 <BSP_SD_WriteCpltCallback+0x14>)
 80095a2:	2201      	movs	r2, #1
 80095a4:	601a      	str	r2, [r3, #0]
}
 80095a6:	bf00      	nop
 80095a8:	46bd      	mov	sp, r7
 80095aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ae:	4770      	bx	lr
 80095b0:	20000098 	.word	0x20000098

080095b4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 80095b4:	b480      	push	{r7}
 80095b6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 80095b8:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <BSP_SD_ReadCpltCallback+0x14>)
 80095ba:	2201      	movs	r2, #1
 80095bc:	601a      	str	r2, [r3, #0]
}
 80095be:	bf00      	nop
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	2000009c 	.word	0x2000009c

080095cc <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80095d2:	4b8d      	ldr	r3, [pc, #564]	; (8009808 <MX_LWIP_Init+0x23c>)
 80095d4:	22c0      	movs	r2, #192	; 0xc0
 80095d6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80095d8:	4b8b      	ldr	r3, [pc, #556]	; (8009808 <MX_LWIP_Init+0x23c>)
 80095da:	22a8      	movs	r2, #168	; 0xa8
 80095dc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 80095de:	4b8a      	ldr	r3, [pc, #552]	; (8009808 <MX_LWIP_Init+0x23c>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 235;
 80095e4:	4b88      	ldr	r3, [pc, #544]	; (8009808 <MX_LWIP_Init+0x23c>)
 80095e6:	22eb      	movs	r2, #235	; 0xeb
 80095e8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80095ea:	4b88      	ldr	r3, [pc, #544]	; (800980c <MX_LWIP_Init+0x240>)
 80095ec:	22ff      	movs	r2, #255	; 0xff
 80095ee:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80095f0:	4b86      	ldr	r3, [pc, #536]	; (800980c <MX_LWIP_Init+0x240>)
 80095f2:	22ff      	movs	r2, #255	; 0xff
 80095f4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80095f6:	4b85      	ldr	r3, [pc, #532]	; (800980c <MX_LWIP_Init+0x240>)
 80095f8:	22ff      	movs	r2, #255	; 0xff
 80095fa:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80095fc:	4b83      	ldr	r3, [pc, #524]	; (800980c <MX_LWIP_Init+0x240>)
 80095fe:	2200      	movs	r2, #0
 8009600:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8009602:	4b83      	ldr	r3, [pc, #524]	; (8009810 <MX_LWIP_Init+0x244>)
 8009604:	22c0      	movs	r2, #192	; 0xc0
 8009606:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8009608:	4b81      	ldr	r3, [pc, #516]	; (8009810 <MX_LWIP_Init+0x244>)
 800960a:	22a8      	movs	r2, #168	; 0xa8
 800960c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800960e:	4b80      	ldr	r3, [pc, #512]	; (8009810 <MX_LWIP_Init+0x244>)
 8009610:	2200      	movs	r2, #0
 8009612:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8009614:	4b7e      	ldr	r3, [pc, #504]	; (8009810 <MX_LWIP_Init+0x244>)
 8009616:	2201      	movs	r2, #1
 8009618:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800961a:	f000 fd14 	bl	800a046 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800961e:	4b7a      	ldr	r3, [pc, #488]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	061a      	lsls	r2, r3, #24
 8009624:	4b78      	ldr	r3, [pc, #480]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009626:	785b      	ldrb	r3, [r3, #1]
 8009628:	041b      	lsls	r3, r3, #16
 800962a:	431a      	orrs	r2, r3
 800962c:	4b76      	ldr	r3, [pc, #472]	; (8009808 <MX_LWIP_Init+0x23c>)
 800962e:	789b      	ldrb	r3, [r3, #2]
 8009630:	021b      	lsls	r3, r3, #8
 8009632:	4313      	orrs	r3, r2
 8009634:	4a74      	ldr	r2, [pc, #464]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009636:	78d2      	ldrb	r2, [r2, #3]
 8009638:	4313      	orrs	r3, r2
 800963a:	061a      	lsls	r2, r3, #24
 800963c:	4b72      	ldr	r3, [pc, #456]	; (8009808 <MX_LWIP_Init+0x23c>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	0619      	lsls	r1, r3, #24
 8009642:	4b71      	ldr	r3, [pc, #452]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009644:	785b      	ldrb	r3, [r3, #1]
 8009646:	041b      	lsls	r3, r3, #16
 8009648:	4319      	orrs	r1, r3
 800964a:	4b6f      	ldr	r3, [pc, #444]	; (8009808 <MX_LWIP_Init+0x23c>)
 800964c:	789b      	ldrb	r3, [r3, #2]
 800964e:	021b      	lsls	r3, r3, #8
 8009650:	430b      	orrs	r3, r1
 8009652:	496d      	ldr	r1, [pc, #436]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009654:	78c9      	ldrb	r1, [r1, #3]
 8009656:	430b      	orrs	r3, r1
 8009658:	021b      	lsls	r3, r3, #8
 800965a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800965e:	431a      	orrs	r2, r3
 8009660:	4b69      	ldr	r3, [pc, #420]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	0619      	lsls	r1, r3, #24
 8009666:	4b68      	ldr	r3, [pc, #416]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009668:	785b      	ldrb	r3, [r3, #1]
 800966a:	041b      	lsls	r3, r3, #16
 800966c:	4319      	orrs	r1, r3
 800966e:	4b66      	ldr	r3, [pc, #408]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009670:	789b      	ldrb	r3, [r3, #2]
 8009672:	021b      	lsls	r3, r3, #8
 8009674:	430b      	orrs	r3, r1
 8009676:	4964      	ldr	r1, [pc, #400]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009678:	78c9      	ldrb	r1, [r1, #3]
 800967a:	430b      	orrs	r3, r1
 800967c:	0a1b      	lsrs	r3, r3, #8
 800967e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009682:	431a      	orrs	r2, r3
 8009684:	4b60      	ldr	r3, [pc, #384]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	0619      	lsls	r1, r3, #24
 800968a:	4b5f      	ldr	r3, [pc, #380]	; (8009808 <MX_LWIP_Init+0x23c>)
 800968c:	785b      	ldrb	r3, [r3, #1]
 800968e:	041b      	lsls	r3, r3, #16
 8009690:	4319      	orrs	r1, r3
 8009692:	4b5d      	ldr	r3, [pc, #372]	; (8009808 <MX_LWIP_Init+0x23c>)
 8009694:	789b      	ldrb	r3, [r3, #2]
 8009696:	021b      	lsls	r3, r3, #8
 8009698:	430b      	orrs	r3, r1
 800969a:	495b      	ldr	r1, [pc, #364]	; (8009808 <MX_LWIP_Init+0x23c>)
 800969c:	78c9      	ldrb	r1, [r1, #3]
 800969e:	430b      	orrs	r3, r1
 80096a0:	0e1b      	lsrs	r3, r3, #24
 80096a2:	4313      	orrs	r3, r2
 80096a4:	4a5b      	ldr	r2, [pc, #364]	; (8009814 <MX_LWIP_Init+0x248>)
 80096a6:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 80096a8:	4b58      	ldr	r3, [pc, #352]	; (800980c <MX_LWIP_Init+0x240>)
 80096aa:	781b      	ldrb	r3, [r3, #0]
 80096ac:	061a      	lsls	r2, r3, #24
 80096ae:	4b57      	ldr	r3, [pc, #348]	; (800980c <MX_LWIP_Init+0x240>)
 80096b0:	785b      	ldrb	r3, [r3, #1]
 80096b2:	041b      	lsls	r3, r3, #16
 80096b4:	431a      	orrs	r2, r3
 80096b6:	4b55      	ldr	r3, [pc, #340]	; (800980c <MX_LWIP_Init+0x240>)
 80096b8:	789b      	ldrb	r3, [r3, #2]
 80096ba:	021b      	lsls	r3, r3, #8
 80096bc:	4313      	orrs	r3, r2
 80096be:	4a53      	ldr	r2, [pc, #332]	; (800980c <MX_LWIP_Init+0x240>)
 80096c0:	78d2      	ldrb	r2, [r2, #3]
 80096c2:	4313      	orrs	r3, r2
 80096c4:	061a      	lsls	r2, r3, #24
 80096c6:	4b51      	ldr	r3, [pc, #324]	; (800980c <MX_LWIP_Init+0x240>)
 80096c8:	781b      	ldrb	r3, [r3, #0]
 80096ca:	0619      	lsls	r1, r3, #24
 80096cc:	4b4f      	ldr	r3, [pc, #316]	; (800980c <MX_LWIP_Init+0x240>)
 80096ce:	785b      	ldrb	r3, [r3, #1]
 80096d0:	041b      	lsls	r3, r3, #16
 80096d2:	4319      	orrs	r1, r3
 80096d4:	4b4d      	ldr	r3, [pc, #308]	; (800980c <MX_LWIP_Init+0x240>)
 80096d6:	789b      	ldrb	r3, [r3, #2]
 80096d8:	021b      	lsls	r3, r3, #8
 80096da:	430b      	orrs	r3, r1
 80096dc:	494b      	ldr	r1, [pc, #300]	; (800980c <MX_LWIP_Init+0x240>)
 80096de:	78c9      	ldrb	r1, [r1, #3]
 80096e0:	430b      	orrs	r3, r1
 80096e2:	021b      	lsls	r3, r3, #8
 80096e4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096e8:	431a      	orrs	r2, r3
 80096ea:	4b48      	ldr	r3, [pc, #288]	; (800980c <MX_LWIP_Init+0x240>)
 80096ec:	781b      	ldrb	r3, [r3, #0]
 80096ee:	0619      	lsls	r1, r3, #24
 80096f0:	4b46      	ldr	r3, [pc, #280]	; (800980c <MX_LWIP_Init+0x240>)
 80096f2:	785b      	ldrb	r3, [r3, #1]
 80096f4:	041b      	lsls	r3, r3, #16
 80096f6:	4319      	orrs	r1, r3
 80096f8:	4b44      	ldr	r3, [pc, #272]	; (800980c <MX_LWIP_Init+0x240>)
 80096fa:	789b      	ldrb	r3, [r3, #2]
 80096fc:	021b      	lsls	r3, r3, #8
 80096fe:	430b      	orrs	r3, r1
 8009700:	4942      	ldr	r1, [pc, #264]	; (800980c <MX_LWIP_Init+0x240>)
 8009702:	78c9      	ldrb	r1, [r1, #3]
 8009704:	430b      	orrs	r3, r1
 8009706:	0a1b      	lsrs	r3, r3, #8
 8009708:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800970c:	431a      	orrs	r2, r3
 800970e:	4b3f      	ldr	r3, [pc, #252]	; (800980c <MX_LWIP_Init+0x240>)
 8009710:	781b      	ldrb	r3, [r3, #0]
 8009712:	0619      	lsls	r1, r3, #24
 8009714:	4b3d      	ldr	r3, [pc, #244]	; (800980c <MX_LWIP_Init+0x240>)
 8009716:	785b      	ldrb	r3, [r3, #1]
 8009718:	041b      	lsls	r3, r3, #16
 800971a:	4319      	orrs	r1, r3
 800971c:	4b3b      	ldr	r3, [pc, #236]	; (800980c <MX_LWIP_Init+0x240>)
 800971e:	789b      	ldrb	r3, [r3, #2]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	430b      	orrs	r3, r1
 8009724:	4939      	ldr	r1, [pc, #228]	; (800980c <MX_LWIP_Init+0x240>)
 8009726:	78c9      	ldrb	r1, [r1, #3]
 8009728:	430b      	orrs	r3, r1
 800972a:	0e1b      	lsrs	r3, r3, #24
 800972c:	4313      	orrs	r3, r2
 800972e:	4a3a      	ldr	r2, [pc, #232]	; (8009818 <MX_LWIP_Init+0x24c>)
 8009730:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8009732:	4b37      	ldr	r3, [pc, #220]	; (8009810 <MX_LWIP_Init+0x244>)
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	061a      	lsls	r2, r3, #24
 8009738:	4b35      	ldr	r3, [pc, #212]	; (8009810 <MX_LWIP_Init+0x244>)
 800973a:	785b      	ldrb	r3, [r3, #1]
 800973c:	041b      	lsls	r3, r3, #16
 800973e:	431a      	orrs	r2, r3
 8009740:	4b33      	ldr	r3, [pc, #204]	; (8009810 <MX_LWIP_Init+0x244>)
 8009742:	789b      	ldrb	r3, [r3, #2]
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	4313      	orrs	r3, r2
 8009748:	4a31      	ldr	r2, [pc, #196]	; (8009810 <MX_LWIP_Init+0x244>)
 800974a:	78d2      	ldrb	r2, [r2, #3]
 800974c:	4313      	orrs	r3, r2
 800974e:	061a      	lsls	r2, r3, #24
 8009750:	4b2f      	ldr	r3, [pc, #188]	; (8009810 <MX_LWIP_Init+0x244>)
 8009752:	781b      	ldrb	r3, [r3, #0]
 8009754:	0619      	lsls	r1, r3, #24
 8009756:	4b2e      	ldr	r3, [pc, #184]	; (8009810 <MX_LWIP_Init+0x244>)
 8009758:	785b      	ldrb	r3, [r3, #1]
 800975a:	041b      	lsls	r3, r3, #16
 800975c:	4319      	orrs	r1, r3
 800975e:	4b2c      	ldr	r3, [pc, #176]	; (8009810 <MX_LWIP_Init+0x244>)
 8009760:	789b      	ldrb	r3, [r3, #2]
 8009762:	021b      	lsls	r3, r3, #8
 8009764:	430b      	orrs	r3, r1
 8009766:	492a      	ldr	r1, [pc, #168]	; (8009810 <MX_LWIP_Init+0x244>)
 8009768:	78c9      	ldrb	r1, [r1, #3]
 800976a:	430b      	orrs	r3, r1
 800976c:	021b      	lsls	r3, r3, #8
 800976e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009772:	431a      	orrs	r2, r3
 8009774:	4b26      	ldr	r3, [pc, #152]	; (8009810 <MX_LWIP_Init+0x244>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	0619      	lsls	r1, r3, #24
 800977a:	4b25      	ldr	r3, [pc, #148]	; (8009810 <MX_LWIP_Init+0x244>)
 800977c:	785b      	ldrb	r3, [r3, #1]
 800977e:	041b      	lsls	r3, r3, #16
 8009780:	4319      	orrs	r1, r3
 8009782:	4b23      	ldr	r3, [pc, #140]	; (8009810 <MX_LWIP_Init+0x244>)
 8009784:	789b      	ldrb	r3, [r3, #2]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	430b      	orrs	r3, r1
 800978a:	4921      	ldr	r1, [pc, #132]	; (8009810 <MX_LWIP_Init+0x244>)
 800978c:	78c9      	ldrb	r1, [r1, #3]
 800978e:	430b      	orrs	r3, r1
 8009790:	0a1b      	lsrs	r3, r3, #8
 8009792:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009796:	431a      	orrs	r2, r3
 8009798:	4b1d      	ldr	r3, [pc, #116]	; (8009810 <MX_LWIP_Init+0x244>)
 800979a:	781b      	ldrb	r3, [r3, #0]
 800979c:	0619      	lsls	r1, r3, #24
 800979e:	4b1c      	ldr	r3, [pc, #112]	; (8009810 <MX_LWIP_Init+0x244>)
 80097a0:	785b      	ldrb	r3, [r3, #1]
 80097a2:	041b      	lsls	r3, r3, #16
 80097a4:	4319      	orrs	r1, r3
 80097a6:	4b1a      	ldr	r3, [pc, #104]	; (8009810 <MX_LWIP_Init+0x244>)
 80097a8:	789b      	ldrb	r3, [r3, #2]
 80097aa:	021b      	lsls	r3, r3, #8
 80097ac:	430b      	orrs	r3, r1
 80097ae:	4918      	ldr	r1, [pc, #96]	; (8009810 <MX_LWIP_Init+0x244>)
 80097b0:	78c9      	ldrb	r1, [r1, #3]
 80097b2:	430b      	orrs	r3, r1
 80097b4:	0e1b      	lsrs	r3, r3, #24
 80097b6:	4313      	orrs	r3, r2
 80097b8:	4a18      	ldr	r2, [pc, #96]	; (800981c <MX_LWIP_Init+0x250>)
 80097ba:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 80097bc:	4b18      	ldr	r3, [pc, #96]	; (8009820 <MX_LWIP_Init+0x254>)
 80097be:	9302      	str	r3, [sp, #8]
 80097c0:	4b18      	ldr	r3, [pc, #96]	; (8009824 <MX_LWIP_Init+0x258>)
 80097c2:	9301      	str	r3, [sp, #4]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9300      	str	r3, [sp, #0]
 80097c8:	4b14      	ldr	r3, [pc, #80]	; (800981c <MX_LWIP_Init+0x250>)
 80097ca:	4a13      	ldr	r2, [pc, #76]	; (8009818 <MX_LWIP_Init+0x24c>)
 80097cc:	4911      	ldr	r1, [pc, #68]	; (8009814 <MX_LWIP_Init+0x248>)
 80097ce:	4816      	ldr	r0, [pc, #88]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097d0:	f001 f8de 	bl	800a990 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80097d4:	4814      	ldr	r0, [pc, #80]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097d6:	f001 fa8d 	bl	800acf4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80097da:	4b13      	ldr	r3, [pc, #76]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097dc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097e0:	089b      	lsrs	r3, r3, #2
 80097e2:	f003 0301 	and.w	r3, r3, #1
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d003      	beq.n	80097f4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80097ec:	480e      	ldr	r0, [pc, #56]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097ee:	f001 fa91 	bl	800ad14 <netif_set_up>
 80097f2:	e002      	b.n	80097fa <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80097f4:	480c      	ldr	r0, [pc, #48]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097f6:	f001 faf9 	bl	800adec <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80097fa:	490c      	ldr	r1, [pc, #48]	; (800982c <MX_LWIP_Init+0x260>)
 80097fc:	480a      	ldr	r0, [pc, #40]	; (8009828 <MX_LWIP_Init+0x25c>)
 80097fe:	f001 fb27 	bl	800ae50 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8009802:	bf00      	nop
 8009804:	46bd      	mov	sp, r7
 8009806:	bd80      	pop	{r7, pc}
 8009808:	20000bcc 	.word	0x20000bcc
 800980c:	20000bc8 	.word	0x20000bc8
 8009810:	20000b8c 	.word	0x20000b8c
 8009814:	20000bc4 	.word	0x20000bc4
 8009818:	20000bd0 	.word	0x20000bd0
 800981c:	20000bd4 	.word	0x20000bd4
 8009820:	08013e09 	.word	0x08013e09
 8009824:	08009dbd 	.word	0x08009dbd
 8009828:	20000b90 	.word	0x20000b90
 800982c:	08009e29 	.word	0x08009e29

08009830 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b08e      	sub	sp, #56	; 0x38
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009838:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800983c:	2200      	movs	r2, #0
 800983e:	601a      	str	r2, [r3, #0]
 8009840:	605a      	str	r2, [r3, #4]
 8009842:	609a      	str	r2, [r3, #8]
 8009844:	60da      	str	r2, [r3, #12]
 8009846:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a46      	ldr	r2, [pc, #280]	; (8009968 <HAL_ETH_MspInit+0x138>)
 800984e:	4293      	cmp	r3, r2
 8009850:	f040 8085 	bne.w	800995e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009854:	2300      	movs	r3, #0
 8009856:	623b      	str	r3, [r7, #32]
 8009858:	4b44      	ldr	r3, [pc, #272]	; (800996c <HAL_ETH_MspInit+0x13c>)
 800985a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800985c:	4a43      	ldr	r2, [pc, #268]	; (800996c <HAL_ETH_MspInit+0x13c>)
 800985e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009862:	6313      	str	r3, [r2, #48]	; 0x30
 8009864:	4b41      	ldr	r3, [pc, #260]	; (800996c <HAL_ETH_MspInit+0x13c>)
 8009866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800986c:	623b      	str	r3, [r7, #32]
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	2300      	movs	r3, #0
 8009872:	61fb      	str	r3, [r7, #28]
 8009874:	4b3d      	ldr	r3, [pc, #244]	; (800996c <HAL_ETH_MspInit+0x13c>)
 8009876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009878:	4a3c      	ldr	r2, [pc, #240]	; (800996c <HAL_ETH_MspInit+0x13c>)
 800987a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800987e:	6313      	str	r3, [r2, #48]	; 0x30
 8009880:	4b3a      	ldr	r3, [pc, #232]	; (800996c <HAL_ETH_MspInit+0x13c>)
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009888:	61fb      	str	r3, [r7, #28]
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	2300      	movs	r3, #0
 800988e:	61bb      	str	r3, [r7, #24]
 8009890:	4b36      	ldr	r3, [pc, #216]	; (800996c <HAL_ETH_MspInit+0x13c>)
 8009892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009894:	4a35      	ldr	r2, [pc, #212]	; (800996c <HAL_ETH_MspInit+0x13c>)
 8009896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800989a:	6313      	str	r3, [r2, #48]	; 0x30
 800989c:	4b33      	ldr	r3, [pc, #204]	; (800996c <HAL_ETH_MspInit+0x13c>)
 800989e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80098a4:	61bb      	str	r3, [r7, #24]
 80098a6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80098a8:	2300      	movs	r3, #0
 80098aa:	617b      	str	r3, [r7, #20]
 80098ac:	4b2f      	ldr	r3, [pc, #188]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098b0:	4a2e      	ldr	r2, [pc, #184]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098b2:	f043 0304 	orr.w	r3, r3, #4
 80098b6:	6313      	str	r3, [r2, #48]	; 0x30
 80098b8:	4b2c      	ldr	r3, [pc, #176]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098bc:	f003 0304 	and.w	r3, r3, #4
 80098c0:	617b      	str	r3, [r7, #20]
 80098c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80098c4:	2300      	movs	r3, #0
 80098c6:	613b      	str	r3, [r7, #16]
 80098c8:	4b28      	ldr	r3, [pc, #160]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098cc:	4a27      	ldr	r2, [pc, #156]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098ce:	f043 0301 	orr.w	r3, r3, #1
 80098d2:	6313      	str	r3, [r2, #48]	; 0x30
 80098d4:	4b25      	ldr	r3, [pc, #148]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098d8:	f003 0301 	and.w	r3, r3, #1
 80098dc:	613b      	str	r3, [r7, #16]
 80098de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80098e0:	2300      	movs	r3, #0
 80098e2:	60fb      	str	r3, [r7, #12]
 80098e4:	4b21      	ldr	r3, [pc, #132]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098e8:	4a20      	ldr	r2, [pc, #128]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098ea:	f043 0302 	orr.w	r3, r3, #2
 80098ee:	6313      	str	r3, [r2, #48]	; 0x30
 80098f0:	4b1e      	ldr	r3, [pc, #120]	; (800996c <HAL_ETH_MspInit+0x13c>)
 80098f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	60fb      	str	r3, [r7, #12]
 80098fa:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80098fc:	2332      	movs	r3, #50	; 0x32
 80098fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009900:	2302      	movs	r3, #2
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009904:	2300      	movs	r3, #0
 8009906:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009908:	2303      	movs	r3, #3
 800990a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800990c:	230b      	movs	r3, #11
 800990e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009910:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009914:	4619      	mov	r1, r3
 8009916:	4816      	ldr	r0, [pc, #88]	; (8009970 <HAL_ETH_MspInit+0x140>)
 8009918:	f7fa fbfe 	bl	8004118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800991c:	2386      	movs	r3, #134	; 0x86
 800991e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009920:	2302      	movs	r3, #2
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009924:	2300      	movs	r3, #0
 8009926:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009928:	2303      	movs	r3, #3
 800992a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800992c:	230b      	movs	r3, #11
 800992e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009930:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009934:	4619      	mov	r1, r3
 8009936:	480f      	ldr	r0, [pc, #60]	; (8009974 <HAL_ETH_MspInit+0x144>)
 8009938:	f7fa fbee 	bl	8004118 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 800993c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009940:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009942:	2302      	movs	r3, #2
 8009944:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009946:	2300      	movs	r3, #0
 8009948:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800994a:	2303      	movs	r3, #3
 800994c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800994e:	230b      	movs	r3, #11
 8009950:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009956:	4619      	mov	r1, r3
 8009958:	4807      	ldr	r0, [pc, #28]	; (8009978 <HAL_ETH_MspInit+0x148>)
 800995a:	f7fa fbdd 	bl	8004118 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800995e:	bf00      	nop
 8009960:	3738      	adds	r7, #56	; 0x38
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	40028000 	.word	0x40028000
 800996c:	40023800 	.word	0x40023800
 8009970:	40020800 	.word	0x40020800
 8009974:	40020000 	.word	0x40020000
 8009978:	40020400 	.word	0x40020400

0800997c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b086      	sub	sp, #24
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009984:	2300      	movs	r3, #0
 8009986:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009988:	4b4d      	ldr	r3, [pc, #308]	; (8009ac0 <low_level_init+0x144>)
 800998a:	4a4e      	ldr	r2, [pc, #312]	; (8009ac4 <low_level_init+0x148>)
 800998c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800998e:	4b4c      	ldr	r3, [pc, #304]	; (8009ac0 <low_level_init+0x144>)
 8009990:	2201      	movs	r2, #1
 8009992:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009994:	4b4a      	ldr	r3, [pc, #296]	; (8009ac0 <low_level_init+0x144>)
 8009996:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800999a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800999c:	4b48      	ldr	r3, [pc, #288]	; (8009ac0 <low_level_init+0x144>)
 800999e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80099a2:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 80099a4:	4b46      	ldr	r3, [pc, #280]	; (8009ac0 <low_level_init+0x144>)
 80099a6:	2201      	movs	r2, #1
 80099a8:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 80099aa:	2300      	movs	r3, #0
 80099ac:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 80099ae:	2380      	movs	r3, #128	; 0x80
 80099b0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 80099b2:	23e1      	movs	r3, #225	; 0xe1
 80099b4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 80099b6:	2300      	movs	r3, #0
 80099b8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 80099ba:	2300      	movs	r3, #0
 80099bc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 80099be:	2300      	movs	r3, #0
 80099c0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 80099c2:	4a3f      	ldr	r2, [pc, #252]	; (8009ac0 <low_level_init+0x144>)
 80099c4:	f107 0308 	add.w	r3, r7, #8
 80099c8:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 80099ca:	4b3d      	ldr	r3, [pc, #244]	; (8009ac0 <low_level_init+0x144>)
 80099cc:	2200      	movs	r2, #0
 80099ce:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 80099d0:	4b3b      	ldr	r3, [pc, #236]	; (8009ac0 <low_level_init+0x144>)
 80099d2:	2200      	movs	r2, #0
 80099d4:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 80099d6:	4b3a      	ldr	r3, [pc, #232]	; (8009ac0 <low_level_init+0x144>)
 80099d8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80099dc:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80099de:	4838      	ldr	r0, [pc, #224]	; (8009ac0 <low_level_init+0x144>)
 80099e0:	f7f9 fa74 	bl	8002ecc <HAL_ETH_Init>
 80099e4:	4603      	mov	r3, r0
 80099e6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80099e8:	7dfb      	ldrb	r3, [r7, #23]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d108      	bne.n	8009a00 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80099f4:	f043 0304 	orr.w	r3, r3, #4
 80099f8:	b2da      	uxtb	r2, r3
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 8009a00:	2304      	movs	r3, #4
 8009a02:	4a31      	ldr	r2, [pc, #196]	; (8009ac8 <low_level_init+0x14c>)
 8009a04:	4931      	ldr	r1, [pc, #196]	; (8009acc <low_level_init+0x150>)
 8009a06:	482e      	ldr	r0, [pc, #184]	; (8009ac0 <low_level_init+0x144>)
 8009a08:	f7f9 fbfc 	bl	8003204 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 8009a0c:	2304      	movs	r3, #4
 8009a0e:	4a30      	ldr	r2, [pc, #192]	; (8009ad0 <low_level_init+0x154>)
 8009a10:	4930      	ldr	r1, [pc, #192]	; (8009ad4 <low_level_init+0x158>)
 8009a12:	482b      	ldr	r0, [pc, #172]	; (8009ac0 <low_level_init+0x144>)
 8009a14:	f7f9 fc5f 	bl	80032d6 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2206      	movs	r2, #6
 8009a1c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8009a20:	4b27      	ldr	r3, [pc, #156]	; (8009ac0 <low_level_init+0x144>)
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	781a      	ldrb	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8009a2c:	4b24      	ldr	r3, [pc, #144]	; (8009ac0 <low_level_init+0x144>)
 8009a2e:	695b      	ldr	r3, [r3, #20]
 8009a30:	785a      	ldrb	r2, [r3, #1]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8009a38:	4b21      	ldr	r3, [pc, #132]	; (8009ac0 <low_level_init+0x144>)
 8009a3a:	695b      	ldr	r3, [r3, #20]
 8009a3c:	789a      	ldrb	r2, [r3, #2]
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009a44:	4b1e      	ldr	r3, [pc, #120]	; (8009ac0 <low_level_init+0x144>)
 8009a46:	695b      	ldr	r3, [r3, #20]
 8009a48:	78da      	ldrb	r2, [r3, #3]
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009a50:	4b1b      	ldr	r3, [pc, #108]	; (8009ac0 <low_level_init+0x144>)
 8009a52:	695b      	ldr	r3, [r3, #20]
 8009a54:	791a      	ldrb	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8009a5c:	4b18      	ldr	r3, [pc, #96]	; (8009ac0 <low_level_init+0x144>)
 8009a5e:	695b      	ldr	r3, [r3, #20]
 8009a60:	795a      	ldrb	r2, [r3, #5]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8009a6e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009a76:	f043 030a 	orr.w	r3, r3, #10
 8009a7a:	b2da      	uxtb	r2, r3
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009a82:	480f      	ldr	r0, [pc, #60]	; (8009ac0 <low_level_init+0x144>)
 8009a84:	f7f9 fed0 	bl	8003828 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009a88:	f107 0310 	add.w	r3, r7, #16
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	211d      	movs	r1, #29
 8009a90:	480b      	ldr	r0, [pc, #44]	; (8009ac0 <low_level_init+0x144>)
 8009a92:	f7f9 fdfb 	bl	800368c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009a96:	693b      	ldr	r3, [r7, #16]
 8009a98:	f043 030b 	orr.w	r3, r3, #11
 8009a9c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	461a      	mov	r2, r3
 8009aa2:	211d      	movs	r1, #29
 8009aa4:	4806      	ldr	r0, [pc, #24]	; (8009ac0 <low_level_init+0x144>)
 8009aa6:	f7f9 fe59 	bl	800375c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 8009aaa:	f107 0310 	add.w	r3, r7, #16
 8009aae:	461a      	mov	r2, r3
 8009ab0:	211d      	movs	r1, #29
 8009ab2:	4803      	ldr	r0, [pc, #12]	; (8009ac0 <low_level_init+0x144>)
 8009ab4:	f7f9 fdea 	bl	800368c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009ab8:	bf00      	nop
 8009aba:	3718      	adds	r7, #24
 8009abc:	46bd      	mov	sp, r7
 8009abe:	bd80      	pop	{r7, pc}
 8009ac0:	200024a8 	.word	0x200024a8
 8009ac4:	40028000 	.word	0x40028000
 8009ac8:	200024f0 	.word	0x200024f0
 8009acc:	20000bd8 	.word	0x20000bd8
 8009ad0:	20000c58 	.word	0x20000c58
 8009ad4:	20002428 	.word	0x20002428

08009ad8 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b08a      	sub	sp, #40	; 0x28
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 8009ae2:	4b4b      	ldr	r3, [pc, #300]	; (8009c10 <low_level_output+0x138>)
 8009ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae6:	689b      	ldr	r3, [r3, #8]
 8009ae8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 8009aea:	2300      	movs	r3, #0
 8009aec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 8009aee:	2300      	movs	r3, #0
 8009af0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 8009af2:	2300      	movs	r3, #0
 8009af4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 8009af6:	2300      	movs	r3, #0
 8009af8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 8009afa:	4b45      	ldr	r3, [pc, #276]	; (8009c10 <low_level_output+0x138>)
 8009afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009afe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8009b00:	2300      	movs	r3, #0
 8009b02:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	623b      	str	r3, [r7, #32]
 8009b08:	e05a      	b.n	8009bc0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b0a:	69bb      	ldr	r3, [r7, #24]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	da03      	bge.n	8009b1a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8009b12:	23f8      	movs	r3, #248	; 0xf8
 8009b14:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8009b18:	e05c      	b.n	8009bd4 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 8009b1a:	6a3b      	ldr	r3, [r7, #32]
 8009b1c:	895b      	ldrh	r3, [r3, #10]
 8009b1e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8009b20:	2300      	movs	r3, #0
 8009b22:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b24:	e02f      	b.n	8009b86 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8009b26:	69fa      	ldr	r2, [r7, #28]
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	18d0      	adds	r0, r2, r3
 8009b2c:	6a3b      	ldr	r3, [r7, #32]
 8009b2e:	685a      	ldr	r2, [r3, #4]
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	18d1      	adds	r1, r2, r3
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009b3a:	3304      	adds	r3, #4
 8009b3c:	461a      	mov	r2, r3
 8009b3e:	f00a fa6b 	bl	8014018 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	68db      	ldr	r3, [r3, #12]
 8009b46:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	da03      	bge.n	8009b58 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009b50:	23f8      	movs	r3, #248	; 0xf8
 8009b52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009b56:	e03d      	b.n	8009bd4 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	689b      	ldr	r3, [r3, #8]
 8009b5c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 8009b5e:	693a      	ldr	r2, [r7, #16]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	4413      	add	r3, r2
 8009b64:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009b68:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b6a:	68ba      	ldr	r2, [r7, #8]
 8009b6c:	693b      	ldr	r3, [r7, #16]
 8009b6e:	1ad3      	subs	r3, r2, r3
 8009b70:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b74:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	693b      	ldr	r3, [r7, #16]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009b80:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	4413      	add	r3, r2
 8009b8c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009b90:	4293      	cmp	r3, r2
 8009b92:	d8c8      	bhi.n	8009b26 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009b94:	69fa      	ldr	r2, [r7, #28]
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	18d0      	adds	r0, r2, r3
 8009b9a:	6a3b      	ldr	r3, [r7, #32]
 8009b9c:	685a      	ldr	r2, [r3, #4]
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	68fa      	ldr	r2, [r7, #12]
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	f00a fa37 	bl	8014018 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009baa:	693a      	ldr	r2, [r7, #16]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	4413      	add	r3, r2
 8009bb0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009bb2:	697a      	ldr	r2, [r7, #20]
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4413      	add	r3, r2
 8009bb8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 8009bba:	6a3b      	ldr	r3, [r7, #32]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	623b      	str	r3, [r7, #32]
 8009bc0:	6a3b      	ldr	r3, [r7, #32]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d1a1      	bne.n	8009b0a <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009bc6:	6979      	ldr	r1, [r7, #20]
 8009bc8:	4811      	ldr	r0, [pc, #68]	; (8009c10 <low_level_output+0x138>)
 8009bca:	f7f9 fbf1 	bl	80033b0 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009bd4:	4b0e      	ldr	r3, [pc, #56]	; (8009c10 <low_level_output+0x138>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bdc:	3314      	adds	r3, #20
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f003 0320 	and.w	r3, r3, #32
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d00d      	beq.n	8009c04 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 8009be8:	4b09      	ldr	r3, [pc, #36]	; (8009c10 <low_level_output+0x138>)
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bf0:	3314      	adds	r3, #20
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 8009bf6:	4b06      	ldr	r3, [pc, #24]	; (8009c10 <low_level_output+0x138>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009bfe:	3304      	adds	r3, #4
 8009c00:	2200      	movs	r2, #0
 8009c02:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8009c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3728      	adds	r7, #40	; 0x28
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd80      	pop	{r7, pc}
 8009c10:	200024a8 	.word	0x200024a8

08009c14 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b08c      	sub	sp, #48	; 0x30
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8009c20:	2300      	movs	r3, #0
 8009c22:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8009c24:	2300      	movs	r3, #0
 8009c26:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8009c28:	2300      	movs	r3, #0
 8009c2a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8009c30:	2300      	movs	r3, #0
 8009c32:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 8009c38:	484f      	ldr	r0, [pc, #316]	; (8009d78 <low_level_input+0x164>)
 8009c3a:	f7f9 fca3 	bl	8003584 <HAL_ETH_GetReceivedFrame>
 8009c3e:	4603      	mov	r3, r0
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d001      	beq.n	8009c48 <low_level_input+0x34>

    return NULL;
 8009c44:	2300      	movs	r3, #0
 8009c46:	e092      	b.n	8009d6e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009c48:	4b4b      	ldr	r3, [pc, #300]	; (8009d78 <low_level_input+0x164>)
 8009c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c4c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009c4e:	4b4a      	ldr	r3, [pc, #296]	; (8009d78 <low_level_input+0x164>)
 8009c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009c54:	89fb      	ldrh	r3, [r7, #14]
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d007      	beq.n	8009c6a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009c5a:	89fb      	ldrh	r3, [r7, #14]
 8009c5c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009c60:	4619      	mov	r1, r3
 8009c62:	2000      	movs	r0, #0
 8009c64:	f001 f990 	bl	800af88 <pbuf_alloc>
 8009c68:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d04b      	beq.n	8009d08 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009c70:	4b41      	ldr	r3, [pc, #260]	; (8009d78 <low_level_input+0x164>)
 8009c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009c74:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009c76:	2300      	movs	r3, #0
 8009c78:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c7e:	e040      	b.n	8009d02 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c82:	895b      	ldrh	r3, [r3, #10]
 8009c84:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009c8a:	e021      	b.n	8009cd0 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c8e:	685a      	ldr	r2, [r3, #4]
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	18d0      	adds	r0, r2, r3
 8009c94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c96:	69fb      	ldr	r3, [r7, #28]
 8009c98:	18d1      	adds	r1, r2, r3
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009ca0:	3304      	adds	r3, #4
 8009ca2:	461a      	mov	r2, r3
 8009ca4:	f00a f9b8 	bl	8014018 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	68db      	ldr	r3, [r3, #12]
 8009cac:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009cae:	6a3b      	ldr	r3, [r7, #32]
 8009cb0:	689b      	ldr	r3, [r3, #8]
 8009cb2:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009cb4:	69fa      	ldr	r2, [r7, #28]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	4413      	add	r3, r2
 8009cba:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009cbe:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009cc0:	69ba      	ldr	r2, [r7, #24]
 8009cc2:	69fb      	ldr	r3, [r7, #28]
 8009cc4:	1ad3      	subs	r3, r2, r3
 8009cc6:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009cca:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009cd0:	697a      	ldr	r2, [r7, #20]
 8009cd2:	69fb      	ldr	r3, [r7, #28]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d8d6      	bhi.n	8009c8c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009cde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	69bb      	ldr	r3, [r7, #24]
 8009ce4:	18d0      	adds	r0, r2, r3
 8009ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce8:	69fb      	ldr	r3, [r7, #28]
 8009cea:	4413      	add	r3, r2
 8009cec:	697a      	ldr	r2, [r7, #20]
 8009cee:	4619      	mov	r1, r3
 8009cf0:	f00a f992 	bl	8014018 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	697b      	ldr	r3, [r7, #20]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d1bb      	bne.n	8009c80 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009d08:	4b1b      	ldr	r3, [pc, #108]	; (8009d78 <low_level_input+0x164>)
 8009d0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d0c:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009d0e:	2300      	movs	r3, #0
 8009d10:	613b      	str	r3, [r7, #16]
 8009d12:	e00b      	b.n	8009d2c <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009d14:	6a3b      	ldr	r3, [r7, #32]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009d1c:	6a3b      	ldr	r3, [r7, #32]
 8009d1e:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009d20:	6a3b      	ldr	r3, [r7, #32]
 8009d22:	68db      	ldr	r3, [r3, #12]
 8009d24:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009d26:	693b      	ldr	r3, [r7, #16]
 8009d28:	3301      	adds	r3, #1
 8009d2a:	613b      	str	r3, [r7, #16]
 8009d2c:	4b12      	ldr	r3, [pc, #72]	; (8009d78 <low_level_input+0x164>)
 8009d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d3ee      	bcc.n	8009d14 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009d36:	4b10      	ldr	r3, [pc, #64]	; (8009d78 <low_level_input+0x164>)
 8009d38:	2200      	movs	r2, #0
 8009d3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009d3c:	4b0e      	ldr	r3, [pc, #56]	; (8009d78 <low_level_input+0x164>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d44:	3314      	adds	r3, #20
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d00d      	beq.n	8009d6c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009d50:	4b09      	ldr	r3, [pc, #36]	; (8009d78 <low_level_input+0x164>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d58:	3314      	adds	r3, #20
 8009d5a:	2280      	movs	r2, #128	; 0x80
 8009d5c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009d5e:	4b06      	ldr	r3, [pc, #24]	; (8009d78 <low_level_input+0x164>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d66:	3308      	adds	r3, #8
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3730      	adds	r7, #48	; 0x30
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}
 8009d76:	bf00      	nop
 8009d78:	200024a8 	.word	0x200024a8

08009d7c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	b084      	sub	sp, #16
 8009d80:	af00      	add	r7, sp, #0
 8009d82:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009d84:	6878      	ldr	r0, [r7, #4]
 8009d86:	f7ff ff45 	bl	8009c14 <low_level_input>
 8009d8a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d010      	beq.n	8009db4 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	68f8      	ldr	r0, [r7, #12]
 8009d9a:	4798      	blx	r3
 8009d9c:	4603      	mov	r3, r0
 8009d9e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009da0:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d006      	beq.n	8009db6 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009da8:	68f8      	ldr	r0, [r7, #12]
 8009daa:	f001 fbd1 	bl	800b550 <pbuf_free>
    p = NULL;
 8009dae:	2300      	movs	r3, #0
 8009db0:	60fb      	str	r3, [r7, #12]
 8009db2:	e000      	b.n	8009db6 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009db4:	bf00      	nop
  }
}
 8009db6:	3710      	adds	r7, #16
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}

08009dbc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b082      	sub	sp, #8
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2b00      	cmp	r3, #0
 8009dc8:	d106      	bne.n	8009dd8 <ethernetif_init+0x1c>
 8009dca:	4b0e      	ldr	r3, [pc, #56]	; (8009e04 <ethernetif_init+0x48>)
 8009dcc:	f44f 7202 	mov.w	r2, #520	; 0x208
 8009dd0:	490d      	ldr	r1, [pc, #52]	; (8009e08 <ethernetif_init+0x4c>)
 8009dd2:	480e      	ldr	r0, [pc, #56]	; (8009e0c <ethernetif_init+0x50>)
 8009dd4:	f00a f936 	bl	8014044 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2273      	movs	r2, #115	; 0x73
 8009ddc:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2274      	movs	r2, #116	; 0x74
 8009de4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a09      	ldr	r2, [pc, #36]	; (8009e10 <ethernetif_init+0x54>)
 8009dec:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	4a08      	ldr	r2, [pc, #32]	; (8009e14 <ethernetif_init+0x58>)
 8009df2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f7ff fdc1 	bl	800997c <low_level_init>

  return ERR_OK;
 8009dfa:	2300      	movs	r3, #0
}
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	3708      	adds	r7, #8
 8009e00:	46bd      	mov	sp, r7
 8009e02:	bd80      	pop	{r7, pc}
 8009e04:	08015090 	.word	0x08015090
 8009e08:	080150ac 	.word	0x080150ac
 8009e0c:	080150bc 	.word	0x080150bc
 8009e10:	080122cd 	.word	0x080122cd
 8009e14:	08009ad9 	.word	0x08009ad9

08009e18 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009e18:	b580      	push	{r7, lr}
 8009e1a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009e1c:	f7f8 f824 	bl	8001e68 <HAL_GetTick>
 8009e20:	4603      	mov	r3, r0
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b084      	sub	sp, #16
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009e30:	2300      	movs	r3, #0
 8009e32:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009e34:	2300      	movs	r3, #0
 8009e36:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009e3e:	089b      	lsrs	r3, r3, #2
 8009e40:	f003 0301 	and.w	r3, r3, #1
 8009e44:	b2db      	uxtb	r3, r3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d05d      	beq.n	8009f06 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009e4a:	4b34      	ldr	r3, [pc, #208]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009e4c:	685b      	ldr	r3, [r3, #4]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d03f      	beq.n	8009ed2 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8009e52:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009e56:	2100      	movs	r1, #0
 8009e58:	4830      	ldr	r0, [pc, #192]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009e5a:	f7f9 fc7f 	bl	800375c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009e5e:	f7f8 f803 	bl	8001e68 <HAL_GetTick>
 8009e62:	4603      	mov	r3, r0
 8009e64:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009e66:	f107 0308 	add.w	r3, r7, #8
 8009e6a:	461a      	mov	r2, r3
 8009e6c:	2101      	movs	r1, #1
 8009e6e:	482b      	ldr	r0, [pc, #172]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009e70:	f7f9 fc0c 	bl	800368c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009e74:	f7f7 fff8 	bl	8001e68 <HAL_GetTick>
 8009e78:	4602      	mov	r2, r0
 8009e7a:	68fb      	ldr	r3, [r7, #12]
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e82:	d828      	bhi.n	8009ed6 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	f003 0320 	and.w	r3, r3, #32
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d0eb      	beq.n	8009e66 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009e8e:	f107 0308 	add.w	r3, r7, #8
 8009e92:	461a      	mov	r2, r3
 8009e94:	2110      	movs	r1, #16
 8009e96:	4821      	ldr	r0, [pc, #132]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009e98:	f7f9 fbf8 	bl	800368c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	f003 0304 	and.w	r3, r3, #4
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d004      	beq.n	8009eb0 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009ea6:	4b1d      	ldr	r3, [pc, #116]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009ea8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009eac:	60da      	str	r2, [r3, #12]
 8009eae:	e002      	b.n	8009eb6 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009eb0:	4b1a      	ldr	r3, [pc, #104]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	f003 0302 	and.w	r3, r3, #2
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d003      	beq.n	8009ec8 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009ec0:	4b16      	ldr	r3, [pc, #88]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	609a      	str	r2, [r3, #8]
 8009ec6:	e016      	b.n	8009ef6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009ec8:	4b14      	ldr	r3, [pc, #80]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009eca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009ece:	609a      	str	r2, [r3, #8]
 8009ed0:	e011      	b.n	8009ef6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009ed2:	bf00      	nop
 8009ed4:	e000      	b.n	8009ed8 <ethernetif_update_config+0xb0>
          goto error;
 8009ed6:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009ed8:	4b10      	ldr	r3, [pc, #64]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	08db      	lsrs	r3, r3, #3
 8009ede:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009ee0:	4b0e      	ldr	r3, [pc, #56]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009ee2:	689b      	ldr	r3, [r3, #8]
 8009ee4:	085b      	lsrs	r3, r3, #1
 8009ee6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	b29b      	uxth	r3, r3
 8009eec:	461a      	mov	r2, r3
 8009eee:	2100      	movs	r1, #0
 8009ef0:	480a      	ldr	r0, [pc, #40]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009ef2:	f7f9 fc33 	bl	800375c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009ef6:	2100      	movs	r1, #0
 8009ef8:	4808      	ldr	r0, [pc, #32]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009efa:	f7f9 fcf3 	bl	80038e4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009efe:	4807      	ldr	r0, [pc, #28]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009f00:	f7f9 fc92 	bl	8003828 <HAL_ETH_Start>
 8009f04:	e002      	b.n	8009f0c <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009f06:	4805      	ldr	r0, [pc, #20]	; (8009f1c <ethernetif_update_config+0xf4>)
 8009f08:	f7f9 fcbd 	bl	8003886 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f807 	bl	8009f20 <ethernetif_notify_conn_changed>
}
 8009f12:	bf00      	nop
 8009f14:	3710      	adds	r7, #16
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200024a8 	.word	0x200024a8

08009f20 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009f20:	b480      	push	{r7}
 8009f22:	b083      	sub	sp, #12
 8009f24:	af00      	add	r7, sp, #0
 8009f26:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009f28:	bf00      	nop
 8009f2a:	370c      	adds	r7, #12
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f32:	4770      	bx	lr

08009f34 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009f34:	b480      	push	{r7}
 8009f36:	b087      	sub	sp, #28
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	60f8      	str	r0, [r7, #12]
 8009f3c:	60b9      	str	r1, [r7, #8]
 8009f3e:	4613      	mov	r3, r2
 8009f40:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009f42:	2301      	movs	r3, #1
 8009f44:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009f46:	2300      	movs	r3, #0
 8009f48:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009f4a:	4b1f      	ldr	r3, [pc, #124]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f4c:	7a5b      	ldrb	r3, [r3, #9]
 8009f4e:	b2db      	uxtb	r3, r3
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d131      	bne.n	8009fb8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009f54:	4b1c      	ldr	r3, [pc, #112]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f56:	7a5b      	ldrb	r3, [r3, #9]
 8009f58:	b2db      	uxtb	r3, r3
 8009f5a:	461a      	mov	r2, r3
 8009f5c:	4b1a      	ldr	r3, [pc, #104]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f5e:	2100      	movs	r1, #0
 8009f60:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009f62:	4b19      	ldr	r3, [pc, #100]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f64:	7a5b      	ldrb	r3, [r3, #9]
 8009f66:	b2db      	uxtb	r3, r3
 8009f68:	4a17      	ldr	r2, [pc, #92]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f6a:	009b      	lsls	r3, r3, #2
 8009f6c:	4413      	add	r3, r2
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009f72:	4b15      	ldr	r3, [pc, #84]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f74:	7a5b      	ldrb	r3, [r3, #9]
 8009f76:	b2db      	uxtb	r3, r3
 8009f78:	461a      	mov	r2, r3
 8009f7a:	4b13      	ldr	r3, [pc, #76]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f7c:	4413      	add	r3, r2
 8009f7e:	79fa      	ldrb	r2, [r7, #7]
 8009f80:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009f82:	4b11      	ldr	r3, [pc, #68]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f84:	7a5b      	ldrb	r3, [r3, #9]
 8009f86:	b2db      	uxtb	r3, r3
 8009f88:	1c5a      	adds	r2, r3, #1
 8009f8a:	b2d1      	uxtb	r1, r2
 8009f8c:	4a0e      	ldr	r2, [pc, #56]	; (8009fc8 <FATFS_LinkDriverEx+0x94>)
 8009f8e:	7251      	strb	r1, [r2, #9]
 8009f90:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009f92:	7dbb      	ldrb	r3, [r7, #22]
 8009f94:	3330      	adds	r3, #48	; 0x30
 8009f96:	b2da      	uxtb	r2, r3
 8009f98:	68bb      	ldr	r3, [r7, #8]
 8009f9a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009f9c:	68bb      	ldr	r3, [r7, #8]
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	223a      	movs	r2, #58	; 0x3a
 8009fa2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	3302      	adds	r3, #2
 8009fa8:	222f      	movs	r2, #47	; 0x2f
 8009faa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	3303      	adds	r3, #3
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009fb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	371c      	adds	r7, #28
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc4:	4770      	bx	lr
 8009fc6:	bf00      	nop
 8009fc8:	200000a0 	.word	0x200000a0

08009fcc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
 8009fd4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	6839      	ldr	r1, [r7, #0]
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f7ff ffaa 	bl	8009f34 <FATFS_LinkDriverEx>
 8009fe0:	4603      	mov	r3, r0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009fea:	b480      	push	{r7}
 8009fec:	b083      	sub	sp, #12
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	4603      	mov	r3, r0
 8009ff2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009ff4:	88fb      	ldrh	r3, [r7, #6]
 8009ff6:	021b      	lsls	r3, r3, #8
 8009ff8:	b21a      	sxth	r2, r3
 8009ffa:	88fb      	ldrh	r3, [r7, #6]
 8009ffc:	0a1b      	lsrs	r3, r3, #8
 8009ffe:	b29b      	uxth	r3, r3
 800a000:	b21b      	sxth	r3, r3
 800a002:	4313      	orrs	r3, r2
 800a004:	b21b      	sxth	r3, r3
 800a006:	b29b      	uxth	r3, r3
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	061a      	lsls	r2, r3, #24
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	021b      	lsls	r3, r3, #8
 800a024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a028:	431a      	orrs	r2, r3
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	0a1b      	lsrs	r3, r3, #8
 800a02e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a032:	431a      	orrs	r2, r3
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	0e1b      	lsrs	r3, r3, #24
 800a038:	4313      	orrs	r3, r2
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	370c      	adds	r7, #12
 800a03e:	46bd      	mov	sp, r7
 800a040:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a044:	4770      	bx	lr

0800a046 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a046:	b580      	push	{r7, lr}
 800a048:	b082      	sub	sp, #8
 800a04a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a04c:	2300      	movs	r3, #0
 800a04e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800a050:	f000 f8d4 	bl	800a1fc <mem_init>
  memp_init();
 800a054:	f000 fbda 	bl	800a80c <memp_init>
  pbuf_init();
  netif_init();
 800a058:	f000 fc92 	bl	800a980 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a05c:	f006 ffb8 	bl	8010fd0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a060:	f001 fd14 	bl	800ba8c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a064:	f006 ff2a 	bl	8010ebc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a068:	bf00      	nop
 800a06a:	3708      	adds	r7, #8
 800a06c:	46bd      	mov	sp, r7
 800a06e:	bd80      	pop	{r7, pc}

0800a070 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a070:	b480      	push	{r7}
 800a072:	b083      	sub	sp, #12
 800a074:	af00      	add	r7, sp, #0
 800a076:	4603      	mov	r3, r0
 800a078:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a07a:	4b05      	ldr	r3, [pc, #20]	; (800a090 <ptr_to_mem+0x20>)
 800a07c:	681a      	ldr	r2, [r3, #0]
 800a07e:	88fb      	ldrh	r3, [r7, #6]
 800a080:	4413      	add	r3, r2
}
 800a082:	4618      	mov	r0, r3
 800a084:	370c      	adds	r7, #12
 800a086:	46bd      	mov	sp, r7
 800a088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a08c:	4770      	bx	lr
 800a08e:	bf00      	nop
 800a090:	200000ac 	.word	0x200000ac

0800a094 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a094:	b480      	push	{r7}
 800a096:	b083      	sub	sp, #12
 800a098:	af00      	add	r7, sp, #0
 800a09a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a09c:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <mem_to_ptr+0x20>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	1ad3      	subs	r3, r2, r3
 800a0a4:	b29b      	uxth	r3, r3
}
 800a0a6:	4618      	mov	r0, r3
 800a0a8:	370c      	adds	r7, #12
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b0:	4770      	bx	lr
 800a0b2:	bf00      	nop
 800a0b4:	200000ac 	.word	0x200000ac

0800a0b8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a0b8:	b590      	push	{r4, r7, lr}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a0c0:	4b45      	ldr	r3, [pc, #276]	; (800a1d8 <plug_holes+0x120>)
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	687a      	ldr	r2, [r7, #4]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d206      	bcs.n	800a0d8 <plug_holes+0x20>
 800a0ca:	4b44      	ldr	r3, [pc, #272]	; (800a1dc <plug_holes+0x124>)
 800a0cc:	f240 12df 	movw	r2, #479	; 0x1df
 800a0d0:	4943      	ldr	r1, [pc, #268]	; (800a1e0 <plug_holes+0x128>)
 800a0d2:	4844      	ldr	r0, [pc, #272]	; (800a1e4 <plug_holes+0x12c>)
 800a0d4:	f009 ffb6 	bl	8014044 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a0d8:	4b43      	ldr	r3, [pc, #268]	; (800a1e8 <plug_holes+0x130>)
 800a0da:	681b      	ldr	r3, [r3, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d306      	bcc.n	800a0f0 <plug_holes+0x38>
 800a0e2:	4b3e      	ldr	r3, [pc, #248]	; (800a1dc <plug_holes+0x124>)
 800a0e4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a0e8:	4940      	ldr	r1, [pc, #256]	; (800a1ec <plug_holes+0x134>)
 800a0ea:	483e      	ldr	r0, [pc, #248]	; (800a1e4 <plug_holes+0x12c>)
 800a0ec:	f009 ffaa 	bl	8014044 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	791b      	ldrb	r3, [r3, #4]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d006      	beq.n	800a106 <plug_holes+0x4e>
 800a0f8:	4b38      	ldr	r3, [pc, #224]	; (800a1dc <plug_holes+0x124>)
 800a0fa:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a0fe:	493c      	ldr	r1, [pc, #240]	; (800a1f0 <plug_holes+0x138>)
 800a100:	4838      	ldr	r0, [pc, #224]	; (800a1e4 <plug_holes+0x12c>)
 800a102:	f009 ff9f 	bl	8014044 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	881b      	ldrh	r3, [r3, #0]
 800a10a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a10e:	d906      	bls.n	800a11e <plug_holes+0x66>
 800a110:	4b32      	ldr	r3, [pc, #200]	; (800a1dc <plug_holes+0x124>)
 800a112:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a116:	4937      	ldr	r1, [pc, #220]	; (800a1f4 <plug_holes+0x13c>)
 800a118:	4832      	ldr	r0, [pc, #200]	; (800a1e4 <plug_holes+0x12c>)
 800a11a:	f009 ff93 	bl	8014044 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	881b      	ldrh	r3, [r3, #0]
 800a122:	4618      	mov	r0, r3
 800a124:	f7ff ffa4 	bl	800a070 <ptr_to_mem>
 800a128:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a12a:	687a      	ldr	r2, [r7, #4]
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d024      	beq.n	800a17c <plug_holes+0xc4>
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	791b      	ldrb	r3, [r3, #4]
 800a136:	2b00      	cmp	r3, #0
 800a138:	d120      	bne.n	800a17c <plug_holes+0xc4>
 800a13a:	4b2b      	ldr	r3, [pc, #172]	; (800a1e8 <plug_holes+0x130>)
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	429a      	cmp	r2, r3
 800a142:	d01b      	beq.n	800a17c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a144:	4b2c      	ldr	r3, [pc, #176]	; (800a1f8 <plug_holes+0x140>)
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	68fa      	ldr	r2, [r7, #12]
 800a14a:	429a      	cmp	r2, r3
 800a14c:	d102      	bne.n	800a154 <plug_holes+0x9c>
      lfree = mem;
 800a14e:	4a2a      	ldr	r2, [pc, #168]	; (800a1f8 <plug_holes+0x140>)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	881a      	ldrh	r2, [r3, #0]
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	881b      	ldrh	r3, [r3, #0]
 800a160:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a164:	d00a      	beq.n	800a17c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	881b      	ldrh	r3, [r3, #0]
 800a16a:	4618      	mov	r0, r3
 800a16c:	f7ff ff80 	bl	800a070 <ptr_to_mem>
 800a170:	4604      	mov	r4, r0
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff ff8e 	bl	800a094 <mem_to_ptr>
 800a178:	4603      	mov	r3, r0
 800a17a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	885b      	ldrh	r3, [r3, #2]
 800a180:	4618      	mov	r0, r3
 800a182:	f7ff ff75 	bl	800a070 <ptr_to_mem>
 800a186:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	429a      	cmp	r2, r3
 800a18e:	d01f      	beq.n	800a1d0 <plug_holes+0x118>
 800a190:	68bb      	ldr	r3, [r7, #8]
 800a192:	791b      	ldrb	r3, [r3, #4]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d11b      	bne.n	800a1d0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a198:	4b17      	ldr	r3, [pc, #92]	; (800a1f8 <plug_holes+0x140>)
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	429a      	cmp	r2, r3
 800a1a0:	d102      	bne.n	800a1a8 <plug_holes+0xf0>
      lfree = pmem;
 800a1a2:	4a15      	ldr	r2, [pc, #84]	; (800a1f8 <plug_holes+0x140>)
 800a1a4:	68bb      	ldr	r3, [r7, #8]
 800a1a6:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	881a      	ldrh	r2, [r3, #0]
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	881b      	ldrh	r3, [r3, #0]
 800a1b4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1b8:	d00a      	beq.n	800a1d0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	881b      	ldrh	r3, [r3, #0]
 800a1be:	4618      	mov	r0, r3
 800a1c0:	f7ff ff56 	bl	800a070 <ptr_to_mem>
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	68b8      	ldr	r0, [r7, #8]
 800a1c8:	f7ff ff64 	bl	800a094 <mem_to_ptr>
 800a1cc:	4603      	mov	r3, r0
 800a1ce:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a1d0:	bf00      	nop
 800a1d2:	3714      	adds	r7, #20
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd90      	pop	{r4, r7, pc}
 800a1d8:	200000ac 	.word	0x200000ac
 800a1dc:	080150e4 	.word	0x080150e4
 800a1e0:	08015114 	.word	0x08015114
 800a1e4:	0801512c 	.word	0x0801512c
 800a1e8:	200000b0 	.word	0x200000b0
 800a1ec:	08015154 	.word	0x08015154
 800a1f0:	08015170 	.word	0x08015170
 800a1f4:	0801518c 	.word	0x0801518c
 800a1f8:	200000b4 	.word	0x200000b4

0800a1fc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b082      	sub	sp, #8
 800a200:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a202:	4b18      	ldr	r3, [pc, #96]	; (800a264 <mem_init+0x68>)
 800a204:	3303      	adds	r3, #3
 800a206:	f023 0303 	bic.w	r3, r3, #3
 800a20a:	461a      	mov	r2, r3
 800a20c:	4b16      	ldr	r3, [pc, #88]	; (800a268 <mem_init+0x6c>)
 800a20e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a210:	4b15      	ldr	r3, [pc, #84]	; (800a268 <mem_init+0x6c>)
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a21c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2200      	movs	r2, #0
 800a222:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2200      	movs	r2, #0
 800a228:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a22a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800a22e:	f7ff ff1f 	bl	800a070 <ptr_to_mem>
 800a232:	4603      	mov	r3, r0
 800a234:	4a0d      	ldr	r2, [pc, #52]	; (800a26c <mem_init+0x70>)
 800a236:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a238:	4b0c      	ldr	r3, [pc, #48]	; (800a26c <mem_init+0x70>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	2201      	movs	r2, #1
 800a23e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a240:	4b0a      	ldr	r3, [pc, #40]	; (800a26c <mem_init+0x70>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a248:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a24a:	4b08      	ldr	r3, [pc, #32]	; (800a26c <mem_init+0x70>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a252:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a254:	4b04      	ldr	r3, [pc, #16]	; (800a268 <mem_init+0x6c>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4a05      	ldr	r2, [pc, #20]	; (800a270 <mem_init+0x74>)
 800a25a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a25c:	bf00      	nop
 800a25e:	3708      	adds	r7, #8
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	20003cd8 	.word	0x20003cd8
 800a268:	200000ac 	.word	0x200000ac
 800a26c:	200000b0 	.word	0x200000b0
 800a270:	200000b4 	.word	0x200000b4

0800a274 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b086      	sub	sp, #24
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f7ff ff09 	bl	800a094 <mem_to_ptr>
 800a282:	4603      	mov	r3, r0
 800a284:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	881b      	ldrh	r3, [r3, #0]
 800a28a:	4618      	mov	r0, r3
 800a28c:	f7ff fef0 	bl	800a070 <ptr_to_mem>
 800a290:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	885b      	ldrh	r3, [r3, #2]
 800a296:	4618      	mov	r0, r3
 800a298:	f7ff feea 	bl	800a070 <ptr_to_mem>
 800a29c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	881b      	ldrh	r3, [r3, #0]
 800a2a2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2a6:	d818      	bhi.n	800a2da <mem_link_valid+0x66>
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	885b      	ldrh	r3, [r3, #2]
 800a2ac:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2b0:	d813      	bhi.n	800a2da <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a2b6:	8afa      	ldrh	r2, [r7, #22]
 800a2b8:	429a      	cmp	r2, r3
 800a2ba:	d004      	beq.n	800a2c6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	881b      	ldrh	r3, [r3, #0]
 800a2c0:	8afa      	ldrh	r2, [r7, #22]
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d109      	bne.n	800a2da <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a2c6:	4b08      	ldr	r3, [pc, #32]	; (800a2e8 <mem_link_valid+0x74>)
 800a2c8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a2ca:	693a      	ldr	r2, [r7, #16]
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d006      	beq.n	800a2de <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a2d0:	693b      	ldr	r3, [r7, #16]
 800a2d2:	885b      	ldrh	r3, [r3, #2]
 800a2d4:	8afa      	ldrh	r2, [r7, #22]
 800a2d6:	429a      	cmp	r2, r3
 800a2d8:	d001      	beq.n	800a2de <mem_link_valid+0x6a>
    return 0;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	e000      	b.n	800a2e0 <mem_link_valid+0x6c>
  }
  return 1;
 800a2de:	2301      	movs	r3, #1
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3718      	adds	r7, #24
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}
 800a2e8:	200000b0 	.word	0x200000b0

0800a2ec <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b084      	sub	sp, #16
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d04c      	beq.n	800a394 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f003 0303 	and.w	r3, r3, #3
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a304:	4b25      	ldr	r3, [pc, #148]	; (800a39c <mem_free+0xb0>)
 800a306:	f240 2273 	movw	r2, #627	; 0x273
 800a30a:	4925      	ldr	r1, [pc, #148]	; (800a3a0 <mem_free+0xb4>)
 800a30c:	4825      	ldr	r0, [pc, #148]	; (800a3a4 <mem_free+0xb8>)
 800a30e:	f009 fe99 	bl	8014044 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a312:	e040      	b.n	800a396 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3b08      	subs	r3, #8
 800a318:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a31a:	4b23      	ldr	r3, [pc, #140]	; (800a3a8 <mem_free+0xbc>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	429a      	cmp	r2, r3
 800a322:	d306      	bcc.n	800a332 <mem_free+0x46>
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	f103 020c 	add.w	r2, r3, #12
 800a32a:	4b20      	ldr	r3, [pc, #128]	; (800a3ac <mem_free+0xc0>)
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	429a      	cmp	r2, r3
 800a330:	d907      	bls.n	800a342 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a332:	4b1a      	ldr	r3, [pc, #104]	; (800a39c <mem_free+0xb0>)
 800a334:	f240 227f 	movw	r2, #639	; 0x27f
 800a338:	491d      	ldr	r1, [pc, #116]	; (800a3b0 <mem_free+0xc4>)
 800a33a:	481a      	ldr	r0, [pc, #104]	; (800a3a4 <mem_free+0xb8>)
 800a33c:	f009 fe82 	bl	8014044 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a340:	e029      	b.n	800a396 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	791b      	ldrb	r3, [r3, #4]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d107      	bne.n	800a35a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a34a:	4b14      	ldr	r3, [pc, #80]	; (800a39c <mem_free+0xb0>)
 800a34c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a350:	4918      	ldr	r1, [pc, #96]	; (800a3b4 <mem_free+0xc8>)
 800a352:	4814      	ldr	r0, [pc, #80]	; (800a3a4 <mem_free+0xb8>)
 800a354:	f009 fe76 	bl	8014044 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a358:	e01d      	b.n	800a396 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a35a:	68f8      	ldr	r0, [r7, #12]
 800a35c:	f7ff ff8a 	bl	800a274 <mem_link_valid>
 800a360:	4603      	mov	r3, r0
 800a362:	2b00      	cmp	r3, #0
 800a364:	d107      	bne.n	800a376 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a366:	4b0d      	ldr	r3, [pc, #52]	; (800a39c <mem_free+0xb0>)
 800a368:	f240 2295 	movw	r2, #661	; 0x295
 800a36c:	4912      	ldr	r1, [pc, #72]	; (800a3b8 <mem_free+0xcc>)
 800a36e:	480d      	ldr	r0, [pc, #52]	; (800a3a4 <mem_free+0xb8>)
 800a370:	f009 fe68 	bl	8014044 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a374:	e00f      	b.n	800a396 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	2200      	movs	r2, #0
 800a37a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a37c:	4b0f      	ldr	r3, [pc, #60]	; (800a3bc <mem_free+0xd0>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	429a      	cmp	r2, r3
 800a384:	d202      	bcs.n	800a38c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a386:	4a0d      	ldr	r2, [pc, #52]	; (800a3bc <mem_free+0xd0>)
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a38c:	68f8      	ldr	r0, [r7, #12]
 800a38e:	f7ff fe93 	bl	800a0b8 <plug_holes>
 800a392:	e000      	b.n	800a396 <mem_free+0xaa>
    return;
 800a394:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a396:	3710      	adds	r7, #16
 800a398:	46bd      	mov	sp, r7
 800a39a:	bd80      	pop	{r7, pc}
 800a39c:	080150e4 	.word	0x080150e4
 800a3a0:	080151b8 	.word	0x080151b8
 800a3a4:	0801512c 	.word	0x0801512c
 800a3a8:	200000ac 	.word	0x200000ac
 800a3ac:	200000b0 	.word	0x200000b0
 800a3b0:	080151dc 	.word	0x080151dc
 800a3b4:	080151f8 	.word	0x080151f8
 800a3b8:	08015220 	.word	0x08015220
 800a3bc:	200000b4 	.word	0x200000b4

0800a3c0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a3c0:	b580      	push	{r7, lr}
 800a3c2:	b088      	sub	sp, #32
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	460b      	mov	r3, r1
 800a3ca:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a3cc:	887b      	ldrh	r3, [r7, #2]
 800a3ce:	3303      	adds	r3, #3
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	f023 0303 	bic.w	r3, r3, #3
 800a3d6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a3d8:	8bfb      	ldrh	r3, [r7, #30]
 800a3da:	2b0b      	cmp	r3, #11
 800a3dc:	d801      	bhi.n	800a3e2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a3de:	230c      	movs	r3, #12
 800a3e0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a3e2:	8bfb      	ldrh	r3, [r7, #30]
 800a3e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3e8:	d803      	bhi.n	800a3f2 <mem_trim+0x32>
 800a3ea:	8bfa      	ldrh	r2, [r7, #30]
 800a3ec:	887b      	ldrh	r3, [r7, #2]
 800a3ee:	429a      	cmp	r2, r3
 800a3f0:	d201      	bcs.n	800a3f6 <mem_trim+0x36>
    return NULL;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	e0cc      	b.n	800a590 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a3f6:	4b68      	ldr	r3, [pc, #416]	; (800a598 <mem_trim+0x1d8>)
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	429a      	cmp	r2, r3
 800a3fe:	d304      	bcc.n	800a40a <mem_trim+0x4a>
 800a400:	4b66      	ldr	r3, [pc, #408]	; (800a59c <mem_trim+0x1dc>)
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	687a      	ldr	r2, [r7, #4]
 800a406:	429a      	cmp	r2, r3
 800a408:	d306      	bcc.n	800a418 <mem_trim+0x58>
 800a40a:	4b65      	ldr	r3, [pc, #404]	; (800a5a0 <mem_trim+0x1e0>)
 800a40c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a410:	4964      	ldr	r1, [pc, #400]	; (800a5a4 <mem_trim+0x1e4>)
 800a412:	4865      	ldr	r0, [pc, #404]	; (800a5a8 <mem_trim+0x1e8>)
 800a414:	f009 fe16 	bl	8014044 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a418:	4b5f      	ldr	r3, [pc, #380]	; (800a598 <mem_trim+0x1d8>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	429a      	cmp	r2, r3
 800a420:	d304      	bcc.n	800a42c <mem_trim+0x6c>
 800a422:	4b5e      	ldr	r3, [pc, #376]	; (800a59c <mem_trim+0x1dc>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	687a      	ldr	r2, [r7, #4]
 800a428:	429a      	cmp	r2, r3
 800a42a:	d301      	bcc.n	800a430 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	e0af      	b.n	800a590 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	3b08      	subs	r3, #8
 800a434:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a436:	69b8      	ldr	r0, [r7, #24]
 800a438:	f7ff fe2c 	bl	800a094 <mem_to_ptr>
 800a43c:	4603      	mov	r3, r0
 800a43e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a440:	69bb      	ldr	r3, [r7, #24]
 800a442:	881a      	ldrh	r2, [r3, #0]
 800a444:	8afb      	ldrh	r3, [r7, #22]
 800a446:	1ad3      	subs	r3, r2, r3
 800a448:	b29b      	uxth	r3, r3
 800a44a:	3b08      	subs	r3, #8
 800a44c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a44e:	8bfa      	ldrh	r2, [r7, #30]
 800a450:	8abb      	ldrh	r3, [r7, #20]
 800a452:	429a      	cmp	r2, r3
 800a454:	d906      	bls.n	800a464 <mem_trim+0xa4>
 800a456:	4b52      	ldr	r3, [pc, #328]	; (800a5a0 <mem_trim+0x1e0>)
 800a458:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a45c:	4953      	ldr	r1, [pc, #332]	; (800a5ac <mem_trim+0x1ec>)
 800a45e:	4852      	ldr	r0, [pc, #328]	; (800a5a8 <mem_trim+0x1e8>)
 800a460:	f009 fdf0 	bl	8014044 <iprintf>
  if (newsize > size) {
 800a464:	8bfa      	ldrh	r2, [r7, #30]
 800a466:	8abb      	ldrh	r3, [r7, #20]
 800a468:	429a      	cmp	r2, r3
 800a46a:	d901      	bls.n	800a470 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a46c:	2300      	movs	r3, #0
 800a46e:	e08f      	b.n	800a590 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a470:	8bfa      	ldrh	r2, [r7, #30]
 800a472:	8abb      	ldrh	r3, [r7, #20]
 800a474:	429a      	cmp	r2, r3
 800a476:	d101      	bne.n	800a47c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	e089      	b.n	800a590 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	881b      	ldrh	r3, [r3, #0]
 800a480:	4618      	mov	r0, r3
 800a482:	f7ff fdf5 	bl	800a070 <ptr_to_mem>
 800a486:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a488:	693b      	ldr	r3, [r7, #16]
 800a48a:	791b      	ldrb	r3, [r3, #4]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d13f      	bne.n	800a510 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a490:	69bb      	ldr	r3, [r7, #24]
 800a492:	881b      	ldrh	r3, [r3, #0]
 800a494:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a498:	d106      	bne.n	800a4a8 <mem_trim+0xe8>
 800a49a:	4b41      	ldr	r3, [pc, #260]	; (800a5a0 <mem_trim+0x1e0>)
 800a49c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a4a0:	4943      	ldr	r1, [pc, #268]	; (800a5b0 <mem_trim+0x1f0>)
 800a4a2:	4841      	ldr	r0, [pc, #260]	; (800a5a8 <mem_trim+0x1e8>)
 800a4a4:	f009 fdce 	bl	8014044 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	881b      	ldrh	r3, [r3, #0]
 800a4ac:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a4ae:	8afa      	ldrh	r2, [r7, #22]
 800a4b0:	8bfb      	ldrh	r3, [r7, #30]
 800a4b2:	4413      	add	r3, r2
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	3308      	adds	r3, #8
 800a4b8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a4ba:	4b3e      	ldr	r3, [pc, #248]	; (800a5b4 <mem_trim+0x1f4>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	693a      	ldr	r2, [r7, #16]
 800a4c0:	429a      	cmp	r2, r3
 800a4c2:	d106      	bne.n	800a4d2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a4c4:	89fb      	ldrh	r3, [r7, #14]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff fdd2 	bl	800a070 <ptr_to_mem>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	4a39      	ldr	r2, [pc, #228]	; (800a5b4 <mem_trim+0x1f4>)
 800a4d0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a4d2:	89fb      	ldrh	r3, [r7, #14]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7ff fdcb 	bl	800a070 <ptr_to_mem>
 800a4da:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a4dc:	693b      	ldr	r3, [r7, #16]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	89ba      	ldrh	r2, [r7, #12]
 800a4e6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a4e8:	693b      	ldr	r3, [r7, #16]
 800a4ea:	8afa      	ldrh	r2, [r7, #22]
 800a4ec:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a4ee:	69bb      	ldr	r3, [r7, #24]
 800a4f0:	89fa      	ldrh	r2, [r7, #14]
 800a4f2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	881b      	ldrh	r3, [r3, #0]
 800a4f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a4fc:	d047      	beq.n	800a58e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a4fe:	693b      	ldr	r3, [r7, #16]
 800a500:	881b      	ldrh	r3, [r3, #0]
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff fdb4 	bl	800a070 <ptr_to_mem>
 800a508:	4602      	mov	r2, r0
 800a50a:	89fb      	ldrh	r3, [r7, #14]
 800a50c:	8053      	strh	r3, [r2, #2]
 800a50e:	e03e      	b.n	800a58e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a510:	8bfb      	ldrh	r3, [r7, #30]
 800a512:	f103 0214 	add.w	r2, r3, #20
 800a516:	8abb      	ldrh	r3, [r7, #20]
 800a518:	429a      	cmp	r2, r3
 800a51a:	d838      	bhi.n	800a58e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a51c:	8afa      	ldrh	r2, [r7, #22]
 800a51e:	8bfb      	ldrh	r3, [r7, #30]
 800a520:	4413      	add	r3, r2
 800a522:	b29b      	uxth	r3, r3
 800a524:	3308      	adds	r3, #8
 800a526:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a528:	69bb      	ldr	r3, [r7, #24]
 800a52a:	881b      	ldrh	r3, [r3, #0]
 800a52c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a530:	d106      	bne.n	800a540 <mem_trim+0x180>
 800a532:	4b1b      	ldr	r3, [pc, #108]	; (800a5a0 <mem_trim+0x1e0>)
 800a534:	f240 3216 	movw	r2, #790	; 0x316
 800a538:	491d      	ldr	r1, [pc, #116]	; (800a5b0 <mem_trim+0x1f0>)
 800a53a:	481b      	ldr	r0, [pc, #108]	; (800a5a8 <mem_trim+0x1e8>)
 800a53c:	f009 fd82 	bl	8014044 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a540:	89fb      	ldrh	r3, [r7, #14]
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff fd94 	bl	800a070 <ptr_to_mem>
 800a548:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a54a:	4b1a      	ldr	r3, [pc, #104]	; (800a5b4 <mem_trim+0x1f4>)
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	429a      	cmp	r2, r3
 800a552:	d202      	bcs.n	800a55a <mem_trim+0x19a>
      lfree = mem2;
 800a554:	4a17      	ldr	r2, [pc, #92]	; (800a5b4 <mem_trim+0x1f4>)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a55a:	693b      	ldr	r3, [r7, #16]
 800a55c:	2200      	movs	r2, #0
 800a55e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a560:	69bb      	ldr	r3, [r7, #24]
 800a562:	881a      	ldrh	r2, [r3, #0]
 800a564:	693b      	ldr	r3, [r7, #16]
 800a566:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a568:	693b      	ldr	r3, [r7, #16]
 800a56a:	8afa      	ldrh	r2, [r7, #22]
 800a56c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a56e:	69bb      	ldr	r3, [r7, #24]
 800a570:	89fa      	ldrh	r2, [r7, #14]
 800a572:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a574:	693b      	ldr	r3, [r7, #16]
 800a576:	881b      	ldrh	r3, [r3, #0]
 800a578:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a57c:	d007      	beq.n	800a58e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a57e:	693b      	ldr	r3, [r7, #16]
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	4618      	mov	r0, r3
 800a584:	f7ff fd74 	bl	800a070 <ptr_to_mem>
 800a588:	4602      	mov	r2, r0
 800a58a:	89fb      	ldrh	r3, [r7, #14]
 800a58c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a58e:	687b      	ldr	r3, [r7, #4]
}
 800a590:	4618      	mov	r0, r3
 800a592:	3720      	adds	r7, #32
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}
 800a598:	200000ac 	.word	0x200000ac
 800a59c:	200000b0 	.word	0x200000b0
 800a5a0:	080150e4 	.word	0x080150e4
 800a5a4:	08015254 	.word	0x08015254
 800a5a8:	0801512c 	.word	0x0801512c
 800a5ac:	0801526c 	.word	0x0801526c
 800a5b0:	0801528c 	.word	0x0801528c
 800a5b4:	200000b4 	.word	0x200000b4

0800a5b8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b088      	sub	sp, #32
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	4603      	mov	r3, r0
 800a5c0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a5c2:	88fb      	ldrh	r3, [r7, #6]
 800a5c4:	2b00      	cmp	r3, #0
 800a5c6:	d101      	bne.n	800a5cc <mem_malloc+0x14>
    return NULL;
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	e0d9      	b.n	800a780 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a5cc:	88fb      	ldrh	r3, [r7, #6]
 800a5ce:	3303      	adds	r3, #3
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f023 0303 	bic.w	r3, r3, #3
 800a5d6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a5d8:	8bbb      	ldrh	r3, [r7, #28]
 800a5da:	2b0b      	cmp	r3, #11
 800a5dc:	d801      	bhi.n	800a5e2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a5de:	230c      	movs	r3, #12
 800a5e0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a5e2:	8bbb      	ldrh	r3, [r7, #28]
 800a5e4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a5e8:	d803      	bhi.n	800a5f2 <mem_malloc+0x3a>
 800a5ea:	8bba      	ldrh	r2, [r7, #28]
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	429a      	cmp	r2, r3
 800a5f0:	d201      	bcs.n	800a5f6 <mem_malloc+0x3e>
    return NULL;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e0c4      	b.n	800a780 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a5f6:	4b64      	ldr	r3, [pc, #400]	; (800a788 <mem_malloc+0x1d0>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4618      	mov	r0, r3
 800a5fc:	f7ff fd4a 	bl	800a094 <mem_to_ptr>
 800a600:	4603      	mov	r3, r0
 800a602:	83fb      	strh	r3, [r7, #30]
 800a604:	e0b4      	b.n	800a770 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a606:	8bfb      	ldrh	r3, [r7, #30]
 800a608:	4618      	mov	r0, r3
 800a60a:	f7ff fd31 	bl	800a070 <ptr_to_mem>
 800a60e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a610:	697b      	ldr	r3, [r7, #20]
 800a612:	791b      	ldrb	r3, [r3, #4]
 800a614:	2b00      	cmp	r3, #0
 800a616:	f040 80a4 	bne.w	800a762 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a61a:	697b      	ldr	r3, [r7, #20]
 800a61c:	881b      	ldrh	r3, [r3, #0]
 800a61e:	461a      	mov	r2, r3
 800a620:	8bfb      	ldrh	r3, [r7, #30]
 800a622:	1ad3      	subs	r3, r2, r3
 800a624:	f1a3 0208 	sub.w	r2, r3, #8
 800a628:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a62a:	429a      	cmp	r2, r3
 800a62c:	f0c0 8099 	bcc.w	800a762 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a630:	697b      	ldr	r3, [r7, #20]
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	461a      	mov	r2, r3
 800a636:	8bfb      	ldrh	r3, [r7, #30]
 800a638:	1ad3      	subs	r3, r2, r3
 800a63a:	f1a3 0208 	sub.w	r2, r3, #8
 800a63e:	8bbb      	ldrh	r3, [r7, #28]
 800a640:	3314      	adds	r3, #20
 800a642:	429a      	cmp	r2, r3
 800a644:	d333      	bcc.n	800a6ae <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a646:	8bfa      	ldrh	r2, [r7, #30]
 800a648:	8bbb      	ldrh	r3, [r7, #28]
 800a64a:	4413      	add	r3, r2
 800a64c:	b29b      	uxth	r3, r3
 800a64e:	3308      	adds	r3, #8
 800a650:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a652:	8a7b      	ldrh	r3, [r7, #18]
 800a654:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a658:	d106      	bne.n	800a668 <mem_malloc+0xb0>
 800a65a:	4b4c      	ldr	r3, [pc, #304]	; (800a78c <mem_malloc+0x1d4>)
 800a65c:	f240 3287 	movw	r2, #903	; 0x387
 800a660:	494b      	ldr	r1, [pc, #300]	; (800a790 <mem_malloc+0x1d8>)
 800a662:	484c      	ldr	r0, [pc, #304]	; (800a794 <mem_malloc+0x1dc>)
 800a664:	f009 fcee 	bl	8014044 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a668:	8a7b      	ldrh	r3, [r7, #18]
 800a66a:	4618      	mov	r0, r3
 800a66c:	f7ff fd00 	bl	800a070 <ptr_to_mem>
 800a670:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	2200      	movs	r2, #0
 800a676:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	881a      	ldrh	r2, [r3, #0]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	8bfa      	ldrh	r2, [r7, #30]
 800a684:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a686:	697b      	ldr	r3, [r7, #20]
 800a688:	8a7a      	ldrh	r2, [r7, #18]
 800a68a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a68c:	697b      	ldr	r3, [r7, #20]
 800a68e:	2201      	movs	r2, #1
 800a690:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	881b      	ldrh	r3, [r3, #0]
 800a696:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a69a:	d00b      	beq.n	800a6b4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	881b      	ldrh	r3, [r3, #0]
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff fce5 	bl	800a070 <ptr_to_mem>
 800a6a6:	4602      	mov	r2, r0
 800a6a8:	8a7b      	ldrh	r3, [r7, #18]
 800a6aa:	8053      	strh	r3, [r2, #2]
 800a6ac:	e002      	b.n	800a6b4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a6ae:	697b      	ldr	r3, [r7, #20]
 800a6b0:	2201      	movs	r2, #1
 800a6b2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a6b4:	4b34      	ldr	r3, [pc, #208]	; (800a788 <mem_malloc+0x1d0>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	697a      	ldr	r2, [r7, #20]
 800a6ba:	429a      	cmp	r2, r3
 800a6bc:	d127      	bne.n	800a70e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a6be:	4b32      	ldr	r3, [pc, #200]	; (800a788 <mem_malloc+0x1d0>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a6c4:	e005      	b.n	800a6d2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a6c6:	69bb      	ldr	r3, [r7, #24]
 800a6c8:	881b      	ldrh	r3, [r3, #0]
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f7ff fcd0 	bl	800a070 <ptr_to_mem>
 800a6d0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a6d2:	69bb      	ldr	r3, [r7, #24]
 800a6d4:	791b      	ldrb	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d004      	beq.n	800a6e4 <mem_malloc+0x12c>
 800a6da:	4b2f      	ldr	r3, [pc, #188]	; (800a798 <mem_malloc+0x1e0>)
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69ba      	ldr	r2, [r7, #24]
 800a6e0:	429a      	cmp	r2, r3
 800a6e2:	d1f0      	bne.n	800a6c6 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a6e4:	4a28      	ldr	r2, [pc, #160]	; (800a788 <mem_malloc+0x1d0>)
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a6ea:	4b27      	ldr	r3, [pc, #156]	; (800a788 <mem_malloc+0x1d0>)
 800a6ec:	681a      	ldr	r2, [r3, #0]
 800a6ee:	4b2a      	ldr	r3, [pc, #168]	; (800a798 <mem_malloc+0x1e0>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	429a      	cmp	r2, r3
 800a6f4:	d00b      	beq.n	800a70e <mem_malloc+0x156>
 800a6f6:	4b24      	ldr	r3, [pc, #144]	; (800a788 <mem_malloc+0x1d0>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	791b      	ldrb	r3, [r3, #4]
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d006      	beq.n	800a70e <mem_malloc+0x156>
 800a700:	4b22      	ldr	r3, [pc, #136]	; (800a78c <mem_malloc+0x1d4>)
 800a702:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a706:	4925      	ldr	r1, [pc, #148]	; (800a79c <mem_malloc+0x1e4>)
 800a708:	4822      	ldr	r0, [pc, #136]	; (800a794 <mem_malloc+0x1dc>)
 800a70a:	f009 fc9b 	bl	8014044 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a70e:	8bba      	ldrh	r2, [r7, #28]
 800a710:	697b      	ldr	r3, [r7, #20]
 800a712:	4413      	add	r3, r2
 800a714:	3308      	adds	r3, #8
 800a716:	4a20      	ldr	r2, [pc, #128]	; (800a798 <mem_malloc+0x1e0>)
 800a718:	6812      	ldr	r2, [r2, #0]
 800a71a:	4293      	cmp	r3, r2
 800a71c:	d906      	bls.n	800a72c <mem_malloc+0x174>
 800a71e:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <mem_malloc+0x1d4>)
 800a720:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a724:	491e      	ldr	r1, [pc, #120]	; (800a7a0 <mem_malloc+0x1e8>)
 800a726:	481b      	ldr	r0, [pc, #108]	; (800a794 <mem_malloc+0x1dc>)
 800a728:	f009 fc8c 	bl	8014044 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	f003 0303 	and.w	r3, r3, #3
 800a732:	2b00      	cmp	r3, #0
 800a734:	d006      	beq.n	800a744 <mem_malloc+0x18c>
 800a736:	4b15      	ldr	r3, [pc, #84]	; (800a78c <mem_malloc+0x1d4>)
 800a738:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a73c:	4919      	ldr	r1, [pc, #100]	; (800a7a4 <mem_malloc+0x1ec>)
 800a73e:	4815      	ldr	r0, [pc, #84]	; (800a794 <mem_malloc+0x1dc>)
 800a740:	f009 fc80 	bl	8014044 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a744:	697b      	ldr	r3, [r7, #20]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d006      	beq.n	800a75c <mem_malloc+0x1a4>
 800a74e:	4b0f      	ldr	r3, [pc, #60]	; (800a78c <mem_malloc+0x1d4>)
 800a750:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a754:	4914      	ldr	r1, [pc, #80]	; (800a7a8 <mem_malloc+0x1f0>)
 800a756:	480f      	ldr	r0, [pc, #60]	; (800a794 <mem_malloc+0x1dc>)
 800a758:	f009 fc74 	bl	8014044 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	3308      	adds	r3, #8
 800a760:	e00e      	b.n	800a780 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a762:	8bfb      	ldrh	r3, [r7, #30]
 800a764:	4618      	mov	r0, r3
 800a766:	f7ff fc83 	bl	800a070 <ptr_to_mem>
 800a76a:	4603      	mov	r3, r0
 800a76c:	881b      	ldrh	r3, [r3, #0]
 800a76e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a770:	8bfa      	ldrh	r2, [r7, #30]
 800a772:	8bbb      	ldrh	r3, [r7, #28]
 800a774:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a778:	429a      	cmp	r2, r3
 800a77a:	f4ff af44 	bcc.w	800a606 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a77e:	2300      	movs	r3, #0
}
 800a780:	4618      	mov	r0, r3
 800a782:	3720      	adds	r7, #32
 800a784:	46bd      	mov	sp, r7
 800a786:	bd80      	pop	{r7, pc}
 800a788:	200000b4 	.word	0x200000b4
 800a78c:	080150e4 	.word	0x080150e4
 800a790:	0801528c 	.word	0x0801528c
 800a794:	0801512c 	.word	0x0801512c
 800a798:	200000b0 	.word	0x200000b0
 800a79c:	080152a0 	.word	0x080152a0
 800a7a0:	080152bc 	.word	0x080152bc
 800a7a4:	080152ec 	.word	0x080152ec
 800a7a8:	0801531c 	.word	0x0801531c

0800a7ac <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a7ac:	b480      	push	{r7}
 800a7ae:	b085      	sub	sp, #20
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	689b      	ldr	r3, [r3, #8]
 800a7b8:	2200      	movs	r2, #0
 800a7ba:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	685b      	ldr	r3, [r3, #4]
 800a7c0:	3303      	adds	r3, #3
 800a7c2:	f023 0303 	bic.w	r3, r3, #3
 800a7c6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	e011      	b.n	800a7f2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	689b      	ldr	r3, [r3, #8]
 800a7d2:	681a      	ldr	r2, [r3, #0]
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	881b      	ldrh	r3, [r3, #0]
 800a7e4:	461a      	mov	r2, r3
 800a7e6:	68bb      	ldr	r3, [r7, #8]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	3301      	adds	r3, #1
 800a7f0:	60fb      	str	r3, [r7, #12]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	885b      	ldrh	r3, [r3, #2]
 800a7f6:	461a      	mov	r2, r3
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	4293      	cmp	r3, r2
 800a7fc:	dbe7      	blt.n	800a7ce <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a7fe:	bf00      	nop
 800a800:	bf00      	nop
 800a802:	3714      	adds	r7, #20
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr

0800a80c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b082      	sub	sp, #8
 800a810:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a812:	2300      	movs	r3, #0
 800a814:	80fb      	strh	r3, [r7, #6]
 800a816:	e009      	b.n	800a82c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	4a08      	ldr	r2, [pc, #32]	; (800a83c <memp_init+0x30>)
 800a81c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a820:	4618      	mov	r0, r3
 800a822:	f7ff ffc3 	bl	800a7ac <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a826:	88fb      	ldrh	r3, [r7, #6]
 800a828:	3301      	adds	r3, #1
 800a82a:	80fb      	strh	r3, [r7, #6]
 800a82c:	88fb      	ldrh	r3, [r7, #6]
 800a82e:	2b08      	cmp	r3, #8
 800a830:	d9f2      	bls.n	800a818 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a832:	bf00      	nop
 800a834:	bf00      	nop
 800a836:	3708      	adds	r7, #8
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	08017b10 	.word	0x08017b10

0800a840 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a840:	b580      	push	{r7, lr}
 800a842:	b084      	sub	sp, #16
 800a844:	af00      	add	r7, sp, #0
 800a846:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d012      	beq.n	800a87c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	689b      	ldr	r3, [r3, #8]
 800a85a:	68fa      	ldr	r2, [r7, #12]
 800a85c:	6812      	ldr	r2, [r2, #0]
 800a85e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f003 0303 	and.w	r3, r3, #3
 800a866:	2b00      	cmp	r3, #0
 800a868:	d006      	beq.n	800a878 <do_memp_malloc_pool+0x38>
 800a86a:	4b07      	ldr	r3, [pc, #28]	; (800a888 <do_memp_malloc_pool+0x48>)
 800a86c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a870:	4906      	ldr	r1, [pc, #24]	; (800a88c <do_memp_malloc_pool+0x4c>)
 800a872:	4807      	ldr	r0, [pc, #28]	; (800a890 <do_memp_malloc_pool+0x50>)
 800a874:	f009 fbe6 	bl	8014044 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	e000      	b.n	800a87e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a87c:	2300      	movs	r3, #0
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3710      	adds	r7, #16
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	08015340 	.word	0x08015340
 800a88c:	08015370 	.word	0x08015370
 800a890:	08015394 	.word	0x08015394

0800a894 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a894:	b580      	push	{r7, lr}
 800a896:	b084      	sub	sp, #16
 800a898:	af00      	add	r7, sp, #0
 800a89a:	4603      	mov	r3, r0
 800a89c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a89e:	79fb      	ldrb	r3, [r7, #7]
 800a8a0:	2b08      	cmp	r3, #8
 800a8a2:	d908      	bls.n	800a8b6 <memp_malloc+0x22>
 800a8a4:	4b0a      	ldr	r3, [pc, #40]	; (800a8d0 <memp_malloc+0x3c>)
 800a8a6:	f240 1257 	movw	r2, #343	; 0x157
 800a8aa:	490a      	ldr	r1, [pc, #40]	; (800a8d4 <memp_malloc+0x40>)
 800a8ac:	480a      	ldr	r0, [pc, #40]	; (800a8d8 <memp_malloc+0x44>)
 800a8ae:	f009 fbc9 	bl	8014044 <iprintf>
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	e008      	b.n	800a8c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	4a08      	ldr	r2, [pc, #32]	; (800a8dc <memp_malloc+0x48>)
 800a8ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f7ff ffbe 	bl	800a840 <do_memp_malloc_pool>
 800a8c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
}
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	3710      	adds	r7, #16
 800a8cc:	46bd      	mov	sp, r7
 800a8ce:	bd80      	pop	{r7, pc}
 800a8d0:	08015340 	.word	0x08015340
 800a8d4:	080153d0 	.word	0x080153d0
 800a8d8:	08015394 	.word	0x08015394
 800a8dc:	08017b10 	.word	0x08017b10

0800a8e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b084      	sub	sp, #16
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
 800a8e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	f003 0303 	and.w	r3, r3, #3
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d006      	beq.n	800a902 <do_memp_free_pool+0x22>
 800a8f4:	4b0a      	ldr	r3, [pc, #40]	; (800a920 <do_memp_free_pool+0x40>)
 800a8f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a8fa:	490a      	ldr	r1, [pc, #40]	; (800a924 <do_memp_free_pool+0x44>)
 800a8fc:	480a      	ldr	r0, [pc, #40]	; (800a928 <do_memp_free_pool+0x48>)
 800a8fe:	f009 fba1 	bl	8014044 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	689b      	ldr	r3, [r3, #8]
 800a90a:	681a      	ldr	r2, [r3, #0]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	689b      	ldr	r3, [r3, #8]
 800a914:	68fa      	ldr	r2, [r7, #12]
 800a916:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a918:	bf00      	nop
 800a91a:	3710      	adds	r7, #16
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	08015340 	.word	0x08015340
 800a924:	080153f0 	.word	0x080153f0
 800a928:	08015394 	.word	0x08015394

0800a92c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a92c:	b580      	push	{r7, lr}
 800a92e:	b082      	sub	sp, #8
 800a930:	af00      	add	r7, sp, #0
 800a932:	4603      	mov	r3, r0
 800a934:	6039      	str	r1, [r7, #0]
 800a936:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a938:	79fb      	ldrb	r3, [r7, #7]
 800a93a:	2b08      	cmp	r3, #8
 800a93c:	d907      	bls.n	800a94e <memp_free+0x22>
 800a93e:	4b0c      	ldr	r3, [pc, #48]	; (800a970 <memp_free+0x44>)
 800a940:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a944:	490b      	ldr	r1, [pc, #44]	; (800a974 <memp_free+0x48>)
 800a946:	480c      	ldr	r0, [pc, #48]	; (800a978 <memp_free+0x4c>)
 800a948:	f009 fb7c 	bl	8014044 <iprintf>
 800a94c:	e00c      	b.n	800a968 <memp_free+0x3c>

  if (mem == NULL) {
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d008      	beq.n	800a966 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	4a09      	ldr	r2, [pc, #36]	; (800a97c <memp_free+0x50>)
 800a958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a95c:	6839      	ldr	r1, [r7, #0]
 800a95e:	4618      	mov	r0, r3
 800a960:	f7ff ffbe 	bl	800a8e0 <do_memp_free_pool>
 800a964:	e000      	b.n	800a968 <memp_free+0x3c>
    return;
 800a966:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a968:	3708      	adds	r7, #8
 800a96a:	46bd      	mov	sp, r7
 800a96c:	bd80      	pop	{r7, pc}
 800a96e:	bf00      	nop
 800a970:	08015340 	.word	0x08015340
 800a974:	08015410 	.word	0x08015410
 800a978:	08015394 	.word	0x08015394
 800a97c:	08017b10 	.word	0x08017b10

0800a980 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a980:	b480      	push	{r7}
 800a982:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a984:	bf00      	nop
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
	...

0800a990 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b086      	sub	sp, #24
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
 800a99c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d108      	bne.n	800a9b6 <netif_add+0x26>
 800a9a4:	4b57      	ldr	r3, [pc, #348]	; (800ab04 <netif_add+0x174>)
 800a9a6:	f240 1227 	movw	r2, #295	; 0x127
 800a9aa:	4957      	ldr	r1, [pc, #348]	; (800ab08 <netif_add+0x178>)
 800a9ac:	4857      	ldr	r0, [pc, #348]	; (800ab0c <netif_add+0x17c>)
 800a9ae:	f009 fb49 	bl	8014044 <iprintf>
 800a9b2:	2300      	movs	r3, #0
 800a9b4:	e0a2      	b.n	800aafc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a9b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d108      	bne.n	800a9ce <netif_add+0x3e>
 800a9bc:	4b51      	ldr	r3, [pc, #324]	; (800ab04 <netif_add+0x174>)
 800a9be:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a9c2:	4953      	ldr	r1, [pc, #332]	; (800ab10 <netif_add+0x180>)
 800a9c4:	4851      	ldr	r0, [pc, #324]	; (800ab0c <netif_add+0x17c>)
 800a9c6:	f009 fb3d 	bl	8014044 <iprintf>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e096      	b.n	800aafc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d101      	bne.n	800a9d8 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a9d4:	4b4f      	ldr	r3, [pc, #316]	; (800ab14 <netif_add+0x184>)
 800a9d6:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d101      	bne.n	800a9e2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a9de:	4b4d      	ldr	r3, [pc, #308]	; (800ab14 <netif_add+0x184>)
 800a9e0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d101      	bne.n	800a9ec <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a9e8:	4b4a      	ldr	r3, [pc, #296]	; (800ab14 <netif_add+0x184>)
 800a9ea:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	4a45      	ldr	r2, [pc, #276]	; (800ab18 <netif_add+0x188>)
 800aa02:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2200      	movs	r2, #0
 800aa16:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	6a3a      	ldr	r2, [r7, #32]
 800aa1c:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aa1e:	4b3f      	ldr	r3, [pc, #252]	; (800ab1c <netif_add+0x18c>)
 800aa20:	781a      	ldrb	r2, [r3, #0]
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aa2c:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	687a      	ldr	r2, [r7, #4]
 800aa32:	68b9      	ldr	r1, [r7, #8]
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 f913 	bl	800ac60 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aa3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	4798      	blx	r3
 800aa40:	4603      	mov	r3, r0
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d001      	beq.n	800aa4a <netif_add+0xba>
    return NULL;
 800aa46:	2300      	movs	r3, #0
 800aa48:	e058      	b.n	800aafc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aa50:	2bff      	cmp	r3, #255	; 0xff
 800aa52:	d103      	bne.n	800aa5c <netif_add+0xcc>
        netif->num = 0;
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	2200      	movs	r2, #0
 800aa58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aa60:	4b2f      	ldr	r3, [pc, #188]	; (800ab20 <netif_add+0x190>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	617b      	str	r3, [r7, #20]
 800aa66:	e02b      	b.n	800aac0 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800aa68:	697a      	ldr	r2, [r7, #20]
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	429a      	cmp	r2, r3
 800aa6e:	d106      	bne.n	800aa7e <netif_add+0xee>
 800aa70:	4b24      	ldr	r3, [pc, #144]	; (800ab04 <netif_add+0x174>)
 800aa72:	f240 128b 	movw	r2, #395	; 0x18b
 800aa76:	492b      	ldr	r1, [pc, #172]	; (800ab24 <netif_add+0x194>)
 800aa78:	4824      	ldr	r0, [pc, #144]	; (800ab0c <netif_add+0x17c>)
 800aa7a:	f009 fae3 	bl	8014044 <iprintf>
        num_netifs++;
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	3301      	adds	r3, #1
 800aa82:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800aa84:	693b      	ldr	r3, [r7, #16]
 800aa86:	2bff      	cmp	r3, #255	; 0xff
 800aa88:	dd06      	ble.n	800aa98 <netif_add+0x108>
 800aa8a:	4b1e      	ldr	r3, [pc, #120]	; (800ab04 <netif_add+0x174>)
 800aa8c:	f240 128d 	movw	r2, #397	; 0x18d
 800aa90:	4925      	ldr	r1, [pc, #148]	; (800ab28 <netif_add+0x198>)
 800aa92:	481e      	ldr	r0, [pc, #120]	; (800ab0c <netif_add+0x17c>)
 800aa94:	f009 fad6 	bl	8014044 <iprintf>
        if (netif2->num == netif->num) {
 800aa98:	697b      	ldr	r3, [r7, #20]
 800aa9a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d108      	bne.n	800aaba <netif_add+0x12a>
          netif->num++;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aaae:	3301      	adds	r3, #1
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800aab8:	e005      	b.n	800aac6 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	617b      	str	r3, [r7, #20]
 800aac0:	697b      	ldr	r3, [r7, #20]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d1d0      	bne.n	800aa68 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d1be      	bne.n	800aa4a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aad2:	2bfe      	cmp	r3, #254	; 0xfe
 800aad4:	d103      	bne.n	800aade <netif_add+0x14e>
    netif_num = 0;
 800aad6:	4b11      	ldr	r3, [pc, #68]	; (800ab1c <netif_add+0x18c>)
 800aad8:	2200      	movs	r2, #0
 800aada:	701a      	strb	r2, [r3, #0]
 800aadc:	e006      	b.n	800aaec <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aae4:	3301      	adds	r3, #1
 800aae6:	b2da      	uxtb	r2, r3
 800aae8:	4b0c      	ldr	r3, [pc, #48]	; (800ab1c <netif_add+0x18c>)
 800aaea:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800aaec:	4b0c      	ldr	r3, [pc, #48]	; (800ab20 <netif_add+0x190>)
 800aaee:	681a      	ldr	r2, [r3, #0]
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800aaf4:	4a0a      	ldr	r2, [pc, #40]	; (800ab20 <netif_add+0x190>)
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800aafa:	68fb      	ldr	r3, [r7, #12]
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3718      	adds	r7, #24
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}
 800ab04:	0801542c 	.word	0x0801542c
 800ab08:	080154c0 	.word	0x080154c0
 800ab0c:	0801547c 	.word	0x0801547c
 800ab10:	080154dc 	.word	0x080154dc
 800ab14:	08017b74 	.word	0x08017b74
 800ab18:	0800ae73 	.word	0x0800ae73
 800ab1c:	200000dc 	.word	0x200000dc
 800ab20:	200071f4 	.word	0x200071f4
 800ab24:	08015500 	.word	0x08015500
 800ab28:	08015514 	.word	0x08015514

0800ab2c <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800ab36:	6839      	ldr	r1, [r7, #0]
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f002 faef 	bl	800d11c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800ab3e:	6839      	ldr	r1, [r7, #0]
 800ab40:	6878      	ldr	r0, [r7, #4]
 800ab42:	f006 ff47 	bl	80119d4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800ab46:	bf00      	nop
 800ab48:	3708      	adds	r7, #8
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	bd80      	pop	{r7, pc}
	...

0800ab50 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	60f8      	str	r0, [r7, #12]
 800ab58:	60b9      	str	r1, [r7, #8]
 800ab5a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d106      	bne.n	800ab70 <netif_do_set_ipaddr+0x20>
 800ab62:	4b1d      	ldr	r3, [pc, #116]	; (800abd8 <netif_do_set_ipaddr+0x88>)
 800ab64:	f240 12cb 	movw	r2, #459	; 0x1cb
 800ab68:	491c      	ldr	r1, [pc, #112]	; (800abdc <netif_do_set_ipaddr+0x8c>)
 800ab6a:	481d      	ldr	r0, [pc, #116]	; (800abe0 <netif_do_set_ipaddr+0x90>)
 800ab6c:	f009 fa6a 	bl	8014044 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <netif_do_set_ipaddr+0x34>
 800ab76:	4b18      	ldr	r3, [pc, #96]	; (800abd8 <netif_do_set_ipaddr+0x88>)
 800ab78:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800ab7c:	4917      	ldr	r1, [pc, #92]	; (800abdc <netif_do_set_ipaddr+0x8c>)
 800ab7e:	4818      	ldr	r0, [pc, #96]	; (800abe0 <netif_do_set_ipaddr+0x90>)
 800ab80:	f009 fa60 	bl	8014044 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800ab84:	68bb      	ldr	r3, [r7, #8]
 800ab86:	681a      	ldr	r2, [r3, #0]
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	3304      	adds	r3, #4
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	429a      	cmp	r2, r3
 800ab90:	d01c      	beq.n	800abcc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800ab92:	68bb      	ldr	r3, [r7, #8]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800aba2:	f107 0314 	add.w	r3, r7, #20
 800aba6:	4619      	mov	r1, r3
 800aba8:	6878      	ldr	r0, [r7, #4]
 800abaa:	f7ff ffbf 	bl	800ab2c <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800abae:	68bb      	ldr	r3, [r7, #8]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d002      	beq.n	800abba <netif_do_set_ipaddr+0x6a>
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	e000      	b.n	800abbc <netif_do_set_ipaddr+0x6c>
 800abba:	2300      	movs	r3, #0
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800abc0:	2101      	movs	r1, #1
 800abc2:	68f8      	ldr	r0, [r7, #12]
 800abc4:	f000 f8d2 	bl	800ad6c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800abc8:	2301      	movs	r3, #1
 800abca:	e000      	b.n	800abce <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3718      	adds	r7, #24
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}
 800abd6:	bf00      	nop
 800abd8:	0801542c 	.word	0x0801542c
 800abdc:	08015544 	.word	0x08015544
 800abe0:	0801547c 	.word	0x0801547c

0800abe4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	681a      	ldr	r2, [r3, #0]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3308      	adds	r3, #8
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	429a      	cmp	r2, r3
 800abfc:	d00a      	beq.n	800ac14 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800abfe:	68bb      	ldr	r3, [r7, #8]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d002      	beq.n	800ac0a <netif_do_set_netmask+0x26>
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	e000      	b.n	800ac0c <netif_do_set_netmask+0x28>
 800ac0a:	2300      	movs	r3, #0
 800ac0c:	68fa      	ldr	r2, [r7, #12]
 800ac0e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800ac10:	2301      	movs	r3, #1
 800ac12:	e000      	b.n	800ac16 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr

0800ac22 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800ac22:	b480      	push	{r7}
 800ac24:	b085      	sub	sp, #20
 800ac26:	af00      	add	r7, sp, #0
 800ac28:	60f8      	str	r0, [r7, #12]
 800ac2a:	60b9      	str	r1, [r7, #8]
 800ac2c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	330c      	adds	r3, #12
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d00a      	beq.n	800ac52 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800ac3c:	68bb      	ldr	r3, [r7, #8]
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d002      	beq.n	800ac48 <netif_do_set_gw+0x26>
 800ac42:	68bb      	ldr	r3, [r7, #8]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	e000      	b.n	800ac4a <netif_do_set_gw+0x28>
 800ac48:	2300      	movs	r3, #0
 800ac4a:	68fa      	ldr	r2, [r7, #12]
 800ac4c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e000      	b.n	800ac54 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800ac52:	2300      	movs	r3, #0
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3714      	adds	r7, #20
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5e:	4770      	bx	lr

0800ac60 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b088      	sub	sp, #32
 800ac64:	af00      	add	r7, sp, #0
 800ac66:	60f8      	str	r0, [r7, #12]
 800ac68:	60b9      	str	r1, [r7, #8]
 800ac6a:	607a      	str	r2, [r7, #4]
 800ac6c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800ac6e:	2300      	movs	r3, #0
 800ac70:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800ac72:	2300      	movs	r3, #0
 800ac74:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800ac76:	68bb      	ldr	r3, [r7, #8]
 800ac78:	2b00      	cmp	r3, #0
 800ac7a:	d101      	bne.n	800ac80 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800ac7c:	4b1c      	ldr	r3, [pc, #112]	; (800acf0 <netif_set_addr+0x90>)
 800ac7e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d101      	bne.n	800ac8a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800ac86:	4b1a      	ldr	r3, [pc, #104]	; (800acf0 <netif_set_addr+0x90>)
 800ac88:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d101      	bne.n	800ac94 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800ac90:	4b17      	ldr	r3, [pc, #92]	; (800acf0 <netif_set_addr+0x90>)
 800ac92:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d003      	beq.n	800aca2 <netif_set_addr+0x42>
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d101      	bne.n	800aca6 <netif_set_addr+0x46>
 800aca2:	2301      	movs	r3, #1
 800aca4:	e000      	b.n	800aca8 <netif_set_addr+0x48>
 800aca6:	2300      	movs	r3, #0
 800aca8:	617b      	str	r3, [r7, #20]
  if (remove) {
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d006      	beq.n	800acbe <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800acb0:	f107 0310 	add.w	r3, r7, #16
 800acb4:	461a      	mov	r2, r3
 800acb6:	68b9      	ldr	r1, [r7, #8]
 800acb8:	68f8      	ldr	r0, [r7, #12]
 800acba:	f7ff ff49 	bl	800ab50 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800acbe:	69fa      	ldr	r2, [r7, #28]
 800acc0:	6879      	ldr	r1, [r7, #4]
 800acc2:	68f8      	ldr	r0, [r7, #12]
 800acc4:	f7ff ff8e 	bl	800abe4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800acc8:	69ba      	ldr	r2, [r7, #24]
 800acca:	6839      	ldr	r1, [r7, #0]
 800accc:	68f8      	ldr	r0, [r7, #12]
 800acce:	f7ff ffa8 	bl	800ac22 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d106      	bne.n	800ace6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800acd8:	f107 0310 	add.w	r3, r7, #16
 800acdc:	461a      	mov	r2, r3
 800acde:	68b9      	ldr	r1, [r7, #8]
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f7ff ff35 	bl	800ab50 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800ace6:	bf00      	nop
 800ace8:	3720      	adds	r7, #32
 800acea:	46bd      	mov	sp, r7
 800acec:	bd80      	pop	{r7, pc}
 800acee:	bf00      	nop
 800acf0:	08017b74 	.word	0x08017b74

0800acf4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b083      	sub	sp, #12
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800acfc:	4a04      	ldr	r2, [pc, #16]	; (800ad10 <netif_set_default+0x1c>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800ad02:	bf00      	nop
 800ad04:	370c      	adds	r7, #12
 800ad06:	46bd      	mov	sp, r7
 800ad08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0c:	4770      	bx	lr
 800ad0e:	bf00      	nop
 800ad10:	200071f8 	.word	0x200071f8

0800ad14 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b082      	sub	sp, #8
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d107      	bne.n	800ad32 <netif_set_up+0x1e>
 800ad22:	4b0f      	ldr	r3, [pc, #60]	; (800ad60 <netif_set_up+0x4c>)
 800ad24:	f44f 7254 	mov.w	r2, #848	; 0x350
 800ad28:	490e      	ldr	r1, [pc, #56]	; (800ad64 <netif_set_up+0x50>)
 800ad2a:	480f      	ldr	r0, [pc, #60]	; (800ad68 <netif_set_up+0x54>)
 800ad2c:	f009 f98a 	bl	8014044 <iprintf>
 800ad30:	e013      	b.n	800ad5a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d10c      	bne.n	800ad5a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad46:	f043 0301 	orr.w	r3, r3, #1
 800ad4a:	b2da      	uxtb	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ad52:	2103      	movs	r1, #3
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f809 	bl	800ad6c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ad5a:	3708      	adds	r7, #8
 800ad5c:	46bd      	mov	sp, r7
 800ad5e:	bd80      	pop	{r7, pc}
 800ad60:	0801542c 	.word	0x0801542c
 800ad64:	080155b4 	.word	0x080155b4
 800ad68:	0801547c 	.word	0x0801547c

0800ad6c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b082      	sub	sp, #8
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	6078      	str	r0, [r7, #4]
 800ad74:	460b      	mov	r3, r1
 800ad76:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d106      	bne.n	800ad8c <netif_issue_reports+0x20>
 800ad7e:	4b18      	ldr	r3, [pc, #96]	; (800ade0 <netif_issue_reports+0x74>)
 800ad80:	f240 326d 	movw	r2, #877	; 0x36d
 800ad84:	4917      	ldr	r1, [pc, #92]	; (800ade4 <netif_issue_reports+0x78>)
 800ad86:	4818      	ldr	r0, [pc, #96]	; (800ade8 <netif_issue_reports+0x7c>)
 800ad88:	f009 f95c 	bl	8014044 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ad92:	f003 0304 	and.w	r3, r3, #4
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d01e      	beq.n	800add8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ada0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d017      	beq.n	800add8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ada8:	78fb      	ldrb	r3, [r7, #3]
 800adaa:	f003 0301 	and.w	r3, r3, #1
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d013      	beq.n	800adda <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	3304      	adds	r3, #4
 800adb6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d00e      	beq.n	800adda <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800adc2:	f003 0308 	and.w	r3, r3, #8
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d007      	beq.n	800adda <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	3304      	adds	r3, #4
 800adce:	4619      	mov	r1, r3
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f007 fd69 	bl	80128a8 <etharp_request>
 800add6:	e000      	b.n	800adda <netif_issue_reports+0x6e>
    return;
 800add8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800adda:	3708      	adds	r7, #8
 800addc:	46bd      	mov	sp, r7
 800adde:	bd80      	pop	{r7, pc}
 800ade0:	0801542c 	.word	0x0801542c
 800ade4:	080155d0 	.word	0x080155d0
 800ade8:	0801547c 	.word	0x0801547c

0800adec <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800adec:	b580      	push	{r7, lr}
 800adee:	b082      	sub	sp, #8
 800adf0:	af00      	add	r7, sp, #0
 800adf2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d107      	bne.n	800ae0a <netif_set_down+0x1e>
 800adfa:	4b12      	ldr	r3, [pc, #72]	; (800ae44 <netif_set_down+0x58>)
 800adfc:	f240 329b 	movw	r2, #923	; 0x39b
 800ae00:	4911      	ldr	r1, [pc, #68]	; (800ae48 <netif_set_down+0x5c>)
 800ae02:	4812      	ldr	r0, [pc, #72]	; (800ae4c <netif_set_down+0x60>)
 800ae04:	f009 f91e 	bl	8014044 <iprintf>
 800ae08:	e019      	b.n	800ae3e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae10:	f003 0301 	and.w	r3, r3, #1
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d012      	beq.n	800ae3e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae1e:	f023 0301 	bic.w	r3, r3, #1
 800ae22:	b2da      	uxtb	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ae30:	f003 0308 	and.w	r3, r3, #8
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d002      	beq.n	800ae3e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ae38:	6878      	ldr	r0, [r7, #4]
 800ae3a:	f007 f8f3 	bl	8012024 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ae3e:	3708      	adds	r7, #8
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}
 800ae44:	0801542c 	.word	0x0801542c
 800ae48:	080155f4 	.word	0x080155f4
 800ae4c:	0801547c 	.word	0x0801547c

0800ae50 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ae50:	b480      	push	{r7}
 800ae52:	b083      	sub	sp, #12
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	6078      	str	r0, [r7, #4]
 800ae58:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d002      	beq.n	800ae66 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	683a      	ldr	r2, [r7, #0]
 800ae64:	61da      	str	r2, [r3, #28]
  }
}
 800ae66:	bf00      	nop
 800ae68:	370c      	adds	r7, #12
 800ae6a:	46bd      	mov	sp, r7
 800ae6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae70:	4770      	bx	lr

0800ae72 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ae72:	b480      	push	{r7}
 800ae74:	b085      	sub	sp, #20
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	60f8      	str	r0, [r7, #12]
 800ae7a:	60b9      	str	r1, [r7, #8]
 800ae7c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ae7e:	f06f 030b 	mvn.w	r3, #11
}
 800ae82:	4618      	mov	r0, r3
 800ae84:	3714      	adds	r7, #20
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
	...

0800ae90 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b085      	sub	sp, #20
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	4603      	mov	r3, r0
 800ae98:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ae9a:	79fb      	ldrb	r3, [r7, #7]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d013      	beq.n	800aec8 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800aea0:	4b0d      	ldr	r3, [pc, #52]	; (800aed8 <netif_get_by_index+0x48>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	60fb      	str	r3, [r7, #12]
 800aea6:	e00c      	b.n	800aec2 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800aeae:	3301      	adds	r3, #1
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	79fa      	ldrb	r2, [r7, #7]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d101      	bne.n	800aebc <netif_get_by_index+0x2c>
        return netif; /* found! */
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	e006      	b.n	800aeca <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	681b      	ldr	r3, [r3, #0]
 800aec0:	60fb      	str	r3, [r7, #12]
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d1ef      	bne.n	800aea8 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800aec8:	2300      	movs	r3, #0
}
 800aeca:	4618      	mov	r0, r3
 800aecc:	3714      	adds	r7, #20
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	200071f4 	.word	0x200071f4

0800aedc <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b082      	sub	sp, #8
 800aee0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aee2:	4b0c      	ldr	r3, [pc, #48]	; (800af14 <pbuf_free_ooseq+0x38>)
 800aee4:	2200      	movs	r2, #0
 800aee6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aee8:	4b0b      	ldr	r3, [pc, #44]	; (800af18 <pbuf_free_ooseq+0x3c>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	607b      	str	r3, [r7, #4]
 800aeee:	e00a      	b.n	800af06 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d003      	beq.n	800af00 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f002 f94d 	bl	800d198 <tcp_free_ooseq>
      return;
 800aefe:	e005      	b.n	800af0c <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	68db      	ldr	r3, [r3, #12]
 800af04:	607b      	str	r3, [r7, #4]
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d1f1      	bne.n	800aef0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800af0c:	3708      	adds	r7, #8
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200071fc 	.word	0x200071fc
 800af18:	20007204 	.word	0x20007204

0800af1c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800af1c:	b480      	push	{r7}
 800af1e:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800af20:	4b03      	ldr	r3, [pc, #12]	; (800af30 <pbuf_pool_is_empty+0x14>)
 800af22:	2201      	movs	r2, #1
 800af24:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800af26:	bf00      	nop
 800af28:	46bd      	mov	sp, r7
 800af2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af2e:	4770      	bx	lr
 800af30:	200071fc 	.word	0x200071fc

0800af34 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800af34:	b480      	push	{r7}
 800af36:	b085      	sub	sp, #20
 800af38:	af00      	add	r7, sp, #0
 800af3a:	60f8      	str	r0, [r7, #12]
 800af3c:	60b9      	str	r1, [r7, #8]
 800af3e:	4611      	mov	r1, r2
 800af40:	461a      	mov	r2, r3
 800af42:	460b      	mov	r3, r1
 800af44:	80fb      	strh	r3, [r7, #6]
 800af46:	4613      	mov	r3, r2
 800af48:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800af4a:	68fb      	ldr	r3, [r7, #12]
 800af4c:	2200      	movs	r2, #0
 800af4e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	68ba      	ldr	r2, [r7, #8]
 800af54:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	88fa      	ldrh	r2, [r7, #6]
 800af5a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	88ba      	ldrh	r2, [r7, #4]
 800af60:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800af62:	8b3b      	ldrh	r3, [r7, #24]
 800af64:	b2da      	uxtb	r2, r3
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	7f3a      	ldrb	r2, [r7, #28]
 800af6e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2201      	movs	r2, #1
 800af74:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2200      	movs	r2, #0
 800af7a:	73da      	strb	r2, [r3, #15]
}
 800af7c:	bf00      	nop
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b08c      	sub	sp, #48	; 0x30
 800af8c:	af02      	add	r7, sp, #8
 800af8e:	4603      	mov	r3, r0
 800af90:	71fb      	strb	r3, [r7, #7]
 800af92:	460b      	mov	r3, r1
 800af94:	80bb      	strh	r3, [r7, #4]
 800af96:	4613      	mov	r3, r2
 800af98:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800af9a:	79fb      	ldrb	r3, [r7, #7]
 800af9c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800af9e:	887b      	ldrh	r3, [r7, #2]
 800afa0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800afa4:	d07f      	beq.n	800b0a6 <pbuf_alloc+0x11e>
 800afa6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800afaa:	f300 80c8 	bgt.w	800b13e <pbuf_alloc+0x1b6>
 800afae:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800afb2:	d010      	beq.n	800afd6 <pbuf_alloc+0x4e>
 800afb4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800afb8:	f300 80c1 	bgt.w	800b13e <pbuf_alloc+0x1b6>
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d002      	beq.n	800afc6 <pbuf_alloc+0x3e>
 800afc0:	2b41      	cmp	r3, #65	; 0x41
 800afc2:	f040 80bc 	bne.w	800b13e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800afc6:	887a      	ldrh	r2, [r7, #2]
 800afc8:	88bb      	ldrh	r3, [r7, #4]
 800afca:	4619      	mov	r1, r3
 800afcc:	2000      	movs	r0, #0
 800afce:	f000 f8d1 	bl	800b174 <pbuf_alloc_reference>
 800afd2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800afd4:	e0bd      	b.n	800b152 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800afda:	2300      	movs	r3, #0
 800afdc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800afde:	88bb      	ldrh	r3, [r7, #4]
 800afe0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800afe2:	2008      	movs	r0, #8
 800afe4:	f7ff fc56 	bl	800a894 <memp_malloc>
 800afe8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d109      	bne.n	800b004 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800aff0:	f7ff ff94 	bl	800af1c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800aff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d002      	beq.n	800b000 <pbuf_alloc+0x78>
            pbuf_free(p);
 800affa:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800affc:	f000 faa8 	bl	800b550 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b000:	2300      	movs	r3, #0
 800b002:	e0a7      	b.n	800b154 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b004:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b006:	3303      	adds	r3, #3
 800b008:	b29b      	uxth	r3, r3
 800b00a:	f023 0303 	bic.w	r3, r3, #3
 800b00e:	b29b      	uxth	r3, r3
 800b010:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b014:	b29b      	uxth	r3, r3
 800b016:	8b7a      	ldrh	r2, [r7, #26]
 800b018:	4293      	cmp	r3, r2
 800b01a:	bf28      	it	cs
 800b01c:	4613      	movcs	r3, r2
 800b01e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b020:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b022:	3310      	adds	r3, #16
 800b024:	693a      	ldr	r2, [r7, #16]
 800b026:	4413      	add	r3, r2
 800b028:	3303      	adds	r3, #3
 800b02a:	f023 0303 	bic.w	r3, r3, #3
 800b02e:	4618      	mov	r0, r3
 800b030:	89f9      	ldrh	r1, [r7, #14]
 800b032:	8b7a      	ldrh	r2, [r7, #26]
 800b034:	2300      	movs	r3, #0
 800b036:	9301      	str	r3, [sp, #4]
 800b038:	887b      	ldrh	r3, [r7, #2]
 800b03a:	9300      	str	r3, [sp, #0]
 800b03c:	460b      	mov	r3, r1
 800b03e:	4601      	mov	r1, r0
 800b040:	6938      	ldr	r0, [r7, #16]
 800b042:	f7ff ff77 	bl	800af34 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b046:	693b      	ldr	r3, [r7, #16]
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	f003 0303 	and.w	r3, r3, #3
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d006      	beq.n	800b060 <pbuf_alloc+0xd8>
 800b052:	4b42      	ldr	r3, [pc, #264]	; (800b15c <pbuf_alloc+0x1d4>)
 800b054:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b058:	4941      	ldr	r1, [pc, #260]	; (800b160 <pbuf_alloc+0x1d8>)
 800b05a:	4842      	ldr	r0, [pc, #264]	; (800b164 <pbuf_alloc+0x1dc>)
 800b05c:	f008 fff2 	bl	8014044 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b060:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b062:	3303      	adds	r3, #3
 800b064:	f023 0303 	bic.w	r3, r3, #3
 800b068:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b06c:	d106      	bne.n	800b07c <pbuf_alloc+0xf4>
 800b06e:	4b3b      	ldr	r3, [pc, #236]	; (800b15c <pbuf_alloc+0x1d4>)
 800b070:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b074:	493c      	ldr	r1, [pc, #240]	; (800b168 <pbuf_alloc+0x1e0>)
 800b076:	483b      	ldr	r0, [pc, #236]	; (800b164 <pbuf_alloc+0x1dc>)
 800b078:	f008 ffe4 	bl	8014044 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d102      	bne.n	800b088 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	627b      	str	r3, [r7, #36]	; 0x24
 800b086:	e002      	b.n	800b08e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b088:	69fb      	ldr	r3, [r7, #28]
 800b08a:	693a      	ldr	r2, [r7, #16]
 800b08c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b08e:	693b      	ldr	r3, [r7, #16]
 800b090:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b092:	8b7a      	ldrh	r2, [r7, #26]
 800b094:	89fb      	ldrh	r3, [r7, #14]
 800b096:	1ad3      	subs	r3, r2, r3
 800b098:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b09a:	2300      	movs	r3, #0
 800b09c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b09e:	8b7b      	ldrh	r3, [r7, #26]
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d19e      	bne.n	800afe2 <pbuf_alloc+0x5a>
      break;
 800b0a4:	e055      	b.n	800b152 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b0a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0a8:	3303      	adds	r3, #3
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	f023 0303 	bic.w	r3, r3, #3
 800b0b0:	b29a      	uxth	r2, r3
 800b0b2:	88bb      	ldrh	r3, [r7, #4]
 800b0b4:	3303      	adds	r3, #3
 800b0b6:	b29b      	uxth	r3, r3
 800b0b8:	f023 0303 	bic.w	r3, r3, #3
 800b0bc:	b29b      	uxth	r3, r3
 800b0be:	4413      	add	r3, r2
 800b0c0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b0c2:	8b3b      	ldrh	r3, [r7, #24]
 800b0c4:	3310      	adds	r3, #16
 800b0c6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0c8:	8b3a      	ldrh	r2, [r7, #24]
 800b0ca:	88bb      	ldrh	r3, [r7, #4]
 800b0cc:	3303      	adds	r3, #3
 800b0ce:	f023 0303 	bic.w	r3, r3, #3
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d306      	bcc.n	800b0e4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b0d6:	8afa      	ldrh	r2, [r7, #22]
 800b0d8:	88bb      	ldrh	r3, [r7, #4]
 800b0da:	3303      	adds	r3, #3
 800b0dc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d201      	bcs.n	800b0e8 <pbuf_alloc+0x160>
        return NULL;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	e035      	b.n	800b154 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b0e8:	8afb      	ldrh	r3, [r7, #22]
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	f7ff fa64 	bl	800a5b8 <mem_malloc>
 800b0f0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b0f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	d101      	bne.n	800b0fc <pbuf_alloc+0x174>
        return NULL;
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	e02b      	b.n	800b154 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b0fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b0fe:	3310      	adds	r3, #16
 800b100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b102:	4413      	add	r3, r2
 800b104:	3303      	adds	r3, #3
 800b106:	f023 0303 	bic.w	r3, r3, #3
 800b10a:	4618      	mov	r0, r3
 800b10c:	88b9      	ldrh	r1, [r7, #4]
 800b10e:	88ba      	ldrh	r2, [r7, #4]
 800b110:	2300      	movs	r3, #0
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	887b      	ldrh	r3, [r7, #2]
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	460b      	mov	r3, r1
 800b11a:	4601      	mov	r1, r0
 800b11c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b11e:	f7ff ff09 	bl	800af34 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	f003 0303 	and.w	r3, r3, #3
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d010      	beq.n	800b150 <pbuf_alloc+0x1c8>
 800b12e:	4b0b      	ldr	r3, [pc, #44]	; (800b15c <pbuf_alloc+0x1d4>)
 800b130:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b134:	490d      	ldr	r1, [pc, #52]	; (800b16c <pbuf_alloc+0x1e4>)
 800b136:	480b      	ldr	r0, [pc, #44]	; (800b164 <pbuf_alloc+0x1dc>)
 800b138:	f008 ff84 	bl	8014044 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b13c:	e008      	b.n	800b150 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b13e:	4b07      	ldr	r3, [pc, #28]	; (800b15c <pbuf_alloc+0x1d4>)
 800b140:	f240 1227 	movw	r2, #295	; 0x127
 800b144:	490a      	ldr	r1, [pc, #40]	; (800b170 <pbuf_alloc+0x1e8>)
 800b146:	4807      	ldr	r0, [pc, #28]	; (800b164 <pbuf_alloc+0x1dc>)
 800b148:	f008 ff7c 	bl	8014044 <iprintf>
      return NULL;
 800b14c:	2300      	movs	r3, #0
 800b14e:	e001      	b.n	800b154 <pbuf_alloc+0x1cc>
      break;
 800b150:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b154:	4618      	mov	r0, r3
 800b156:	3728      	adds	r7, #40	; 0x28
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	0801565c 	.word	0x0801565c
 800b160:	0801568c 	.word	0x0801568c
 800b164:	080156bc 	.word	0x080156bc
 800b168:	080156e4 	.word	0x080156e4
 800b16c:	08015718 	.word	0x08015718
 800b170:	08015744 	.word	0x08015744

0800b174 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b174:	b580      	push	{r7, lr}
 800b176:	b086      	sub	sp, #24
 800b178:	af02      	add	r7, sp, #8
 800b17a:	6078      	str	r0, [r7, #4]
 800b17c:	460b      	mov	r3, r1
 800b17e:	807b      	strh	r3, [r7, #2]
 800b180:	4613      	mov	r3, r2
 800b182:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b184:	883b      	ldrh	r3, [r7, #0]
 800b186:	2b41      	cmp	r3, #65	; 0x41
 800b188:	d009      	beq.n	800b19e <pbuf_alloc_reference+0x2a>
 800b18a:	883b      	ldrh	r3, [r7, #0]
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d006      	beq.n	800b19e <pbuf_alloc_reference+0x2a>
 800b190:	4b0f      	ldr	r3, [pc, #60]	; (800b1d0 <pbuf_alloc_reference+0x5c>)
 800b192:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b196:	490f      	ldr	r1, [pc, #60]	; (800b1d4 <pbuf_alloc_reference+0x60>)
 800b198:	480f      	ldr	r0, [pc, #60]	; (800b1d8 <pbuf_alloc_reference+0x64>)
 800b19a:	f008 ff53 	bl	8014044 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b19e:	2007      	movs	r0, #7
 800b1a0:	f7ff fb78 	bl	800a894 <memp_malloc>
 800b1a4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	2b00      	cmp	r3, #0
 800b1aa:	d101      	bne.n	800b1b0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	e00b      	b.n	800b1c8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b1b0:	8879      	ldrh	r1, [r7, #2]
 800b1b2:	887a      	ldrh	r2, [r7, #2]
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	9301      	str	r3, [sp, #4]
 800b1b8:	883b      	ldrh	r3, [r7, #0]
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	460b      	mov	r3, r1
 800b1be:	6879      	ldr	r1, [r7, #4]
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff feb7 	bl	800af34 <pbuf_init_alloced_pbuf>
  return p;
 800b1c6:	68fb      	ldr	r3, [r7, #12]
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3710      	adds	r7, #16
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	bd80      	pop	{r7, pc}
 800b1d0:	0801565c 	.word	0x0801565c
 800b1d4:	08015760 	.word	0x08015760
 800b1d8:	080156bc 	.word	0x080156bc

0800b1dc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b088      	sub	sp, #32
 800b1e0:	af02      	add	r7, sp, #8
 800b1e2:	607b      	str	r3, [r7, #4]
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	73fb      	strb	r3, [r7, #15]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	81bb      	strh	r3, [r7, #12]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
 800b1f2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b1f4:	8a7b      	ldrh	r3, [r7, #18]
 800b1f6:	3303      	adds	r3, #3
 800b1f8:	f023 0203 	bic.w	r2, r3, #3
 800b1fc:	89bb      	ldrh	r3, [r7, #12]
 800b1fe:	441a      	add	r2, r3
 800b200:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b202:	429a      	cmp	r2, r3
 800b204:	d901      	bls.n	800b20a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b206:	2300      	movs	r3, #0
 800b208:	e018      	b.n	800b23c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b20a:	6a3b      	ldr	r3, [r7, #32]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b210:	8a7b      	ldrh	r3, [r7, #18]
 800b212:	3303      	adds	r3, #3
 800b214:	f023 0303 	bic.w	r3, r3, #3
 800b218:	6a3a      	ldr	r2, [r7, #32]
 800b21a:	4413      	add	r3, r2
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	e001      	b.n	800b224 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b220:	2300      	movs	r3, #0
 800b222:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b224:	6878      	ldr	r0, [r7, #4]
 800b226:	89b9      	ldrh	r1, [r7, #12]
 800b228:	89ba      	ldrh	r2, [r7, #12]
 800b22a:	2302      	movs	r3, #2
 800b22c:	9301      	str	r3, [sp, #4]
 800b22e:	897b      	ldrh	r3, [r7, #10]
 800b230:	9300      	str	r3, [sp, #0]
 800b232:	460b      	mov	r3, r1
 800b234:	6979      	ldr	r1, [r7, #20]
 800b236:	f7ff fe7d 	bl	800af34 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b23a:	687b      	ldr	r3, [r7, #4]
}
 800b23c:	4618      	mov	r0, r3
 800b23e:	3718      	adds	r7, #24
 800b240:	46bd      	mov	sp, r7
 800b242:	bd80      	pop	{r7, pc}

0800b244 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b244:	b580      	push	{r7, lr}
 800b246:	b084      	sub	sp, #16
 800b248:	af00      	add	r7, sp, #0
 800b24a:	6078      	str	r0, [r7, #4]
 800b24c:	460b      	mov	r3, r1
 800b24e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2b00      	cmp	r3, #0
 800b254:	d106      	bne.n	800b264 <pbuf_realloc+0x20>
 800b256:	4b3a      	ldr	r3, [pc, #232]	; (800b340 <pbuf_realloc+0xfc>)
 800b258:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b25c:	4939      	ldr	r1, [pc, #228]	; (800b344 <pbuf_realloc+0x100>)
 800b25e:	483a      	ldr	r0, [pc, #232]	; (800b348 <pbuf_realloc+0x104>)
 800b260:	f008 fef0 	bl	8014044 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	891b      	ldrh	r3, [r3, #8]
 800b268:	887a      	ldrh	r2, [r7, #2]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d263      	bcs.n	800b336 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	891a      	ldrh	r2, [r3, #8]
 800b272:	887b      	ldrh	r3, [r7, #2]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b278:	887b      	ldrh	r3, [r7, #2]
 800b27a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b280:	e018      	b.n	800b2b4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	895b      	ldrh	r3, [r3, #10]
 800b286:	897a      	ldrh	r2, [r7, #10]
 800b288:	1ad3      	subs	r3, r2, r3
 800b28a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	891a      	ldrh	r2, [r3, #8]
 800b290:	893b      	ldrh	r3, [r7, #8]
 800b292:	1ad3      	subs	r3, r2, r3
 800b294:	b29a      	uxth	r2, r3
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d106      	bne.n	800b2b4 <pbuf_realloc+0x70>
 800b2a6:	4b26      	ldr	r3, [pc, #152]	; (800b340 <pbuf_realloc+0xfc>)
 800b2a8:	f240 12af 	movw	r2, #431	; 0x1af
 800b2ac:	4927      	ldr	r1, [pc, #156]	; (800b34c <pbuf_realloc+0x108>)
 800b2ae:	4826      	ldr	r0, [pc, #152]	; (800b348 <pbuf_realloc+0x104>)
 800b2b0:	f008 fec8 	bl	8014044 <iprintf>
  while (rem_len > q->len) {
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	895b      	ldrh	r3, [r3, #10]
 800b2b8:	897a      	ldrh	r2, [r7, #10]
 800b2ba:	429a      	cmp	r2, r3
 800b2bc:	d8e1      	bhi.n	800b282 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	7b1b      	ldrb	r3, [r3, #12]
 800b2c2:	f003 030f 	and.w	r3, r3, #15
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d121      	bne.n	800b30e <pbuf_realloc+0xca>
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	895b      	ldrh	r3, [r3, #10]
 800b2ce:	897a      	ldrh	r2, [r7, #10]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d01c      	beq.n	800b30e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	7b5b      	ldrb	r3, [r3, #13]
 800b2d8:	f003 0302 	and.w	r3, r3, #2
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d116      	bne.n	800b30e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	b29a      	uxth	r2, r3
 800b2ea:	897b      	ldrh	r3, [r7, #10]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	4619      	mov	r1, r3
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f7ff f864 	bl	800a3c0 <mem_trim>
 800b2f8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d106      	bne.n	800b30e <pbuf_realloc+0xca>
 800b300:	4b0f      	ldr	r3, [pc, #60]	; (800b340 <pbuf_realloc+0xfc>)
 800b302:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b306:	4912      	ldr	r1, [pc, #72]	; (800b350 <pbuf_realloc+0x10c>)
 800b308:	480f      	ldr	r0, [pc, #60]	; (800b348 <pbuf_realloc+0x104>)
 800b30a:	f008 fe9b 	bl	8014044 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	897a      	ldrh	r2, [r7, #10]
 800b312:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	895a      	ldrh	r2, [r3, #10]
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d004      	beq.n	800b32e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4618      	mov	r0, r3
 800b32a:	f000 f911 	bl	800b550 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	601a      	str	r2, [r3, #0]
 800b334:	e000      	b.n	800b338 <pbuf_realloc+0xf4>
    return;
 800b336:	bf00      	nop

}
 800b338:	3710      	adds	r7, #16
 800b33a:	46bd      	mov	sp, r7
 800b33c:	bd80      	pop	{r7, pc}
 800b33e:	bf00      	nop
 800b340:	0801565c 	.word	0x0801565c
 800b344:	08015774 	.word	0x08015774
 800b348:	080156bc 	.word	0x080156bc
 800b34c:	0801578c 	.word	0x0801578c
 800b350:	080157a4 	.word	0x080157a4

0800b354 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b354:	b580      	push	{r7, lr}
 800b356:	b086      	sub	sp, #24
 800b358:	af00      	add	r7, sp, #0
 800b35a:	60f8      	str	r0, [r7, #12]
 800b35c:	60b9      	str	r1, [r7, #8]
 800b35e:	4613      	mov	r3, r2
 800b360:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d106      	bne.n	800b376 <pbuf_add_header_impl+0x22>
 800b368:	4b2b      	ldr	r3, [pc, #172]	; (800b418 <pbuf_add_header_impl+0xc4>)
 800b36a:	f240 12df 	movw	r2, #479	; 0x1df
 800b36e:	492b      	ldr	r1, [pc, #172]	; (800b41c <pbuf_add_header_impl+0xc8>)
 800b370:	482b      	ldr	r0, [pc, #172]	; (800b420 <pbuf_add_header_impl+0xcc>)
 800b372:	f008 fe67 	bl	8014044 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d003      	beq.n	800b384 <pbuf_add_header_impl+0x30>
 800b37c:	68bb      	ldr	r3, [r7, #8]
 800b37e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b382:	d301      	bcc.n	800b388 <pbuf_add_header_impl+0x34>
    return 1;
 800b384:	2301      	movs	r3, #1
 800b386:	e043      	b.n	800b410 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d101      	bne.n	800b392 <pbuf_add_header_impl+0x3e>
    return 0;
 800b38e:	2300      	movs	r3, #0
 800b390:	e03e      	b.n	800b410 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b392:	68bb      	ldr	r3, [r7, #8]
 800b394:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	891a      	ldrh	r2, [r3, #8]
 800b39a:	8a7b      	ldrh	r3, [r7, #18]
 800b39c:	4413      	add	r3, r2
 800b39e:	b29b      	uxth	r3, r3
 800b3a0:	8a7a      	ldrh	r2, [r7, #18]
 800b3a2:	429a      	cmp	r2, r3
 800b3a4:	d901      	bls.n	800b3aa <pbuf_add_header_impl+0x56>
    return 1;
 800b3a6:	2301      	movs	r3, #1
 800b3a8:	e032      	b.n	800b410 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	7b1b      	ldrb	r3, [r3, #12]
 800b3ae:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b3b0:	8a3b      	ldrh	r3, [r7, #16]
 800b3b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d00c      	beq.n	800b3d4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	685a      	ldr	r2, [r3, #4]
 800b3be:	68bb      	ldr	r3, [r7, #8]
 800b3c0:	425b      	negs	r3, r3
 800b3c2:	4413      	add	r3, r2
 800b3c4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	3310      	adds	r3, #16
 800b3ca:	697a      	ldr	r2, [r7, #20]
 800b3cc:	429a      	cmp	r2, r3
 800b3ce:	d20d      	bcs.n	800b3ec <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	e01d      	b.n	800b410 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b3d4:	79fb      	ldrb	r3, [r7, #7]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d006      	beq.n	800b3e8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	685a      	ldr	r2, [r3, #4]
 800b3de:	68bb      	ldr	r3, [r7, #8]
 800b3e0:	425b      	negs	r3, r3
 800b3e2:	4413      	add	r3, r2
 800b3e4:	617b      	str	r3, [r7, #20]
 800b3e6:	e001      	b.n	800b3ec <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	e011      	b.n	800b410 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	697a      	ldr	r2, [r7, #20]
 800b3f0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	895a      	ldrh	r2, [r3, #10]
 800b3f6:	8a7b      	ldrh	r3, [r7, #18]
 800b3f8:	4413      	add	r3, r2
 800b3fa:	b29a      	uxth	r2, r3
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	891a      	ldrh	r2, [r3, #8]
 800b404:	8a7b      	ldrh	r3, [r7, #18]
 800b406:	4413      	add	r3, r2
 800b408:	b29a      	uxth	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	811a      	strh	r2, [r3, #8]


  return 0;
 800b40e:	2300      	movs	r3, #0
}
 800b410:	4618      	mov	r0, r3
 800b412:	3718      	adds	r7, #24
 800b414:	46bd      	mov	sp, r7
 800b416:	bd80      	pop	{r7, pc}
 800b418:	0801565c 	.word	0x0801565c
 800b41c:	080157c0 	.word	0x080157c0
 800b420:	080156bc 	.word	0x080156bc

0800b424 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
 800b42c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b42e:	2200      	movs	r2, #0
 800b430:	6839      	ldr	r1, [r7, #0]
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	f7ff ff8e 	bl	800b354 <pbuf_add_header_impl>
 800b438:	4603      	mov	r3, r0
}
 800b43a:	4618      	mov	r0, r3
 800b43c:	3708      	adds	r7, #8
 800b43e:	46bd      	mov	sp, r7
 800b440:	bd80      	pop	{r7, pc}
	...

0800b444 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	2b00      	cmp	r3, #0
 800b452:	d106      	bne.n	800b462 <pbuf_remove_header+0x1e>
 800b454:	4b20      	ldr	r3, [pc, #128]	; (800b4d8 <pbuf_remove_header+0x94>)
 800b456:	f240 224b 	movw	r2, #587	; 0x24b
 800b45a:	4920      	ldr	r1, [pc, #128]	; (800b4dc <pbuf_remove_header+0x98>)
 800b45c:	4820      	ldr	r0, [pc, #128]	; (800b4e0 <pbuf_remove_header+0x9c>)
 800b45e:	f008 fdf1 	bl	8014044 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	2b00      	cmp	r3, #0
 800b466:	d003      	beq.n	800b470 <pbuf_remove_header+0x2c>
 800b468:	683b      	ldr	r3, [r7, #0]
 800b46a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b46e:	d301      	bcc.n	800b474 <pbuf_remove_header+0x30>
    return 1;
 800b470:	2301      	movs	r3, #1
 800b472:	e02c      	b.n	800b4ce <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d101      	bne.n	800b47e <pbuf_remove_header+0x3a>
    return 0;
 800b47a:	2300      	movs	r3, #0
 800b47c:	e027      	b.n	800b4ce <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	895b      	ldrh	r3, [r3, #10]
 800b486:	89fa      	ldrh	r2, [r7, #14]
 800b488:	429a      	cmp	r2, r3
 800b48a:	d908      	bls.n	800b49e <pbuf_remove_header+0x5a>
 800b48c:	4b12      	ldr	r3, [pc, #72]	; (800b4d8 <pbuf_remove_header+0x94>)
 800b48e:	f240 2255 	movw	r2, #597	; 0x255
 800b492:	4914      	ldr	r1, [pc, #80]	; (800b4e4 <pbuf_remove_header+0xa0>)
 800b494:	4812      	ldr	r0, [pc, #72]	; (800b4e0 <pbuf_remove_header+0x9c>)
 800b496:	f008 fdd5 	bl	8014044 <iprintf>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e017      	b.n	800b4ce <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685a      	ldr	r2, [r3, #4]
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	441a      	add	r2, r3
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	895a      	ldrh	r2, [r3, #10]
 800b4b4:	89fb      	ldrh	r3, [r7, #14]
 800b4b6:	1ad3      	subs	r3, r2, r3
 800b4b8:	b29a      	uxth	r2, r3
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	891a      	ldrh	r2, [r3, #8]
 800b4c2:	89fb      	ldrh	r3, [r7, #14]
 800b4c4:	1ad3      	subs	r3, r2, r3
 800b4c6:	b29a      	uxth	r2, r3
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b4cc:	2300      	movs	r3, #0
}
 800b4ce:	4618      	mov	r0, r3
 800b4d0:	3710      	adds	r7, #16
 800b4d2:	46bd      	mov	sp, r7
 800b4d4:	bd80      	pop	{r7, pc}
 800b4d6:	bf00      	nop
 800b4d8:	0801565c 	.word	0x0801565c
 800b4dc:	080157c0 	.word	0x080157c0
 800b4e0:	080156bc 	.word	0x080156bc
 800b4e4:	080157cc 	.word	0x080157cc

0800b4e8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b082      	sub	sp, #8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
 800b4f0:	460b      	mov	r3, r1
 800b4f2:	807b      	strh	r3, [r7, #2]
 800b4f4:	4613      	mov	r3, r2
 800b4f6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b4f8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	da08      	bge.n	800b512 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b500:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b504:	425b      	negs	r3, r3
 800b506:	4619      	mov	r1, r3
 800b508:	6878      	ldr	r0, [r7, #4]
 800b50a:	f7ff ff9b 	bl	800b444 <pbuf_remove_header>
 800b50e:	4603      	mov	r3, r0
 800b510:	e007      	b.n	800b522 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b512:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b516:	787a      	ldrb	r2, [r7, #1]
 800b518:	4619      	mov	r1, r3
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f7ff ff1a 	bl	800b354 <pbuf_add_header_impl>
 800b520:	4603      	mov	r3, r0
  }
}
 800b522:	4618      	mov	r0, r3
 800b524:	3708      	adds	r7, #8
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}

0800b52a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b52a:	b580      	push	{r7, lr}
 800b52c:	b082      	sub	sp, #8
 800b52e:	af00      	add	r7, sp, #0
 800b530:	6078      	str	r0, [r7, #4]
 800b532:	460b      	mov	r3, r1
 800b534:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b53a:	2201      	movs	r2, #1
 800b53c:	4619      	mov	r1, r3
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	f7ff ffd2 	bl	800b4e8 <pbuf_header_impl>
 800b544:	4603      	mov	r3, r0
}
 800b546:	4618      	mov	r0, r3
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
	...

0800b550 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b550:	b580      	push	{r7, lr}
 800b552:	b086      	sub	sp, #24
 800b554:	af00      	add	r7, sp, #0
 800b556:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d10b      	bne.n	800b576 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <pbuf_free+0x22>
 800b564:	4b38      	ldr	r3, [pc, #224]	; (800b648 <pbuf_free+0xf8>)
 800b566:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b56a:	4938      	ldr	r1, [pc, #224]	; (800b64c <pbuf_free+0xfc>)
 800b56c:	4838      	ldr	r0, [pc, #224]	; (800b650 <pbuf_free+0x100>)
 800b56e:	f008 fd69 	bl	8014044 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b572:	2300      	movs	r3, #0
 800b574:	e063      	b.n	800b63e <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b576:	2300      	movs	r3, #0
 800b578:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b57a:	e05c      	b.n	800b636 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	7b9b      	ldrb	r3, [r3, #14]
 800b580:	2b00      	cmp	r3, #0
 800b582:	d106      	bne.n	800b592 <pbuf_free+0x42>
 800b584:	4b30      	ldr	r3, [pc, #192]	; (800b648 <pbuf_free+0xf8>)
 800b586:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b58a:	4932      	ldr	r1, [pc, #200]	; (800b654 <pbuf_free+0x104>)
 800b58c:	4830      	ldr	r0, [pc, #192]	; (800b650 <pbuf_free+0x100>)
 800b58e:	f008 fd59 	bl	8014044 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	7b9b      	ldrb	r3, [r3, #14]
 800b596:	3b01      	subs	r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	739a      	strb	r2, [r3, #14]
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	7b9b      	ldrb	r3, [r3, #14]
 800b5a2:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b5a4:	7dbb      	ldrb	r3, [r7, #22]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d143      	bne.n	800b632 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	7b1b      	ldrb	r3, [r3, #12]
 800b5b4:	f003 030f 	and.w	r3, r3, #15
 800b5b8:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	7b5b      	ldrb	r3, [r3, #13]
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d011      	beq.n	800b5ea <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	691b      	ldr	r3, [r3, #16]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d106      	bne.n	800b5e0 <pbuf_free+0x90>
 800b5d2:	4b1d      	ldr	r3, [pc, #116]	; (800b648 <pbuf_free+0xf8>)
 800b5d4:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b5d8:	491f      	ldr	r1, [pc, #124]	; (800b658 <pbuf_free+0x108>)
 800b5da:	481d      	ldr	r0, [pc, #116]	; (800b650 <pbuf_free+0x100>)
 800b5dc:	f008 fd32 	bl	8014044 <iprintf>
        pc->custom_free_function(p);
 800b5e0:	68bb      	ldr	r3, [r7, #8]
 800b5e2:	691b      	ldr	r3, [r3, #16]
 800b5e4:	6878      	ldr	r0, [r7, #4]
 800b5e6:	4798      	blx	r3
 800b5e8:	e01d      	b.n	800b626 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b5ea:	7bfb      	ldrb	r3, [r7, #15]
 800b5ec:	2b02      	cmp	r3, #2
 800b5ee:	d104      	bne.n	800b5fa <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b5f0:	6879      	ldr	r1, [r7, #4]
 800b5f2:	2008      	movs	r0, #8
 800b5f4:	f7ff f99a 	bl	800a92c <memp_free>
 800b5f8:	e015      	b.n	800b626 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b5fa:	7bfb      	ldrb	r3, [r7, #15]
 800b5fc:	2b01      	cmp	r3, #1
 800b5fe:	d104      	bne.n	800b60a <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b600:	6879      	ldr	r1, [r7, #4]
 800b602:	2007      	movs	r0, #7
 800b604:	f7ff f992 	bl	800a92c <memp_free>
 800b608:	e00d      	b.n	800b626 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b60a:	7bfb      	ldrb	r3, [r7, #15]
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d103      	bne.n	800b618 <pbuf_free+0xc8>
          mem_free(p);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f7fe fe6b 	bl	800a2ec <mem_free>
 800b616:	e006      	b.n	800b626 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b618:	4b0b      	ldr	r3, [pc, #44]	; (800b648 <pbuf_free+0xf8>)
 800b61a:	f240 320f 	movw	r2, #783	; 0x30f
 800b61e:	490f      	ldr	r1, [pc, #60]	; (800b65c <pbuf_free+0x10c>)
 800b620:	480b      	ldr	r0, [pc, #44]	; (800b650 <pbuf_free+0x100>)
 800b622:	f008 fd0f 	bl	8014044 <iprintf>
        }
      }
      count++;
 800b626:	7dfb      	ldrb	r3, [r7, #23]
 800b628:	3301      	adds	r3, #1
 800b62a:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b62c:	693b      	ldr	r3, [r7, #16]
 800b62e:	607b      	str	r3, [r7, #4]
 800b630:	e001      	b.n	800b636 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d19f      	bne.n	800b57c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b63c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3718      	adds	r7, #24
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	0801565c 	.word	0x0801565c
 800b64c:	080157c0 	.word	0x080157c0
 800b650:	080156bc 	.word	0x080156bc
 800b654:	080157ec 	.word	0x080157ec
 800b658:	08015804 	.word	0x08015804
 800b65c:	08015828 	.word	0x08015828

0800b660 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b660:	b480      	push	{r7}
 800b662:	b085      	sub	sp, #20
 800b664:	af00      	add	r7, sp, #0
 800b666:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b66c:	e005      	b.n	800b67a <pbuf_clen+0x1a>
    ++len;
 800b66e:	89fb      	ldrh	r3, [r7, #14]
 800b670:	3301      	adds	r3, #1
 800b672:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f6      	bne.n	800b66e <pbuf_clen+0xe>
  }
  return len;
 800b680:	89fb      	ldrh	r3, [r7, #14]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3714      	adds	r7, #20
 800b686:	46bd      	mov	sp, r7
 800b688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b68c:	4770      	bx	lr
	...

0800b690 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d010      	beq.n	800b6c0 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	7b9b      	ldrb	r3, [r3, #14]
 800b6a2:	3301      	adds	r3, #1
 800b6a4:	b2da      	uxtb	r2, r3
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	7b9b      	ldrb	r3, [r3, #14]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	d106      	bne.n	800b6c0 <pbuf_ref+0x30>
 800b6b2:	4b05      	ldr	r3, [pc, #20]	; (800b6c8 <pbuf_ref+0x38>)
 800b6b4:	f240 3242 	movw	r2, #834	; 0x342
 800b6b8:	4904      	ldr	r1, [pc, #16]	; (800b6cc <pbuf_ref+0x3c>)
 800b6ba:	4805      	ldr	r0, [pc, #20]	; (800b6d0 <pbuf_ref+0x40>)
 800b6bc:	f008 fcc2 	bl	8014044 <iprintf>
  }
}
 800b6c0:	bf00      	nop
 800b6c2:	3708      	adds	r7, #8
 800b6c4:	46bd      	mov	sp, r7
 800b6c6:	bd80      	pop	{r7, pc}
 800b6c8:	0801565c 	.word	0x0801565c
 800b6cc:	0801583c 	.word	0x0801583c
 800b6d0:	080156bc 	.word	0x080156bc

0800b6d4 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b6d4:	b580      	push	{r7, lr}
 800b6d6:	b084      	sub	sp, #16
 800b6d8:	af00      	add	r7, sp, #0
 800b6da:	6078      	str	r0, [r7, #4]
 800b6dc:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d002      	beq.n	800b6ea <pbuf_cat+0x16>
 800b6e4:	683b      	ldr	r3, [r7, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d107      	bne.n	800b6fa <pbuf_cat+0x26>
 800b6ea:	4b20      	ldr	r3, [pc, #128]	; (800b76c <pbuf_cat+0x98>)
 800b6ec:	f240 3259 	movw	r2, #857	; 0x359
 800b6f0:	491f      	ldr	r1, [pc, #124]	; (800b770 <pbuf_cat+0x9c>)
 800b6f2:	4820      	ldr	r0, [pc, #128]	; (800b774 <pbuf_cat+0xa0>)
 800b6f4:	f008 fca6 	bl	8014044 <iprintf>
 800b6f8:	e034      	b.n	800b764 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	60fb      	str	r3, [r7, #12]
 800b6fe:	e00a      	b.n	800b716 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	891a      	ldrh	r2, [r3, #8]
 800b704:	683b      	ldr	r3, [r7, #0]
 800b706:	891b      	ldrh	r3, [r3, #8]
 800b708:	4413      	add	r3, r2
 800b70a:	b29a      	uxth	r2, r3
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	60fb      	str	r3, [r7, #12]
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d1f0      	bne.n	800b700 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	891a      	ldrh	r2, [r3, #8]
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	895b      	ldrh	r3, [r3, #10]
 800b726:	429a      	cmp	r2, r3
 800b728:	d006      	beq.n	800b738 <pbuf_cat+0x64>
 800b72a:	4b10      	ldr	r3, [pc, #64]	; (800b76c <pbuf_cat+0x98>)
 800b72c:	f240 3262 	movw	r2, #866	; 0x362
 800b730:	4911      	ldr	r1, [pc, #68]	; (800b778 <pbuf_cat+0xa4>)
 800b732:	4810      	ldr	r0, [pc, #64]	; (800b774 <pbuf_cat+0xa0>)
 800b734:	f008 fc86 	bl	8014044 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d006      	beq.n	800b74e <pbuf_cat+0x7a>
 800b740:	4b0a      	ldr	r3, [pc, #40]	; (800b76c <pbuf_cat+0x98>)
 800b742:	f240 3263 	movw	r2, #867	; 0x363
 800b746:	490d      	ldr	r1, [pc, #52]	; (800b77c <pbuf_cat+0xa8>)
 800b748:	480a      	ldr	r0, [pc, #40]	; (800b774 <pbuf_cat+0xa0>)
 800b74a:	f008 fc7b 	bl	8014044 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	891a      	ldrh	r2, [r3, #8]
 800b752:	683b      	ldr	r3, [r7, #0]
 800b754:	891b      	ldrh	r3, [r3, #8]
 800b756:	4413      	add	r3, r2
 800b758:	b29a      	uxth	r2, r3
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	683a      	ldr	r2, [r7, #0]
 800b762:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b764:	3710      	adds	r7, #16
 800b766:	46bd      	mov	sp, r7
 800b768:	bd80      	pop	{r7, pc}
 800b76a:	bf00      	nop
 800b76c:	0801565c 	.word	0x0801565c
 800b770:	08015850 	.word	0x08015850
 800b774:	080156bc 	.word	0x080156bc
 800b778:	08015888 	.word	0x08015888
 800b77c:	080158b8 	.word	0x080158b8

0800b780 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
 800b788:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b78a:	6839      	ldr	r1, [r7, #0]
 800b78c:	6878      	ldr	r0, [r7, #4]
 800b78e:	f7ff ffa1 	bl	800b6d4 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b792:	6838      	ldr	r0, [r7, #0]
 800b794:	f7ff ff7c 	bl	800b690 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b798:	bf00      	nop
 800b79a:	3708      	adds	r7, #8
 800b79c:	46bd      	mov	sp, r7
 800b79e:	bd80      	pop	{r7, pc}

0800b7a0 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b7a0:	b580      	push	{r7, lr}
 800b7a2:	b086      	sub	sp, #24
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
 800b7a8:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	617b      	str	r3, [r7, #20]
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	d008      	beq.n	800b7ca <pbuf_copy+0x2a>
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d005      	beq.n	800b7ca <pbuf_copy+0x2a>
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	891a      	ldrh	r2, [r3, #8]
 800b7c2:	683b      	ldr	r3, [r7, #0]
 800b7c4:	891b      	ldrh	r3, [r3, #8]
 800b7c6:	429a      	cmp	r2, r3
 800b7c8:	d209      	bcs.n	800b7de <pbuf_copy+0x3e>
 800b7ca:	4b57      	ldr	r3, [pc, #348]	; (800b928 <pbuf_copy+0x188>)
 800b7cc:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b7d0:	4956      	ldr	r1, [pc, #344]	; (800b92c <pbuf_copy+0x18c>)
 800b7d2:	4857      	ldr	r0, [pc, #348]	; (800b930 <pbuf_copy+0x190>)
 800b7d4:	f008 fc36 	bl	8014044 <iprintf>
 800b7d8:	f06f 030f 	mvn.w	r3, #15
 800b7dc:	e09f      	b.n	800b91e <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	895b      	ldrh	r3, [r3, #10]
 800b7e2:	461a      	mov	r2, r3
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	1ad2      	subs	r2, r2, r3
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	895b      	ldrh	r3, [r3, #10]
 800b7ec:	4619      	mov	r1, r3
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	1acb      	subs	r3, r1, r3
 800b7f2:	429a      	cmp	r2, r3
 800b7f4:	d306      	bcc.n	800b804 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b7f6:	683b      	ldr	r3, [r7, #0]
 800b7f8:	895b      	ldrh	r3, [r3, #10]
 800b7fa:	461a      	mov	r2, r3
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	1ad3      	subs	r3, r2, r3
 800b800:	60fb      	str	r3, [r7, #12]
 800b802:	e005      	b.n	800b810 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	895b      	ldrh	r3, [r3, #10]
 800b808:	461a      	mov	r2, r3
 800b80a:	697b      	ldr	r3, [r7, #20]
 800b80c:	1ad3      	subs	r3, r2, r3
 800b80e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	685a      	ldr	r2, [r3, #4]
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	18d0      	adds	r0, r2, r3
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	685a      	ldr	r2, [r3, #4]
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	4413      	add	r3, r2
 800b820:	68fa      	ldr	r2, [r7, #12]
 800b822:	4619      	mov	r1, r3
 800b824:	f008 fbf8 	bl	8014018 <memcpy>
    offset_to += len;
 800b828:	697a      	ldr	r2, [r7, #20]
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	4413      	add	r3, r2
 800b82e:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b830:	693a      	ldr	r2, [r7, #16]
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	4413      	add	r3, r2
 800b836:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	895b      	ldrh	r3, [r3, #10]
 800b83c:	461a      	mov	r2, r3
 800b83e:	697b      	ldr	r3, [r7, #20]
 800b840:	4293      	cmp	r3, r2
 800b842:	d906      	bls.n	800b852 <pbuf_copy+0xb2>
 800b844:	4b38      	ldr	r3, [pc, #224]	; (800b928 <pbuf_copy+0x188>)
 800b846:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b84a:	493a      	ldr	r1, [pc, #232]	; (800b934 <pbuf_copy+0x194>)
 800b84c:	4838      	ldr	r0, [pc, #224]	; (800b930 <pbuf_copy+0x190>)
 800b84e:	f008 fbf9 	bl	8014044 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	895b      	ldrh	r3, [r3, #10]
 800b856:	461a      	mov	r2, r3
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	4293      	cmp	r3, r2
 800b85c:	d906      	bls.n	800b86c <pbuf_copy+0xcc>
 800b85e:	4b32      	ldr	r3, [pc, #200]	; (800b928 <pbuf_copy+0x188>)
 800b860:	f240 32da 	movw	r2, #986	; 0x3da
 800b864:	4934      	ldr	r1, [pc, #208]	; (800b938 <pbuf_copy+0x198>)
 800b866:	4832      	ldr	r0, [pc, #200]	; (800b930 <pbuf_copy+0x190>)
 800b868:	f008 fbec 	bl	8014044 <iprintf>
    if (offset_from >= p_from->len) {
 800b86c:	683b      	ldr	r3, [r7, #0]
 800b86e:	895b      	ldrh	r3, [r3, #10]
 800b870:	461a      	mov	r2, r3
 800b872:	693b      	ldr	r3, [r7, #16]
 800b874:	4293      	cmp	r3, r2
 800b876:	d304      	bcc.n	800b882 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b878:	2300      	movs	r3, #0
 800b87a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	895b      	ldrh	r3, [r3, #10]
 800b886:	461a      	mov	r2, r3
 800b888:	697b      	ldr	r3, [r7, #20]
 800b88a:	4293      	cmp	r3, r2
 800b88c:	d114      	bne.n	800b8b8 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b88e:	2300      	movs	r3, #0
 800b890:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d10c      	bne.n	800b8b8 <pbuf_copy+0x118>
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d009      	beq.n	800b8b8 <pbuf_copy+0x118>
 800b8a4:	4b20      	ldr	r3, [pc, #128]	; (800b928 <pbuf_copy+0x188>)
 800b8a6:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b8aa:	4924      	ldr	r1, [pc, #144]	; (800b93c <pbuf_copy+0x19c>)
 800b8ac:	4820      	ldr	r0, [pc, #128]	; (800b930 <pbuf_copy+0x190>)
 800b8ae:	f008 fbc9 	bl	8014044 <iprintf>
 800b8b2:	f06f 030f 	mvn.w	r3, #15
 800b8b6:	e032      	b.n	800b91e <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b8b8:	683b      	ldr	r3, [r7, #0]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d013      	beq.n	800b8e6 <pbuf_copy+0x146>
 800b8be:	683b      	ldr	r3, [r7, #0]
 800b8c0:	895a      	ldrh	r2, [r3, #10]
 800b8c2:	683b      	ldr	r3, [r7, #0]
 800b8c4:	891b      	ldrh	r3, [r3, #8]
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d10d      	bne.n	800b8e6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b8ca:	683b      	ldr	r3, [r7, #0]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d009      	beq.n	800b8e6 <pbuf_copy+0x146>
 800b8d2:	4b15      	ldr	r3, [pc, #84]	; (800b928 <pbuf_copy+0x188>)
 800b8d4:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b8d8:	4919      	ldr	r1, [pc, #100]	; (800b940 <pbuf_copy+0x1a0>)
 800b8da:	4815      	ldr	r0, [pc, #84]	; (800b930 <pbuf_copy+0x190>)
 800b8dc:	f008 fbb2 	bl	8014044 <iprintf>
 800b8e0:	f06f 0305 	mvn.w	r3, #5
 800b8e4:	e01b      	b.n	800b91e <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d013      	beq.n	800b914 <pbuf_copy+0x174>
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	895a      	ldrh	r2, [r3, #10]
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	891b      	ldrh	r3, [r3, #8]
 800b8f4:	429a      	cmp	r2, r3
 800b8f6:	d10d      	bne.n	800b914 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d009      	beq.n	800b914 <pbuf_copy+0x174>
 800b900:	4b09      	ldr	r3, [pc, #36]	; (800b928 <pbuf_copy+0x188>)
 800b902:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b906:	490e      	ldr	r1, [pc, #56]	; (800b940 <pbuf_copy+0x1a0>)
 800b908:	4809      	ldr	r0, [pc, #36]	; (800b930 <pbuf_copy+0x190>)
 800b90a:	f008 fb9b 	bl	8014044 <iprintf>
 800b90e:	f06f 0305 	mvn.w	r3, #5
 800b912:	e004      	b.n	800b91e <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b914:	683b      	ldr	r3, [r7, #0]
 800b916:	2b00      	cmp	r3, #0
 800b918:	f47f af61 	bne.w	800b7de <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3718      	adds	r7, #24
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
 800b926:	bf00      	nop
 800b928:	0801565c 	.word	0x0801565c
 800b92c:	08015904 	.word	0x08015904
 800b930:	080156bc 	.word	0x080156bc
 800b934:	08015934 	.word	0x08015934
 800b938:	0801594c 	.word	0x0801594c
 800b93c:	08015968 	.word	0x08015968
 800b940:	08015978 	.word	0x08015978

0800b944 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b944:	b580      	push	{r7, lr}
 800b946:	b088      	sub	sp, #32
 800b948:	af00      	add	r7, sp, #0
 800b94a:	60f8      	str	r0, [r7, #12]
 800b94c:	60b9      	str	r1, [r7, #8]
 800b94e:	4611      	mov	r1, r2
 800b950:	461a      	mov	r2, r3
 800b952:	460b      	mov	r3, r1
 800b954:	80fb      	strh	r3, [r7, #6]
 800b956:	4613      	mov	r3, r2
 800b958:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b95a:	2300      	movs	r3, #0
 800b95c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b95e:	2300      	movs	r3, #0
 800b960:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d108      	bne.n	800b97a <pbuf_copy_partial+0x36>
 800b968:	4b2b      	ldr	r3, [pc, #172]	; (800ba18 <pbuf_copy_partial+0xd4>)
 800b96a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b96e:	492b      	ldr	r1, [pc, #172]	; (800ba1c <pbuf_copy_partial+0xd8>)
 800b970:	482b      	ldr	r0, [pc, #172]	; (800ba20 <pbuf_copy_partial+0xdc>)
 800b972:	f008 fb67 	bl	8014044 <iprintf>
 800b976:	2300      	movs	r3, #0
 800b978:	e04a      	b.n	800ba10 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b97a:	68bb      	ldr	r3, [r7, #8]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d108      	bne.n	800b992 <pbuf_copy_partial+0x4e>
 800b980:	4b25      	ldr	r3, [pc, #148]	; (800ba18 <pbuf_copy_partial+0xd4>)
 800b982:	f240 420b 	movw	r2, #1035	; 0x40b
 800b986:	4927      	ldr	r1, [pc, #156]	; (800ba24 <pbuf_copy_partial+0xe0>)
 800b988:	4825      	ldr	r0, [pc, #148]	; (800ba20 <pbuf_copy_partial+0xdc>)
 800b98a:	f008 fb5b 	bl	8014044 <iprintf>
 800b98e:	2300      	movs	r3, #0
 800b990:	e03e      	b.n	800ba10 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	61fb      	str	r3, [r7, #28]
 800b996:	e034      	b.n	800ba02 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b998:	88bb      	ldrh	r3, [r7, #4]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00a      	beq.n	800b9b4 <pbuf_copy_partial+0x70>
 800b99e:	69fb      	ldr	r3, [r7, #28]
 800b9a0:	895b      	ldrh	r3, [r3, #10]
 800b9a2:	88ba      	ldrh	r2, [r7, #4]
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d305      	bcc.n	800b9b4 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b9a8:	69fb      	ldr	r3, [r7, #28]
 800b9aa:	895b      	ldrh	r3, [r3, #10]
 800b9ac:	88ba      	ldrh	r2, [r7, #4]
 800b9ae:	1ad3      	subs	r3, r2, r3
 800b9b0:	80bb      	strh	r3, [r7, #4]
 800b9b2:	e023      	b.n	800b9fc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b9b4:	69fb      	ldr	r3, [r7, #28]
 800b9b6:	895a      	ldrh	r2, [r3, #10]
 800b9b8:	88bb      	ldrh	r3, [r7, #4]
 800b9ba:	1ad3      	subs	r3, r2, r3
 800b9bc:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b9be:	8b3a      	ldrh	r2, [r7, #24]
 800b9c0:	88fb      	ldrh	r3, [r7, #6]
 800b9c2:	429a      	cmp	r2, r3
 800b9c4:	d901      	bls.n	800b9ca <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b9c6:	88fb      	ldrh	r3, [r7, #6]
 800b9c8:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b9ca:	8b7b      	ldrh	r3, [r7, #26]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	18d0      	adds	r0, r2, r3
 800b9d0:	69fb      	ldr	r3, [r7, #28]
 800b9d2:	685a      	ldr	r2, [r3, #4]
 800b9d4:	88bb      	ldrh	r3, [r7, #4]
 800b9d6:	4413      	add	r3, r2
 800b9d8:	8b3a      	ldrh	r2, [r7, #24]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	f008 fb1c 	bl	8014018 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b9e0:	8afa      	ldrh	r2, [r7, #22]
 800b9e2:	8b3b      	ldrh	r3, [r7, #24]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b9e8:	8b7a      	ldrh	r2, [r7, #26]
 800b9ea:	8b3b      	ldrh	r3, [r7, #24]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b9f0:	88fa      	ldrh	r2, [r7, #6]
 800b9f2:	8b3b      	ldrh	r3, [r7, #24]
 800b9f4:	1ad3      	subs	r3, r2, r3
 800b9f6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b9fc:	69fb      	ldr	r3, [r7, #28]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	61fb      	str	r3, [r7, #28]
 800ba02:	88fb      	ldrh	r3, [r7, #6]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d002      	beq.n	800ba0e <pbuf_copy_partial+0xca>
 800ba08:	69fb      	ldr	r3, [r7, #28]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d1c4      	bne.n	800b998 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800ba0e:	8afb      	ldrh	r3, [r7, #22]
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3720      	adds	r7, #32
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	0801565c 	.word	0x0801565c
 800ba1c:	080159a4 	.word	0x080159a4
 800ba20:	080156bc 	.word	0x080156bc
 800ba24:	080159c4 	.word	0x080159c4

0800ba28 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800ba28:	b580      	push	{r7, lr}
 800ba2a:	b084      	sub	sp, #16
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	4603      	mov	r3, r0
 800ba30:	603a      	str	r2, [r7, #0]
 800ba32:	71fb      	strb	r3, [r7, #7]
 800ba34:	460b      	mov	r3, r1
 800ba36:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800ba38:	683b      	ldr	r3, [r7, #0]
 800ba3a:	8919      	ldrh	r1, [r3, #8]
 800ba3c:	88ba      	ldrh	r2, [r7, #4]
 800ba3e:	79fb      	ldrb	r3, [r7, #7]
 800ba40:	4618      	mov	r0, r3
 800ba42:	f7ff faa1 	bl	800af88 <pbuf_alloc>
 800ba46:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800ba48:	68fb      	ldr	r3, [r7, #12]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d101      	bne.n	800ba52 <pbuf_clone+0x2a>
    return NULL;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	e011      	b.n	800ba76 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f7ff fea3 	bl	800b7a0 <pbuf_copy>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800ba5e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d006      	beq.n	800ba74 <pbuf_clone+0x4c>
 800ba66:	4b06      	ldr	r3, [pc, #24]	; (800ba80 <pbuf_clone+0x58>)
 800ba68:	f240 5224 	movw	r2, #1316	; 0x524
 800ba6c:	4905      	ldr	r1, [pc, #20]	; (800ba84 <pbuf_clone+0x5c>)
 800ba6e:	4806      	ldr	r0, [pc, #24]	; (800ba88 <pbuf_clone+0x60>)
 800ba70:	f008 fae8 	bl	8014044 <iprintf>
  return q;
 800ba74:	68fb      	ldr	r3, [r7, #12]
}
 800ba76:	4618      	mov	r0, r3
 800ba78:	3710      	adds	r7, #16
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	bd80      	pop	{r7, pc}
 800ba7e:	bf00      	nop
 800ba80:	0801565c 	.word	0x0801565c
 800ba84:	08015ad0 	.word	0x08015ad0
 800ba88:	080156bc 	.word	0x080156bc

0800ba8c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ba90:	f008 faf0 	bl	8014074 <rand>
 800ba94:	4603      	mov	r3, r0
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	4b01      	ldr	r3, [pc, #4]	; (800baac <tcp_init+0x20>)
 800baa6:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800baa8:	bf00      	nop
 800baaa:	bd80      	pop	{r7, pc}
 800baac:	2000000a 	.word	0x2000000a

0800bab0 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800bab0:	b580      	push	{r7, lr}
 800bab2:	b082      	sub	sp, #8
 800bab4:	af00      	add	r7, sp, #0
 800bab6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	7d1b      	ldrb	r3, [r3, #20]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d105      	bne.n	800bacc <tcp_free+0x1c>
 800bac0:	4b06      	ldr	r3, [pc, #24]	; (800badc <tcp_free+0x2c>)
 800bac2:	22d4      	movs	r2, #212	; 0xd4
 800bac4:	4906      	ldr	r1, [pc, #24]	; (800bae0 <tcp_free+0x30>)
 800bac6:	4807      	ldr	r0, [pc, #28]	; (800bae4 <tcp_free+0x34>)
 800bac8:	f008 fabc 	bl	8014044 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800bacc:	6879      	ldr	r1, [r7, #4]
 800bace:	2001      	movs	r0, #1
 800bad0:	f7fe ff2c 	bl	800a92c <memp_free>
}
 800bad4:	bf00      	nop
 800bad6:	3708      	adds	r7, #8
 800bad8:	46bd      	mov	sp, r7
 800bada:	bd80      	pop	{r7, pc}
 800badc:	08015b5c 	.word	0x08015b5c
 800bae0:	08015b8c 	.word	0x08015b8c
 800bae4:	08015ba0 	.word	0x08015ba0

0800bae8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
 800baee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	7d1b      	ldrb	r3, [r3, #20]
 800baf4:	2b01      	cmp	r3, #1
 800baf6:	d105      	bne.n	800bb04 <tcp_free_listen+0x1c>
 800baf8:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <tcp_free_listen+0x2c>)
 800bafa:	22df      	movs	r2, #223	; 0xdf
 800bafc:	4906      	ldr	r1, [pc, #24]	; (800bb18 <tcp_free_listen+0x30>)
 800bafe:	4807      	ldr	r0, [pc, #28]	; (800bb1c <tcp_free_listen+0x34>)
 800bb00:	f008 faa0 	bl	8014044 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800bb04:	6879      	ldr	r1, [r7, #4]
 800bb06:	2002      	movs	r0, #2
 800bb08:	f7fe ff10 	bl	800a92c <memp_free>
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}
 800bb14:	08015b5c 	.word	0x08015b5c
 800bb18:	08015bc8 	.word	0x08015bc8
 800bb1c:	08015ba0 	.word	0x08015ba0

0800bb20 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800bb24:	f000 fea2 	bl	800c86c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800bb28:	4b07      	ldr	r3, [pc, #28]	; (800bb48 <tcp_tmr+0x28>)
 800bb2a:	781b      	ldrb	r3, [r3, #0]
 800bb2c:	3301      	adds	r3, #1
 800bb2e:	b2da      	uxtb	r2, r3
 800bb30:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <tcp_tmr+0x28>)
 800bb32:	701a      	strb	r2, [r3, #0]
 800bb34:	4b04      	ldr	r3, [pc, #16]	; (800bb48 <tcp_tmr+0x28>)
 800bb36:	781b      	ldrb	r3, [r3, #0]
 800bb38:	f003 0301 	and.w	r3, r3, #1
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d001      	beq.n	800bb44 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800bb40:	f000 fb54 	bl	800c1ec <tcp_slowtmr>
  }
}
 800bb44:	bf00      	nop
 800bb46:	bd80      	pop	{r7, pc}
 800bb48:	200000dd 	.word	0x200000dd

0800bb4c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b084      	sub	sp, #16
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d105      	bne.n	800bb68 <tcp_remove_listener+0x1c>
 800bb5c:	4b0d      	ldr	r3, [pc, #52]	; (800bb94 <tcp_remove_listener+0x48>)
 800bb5e:	22ff      	movs	r2, #255	; 0xff
 800bb60:	490d      	ldr	r1, [pc, #52]	; (800bb98 <tcp_remove_listener+0x4c>)
 800bb62:	480e      	ldr	r0, [pc, #56]	; (800bb9c <tcp_remove_listener+0x50>)
 800bb64:	f008 fa6e 	bl	8014044 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	60fb      	str	r3, [r7, #12]
 800bb6c:	e00a      	b.n	800bb84 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb72:	683a      	ldr	r2, [r7, #0]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d102      	bne.n	800bb7e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	2200      	movs	r2, #0
 800bb7c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	68db      	ldr	r3, [r3, #12]
 800bb82:	60fb      	str	r3, [r7, #12]
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1f1      	bne.n	800bb6e <tcp_remove_listener+0x22>
    }
  }
}
 800bb8a:	bf00      	nop
 800bb8c:	bf00      	nop
 800bb8e:	3710      	adds	r7, #16
 800bb90:	46bd      	mov	sp, r7
 800bb92:	bd80      	pop	{r7, pc}
 800bb94:	08015b5c 	.word	0x08015b5c
 800bb98:	08015be4 	.word	0x08015be4
 800bb9c:	08015ba0 	.word	0x08015ba0

0800bba0 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800bba0:	b580      	push	{r7, lr}
 800bba2:	b084      	sub	sp, #16
 800bba4:	af00      	add	r7, sp, #0
 800bba6:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d106      	bne.n	800bbbc <tcp_listen_closed+0x1c>
 800bbae:	4b14      	ldr	r3, [pc, #80]	; (800bc00 <tcp_listen_closed+0x60>)
 800bbb0:	f240 1211 	movw	r2, #273	; 0x111
 800bbb4:	4913      	ldr	r1, [pc, #76]	; (800bc04 <tcp_listen_closed+0x64>)
 800bbb6:	4814      	ldr	r0, [pc, #80]	; (800bc08 <tcp_listen_closed+0x68>)
 800bbb8:	f008 fa44 	bl	8014044 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	7d1b      	ldrb	r3, [r3, #20]
 800bbc0:	2b01      	cmp	r3, #1
 800bbc2:	d006      	beq.n	800bbd2 <tcp_listen_closed+0x32>
 800bbc4:	4b0e      	ldr	r3, [pc, #56]	; (800bc00 <tcp_listen_closed+0x60>)
 800bbc6:	f44f 7289 	mov.w	r2, #274	; 0x112
 800bbca:	4910      	ldr	r1, [pc, #64]	; (800bc0c <tcp_listen_closed+0x6c>)
 800bbcc:	480e      	ldr	r0, [pc, #56]	; (800bc08 <tcp_listen_closed+0x68>)
 800bbce:	f008 fa39 	bl	8014044 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e00b      	b.n	800bbf0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800bbd8:	4a0d      	ldr	r2, [pc, #52]	; (800bc10 <tcp_listen_closed+0x70>)
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	6879      	ldr	r1, [r7, #4]
 800bbe4:	4618      	mov	r0, r3
 800bbe6:	f7ff ffb1 	bl	800bb4c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	3301      	adds	r3, #1
 800bbee:	60fb      	str	r3, [r7, #12]
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	2b03      	cmp	r3, #3
 800bbf4:	d9f0      	bls.n	800bbd8 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800bbf6:	bf00      	nop
 800bbf8:	bf00      	nop
 800bbfa:	3710      	adds	r7, #16
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	08015b5c 	.word	0x08015b5c
 800bc04:	08015c0c 	.word	0x08015c0c
 800bc08:	08015ba0 	.word	0x08015ba0
 800bc0c:	08015c18 	.word	0x08015c18
 800bc10:	08017b4c 	.word	0x08017b4c

0800bc14 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800bc14:	b5b0      	push	{r4, r5, r7, lr}
 800bc16:	b088      	sub	sp, #32
 800bc18:	af04      	add	r7, sp, #16
 800bc1a:	6078      	str	r0, [r7, #4]
 800bc1c:	460b      	mov	r3, r1
 800bc1e:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d106      	bne.n	800bc34 <tcp_close_shutdown+0x20>
 800bc26:	4b63      	ldr	r3, [pc, #396]	; (800bdb4 <tcp_close_shutdown+0x1a0>)
 800bc28:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800bc2c:	4962      	ldr	r1, [pc, #392]	; (800bdb8 <tcp_close_shutdown+0x1a4>)
 800bc2e:	4863      	ldr	r0, [pc, #396]	; (800bdbc <tcp_close_shutdown+0x1a8>)
 800bc30:	f008 fa08 	bl	8014044 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800bc34:	78fb      	ldrb	r3, [r7, #3]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d066      	beq.n	800bd08 <tcp_close_shutdown+0xf4>
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	7d1b      	ldrb	r3, [r3, #20]
 800bc3e:	2b04      	cmp	r3, #4
 800bc40:	d003      	beq.n	800bc4a <tcp_close_shutdown+0x36>
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	7d1b      	ldrb	r3, [r3, #20]
 800bc46:	2b07      	cmp	r3, #7
 800bc48:	d15e      	bne.n	800bd08 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d104      	bne.n	800bc5c <tcp_close_shutdown+0x48>
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bc56:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bc5a:	d055      	beq.n	800bd08 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	8b5b      	ldrh	r3, [r3, #26]
 800bc60:	f003 0310 	and.w	r3, r3, #16
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d106      	bne.n	800bc76 <tcp_close_shutdown+0x62>
 800bc68:	4b52      	ldr	r3, [pc, #328]	; (800bdb4 <tcp_close_shutdown+0x1a0>)
 800bc6a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800bc6e:	4954      	ldr	r1, [pc, #336]	; (800bdc0 <tcp_close_shutdown+0x1ac>)
 800bc70:	4852      	ldr	r0, [pc, #328]	; (800bdbc <tcp_close_shutdown+0x1a8>)
 800bc72:	f008 f9e7 	bl	8014044 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800bc7e:	687d      	ldr	r5, [r7, #4]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	3304      	adds	r3, #4
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	8ad2      	ldrh	r2, [r2, #22]
 800bc88:	6879      	ldr	r1, [r7, #4]
 800bc8a:	8b09      	ldrh	r1, [r1, #24]
 800bc8c:	9102      	str	r1, [sp, #8]
 800bc8e:	9201      	str	r2, [sp, #4]
 800bc90:	9300      	str	r3, [sp, #0]
 800bc92:	462b      	mov	r3, r5
 800bc94:	4622      	mov	r2, r4
 800bc96:	4601      	mov	r1, r0
 800bc98:	6878      	ldr	r0, [r7, #4]
 800bc9a:	f004 fe8d 	bl	80109b8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800bc9e:	6878      	ldr	r0, [r7, #4]
 800bca0:	f001 f8c6 	bl	800ce30 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800bca4:	4b47      	ldr	r3, [pc, #284]	; (800bdc4 <tcp_close_shutdown+0x1b0>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	687a      	ldr	r2, [r7, #4]
 800bcaa:	429a      	cmp	r2, r3
 800bcac:	d105      	bne.n	800bcba <tcp_close_shutdown+0xa6>
 800bcae:	4b45      	ldr	r3, [pc, #276]	; (800bdc4 <tcp_close_shutdown+0x1b0>)
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	4a43      	ldr	r2, [pc, #268]	; (800bdc4 <tcp_close_shutdown+0x1b0>)
 800bcb6:	6013      	str	r3, [r2, #0]
 800bcb8:	e013      	b.n	800bce2 <tcp_close_shutdown+0xce>
 800bcba:	4b42      	ldr	r3, [pc, #264]	; (800bdc4 <tcp_close_shutdown+0x1b0>)
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	e00c      	b.n	800bcdc <tcp_close_shutdown+0xc8>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	68db      	ldr	r3, [r3, #12]
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	d104      	bne.n	800bcd6 <tcp_close_shutdown+0xc2>
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68da      	ldr	r2, [r3, #12]
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	60da      	str	r2, [r3, #12]
 800bcd4:	e005      	b.n	800bce2 <tcp_close_shutdown+0xce>
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	60fb      	str	r3, [r7, #12]
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d1ef      	bne.n	800bcc2 <tcp_close_shutdown+0xae>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2200      	movs	r2, #0
 800bce6:	60da      	str	r2, [r3, #12]
 800bce8:	4b37      	ldr	r3, [pc, #220]	; (800bdc8 <tcp_close_shutdown+0x1b4>)
 800bcea:	2201      	movs	r2, #1
 800bcec:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800bcee:	4b37      	ldr	r3, [pc, #220]	; (800bdcc <tcp_close_shutdown+0x1b8>)
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	429a      	cmp	r2, r3
 800bcf6:	d102      	bne.n	800bcfe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bcf8:	f003 fd5a 	bl	800f7b0 <tcp_trigger_input_pcb_close>
 800bcfc:	e002      	b.n	800bd04 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800bcfe:	6878      	ldr	r0, [r7, #4]
 800bd00:	f7ff fed6 	bl	800bab0 <tcp_free>
      }
      return ERR_OK;
 800bd04:	2300      	movs	r3, #0
 800bd06:	e050      	b.n	800bdaa <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	7d1b      	ldrb	r3, [r3, #20]
 800bd0c:	2b02      	cmp	r3, #2
 800bd0e:	d03b      	beq.n	800bd88 <tcp_close_shutdown+0x174>
 800bd10:	2b02      	cmp	r3, #2
 800bd12:	dc44      	bgt.n	800bd9e <tcp_close_shutdown+0x18a>
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d002      	beq.n	800bd1e <tcp_close_shutdown+0x10a>
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d02a      	beq.n	800bd72 <tcp_close_shutdown+0x15e>
 800bd1c:	e03f      	b.n	800bd9e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	8adb      	ldrh	r3, [r3, #22]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d021      	beq.n	800bd6a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd26:	4b2a      	ldr	r3, [pc, #168]	; (800bdd0 <tcp_close_shutdown+0x1bc>)
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	687a      	ldr	r2, [r7, #4]
 800bd2c:	429a      	cmp	r2, r3
 800bd2e:	d105      	bne.n	800bd3c <tcp_close_shutdown+0x128>
 800bd30:	4b27      	ldr	r3, [pc, #156]	; (800bdd0 <tcp_close_shutdown+0x1bc>)
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	68db      	ldr	r3, [r3, #12]
 800bd36:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <tcp_close_shutdown+0x1bc>)
 800bd38:	6013      	str	r3, [r2, #0]
 800bd3a:	e013      	b.n	800bd64 <tcp_close_shutdown+0x150>
 800bd3c:	4b24      	ldr	r3, [pc, #144]	; (800bdd0 <tcp_close_shutdown+0x1bc>)
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	60bb      	str	r3, [r7, #8]
 800bd42:	e00c      	b.n	800bd5e <tcp_close_shutdown+0x14a>
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	68db      	ldr	r3, [r3, #12]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d104      	bne.n	800bd58 <tcp_close_shutdown+0x144>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68da      	ldr	r2, [r3, #12]
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	60da      	str	r2, [r3, #12]
 800bd56:	e005      	b.n	800bd64 <tcp_close_shutdown+0x150>
 800bd58:	68bb      	ldr	r3, [r7, #8]
 800bd5a:	68db      	ldr	r3, [r3, #12]
 800bd5c:	60bb      	str	r3, [r7, #8]
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d1ef      	bne.n	800bd44 <tcp_close_shutdown+0x130>
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	2200      	movs	r2, #0
 800bd68:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f7ff fea0 	bl	800bab0 <tcp_free>
      break;
 800bd70:	e01a      	b.n	800bda8 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f7ff ff14 	bl	800bba0 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bd78:	6879      	ldr	r1, [r7, #4]
 800bd7a:	4816      	ldr	r0, [pc, #88]	; (800bdd4 <tcp_close_shutdown+0x1c0>)
 800bd7c:	f001 f8a8 	bl	800ced0 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f7ff feb1 	bl	800bae8 <tcp_free_listen>
      break;
 800bd86:	e00f      	b.n	800bda8 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bd88:	6879      	ldr	r1, [r7, #4]
 800bd8a:	480e      	ldr	r0, [pc, #56]	; (800bdc4 <tcp_close_shutdown+0x1b0>)
 800bd8c:	f001 f8a0 	bl	800ced0 <tcp_pcb_remove>
 800bd90:	4b0d      	ldr	r3, [pc, #52]	; (800bdc8 <tcp_close_shutdown+0x1b4>)
 800bd92:	2201      	movs	r2, #1
 800bd94:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bd96:	6878      	ldr	r0, [r7, #4]
 800bd98:	f7ff fe8a 	bl	800bab0 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bd9c:	e004      	b.n	800bda8 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bd9e:	6878      	ldr	r0, [r7, #4]
 800bda0:	f000 f81a 	bl	800bdd8 <tcp_close_shutdown_fin>
 800bda4:	4603      	mov	r3, r0
 800bda6:	e000      	b.n	800bdaa <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3710      	adds	r7, #16
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bdb0      	pop	{r4, r5, r7, pc}
 800bdb2:	bf00      	nop
 800bdb4:	08015b5c 	.word	0x08015b5c
 800bdb8:	08015c30 	.word	0x08015c30
 800bdbc:	08015ba0 	.word	0x08015ba0
 800bdc0:	08015c50 	.word	0x08015c50
 800bdc4:	20007204 	.word	0x20007204
 800bdc8:	20007200 	.word	0x20007200
 800bdcc:	20007218 	.word	0x20007218
 800bdd0:	20007210 	.word	0x20007210
 800bdd4:	2000720c 	.word	0x2000720c

0800bdd8 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bdd8:	b580      	push	{r7, lr}
 800bdda:	b084      	sub	sp, #16
 800bddc:	af00      	add	r7, sp, #0
 800bdde:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d106      	bne.n	800bdf4 <tcp_close_shutdown_fin+0x1c>
 800bde6:	4b2e      	ldr	r3, [pc, #184]	; (800bea0 <tcp_close_shutdown_fin+0xc8>)
 800bde8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bdec:	492d      	ldr	r1, [pc, #180]	; (800bea4 <tcp_close_shutdown_fin+0xcc>)
 800bdee:	482e      	ldr	r0, [pc, #184]	; (800bea8 <tcp_close_shutdown_fin+0xd0>)
 800bdf0:	f008 f928 	bl	8014044 <iprintf>

  switch (pcb->state) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	7d1b      	ldrb	r3, [r3, #20]
 800bdf8:	2b07      	cmp	r3, #7
 800bdfa:	d020      	beq.n	800be3e <tcp_close_shutdown_fin+0x66>
 800bdfc:	2b07      	cmp	r3, #7
 800bdfe:	dc2b      	bgt.n	800be58 <tcp_close_shutdown_fin+0x80>
 800be00:	2b03      	cmp	r3, #3
 800be02:	d002      	beq.n	800be0a <tcp_close_shutdown_fin+0x32>
 800be04:	2b04      	cmp	r3, #4
 800be06:	d00d      	beq.n	800be24 <tcp_close_shutdown_fin+0x4c>
 800be08:	e026      	b.n	800be58 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	f003 fee2 	bl	800fbd4 <tcp_send_fin>
 800be10:	4603      	mov	r3, r0
 800be12:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d11f      	bne.n	800be5c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	2205      	movs	r2, #5
 800be20:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be22:	e01b      	b.n	800be5c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f003 fed5 	bl	800fbd4 <tcp_send_fin>
 800be2a:	4603      	mov	r3, r0
 800be2c:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be32:	2b00      	cmp	r3, #0
 800be34:	d114      	bne.n	800be60 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2205      	movs	r2, #5
 800be3a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be3c:	e010      	b.n	800be60 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f003 fec8 	bl	800fbd4 <tcp_send_fin>
 800be44:	4603      	mov	r3, r0
 800be46:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800be48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d109      	bne.n	800be64 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2209      	movs	r2, #9
 800be54:	751a      	strb	r2, [r3, #20]
      }
      break;
 800be56:	e005      	b.n	800be64 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800be58:	2300      	movs	r3, #0
 800be5a:	e01c      	b.n	800be96 <tcp_close_shutdown_fin+0xbe>
      break;
 800be5c:	bf00      	nop
 800be5e:	e002      	b.n	800be66 <tcp_close_shutdown_fin+0x8e>
      break;
 800be60:	bf00      	nop
 800be62:	e000      	b.n	800be66 <tcp_close_shutdown_fin+0x8e>
      break;
 800be64:	bf00      	nop
  }

  if (err == ERR_OK) {
 800be66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d103      	bne.n	800be76 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800be6e:	6878      	ldr	r0, [r7, #4]
 800be70:	f003 ffee 	bl	800fe50 <tcp_output>
 800be74:	e00d      	b.n	800be92 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800be76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be7e:	d108      	bne.n	800be92 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	8b5b      	ldrh	r3, [r3, #26]
 800be84:	f043 0308 	orr.w	r3, r3, #8
 800be88:	b29a      	uxth	r2, r3
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800be8e:	2300      	movs	r3, #0
 800be90:	e001      	b.n	800be96 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800be92:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800be96:	4618      	mov	r0, r3
 800be98:	3710      	adds	r7, #16
 800be9a:	46bd      	mov	sp, r7
 800be9c:	bd80      	pop	{r7, pc}
 800be9e:	bf00      	nop
 800bea0:	08015b5c 	.word	0x08015b5c
 800bea4:	08015c0c 	.word	0x08015c0c
 800bea8:	08015ba0 	.word	0x08015ba0

0800beac <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	b082      	sub	sp, #8
 800beb0:	af00      	add	r7, sp, #0
 800beb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d109      	bne.n	800bece <tcp_close+0x22>
 800beba:	4b0f      	ldr	r3, [pc, #60]	; (800bef8 <tcp_close+0x4c>)
 800bebc:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bec0:	490e      	ldr	r1, [pc, #56]	; (800befc <tcp_close+0x50>)
 800bec2:	480f      	ldr	r0, [pc, #60]	; (800bf00 <tcp_close+0x54>)
 800bec4:	f008 f8be 	bl	8014044 <iprintf>
 800bec8:	f06f 030f 	mvn.w	r3, #15
 800becc:	e00f      	b.n	800beee <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	7d1b      	ldrb	r3, [r3, #20]
 800bed2:	2b01      	cmp	r3, #1
 800bed4:	d006      	beq.n	800bee4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	8b5b      	ldrh	r3, [r3, #26]
 800beda:	f043 0310 	orr.w	r3, r3, #16
 800bede:	b29a      	uxth	r2, r3
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bee4:	2101      	movs	r1, #1
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	f7ff fe94 	bl	800bc14 <tcp_close_shutdown>
 800beec:	4603      	mov	r3, r0
}
 800beee:	4618      	mov	r0, r3
 800bef0:	3708      	adds	r7, #8
 800bef2:	46bd      	mov	sp, r7
 800bef4:	bd80      	pop	{r7, pc}
 800bef6:	bf00      	nop
 800bef8:	08015b5c 	.word	0x08015b5c
 800befc:	08015c6c 	.word	0x08015c6c
 800bf00:	08015ba0 	.word	0x08015ba0

0800bf04 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bf04:	b580      	push	{r7, lr}
 800bf06:	b08e      	sub	sp, #56	; 0x38
 800bf08:	af04      	add	r7, sp, #16
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d107      	bne.n	800bf24 <tcp_abandon+0x20>
 800bf14:	4b52      	ldr	r3, [pc, #328]	; (800c060 <tcp_abandon+0x15c>)
 800bf16:	f240 223d 	movw	r2, #573	; 0x23d
 800bf1a:	4952      	ldr	r1, [pc, #328]	; (800c064 <tcp_abandon+0x160>)
 800bf1c:	4852      	ldr	r0, [pc, #328]	; (800c068 <tcp_abandon+0x164>)
 800bf1e:	f008 f891 	bl	8014044 <iprintf>
 800bf22:	e099      	b.n	800c058 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	7d1b      	ldrb	r3, [r3, #20]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d106      	bne.n	800bf3a <tcp_abandon+0x36>
 800bf2c:	4b4c      	ldr	r3, [pc, #304]	; (800c060 <tcp_abandon+0x15c>)
 800bf2e:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bf32:	494e      	ldr	r1, [pc, #312]	; (800c06c <tcp_abandon+0x168>)
 800bf34:	484c      	ldr	r0, [pc, #304]	; (800c068 <tcp_abandon+0x164>)
 800bf36:	f008 f885 	bl	8014044 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	7d1b      	ldrb	r3, [r3, #20]
 800bf3e:	2b0a      	cmp	r3, #10
 800bf40:	d107      	bne.n	800bf52 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bf42:	6879      	ldr	r1, [r7, #4]
 800bf44:	484a      	ldr	r0, [pc, #296]	; (800c070 <tcp_abandon+0x16c>)
 800bf46:	f000 ffc3 	bl	800ced0 <tcp_pcb_remove>
    tcp_free(pcb);
 800bf4a:	6878      	ldr	r0, [r7, #4]
 800bf4c:	f7ff fdb0 	bl	800bab0 <tcp_free>
 800bf50:	e082      	b.n	800c058 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bf52:	2300      	movs	r3, #0
 800bf54:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bf56:	2300      	movs	r3, #0
 800bf58:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf5e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf64:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf6c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	691b      	ldr	r3, [r3, #16]
 800bf72:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	7d1b      	ldrb	r3, [r3, #20]
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d126      	bne.n	800bfca <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	8adb      	ldrh	r3, [r3, #22]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d02e      	beq.n	800bfe2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bf84:	4b3b      	ldr	r3, [pc, #236]	; (800c074 <tcp_abandon+0x170>)
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	687a      	ldr	r2, [r7, #4]
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d105      	bne.n	800bf9a <tcp_abandon+0x96>
 800bf8e:	4b39      	ldr	r3, [pc, #228]	; (800c074 <tcp_abandon+0x170>)
 800bf90:	681b      	ldr	r3, [r3, #0]
 800bf92:	68db      	ldr	r3, [r3, #12]
 800bf94:	4a37      	ldr	r2, [pc, #220]	; (800c074 <tcp_abandon+0x170>)
 800bf96:	6013      	str	r3, [r2, #0]
 800bf98:	e013      	b.n	800bfc2 <tcp_abandon+0xbe>
 800bf9a:	4b36      	ldr	r3, [pc, #216]	; (800c074 <tcp_abandon+0x170>)
 800bf9c:	681b      	ldr	r3, [r3, #0]
 800bf9e:	61fb      	str	r3, [r7, #28]
 800bfa0:	e00c      	b.n	800bfbc <tcp_abandon+0xb8>
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	68db      	ldr	r3, [r3, #12]
 800bfa6:	687a      	ldr	r2, [r7, #4]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d104      	bne.n	800bfb6 <tcp_abandon+0xb2>
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	68da      	ldr	r2, [r3, #12]
 800bfb0:	69fb      	ldr	r3, [r7, #28]
 800bfb2:	60da      	str	r2, [r3, #12]
 800bfb4:	e005      	b.n	800bfc2 <tcp_abandon+0xbe>
 800bfb6:	69fb      	ldr	r3, [r7, #28]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	61fb      	str	r3, [r7, #28]
 800bfbc:	69fb      	ldr	r3, [r7, #28]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d1ef      	bne.n	800bfa2 <tcp_abandon+0x9e>
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	60da      	str	r2, [r3, #12]
 800bfc8:	e00b      	b.n	800bfe2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	8adb      	ldrh	r3, [r3, #22]
 800bfd2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bfd4:	6879      	ldr	r1, [r7, #4]
 800bfd6:	4828      	ldr	r0, [pc, #160]	; (800c078 <tcp_abandon+0x174>)
 800bfd8:	f000 ff7a 	bl	800ced0 <tcp_pcb_remove>
 800bfdc:	4b27      	ldr	r3, [pc, #156]	; (800c07c <tcp_abandon+0x178>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d004      	beq.n	800bff4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bfee:	4618      	mov	r0, r3
 800bff0:	f000 fd1c 	bl	800ca2c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d004      	beq.n	800c006 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c000:	4618      	mov	r0, r3
 800c002:	f000 fd13 	bl	800ca2c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d004      	beq.n	800c018 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c012:	4618      	mov	r0, r3
 800c014:	f000 fd0a 	bl	800ca2c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d00e      	beq.n	800c03c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c01e:	6879      	ldr	r1, [r7, #4]
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	3304      	adds	r3, #4
 800c024:	687a      	ldr	r2, [r7, #4]
 800c026:	8b12      	ldrh	r2, [r2, #24]
 800c028:	9202      	str	r2, [sp, #8]
 800c02a:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c02c:	9201      	str	r2, [sp, #4]
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	460b      	mov	r3, r1
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	69b9      	ldr	r1, [r7, #24]
 800c036:	6878      	ldr	r0, [r7, #4]
 800c038:	f004 fcbe 	bl	80109b8 <tcp_rst>
    }
    last_state = pcb->state;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	7d1b      	ldrb	r3, [r3, #20]
 800c040:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c042:	6878      	ldr	r0, [r7, #4]
 800c044:	f7ff fd34 	bl	800bab0 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c048:	693b      	ldr	r3, [r7, #16]
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d004      	beq.n	800c058 <tcp_abandon+0x154>
 800c04e:	693b      	ldr	r3, [r7, #16]
 800c050:	f06f 010c 	mvn.w	r1, #12
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	4798      	blx	r3
  }
}
 800c058:	3728      	adds	r7, #40	; 0x28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}
 800c05e:	bf00      	nop
 800c060:	08015b5c 	.word	0x08015b5c
 800c064:	08015ca0 	.word	0x08015ca0
 800c068:	08015ba0 	.word	0x08015ba0
 800c06c:	08015cbc 	.word	0x08015cbc
 800c070:	20007214 	.word	0x20007214
 800c074:	20007210 	.word	0x20007210
 800c078:	20007204 	.word	0x20007204
 800c07c:	20007200 	.word	0x20007200

0800c080 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b082      	sub	sp, #8
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c088:	2101      	movs	r1, #1
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f7ff ff3a 	bl	800bf04 <tcp_abandon>
}
 800c090:	bf00      	nop
 800c092:	3708      	adds	r7, #8
 800c094:	46bd      	mov	sp, r7
 800c096:	bd80      	pop	{r7, pc}

0800c098 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b084      	sub	sp, #16
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d106      	bne.n	800c0b4 <tcp_update_rcv_ann_wnd+0x1c>
 800c0a6:	4b25      	ldr	r3, [pc, #148]	; (800c13c <tcp_update_rcv_ann_wnd+0xa4>)
 800c0a8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c0ac:	4924      	ldr	r1, [pc, #144]	; (800c140 <tcp_update_rcv_ann_wnd+0xa8>)
 800c0ae:	4825      	ldr	r0, [pc, #148]	; (800c144 <tcp_update_rcv_ann_wnd+0xac>)
 800c0b0:	f007 ffc8 	bl	8014044 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c0b8:	687a      	ldr	r2, [r7, #4]
 800c0ba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c0bc:	4413      	add	r3, r2
 800c0be:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c4:	687a      	ldr	r2, [r7, #4]
 800c0c6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c0c8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c0cc:	bf28      	it	cs
 800c0ce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c0d2:	b292      	uxth	r2, r2
 800c0d4:	4413      	add	r3, r2
 800c0d6:	68fa      	ldr	r2, [r7, #12]
 800c0d8:	1ad3      	subs	r3, r2, r3
 800c0da:	2b00      	cmp	r3, #0
 800c0dc:	db08      	blt.n	800c0f0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0ea:	68fa      	ldr	r2, [r7, #12]
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	e020      	b.n	800c132 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	dd03      	ble.n	800c106 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	2200      	movs	r2, #0
 800c102:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c104:	e014      	b.n	800c130 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c112:	68bb      	ldr	r3, [r7, #8]
 800c114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c118:	d306      	bcc.n	800c128 <tcp_update_rcv_ann_wnd+0x90>
 800c11a:	4b08      	ldr	r3, [pc, #32]	; (800c13c <tcp_update_rcv_ann_wnd+0xa4>)
 800c11c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c120:	4909      	ldr	r1, [pc, #36]	; (800c148 <tcp_update_rcv_ann_wnd+0xb0>)
 800c122:	4808      	ldr	r0, [pc, #32]	; (800c144 <tcp_update_rcv_ann_wnd+0xac>)
 800c124:	f007 ff8e 	bl	8014044 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	b29a      	uxth	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c130:	2300      	movs	r3, #0
  }
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	08015b5c 	.word	0x08015b5c
 800c140:	08015db8 	.word	0x08015db8
 800c144:	08015ba0 	.word	0x08015ba0
 800c148:	08015ddc 	.word	0x08015ddc

0800c14c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b084      	sub	sp, #16
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d107      	bne.n	800c16e <tcp_recved+0x22>
 800c15e:	4b1f      	ldr	r3, [pc, #124]	; (800c1dc <tcp_recved+0x90>)
 800c160:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c164:	491e      	ldr	r1, [pc, #120]	; (800c1e0 <tcp_recved+0x94>)
 800c166:	481f      	ldr	r0, [pc, #124]	; (800c1e4 <tcp_recved+0x98>)
 800c168:	f007 ff6c 	bl	8014044 <iprintf>
 800c16c:	e032      	b.n	800c1d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	7d1b      	ldrb	r3, [r3, #20]
 800c172:	2b01      	cmp	r3, #1
 800c174:	d106      	bne.n	800c184 <tcp_recved+0x38>
 800c176:	4b19      	ldr	r3, [pc, #100]	; (800c1dc <tcp_recved+0x90>)
 800c178:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c17c:	491a      	ldr	r1, [pc, #104]	; (800c1e8 <tcp_recved+0x9c>)
 800c17e:	4819      	ldr	r0, [pc, #100]	; (800c1e4 <tcp_recved+0x98>)
 800c180:	f007 ff60 	bl	8014044 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c188:	887b      	ldrh	r3, [r7, #2]
 800c18a:	4413      	add	r3, r2
 800c18c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c18e:	89fb      	ldrh	r3, [r7, #14]
 800c190:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c194:	d804      	bhi.n	800c1a0 <tcp_recved+0x54>
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c19a:	89fa      	ldrh	r2, [r7, #14]
 800c19c:	429a      	cmp	r2, r3
 800c19e:	d204      	bcs.n	800c1aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c1a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800c1a8:	e002      	b.n	800c1b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	89fa      	ldrh	r2, [r7, #14]
 800c1ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c1b0:	6878      	ldr	r0, [r7, #4]
 800c1b2:	f7ff ff71 	bl	800c098 <tcp_update_rcv_ann_wnd>
 800c1b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c1b8:	68bb      	ldr	r3, [r7, #8]
 800c1ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c1be:	d309      	bcc.n	800c1d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	8b5b      	ldrh	r3, [r3, #26]
 800c1c4:	f043 0302 	orr.w	r3, r3, #2
 800c1c8:	b29a      	uxth	r2, r3
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c1ce:	6878      	ldr	r0, [r7, #4]
 800c1d0:	f003 fe3e 	bl	800fe50 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	08015b5c 	.word	0x08015b5c
 800c1e0:	08015df8 	.word	0x08015df8
 800c1e4:	08015ba0 	.word	0x08015ba0
 800c1e8:	08015e10 	.word	0x08015e10

0800c1ec <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c1ec:	b5b0      	push	{r4, r5, r7, lr}
 800c1ee:	b090      	sub	sp, #64	; 0x40
 800c1f0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c1f8:	4b94      	ldr	r3, [pc, #592]	; (800c44c <tcp_slowtmr+0x260>)
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	3301      	adds	r3, #1
 800c1fe:	4a93      	ldr	r2, [pc, #588]	; (800c44c <tcp_slowtmr+0x260>)
 800c200:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c202:	4b93      	ldr	r3, [pc, #588]	; (800c450 <tcp_slowtmr+0x264>)
 800c204:	781b      	ldrb	r3, [r3, #0]
 800c206:	3301      	adds	r3, #1
 800c208:	b2da      	uxtb	r2, r3
 800c20a:	4b91      	ldr	r3, [pc, #580]	; (800c450 <tcp_slowtmr+0x264>)
 800c20c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c20e:	2300      	movs	r3, #0
 800c210:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c212:	4b90      	ldr	r3, [pc, #576]	; (800c454 <tcp_slowtmr+0x268>)
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c218:	e29f      	b.n	800c75a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c21a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c21c:	7d1b      	ldrb	r3, [r3, #20]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d106      	bne.n	800c230 <tcp_slowtmr+0x44>
 800c222:	4b8d      	ldr	r3, [pc, #564]	; (800c458 <tcp_slowtmr+0x26c>)
 800c224:	f240 42be 	movw	r2, #1214	; 0x4be
 800c228:	498c      	ldr	r1, [pc, #560]	; (800c45c <tcp_slowtmr+0x270>)
 800c22a:	488d      	ldr	r0, [pc, #564]	; (800c460 <tcp_slowtmr+0x274>)
 800c22c:	f007 ff0a 	bl	8014044 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c232:	7d1b      	ldrb	r3, [r3, #20]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d106      	bne.n	800c246 <tcp_slowtmr+0x5a>
 800c238:	4b87      	ldr	r3, [pc, #540]	; (800c458 <tcp_slowtmr+0x26c>)
 800c23a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c23e:	4989      	ldr	r1, [pc, #548]	; (800c464 <tcp_slowtmr+0x278>)
 800c240:	4887      	ldr	r0, [pc, #540]	; (800c460 <tcp_slowtmr+0x274>)
 800c242:	f007 feff 	bl	8014044 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	7d1b      	ldrb	r3, [r3, #20]
 800c24a:	2b0a      	cmp	r3, #10
 800c24c:	d106      	bne.n	800c25c <tcp_slowtmr+0x70>
 800c24e:	4b82      	ldr	r3, [pc, #520]	; (800c458 <tcp_slowtmr+0x26c>)
 800c250:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c254:	4984      	ldr	r1, [pc, #528]	; (800c468 <tcp_slowtmr+0x27c>)
 800c256:	4882      	ldr	r0, [pc, #520]	; (800c460 <tcp_slowtmr+0x274>)
 800c258:	f007 fef4 	bl	8014044 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c25c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25e:	7f9a      	ldrb	r2, [r3, #30]
 800c260:	4b7b      	ldr	r3, [pc, #492]	; (800c450 <tcp_slowtmr+0x264>)
 800c262:	781b      	ldrb	r3, [r3, #0]
 800c264:	429a      	cmp	r2, r3
 800c266:	d105      	bne.n	800c274 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	68db      	ldr	r3, [r3, #12]
 800c270:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c272:	e272      	b.n	800c75a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c274:	4b76      	ldr	r3, [pc, #472]	; (800c450 <tcp_slowtmr+0x264>)
 800c276:	781a      	ldrb	r2, [r3, #0]
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c27c:	2300      	movs	r3, #0
 800c27e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c282:	2300      	movs	r3, #0
 800c284:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	7d1b      	ldrb	r3, [r3, #20]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d10a      	bne.n	800c2a6 <tcp_slowtmr+0xba>
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c296:	2b05      	cmp	r3, #5
 800c298:	d905      	bls.n	800c2a6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c29a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c29e:	3301      	adds	r3, #1
 800c2a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2a4:	e11e      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c2ac:	2b0b      	cmp	r3, #11
 800c2ae:	d905      	bls.n	800c2bc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c2b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c2ba:	e113      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d075      	beq.n	800c3b2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c2c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d006      	beq.n	800c2dc <tcp_slowtmr+0xf0>
 800c2ce:	4b62      	ldr	r3, [pc, #392]	; (800c458 <tcp_slowtmr+0x26c>)
 800c2d0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c2d4:	4965      	ldr	r1, [pc, #404]	; (800c46c <tcp_slowtmr+0x280>)
 800c2d6:	4862      	ldr	r0, [pc, #392]	; (800c460 <tcp_slowtmr+0x274>)
 800c2d8:	f007 feb4 	bl	8014044 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c2e0:	2b00      	cmp	r3, #0
 800c2e2:	d106      	bne.n	800c2f2 <tcp_slowtmr+0x106>
 800c2e4:	4b5c      	ldr	r3, [pc, #368]	; (800c458 <tcp_slowtmr+0x26c>)
 800c2e6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c2ea:	4961      	ldr	r1, [pc, #388]	; (800c470 <tcp_slowtmr+0x284>)
 800c2ec:	485c      	ldr	r0, [pc, #368]	; (800c460 <tcp_slowtmr+0x274>)
 800c2ee:	f007 fea9 	bl	8014044 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c2f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c2f8:	2b0b      	cmp	r3, #11
 800c2fa:	d905      	bls.n	800c308 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c2fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c300:	3301      	adds	r3, #1
 800c302:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c306:	e0ed      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c30a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c30e:	3b01      	subs	r3, #1
 800c310:	4a58      	ldr	r2, [pc, #352]	; (800c474 <tcp_slowtmr+0x288>)
 800c312:	5cd3      	ldrb	r3, [r2, r3]
 800c314:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c31c:	7c7a      	ldrb	r2, [r7, #17]
 800c31e:	429a      	cmp	r2, r3
 800c320:	d907      	bls.n	800c332 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c324:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c328:	3301      	adds	r3, #1
 800c32a:	b2da      	uxtb	r2, r3
 800c32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c334:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c338:	7c7a      	ldrb	r2, [r7, #17]
 800c33a:	429a      	cmp	r2, r3
 800c33c:	f200 80d2 	bhi.w	800c4e4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c340:	2301      	movs	r3, #1
 800c342:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d108      	bne.n	800c360 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c34e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c350:	f004 fc26 	bl	8010ba0 <tcp_zero_window_probe>
 800c354:	4603      	mov	r3, r0
 800c356:	2b00      	cmp	r3, #0
 800c358:	d014      	beq.n	800c384 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c35a:	2300      	movs	r3, #0
 800c35c:	623b      	str	r3, [r7, #32]
 800c35e:	e011      	b.n	800c384 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c362:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c366:	4619      	mov	r1, r3
 800c368:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c36a:	f003 faeb 	bl	800f944 <tcp_split_unsent_seg>
 800c36e:	4603      	mov	r3, r0
 800c370:	2b00      	cmp	r3, #0
 800c372:	d107      	bne.n	800c384 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c374:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c376:	f003 fd6b 	bl	800fe50 <tcp_output>
 800c37a:	4603      	mov	r3, r0
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d101      	bne.n	800c384 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c380:	2300      	movs	r3, #0
 800c382:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c384:	6a3b      	ldr	r3, [r7, #32]
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 80ac 	beq.w	800c4e4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c38c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38e:	2200      	movs	r2, #0
 800c390:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c396:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c39a:	2b06      	cmp	r3, #6
 800c39c:	f200 80a2 	bhi.w	800c4e4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	b2da      	uxtb	r2, r3
 800c3aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ac:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c3b0:	e098      	b.n	800c4e4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	db0f      	blt.n	800c3dc <tcp_slowtmr+0x1f0>
 800c3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3c2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c3c6:	4293      	cmp	r3, r2
 800c3c8:	d008      	beq.n	800c3dc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c3d0:	b29b      	uxth	r3, r3
 800c3d2:	3301      	adds	r3, #1
 800c3d4:	b29b      	uxth	r3, r3
 800c3d6:	b21a      	sxth	r2, r3
 800c3d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3da:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c3e8:	429a      	cmp	r2, r3
 800c3ea:	db7b      	blt.n	800c4e4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c3ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3ee:	f004 f821 	bl	8010434 <tcp_rexmit_rto_prepare>
 800c3f2:	4603      	mov	r3, r0
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d007      	beq.n	800c408 <tcp_slowtmr+0x21c>
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d171      	bne.n	800c4e4 <tcp_slowtmr+0x2f8>
 800c400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c402:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c404:	2b00      	cmp	r3, #0
 800c406:	d06d      	beq.n	800c4e4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	7d1b      	ldrb	r3, [r3, #20]
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d03a      	beq.n	800c486 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c412:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c416:	2b0c      	cmp	r3, #12
 800c418:	bf28      	it	cs
 800c41a:	230c      	movcs	r3, #12
 800c41c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c41e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c420:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c424:	10db      	asrs	r3, r3, #3
 800c426:	b21b      	sxth	r3, r3
 800c428:	461a      	mov	r2, r3
 800c42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c42c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c430:	4413      	add	r3, r2
 800c432:	7efa      	ldrb	r2, [r7, #27]
 800c434:	4910      	ldr	r1, [pc, #64]	; (800c478 <tcp_slowtmr+0x28c>)
 800c436:	5c8a      	ldrb	r2, [r1, r2]
 800c438:	4093      	lsls	r3, r2
 800c43a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c43c:	697b      	ldr	r3, [r7, #20]
 800c43e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c442:	4293      	cmp	r3, r2
 800c444:	dc1a      	bgt.n	800c47c <tcp_slowtmr+0x290>
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	b21a      	sxth	r2, r3
 800c44a:	e019      	b.n	800c480 <tcp_slowtmr+0x294>
 800c44c:	20007208 	.word	0x20007208
 800c450:	200000de 	.word	0x200000de
 800c454:	20007204 	.word	0x20007204
 800c458:	08015b5c 	.word	0x08015b5c
 800c45c:	08015ea0 	.word	0x08015ea0
 800c460:	08015ba0 	.word	0x08015ba0
 800c464:	08015ecc 	.word	0x08015ecc
 800c468:	08015ef8 	.word	0x08015ef8
 800c46c:	08015f28 	.word	0x08015f28
 800c470:	08015f5c 	.word	0x08015f5c
 800c474:	08017b44 	.word	0x08017b44
 800c478:	08017b34 	.word	0x08017b34
 800c47c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c488:	2200      	movs	r2, #0
 800c48a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c494:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c498:	4293      	cmp	r3, r2
 800c49a:	bf28      	it	cs
 800c49c:	4613      	movcs	r3, r2
 800c49e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c4a0:	8a7b      	ldrh	r3, [r7, #18]
 800c4a2:	085b      	lsrs	r3, r3, #1
 800c4a4:	b29a      	uxth	r2, r3
 800c4a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c4b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4b6:	005b      	lsls	r3, r3, #1
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	429a      	cmp	r2, r3
 800c4bc:	d206      	bcs.n	800c4cc <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c4be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c4c2:	005b      	lsls	r3, r3, #1
 800c4c4:	b29a      	uxth	r2, r3
 800c4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ce:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c4d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c4d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c4de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e0:	f004 f818 	bl	8010514 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	7d1b      	ldrb	r3, [r3, #20]
 800c4e8:	2b06      	cmp	r3, #6
 800c4ea:	d111      	bne.n	800c510 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c4ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ee:	8b5b      	ldrh	r3, [r3, #26]
 800c4f0:	f003 0310 	and.w	r3, r3, #16
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d00b      	beq.n	800c510 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c4f8:	4b9d      	ldr	r3, [pc, #628]	; (800c770 <tcp_slowtmr+0x584>)
 800c4fa:	681a      	ldr	r2, [r3, #0]
 800c4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4fe:	6a1b      	ldr	r3, [r3, #32]
 800c500:	1ad3      	subs	r3, r2, r3
 800c502:	2b28      	cmp	r3, #40	; 0x28
 800c504:	d904      	bls.n	800c510 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c506:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c50a:	3301      	adds	r3, #1
 800c50c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c512:	7a5b      	ldrb	r3, [r3, #9]
 800c514:	f003 0308 	and.w	r3, r3, #8
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d04c      	beq.n	800c5b6 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c520:	2b04      	cmp	r3, #4
 800c522:	d003      	beq.n	800c52c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c528:	2b07      	cmp	r3, #7
 800c52a:	d144      	bne.n	800c5b6 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c52c:	4b90      	ldr	r3, [pc, #576]	; (800c770 <tcp_slowtmr+0x584>)
 800c52e:	681a      	ldr	r2, [r3, #0]
 800c530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c532:	6a1b      	ldr	r3, [r3, #32]
 800c534:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c538:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c53c:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c540:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c544:	498b      	ldr	r1, [pc, #556]	; (800c774 <tcp_slowtmr+0x588>)
 800c546:	fba1 1303 	umull	r1, r3, r1, r3
 800c54a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d90a      	bls.n	800c566 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c550:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c554:	3301      	adds	r3, #1
 800c556:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c55a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c55e:	3301      	adds	r3, #1
 800c560:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c564:	e027      	b.n	800c5b6 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c566:	4b82      	ldr	r3, [pc, #520]	; (800c770 <tcp_slowtmr+0x584>)
 800c568:	681a      	ldr	r2, [r3, #0]
 800c56a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c56c:	6a1b      	ldr	r3, [r3, #32]
 800c56e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c572:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c578:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c57c:	4618      	mov	r0, r3
 800c57e:	4b7e      	ldr	r3, [pc, #504]	; (800c778 <tcp_slowtmr+0x58c>)
 800c580:	fb03 f300 	mul.w	r3, r3, r0
 800c584:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c586:	497b      	ldr	r1, [pc, #492]	; (800c774 <tcp_slowtmr+0x588>)
 800c588:	fba1 1303 	umull	r1, r3, r1, r3
 800c58c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c58e:	429a      	cmp	r2, r3
 800c590:	d911      	bls.n	800c5b6 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c592:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c594:	f004 fac4 	bl	8010b20 <tcp_keepalive>
 800c598:	4603      	mov	r3, r0
 800c59a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c59e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d107      	bne.n	800c5b6 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5a8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c5ac:	3301      	adds	r3, #1
 800c5ae:	b2da      	uxtb	r2, r3
 800c5b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c5b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d011      	beq.n	800c5e2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c5be:	4b6c      	ldr	r3, [pc, #432]	; (800c770 <tcp_slowtmr+0x584>)
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5c4:	6a1b      	ldr	r3, [r3, #32]
 800c5c6:	1ad2      	subs	r2, r2, r3
 800c5c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c5ce:	4619      	mov	r1, r3
 800c5d0:	460b      	mov	r3, r1
 800c5d2:	005b      	lsls	r3, r3, #1
 800c5d4:	440b      	add	r3, r1
 800c5d6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c5d8:	429a      	cmp	r2, r3
 800c5da:	d302      	bcc.n	800c5e2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c5dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c5de:	f000 fddb 	bl	800d198 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	7d1b      	ldrb	r3, [r3, #20]
 800c5e6:	2b03      	cmp	r3, #3
 800c5e8:	d10b      	bne.n	800c602 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c5ea:	4b61      	ldr	r3, [pc, #388]	; (800c770 <tcp_slowtmr+0x584>)
 800c5ec:	681a      	ldr	r2, [r3, #0]
 800c5ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	1ad3      	subs	r3, r2, r3
 800c5f4:	2b28      	cmp	r3, #40	; 0x28
 800c5f6:	d904      	bls.n	800c602 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c5f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c604:	7d1b      	ldrb	r3, [r3, #20]
 800c606:	2b09      	cmp	r3, #9
 800c608:	d10b      	bne.n	800c622 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c60a:	4b59      	ldr	r3, [pc, #356]	; (800c770 <tcp_slowtmr+0x584>)
 800c60c:	681a      	ldr	r2, [r3, #0]
 800c60e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	1ad3      	subs	r3, r2, r3
 800c614:	2bf0      	cmp	r3, #240	; 0xf0
 800c616:	d904      	bls.n	800c622 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c618:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c61c:	3301      	adds	r3, #1
 800c61e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c622:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c626:	2b00      	cmp	r3, #0
 800c628:	d060      	beq.n	800c6ec <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c630:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c632:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c634:	f000 fbfc 	bl	800ce30 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d010      	beq.n	800c660 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c63e:	4b4f      	ldr	r3, [pc, #316]	; (800c77c <tcp_slowtmr+0x590>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c644:	429a      	cmp	r2, r3
 800c646:	d106      	bne.n	800c656 <tcp_slowtmr+0x46a>
 800c648:	4b4d      	ldr	r3, [pc, #308]	; (800c780 <tcp_slowtmr+0x594>)
 800c64a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c64e:	494d      	ldr	r1, [pc, #308]	; (800c784 <tcp_slowtmr+0x598>)
 800c650:	484d      	ldr	r0, [pc, #308]	; (800c788 <tcp_slowtmr+0x59c>)
 800c652:	f007 fcf7 	bl	8014044 <iprintf>
        prev->next = pcb->next;
 800c656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c65c:	60da      	str	r2, [r3, #12]
 800c65e:	e00f      	b.n	800c680 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c660:	4b46      	ldr	r3, [pc, #280]	; (800c77c <tcp_slowtmr+0x590>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c666:	429a      	cmp	r2, r3
 800c668:	d006      	beq.n	800c678 <tcp_slowtmr+0x48c>
 800c66a:	4b45      	ldr	r3, [pc, #276]	; (800c780 <tcp_slowtmr+0x594>)
 800c66c:	f240 5271 	movw	r2, #1393	; 0x571
 800c670:	4946      	ldr	r1, [pc, #280]	; (800c78c <tcp_slowtmr+0x5a0>)
 800c672:	4845      	ldr	r0, [pc, #276]	; (800c788 <tcp_slowtmr+0x59c>)
 800c674:	f007 fce6 	bl	8014044 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c67a:	68db      	ldr	r3, [r3, #12]
 800c67c:	4a3f      	ldr	r2, [pc, #252]	; (800c77c <tcp_slowtmr+0x590>)
 800c67e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c680:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c684:	2b00      	cmp	r3, #0
 800c686:	d013      	beq.n	800c6b0 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c68e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c690:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c694:	3304      	adds	r3, #4
 800c696:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c698:	8ad2      	ldrh	r2, [r2, #22]
 800c69a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c69c:	8b09      	ldrh	r1, [r1, #24]
 800c69e:	9102      	str	r1, [sp, #8]
 800c6a0:	9201      	str	r2, [sp, #4]
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	4622      	mov	r2, r4
 800c6a8:	4601      	mov	r1, r0
 800c6aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c6ac:	f004 f984 	bl	80109b8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c6b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b2:	691b      	ldr	r3, [r3, #16]
 800c6b4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c6b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6b8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6be:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6c2:	68db      	ldr	r3, [r3, #12]
 800c6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c6c6:	6838      	ldr	r0, [r7, #0]
 800c6c8:	f7ff f9f2 	bl	800bab0 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c6cc:	4b30      	ldr	r3, [pc, #192]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c6ce:	2200      	movs	r2, #0
 800c6d0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d004      	beq.n	800c6e2 <tcp_slowtmr+0x4f6>
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	f06f 010c 	mvn.w	r1, #12
 800c6de:	68b8      	ldr	r0, [r7, #8]
 800c6e0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c6e2:	4b2b      	ldr	r3, [pc, #172]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c6e4:	781b      	ldrb	r3, [r3, #0]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d037      	beq.n	800c75a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c6ea:	e590      	b.n	800c20e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6ee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6f8:	7f1b      	ldrb	r3, [r3, #28]
 800c6fa:	3301      	adds	r3, #1
 800c6fc:	b2da      	uxtb	r2, r3
 800c6fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c700:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c704:	7f1a      	ldrb	r2, [r3, #28]
 800c706:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c708:	7f5b      	ldrb	r3, [r3, #29]
 800c70a:	429a      	cmp	r2, r3
 800c70c:	d325      	bcc.n	800c75a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c70e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c710:	2200      	movs	r2, #0
 800c712:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c714:	4b1e      	ldr	r3, [pc, #120]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c716:	2200      	movs	r2, #0
 800c718:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c71a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c71c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c720:	2b00      	cmp	r3, #0
 800c722:	d00b      	beq.n	800c73c <tcp_slowtmr+0x550>
 800c724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c72a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c72c:	6912      	ldr	r2, [r2, #16]
 800c72e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c730:	4610      	mov	r0, r2
 800c732:	4798      	blx	r3
 800c734:	4603      	mov	r3, r0
 800c736:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c73a:	e002      	b.n	800c742 <tcp_slowtmr+0x556>
 800c73c:	2300      	movs	r3, #0
 800c73e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c742:	4b13      	ldr	r3, [pc, #76]	; (800c790 <tcp_slowtmr+0x5a4>)
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d000      	beq.n	800c74c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c74a:	e560      	b.n	800c20e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c74c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c750:	2b00      	cmp	r3, #0
 800c752:	d102      	bne.n	800c75a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c754:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c756:	f003 fb7b 	bl	800fe50 <tcp_output>
  while (pcb != NULL) {
 800c75a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	f47f ad5c 	bne.w	800c21a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c766:	4b0b      	ldr	r3, [pc, #44]	; (800c794 <tcp_slowtmr+0x5a8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c76c:	e067      	b.n	800c83e <tcp_slowtmr+0x652>
 800c76e:	bf00      	nop
 800c770:	20007208 	.word	0x20007208
 800c774:	10624dd3 	.word	0x10624dd3
 800c778:	000124f8 	.word	0x000124f8
 800c77c:	20007204 	.word	0x20007204
 800c780:	08015b5c 	.word	0x08015b5c
 800c784:	08015f94 	.word	0x08015f94
 800c788:	08015ba0 	.word	0x08015ba0
 800c78c:	08015fc0 	.word	0x08015fc0
 800c790:	20007200 	.word	0x20007200
 800c794:	20007214 	.word	0x20007214
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c79a:	7d1b      	ldrb	r3, [r3, #20]
 800c79c:	2b0a      	cmp	r3, #10
 800c79e:	d006      	beq.n	800c7ae <tcp_slowtmr+0x5c2>
 800c7a0:	4b2b      	ldr	r3, [pc, #172]	; (800c850 <tcp_slowtmr+0x664>)
 800c7a2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c7a6:	492b      	ldr	r1, [pc, #172]	; (800c854 <tcp_slowtmr+0x668>)
 800c7a8:	482b      	ldr	r0, [pc, #172]	; (800c858 <tcp_slowtmr+0x66c>)
 800c7aa:	f007 fc4b 	bl	8014044 <iprintf>
    pcb_remove = 0;
 800c7ae:	2300      	movs	r3, #0
 800c7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c7b4:	4b29      	ldr	r3, [pc, #164]	; (800c85c <tcp_slowtmr+0x670>)
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	1ad3      	subs	r3, r2, r3
 800c7be:	2bf0      	cmp	r3, #240	; 0xf0
 800c7c0:	d904      	bls.n	800c7cc <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c7c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7c6:	3301      	adds	r3, #1
 800c7c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d02f      	beq.n	800c834 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c7d6:	f000 fb2b 	bl	800ce30 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c7da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	d010      	beq.n	800c802 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c7e0:	4b1f      	ldr	r3, [pc, #124]	; (800c860 <tcp_slowtmr+0x674>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c7e6:	429a      	cmp	r2, r3
 800c7e8:	d106      	bne.n	800c7f8 <tcp_slowtmr+0x60c>
 800c7ea:	4b19      	ldr	r3, [pc, #100]	; (800c850 <tcp_slowtmr+0x664>)
 800c7ec:	f240 52af 	movw	r2, #1455	; 0x5af
 800c7f0:	491c      	ldr	r1, [pc, #112]	; (800c864 <tcp_slowtmr+0x678>)
 800c7f2:	4819      	ldr	r0, [pc, #100]	; (800c858 <tcp_slowtmr+0x66c>)
 800c7f4:	f007 fc26 	bl	8014044 <iprintf>
        prev->next = pcb->next;
 800c7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7fa:	68da      	ldr	r2, [r3, #12]
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	60da      	str	r2, [r3, #12]
 800c800:	e00f      	b.n	800c822 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c802:	4b17      	ldr	r3, [pc, #92]	; (800c860 <tcp_slowtmr+0x674>)
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c808:	429a      	cmp	r2, r3
 800c80a:	d006      	beq.n	800c81a <tcp_slowtmr+0x62e>
 800c80c:	4b10      	ldr	r3, [pc, #64]	; (800c850 <tcp_slowtmr+0x664>)
 800c80e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c812:	4915      	ldr	r1, [pc, #84]	; (800c868 <tcp_slowtmr+0x67c>)
 800c814:	4810      	ldr	r0, [pc, #64]	; (800c858 <tcp_slowtmr+0x66c>)
 800c816:	f007 fc15 	bl	8014044 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c81a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c81c:	68db      	ldr	r3, [r3, #12]
 800c81e:	4a10      	ldr	r2, [pc, #64]	; (800c860 <tcp_slowtmr+0x674>)
 800c820:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c822:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c824:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c826:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c828:	68db      	ldr	r3, [r3, #12]
 800c82a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c82c:	69f8      	ldr	r0, [r7, #28]
 800c82e:	f7ff f93f 	bl	800bab0 <tcp_free>
 800c832:	e004      	b.n	800c83e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c83a:	68db      	ldr	r3, [r3, #12]
 800c83c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c83e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c840:	2b00      	cmp	r3, #0
 800c842:	d1a9      	bne.n	800c798 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop
 800c848:	3730      	adds	r7, #48	; 0x30
 800c84a:	46bd      	mov	sp, r7
 800c84c:	bdb0      	pop	{r4, r5, r7, pc}
 800c84e:	bf00      	nop
 800c850:	08015b5c 	.word	0x08015b5c
 800c854:	08015fec 	.word	0x08015fec
 800c858:	08015ba0 	.word	0x08015ba0
 800c85c:	20007208 	.word	0x20007208
 800c860:	20007214 	.word	0x20007214
 800c864:	0801601c 	.word	0x0801601c
 800c868:	08016044 	.word	0x08016044

0800c86c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c86c:	b580      	push	{r7, lr}
 800c86e:	b082      	sub	sp, #8
 800c870:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c872:	4b2d      	ldr	r3, [pc, #180]	; (800c928 <tcp_fasttmr+0xbc>)
 800c874:	781b      	ldrb	r3, [r3, #0]
 800c876:	3301      	adds	r3, #1
 800c878:	b2da      	uxtb	r2, r3
 800c87a:	4b2b      	ldr	r3, [pc, #172]	; (800c928 <tcp_fasttmr+0xbc>)
 800c87c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c87e:	4b2b      	ldr	r3, [pc, #172]	; (800c92c <tcp_fasttmr+0xc0>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c884:	e048      	b.n	800c918 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	7f9a      	ldrb	r2, [r3, #30]
 800c88a:	4b27      	ldr	r3, [pc, #156]	; (800c928 <tcp_fasttmr+0xbc>)
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	429a      	cmp	r2, r3
 800c890:	d03f      	beq.n	800c912 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c892:	4b25      	ldr	r3, [pc, #148]	; (800c928 <tcp_fasttmr+0xbc>)
 800c894:	781a      	ldrb	r2, [r3, #0]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	8b5b      	ldrh	r3, [r3, #26]
 800c89e:	f003 0301 	and.w	r3, r3, #1
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d010      	beq.n	800c8c8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	8b5b      	ldrh	r3, [r3, #26]
 800c8aa:	f043 0302 	orr.w	r3, r3, #2
 800c8ae:	b29a      	uxth	r2, r3
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f003 facb 	bl	800fe50 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	8b5b      	ldrh	r3, [r3, #26]
 800c8be:	f023 0303 	bic.w	r3, r3, #3
 800c8c2:	b29a      	uxth	r2, r3
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	8b5b      	ldrh	r3, [r3, #26]
 800c8cc:	f003 0308 	and.w	r3, r3, #8
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d009      	beq.n	800c8e8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	8b5b      	ldrh	r3, [r3, #26]
 800c8d8:	f023 0308 	bic.w	r3, r3, #8
 800c8dc:	b29a      	uxth	r2, r3
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f7ff fa78 	bl	800bdd8 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	68db      	ldr	r3, [r3, #12]
 800c8ec:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d00a      	beq.n	800c90c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c8f6:	4b0e      	ldr	r3, [pc, #56]	; (800c930 <tcp_fasttmr+0xc4>)
 800c8f8:	2200      	movs	r2, #0
 800c8fa:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f819 	bl	800c934 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c902:	4b0b      	ldr	r3, [pc, #44]	; (800c930 <tcp_fasttmr+0xc4>)
 800c904:	781b      	ldrb	r3, [r3, #0]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d000      	beq.n	800c90c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c90a:	e7b8      	b.n	800c87e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	607b      	str	r3, [r7, #4]
 800c910:	e002      	b.n	800c918 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1b3      	bne.n	800c886 <tcp_fasttmr+0x1a>
    }
  }
}
 800c91e:	bf00      	nop
 800c920:	bf00      	nop
 800c922:	3708      	adds	r7, #8
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	200000de 	.word	0x200000de
 800c92c:	20007204 	.word	0x20007204
 800c930:	20007200 	.word	0x20007200

0800c934 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c934:	b590      	push	{r4, r7, lr}
 800c936:	b085      	sub	sp, #20
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d109      	bne.n	800c956 <tcp_process_refused_data+0x22>
 800c942:	4b37      	ldr	r3, [pc, #220]	; (800ca20 <tcp_process_refused_data+0xec>)
 800c944:	f240 6209 	movw	r2, #1545	; 0x609
 800c948:	4936      	ldr	r1, [pc, #216]	; (800ca24 <tcp_process_refused_data+0xf0>)
 800c94a:	4837      	ldr	r0, [pc, #220]	; (800ca28 <tcp_process_refused_data+0xf4>)
 800c94c:	f007 fb7a 	bl	8014044 <iprintf>
 800c950:	f06f 030f 	mvn.w	r3, #15
 800c954:	e060      	b.n	800ca18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c95a:	7b5b      	ldrb	r3, [r3, #13]
 800c95c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c962:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	2200      	movs	r2, #0
 800c968:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c970:	2b00      	cmp	r3, #0
 800c972:	d00b      	beq.n	800c98c <tcp_process_refused_data+0x58>
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	6918      	ldr	r0, [r3, #16]
 800c97e:	2300      	movs	r3, #0
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	6879      	ldr	r1, [r7, #4]
 800c984:	47a0      	blx	r4
 800c986:	4603      	mov	r3, r0
 800c988:	73fb      	strb	r3, [r7, #15]
 800c98a:	e007      	b.n	800c99c <tcp_process_refused_data+0x68>
 800c98c:	2300      	movs	r3, #0
 800c98e:	68ba      	ldr	r2, [r7, #8]
 800c990:	6879      	ldr	r1, [r7, #4]
 800c992:	2000      	movs	r0, #0
 800c994:	f000 f8a4 	bl	800cae0 <tcp_recv_null>
 800c998:	4603      	mov	r3, r0
 800c99a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c99c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d12a      	bne.n	800c9fa <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c9a4:	7bbb      	ldrb	r3, [r7, #14]
 800c9a6:	f003 0320 	and.w	r3, r3, #32
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d033      	beq.n	800ca16 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9b2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c9b6:	d005      	beq.n	800c9c4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c9bc:	3301      	adds	r3, #1
 800c9be:	b29a      	uxth	r2, r3
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d00b      	beq.n	800c9e6 <tcp_process_refused_data+0xb2>
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	6918      	ldr	r0, [r3, #16]
 800c9d8:	2300      	movs	r3, #0
 800c9da:	2200      	movs	r2, #0
 800c9dc:	6879      	ldr	r1, [r7, #4]
 800c9de:	47a0      	blx	r4
 800c9e0:	4603      	mov	r3, r0
 800c9e2:	73fb      	strb	r3, [r7, #15]
 800c9e4:	e001      	b.n	800c9ea <tcp_process_refused_data+0xb6>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c9ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ee:	f113 0f0d 	cmn.w	r3, #13
 800c9f2:	d110      	bne.n	800ca16 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c9f4:	f06f 030c 	mvn.w	r3, #12
 800c9f8:	e00e      	b.n	800ca18 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c9fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9fe:	f113 0f0d 	cmn.w	r3, #13
 800ca02:	d102      	bne.n	800ca0a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ca04:	f06f 030c 	mvn.w	r3, #12
 800ca08:	e006      	b.n	800ca18 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	68ba      	ldr	r2, [r7, #8]
 800ca0e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ca10:	f06f 0304 	mvn.w	r3, #4
 800ca14:	e000      	b.n	800ca18 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ca16:	2300      	movs	r3, #0
}
 800ca18:	4618      	mov	r0, r3
 800ca1a:	3714      	adds	r7, #20
 800ca1c:	46bd      	mov	sp, r7
 800ca1e:	bd90      	pop	{r4, r7, pc}
 800ca20:	08015b5c 	.word	0x08015b5c
 800ca24:	0801606c 	.word	0x0801606c
 800ca28:	08015ba0 	.word	0x08015ba0

0800ca2c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	b084      	sub	sp, #16
 800ca30:	af00      	add	r7, sp, #0
 800ca32:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ca34:	e007      	b.n	800ca46 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ca3c:	6878      	ldr	r0, [r7, #4]
 800ca3e:	f000 f80a 	bl	800ca56 <tcp_seg_free>
    seg = next;
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d1f4      	bne.n	800ca36 <tcp_segs_free+0xa>
  }
}
 800ca4c:	bf00      	nop
 800ca4e:	bf00      	nop
 800ca50:	3710      	adds	r7, #16
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}

0800ca56 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ca56:	b580      	push	{r7, lr}
 800ca58:	b082      	sub	sp, #8
 800ca5a:	af00      	add	r7, sp, #0
 800ca5c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	2b00      	cmp	r3, #0
 800ca62:	d00c      	beq.n	800ca7e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	685b      	ldr	r3, [r3, #4]
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d004      	beq.n	800ca76 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	4618      	mov	r0, r3
 800ca72:	f7fe fd6d 	bl	800b550 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ca76:	6879      	ldr	r1, [r7, #4]
 800ca78:	2003      	movs	r0, #3
 800ca7a:	f7fd ff57 	bl	800a92c <memp_free>
  }
}
 800ca7e:	bf00      	nop
 800ca80:	3708      	adds	r7, #8
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d106      	bne.n	800caa4 <tcp_seg_copy+0x1c>
 800ca96:	4b0f      	ldr	r3, [pc, #60]	; (800cad4 <tcp_seg_copy+0x4c>)
 800ca98:	f240 6282 	movw	r2, #1666	; 0x682
 800ca9c:	490e      	ldr	r1, [pc, #56]	; (800cad8 <tcp_seg_copy+0x50>)
 800ca9e:	480f      	ldr	r0, [pc, #60]	; (800cadc <tcp_seg_copy+0x54>)
 800caa0:	f007 fad0 	bl	8014044 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800caa4:	2003      	movs	r0, #3
 800caa6:	f7fd fef5 	bl	800a894 <memp_malloc>
 800caaa:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d101      	bne.n	800cab6 <tcp_seg_copy+0x2e>
    return NULL;
 800cab2:	2300      	movs	r3, #0
 800cab4:	e00a      	b.n	800cacc <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800cab6:	2210      	movs	r2, #16
 800cab8:	6879      	ldr	r1, [r7, #4]
 800caba:	68f8      	ldr	r0, [r7, #12]
 800cabc:	f007 faac 	bl	8014018 <memcpy>
  pbuf_ref(cseg->p);
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	685b      	ldr	r3, [r3, #4]
 800cac4:	4618      	mov	r0, r3
 800cac6:	f7fe fde3 	bl	800b690 <pbuf_ref>
  return cseg;
 800caca:	68fb      	ldr	r3, [r7, #12]
}
 800cacc:	4618      	mov	r0, r3
 800cace:	3710      	adds	r7, #16
 800cad0:	46bd      	mov	sp, r7
 800cad2:	bd80      	pop	{r7, pc}
 800cad4:	08015b5c 	.word	0x08015b5c
 800cad8:	080160b0 	.word	0x080160b0
 800cadc:	08015ba0 	.word	0x08015ba0

0800cae0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d109      	bne.n	800cb08 <tcp_recv_null+0x28>
 800caf4:	4b12      	ldr	r3, [pc, #72]	; (800cb40 <tcp_recv_null+0x60>)
 800caf6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800cafa:	4912      	ldr	r1, [pc, #72]	; (800cb44 <tcp_recv_null+0x64>)
 800cafc:	4812      	ldr	r0, [pc, #72]	; (800cb48 <tcp_recv_null+0x68>)
 800cafe:	f007 faa1 	bl	8014044 <iprintf>
 800cb02:	f06f 030f 	mvn.w	r3, #15
 800cb06:	e016      	b.n	800cb36 <tcp_recv_null+0x56>

  if (p != NULL) {
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d009      	beq.n	800cb22 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	891b      	ldrh	r3, [r3, #8]
 800cb12:	4619      	mov	r1, r3
 800cb14:	68b8      	ldr	r0, [r7, #8]
 800cb16:	f7ff fb19 	bl	800c14c <tcp_recved>
    pbuf_free(p);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f7fe fd18 	bl	800b550 <pbuf_free>
 800cb20:	e008      	b.n	800cb34 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800cb22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d104      	bne.n	800cb34 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800cb2a:	68b8      	ldr	r0, [r7, #8]
 800cb2c:	f7ff f9be 	bl	800beac <tcp_close>
 800cb30:	4603      	mov	r3, r0
 800cb32:	e000      	b.n	800cb36 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3710      	adds	r7, #16
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	08015b5c 	.word	0x08015b5c
 800cb44:	080160cc 	.word	0x080160cc
 800cb48:	08015ba0 	.word	0x08015ba0

0800cb4c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800cb4c:	b580      	push	{r7, lr}
 800cb4e:	b086      	sub	sp, #24
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	4603      	mov	r3, r0
 800cb54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800cb56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	db01      	blt.n	800cb62 <tcp_kill_prio+0x16>
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	e000      	b.n	800cb64 <tcp_kill_prio+0x18>
 800cb62:	237f      	movs	r3, #127	; 0x7f
 800cb64:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800cb66:	7afb      	ldrb	r3, [r7, #11]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d034      	beq.n	800cbd6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800cb6c:	7afb      	ldrb	r3, [r7, #11]
 800cb6e:	3b01      	subs	r3, #1
 800cb70:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800cb72:	2300      	movs	r3, #0
 800cb74:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cb76:	2300      	movs	r3, #0
 800cb78:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cb7a:	4b19      	ldr	r3, [pc, #100]	; (800cbe0 <tcp_kill_prio+0x94>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	617b      	str	r3, [r7, #20]
 800cb80:	e01f      	b.n	800cbc2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800cb82:	697b      	ldr	r3, [r7, #20]
 800cb84:	7d5b      	ldrb	r3, [r3, #21]
 800cb86:	7afa      	ldrb	r2, [r7, #11]
 800cb88:	429a      	cmp	r2, r3
 800cb8a:	d80c      	bhi.n	800cba6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cb8c:	697b      	ldr	r3, [r7, #20]
 800cb8e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800cb90:	7afa      	ldrb	r2, [r7, #11]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d112      	bne.n	800cbbc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800cb96:	4b13      	ldr	r3, [pc, #76]	; (800cbe4 <tcp_kill_prio+0x98>)
 800cb98:	681a      	ldr	r2, [r3, #0]
 800cb9a:	697b      	ldr	r3, [r7, #20]
 800cb9c:	6a1b      	ldr	r3, [r3, #32]
 800cb9e:	1ad3      	subs	r3, r2, r3
 800cba0:	68fa      	ldr	r2, [r7, #12]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d80a      	bhi.n	800cbbc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800cba6:	4b0f      	ldr	r3, [pc, #60]	; (800cbe4 <tcp_kill_prio+0x98>)
 800cba8:	681a      	ldr	r2, [r3, #0]
 800cbaa:	697b      	ldr	r3, [r7, #20]
 800cbac:	6a1b      	ldr	r3, [r3, #32]
 800cbae:	1ad3      	subs	r3, r2, r3
 800cbb0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800cbb2:	697b      	ldr	r3, [r7, #20]
 800cbb4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	7d5b      	ldrb	r3, [r3, #21]
 800cbba:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cbbc:	697b      	ldr	r3, [r7, #20]
 800cbbe:	68db      	ldr	r3, [r3, #12]
 800cbc0:	617b      	str	r3, [r7, #20]
 800cbc2:	697b      	ldr	r3, [r7, #20]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d1dc      	bne.n	800cb82 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800cbc8:	693b      	ldr	r3, [r7, #16]
 800cbca:	2b00      	cmp	r3, #0
 800cbcc:	d004      	beq.n	800cbd8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800cbce:	6938      	ldr	r0, [r7, #16]
 800cbd0:	f7ff fa56 	bl	800c080 <tcp_abort>
 800cbd4:	e000      	b.n	800cbd8 <tcp_kill_prio+0x8c>
    return;
 800cbd6:	bf00      	nop
  }
}
 800cbd8:	3718      	adds	r7, #24
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20007204 	.word	0x20007204
 800cbe4:	20007208 	.word	0x20007208

0800cbe8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800cbe8:	b580      	push	{r7, lr}
 800cbea:	b086      	sub	sp, #24
 800cbec:	af00      	add	r7, sp, #0
 800cbee:	4603      	mov	r3, r0
 800cbf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800cbf2:	79fb      	ldrb	r3, [r7, #7]
 800cbf4:	2b08      	cmp	r3, #8
 800cbf6:	d009      	beq.n	800cc0c <tcp_kill_state+0x24>
 800cbf8:	79fb      	ldrb	r3, [r7, #7]
 800cbfa:	2b09      	cmp	r3, #9
 800cbfc:	d006      	beq.n	800cc0c <tcp_kill_state+0x24>
 800cbfe:	4b1a      	ldr	r3, [pc, #104]	; (800cc68 <tcp_kill_state+0x80>)
 800cc00:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800cc04:	4919      	ldr	r1, [pc, #100]	; (800cc6c <tcp_kill_state+0x84>)
 800cc06:	481a      	ldr	r0, [pc, #104]	; (800cc70 <tcp_kill_state+0x88>)
 800cc08:	f007 fa1c 	bl	8014044 <iprintf>

  inactivity = 0;
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc14:	4b17      	ldr	r3, [pc, #92]	; (800cc74 <tcp_kill_state+0x8c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	617b      	str	r3, [r7, #20]
 800cc1a:	e017      	b.n	800cc4c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800cc1c:	697b      	ldr	r3, [r7, #20]
 800cc1e:	7d1b      	ldrb	r3, [r3, #20]
 800cc20:	79fa      	ldrb	r2, [r7, #7]
 800cc22:	429a      	cmp	r2, r3
 800cc24:	d10f      	bne.n	800cc46 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc26:	4b14      	ldr	r3, [pc, #80]	; (800cc78 <tcp_kill_state+0x90>)
 800cc28:	681a      	ldr	r2, [r3, #0]
 800cc2a:	697b      	ldr	r3, [r7, #20]
 800cc2c:	6a1b      	ldr	r3, [r3, #32]
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	68fa      	ldr	r2, [r7, #12]
 800cc32:	429a      	cmp	r2, r3
 800cc34:	d807      	bhi.n	800cc46 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800cc36:	4b10      	ldr	r3, [pc, #64]	; (800cc78 <tcp_kill_state+0x90>)
 800cc38:	681a      	ldr	r2, [r3, #0]
 800cc3a:	697b      	ldr	r3, [r7, #20]
 800cc3c:	6a1b      	ldr	r3, [r3, #32]
 800cc3e:	1ad3      	subs	r3, r2, r3
 800cc40:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800cc42:	697b      	ldr	r3, [r7, #20]
 800cc44:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	68db      	ldr	r3, [r3, #12]
 800cc4a:	617b      	str	r3, [r7, #20]
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d1e4      	bne.n	800cc1c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800cc52:	693b      	ldr	r3, [r7, #16]
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d003      	beq.n	800cc60 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800cc58:	2100      	movs	r1, #0
 800cc5a:	6938      	ldr	r0, [r7, #16]
 800cc5c:	f7ff f952 	bl	800bf04 <tcp_abandon>
  }
}
 800cc60:	bf00      	nop
 800cc62:	3718      	adds	r7, #24
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}
 800cc68:	08015b5c 	.word	0x08015b5c
 800cc6c:	080160e8 	.word	0x080160e8
 800cc70:	08015ba0 	.word	0x08015ba0
 800cc74:	20007204 	.word	0x20007204
 800cc78:	20007208 	.word	0x20007208

0800cc7c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b084      	sub	sp, #16
 800cc80:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800cc82:	2300      	movs	r3, #0
 800cc84:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800cc86:	2300      	movs	r3, #0
 800cc88:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800cc8a:	4b12      	ldr	r3, [pc, #72]	; (800ccd4 <tcp_kill_timewait+0x58>)
 800cc8c:	681b      	ldr	r3, [r3, #0]
 800cc8e:	60fb      	str	r3, [r7, #12]
 800cc90:	e012      	b.n	800ccb8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800cc92:	4b11      	ldr	r3, [pc, #68]	; (800ccd8 <tcp_kill_timewait+0x5c>)
 800cc94:	681a      	ldr	r2, [r3, #0]
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	1ad3      	subs	r3, r2, r3
 800cc9c:	687a      	ldr	r2, [r7, #4]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d807      	bhi.n	800ccb2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800cca2:	4b0d      	ldr	r3, [pc, #52]	; (800ccd8 <tcp_kill_timewait+0x5c>)
 800cca4:	681a      	ldr	r2, [r3, #0]
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	1ad3      	subs	r3, r2, r3
 800ccac:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	68db      	ldr	r3, [r3, #12]
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d1e9      	bne.n	800cc92 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ccbe:	68bb      	ldr	r3, [r7, #8]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ccc4:	68b8      	ldr	r0, [r7, #8]
 800ccc6:	f7ff f9db 	bl	800c080 <tcp_abort>
  }
}
 800ccca:	bf00      	nop
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
 800ccd2:	bf00      	nop
 800ccd4:	20007214 	.word	0x20007214
 800ccd8:	20007208 	.word	0x20007208

0800ccdc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ccdc:	b580      	push	{r7, lr}
 800ccde:	b082      	sub	sp, #8
 800cce0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800cce2:	4b10      	ldr	r3, [pc, #64]	; (800cd24 <tcp_handle_closepend+0x48>)
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800cce8:	e014      	b.n	800cd14 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	68db      	ldr	r3, [r3, #12]
 800ccee:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	8b5b      	ldrh	r3, [r3, #26]
 800ccf4:	f003 0308 	and.w	r3, r3, #8
 800ccf8:	2b00      	cmp	r3, #0
 800ccfa:	d009      	beq.n	800cd10 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	8b5b      	ldrh	r3, [r3, #26]
 800cd00:	f023 0308 	bic.w	r3, r3, #8
 800cd04:	b29a      	uxth	r2, r3
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800cd0a:	6878      	ldr	r0, [r7, #4]
 800cd0c:	f7ff f864 	bl	800bdd8 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cd10:	683b      	ldr	r3, [r7, #0]
 800cd12:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d1e7      	bne.n	800ccea <tcp_handle_closepend+0xe>
  }
}
 800cd1a:	bf00      	nop
 800cd1c:	bf00      	nop
 800cd1e:	3708      	adds	r7, #8
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	20007204 	.word	0x20007204

0800cd28 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cd28:	b580      	push	{r7, lr}
 800cd2a:	b084      	sub	sp, #16
 800cd2c:	af00      	add	r7, sp, #0
 800cd2e:	4603      	mov	r3, r0
 800cd30:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd32:	2001      	movs	r0, #1
 800cd34:	f7fd fdae 	bl	800a894 <memp_malloc>
 800cd38:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d126      	bne.n	800cd8e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cd40:	f7ff ffcc 	bl	800ccdc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cd44:	f7ff ff9a 	bl	800cc7c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd48:	2001      	movs	r0, #1
 800cd4a:	f7fd fda3 	bl	800a894 <memp_malloc>
 800cd4e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d11b      	bne.n	800cd8e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cd56:	2009      	movs	r0, #9
 800cd58:	f7ff ff46 	bl	800cbe8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd5c:	2001      	movs	r0, #1
 800cd5e:	f7fd fd99 	bl	800a894 <memp_malloc>
 800cd62:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d111      	bne.n	800cd8e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cd6a:	2008      	movs	r0, #8
 800cd6c:	f7ff ff3c 	bl	800cbe8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd70:	2001      	movs	r0, #1
 800cd72:	f7fd fd8f 	bl	800a894 <memp_malloc>
 800cd76:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d107      	bne.n	800cd8e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cd7e:	79fb      	ldrb	r3, [r7, #7]
 800cd80:	4618      	mov	r0, r3
 800cd82:	f7ff fee3 	bl	800cb4c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cd86:	2001      	movs	r0, #1
 800cd88:	f7fd fd84 	bl	800a894 <memp_malloc>
 800cd8c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cd8e:	68fb      	ldr	r3, [r7, #12]
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	d03f      	beq.n	800ce14 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cd94:	229c      	movs	r2, #156	; 0x9c
 800cd96:	2100      	movs	r1, #0
 800cd98:	68f8      	ldr	r0, [r7, #12]
 800cd9a:	f007 f94b 	bl	8014034 <memset>
    pcb->prio = prio;
 800cd9e:	68fb      	ldr	r3, [r7, #12]
 800cda0:	79fa      	ldrb	r2, [r7, #7]
 800cda2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cda4:	68fb      	ldr	r3, [r7, #12]
 800cda6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cdaa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cdb4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	22ff      	movs	r2, #255	; 0xff
 800cdc2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cdca:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2206      	movs	r2, #6
 800cdd0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cdd4:	68fb      	ldr	r3, [r7, #12]
 800cdd6:	2206      	movs	r2, #6
 800cdd8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cde0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	2201      	movs	r2, #1
 800cde6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cdea:	4b0d      	ldr	r3, [pc, #52]	; (800ce20 <tcp_alloc+0xf8>)
 800cdec:	681a      	ldr	r2, [r3, #0]
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cdf2:	4b0c      	ldr	r3, [pc, #48]	; (800ce24 <tcp_alloc+0xfc>)
 800cdf4:	781a      	ldrb	r2, [r3, #0]
 800cdf6:	68fb      	ldr	r3, [r7, #12]
 800cdf8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ce00:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	4a08      	ldr	r2, [pc, #32]	; (800ce28 <tcp_alloc+0x100>)
 800ce08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	4a07      	ldr	r2, [pc, #28]	; (800ce2c <tcp_alloc+0x104>)
 800ce10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800ce14:	68fb      	ldr	r3, [r7, #12]
}
 800ce16:	4618      	mov	r0, r3
 800ce18:	3710      	adds	r7, #16
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	bd80      	pop	{r7, pc}
 800ce1e:	bf00      	nop
 800ce20:	20007208 	.word	0x20007208
 800ce24:	200000de 	.word	0x200000de
 800ce28:	0800cae1 	.word	0x0800cae1
 800ce2c:	006ddd00 	.word	0x006ddd00

0800ce30 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800ce30:	b580      	push	{r7, lr}
 800ce32:	b082      	sub	sp, #8
 800ce34:	af00      	add	r7, sp, #0
 800ce36:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2b00      	cmp	r3, #0
 800ce3c:	d107      	bne.n	800ce4e <tcp_pcb_purge+0x1e>
 800ce3e:	4b21      	ldr	r3, [pc, #132]	; (800cec4 <tcp_pcb_purge+0x94>)
 800ce40:	f640 0251 	movw	r2, #2129	; 0x851
 800ce44:	4920      	ldr	r1, [pc, #128]	; (800cec8 <tcp_pcb_purge+0x98>)
 800ce46:	4821      	ldr	r0, [pc, #132]	; (800cecc <tcp_pcb_purge+0x9c>)
 800ce48:	f007 f8fc 	bl	8014044 <iprintf>
 800ce4c:	e037      	b.n	800cebe <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	7d1b      	ldrb	r3, [r3, #20]
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d033      	beq.n	800cebe <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800ce5a:	2b0a      	cmp	r3, #10
 800ce5c:	d02f      	beq.n	800cebe <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800ce62:	2b01      	cmp	r3, #1
 800ce64:	d02b      	beq.n	800cebe <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d007      	beq.n	800ce7e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ce72:	4618      	mov	r0, r3
 800ce74:	f7fe fb6c 	bl	800b550 <pbuf_free>
      pcb->refused_data = NULL;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2200      	movs	r2, #0
 800ce7c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d002      	beq.n	800ce8c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f000 f986 	bl	800d198 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ce92:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce98:	4618      	mov	r0, r3
 800ce9a:	f7ff fdc7 	bl	800ca2c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cea2:	4618      	mov	r0, r3
 800cea4:	f7ff fdc2 	bl	800ca2c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2200      	movs	r2, #0
 800ceac:	66da      	str	r2, [r3, #108]	; 0x6c
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cebe:	3708      	adds	r7, #8
 800cec0:	46bd      	mov	sp, r7
 800cec2:	bd80      	pop	{r7, pc}
 800cec4:	08015b5c 	.word	0x08015b5c
 800cec8:	080161a8 	.word	0x080161a8
 800cecc:	08015ba0 	.word	0x08015ba0

0800ced0 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800ced0:	b580      	push	{r7, lr}
 800ced2:	b084      	sub	sp, #16
 800ced4:	af00      	add	r7, sp, #0
 800ced6:	6078      	str	r0, [r7, #4]
 800ced8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d106      	bne.n	800ceee <tcp_pcb_remove+0x1e>
 800cee0:	4b3e      	ldr	r3, [pc, #248]	; (800cfdc <tcp_pcb_remove+0x10c>)
 800cee2:	f640 0283 	movw	r2, #2179	; 0x883
 800cee6:	493e      	ldr	r1, [pc, #248]	; (800cfe0 <tcp_pcb_remove+0x110>)
 800cee8:	483e      	ldr	r0, [pc, #248]	; (800cfe4 <tcp_pcb_remove+0x114>)
 800ceea:	f007 f8ab 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d106      	bne.n	800cf02 <tcp_pcb_remove+0x32>
 800cef4:	4b39      	ldr	r3, [pc, #228]	; (800cfdc <tcp_pcb_remove+0x10c>)
 800cef6:	f640 0284 	movw	r2, #2180	; 0x884
 800cefa:	493b      	ldr	r1, [pc, #236]	; (800cfe8 <tcp_pcb_remove+0x118>)
 800cefc:	4839      	ldr	r0, [pc, #228]	; (800cfe4 <tcp_pcb_remove+0x114>)
 800cefe:	f007 f8a1 	bl	8014044 <iprintf>

  TCP_RMV(pcblist, pcb);
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d105      	bne.n	800cf18 <tcp_pcb_remove+0x48>
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	68da      	ldr	r2, [r3, #12]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	601a      	str	r2, [r3, #0]
 800cf16:	e013      	b.n	800cf40 <tcp_pcb_remove+0x70>
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	60fb      	str	r3, [r7, #12]
 800cf1e:	e00c      	b.n	800cf3a <tcp_pcb_remove+0x6a>
 800cf20:	68fb      	ldr	r3, [r7, #12]
 800cf22:	68db      	ldr	r3, [r3, #12]
 800cf24:	683a      	ldr	r2, [r7, #0]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d104      	bne.n	800cf34 <tcp_pcb_remove+0x64>
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	60da      	str	r2, [r3, #12]
 800cf32:	e005      	b.n	800cf40 <tcp_pcb_remove+0x70>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	68db      	ldr	r3, [r3, #12]
 800cf38:	60fb      	str	r3, [r7, #12]
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1ef      	bne.n	800cf20 <tcp_pcb_remove+0x50>
 800cf40:	683b      	ldr	r3, [r7, #0]
 800cf42:	2200      	movs	r2, #0
 800cf44:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cf46:	6838      	ldr	r0, [r7, #0]
 800cf48:	f7ff ff72 	bl	800ce30 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cf4c:	683b      	ldr	r3, [r7, #0]
 800cf4e:	7d1b      	ldrb	r3, [r3, #20]
 800cf50:	2b0a      	cmp	r3, #10
 800cf52:	d013      	beq.n	800cf7c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cf54:	683b      	ldr	r3, [r7, #0]
 800cf56:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cf58:	2b01      	cmp	r3, #1
 800cf5a:	d00f      	beq.n	800cf7c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cf5c:	683b      	ldr	r3, [r7, #0]
 800cf5e:	8b5b      	ldrh	r3, [r3, #26]
 800cf60:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d009      	beq.n	800cf7c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cf68:	683b      	ldr	r3, [r7, #0]
 800cf6a:	8b5b      	ldrh	r3, [r3, #26]
 800cf6c:	f043 0302 	orr.w	r3, r3, #2
 800cf70:	b29a      	uxth	r2, r3
 800cf72:	683b      	ldr	r3, [r7, #0]
 800cf74:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cf76:	6838      	ldr	r0, [r7, #0]
 800cf78:	f002 ff6a 	bl	800fe50 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	7d1b      	ldrb	r3, [r3, #20]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d020      	beq.n	800cfc6 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cf84:	683b      	ldr	r3, [r7, #0]
 800cf86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d006      	beq.n	800cf9a <tcp_pcb_remove+0xca>
 800cf8c:	4b13      	ldr	r3, [pc, #76]	; (800cfdc <tcp_pcb_remove+0x10c>)
 800cf8e:	f640 0293 	movw	r2, #2195	; 0x893
 800cf92:	4916      	ldr	r1, [pc, #88]	; (800cfec <tcp_pcb_remove+0x11c>)
 800cf94:	4813      	ldr	r0, [pc, #76]	; (800cfe4 <tcp_pcb_remove+0x114>)
 800cf96:	f007 f855 	bl	8014044 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cf9a:	683b      	ldr	r3, [r7, #0]
 800cf9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	d006      	beq.n	800cfb0 <tcp_pcb_remove+0xe0>
 800cfa2:	4b0e      	ldr	r3, [pc, #56]	; (800cfdc <tcp_pcb_remove+0x10c>)
 800cfa4:	f640 0294 	movw	r2, #2196	; 0x894
 800cfa8:	4911      	ldr	r1, [pc, #68]	; (800cff0 <tcp_pcb_remove+0x120>)
 800cfaa:	480e      	ldr	r0, [pc, #56]	; (800cfe4 <tcp_pcb_remove+0x114>)
 800cfac:	f007 f84a 	bl	8014044 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cfb0:	683b      	ldr	r3, [r7, #0]
 800cfb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d006      	beq.n	800cfc6 <tcp_pcb_remove+0xf6>
 800cfb8:	4b08      	ldr	r3, [pc, #32]	; (800cfdc <tcp_pcb_remove+0x10c>)
 800cfba:	f640 0296 	movw	r2, #2198	; 0x896
 800cfbe:	490d      	ldr	r1, [pc, #52]	; (800cff4 <tcp_pcb_remove+0x124>)
 800cfc0:	4808      	ldr	r0, [pc, #32]	; (800cfe4 <tcp_pcb_remove+0x114>)
 800cfc2:	f007 f83f 	bl	8014044 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	2200      	movs	r2, #0
 800cfca:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	2200      	movs	r2, #0
 800cfd0:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cfd2:	bf00      	nop
 800cfd4:	3710      	adds	r7, #16
 800cfd6:	46bd      	mov	sp, r7
 800cfd8:	bd80      	pop	{r7, pc}
 800cfda:	bf00      	nop
 800cfdc:	08015b5c 	.word	0x08015b5c
 800cfe0:	080161c4 	.word	0x080161c4
 800cfe4:	08015ba0 	.word	0x08015ba0
 800cfe8:	080161e0 	.word	0x080161e0
 800cfec:	08016200 	.word	0x08016200
 800cff0:	08016218 	.word	0x08016218
 800cff4:	08016234 	.word	0x08016234

0800cff8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cff8:	b580      	push	{r7, lr}
 800cffa:	b082      	sub	sp, #8
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d106      	bne.n	800d014 <tcp_next_iss+0x1c>
 800d006:	4b0a      	ldr	r3, [pc, #40]	; (800d030 <tcp_next_iss+0x38>)
 800d008:	f640 02af 	movw	r2, #2223	; 0x8af
 800d00c:	4909      	ldr	r1, [pc, #36]	; (800d034 <tcp_next_iss+0x3c>)
 800d00e:	480a      	ldr	r0, [pc, #40]	; (800d038 <tcp_next_iss+0x40>)
 800d010:	f007 f818 	bl	8014044 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d014:	4b09      	ldr	r3, [pc, #36]	; (800d03c <tcp_next_iss+0x44>)
 800d016:	681a      	ldr	r2, [r3, #0]
 800d018:	4b09      	ldr	r3, [pc, #36]	; (800d040 <tcp_next_iss+0x48>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4413      	add	r3, r2
 800d01e:	4a07      	ldr	r2, [pc, #28]	; (800d03c <tcp_next_iss+0x44>)
 800d020:	6013      	str	r3, [r2, #0]
  return iss;
 800d022:	4b06      	ldr	r3, [pc, #24]	; (800d03c <tcp_next_iss+0x44>)
 800d024:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d026:	4618      	mov	r0, r3
 800d028:	3708      	adds	r7, #8
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	08015b5c 	.word	0x08015b5c
 800d034:	0801624c 	.word	0x0801624c
 800d038:	08015ba0 	.word	0x08015ba0
 800d03c:	2000000c 	.word	0x2000000c
 800d040:	20007208 	.word	0x20007208

0800d044 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b086      	sub	sp, #24
 800d048:	af00      	add	r7, sp, #0
 800d04a:	4603      	mov	r3, r0
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
 800d050:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	2b00      	cmp	r3, #0
 800d056:	d106      	bne.n	800d066 <tcp_eff_send_mss_netif+0x22>
 800d058:	4b14      	ldr	r3, [pc, #80]	; (800d0ac <tcp_eff_send_mss_netif+0x68>)
 800d05a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d05e:	4914      	ldr	r1, [pc, #80]	; (800d0b0 <tcp_eff_send_mss_netif+0x6c>)
 800d060:	4814      	ldr	r0, [pc, #80]	; (800d0b4 <tcp_eff_send_mss_netif+0x70>)
 800d062:	f006 ffef 	bl	8014044 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d101      	bne.n	800d070 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d06c:	89fb      	ldrh	r3, [r7, #14]
 800d06e:	e019      	b.n	800d0a4 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d074:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d076:	8afb      	ldrh	r3, [r7, #22]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d012      	beq.n	800d0a2 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d07c:	2328      	movs	r3, #40	; 0x28
 800d07e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d080:	8afa      	ldrh	r2, [r7, #22]
 800d082:	8abb      	ldrh	r3, [r7, #20]
 800d084:	429a      	cmp	r2, r3
 800d086:	d904      	bls.n	800d092 <tcp_eff_send_mss_netif+0x4e>
 800d088:	8afa      	ldrh	r2, [r7, #22]
 800d08a:	8abb      	ldrh	r3, [r7, #20]
 800d08c:	1ad3      	subs	r3, r2, r3
 800d08e:	b29b      	uxth	r3, r3
 800d090:	e000      	b.n	800d094 <tcp_eff_send_mss_netif+0x50>
 800d092:	2300      	movs	r3, #0
 800d094:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d096:	8a7a      	ldrh	r2, [r7, #18]
 800d098:	89fb      	ldrh	r3, [r7, #14]
 800d09a:	4293      	cmp	r3, r2
 800d09c:	bf28      	it	cs
 800d09e:	4613      	movcs	r3, r2
 800d0a0:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d0a2:	89fb      	ldrh	r3, [r7, #14]
}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3718      	adds	r7, #24
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	08015b5c 	.word	0x08015b5c
 800d0b0:	08016268 	.word	0x08016268
 800d0b4:	08015ba0 	.word	0x08015ba0

0800d0b8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b084      	sub	sp, #16
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d119      	bne.n	800d100 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d0cc:	4b10      	ldr	r3, [pc, #64]	; (800d110 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d0ce:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d0d2:	4910      	ldr	r1, [pc, #64]	; (800d114 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d0d4:	4810      	ldr	r0, [pc, #64]	; (800d118 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d0d6:	f006 ffb5 	bl	8014044 <iprintf>

  while (pcb != NULL) {
 800d0da:	e011      	b.n	800d100 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d0dc:	68fb      	ldr	r3, [r7, #12]
 800d0de:	681a      	ldr	r2, [r3, #0]
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	429a      	cmp	r2, r3
 800d0e6:	d108      	bne.n	800d0fa <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	68db      	ldr	r3, [r3, #12]
 800d0ec:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d0ee:	68f8      	ldr	r0, [r7, #12]
 800d0f0:	f7fe ffc6 	bl	800c080 <tcp_abort>
      pcb = next;
 800d0f4:	68bb      	ldr	r3, [r7, #8]
 800d0f6:	60fb      	str	r3, [r7, #12]
 800d0f8:	e002      	b.n	800d100 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	68db      	ldr	r3, [r3, #12]
 800d0fe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d1ea      	bne.n	800d0dc <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d106:	bf00      	nop
 800d108:	bf00      	nop
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	08015b5c 	.word	0x08015b5c
 800d114:	08016290 	.word	0x08016290
 800d118:	08015ba0 	.word	0x08015ba0

0800d11c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d02a      	beq.n	800d182 <tcp_netif_ip_addr_changed+0x66>
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	2b00      	cmp	r3, #0
 800d132:	d026      	beq.n	800d182 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d134:	4b15      	ldr	r3, [pc, #84]	; (800d18c <tcp_netif_ip_addr_changed+0x70>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	4619      	mov	r1, r3
 800d13a:	6878      	ldr	r0, [r7, #4]
 800d13c:	f7ff ffbc 	bl	800d0b8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d140:	4b13      	ldr	r3, [pc, #76]	; (800d190 <tcp_netif_ip_addr_changed+0x74>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	4619      	mov	r1, r3
 800d146:	6878      	ldr	r0, [r7, #4]
 800d148:	f7ff ffb6 	bl	800d0b8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d017      	beq.n	800d182 <tcp_netif_ip_addr_changed+0x66>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d013      	beq.n	800d182 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d15a:	4b0e      	ldr	r3, [pc, #56]	; (800d194 <tcp_netif_ip_addr_changed+0x78>)
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	60fb      	str	r3, [r7, #12]
 800d160:	e00c      	b.n	800d17c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681a      	ldr	r2, [r3, #0]
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	429a      	cmp	r2, r3
 800d16c:	d103      	bne.n	800d176 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	681a      	ldr	r2, [r3, #0]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d176:	68fb      	ldr	r3, [r7, #12]
 800d178:	68db      	ldr	r3, [r3, #12]
 800d17a:	60fb      	str	r3, [r7, #12]
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	2b00      	cmp	r3, #0
 800d180:	d1ef      	bne.n	800d162 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d182:	bf00      	nop
 800d184:	3710      	adds	r7, #16
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}
 800d18a:	bf00      	nop
 800d18c:	20007204 	.word	0x20007204
 800d190:	20007210 	.word	0x20007210
 800d194:	2000720c 	.word	0x2000720c

0800d198 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b082      	sub	sp, #8
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d007      	beq.n	800d1b8 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d1ac:	4618      	mov	r0, r3
 800d1ae:	f7ff fc3d 	bl	800ca2c <tcp_segs_free>
    pcb->ooseq = NULL;
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d1b8:	bf00      	nop
 800d1ba:	3708      	adds	r7, #8
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d1c0:	b590      	push	{r4, r7, lr}
 800d1c2:	b08d      	sub	sp, #52	; 0x34
 800d1c4:	af04      	add	r7, sp, #16
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d105      	bne.n	800d1dc <tcp_input+0x1c>
 800d1d0:	4b9b      	ldr	r3, [pc, #620]	; (800d440 <tcp_input+0x280>)
 800d1d2:	2283      	movs	r2, #131	; 0x83
 800d1d4:	499b      	ldr	r1, [pc, #620]	; (800d444 <tcp_input+0x284>)
 800d1d6:	489c      	ldr	r0, [pc, #624]	; (800d448 <tcp_input+0x288>)
 800d1d8:	f006 ff34 	bl	8014044 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	4a9a      	ldr	r2, [pc, #616]	; (800d44c <tcp_input+0x28c>)
 800d1e2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	895b      	ldrh	r3, [r3, #10]
 800d1e8:	2b13      	cmp	r3, #19
 800d1ea:	f240 83c4 	bls.w	800d976 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d1ee:	4b98      	ldr	r3, [pc, #608]	; (800d450 <tcp_input+0x290>)
 800d1f0:	695b      	ldr	r3, [r3, #20]
 800d1f2:	4a97      	ldr	r2, [pc, #604]	; (800d450 <tcp_input+0x290>)
 800d1f4:	6812      	ldr	r2, [r2, #0]
 800d1f6:	4611      	mov	r1, r2
 800d1f8:	4618      	mov	r0, r3
 800d1fa:	f005 ff8b 	bl	8013114 <ip4_addr_isbroadcast_u32>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	f040 83ba 	bne.w	800d97a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d206:	4b92      	ldr	r3, [pc, #584]	; (800d450 <tcp_input+0x290>)
 800d208:	695b      	ldr	r3, [r3, #20]
 800d20a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d20e:	2be0      	cmp	r3, #224	; 0xe0
 800d210:	f000 83b3 	beq.w	800d97a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d214:	4b8d      	ldr	r3, [pc, #564]	; (800d44c <tcp_input+0x28c>)
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	899b      	ldrh	r3, [r3, #12]
 800d21a:	b29b      	uxth	r3, r3
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fc fee4 	bl	8009fea <lwip_htons>
 800d222:	4603      	mov	r3, r0
 800d224:	0b1b      	lsrs	r3, r3, #12
 800d226:	b29b      	uxth	r3, r3
 800d228:	b2db      	uxtb	r3, r3
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d22e:	7cbb      	ldrb	r3, [r7, #18]
 800d230:	2b13      	cmp	r3, #19
 800d232:	f240 83a4 	bls.w	800d97e <tcp_input+0x7be>
 800d236:	7cbb      	ldrb	r3, [r7, #18]
 800d238:	b29a      	uxth	r2, r3
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	891b      	ldrh	r3, [r3, #8]
 800d23e:	429a      	cmp	r2, r3
 800d240:	f200 839d 	bhi.w	800d97e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d244:	7cbb      	ldrb	r3, [r7, #18]
 800d246:	b29b      	uxth	r3, r3
 800d248:	3b14      	subs	r3, #20
 800d24a:	b29a      	uxth	r2, r3
 800d24c:	4b81      	ldr	r3, [pc, #516]	; (800d454 <tcp_input+0x294>)
 800d24e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d250:	4b81      	ldr	r3, [pc, #516]	; (800d458 <tcp_input+0x298>)
 800d252:	2200      	movs	r2, #0
 800d254:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	895a      	ldrh	r2, [r3, #10]
 800d25a:	7cbb      	ldrb	r3, [r7, #18]
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	429a      	cmp	r2, r3
 800d260:	d309      	bcc.n	800d276 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d262:	4b7c      	ldr	r3, [pc, #496]	; (800d454 <tcp_input+0x294>)
 800d264:	881a      	ldrh	r2, [r3, #0]
 800d266:	4b7d      	ldr	r3, [pc, #500]	; (800d45c <tcp_input+0x29c>)
 800d268:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d26a:	7cbb      	ldrb	r3, [r7, #18]
 800d26c:	4619      	mov	r1, r3
 800d26e:	6878      	ldr	r0, [r7, #4]
 800d270:	f7fe f8e8 	bl	800b444 <pbuf_remove_header>
 800d274:	e04e      	b.n	800d314 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d105      	bne.n	800d28a <tcp_input+0xca>
 800d27e:	4b70      	ldr	r3, [pc, #448]	; (800d440 <tcp_input+0x280>)
 800d280:	22c2      	movs	r2, #194	; 0xc2
 800d282:	4977      	ldr	r1, [pc, #476]	; (800d460 <tcp_input+0x2a0>)
 800d284:	4870      	ldr	r0, [pc, #448]	; (800d448 <tcp_input+0x288>)
 800d286:	f006 fedd 	bl	8014044 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d28a:	2114      	movs	r1, #20
 800d28c:	6878      	ldr	r0, [r7, #4]
 800d28e:	f7fe f8d9 	bl	800b444 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	895a      	ldrh	r2, [r3, #10]
 800d296:	4b71      	ldr	r3, [pc, #452]	; (800d45c <tcp_input+0x29c>)
 800d298:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d29a:	4b6e      	ldr	r3, [pc, #440]	; (800d454 <tcp_input+0x294>)
 800d29c:	881a      	ldrh	r2, [r3, #0]
 800d29e:	4b6f      	ldr	r3, [pc, #444]	; (800d45c <tcp_input+0x29c>)
 800d2a0:	881b      	ldrh	r3, [r3, #0]
 800d2a2:	1ad3      	subs	r3, r2, r3
 800d2a4:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d2a6:	4b6d      	ldr	r3, [pc, #436]	; (800d45c <tcp_input+0x29c>)
 800d2a8:	881b      	ldrh	r3, [r3, #0]
 800d2aa:	4619      	mov	r1, r3
 800d2ac:	6878      	ldr	r0, [r7, #4]
 800d2ae:	f7fe f8c9 	bl	800b444 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	681b      	ldr	r3, [r3, #0]
 800d2b6:	895b      	ldrh	r3, [r3, #10]
 800d2b8:	8a3a      	ldrh	r2, [r7, #16]
 800d2ba:	429a      	cmp	r2, r3
 800d2bc:	f200 8361 	bhi.w	800d982 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	685b      	ldr	r3, [r3, #4]
 800d2c6:	4a64      	ldr	r2, [pc, #400]	; (800d458 <tcp_input+0x298>)
 800d2c8:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	8a3a      	ldrh	r2, [r7, #16]
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7fe f8b6 	bl	800b444 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	891a      	ldrh	r2, [r3, #8]
 800d2dc:	8a3b      	ldrh	r3, [r7, #16]
 800d2de:	1ad3      	subs	r3, r2, r3
 800d2e0:	b29a      	uxth	r2, r3
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	895b      	ldrh	r3, [r3, #10]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d005      	beq.n	800d2fa <tcp_input+0x13a>
 800d2ee:	4b54      	ldr	r3, [pc, #336]	; (800d440 <tcp_input+0x280>)
 800d2f0:	22df      	movs	r2, #223	; 0xdf
 800d2f2:	495c      	ldr	r1, [pc, #368]	; (800d464 <tcp_input+0x2a4>)
 800d2f4:	4854      	ldr	r0, [pc, #336]	; (800d448 <tcp_input+0x288>)
 800d2f6:	f006 fea5 	bl	8014044 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	891a      	ldrh	r2, [r3, #8]
 800d2fe:	687b      	ldr	r3, [r7, #4]
 800d300:	681b      	ldr	r3, [r3, #0]
 800d302:	891b      	ldrh	r3, [r3, #8]
 800d304:	429a      	cmp	r2, r3
 800d306:	d005      	beq.n	800d314 <tcp_input+0x154>
 800d308:	4b4d      	ldr	r3, [pc, #308]	; (800d440 <tcp_input+0x280>)
 800d30a:	22e0      	movs	r2, #224	; 0xe0
 800d30c:	4956      	ldr	r1, [pc, #344]	; (800d468 <tcp_input+0x2a8>)
 800d30e:	484e      	ldr	r0, [pc, #312]	; (800d448 <tcp_input+0x288>)
 800d310:	f006 fe98 	bl	8014044 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d314:	4b4d      	ldr	r3, [pc, #308]	; (800d44c <tcp_input+0x28c>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	881b      	ldrh	r3, [r3, #0]
 800d31a:	b29b      	uxth	r3, r3
 800d31c:	4a4b      	ldr	r2, [pc, #300]	; (800d44c <tcp_input+0x28c>)
 800d31e:	6814      	ldr	r4, [r2, #0]
 800d320:	4618      	mov	r0, r3
 800d322:	f7fc fe62 	bl	8009fea <lwip_htons>
 800d326:	4603      	mov	r3, r0
 800d328:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d32a:	4b48      	ldr	r3, [pc, #288]	; (800d44c <tcp_input+0x28c>)
 800d32c:	681b      	ldr	r3, [r3, #0]
 800d32e:	885b      	ldrh	r3, [r3, #2]
 800d330:	b29b      	uxth	r3, r3
 800d332:	4a46      	ldr	r2, [pc, #280]	; (800d44c <tcp_input+0x28c>)
 800d334:	6814      	ldr	r4, [r2, #0]
 800d336:	4618      	mov	r0, r3
 800d338:	f7fc fe57 	bl	8009fea <lwip_htons>
 800d33c:	4603      	mov	r3, r0
 800d33e:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d340:	4b42      	ldr	r3, [pc, #264]	; (800d44c <tcp_input+0x28c>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	685b      	ldr	r3, [r3, #4]
 800d346:	4a41      	ldr	r2, [pc, #260]	; (800d44c <tcp_input+0x28c>)
 800d348:	6814      	ldr	r4, [r2, #0]
 800d34a:	4618      	mov	r0, r3
 800d34c:	f7fc fe62 	bl	800a014 <lwip_htonl>
 800d350:	4603      	mov	r3, r0
 800d352:	6063      	str	r3, [r4, #4]
 800d354:	6863      	ldr	r3, [r4, #4]
 800d356:	4a45      	ldr	r2, [pc, #276]	; (800d46c <tcp_input+0x2ac>)
 800d358:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d35a:	4b3c      	ldr	r3, [pc, #240]	; (800d44c <tcp_input+0x28c>)
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	689b      	ldr	r3, [r3, #8]
 800d360:	4a3a      	ldr	r2, [pc, #232]	; (800d44c <tcp_input+0x28c>)
 800d362:	6814      	ldr	r4, [r2, #0]
 800d364:	4618      	mov	r0, r3
 800d366:	f7fc fe55 	bl	800a014 <lwip_htonl>
 800d36a:	4603      	mov	r3, r0
 800d36c:	60a3      	str	r3, [r4, #8]
 800d36e:	68a3      	ldr	r3, [r4, #8]
 800d370:	4a3f      	ldr	r2, [pc, #252]	; (800d470 <tcp_input+0x2b0>)
 800d372:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d374:	4b35      	ldr	r3, [pc, #212]	; (800d44c <tcp_input+0x28c>)
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	89db      	ldrh	r3, [r3, #14]
 800d37a:	b29b      	uxth	r3, r3
 800d37c:	4a33      	ldr	r2, [pc, #204]	; (800d44c <tcp_input+0x28c>)
 800d37e:	6814      	ldr	r4, [r2, #0]
 800d380:	4618      	mov	r0, r3
 800d382:	f7fc fe32 	bl	8009fea <lwip_htons>
 800d386:	4603      	mov	r3, r0
 800d388:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d38a:	4b30      	ldr	r3, [pc, #192]	; (800d44c <tcp_input+0x28c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	899b      	ldrh	r3, [r3, #12]
 800d390:	b29b      	uxth	r3, r3
 800d392:	4618      	mov	r0, r3
 800d394:	f7fc fe29 	bl	8009fea <lwip_htons>
 800d398:	4603      	mov	r3, r0
 800d39a:	b2db      	uxtb	r3, r3
 800d39c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d3a0:	b2da      	uxtb	r2, r3
 800d3a2:	4b34      	ldr	r3, [pc, #208]	; (800d474 <tcp_input+0x2b4>)
 800d3a4:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	891a      	ldrh	r2, [r3, #8]
 800d3aa:	4b33      	ldr	r3, [pc, #204]	; (800d478 <tcp_input+0x2b8>)
 800d3ac:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d3ae:	4b31      	ldr	r3, [pc, #196]	; (800d474 <tcp_input+0x2b4>)
 800d3b0:	781b      	ldrb	r3, [r3, #0]
 800d3b2:	f003 0303 	and.w	r3, r3, #3
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d00c      	beq.n	800d3d4 <tcp_input+0x214>
    tcplen++;
 800d3ba:	4b2f      	ldr	r3, [pc, #188]	; (800d478 <tcp_input+0x2b8>)
 800d3bc:	881b      	ldrh	r3, [r3, #0]
 800d3be:	3301      	adds	r3, #1
 800d3c0:	b29a      	uxth	r2, r3
 800d3c2:	4b2d      	ldr	r3, [pc, #180]	; (800d478 <tcp_input+0x2b8>)
 800d3c4:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	891a      	ldrh	r2, [r3, #8]
 800d3ca:	4b2b      	ldr	r3, [pc, #172]	; (800d478 <tcp_input+0x2b8>)
 800d3cc:	881b      	ldrh	r3, [r3, #0]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	f200 82d9 	bhi.w	800d986 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d3d4:	2300      	movs	r3, #0
 800d3d6:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3d8:	4b28      	ldr	r3, [pc, #160]	; (800d47c <tcp_input+0x2bc>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	61fb      	str	r3, [r7, #28]
 800d3de:	e09d      	b.n	800d51c <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d3e0:	69fb      	ldr	r3, [r7, #28]
 800d3e2:	7d1b      	ldrb	r3, [r3, #20]
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d105      	bne.n	800d3f4 <tcp_input+0x234>
 800d3e8:	4b15      	ldr	r3, [pc, #84]	; (800d440 <tcp_input+0x280>)
 800d3ea:	22fb      	movs	r2, #251	; 0xfb
 800d3ec:	4924      	ldr	r1, [pc, #144]	; (800d480 <tcp_input+0x2c0>)
 800d3ee:	4816      	ldr	r0, [pc, #88]	; (800d448 <tcp_input+0x288>)
 800d3f0:	f006 fe28 	bl	8014044 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d3f4:	69fb      	ldr	r3, [r7, #28]
 800d3f6:	7d1b      	ldrb	r3, [r3, #20]
 800d3f8:	2b0a      	cmp	r3, #10
 800d3fa:	d105      	bne.n	800d408 <tcp_input+0x248>
 800d3fc:	4b10      	ldr	r3, [pc, #64]	; (800d440 <tcp_input+0x280>)
 800d3fe:	22fc      	movs	r2, #252	; 0xfc
 800d400:	4920      	ldr	r1, [pc, #128]	; (800d484 <tcp_input+0x2c4>)
 800d402:	4811      	ldr	r0, [pc, #68]	; (800d448 <tcp_input+0x288>)
 800d404:	f006 fe1e 	bl	8014044 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d408:	69fb      	ldr	r3, [r7, #28]
 800d40a:	7d1b      	ldrb	r3, [r3, #20]
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d105      	bne.n	800d41c <tcp_input+0x25c>
 800d410:	4b0b      	ldr	r3, [pc, #44]	; (800d440 <tcp_input+0x280>)
 800d412:	22fd      	movs	r2, #253	; 0xfd
 800d414:	491c      	ldr	r1, [pc, #112]	; (800d488 <tcp_input+0x2c8>)
 800d416:	480c      	ldr	r0, [pc, #48]	; (800d448 <tcp_input+0x288>)
 800d418:	f006 fe14 	bl	8014044 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d41c:	69fb      	ldr	r3, [r7, #28]
 800d41e:	7a1b      	ldrb	r3, [r3, #8]
 800d420:	2b00      	cmp	r3, #0
 800d422:	d033      	beq.n	800d48c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d424:	69fb      	ldr	r3, [r7, #28]
 800d426:	7a1a      	ldrb	r2, [r3, #8]
 800d428:	4b09      	ldr	r3, [pc, #36]	; (800d450 <tcp_input+0x290>)
 800d42a:	685b      	ldr	r3, [r3, #4]
 800d42c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d430:	3301      	adds	r3, #1
 800d432:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d434:	429a      	cmp	r2, r3
 800d436:	d029      	beq.n	800d48c <tcp_input+0x2cc>
      prev = pcb;
 800d438:	69fb      	ldr	r3, [r7, #28]
 800d43a:	61bb      	str	r3, [r7, #24]
      continue;
 800d43c:	e06b      	b.n	800d516 <tcp_input+0x356>
 800d43e:	bf00      	nop
 800d440:	080162c4 	.word	0x080162c4
 800d444:	080162f8 	.word	0x080162f8
 800d448:	08016310 	.word	0x08016310
 800d44c:	200000f0 	.word	0x200000f0
 800d450:	20003cc0 	.word	0x20003cc0
 800d454:	200000f4 	.word	0x200000f4
 800d458:	200000f8 	.word	0x200000f8
 800d45c:	200000f6 	.word	0x200000f6
 800d460:	08016338 	.word	0x08016338
 800d464:	08016348 	.word	0x08016348
 800d468:	08016354 	.word	0x08016354
 800d46c:	20000100 	.word	0x20000100
 800d470:	20000104 	.word	0x20000104
 800d474:	2000010c 	.word	0x2000010c
 800d478:	2000010a 	.word	0x2000010a
 800d47c:	20007204 	.word	0x20007204
 800d480:	08016374 	.word	0x08016374
 800d484:	0801639c 	.word	0x0801639c
 800d488:	080163c8 	.word	0x080163c8
    }

    if (pcb->remote_port == tcphdr->src &&
 800d48c:	69fb      	ldr	r3, [r7, #28]
 800d48e:	8b1a      	ldrh	r2, [r3, #24]
 800d490:	4b94      	ldr	r3, [pc, #592]	; (800d6e4 <tcp_input+0x524>)
 800d492:	681b      	ldr	r3, [r3, #0]
 800d494:	881b      	ldrh	r3, [r3, #0]
 800d496:	b29b      	uxth	r3, r3
 800d498:	429a      	cmp	r2, r3
 800d49a:	d13a      	bne.n	800d512 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d49c:	69fb      	ldr	r3, [r7, #28]
 800d49e:	8ada      	ldrh	r2, [r3, #22]
 800d4a0:	4b90      	ldr	r3, [pc, #576]	; (800d6e4 <tcp_input+0x524>)
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	885b      	ldrh	r3, [r3, #2]
 800d4a6:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d4a8:	429a      	cmp	r2, r3
 800d4aa:	d132      	bne.n	800d512 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d4ac:	69fb      	ldr	r3, [r7, #28]
 800d4ae:	685a      	ldr	r2, [r3, #4]
 800d4b0:	4b8d      	ldr	r3, [pc, #564]	; (800d6e8 <tcp_input+0x528>)
 800d4b2:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d12c      	bne.n	800d512 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	681a      	ldr	r2, [r3, #0]
 800d4bc:	4b8a      	ldr	r3, [pc, #552]	; (800d6e8 <tcp_input+0x528>)
 800d4be:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d4c0:	429a      	cmp	r2, r3
 800d4c2:	d126      	bne.n	800d512 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d4c4:	69fb      	ldr	r3, [r7, #28]
 800d4c6:	68db      	ldr	r3, [r3, #12]
 800d4c8:	69fa      	ldr	r2, [r7, #28]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d106      	bne.n	800d4dc <tcp_input+0x31c>
 800d4ce:	4b87      	ldr	r3, [pc, #540]	; (800d6ec <tcp_input+0x52c>)
 800d4d0:	f240 120d 	movw	r2, #269	; 0x10d
 800d4d4:	4986      	ldr	r1, [pc, #536]	; (800d6f0 <tcp_input+0x530>)
 800d4d6:	4887      	ldr	r0, [pc, #540]	; (800d6f4 <tcp_input+0x534>)
 800d4d8:	f006 fdb4 	bl	8014044 <iprintf>
      if (prev != NULL) {
 800d4dc:	69bb      	ldr	r3, [r7, #24]
 800d4de:	2b00      	cmp	r3, #0
 800d4e0:	d00a      	beq.n	800d4f8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d4e2:	69fb      	ldr	r3, [r7, #28]
 800d4e4:	68da      	ldr	r2, [r3, #12]
 800d4e6:	69bb      	ldr	r3, [r7, #24]
 800d4e8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d4ea:	4b83      	ldr	r3, [pc, #524]	; (800d6f8 <tcp_input+0x538>)
 800d4ec:	681a      	ldr	r2, [r3, #0]
 800d4ee:	69fb      	ldr	r3, [r7, #28]
 800d4f0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d4f2:	4a81      	ldr	r2, [pc, #516]	; (800d6f8 <tcp_input+0x538>)
 800d4f4:	69fb      	ldr	r3, [r7, #28]
 800d4f6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d4f8:	69fb      	ldr	r3, [r7, #28]
 800d4fa:	68db      	ldr	r3, [r3, #12]
 800d4fc:	69fa      	ldr	r2, [r7, #28]
 800d4fe:	429a      	cmp	r2, r3
 800d500:	d111      	bne.n	800d526 <tcp_input+0x366>
 800d502:	4b7a      	ldr	r3, [pc, #488]	; (800d6ec <tcp_input+0x52c>)
 800d504:	f240 1215 	movw	r2, #277	; 0x115
 800d508:	497c      	ldr	r1, [pc, #496]	; (800d6fc <tcp_input+0x53c>)
 800d50a:	487a      	ldr	r0, [pc, #488]	; (800d6f4 <tcp_input+0x534>)
 800d50c:	f006 fd9a 	bl	8014044 <iprintf>
      break;
 800d510:	e009      	b.n	800d526 <tcp_input+0x366>
    }
    prev = pcb;
 800d512:	69fb      	ldr	r3, [r7, #28]
 800d514:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	68db      	ldr	r3, [r3, #12]
 800d51a:	61fb      	str	r3, [r7, #28]
 800d51c:	69fb      	ldr	r3, [r7, #28]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	f47f af5e 	bne.w	800d3e0 <tcp_input+0x220>
 800d524:	e000      	b.n	800d528 <tcp_input+0x368>
      break;
 800d526:	bf00      	nop
  }

  if (pcb == NULL) {
 800d528:	69fb      	ldr	r3, [r7, #28]
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	f040 8095 	bne.w	800d65a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d530:	4b73      	ldr	r3, [pc, #460]	; (800d700 <tcp_input+0x540>)
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	61fb      	str	r3, [r7, #28]
 800d536:	e03f      	b.n	800d5b8 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d538:	69fb      	ldr	r3, [r7, #28]
 800d53a:	7d1b      	ldrb	r3, [r3, #20]
 800d53c:	2b0a      	cmp	r3, #10
 800d53e:	d006      	beq.n	800d54e <tcp_input+0x38e>
 800d540:	4b6a      	ldr	r3, [pc, #424]	; (800d6ec <tcp_input+0x52c>)
 800d542:	f240 121f 	movw	r2, #287	; 0x11f
 800d546:	496f      	ldr	r1, [pc, #444]	; (800d704 <tcp_input+0x544>)
 800d548:	486a      	ldr	r0, [pc, #424]	; (800d6f4 <tcp_input+0x534>)
 800d54a:	f006 fd7b 	bl	8014044 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d54e:	69fb      	ldr	r3, [r7, #28]
 800d550:	7a1b      	ldrb	r3, [r3, #8]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d009      	beq.n	800d56a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d556:	69fb      	ldr	r3, [r7, #28]
 800d558:	7a1a      	ldrb	r2, [r3, #8]
 800d55a:	4b63      	ldr	r3, [pc, #396]	; (800d6e8 <tcp_input+0x528>)
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d562:	3301      	adds	r3, #1
 800d564:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d566:	429a      	cmp	r2, r3
 800d568:	d122      	bne.n	800d5b0 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d56a:	69fb      	ldr	r3, [r7, #28]
 800d56c:	8b1a      	ldrh	r2, [r3, #24]
 800d56e:	4b5d      	ldr	r3, [pc, #372]	; (800d6e4 <tcp_input+0x524>)
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	b29b      	uxth	r3, r3
 800d576:	429a      	cmp	r2, r3
 800d578:	d11b      	bne.n	800d5b2 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d57a:	69fb      	ldr	r3, [r7, #28]
 800d57c:	8ada      	ldrh	r2, [r3, #22]
 800d57e:	4b59      	ldr	r3, [pc, #356]	; (800d6e4 <tcp_input+0x524>)
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	885b      	ldrh	r3, [r3, #2]
 800d584:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d586:	429a      	cmp	r2, r3
 800d588:	d113      	bne.n	800d5b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d58a:	69fb      	ldr	r3, [r7, #28]
 800d58c:	685a      	ldr	r2, [r3, #4]
 800d58e:	4b56      	ldr	r3, [pc, #344]	; (800d6e8 <tcp_input+0x528>)
 800d590:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d592:	429a      	cmp	r2, r3
 800d594:	d10d      	bne.n	800d5b2 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	4b53      	ldr	r3, [pc, #332]	; (800d6e8 <tcp_input+0x528>)
 800d59c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d59e:	429a      	cmp	r2, r3
 800d5a0:	d107      	bne.n	800d5b2 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d5a2:	69f8      	ldr	r0, [r7, #28]
 800d5a4:	f000 fb54 	bl	800dc50 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	f7fd ffd1 	bl	800b550 <pbuf_free>
        return;
 800d5ae:	e1f0      	b.n	800d992 <tcp_input+0x7d2>
        continue;
 800d5b0:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d5b2:	69fb      	ldr	r3, [r7, #28]
 800d5b4:	68db      	ldr	r3, [r3, #12]
 800d5b6:	61fb      	str	r3, [r7, #28]
 800d5b8:	69fb      	ldr	r3, [r7, #28]
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1bc      	bne.n	800d538 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d5c2:	4b51      	ldr	r3, [pc, #324]	; (800d708 <tcp_input+0x548>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	617b      	str	r3, [r7, #20]
 800d5c8:	e02a      	b.n	800d620 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d5ca:	697b      	ldr	r3, [r7, #20]
 800d5cc:	7a1b      	ldrb	r3, [r3, #8]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d00c      	beq.n	800d5ec <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d5d2:	697b      	ldr	r3, [r7, #20]
 800d5d4:	7a1a      	ldrb	r2, [r3, #8]
 800d5d6:	4b44      	ldr	r3, [pc, #272]	; (800d6e8 <tcp_input+0x528>)
 800d5d8:	685b      	ldr	r3, [r3, #4]
 800d5da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d5de:	3301      	adds	r3, #1
 800d5e0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d5e2:	429a      	cmp	r2, r3
 800d5e4:	d002      	beq.n	800d5ec <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d5e6:	697b      	ldr	r3, [r7, #20]
 800d5e8:	61bb      	str	r3, [r7, #24]
        continue;
 800d5ea:	e016      	b.n	800d61a <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	8ada      	ldrh	r2, [r3, #22]
 800d5f0:	4b3c      	ldr	r3, [pc, #240]	; (800d6e4 <tcp_input+0x524>)
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	885b      	ldrh	r3, [r3, #2]
 800d5f6:	b29b      	uxth	r3, r3
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d10c      	bne.n	800d616 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d5fc:	697b      	ldr	r3, [r7, #20]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	4b39      	ldr	r3, [pc, #228]	; (800d6e8 <tcp_input+0x528>)
 800d602:	695b      	ldr	r3, [r3, #20]
 800d604:	429a      	cmp	r2, r3
 800d606:	d00f      	beq.n	800d628 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d608:	697b      	ldr	r3, [r7, #20]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d00d      	beq.n	800d62a <tcp_input+0x46a>
 800d60e:	697b      	ldr	r3, [r7, #20]
 800d610:	681b      	ldr	r3, [r3, #0]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d009      	beq.n	800d62a <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d616:	697b      	ldr	r3, [r7, #20]
 800d618:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d61a:	697b      	ldr	r3, [r7, #20]
 800d61c:	68db      	ldr	r3, [r3, #12]
 800d61e:	617b      	str	r3, [r7, #20]
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b00      	cmp	r3, #0
 800d624:	d1d1      	bne.n	800d5ca <tcp_input+0x40a>
 800d626:	e000      	b.n	800d62a <tcp_input+0x46a>
            break;
 800d628:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d62a:	697b      	ldr	r3, [r7, #20]
 800d62c:	2b00      	cmp	r3, #0
 800d62e:	d014      	beq.n	800d65a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d630:	69bb      	ldr	r3, [r7, #24]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d00a      	beq.n	800d64c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d636:	697b      	ldr	r3, [r7, #20]
 800d638:	68da      	ldr	r2, [r3, #12]
 800d63a:	69bb      	ldr	r3, [r7, #24]
 800d63c:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d63e:	4b32      	ldr	r3, [pc, #200]	; (800d708 <tcp_input+0x548>)
 800d640:	681a      	ldr	r2, [r3, #0]
 800d642:	697b      	ldr	r3, [r7, #20]
 800d644:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d646:	4a30      	ldr	r2, [pc, #192]	; (800d708 <tcp_input+0x548>)
 800d648:	697b      	ldr	r3, [r7, #20]
 800d64a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d64c:	6978      	ldr	r0, [r7, #20]
 800d64e:	f000 fa01 	bl	800da54 <tcp_listen_input>
      }
      pbuf_free(p);
 800d652:	6878      	ldr	r0, [r7, #4]
 800d654:	f7fd ff7c 	bl	800b550 <pbuf_free>
      return;
 800d658:	e19b      	b.n	800d992 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d65a:	69fb      	ldr	r3, [r7, #28]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f000 8160 	beq.w	800d922 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d662:	4b2a      	ldr	r3, [pc, #168]	; (800d70c <tcp_input+0x54c>)
 800d664:	2200      	movs	r2, #0
 800d666:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	891a      	ldrh	r2, [r3, #8]
 800d66c:	4b27      	ldr	r3, [pc, #156]	; (800d70c <tcp_input+0x54c>)
 800d66e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d670:	4a26      	ldr	r2, [pc, #152]	; (800d70c <tcp_input+0x54c>)
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d676:	4b1b      	ldr	r3, [pc, #108]	; (800d6e4 <tcp_input+0x524>)
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	4a24      	ldr	r2, [pc, #144]	; (800d70c <tcp_input+0x54c>)
 800d67c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d67e:	4b24      	ldr	r3, [pc, #144]	; (800d710 <tcp_input+0x550>)
 800d680:	2200      	movs	r2, #0
 800d682:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d684:	4b23      	ldr	r3, [pc, #140]	; (800d714 <tcp_input+0x554>)
 800d686:	2200      	movs	r2, #0
 800d688:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d68a:	4b23      	ldr	r3, [pc, #140]	; (800d718 <tcp_input+0x558>)
 800d68c:	2200      	movs	r2, #0
 800d68e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d690:	4b22      	ldr	r3, [pc, #136]	; (800d71c <tcp_input+0x55c>)
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	f003 0308 	and.w	r3, r3, #8
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d006      	beq.n	800d6aa <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	7b5b      	ldrb	r3, [r3, #13]
 800d6a0:	f043 0301 	orr.w	r3, r3, #1
 800d6a4:	b2da      	uxtb	r2, r3
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d6aa:	69fb      	ldr	r3, [r7, #28]
 800d6ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d038      	beq.n	800d724 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d6b2:	69f8      	ldr	r0, [r7, #28]
 800d6b4:	f7ff f93e 	bl	800c934 <tcp_process_refused_data>
 800d6b8:	4603      	mov	r3, r0
 800d6ba:	f113 0f0d 	cmn.w	r3, #13
 800d6be:	d007      	beq.n	800d6d0 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d6c4:	2b00      	cmp	r3, #0
 800d6c6:	d02d      	beq.n	800d724 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d6c8:	4b15      	ldr	r3, [pc, #84]	; (800d720 <tcp_input+0x560>)
 800d6ca:	881b      	ldrh	r3, [r3, #0]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d029      	beq.n	800d724 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d6d0:	69fb      	ldr	r3, [r7, #28]
 800d6d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d6d4:	2b00      	cmp	r3, #0
 800d6d6:	f040 8104 	bne.w	800d8e2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d6da:	69f8      	ldr	r0, [r7, #28]
 800d6dc:	f003 f9be 	bl	8010a5c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d6e0:	e0ff      	b.n	800d8e2 <tcp_input+0x722>
 800d6e2:	bf00      	nop
 800d6e4:	200000f0 	.word	0x200000f0
 800d6e8:	20003cc0 	.word	0x20003cc0
 800d6ec:	080162c4 	.word	0x080162c4
 800d6f0:	080163f0 	.word	0x080163f0
 800d6f4:	08016310 	.word	0x08016310
 800d6f8:	20007204 	.word	0x20007204
 800d6fc:	0801641c 	.word	0x0801641c
 800d700:	20007214 	.word	0x20007214
 800d704:	08016448 	.word	0x08016448
 800d708:	2000720c 	.word	0x2000720c
 800d70c:	200000e0 	.word	0x200000e0
 800d710:	20000110 	.word	0x20000110
 800d714:	2000010d 	.word	0x2000010d
 800d718:	20000108 	.word	0x20000108
 800d71c:	2000010c 	.word	0x2000010c
 800d720:	2000010a 	.word	0x2000010a
      }
    }
    tcp_input_pcb = pcb;
 800d724:	4a9c      	ldr	r2, [pc, #624]	; (800d998 <tcp_input+0x7d8>)
 800d726:	69fb      	ldr	r3, [r7, #28]
 800d728:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d72a:	69f8      	ldr	r0, [r7, #28]
 800d72c:	f000 fb0a 	bl	800dd44 <tcp_process>
 800d730:	4603      	mov	r3, r0
 800d732:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d734:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d738:	f113 0f0d 	cmn.w	r3, #13
 800d73c:	f000 80d3 	beq.w	800d8e6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d740:	4b96      	ldr	r3, [pc, #600]	; (800d99c <tcp_input+0x7dc>)
 800d742:	781b      	ldrb	r3, [r3, #0]
 800d744:	f003 0308 	and.w	r3, r3, #8
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d015      	beq.n	800d778 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d74c:	69fb      	ldr	r3, [r7, #28]
 800d74e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d752:	2b00      	cmp	r3, #0
 800d754:	d008      	beq.n	800d768 <tcp_input+0x5a8>
 800d756:	69fb      	ldr	r3, [r7, #28]
 800d758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d75c:	69fa      	ldr	r2, [r7, #28]
 800d75e:	6912      	ldr	r2, [r2, #16]
 800d760:	f06f 010d 	mvn.w	r1, #13
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d768:	69f9      	ldr	r1, [r7, #28]
 800d76a:	488d      	ldr	r0, [pc, #564]	; (800d9a0 <tcp_input+0x7e0>)
 800d76c:	f7ff fbb0 	bl	800ced0 <tcp_pcb_remove>
        tcp_free(pcb);
 800d770:	69f8      	ldr	r0, [r7, #28]
 800d772:	f7fe f99d 	bl	800bab0 <tcp_free>
 800d776:	e0c1      	b.n	800d8fc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d778:	2300      	movs	r3, #0
 800d77a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d77c:	4b89      	ldr	r3, [pc, #548]	; (800d9a4 <tcp_input+0x7e4>)
 800d77e:	881b      	ldrh	r3, [r3, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d01d      	beq.n	800d7c0 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d784:	4b87      	ldr	r3, [pc, #540]	; (800d9a4 <tcp_input+0x7e4>)
 800d786:	881b      	ldrh	r3, [r3, #0]
 800d788:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d790:	2b00      	cmp	r3, #0
 800d792:	d00a      	beq.n	800d7aa <tcp_input+0x5ea>
 800d794:	69fb      	ldr	r3, [r7, #28]
 800d796:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d79a:	69fa      	ldr	r2, [r7, #28]
 800d79c:	6910      	ldr	r0, [r2, #16]
 800d79e:	89fa      	ldrh	r2, [r7, #14]
 800d7a0:	69f9      	ldr	r1, [r7, #28]
 800d7a2:	4798      	blx	r3
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	74fb      	strb	r3, [r7, #19]
 800d7a8:	e001      	b.n	800d7ae <tcp_input+0x5ee>
 800d7aa:	2300      	movs	r3, #0
 800d7ac:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d7ae:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d7b2:	f113 0f0d 	cmn.w	r3, #13
 800d7b6:	f000 8098 	beq.w	800d8ea <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d7ba:	4b7a      	ldr	r3, [pc, #488]	; (800d9a4 <tcp_input+0x7e4>)
 800d7bc:	2200      	movs	r2, #0
 800d7be:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d7c0:	69f8      	ldr	r0, [r7, #28]
 800d7c2:	f000 f907 	bl	800d9d4 <tcp_input_delayed_close>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	2b00      	cmp	r3, #0
 800d7ca:	f040 8090 	bne.w	800d8ee <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d7ce:	4b76      	ldr	r3, [pc, #472]	; (800d9a8 <tcp_input+0x7e8>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d041      	beq.n	800d85a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d7d6:	69fb      	ldr	r3, [r7, #28]
 800d7d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d006      	beq.n	800d7ec <tcp_input+0x62c>
 800d7de:	4b73      	ldr	r3, [pc, #460]	; (800d9ac <tcp_input+0x7ec>)
 800d7e0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d7e4:	4972      	ldr	r1, [pc, #456]	; (800d9b0 <tcp_input+0x7f0>)
 800d7e6:	4873      	ldr	r0, [pc, #460]	; (800d9b4 <tcp_input+0x7f4>)
 800d7e8:	f006 fc2c 	bl	8014044 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	8b5b      	ldrh	r3, [r3, #26]
 800d7f0:	f003 0310 	and.w	r3, r3, #16
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d008      	beq.n	800d80a <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d7f8:	4b6b      	ldr	r3, [pc, #428]	; (800d9a8 <tcp_input+0x7e8>)
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f7fd fea7 	bl	800b550 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d802:	69f8      	ldr	r0, [r7, #28]
 800d804:	f7fe fc3c 	bl	800c080 <tcp_abort>
            goto aborted;
 800d808:	e078      	b.n	800d8fc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d810:	2b00      	cmp	r3, #0
 800d812:	d00c      	beq.n	800d82e <tcp_input+0x66e>
 800d814:	69fb      	ldr	r3, [r7, #28]
 800d816:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	6918      	ldr	r0, [r3, #16]
 800d81e:	4b62      	ldr	r3, [pc, #392]	; (800d9a8 <tcp_input+0x7e8>)
 800d820:	681a      	ldr	r2, [r3, #0]
 800d822:	2300      	movs	r3, #0
 800d824:	69f9      	ldr	r1, [r7, #28]
 800d826:	47a0      	blx	r4
 800d828:	4603      	mov	r3, r0
 800d82a:	74fb      	strb	r3, [r7, #19]
 800d82c:	e008      	b.n	800d840 <tcp_input+0x680>
 800d82e:	4b5e      	ldr	r3, [pc, #376]	; (800d9a8 <tcp_input+0x7e8>)
 800d830:	681a      	ldr	r2, [r3, #0]
 800d832:	2300      	movs	r3, #0
 800d834:	69f9      	ldr	r1, [r7, #28]
 800d836:	2000      	movs	r0, #0
 800d838:	f7ff f952 	bl	800cae0 <tcp_recv_null>
 800d83c:	4603      	mov	r3, r0
 800d83e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d840:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d844:	f113 0f0d 	cmn.w	r3, #13
 800d848:	d053      	beq.n	800d8f2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d84a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d003      	beq.n	800d85a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d852:	4b55      	ldr	r3, [pc, #340]	; (800d9a8 <tcp_input+0x7e8>)
 800d854:	681a      	ldr	r2, [r3, #0]
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d85a:	4b50      	ldr	r3, [pc, #320]	; (800d99c <tcp_input+0x7dc>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	f003 0320 	and.w	r3, r3, #32
 800d862:	2b00      	cmp	r3, #0
 800d864:	d030      	beq.n	800d8c8 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d866:	69fb      	ldr	r3, [r7, #28]
 800d868:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d009      	beq.n	800d882 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d872:	7b5a      	ldrb	r2, [r3, #13]
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d878:	f042 0220 	orr.w	r2, r2, #32
 800d87c:	b2d2      	uxtb	r2, r2
 800d87e:	735a      	strb	r2, [r3, #13]
 800d880:	e022      	b.n	800d8c8 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d882:	69fb      	ldr	r3, [r7, #28]
 800d884:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d886:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d88a:	d005      	beq.n	800d898 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d88c:	69fb      	ldr	r3, [r7, #28]
 800d88e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d890:	3301      	adds	r3, #1
 800d892:	b29a      	uxth	r2, r3
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d898:	69fb      	ldr	r3, [r7, #28]
 800d89a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d00b      	beq.n	800d8ba <tcp_input+0x6fa>
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	6918      	ldr	r0, [r3, #16]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	69f9      	ldr	r1, [r7, #28]
 800d8b2:	47a0      	blx	r4
 800d8b4:	4603      	mov	r3, r0
 800d8b6:	74fb      	strb	r3, [r7, #19]
 800d8b8:	e001      	b.n	800d8be <tcp_input+0x6fe>
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d8be:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d8c2:	f113 0f0d 	cmn.w	r3, #13
 800d8c6:	d016      	beq.n	800d8f6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d8c8:	4b33      	ldr	r3, [pc, #204]	; (800d998 <tcp_input+0x7d8>)
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d8ce:	69f8      	ldr	r0, [r7, #28]
 800d8d0:	f000 f880 	bl	800d9d4 <tcp_input_delayed_close>
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	d10f      	bne.n	800d8fa <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d8da:	69f8      	ldr	r0, [r7, #28]
 800d8dc:	f002 fab8 	bl	800fe50 <tcp_output>
 800d8e0:	e00c      	b.n	800d8fc <tcp_input+0x73c>
        goto aborted;
 800d8e2:	bf00      	nop
 800d8e4:	e00a      	b.n	800d8fc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d8e6:	bf00      	nop
 800d8e8:	e008      	b.n	800d8fc <tcp_input+0x73c>
              goto aborted;
 800d8ea:	bf00      	nop
 800d8ec:	e006      	b.n	800d8fc <tcp_input+0x73c>
          goto aborted;
 800d8ee:	bf00      	nop
 800d8f0:	e004      	b.n	800d8fc <tcp_input+0x73c>
            goto aborted;
 800d8f2:	bf00      	nop
 800d8f4:	e002      	b.n	800d8fc <tcp_input+0x73c>
              goto aborted;
 800d8f6:	bf00      	nop
 800d8f8:	e000      	b.n	800d8fc <tcp_input+0x73c>
          goto aborted;
 800d8fa:	bf00      	nop
    tcp_input_pcb = NULL;
 800d8fc:	4b26      	ldr	r3, [pc, #152]	; (800d998 <tcp_input+0x7d8>)
 800d8fe:	2200      	movs	r2, #0
 800d900:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d902:	4b29      	ldr	r3, [pc, #164]	; (800d9a8 <tcp_input+0x7e8>)
 800d904:	2200      	movs	r2, #0
 800d906:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d908:	4b2b      	ldr	r3, [pc, #172]	; (800d9b8 <tcp_input+0x7f8>)
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d03f      	beq.n	800d990 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d910:	4b29      	ldr	r3, [pc, #164]	; (800d9b8 <tcp_input+0x7f8>)
 800d912:	685b      	ldr	r3, [r3, #4]
 800d914:	4618      	mov	r0, r3
 800d916:	f7fd fe1b 	bl	800b550 <pbuf_free>
      inseg.p = NULL;
 800d91a:	4b27      	ldr	r3, [pc, #156]	; (800d9b8 <tcp_input+0x7f8>)
 800d91c:	2200      	movs	r2, #0
 800d91e:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d920:	e036      	b.n	800d990 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d922:	4b26      	ldr	r3, [pc, #152]	; (800d9bc <tcp_input+0x7fc>)
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	899b      	ldrh	r3, [r3, #12]
 800d928:	b29b      	uxth	r3, r3
 800d92a:	4618      	mov	r0, r3
 800d92c:	f7fc fb5d 	bl	8009fea <lwip_htons>
 800d930:	4603      	mov	r3, r0
 800d932:	b2db      	uxtb	r3, r3
 800d934:	f003 0304 	and.w	r3, r3, #4
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d118      	bne.n	800d96e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d93c:	4b20      	ldr	r3, [pc, #128]	; (800d9c0 <tcp_input+0x800>)
 800d93e:	6819      	ldr	r1, [r3, #0]
 800d940:	4b20      	ldr	r3, [pc, #128]	; (800d9c4 <tcp_input+0x804>)
 800d942:	881b      	ldrh	r3, [r3, #0]
 800d944:	461a      	mov	r2, r3
 800d946:	4b20      	ldr	r3, [pc, #128]	; (800d9c8 <tcp_input+0x808>)
 800d948:	681b      	ldr	r3, [r3, #0]
 800d94a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d94c:	4b1b      	ldr	r3, [pc, #108]	; (800d9bc <tcp_input+0x7fc>)
 800d94e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d950:	885b      	ldrh	r3, [r3, #2]
 800d952:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d954:	4a19      	ldr	r2, [pc, #100]	; (800d9bc <tcp_input+0x7fc>)
 800d956:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d958:	8812      	ldrh	r2, [r2, #0]
 800d95a:	b292      	uxth	r2, r2
 800d95c:	9202      	str	r2, [sp, #8]
 800d95e:	9301      	str	r3, [sp, #4]
 800d960:	4b1a      	ldr	r3, [pc, #104]	; (800d9cc <tcp_input+0x80c>)
 800d962:	9300      	str	r3, [sp, #0]
 800d964:	4b1a      	ldr	r3, [pc, #104]	; (800d9d0 <tcp_input+0x810>)
 800d966:	4602      	mov	r2, r0
 800d968:	2000      	movs	r0, #0
 800d96a:	f003 f825 	bl	80109b8 <tcp_rst>
    pbuf_free(p);
 800d96e:	6878      	ldr	r0, [r7, #4]
 800d970:	f7fd fdee 	bl	800b550 <pbuf_free>
  return;
 800d974:	e00c      	b.n	800d990 <tcp_input+0x7d0>
    goto dropped;
 800d976:	bf00      	nop
 800d978:	e006      	b.n	800d988 <tcp_input+0x7c8>
    goto dropped;
 800d97a:	bf00      	nop
 800d97c:	e004      	b.n	800d988 <tcp_input+0x7c8>
    goto dropped;
 800d97e:	bf00      	nop
 800d980:	e002      	b.n	800d988 <tcp_input+0x7c8>
      goto dropped;
 800d982:	bf00      	nop
 800d984:	e000      	b.n	800d988 <tcp_input+0x7c8>
      goto dropped;
 800d986:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7fd fde1 	bl	800b550 <pbuf_free>
 800d98e:	e000      	b.n	800d992 <tcp_input+0x7d2>
  return;
 800d990:	bf00      	nop
}
 800d992:	3724      	adds	r7, #36	; 0x24
 800d994:	46bd      	mov	sp, r7
 800d996:	bd90      	pop	{r4, r7, pc}
 800d998:	20007218 	.word	0x20007218
 800d99c:	2000010d 	.word	0x2000010d
 800d9a0:	20007204 	.word	0x20007204
 800d9a4:	20000108 	.word	0x20000108
 800d9a8:	20000110 	.word	0x20000110
 800d9ac:	080162c4 	.word	0x080162c4
 800d9b0:	08016478 	.word	0x08016478
 800d9b4:	08016310 	.word	0x08016310
 800d9b8:	200000e0 	.word	0x200000e0
 800d9bc:	200000f0 	.word	0x200000f0
 800d9c0:	20000104 	.word	0x20000104
 800d9c4:	2000010a 	.word	0x2000010a
 800d9c8:	20000100 	.word	0x20000100
 800d9cc:	20003cd0 	.word	0x20003cd0
 800d9d0:	20003cd4 	.word	0x20003cd4

0800d9d4 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b082      	sub	sp, #8
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d106      	bne.n	800d9f0 <tcp_input_delayed_close+0x1c>
 800d9e2:	4b17      	ldr	r3, [pc, #92]	; (800da40 <tcp_input_delayed_close+0x6c>)
 800d9e4:	f240 225a 	movw	r2, #602	; 0x25a
 800d9e8:	4916      	ldr	r1, [pc, #88]	; (800da44 <tcp_input_delayed_close+0x70>)
 800d9ea:	4817      	ldr	r0, [pc, #92]	; (800da48 <tcp_input_delayed_close+0x74>)
 800d9ec:	f006 fb2a 	bl	8014044 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d9f0:	4b16      	ldr	r3, [pc, #88]	; (800da4c <tcp_input_delayed_close+0x78>)
 800d9f2:	781b      	ldrb	r3, [r3, #0]
 800d9f4:	f003 0310 	and.w	r3, r3, #16
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d01c      	beq.n	800da36 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	8b5b      	ldrh	r3, [r3, #26]
 800da00:	f003 0310 	and.w	r3, r3, #16
 800da04:	2b00      	cmp	r3, #0
 800da06:	d10d      	bne.n	800da24 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d008      	beq.n	800da24 <tcp_input_delayed_close+0x50>
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da18:	687a      	ldr	r2, [r7, #4]
 800da1a:	6912      	ldr	r2, [r2, #16]
 800da1c:	f06f 010e 	mvn.w	r1, #14
 800da20:	4610      	mov	r0, r2
 800da22:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800da24:	6879      	ldr	r1, [r7, #4]
 800da26:	480a      	ldr	r0, [pc, #40]	; (800da50 <tcp_input_delayed_close+0x7c>)
 800da28:	f7ff fa52 	bl	800ced0 <tcp_pcb_remove>
    tcp_free(pcb);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7fe f83f 	bl	800bab0 <tcp_free>
    return 1;
 800da32:	2301      	movs	r3, #1
 800da34:	e000      	b.n	800da38 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800da36:	2300      	movs	r3, #0
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3708      	adds	r7, #8
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	080162c4 	.word	0x080162c4
 800da44:	08016494 	.word	0x08016494
 800da48:	08016310 	.word	0x08016310
 800da4c:	2000010d 	.word	0x2000010d
 800da50:	20007204 	.word	0x20007204

0800da54 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800da54:	b590      	push	{r4, r7, lr}
 800da56:	b08b      	sub	sp, #44	; 0x2c
 800da58:	af04      	add	r7, sp, #16
 800da5a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800da5c:	4b6f      	ldr	r3, [pc, #444]	; (800dc1c <tcp_listen_input+0x1c8>)
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	f003 0304 	and.w	r3, r3, #4
 800da64:	2b00      	cmp	r3, #0
 800da66:	f040 80d2 	bne.w	800dc0e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d106      	bne.n	800da7e <tcp_listen_input+0x2a>
 800da70:	4b6b      	ldr	r3, [pc, #428]	; (800dc20 <tcp_listen_input+0x1cc>)
 800da72:	f240 2281 	movw	r2, #641	; 0x281
 800da76:	496b      	ldr	r1, [pc, #428]	; (800dc24 <tcp_listen_input+0x1d0>)
 800da78:	486b      	ldr	r0, [pc, #428]	; (800dc28 <tcp_listen_input+0x1d4>)
 800da7a:	f006 fae3 	bl	8014044 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800da7e:	4b67      	ldr	r3, [pc, #412]	; (800dc1c <tcp_listen_input+0x1c8>)
 800da80:	781b      	ldrb	r3, [r3, #0]
 800da82:	f003 0310 	and.w	r3, r3, #16
 800da86:	2b00      	cmp	r3, #0
 800da88:	d019      	beq.n	800dabe <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da8a:	4b68      	ldr	r3, [pc, #416]	; (800dc2c <tcp_listen_input+0x1d8>)
 800da8c:	6819      	ldr	r1, [r3, #0]
 800da8e:	4b68      	ldr	r3, [pc, #416]	; (800dc30 <tcp_listen_input+0x1dc>)
 800da90:	881b      	ldrh	r3, [r3, #0]
 800da92:	461a      	mov	r2, r3
 800da94:	4b67      	ldr	r3, [pc, #412]	; (800dc34 <tcp_listen_input+0x1e0>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da9a:	4b67      	ldr	r3, [pc, #412]	; (800dc38 <tcp_listen_input+0x1e4>)
 800da9c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da9e:	885b      	ldrh	r3, [r3, #2]
 800daa0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800daa2:	4a65      	ldr	r2, [pc, #404]	; (800dc38 <tcp_listen_input+0x1e4>)
 800daa4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800daa6:	8812      	ldrh	r2, [r2, #0]
 800daa8:	b292      	uxth	r2, r2
 800daaa:	9202      	str	r2, [sp, #8]
 800daac:	9301      	str	r3, [sp, #4]
 800daae:	4b63      	ldr	r3, [pc, #396]	; (800dc3c <tcp_listen_input+0x1e8>)
 800dab0:	9300      	str	r3, [sp, #0]
 800dab2:	4b63      	ldr	r3, [pc, #396]	; (800dc40 <tcp_listen_input+0x1ec>)
 800dab4:	4602      	mov	r2, r0
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f002 ff7e 	bl	80109b8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800dabc:	e0a9      	b.n	800dc12 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800dabe:	4b57      	ldr	r3, [pc, #348]	; (800dc1c <tcp_listen_input+0x1c8>)
 800dac0:	781b      	ldrb	r3, [r3, #0]
 800dac2:	f003 0302 	and.w	r3, r3, #2
 800dac6:	2b00      	cmp	r3, #0
 800dac8:	f000 80a3 	beq.w	800dc12 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7d5b      	ldrb	r3, [r3, #21]
 800dad0:	4618      	mov	r0, r3
 800dad2:	f7ff f929 	bl	800cd28 <tcp_alloc>
 800dad6:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800dad8:	697b      	ldr	r3, [r7, #20]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d111      	bne.n	800db02 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	699b      	ldr	r3, [r3, #24]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <tcp_listen_input+0xa8>
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	699b      	ldr	r3, [r3, #24]
 800daea:	687a      	ldr	r2, [r7, #4]
 800daec:	6910      	ldr	r0, [r2, #16]
 800daee:	f04f 32ff 	mov.w	r2, #4294967295
 800daf2:	2100      	movs	r1, #0
 800daf4:	4798      	blx	r3
 800daf6:	4603      	mov	r3, r0
 800daf8:	73bb      	strb	r3, [r7, #14]
      return;
 800dafa:	e08b      	b.n	800dc14 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800dafc:	23f0      	movs	r3, #240	; 0xf0
 800dafe:	73bb      	strb	r3, [r7, #14]
      return;
 800db00:	e088      	b.n	800dc14 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800db02:	4b50      	ldr	r3, [pc, #320]	; (800dc44 <tcp_listen_input+0x1f0>)
 800db04:	695a      	ldr	r2, [r3, #20]
 800db06:	697b      	ldr	r3, [r7, #20]
 800db08:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800db0a:	4b4e      	ldr	r3, [pc, #312]	; (800dc44 <tcp_listen_input+0x1f0>)
 800db0c:	691a      	ldr	r2, [r3, #16]
 800db0e:	697b      	ldr	r3, [r7, #20]
 800db10:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800db12:	687b      	ldr	r3, [r7, #4]
 800db14:	8ada      	ldrh	r2, [r3, #22]
 800db16:	697b      	ldr	r3, [r7, #20]
 800db18:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800db1a:	4b47      	ldr	r3, [pc, #284]	; (800dc38 <tcp_listen_input+0x1e4>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	881b      	ldrh	r3, [r3, #0]
 800db20:	b29a      	uxth	r2, r3
 800db22:	697b      	ldr	r3, [r7, #20]
 800db24:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800db26:	697b      	ldr	r3, [r7, #20]
 800db28:	2203      	movs	r2, #3
 800db2a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800db2c:	4b41      	ldr	r3, [pc, #260]	; (800dc34 <tcp_listen_input+0x1e0>)
 800db2e:	681b      	ldr	r3, [r3, #0]
 800db30:	1c5a      	adds	r2, r3, #1
 800db32:	697b      	ldr	r3, [r7, #20]
 800db34:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800db36:	697b      	ldr	r3, [r7, #20]
 800db38:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800db3e:	6978      	ldr	r0, [r7, #20]
 800db40:	f7ff fa5a 	bl	800cff8 <tcp_next_iss>
 800db44:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800db46:	697b      	ldr	r3, [r7, #20]
 800db48:	693a      	ldr	r2, [r7, #16]
 800db4a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800db4c:	697b      	ldr	r3, [r7, #20]
 800db4e:	693a      	ldr	r2, [r7, #16]
 800db50:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800db52:	697b      	ldr	r3, [r7, #20]
 800db54:	693a      	ldr	r2, [r7, #16]
 800db56:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800db58:	697b      	ldr	r3, [r7, #20]
 800db5a:	693a      	ldr	r2, [r7, #16]
 800db5c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800db5e:	4b35      	ldr	r3, [pc, #212]	; (800dc34 <tcp_listen_input+0x1e0>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	1e5a      	subs	r2, r3, #1
 800db64:	697b      	ldr	r3, [r7, #20]
 800db66:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	691a      	ldr	r2, [r3, #16]
 800db6c:	697b      	ldr	r3, [r7, #20]
 800db6e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800db70:	697b      	ldr	r3, [r7, #20]
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	7a5b      	ldrb	r3, [r3, #9]
 800db7a:	f003 030c 	and.w	r3, r3, #12
 800db7e:	b2da      	uxtb	r2, r3
 800db80:	697b      	ldr	r3, [r7, #20]
 800db82:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	7a1a      	ldrb	r2, [r3, #8]
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800db8c:	4b2e      	ldr	r3, [pc, #184]	; (800dc48 <tcp_listen_input+0x1f4>)
 800db8e:	681a      	ldr	r2, [r3, #0]
 800db90:	697b      	ldr	r3, [r7, #20]
 800db92:	60da      	str	r2, [r3, #12]
 800db94:	4a2c      	ldr	r2, [pc, #176]	; (800dc48 <tcp_listen_input+0x1f4>)
 800db96:	697b      	ldr	r3, [r7, #20]
 800db98:	6013      	str	r3, [r2, #0]
 800db9a:	f003 f8cf 	bl	8010d3c <tcp_timer_needed>
 800db9e:	4b2b      	ldr	r3, [pc, #172]	; (800dc4c <tcp_listen_input+0x1f8>)
 800dba0:	2201      	movs	r2, #1
 800dba2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800dba4:	6978      	ldr	r0, [r7, #20]
 800dba6:	f001 fd8d 	bl	800f6c4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800dbaa:	4b23      	ldr	r3, [pc, #140]	; (800dc38 <tcp_listen_input+0x1e4>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	89db      	ldrh	r3, [r3, #14]
 800dbb0:	b29a      	uxth	r2, r3
 800dbb2:	697b      	ldr	r3, [r7, #20]
 800dbb4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	3304      	adds	r3, #4
 800dbcc:	4618      	mov	r0, r3
 800dbce:	f005 f80b 	bl	8012be8 <ip4_route>
 800dbd2:	4601      	mov	r1, r0
 800dbd4:	697b      	ldr	r3, [r7, #20]
 800dbd6:	3304      	adds	r3, #4
 800dbd8:	461a      	mov	r2, r3
 800dbda:	4620      	mov	r0, r4
 800dbdc:	f7ff fa32 	bl	800d044 <tcp_eff_send_mss_netif>
 800dbe0:	4603      	mov	r3, r0
 800dbe2:	461a      	mov	r2, r3
 800dbe4:	697b      	ldr	r3, [r7, #20]
 800dbe6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800dbe8:	2112      	movs	r1, #18
 800dbea:	6978      	ldr	r0, [r7, #20]
 800dbec:	f002 f842 	bl	800fc74 <tcp_enqueue_flags>
 800dbf0:	4603      	mov	r3, r0
 800dbf2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800dbf4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d004      	beq.n	800dc06 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800dbfc:	2100      	movs	r1, #0
 800dbfe:	6978      	ldr	r0, [r7, #20]
 800dc00:	f7fe f980 	bl	800bf04 <tcp_abandon>
      return;
 800dc04:	e006      	b.n	800dc14 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800dc06:	6978      	ldr	r0, [r7, #20]
 800dc08:	f002 f922 	bl	800fe50 <tcp_output>
  return;
 800dc0c:	e001      	b.n	800dc12 <tcp_listen_input+0x1be>
    return;
 800dc0e:	bf00      	nop
 800dc10:	e000      	b.n	800dc14 <tcp_listen_input+0x1c0>
  return;
 800dc12:	bf00      	nop
}
 800dc14:	371c      	adds	r7, #28
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd90      	pop	{r4, r7, pc}
 800dc1a:	bf00      	nop
 800dc1c:	2000010c 	.word	0x2000010c
 800dc20:	080162c4 	.word	0x080162c4
 800dc24:	080164bc 	.word	0x080164bc
 800dc28:	08016310 	.word	0x08016310
 800dc2c:	20000104 	.word	0x20000104
 800dc30:	2000010a 	.word	0x2000010a
 800dc34:	20000100 	.word	0x20000100
 800dc38:	200000f0 	.word	0x200000f0
 800dc3c:	20003cd0 	.word	0x20003cd0
 800dc40:	20003cd4 	.word	0x20003cd4
 800dc44:	20003cc0 	.word	0x20003cc0
 800dc48:	20007204 	.word	0x20007204
 800dc4c:	20007200 	.word	0x20007200

0800dc50 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800dc50:	b580      	push	{r7, lr}
 800dc52:	b086      	sub	sp, #24
 800dc54:	af04      	add	r7, sp, #16
 800dc56:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800dc58:	4b2f      	ldr	r3, [pc, #188]	; (800dd18 <tcp_timewait_input+0xc8>)
 800dc5a:	781b      	ldrb	r3, [r3, #0]
 800dc5c:	f003 0304 	and.w	r3, r3, #4
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d153      	bne.n	800dd0c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d106      	bne.n	800dc78 <tcp_timewait_input+0x28>
 800dc6a:	4b2c      	ldr	r3, [pc, #176]	; (800dd1c <tcp_timewait_input+0xcc>)
 800dc6c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800dc70:	492b      	ldr	r1, [pc, #172]	; (800dd20 <tcp_timewait_input+0xd0>)
 800dc72:	482c      	ldr	r0, [pc, #176]	; (800dd24 <tcp_timewait_input+0xd4>)
 800dc74:	f006 f9e6 	bl	8014044 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800dc78:	4b27      	ldr	r3, [pc, #156]	; (800dd18 <tcp_timewait_input+0xc8>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	f003 0302 	and.w	r3, r3, #2
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d02a      	beq.n	800dcda <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800dc84:	4b28      	ldr	r3, [pc, #160]	; (800dd28 <tcp_timewait_input+0xd8>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc8c:	1ad3      	subs	r3, r2, r3
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	db2d      	blt.n	800dcee <tcp_timewait_input+0x9e>
 800dc92:	4b25      	ldr	r3, [pc, #148]	; (800dd28 <tcp_timewait_input+0xd8>)
 800dc94:	681a      	ldr	r2, [r3, #0]
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc9a:	6879      	ldr	r1, [r7, #4]
 800dc9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800dc9e:	440b      	add	r3, r1
 800dca0:	1ad3      	subs	r3, r2, r3
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	dc23      	bgt.n	800dcee <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dca6:	4b21      	ldr	r3, [pc, #132]	; (800dd2c <tcp_timewait_input+0xdc>)
 800dca8:	6819      	ldr	r1, [r3, #0]
 800dcaa:	4b21      	ldr	r3, [pc, #132]	; (800dd30 <tcp_timewait_input+0xe0>)
 800dcac:	881b      	ldrh	r3, [r3, #0]
 800dcae:	461a      	mov	r2, r3
 800dcb0:	4b1d      	ldr	r3, [pc, #116]	; (800dd28 <tcp_timewait_input+0xd8>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcb6:	4b1f      	ldr	r3, [pc, #124]	; (800dd34 <tcp_timewait_input+0xe4>)
 800dcb8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcba:	885b      	ldrh	r3, [r3, #2]
 800dcbc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dcbe:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <tcp_timewait_input+0xe4>)
 800dcc0:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dcc2:	8812      	ldrh	r2, [r2, #0]
 800dcc4:	b292      	uxth	r2, r2
 800dcc6:	9202      	str	r2, [sp, #8]
 800dcc8:	9301      	str	r3, [sp, #4]
 800dcca:	4b1b      	ldr	r3, [pc, #108]	; (800dd38 <tcp_timewait_input+0xe8>)
 800dccc:	9300      	str	r3, [sp, #0]
 800dcce:	4b1b      	ldr	r3, [pc, #108]	; (800dd3c <tcp_timewait_input+0xec>)
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	6878      	ldr	r0, [r7, #4]
 800dcd4:	f002 fe70 	bl	80109b8 <tcp_rst>
      return;
 800dcd8:	e01b      	b.n	800dd12 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800dcda:	4b0f      	ldr	r3, [pc, #60]	; (800dd18 <tcp_timewait_input+0xc8>)
 800dcdc:	781b      	ldrb	r3, [r3, #0]
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d003      	beq.n	800dcee <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800dce6:	4b16      	ldr	r3, [pc, #88]	; (800dd40 <tcp_timewait_input+0xf0>)
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800dcee:	4b10      	ldr	r3, [pc, #64]	; (800dd30 <tcp_timewait_input+0xe0>)
 800dcf0:	881b      	ldrh	r3, [r3, #0]
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00c      	beq.n	800dd10 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8b5b      	ldrh	r3, [r3, #26]
 800dcfa:	f043 0302 	orr.w	r3, r3, #2
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f002 f8a3 	bl	800fe50 <tcp_output>
  }
  return;
 800dd0a:	e001      	b.n	800dd10 <tcp_timewait_input+0xc0>
    return;
 800dd0c:	bf00      	nop
 800dd0e:	e000      	b.n	800dd12 <tcp_timewait_input+0xc2>
  return;
 800dd10:	bf00      	nop
}
 800dd12:	3708      	adds	r7, #8
 800dd14:	46bd      	mov	sp, r7
 800dd16:	bd80      	pop	{r7, pc}
 800dd18:	2000010c 	.word	0x2000010c
 800dd1c:	080162c4 	.word	0x080162c4
 800dd20:	080164dc 	.word	0x080164dc
 800dd24:	08016310 	.word	0x08016310
 800dd28:	20000100 	.word	0x20000100
 800dd2c:	20000104 	.word	0x20000104
 800dd30:	2000010a 	.word	0x2000010a
 800dd34:	200000f0 	.word	0x200000f0
 800dd38:	20003cd0 	.word	0x20003cd0
 800dd3c:	20003cd4 	.word	0x20003cd4
 800dd40:	20007208 	.word	0x20007208

0800dd44 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800dd44:	b590      	push	{r4, r7, lr}
 800dd46:	b08d      	sub	sp, #52	; 0x34
 800dd48:	af04      	add	r7, sp, #16
 800dd4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d106      	bne.n	800dd68 <tcp_process+0x24>
 800dd5a:	4ba5      	ldr	r3, [pc, #660]	; (800dff0 <tcp_process+0x2ac>)
 800dd5c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800dd60:	49a4      	ldr	r1, [pc, #656]	; (800dff4 <tcp_process+0x2b0>)
 800dd62:	48a5      	ldr	r0, [pc, #660]	; (800dff8 <tcp_process+0x2b4>)
 800dd64:	f006 f96e 	bl	8014044 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800dd68:	4ba4      	ldr	r3, [pc, #656]	; (800dffc <tcp_process+0x2b8>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	f003 0304 	and.w	r3, r3, #4
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d04e      	beq.n	800de12 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	7d1b      	ldrb	r3, [r3, #20]
 800dd78:	2b02      	cmp	r3, #2
 800dd7a:	d108      	bne.n	800dd8e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800dd80:	4b9f      	ldr	r3, [pc, #636]	; (800e000 <tcp_process+0x2bc>)
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d123      	bne.n	800ddd0 <tcp_process+0x8c>
        acceptable = 1;
 800dd88:	2301      	movs	r3, #1
 800dd8a:	76fb      	strb	r3, [r7, #27]
 800dd8c:	e020      	b.n	800ddd0 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dd92:	4b9c      	ldr	r3, [pc, #624]	; (800e004 <tcp_process+0x2c0>)
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d102      	bne.n	800dda0 <tcp_process+0x5c>
        acceptable = 1;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	76fb      	strb	r3, [r7, #27]
 800dd9e:	e017      	b.n	800ddd0 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800dda0:	4b98      	ldr	r3, [pc, #608]	; (800e004 <tcp_process+0x2c0>)
 800dda2:	681a      	ldr	r2, [r3, #0]
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dda8:	1ad3      	subs	r3, r2, r3
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	db10      	blt.n	800ddd0 <tcp_process+0x8c>
 800ddae:	4b95      	ldr	r3, [pc, #596]	; (800e004 <tcp_process+0x2c0>)
 800ddb0:	681a      	ldr	r2, [r3, #0]
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	6879      	ldr	r1, [r7, #4]
 800ddb8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ddba:	440b      	add	r3, r1
 800ddbc:	1ad3      	subs	r3, r2, r3
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	dc06      	bgt.n	800ddd0 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	8b5b      	ldrh	r3, [r3, #26]
 800ddc6:	f043 0302 	orr.w	r3, r3, #2
 800ddca:	b29a      	uxth	r2, r3
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ddd0:	7efb      	ldrb	r3, [r7, #27]
 800ddd2:	2b00      	cmp	r3, #0
 800ddd4:	d01b      	beq.n	800de0e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	7d1b      	ldrb	r3, [r3, #20]
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d106      	bne.n	800ddec <tcp_process+0xa8>
 800ddde:	4b84      	ldr	r3, [pc, #528]	; (800dff0 <tcp_process+0x2ac>)
 800dde0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dde4:	4988      	ldr	r1, [pc, #544]	; (800e008 <tcp_process+0x2c4>)
 800dde6:	4884      	ldr	r0, [pc, #528]	; (800dff8 <tcp_process+0x2b4>)
 800dde8:	f006 f92c 	bl	8014044 <iprintf>
      recv_flags |= TF_RESET;
 800ddec:	4b87      	ldr	r3, [pc, #540]	; (800e00c <tcp_process+0x2c8>)
 800ddee:	781b      	ldrb	r3, [r3, #0]
 800ddf0:	f043 0308 	orr.w	r3, r3, #8
 800ddf4:	b2da      	uxtb	r2, r3
 800ddf6:	4b85      	ldr	r3, [pc, #532]	; (800e00c <tcp_process+0x2c8>)
 800ddf8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ddfa:	687b      	ldr	r3, [r7, #4]
 800ddfc:	8b5b      	ldrh	r3, [r3, #26]
 800ddfe:	f023 0301 	bic.w	r3, r3, #1
 800de02:	b29a      	uxth	r2, r3
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800de08:	f06f 030d 	mvn.w	r3, #13
 800de0c:	e37a      	b.n	800e504 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800de0e:	2300      	movs	r3, #0
 800de10:	e378      	b.n	800e504 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800de12:	4b7a      	ldr	r3, [pc, #488]	; (800dffc <tcp_process+0x2b8>)
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	f003 0302 	and.w	r3, r3, #2
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d010      	beq.n	800de40 <tcp_process+0xfc>
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	7d1b      	ldrb	r3, [r3, #20]
 800de22:	2b02      	cmp	r3, #2
 800de24:	d00c      	beq.n	800de40 <tcp_process+0xfc>
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	7d1b      	ldrb	r3, [r3, #20]
 800de2a:	2b03      	cmp	r3, #3
 800de2c:	d008      	beq.n	800de40 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	8b5b      	ldrh	r3, [r3, #26]
 800de32:	f043 0302 	orr.w	r3, r3, #2
 800de36:	b29a      	uxth	r2, r3
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800de3c:	2300      	movs	r3, #0
 800de3e:	e361      	b.n	800e504 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	8b5b      	ldrh	r3, [r3, #26]
 800de44:	f003 0310 	and.w	r3, r3, #16
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d103      	bne.n	800de54 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800de4c:	4b70      	ldr	r3, [pc, #448]	; (800e010 <tcp_process+0x2cc>)
 800de4e:	681a      	ldr	r2, [r3, #0]
 800de50:	687b      	ldr	r3, [r7, #4]
 800de52:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2200      	movs	r2, #0
 800de58:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	2200      	movs	r2, #0
 800de60:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f001 fc2d 	bl	800f6c4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	7d1b      	ldrb	r3, [r3, #20]
 800de6e:	3b02      	subs	r3, #2
 800de70:	2b07      	cmp	r3, #7
 800de72:	f200 8337 	bhi.w	800e4e4 <tcp_process+0x7a0>
 800de76:	a201      	add	r2, pc, #4	; (adr r2, 800de7c <tcp_process+0x138>)
 800de78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de7c:	0800de9d 	.word	0x0800de9d
 800de80:	0800e0cd 	.word	0x0800e0cd
 800de84:	0800e245 	.word	0x0800e245
 800de88:	0800e26f 	.word	0x0800e26f
 800de8c:	0800e393 	.word	0x0800e393
 800de90:	0800e245 	.word	0x0800e245
 800de94:	0800e41f 	.word	0x0800e41f
 800de98:	0800e4af 	.word	0x0800e4af
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800de9c:	4b57      	ldr	r3, [pc, #348]	; (800dffc <tcp_process+0x2b8>)
 800de9e:	781b      	ldrb	r3, [r3, #0]
 800dea0:	f003 0310 	and.w	r3, r3, #16
 800dea4:	2b00      	cmp	r3, #0
 800dea6:	f000 80e4 	beq.w	800e072 <tcp_process+0x32e>
 800deaa:	4b54      	ldr	r3, [pc, #336]	; (800dffc <tcp_process+0x2b8>)
 800deac:	781b      	ldrb	r3, [r3, #0]
 800deae:	f003 0302 	and.w	r3, r3, #2
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	f000 80dd 	beq.w	800e072 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	4b50      	ldr	r3, [pc, #320]	; (800e000 <tcp_process+0x2bc>)
 800dec0:	681b      	ldr	r3, [r3, #0]
 800dec2:	429a      	cmp	r2, r3
 800dec4:	f040 80d5 	bne.w	800e072 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dec8:	4b4e      	ldr	r3, [pc, #312]	; (800e004 <tcp_process+0x2c0>)
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	1c5a      	adds	r2, r3, #1
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ded6:	687b      	ldr	r3, [r7, #4]
 800ded8:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800deda:	4b49      	ldr	r3, [pc, #292]	; (800e000 <tcp_process+0x2bc>)
 800dedc:	681a      	ldr	r2, [r3, #0]
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dee2:	4b4c      	ldr	r3, [pc, #304]	; (800e014 <tcp_process+0x2d0>)
 800dee4:	681b      	ldr	r3, [r3, #0]
 800dee6:	89db      	ldrh	r3, [r3, #14]
 800dee8:	b29a      	uxth	r2, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800defc:	4b41      	ldr	r3, [pc, #260]	; (800e004 <tcp_process+0x2c0>)
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	1e5a      	subs	r2, r3, #1
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	2204      	movs	r2, #4
 800df0a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	3304      	adds	r3, #4
 800df14:	4618      	mov	r0, r3
 800df16:	f004 fe67 	bl	8012be8 <ip4_route>
 800df1a:	4601      	mov	r1, r0
 800df1c:	687b      	ldr	r3, [r7, #4]
 800df1e:	3304      	adds	r3, #4
 800df20:	461a      	mov	r2, r3
 800df22:	4620      	mov	r0, r4
 800df24:	f7ff f88e 	bl	800d044 <tcp_eff_send_mss_netif>
 800df28:	4603      	mov	r3, r0
 800df2a:	461a      	mov	r2, r3
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800df30:	687b      	ldr	r3, [r7, #4]
 800df32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df34:	009a      	lsls	r2, r3, #2
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df3a:	005b      	lsls	r3, r3, #1
 800df3c:	f241 111c 	movw	r1, #4380	; 0x111c
 800df40:	428b      	cmp	r3, r1
 800df42:	bf38      	it	cc
 800df44:	460b      	movcc	r3, r1
 800df46:	429a      	cmp	r2, r3
 800df48:	d204      	bcs.n	800df54 <tcp_process+0x210>
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	b29b      	uxth	r3, r3
 800df52:	e00d      	b.n	800df70 <tcp_process+0x22c>
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df58:	005b      	lsls	r3, r3, #1
 800df5a:	f241 121c 	movw	r2, #4380	; 0x111c
 800df5e:	4293      	cmp	r3, r2
 800df60:	d904      	bls.n	800df6c <tcp_process+0x228>
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df66:	005b      	lsls	r3, r3, #1
 800df68:	b29b      	uxth	r3, r3
 800df6a:	e001      	b.n	800df70 <tcp_process+0x22c>
 800df6c:	f241 131c 	movw	r3, #4380	; 0x111c
 800df70:	687a      	ldr	r2, [r7, #4]
 800df72:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df7c:	2b00      	cmp	r3, #0
 800df7e:	d106      	bne.n	800df8e <tcp_process+0x24a>
 800df80:	4b1b      	ldr	r3, [pc, #108]	; (800dff0 <tcp_process+0x2ac>)
 800df82:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800df86:	4924      	ldr	r1, [pc, #144]	; (800e018 <tcp_process+0x2d4>)
 800df88:	481b      	ldr	r0, [pc, #108]	; (800dff8 <tcp_process+0x2b4>)
 800df8a:	f006 f85b 	bl	8014044 <iprintf>
        --pcb->snd_queuelen;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800df94:	3b01      	subs	r3, #1
 800df96:	b29a      	uxth	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800df9e:	687b      	ldr	r3, [r7, #4]
 800dfa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfa2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dfa4:	69fb      	ldr	r3, [r7, #28]
 800dfa6:	2b00      	cmp	r3, #0
 800dfa8:	d111      	bne.n	800dfce <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dfae:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dfb0:	69fb      	ldr	r3, [r7, #28]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d106      	bne.n	800dfc4 <tcp_process+0x280>
 800dfb6:	4b0e      	ldr	r3, [pc, #56]	; (800dff0 <tcp_process+0x2ac>)
 800dfb8:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dfbc:	4917      	ldr	r1, [pc, #92]	; (800e01c <tcp_process+0x2d8>)
 800dfbe:	480e      	ldr	r0, [pc, #56]	; (800dff8 <tcp_process+0x2b4>)
 800dfc0:	f006 f840 	bl	8014044 <iprintf>
          pcb->unsent = rseg->next;
 800dfc4:	69fb      	ldr	r3, [r7, #28]
 800dfc6:	681a      	ldr	r2, [r3, #0]
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	66da      	str	r2, [r3, #108]	; 0x6c
 800dfcc:	e003      	b.n	800dfd6 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dfce:	69fb      	ldr	r3, [r7, #28]
 800dfd0:	681a      	ldr	r2, [r3, #0]
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dfd6:	69f8      	ldr	r0, [r7, #28]
 800dfd8:	f7fe fd3d 	bl	800ca56 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	d11d      	bne.n	800e020 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dfea:	861a      	strh	r2, [r3, #48]	; 0x30
 800dfec:	e01f      	b.n	800e02e <tcp_process+0x2ea>
 800dfee:	bf00      	nop
 800dff0:	080162c4 	.word	0x080162c4
 800dff4:	080164fc 	.word	0x080164fc
 800dff8:	08016310 	.word	0x08016310
 800dffc:	2000010c 	.word	0x2000010c
 800e000:	20000104 	.word	0x20000104
 800e004:	20000100 	.word	0x20000100
 800e008:	08016518 	.word	0x08016518
 800e00c:	2000010d 	.word	0x2000010d
 800e010:	20007208 	.word	0x20007208
 800e014:	200000f0 	.word	0x200000f0
 800e018:	08016538 	.word	0x08016538
 800e01c:	08016550 	.word	0x08016550
        } else {
          pcb->rtime = 0;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2200      	movs	r2, #0
 800e024:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00a      	beq.n	800e04e <tcp_process+0x30a>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e03e:	687a      	ldr	r2, [r7, #4]
 800e040:	6910      	ldr	r0, [r2, #16]
 800e042:	2200      	movs	r2, #0
 800e044:	6879      	ldr	r1, [r7, #4]
 800e046:	4798      	blx	r3
 800e048:	4603      	mov	r3, r0
 800e04a:	76bb      	strb	r3, [r7, #26]
 800e04c:	e001      	b.n	800e052 <tcp_process+0x30e>
 800e04e:	2300      	movs	r3, #0
 800e050:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e052:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e056:	f113 0f0d 	cmn.w	r3, #13
 800e05a:	d102      	bne.n	800e062 <tcp_process+0x31e>
          return ERR_ABRT;
 800e05c:	f06f 030c 	mvn.w	r3, #12
 800e060:	e250      	b.n	800e504 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	8b5b      	ldrh	r3, [r3, #26]
 800e066:	f043 0302 	orr.w	r3, r3, #2
 800e06a:	b29a      	uxth	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e070:	e23a      	b.n	800e4e8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e072:	4b9d      	ldr	r3, [pc, #628]	; (800e2e8 <tcp_process+0x5a4>)
 800e074:	781b      	ldrb	r3, [r3, #0]
 800e076:	f003 0310 	and.w	r3, r3, #16
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	f000 8234 	beq.w	800e4e8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e080:	4b9a      	ldr	r3, [pc, #616]	; (800e2ec <tcp_process+0x5a8>)
 800e082:	6819      	ldr	r1, [r3, #0]
 800e084:	4b9a      	ldr	r3, [pc, #616]	; (800e2f0 <tcp_process+0x5ac>)
 800e086:	881b      	ldrh	r3, [r3, #0]
 800e088:	461a      	mov	r2, r3
 800e08a:	4b9a      	ldr	r3, [pc, #616]	; (800e2f4 <tcp_process+0x5b0>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e090:	4b99      	ldr	r3, [pc, #612]	; (800e2f8 <tcp_process+0x5b4>)
 800e092:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e094:	885b      	ldrh	r3, [r3, #2]
 800e096:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e098:	4a97      	ldr	r2, [pc, #604]	; (800e2f8 <tcp_process+0x5b4>)
 800e09a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e09c:	8812      	ldrh	r2, [r2, #0]
 800e09e:	b292      	uxth	r2, r2
 800e0a0:	9202      	str	r2, [sp, #8]
 800e0a2:	9301      	str	r3, [sp, #4]
 800e0a4:	4b95      	ldr	r3, [pc, #596]	; (800e2fc <tcp_process+0x5b8>)
 800e0a6:	9300      	str	r3, [sp, #0]
 800e0a8:	4b95      	ldr	r3, [pc, #596]	; (800e300 <tcp_process+0x5bc>)
 800e0aa:	4602      	mov	r2, r0
 800e0ac:	6878      	ldr	r0, [r7, #4]
 800e0ae:	f002 fc83 	bl	80109b8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e0b8:	2b05      	cmp	r3, #5
 800e0ba:	f200 8215 	bhi.w	800e4e8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e0c4:	6878      	ldr	r0, [r7, #4]
 800e0c6:	f002 fa4d 	bl	8010564 <tcp_rexmit_rto>
      break;
 800e0ca:	e20d      	b.n	800e4e8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e0cc:	4b86      	ldr	r3, [pc, #536]	; (800e2e8 <tcp_process+0x5a4>)
 800e0ce:	781b      	ldrb	r3, [r3, #0]
 800e0d0:	f003 0310 	and.w	r3, r3, #16
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	f000 80a1 	beq.w	800e21c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e0da:	4b84      	ldr	r3, [pc, #528]	; (800e2ec <tcp_process+0x5a8>)
 800e0dc:	681a      	ldr	r2, [r3, #0]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0e2:	1ad3      	subs	r3, r2, r3
 800e0e4:	3b01      	subs	r3, #1
 800e0e6:	2b00      	cmp	r3, #0
 800e0e8:	db7e      	blt.n	800e1e8 <tcp_process+0x4a4>
 800e0ea:	4b80      	ldr	r3, [pc, #512]	; (800e2ec <tcp_process+0x5a8>)
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0f2:	1ad3      	subs	r3, r2, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	dc77      	bgt.n	800e1e8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2204      	movs	r2, #4
 800e0fc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e102:	2b00      	cmp	r3, #0
 800e104:	d102      	bne.n	800e10c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e106:	23fa      	movs	r3, #250	; 0xfa
 800e108:	76bb      	strb	r3, [r7, #26]
 800e10a:	e01d      	b.n	800e148 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e110:	699b      	ldr	r3, [r3, #24]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d106      	bne.n	800e124 <tcp_process+0x3e0>
 800e116:	4b7b      	ldr	r3, [pc, #492]	; (800e304 <tcp_process+0x5c0>)
 800e118:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e11c:	497a      	ldr	r1, [pc, #488]	; (800e308 <tcp_process+0x5c4>)
 800e11e:	487b      	ldr	r0, [pc, #492]	; (800e30c <tcp_process+0x5c8>)
 800e120:	f005 ff90 	bl	8014044 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e128:	699b      	ldr	r3, [r3, #24]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d00a      	beq.n	800e144 <tcp_process+0x400>
 800e12e:	687b      	ldr	r3, [r7, #4]
 800e130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e132:	699b      	ldr	r3, [r3, #24]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	6910      	ldr	r0, [r2, #16]
 800e138:	2200      	movs	r2, #0
 800e13a:	6879      	ldr	r1, [r7, #4]
 800e13c:	4798      	blx	r3
 800e13e:	4603      	mov	r3, r0
 800e140:	76bb      	strb	r3, [r7, #26]
 800e142:	e001      	b.n	800e148 <tcp_process+0x404>
 800e144:	23f0      	movs	r3, #240	; 0xf0
 800e146:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e148:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00a      	beq.n	800e166 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e150:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e154:	f113 0f0d 	cmn.w	r3, #13
 800e158:	d002      	beq.n	800e160 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7fd ff90 	bl	800c080 <tcp_abort>
            }
            return ERR_ABRT;
 800e160:	f06f 030c 	mvn.w	r3, #12
 800e164:	e1ce      	b.n	800e504 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e166:	6878      	ldr	r0, [r7, #4]
 800e168:	f000 fae0 	bl	800e72c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e16c:	4b68      	ldr	r3, [pc, #416]	; (800e310 <tcp_process+0x5cc>)
 800e16e:	881b      	ldrh	r3, [r3, #0]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d005      	beq.n	800e180 <tcp_process+0x43c>
            recv_acked--;
 800e174:	4b66      	ldr	r3, [pc, #408]	; (800e310 <tcp_process+0x5cc>)
 800e176:	881b      	ldrh	r3, [r3, #0]
 800e178:	3b01      	subs	r3, #1
 800e17a:	b29a      	uxth	r2, r3
 800e17c:	4b64      	ldr	r3, [pc, #400]	; (800e310 <tcp_process+0x5cc>)
 800e17e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e184:	009a      	lsls	r2, r3, #2
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e18a:	005b      	lsls	r3, r3, #1
 800e18c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e190:	428b      	cmp	r3, r1
 800e192:	bf38      	it	cc
 800e194:	460b      	movcc	r3, r1
 800e196:	429a      	cmp	r2, r3
 800e198:	d204      	bcs.n	800e1a4 <tcp_process+0x460>
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e19e:	009b      	lsls	r3, r3, #2
 800e1a0:	b29b      	uxth	r3, r3
 800e1a2:	e00d      	b.n	800e1c0 <tcp_process+0x47c>
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1a8:	005b      	lsls	r3, r3, #1
 800e1aa:	f241 121c 	movw	r2, #4380	; 0x111c
 800e1ae:	4293      	cmp	r3, r2
 800e1b0:	d904      	bls.n	800e1bc <tcp_process+0x478>
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e1b6:	005b      	lsls	r3, r3, #1
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	e001      	b.n	800e1c0 <tcp_process+0x47c>
 800e1bc:	f241 131c 	movw	r3, #4380	; 0x111c
 800e1c0:	687a      	ldr	r2, [r7, #4]
 800e1c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e1c6:	4b53      	ldr	r3, [pc, #332]	; (800e314 <tcp_process+0x5d0>)
 800e1c8:	781b      	ldrb	r3, [r3, #0]
 800e1ca:	f003 0320 	and.w	r3, r3, #32
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	d037      	beq.n	800e242 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	8b5b      	ldrh	r3, [r3, #26]
 800e1d6:	f043 0302 	orr.w	r3, r3, #2
 800e1da:	b29a      	uxth	r2, r3
 800e1dc:	687b      	ldr	r3, [r7, #4]
 800e1de:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	2207      	movs	r2, #7
 800e1e4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e1e6:	e02c      	b.n	800e242 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1e8:	4b40      	ldr	r3, [pc, #256]	; (800e2ec <tcp_process+0x5a8>)
 800e1ea:	6819      	ldr	r1, [r3, #0]
 800e1ec:	4b40      	ldr	r3, [pc, #256]	; (800e2f0 <tcp_process+0x5ac>)
 800e1ee:	881b      	ldrh	r3, [r3, #0]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	4b40      	ldr	r3, [pc, #256]	; (800e2f4 <tcp_process+0x5b0>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e1f8:	4b3f      	ldr	r3, [pc, #252]	; (800e2f8 <tcp_process+0x5b4>)
 800e1fa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e1fc:	885b      	ldrh	r3, [r3, #2]
 800e1fe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e200:	4a3d      	ldr	r2, [pc, #244]	; (800e2f8 <tcp_process+0x5b4>)
 800e202:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e204:	8812      	ldrh	r2, [r2, #0]
 800e206:	b292      	uxth	r2, r2
 800e208:	9202      	str	r2, [sp, #8]
 800e20a:	9301      	str	r3, [sp, #4]
 800e20c:	4b3b      	ldr	r3, [pc, #236]	; (800e2fc <tcp_process+0x5b8>)
 800e20e:	9300      	str	r3, [sp, #0]
 800e210:	4b3b      	ldr	r3, [pc, #236]	; (800e300 <tcp_process+0x5bc>)
 800e212:	4602      	mov	r2, r0
 800e214:	6878      	ldr	r0, [r7, #4]
 800e216:	f002 fbcf 	bl	80109b8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e21a:	e167      	b.n	800e4ec <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e21c:	4b32      	ldr	r3, [pc, #200]	; (800e2e8 <tcp_process+0x5a4>)
 800e21e:	781b      	ldrb	r3, [r3, #0]
 800e220:	f003 0302 	and.w	r3, r3, #2
 800e224:	2b00      	cmp	r3, #0
 800e226:	f000 8161 	beq.w	800e4ec <tcp_process+0x7a8>
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e22e:	1e5a      	subs	r2, r3, #1
 800e230:	4b30      	ldr	r3, [pc, #192]	; (800e2f4 <tcp_process+0x5b0>)
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	429a      	cmp	r2, r3
 800e236:	f040 8159 	bne.w	800e4ec <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e23a:	6878      	ldr	r0, [r7, #4]
 800e23c:	f002 f9b4 	bl	80105a8 <tcp_rexmit>
      break;
 800e240:	e154      	b.n	800e4ec <tcp_process+0x7a8>
 800e242:	e153      	b.n	800e4ec <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e244:	6878      	ldr	r0, [r7, #4]
 800e246:	f000 fa71 	bl	800e72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e24a:	4b32      	ldr	r3, [pc, #200]	; (800e314 <tcp_process+0x5d0>)
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	f003 0320 	and.w	r3, r3, #32
 800e252:	2b00      	cmp	r3, #0
 800e254:	f000 814c 	beq.w	800e4f0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	8b5b      	ldrh	r3, [r3, #26]
 800e25c:	f043 0302 	orr.w	r3, r3, #2
 800e260:	b29a      	uxth	r2, r3
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	2207      	movs	r2, #7
 800e26a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e26c:	e140      	b.n	800e4f0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fa5c 	bl	800e72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e274:	4b27      	ldr	r3, [pc, #156]	; (800e314 <tcp_process+0x5d0>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	f003 0320 	and.w	r3, r3, #32
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d071      	beq.n	800e364 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e280:	4b19      	ldr	r3, [pc, #100]	; (800e2e8 <tcp_process+0x5a4>)
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	f003 0310 	and.w	r3, r3, #16
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d060      	beq.n	800e34e <tcp_process+0x60a>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e290:	4b16      	ldr	r3, [pc, #88]	; (800e2ec <tcp_process+0x5a8>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	429a      	cmp	r2, r3
 800e296:	d15a      	bne.n	800e34e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e29c:	2b00      	cmp	r3, #0
 800e29e:	d156      	bne.n	800e34e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e2a0:	687b      	ldr	r3, [r7, #4]
 800e2a2:	8b5b      	ldrh	r3, [r3, #26]
 800e2a4:	f043 0302 	orr.w	r3, r3, #2
 800e2a8:	b29a      	uxth	r2, r3
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e2ae:	6878      	ldr	r0, [r7, #4]
 800e2b0:	f7fe fdbe 	bl	800ce30 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e2b4:	4b18      	ldr	r3, [pc, #96]	; (800e318 <tcp_process+0x5d4>)
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	687a      	ldr	r2, [r7, #4]
 800e2ba:	429a      	cmp	r2, r3
 800e2bc:	d105      	bne.n	800e2ca <tcp_process+0x586>
 800e2be:	4b16      	ldr	r3, [pc, #88]	; (800e318 <tcp_process+0x5d4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	4a14      	ldr	r2, [pc, #80]	; (800e318 <tcp_process+0x5d4>)
 800e2c6:	6013      	str	r3, [r2, #0]
 800e2c8:	e02e      	b.n	800e328 <tcp_process+0x5e4>
 800e2ca:	4b13      	ldr	r3, [pc, #76]	; (800e318 <tcp_process+0x5d4>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	617b      	str	r3, [r7, #20]
 800e2d0:	e027      	b.n	800e322 <tcp_process+0x5de>
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	68db      	ldr	r3, [r3, #12]
 800e2d6:	687a      	ldr	r2, [r7, #4]
 800e2d8:	429a      	cmp	r2, r3
 800e2da:	d11f      	bne.n	800e31c <tcp_process+0x5d8>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	68da      	ldr	r2, [r3, #12]
 800e2e0:	697b      	ldr	r3, [r7, #20]
 800e2e2:	60da      	str	r2, [r3, #12]
 800e2e4:	e020      	b.n	800e328 <tcp_process+0x5e4>
 800e2e6:	bf00      	nop
 800e2e8:	2000010c 	.word	0x2000010c
 800e2ec:	20000104 	.word	0x20000104
 800e2f0:	2000010a 	.word	0x2000010a
 800e2f4:	20000100 	.word	0x20000100
 800e2f8:	200000f0 	.word	0x200000f0
 800e2fc:	20003cd0 	.word	0x20003cd0
 800e300:	20003cd4 	.word	0x20003cd4
 800e304:	080162c4 	.word	0x080162c4
 800e308:	08016564 	.word	0x08016564
 800e30c:	08016310 	.word	0x08016310
 800e310:	20000108 	.word	0x20000108
 800e314:	2000010d 	.word	0x2000010d
 800e318:	20007204 	.word	0x20007204
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	68db      	ldr	r3, [r3, #12]
 800e320:	617b      	str	r3, [r7, #20]
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2b00      	cmp	r3, #0
 800e326:	d1d4      	bne.n	800e2d2 <tcp_process+0x58e>
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	2200      	movs	r2, #0
 800e32c:	60da      	str	r2, [r3, #12]
 800e32e:	4b77      	ldr	r3, [pc, #476]	; (800e50c <tcp_process+0x7c8>)
 800e330:	2201      	movs	r2, #1
 800e332:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	220a      	movs	r2, #10
 800e338:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e33a:	4b75      	ldr	r3, [pc, #468]	; (800e510 <tcp_process+0x7cc>)
 800e33c:	681a      	ldr	r2, [r3, #0]
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	60da      	str	r2, [r3, #12]
 800e342:	4a73      	ldr	r2, [pc, #460]	; (800e510 <tcp_process+0x7cc>)
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	6013      	str	r3, [r2, #0]
 800e348:	f002 fcf8 	bl	8010d3c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e34c:	e0d2      	b.n	800e4f4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	8b5b      	ldrh	r3, [r3, #26]
 800e352:	f043 0302 	orr.w	r3, r3, #2
 800e356:	b29a      	uxth	r2, r3
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2208      	movs	r2, #8
 800e360:	751a      	strb	r2, [r3, #20]
      break;
 800e362:	e0c7      	b.n	800e4f4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e364:	4b6b      	ldr	r3, [pc, #428]	; (800e514 <tcp_process+0x7d0>)
 800e366:	781b      	ldrb	r3, [r3, #0]
 800e368:	f003 0310 	and.w	r3, r3, #16
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	f000 80c1 	beq.w	800e4f4 <tcp_process+0x7b0>
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e376:	4b68      	ldr	r3, [pc, #416]	; (800e518 <tcp_process+0x7d4>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	429a      	cmp	r2, r3
 800e37c:	f040 80ba 	bne.w	800e4f4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e380:	687b      	ldr	r3, [r7, #4]
 800e382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e384:	2b00      	cmp	r3, #0
 800e386:	f040 80b5 	bne.w	800e4f4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	2206      	movs	r2, #6
 800e38e:	751a      	strb	r2, [r3, #20]
      break;
 800e390:	e0b0      	b.n	800e4f4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f9ca 	bl	800e72c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e398:	4b60      	ldr	r3, [pc, #384]	; (800e51c <tcp_process+0x7d8>)
 800e39a:	781b      	ldrb	r3, [r3, #0]
 800e39c:	f003 0320 	and.w	r3, r3, #32
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	f000 80a9 	beq.w	800e4f8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	8b5b      	ldrh	r3, [r3, #26]
 800e3aa:	f043 0302 	orr.w	r3, r3, #2
 800e3ae:	b29a      	uxth	r2, r3
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e3b4:	6878      	ldr	r0, [r7, #4]
 800e3b6:	f7fe fd3b 	bl	800ce30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e3ba:	4b59      	ldr	r3, [pc, #356]	; (800e520 <tcp_process+0x7dc>)
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	687a      	ldr	r2, [r7, #4]
 800e3c0:	429a      	cmp	r2, r3
 800e3c2:	d105      	bne.n	800e3d0 <tcp_process+0x68c>
 800e3c4:	4b56      	ldr	r3, [pc, #344]	; (800e520 <tcp_process+0x7dc>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	4a55      	ldr	r2, [pc, #340]	; (800e520 <tcp_process+0x7dc>)
 800e3cc:	6013      	str	r3, [r2, #0]
 800e3ce:	e013      	b.n	800e3f8 <tcp_process+0x6b4>
 800e3d0:	4b53      	ldr	r3, [pc, #332]	; (800e520 <tcp_process+0x7dc>)
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	613b      	str	r3, [r7, #16]
 800e3d6:	e00c      	b.n	800e3f2 <tcp_process+0x6ae>
 800e3d8:	693b      	ldr	r3, [r7, #16]
 800e3da:	68db      	ldr	r3, [r3, #12]
 800e3dc:	687a      	ldr	r2, [r7, #4]
 800e3de:	429a      	cmp	r2, r3
 800e3e0:	d104      	bne.n	800e3ec <tcp_process+0x6a8>
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	68da      	ldr	r2, [r3, #12]
 800e3e6:	693b      	ldr	r3, [r7, #16]
 800e3e8:	60da      	str	r2, [r3, #12]
 800e3ea:	e005      	b.n	800e3f8 <tcp_process+0x6b4>
 800e3ec:	693b      	ldr	r3, [r7, #16]
 800e3ee:	68db      	ldr	r3, [r3, #12]
 800e3f0:	613b      	str	r3, [r7, #16]
 800e3f2:	693b      	ldr	r3, [r7, #16]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d1ef      	bne.n	800e3d8 <tcp_process+0x694>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	60da      	str	r2, [r3, #12]
 800e3fe:	4b43      	ldr	r3, [pc, #268]	; (800e50c <tcp_process+0x7c8>)
 800e400:	2201      	movs	r2, #1
 800e402:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	220a      	movs	r2, #10
 800e408:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e40a:	4b41      	ldr	r3, [pc, #260]	; (800e510 <tcp_process+0x7cc>)
 800e40c:	681a      	ldr	r2, [r3, #0]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	60da      	str	r2, [r3, #12]
 800e412:	4a3f      	ldr	r2, [pc, #252]	; (800e510 <tcp_process+0x7cc>)
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	6013      	str	r3, [r2, #0]
 800e418:	f002 fc90 	bl	8010d3c <tcp_timer_needed>
      }
      break;
 800e41c:	e06c      	b.n	800e4f8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e41e:	6878      	ldr	r0, [r7, #4]
 800e420:	f000 f984 	bl	800e72c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e424:	4b3b      	ldr	r3, [pc, #236]	; (800e514 <tcp_process+0x7d0>)
 800e426:	781b      	ldrb	r3, [r3, #0]
 800e428:	f003 0310 	and.w	r3, r3, #16
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d065      	beq.n	800e4fc <tcp_process+0x7b8>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e434:	4b38      	ldr	r3, [pc, #224]	; (800e518 <tcp_process+0x7d4>)
 800e436:	681b      	ldr	r3, [r3, #0]
 800e438:	429a      	cmp	r2, r3
 800e43a:	d15f      	bne.n	800e4fc <tcp_process+0x7b8>
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e440:	2b00      	cmp	r3, #0
 800e442:	d15b      	bne.n	800e4fc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e444:	6878      	ldr	r0, [r7, #4]
 800e446:	f7fe fcf3 	bl	800ce30 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e44a:	4b35      	ldr	r3, [pc, #212]	; (800e520 <tcp_process+0x7dc>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	687a      	ldr	r2, [r7, #4]
 800e450:	429a      	cmp	r2, r3
 800e452:	d105      	bne.n	800e460 <tcp_process+0x71c>
 800e454:	4b32      	ldr	r3, [pc, #200]	; (800e520 <tcp_process+0x7dc>)
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	68db      	ldr	r3, [r3, #12]
 800e45a:	4a31      	ldr	r2, [pc, #196]	; (800e520 <tcp_process+0x7dc>)
 800e45c:	6013      	str	r3, [r2, #0]
 800e45e:	e013      	b.n	800e488 <tcp_process+0x744>
 800e460:	4b2f      	ldr	r3, [pc, #188]	; (800e520 <tcp_process+0x7dc>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	60fb      	str	r3, [r7, #12]
 800e466:	e00c      	b.n	800e482 <tcp_process+0x73e>
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	68db      	ldr	r3, [r3, #12]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	429a      	cmp	r2, r3
 800e470:	d104      	bne.n	800e47c <tcp_process+0x738>
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	68da      	ldr	r2, [r3, #12]
 800e476:	68fb      	ldr	r3, [r7, #12]
 800e478:	60da      	str	r2, [r3, #12]
 800e47a:	e005      	b.n	800e488 <tcp_process+0x744>
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	68db      	ldr	r3, [r3, #12]
 800e480:	60fb      	str	r3, [r7, #12]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d1ef      	bne.n	800e468 <tcp_process+0x724>
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	2200      	movs	r2, #0
 800e48c:	60da      	str	r2, [r3, #12]
 800e48e:	4b1f      	ldr	r3, [pc, #124]	; (800e50c <tcp_process+0x7c8>)
 800e490:	2201      	movs	r2, #1
 800e492:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	220a      	movs	r2, #10
 800e498:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e49a:	4b1d      	ldr	r3, [pc, #116]	; (800e510 <tcp_process+0x7cc>)
 800e49c:	681a      	ldr	r2, [r3, #0]
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	60da      	str	r2, [r3, #12]
 800e4a2:	4a1b      	ldr	r2, [pc, #108]	; (800e510 <tcp_process+0x7cc>)
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	6013      	str	r3, [r2, #0]
 800e4a8:	f002 fc48 	bl	8010d3c <tcp_timer_needed>
      }
      break;
 800e4ac:	e026      	b.n	800e4fc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e4ae:	6878      	ldr	r0, [r7, #4]
 800e4b0:	f000 f93c 	bl	800e72c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e4b4:	4b17      	ldr	r3, [pc, #92]	; (800e514 <tcp_process+0x7d0>)
 800e4b6:	781b      	ldrb	r3, [r3, #0]
 800e4b8:	f003 0310 	and.w	r3, r3, #16
 800e4bc:	2b00      	cmp	r3, #0
 800e4be:	d01f      	beq.n	800e500 <tcp_process+0x7bc>
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e4c4:	4b14      	ldr	r3, [pc, #80]	; (800e518 <tcp_process+0x7d4>)
 800e4c6:	681b      	ldr	r3, [r3, #0]
 800e4c8:	429a      	cmp	r2, r3
 800e4ca:	d119      	bne.n	800e500 <tcp_process+0x7bc>
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d115      	bne.n	800e500 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e4d4:	4b11      	ldr	r3, [pc, #68]	; (800e51c <tcp_process+0x7d8>)
 800e4d6:	781b      	ldrb	r3, [r3, #0]
 800e4d8:	f043 0310 	orr.w	r3, r3, #16
 800e4dc:	b2da      	uxtb	r2, r3
 800e4de:	4b0f      	ldr	r3, [pc, #60]	; (800e51c <tcp_process+0x7d8>)
 800e4e0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e4e2:	e00d      	b.n	800e500 <tcp_process+0x7bc>
    default:
      break;
 800e4e4:	bf00      	nop
 800e4e6:	e00c      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4e8:	bf00      	nop
 800e4ea:	e00a      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4ec:	bf00      	nop
 800e4ee:	e008      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4f0:	bf00      	nop
 800e4f2:	e006      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4f4:	bf00      	nop
 800e4f6:	e004      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4f8:	bf00      	nop
 800e4fa:	e002      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e4fc:	bf00      	nop
 800e4fe:	e000      	b.n	800e502 <tcp_process+0x7be>
      break;
 800e500:	bf00      	nop
  }
  return ERR_OK;
 800e502:	2300      	movs	r3, #0
}
 800e504:	4618      	mov	r0, r3
 800e506:	3724      	adds	r7, #36	; 0x24
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd90      	pop	{r4, r7, pc}
 800e50c:	20007200 	.word	0x20007200
 800e510:	20007214 	.word	0x20007214
 800e514:	2000010c 	.word	0x2000010c
 800e518:	20000104 	.word	0x20000104
 800e51c:	2000010d 	.word	0x2000010d
 800e520:	20007204 	.word	0x20007204

0800e524 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e524:	b590      	push	{r4, r7, lr}
 800e526:	b085      	sub	sp, #20
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d106      	bne.n	800e542 <tcp_oos_insert_segment+0x1e>
 800e534:	4b3b      	ldr	r3, [pc, #236]	; (800e624 <tcp_oos_insert_segment+0x100>)
 800e536:	f240 421f 	movw	r2, #1055	; 0x41f
 800e53a:	493b      	ldr	r1, [pc, #236]	; (800e628 <tcp_oos_insert_segment+0x104>)
 800e53c:	483b      	ldr	r0, [pc, #236]	; (800e62c <tcp_oos_insert_segment+0x108>)
 800e53e:	f005 fd81 	bl	8014044 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	68db      	ldr	r3, [r3, #12]
 800e546:	899b      	ldrh	r3, [r3, #12]
 800e548:	b29b      	uxth	r3, r3
 800e54a:	4618      	mov	r0, r3
 800e54c:	f7fb fd4d 	bl	8009fea <lwip_htons>
 800e550:	4603      	mov	r3, r0
 800e552:	b2db      	uxtb	r3, r3
 800e554:	f003 0301 	and.w	r3, r3, #1
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d028      	beq.n	800e5ae <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e55c:	6838      	ldr	r0, [r7, #0]
 800e55e:	f7fe fa65 	bl	800ca2c <tcp_segs_free>
    next = NULL;
 800e562:	2300      	movs	r3, #0
 800e564:	603b      	str	r3, [r7, #0]
 800e566:	e056      	b.n	800e616 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	68db      	ldr	r3, [r3, #12]
 800e56c:	899b      	ldrh	r3, [r3, #12]
 800e56e:	b29b      	uxth	r3, r3
 800e570:	4618      	mov	r0, r3
 800e572:	f7fb fd3a 	bl	8009fea <lwip_htons>
 800e576:	4603      	mov	r3, r0
 800e578:	b2db      	uxtb	r3, r3
 800e57a:	f003 0301 	and.w	r3, r3, #1
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d00d      	beq.n	800e59e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	68db      	ldr	r3, [r3, #12]
 800e586:	899b      	ldrh	r3, [r3, #12]
 800e588:	b29c      	uxth	r4, r3
 800e58a:	2001      	movs	r0, #1
 800e58c:	f7fb fd2d 	bl	8009fea <lwip_htons>
 800e590:	4603      	mov	r3, r0
 800e592:	461a      	mov	r2, r3
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	4322      	orrs	r2, r4
 800e59a:	b292      	uxth	r2, r2
 800e59c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e5a8:	68f8      	ldr	r0, [r7, #12]
 800e5aa:	f7fe fa54 	bl	800ca56 <tcp_seg_free>
    while (next &&
 800e5ae:	683b      	ldr	r3, [r7, #0]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d00e      	beq.n	800e5d2 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	891b      	ldrh	r3, [r3, #8]
 800e5b8:	461a      	mov	r2, r3
 800e5ba:	4b1d      	ldr	r3, [pc, #116]	; (800e630 <tcp_oos_insert_segment+0x10c>)
 800e5bc:	681b      	ldr	r3, [r3, #0]
 800e5be:	441a      	add	r2, r3
 800e5c0:	683b      	ldr	r3, [r7, #0]
 800e5c2:	68db      	ldr	r3, [r3, #12]
 800e5c4:	685b      	ldr	r3, [r3, #4]
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	8909      	ldrh	r1, [r1, #8]
 800e5ca:	440b      	add	r3, r1
 800e5cc:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	daca      	bge.n	800e568 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e5d2:	683b      	ldr	r3, [r7, #0]
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d01e      	beq.n	800e616 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	891b      	ldrh	r3, [r3, #8]
 800e5dc:	461a      	mov	r2, r3
 800e5de:	4b14      	ldr	r3, [pc, #80]	; (800e630 <tcp_oos_insert_segment+0x10c>)
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	441a      	add	r2, r3
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	68db      	ldr	r3, [r3, #12]
 800e5e8:	685b      	ldr	r3, [r3, #4]
 800e5ea:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	dd12      	ble.n	800e616 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e5f0:	683b      	ldr	r3, [r7, #0]
 800e5f2:	68db      	ldr	r3, [r3, #12]
 800e5f4:	685b      	ldr	r3, [r3, #4]
 800e5f6:	b29a      	uxth	r2, r3
 800e5f8:	4b0d      	ldr	r3, [pc, #52]	; (800e630 <tcp_oos_insert_segment+0x10c>)
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	b29b      	uxth	r3, r3
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	b29a      	uxth	r2, r3
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	685a      	ldr	r2, [r3, #4]
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	891b      	ldrh	r3, [r3, #8]
 800e60e:	4619      	mov	r1, r3
 800e610:	4610      	mov	r0, r2
 800e612:	f7fc fe17 	bl	800b244 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	683a      	ldr	r2, [r7, #0]
 800e61a:	601a      	str	r2, [r3, #0]
}
 800e61c:	bf00      	nop
 800e61e:	3714      	adds	r7, #20
 800e620:	46bd      	mov	sp, r7
 800e622:	bd90      	pop	{r4, r7, pc}
 800e624:	080162c4 	.word	0x080162c4
 800e628:	08016584 	.word	0x08016584
 800e62c:	08016310 	.word	0x08016310
 800e630:	20000100 	.word	0x20000100

0800e634 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e634:	b5b0      	push	{r4, r5, r7, lr}
 800e636:	b086      	sub	sp, #24
 800e638:	af00      	add	r7, sp, #0
 800e63a:	60f8      	str	r0, [r7, #12]
 800e63c:	60b9      	str	r1, [r7, #8]
 800e63e:	607a      	str	r2, [r7, #4]
 800e640:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e642:	e03e      	b.n	800e6c2 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e64e:	697b      	ldr	r3, [r7, #20]
 800e650:	685b      	ldr	r3, [r3, #4]
 800e652:	4618      	mov	r0, r3
 800e654:	f7fd f804 	bl	800b660 <pbuf_clen>
 800e658:	4603      	mov	r3, r0
 800e65a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e662:	8a7a      	ldrh	r2, [r7, #18]
 800e664:	429a      	cmp	r2, r3
 800e666:	d906      	bls.n	800e676 <tcp_free_acked_segments+0x42>
 800e668:	4b2a      	ldr	r3, [pc, #168]	; (800e714 <tcp_free_acked_segments+0xe0>)
 800e66a:	f240 4257 	movw	r2, #1111	; 0x457
 800e66e:	492a      	ldr	r1, [pc, #168]	; (800e718 <tcp_free_acked_segments+0xe4>)
 800e670:	482a      	ldr	r0, [pc, #168]	; (800e71c <tcp_free_acked_segments+0xe8>)
 800e672:	f005 fce7 	bl	8014044 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e676:	68fb      	ldr	r3, [r7, #12]
 800e678:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e67c:	8a7b      	ldrh	r3, [r7, #18]
 800e67e:	1ad3      	subs	r3, r2, r3
 800e680:	b29a      	uxth	r2, r3
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e688:	697b      	ldr	r3, [r7, #20]
 800e68a:	891a      	ldrh	r2, [r3, #8]
 800e68c:	4b24      	ldr	r3, [pc, #144]	; (800e720 <tcp_free_acked_segments+0xec>)
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	4413      	add	r3, r2
 800e692:	b29a      	uxth	r2, r3
 800e694:	4b22      	ldr	r3, [pc, #136]	; (800e720 <tcp_free_acked_segments+0xec>)
 800e696:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e698:	6978      	ldr	r0, [r7, #20]
 800e69a:	f7fe f9dc 	bl	800ca56 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	d00c      	beq.n	800e6c2 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e6a8:	68bb      	ldr	r3, [r7, #8]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d109      	bne.n	800e6c2 <tcp_free_acked_segments+0x8e>
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d106      	bne.n	800e6c2 <tcp_free_acked_segments+0x8e>
 800e6b4:	4b17      	ldr	r3, [pc, #92]	; (800e714 <tcp_free_acked_segments+0xe0>)
 800e6b6:	f240 4261 	movw	r2, #1121	; 0x461
 800e6ba:	491a      	ldr	r1, [pc, #104]	; (800e724 <tcp_free_acked_segments+0xf0>)
 800e6bc:	4817      	ldr	r0, [pc, #92]	; (800e71c <tcp_free_acked_segments+0xe8>)
 800e6be:	f005 fcc1 	bl	8014044 <iprintf>
  while (seg_list != NULL &&
 800e6c2:	68bb      	ldr	r3, [r7, #8]
 800e6c4:	2b00      	cmp	r3, #0
 800e6c6:	d020      	beq.n	800e70a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	68db      	ldr	r3, [r3, #12]
 800e6cc:	685b      	ldr	r3, [r3, #4]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7fb fca0 	bl	800a014 <lwip_htonl>
 800e6d4:	4604      	mov	r4, r0
 800e6d6:	68bb      	ldr	r3, [r7, #8]
 800e6d8:	891b      	ldrh	r3, [r3, #8]
 800e6da:	461d      	mov	r5, r3
 800e6dc:	68bb      	ldr	r3, [r7, #8]
 800e6de:	68db      	ldr	r3, [r3, #12]
 800e6e0:	899b      	ldrh	r3, [r3, #12]
 800e6e2:	b29b      	uxth	r3, r3
 800e6e4:	4618      	mov	r0, r3
 800e6e6:	f7fb fc80 	bl	8009fea <lwip_htons>
 800e6ea:	4603      	mov	r3, r0
 800e6ec:	b2db      	uxtb	r3, r3
 800e6ee:	f003 0303 	and.w	r3, r3, #3
 800e6f2:	2b00      	cmp	r3, #0
 800e6f4:	d001      	beq.n	800e6fa <tcp_free_acked_segments+0xc6>
 800e6f6:	2301      	movs	r3, #1
 800e6f8:	e000      	b.n	800e6fc <tcp_free_acked_segments+0xc8>
 800e6fa:	2300      	movs	r3, #0
 800e6fc:	442b      	add	r3, r5
 800e6fe:	18e2      	adds	r2, r4, r3
 800e700:	4b09      	ldr	r3, [pc, #36]	; (800e728 <tcp_free_acked_segments+0xf4>)
 800e702:	681b      	ldr	r3, [r3, #0]
 800e704:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e706:	2b00      	cmp	r3, #0
 800e708:	dd9c      	ble.n	800e644 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e70a:	68bb      	ldr	r3, [r7, #8]
}
 800e70c:	4618      	mov	r0, r3
 800e70e:	3718      	adds	r7, #24
 800e710:	46bd      	mov	sp, r7
 800e712:	bdb0      	pop	{r4, r5, r7, pc}
 800e714:	080162c4 	.word	0x080162c4
 800e718:	080165ac 	.word	0x080165ac
 800e71c:	08016310 	.word	0x08016310
 800e720:	20000108 	.word	0x20000108
 800e724:	080165d4 	.word	0x080165d4
 800e728:	20000104 	.word	0x20000104

0800e72c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e72c:	b5b0      	push	{r4, r5, r7, lr}
 800e72e:	b094      	sub	sp, #80	; 0x50
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e734:	2300      	movs	r3, #0
 800e736:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d106      	bne.n	800e74c <tcp_receive+0x20>
 800e73e:	4ba6      	ldr	r3, [pc, #664]	; (800e9d8 <tcp_receive+0x2ac>)
 800e740:	f240 427b 	movw	r2, #1147	; 0x47b
 800e744:	49a5      	ldr	r1, [pc, #660]	; (800e9dc <tcp_receive+0x2b0>)
 800e746:	48a6      	ldr	r0, [pc, #664]	; (800e9e0 <tcp_receive+0x2b4>)
 800e748:	f005 fc7c 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	7d1b      	ldrb	r3, [r3, #20]
 800e750:	2b03      	cmp	r3, #3
 800e752:	d806      	bhi.n	800e762 <tcp_receive+0x36>
 800e754:	4ba0      	ldr	r3, [pc, #640]	; (800e9d8 <tcp_receive+0x2ac>)
 800e756:	f240 427c 	movw	r2, #1148	; 0x47c
 800e75a:	49a2      	ldr	r1, [pc, #648]	; (800e9e4 <tcp_receive+0x2b8>)
 800e75c:	48a0      	ldr	r0, [pc, #640]	; (800e9e0 <tcp_receive+0x2b4>)
 800e75e:	f005 fc71 	bl	8014044 <iprintf>

  if (flags & TCP_ACK) {
 800e762:	4ba1      	ldr	r3, [pc, #644]	; (800e9e8 <tcp_receive+0x2bc>)
 800e764:	781b      	ldrb	r3, [r3, #0]
 800e766:	f003 0310 	and.w	r3, r3, #16
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	f000 8263 	beq.w	800ec36 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e776:	461a      	mov	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e77c:	4413      	add	r3, r2
 800e77e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e784:	4b99      	ldr	r3, [pc, #612]	; (800e9ec <tcp_receive+0x2c0>)
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	1ad3      	subs	r3, r2, r3
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	db1b      	blt.n	800e7c6 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e792:	4b96      	ldr	r3, [pc, #600]	; (800e9ec <tcp_receive+0x2c0>)
 800e794:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e796:	429a      	cmp	r2, r3
 800e798:	d106      	bne.n	800e7a8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e79e:	4b94      	ldr	r3, [pc, #592]	; (800e9f0 <tcp_receive+0x2c4>)
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	1ad3      	subs	r3, r2, r3
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	db0e      	blt.n	800e7c6 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e7ac:	4b90      	ldr	r3, [pc, #576]	; (800e9f0 <tcp_receive+0x2c4>)
 800e7ae:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e7b0:	429a      	cmp	r2, r3
 800e7b2:	d125      	bne.n	800e800 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e7b4:	4b8f      	ldr	r3, [pc, #572]	; (800e9f4 <tcp_receive+0x2c8>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	89db      	ldrh	r3, [r3, #14]
 800e7ba:	b29a      	uxth	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7c2:	429a      	cmp	r2, r3
 800e7c4:	d91c      	bls.n	800e800 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e7c6:	4b8b      	ldr	r3, [pc, #556]	; (800e9f4 <tcp_receive+0x2c8>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	89db      	ldrh	r3, [r3, #14]
 800e7cc:	b29a      	uxth	r2, r3
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e7e0:	429a      	cmp	r2, r3
 800e7e2:	d205      	bcs.n	800e7f0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e7f0:	4b7e      	ldr	r3, [pc, #504]	; (800e9ec <tcp_receive+0x2c0>)
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e7f8:	4b7d      	ldr	r3, [pc, #500]	; (800e9f0 <tcp_receive+0x2c4>)
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e800:	4b7b      	ldr	r3, [pc, #492]	; (800e9f0 <tcp_receive+0x2c4>)
 800e802:	681a      	ldr	r2, [r3, #0]
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e808:	1ad3      	subs	r3, r2, r3
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	dc58      	bgt.n	800e8c0 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e80e:	4b7a      	ldr	r3, [pc, #488]	; (800e9f8 <tcp_receive+0x2cc>)
 800e810:	881b      	ldrh	r3, [r3, #0]
 800e812:	2b00      	cmp	r3, #0
 800e814:	d14b      	bne.n	800e8ae <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e820:	4413      	add	r3, r2
 800e822:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e824:	429a      	cmp	r2, r3
 800e826:	d142      	bne.n	800e8ae <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e82e:	2b00      	cmp	r3, #0
 800e830:	db3d      	blt.n	800e8ae <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e836:	4b6e      	ldr	r3, [pc, #440]	; (800e9f0 <tcp_receive+0x2c4>)
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d137      	bne.n	800e8ae <tcp_receive+0x182>
              found_dupack = 1;
 800e83e:	2301      	movs	r3, #1
 800e840:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e848:	2bff      	cmp	r3, #255	; 0xff
 800e84a:	d007      	beq.n	800e85c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e852:	3301      	adds	r3, #1
 800e854:	b2da      	uxtb	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e85c:	687b      	ldr	r3, [r7, #4]
 800e85e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e862:	2b03      	cmp	r3, #3
 800e864:	d91b      	bls.n	800e89e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e870:	4413      	add	r3, r2
 800e872:	b29a      	uxth	r2, r3
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d30a      	bcc.n	800e894 <tcp_receive+0x168>
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e888:	4413      	add	r3, r2
 800e88a:	b29a      	uxth	r2, r3
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e892:	e004      	b.n	800e89e <tcp_receive+0x172>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e89a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d902      	bls.n	800e8ae <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e8a8:	6878      	ldr	r0, [r7, #4]
 800e8aa:	f001 fee9 	bl	8010680 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e8ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	f040 8160 	bne.w	800eb76 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e8be:	e15a      	b.n	800eb76 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e8c0:	4b4b      	ldr	r3, [pc, #300]	; (800e9f0 <tcp_receive+0x2c4>)
 800e8c2:	681a      	ldr	r2, [r3, #0]
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e8c8:	1ad3      	subs	r3, r2, r3
 800e8ca:	3b01      	subs	r3, #1
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	f2c0 814d 	blt.w	800eb6c <tcp_receive+0x440>
 800e8d2:	4b47      	ldr	r3, [pc, #284]	; (800e9f0 <tcp_receive+0x2c4>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	f300 8145 	bgt.w	800eb6c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	8b5b      	ldrh	r3, [r3, #26]
 800e8e6:	f003 0304 	and.w	r3, r3, #4
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d010      	beq.n	800e910 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	8b5b      	ldrh	r3, [r3, #26]
 800e8f2:	f023 0304 	bic.w	r3, r3, #4
 800e8f6:	b29a      	uxth	r2, r3
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	2200      	movs	r2, #0
 800e90c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	2200      	movs	r2, #0
 800e914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e91e:	10db      	asrs	r3, r3, #3
 800e920:	b21b      	sxth	r3, r3
 800e922:	b29a      	uxth	r2, r3
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e92a:	b29b      	uxth	r3, r3
 800e92c:	4413      	add	r3, r2
 800e92e:	b29b      	uxth	r3, r3
 800e930:	b21a      	sxth	r2, r3
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e938:	4b2d      	ldr	r3, [pc, #180]	; (800e9f0 <tcp_receive+0x2c4>)
 800e93a:	681b      	ldr	r3, [r3, #0]
 800e93c:	b29a      	uxth	r2, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e942:	b29b      	uxth	r3, r3
 800e944:	1ad3      	subs	r3, r2, r3
 800e946:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	2200      	movs	r2, #0
 800e94c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e950:	4b27      	ldr	r3, [pc, #156]	; (800e9f0 <tcp_receive+0x2c4>)
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	7d1b      	ldrb	r3, [r3, #20]
 800e95c:	2b03      	cmp	r3, #3
 800e95e:	f240 8096 	bls.w	800ea8e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e96e:	429a      	cmp	r2, r3
 800e970:	d244      	bcs.n	800e9fc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	8b5b      	ldrh	r3, [r3, #26]
 800e976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e97a:	2b00      	cmp	r3, #0
 800e97c:	d001      	beq.n	800e982 <tcp_receive+0x256>
 800e97e:	2301      	movs	r3, #1
 800e980:	e000      	b.n	800e984 <tcp_receive+0x258>
 800e982:	2302      	movs	r3, #2
 800e984:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e988:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e98c:	b29a      	uxth	r2, r3
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e992:	fb12 f303 	smulbb	r3, r2, r3
 800e996:	b29b      	uxth	r3, r3
 800e998:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e99a:	4293      	cmp	r3, r2
 800e99c:	bf28      	it	cs
 800e99e:	4613      	movcs	r3, r2
 800e9a0:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e9a8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9aa:	4413      	add	r3, r2
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e9b4:	429a      	cmp	r2, r3
 800e9b6:	d309      	bcc.n	800e9cc <tcp_receive+0x2a0>
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e9be:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e9c0:	4413      	add	r3, r2
 800e9c2:	b29a      	uxth	r2, r3
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e9ca:	e060      	b.n	800ea8e <tcp_receive+0x362>
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e9d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e9d6:	e05a      	b.n	800ea8e <tcp_receive+0x362>
 800e9d8:	080162c4 	.word	0x080162c4
 800e9dc:	080165f4 	.word	0x080165f4
 800e9e0:	08016310 	.word	0x08016310
 800e9e4:	08016610 	.word	0x08016610
 800e9e8:	2000010c 	.word	0x2000010c
 800e9ec:	20000100 	.word	0x20000100
 800e9f0:	20000104 	.word	0x20000104
 800e9f4:	200000f0 	.word	0x200000f0
 800e9f8:	2000010a 	.word	0x2000010a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea02:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea04:	4413      	add	r3, r2
 800ea06:	b29a      	uxth	r2, r3
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ea0e:	429a      	cmp	r2, r3
 800ea10:	d309      	bcc.n	800ea26 <tcp_receive+0x2fa>
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea18:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ea1a:	4413      	add	r3, r2
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ea24:	e004      	b.n	800ea30 <tcp_receive+0x304>
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ea30:	687b      	ldr	r3, [r7, #4]
 800ea32:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d326      	bcc.n	800ea8e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea4c:	1ad3      	subs	r3, r2, r3
 800ea4e:	b29a      	uxth	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea60:	4413      	add	r3, r2
 800ea62:	b29a      	uxth	r2, r3
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d30a      	bcc.n	800ea84 <tcp_receive+0x358>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ea78:	4413      	add	r3, r2
 800ea7a:	b29a      	uxth	r2, r3
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ea82:	e004      	b.n	800ea8e <tcp_receive+0x362>
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ea8a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea96:	4a98      	ldr	r2, [pc, #608]	; (800ecf8 <tcp_receive+0x5cc>)
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f7ff fdcb 	bl	800e634 <tcp_free_acked_segments>
 800ea9e:	4602      	mov	r2, r0
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eaac:	4a93      	ldr	r2, [pc, #588]	; (800ecfc <tcp_receive+0x5d0>)
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff fdc0 	bl	800e634 <tcp_free_acked_segments>
 800eab4:	4602      	mov	r2, r0
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d104      	bne.n	800eacc <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eac8:	861a      	strh	r2, [r3, #48]	; 0x30
 800eaca:	e002      	b.n	800ead2 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	2200      	movs	r2, #0
 800ead0:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	2200      	movs	r2, #0
 800ead6:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d103      	bne.n	800eae8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800eae0:	687b      	ldr	r3, [r7, #4]
 800eae2:	2200      	movs	r2, #0
 800eae4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800eaee:	4b84      	ldr	r3, [pc, #528]	; (800ed00 <tcp_receive+0x5d4>)
 800eaf0:	881b      	ldrh	r3, [r3, #0]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	b29a      	uxth	r2, r3
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	8b5b      	ldrh	r3, [r3, #26]
 800eb00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d035      	beq.n	800eb74 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d118      	bne.n	800eb42 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	d00c      	beq.n	800eb32 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	685b      	ldr	r3, [r3, #4]
 800eb24:	4618      	mov	r0, r3
 800eb26:	f7fb fa75 	bl	800a014 <lwip_htonl>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	dc20      	bgt.n	800eb74 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	8b5b      	ldrh	r3, [r3, #26]
 800eb36:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb3a:	b29a      	uxth	r2, r3
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eb40:	e018      	b.n	800eb74 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb4a:	68db      	ldr	r3, [r3, #12]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	4618      	mov	r0, r3
 800eb50:	f7fb fa60 	bl	800a014 <lwip_htonl>
 800eb54:	4603      	mov	r3, r0
 800eb56:	1ae3      	subs	r3, r4, r3
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	dc0b      	bgt.n	800eb74 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	8b5b      	ldrh	r3, [r3, #26]
 800eb60:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800eb64:	b29a      	uxth	r2, r3
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eb6a:	e003      	b.n	800eb74 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800eb6c:	6878      	ldr	r0, [r7, #4]
 800eb6e:	f001 ff75 	bl	8010a5c <tcp_send_empty_ack>
 800eb72:	e000      	b.n	800eb76 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eb74:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d05b      	beq.n	800ec36 <tcp_receive+0x50a>
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb82:	4b60      	ldr	r3, [pc, #384]	; (800ed04 <tcp_receive+0x5d8>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	1ad3      	subs	r3, r2, r3
 800eb88:	2b00      	cmp	r3, #0
 800eb8a:	da54      	bge.n	800ec36 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800eb8c:	4b5e      	ldr	r3, [pc, #376]	; (800ed08 <tcp_receive+0x5dc>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	b29a      	uxth	r2, r3
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb96:	b29b      	uxth	r3, r3
 800eb98:	1ad3      	subs	r3, r2, r3
 800eb9a:	b29b      	uxth	r3, r3
 800eb9c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800eba0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ebaa:	10db      	asrs	r3, r3, #3
 800ebac:	b21b      	sxth	r3, r3
 800ebae:	b29b      	uxth	r3, r3
 800ebb0:	1ad3      	subs	r3, r2, r3
 800ebb2:	b29b      	uxth	r3, r3
 800ebb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ebbe:	b29a      	uxth	r2, r3
 800ebc0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ebc4:	4413      	add	r3, r2
 800ebc6:	b29b      	uxth	r3, r3
 800ebc8:	b21a      	sxth	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800ebce:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	da05      	bge.n	800ebe2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800ebd6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ebda:	425b      	negs	r3, r3
 800ebdc:	b29b      	uxth	r3, r3
 800ebde:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800ebe2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ebec:	109b      	asrs	r3, r3, #2
 800ebee:	b21b      	sxth	r3, r3
 800ebf0:	b29b      	uxth	r3, r3
 800ebf2:	1ad3      	subs	r3, r2, r3
 800ebf4:	b29b      	uxth	r3, r3
 800ebf6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800ebfa:	687b      	ldr	r3, [r7, #4]
 800ebfc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec00:	b29a      	uxth	r2, r3
 800ec02:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800ec06:	4413      	add	r3, r2
 800ec08:	b29b      	uxth	r3, r3
 800ec0a:	b21a      	sxth	r2, r3
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ec16:	10db      	asrs	r3, r3, #3
 800ec18:	b21b      	sxth	r3, r3
 800ec1a:	b29a      	uxth	r2, r3
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ec22:	b29b      	uxth	r3, r3
 800ec24:	4413      	add	r3, r2
 800ec26:	b29b      	uxth	r3, r3
 800ec28:	b21a      	sxth	r2, r3
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	2200      	movs	r2, #0
 800ec34:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800ec36:	4b35      	ldr	r3, [pc, #212]	; (800ed0c <tcp_receive+0x5e0>)
 800ec38:	881b      	ldrh	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	f000 84e1 	beq.w	800f602 <tcp_receive+0xed6>
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	7d1b      	ldrb	r3, [r3, #20]
 800ec44:	2b06      	cmp	r3, #6
 800ec46:	f200 84dc 	bhi.w	800f602 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec4e:	4b30      	ldr	r3, [pc, #192]	; (800ed10 <tcp_receive+0x5e4>)
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	1ad3      	subs	r3, r2, r3
 800ec54:	3b01      	subs	r3, #1
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	f2c0 808e 	blt.w	800ed78 <tcp_receive+0x64c>
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec60:	4b2a      	ldr	r3, [pc, #168]	; (800ed0c <tcp_receive+0x5e0>)
 800ec62:	881b      	ldrh	r3, [r3, #0]
 800ec64:	4619      	mov	r1, r3
 800ec66:	4b2a      	ldr	r3, [pc, #168]	; (800ed10 <tcp_receive+0x5e4>)
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	440b      	add	r3, r1
 800ec6c:	1ad3      	subs	r3, r2, r3
 800ec6e:	3301      	adds	r3, #1
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	f300 8081 	bgt.w	800ed78 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ec76:	4b27      	ldr	r3, [pc, #156]	; (800ed14 <tcp_receive+0x5e8>)
 800ec78:	685b      	ldr	r3, [r3, #4]
 800ec7a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec80:	4b23      	ldr	r3, [pc, #140]	; (800ed10 <tcp_receive+0x5e4>)
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	1ad3      	subs	r3, r2, r3
 800ec86:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ec88:	4b22      	ldr	r3, [pc, #136]	; (800ed14 <tcp_receive+0x5e8>)
 800ec8a:	685b      	ldr	r3, [r3, #4]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d106      	bne.n	800ec9e <tcp_receive+0x572>
 800ec90:	4b21      	ldr	r3, [pc, #132]	; (800ed18 <tcp_receive+0x5ec>)
 800ec92:	f240 5294 	movw	r2, #1428	; 0x594
 800ec96:	4921      	ldr	r1, [pc, #132]	; (800ed1c <tcp_receive+0x5f0>)
 800ec98:	4821      	ldr	r0, [pc, #132]	; (800ed20 <tcp_receive+0x5f4>)
 800ec9a:	f005 f9d3 	bl	8014044 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ec9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eca0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d906      	bls.n	800ecb6 <tcp_receive+0x58a>
 800eca8:	4b1b      	ldr	r3, [pc, #108]	; (800ed18 <tcp_receive+0x5ec>)
 800ecaa:	f240 5295 	movw	r2, #1429	; 0x595
 800ecae:	491d      	ldr	r1, [pc, #116]	; (800ed24 <tcp_receive+0x5f8>)
 800ecb0:	481b      	ldr	r0, [pc, #108]	; (800ed20 <tcp_receive+0x5f4>)
 800ecb2:	f005 f9c7 	bl	8014044 <iprintf>
      off = (u16_t)off32;
 800ecb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ecb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ecbc:	4b15      	ldr	r3, [pc, #84]	; (800ed14 <tcp_receive+0x5e8>)
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	891b      	ldrh	r3, [r3, #8]
 800ecc2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d906      	bls.n	800ecd8 <tcp_receive+0x5ac>
 800ecca:	4b13      	ldr	r3, [pc, #76]	; (800ed18 <tcp_receive+0x5ec>)
 800eccc:	f240 5297 	movw	r2, #1431	; 0x597
 800ecd0:	4915      	ldr	r1, [pc, #84]	; (800ed28 <tcp_receive+0x5fc>)
 800ecd2:	4813      	ldr	r0, [pc, #76]	; (800ed20 <tcp_receive+0x5f4>)
 800ecd4:	f005 f9b6 	bl	8014044 <iprintf>
      inseg.len -= off;
 800ecd8:	4b0e      	ldr	r3, [pc, #56]	; (800ed14 <tcp_receive+0x5e8>)
 800ecda:	891a      	ldrh	r2, [r3, #8]
 800ecdc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ece0:	1ad3      	subs	r3, r2, r3
 800ece2:	b29a      	uxth	r2, r3
 800ece4:	4b0b      	ldr	r3, [pc, #44]	; (800ed14 <tcp_receive+0x5e8>)
 800ece6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800ece8:	4b0a      	ldr	r3, [pc, #40]	; (800ed14 <tcp_receive+0x5e8>)
 800ecea:	685b      	ldr	r3, [r3, #4]
 800ecec:	891a      	ldrh	r2, [r3, #8]
 800ecee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800ecf6:	e029      	b.n	800ed4c <tcp_receive+0x620>
 800ecf8:	0801662c 	.word	0x0801662c
 800ecfc:	08016634 	.word	0x08016634
 800ed00:	20000108 	.word	0x20000108
 800ed04:	20000104 	.word	0x20000104
 800ed08:	20007208 	.word	0x20007208
 800ed0c:	2000010a 	.word	0x2000010a
 800ed10:	20000100 	.word	0x20000100
 800ed14:	200000e0 	.word	0x200000e0
 800ed18:	080162c4 	.word	0x080162c4
 800ed1c:	0801663c 	.word	0x0801663c
 800ed20:	08016310 	.word	0x08016310
 800ed24:	0801664c 	.word	0x0801664c
 800ed28:	0801665c 	.word	0x0801665c
        off -= p->len;
 800ed2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed2e:	895b      	ldrh	r3, [r3, #10]
 800ed30:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed34:	1ad3      	subs	r3, r2, r3
 800ed36:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800ed3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed3c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ed3e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800ed40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed42:	2200      	movs	r2, #0
 800ed44:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800ed46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed48:	681b      	ldr	r3, [r3, #0]
 800ed4a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800ed4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ed4e:	895b      	ldrh	r3, [r3, #10]
 800ed50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d8e9      	bhi.n	800ed2c <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800ed58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed60:	f7fc fb70 	bl	800b444 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed68:	4a91      	ldr	r2, [pc, #580]	; (800efb0 <tcp_receive+0x884>)
 800ed6a:	6013      	str	r3, [r2, #0]
 800ed6c:	4b91      	ldr	r3, [pc, #580]	; (800efb4 <tcp_receive+0x888>)
 800ed6e:	68db      	ldr	r3, [r3, #12]
 800ed70:	4a8f      	ldr	r2, [pc, #572]	; (800efb0 <tcp_receive+0x884>)
 800ed72:	6812      	ldr	r2, [r2, #0]
 800ed74:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ed76:	e00d      	b.n	800ed94 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800ed78:	4b8d      	ldr	r3, [pc, #564]	; (800efb0 <tcp_receive+0x884>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	da06      	bge.n	800ed94 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	8b5b      	ldrh	r3, [r3, #26]
 800ed8a:	f043 0302 	orr.w	r3, r3, #2
 800ed8e:	b29a      	uxth	r2, r3
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ed94:	4b86      	ldr	r3, [pc, #536]	; (800efb0 <tcp_receive+0x884>)
 800ed96:	681a      	ldr	r2, [r3, #0]
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed9c:	1ad3      	subs	r3, r2, r3
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	f2c0 842a 	blt.w	800f5f8 <tcp_receive+0xecc>
 800eda4:	4b82      	ldr	r3, [pc, #520]	; (800efb0 <tcp_receive+0x884>)
 800eda6:	681a      	ldr	r2, [r3, #0]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edac:	6879      	ldr	r1, [r7, #4]
 800edae:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800edb0:	440b      	add	r3, r1
 800edb2:	1ad3      	subs	r3, r2, r3
 800edb4:	3301      	adds	r3, #1
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	f300 841e 	bgt.w	800f5f8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800edc0:	4b7b      	ldr	r3, [pc, #492]	; (800efb0 <tcp_receive+0x884>)
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	429a      	cmp	r2, r3
 800edc6:	f040 829a 	bne.w	800f2fe <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800edca:	4b7a      	ldr	r3, [pc, #488]	; (800efb4 <tcp_receive+0x888>)
 800edcc:	891c      	ldrh	r4, [r3, #8]
 800edce:	4b79      	ldr	r3, [pc, #484]	; (800efb4 <tcp_receive+0x888>)
 800edd0:	68db      	ldr	r3, [r3, #12]
 800edd2:	899b      	ldrh	r3, [r3, #12]
 800edd4:	b29b      	uxth	r3, r3
 800edd6:	4618      	mov	r0, r3
 800edd8:	f7fb f907 	bl	8009fea <lwip_htons>
 800eddc:	4603      	mov	r3, r0
 800edde:	b2db      	uxtb	r3, r3
 800ede0:	f003 0303 	and.w	r3, r3, #3
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	d001      	beq.n	800edec <tcp_receive+0x6c0>
 800ede8:	2301      	movs	r3, #1
 800edea:	e000      	b.n	800edee <tcp_receive+0x6c2>
 800edec:	2300      	movs	r3, #0
 800edee:	4423      	add	r3, r4
 800edf0:	b29a      	uxth	r2, r3
 800edf2:	4b71      	ldr	r3, [pc, #452]	; (800efb8 <tcp_receive+0x88c>)
 800edf4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800edfa:	4b6f      	ldr	r3, [pc, #444]	; (800efb8 <tcp_receive+0x88c>)
 800edfc:	881b      	ldrh	r3, [r3, #0]
 800edfe:	429a      	cmp	r2, r3
 800ee00:	d275      	bcs.n	800eeee <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ee02:	4b6c      	ldr	r3, [pc, #432]	; (800efb4 <tcp_receive+0x888>)
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	899b      	ldrh	r3, [r3, #12]
 800ee08:	b29b      	uxth	r3, r3
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	f7fb f8ed 	bl	8009fea <lwip_htons>
 800ee10:	4603      	mov	r3, r0
 800ee12:	b2db      	uxtb	r3, r3
 800ee14:	f003 0301 	and.w	r3, r3, #1
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d01f      	beq.n	800ee5c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ee1c:	4b65      	ldr	r3, [pc, #404]	; (800efb4 <tcp_receive+0x888>)
 800ee1e:	68db      	ldr	r3, [r3, #12]
 800ee20:	899b      	ldrh	r3, [r3, #12]
 800ee22:	b29b      	uxth	r3, r3
 800ee24:	b21b      	sxth	r3, r3
 800ee26:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ee2a:	b21c      	sxth	r4, r3
 800ee2c:	4b61      	ldr	r3, [pc, #388]	; (800efb4 <tcp_receive+0x888>)
 800ee2e:	68db      	ldr	r3, [r3, #12]
 800ee30:	899b      	ldrh	r3, [r3, #12]
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	4618      	mov	r0, r3
 800ee36:	f7fb f8d8 	bl	8009fea <lwip_htons>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	b2db      	uxtb	r3, r3
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	4618      	mov	r0, r3
 800ee48:	f7fb f8cf 	bl	8009fea <lwip_htons>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	b21b      	sxth	r3, r3
 800ee50:	4323      	orrs	r3, r4
 800ee52:	b21a      	sxth	r2, r3
 800ee54:	4b57      	ldr	r3, [pc, #348]	; (800efb4 <tcp_receive+0x888>)
 800ee56:	68db      	ldr	r3, [r3, #12]
 800ee58:	b292      	uxth	r2, r2
 800ee5a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee60:	4b54      	ldr	r3, [pc, #336]	; (800efb4 <tcp_receive+0x888>)
 800ee62:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ee64:	4b53      	ldr	r3, [pc, #332]	; (800efb4 <tcp_receive+0x888>)
 800ee66:	68db      	ldr	r3, [r3, #12]
 800ee68:	899b      	ldrh	r3, [r3, #12]
 800ee6a:	b29b      	uxth	r3, r3
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	f7fb f8bc 	bl	8009fea <lwip_htons>
 800ee72:	4603      	mov	r3, r0
 800ee74:	b2db      	uxtb	r3, r3
 800ee76:	f003 0302 	and.w	r3, r3, #2
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d005      	beq.n	800ee8a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ee7e:	4b4d      	ldr	r3, [pc, #308]	; (800efb4 <tcp_receive+0x888>)
 800ee80:	891b      	ldrh	r3, [r3, #8]
 800ee82:	3b01      	subs	r3, #1
 800ee84:	b29a      	uxth	r2, r3
 800ee86:	4b4b      	ldr	r3, [pc, #300]	; (800efb4 <tcp_receive+0x888>)
 800ee88:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ee8a:	4b4a      	ldr	r3, [pc, #296]	; (800efb4 <tcp_receive+0x888>)
 800ee8c:	685b      	ldr	r3, [r3, #4]
 800ee8e:	4a49      	ldr	r2, [pc, #292]	; (800efb4 <tcp_receive+0x888>)
 800ee90:	8912      	ldrh	r2, [r2, #8]
 800ee92:	4611      	mov	r1, r2
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fc f9d5 	bl	800b244 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ee9a:	4b46      	ldr	r3, [pc, #280]	; (800efb4 <tcp_receive+0x888>)
 800ee9c:	891c      	ldrh	r4, [r3, #8]
 800ee9e:	4b45      	ldr	r3, [pc, #276]	; (800efb4 <tcp_receive+0x888>)
 800eea0:	68db      	ldr	r3, [r3, #12]
 800eea2:	899b      	ldrh	r3, [r3, #12]
 800eea4:	b29b      	uxth	r3, r3
 800eea6:	4618      	mov	r0, r3
 800eea8:	f7fb f89f 	bl	8009fea <lwip_htons>
 800eeac:	4603      	mov	r3, r0
 800eeae:	b2db      	uxtb	r3, r3
 800eeb0:	f003 0303 	and.w	r3, r3, #3
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d001      	beq.n	800eebc <tcp_receive+0x790>
 800eeb8:	2301      	movs	r3, #1
 800eeba:	e000      	b.n	800eebe <tcp_receive+0x792>
 800eebc:	2300      	movs	r3, #0
 800eebe:	4423      	add	r3, r4
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	4b3d      	ldr	r3, [pc, #244]	; (800efb8 <tcp_receive+0x88c>)
 800eec4:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800eec6:	4b3c      	ldr	r3, [pc, #240]	; (800efb8 <tcp_receive+0x88c>)
 800eec8:	881b      	ldrh	r3, [r3, #0]
 800eeca:	461a      	mov	r2, r3
 800eecc:	4b38      	ldr	r3, [pc, #224]	; (800efb0 <tcp_receive+0x884>)
 800eece:	681b      	ldr	r3, [r3, #0]
 800eed0:	441a      	add	r2, r3
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eed6:	6879      	ldr	r1, [r7, #4]
 800eed8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eeda:	440b      	add	r3, r1
 800eedc:	429a      	cmp	r2, r3
 800eede:	d006      	beq.n	800eeee <tcp_receive+0x7c2>
 800eee0:	4b36      	ldr	r3, [pc, #216]	; (800efbc <tcp_receive+0x890>)
 800eee2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800eee6:	4936      	ldr	r1, [pc, #216]	; (800efc0 <tcp_receive+0x894>)
 800eee8:	4836      	ldr	r0, [pc, #216]	; (800efc4 <tcp_receive+0x898>)
 800eeea:	f005 f8ab 	bl	8014044 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	f000 80e7 	beq.w	800f0c6 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eef8:	4b2e      	ldr	r3, [pc, #184]	; (800efb4 <tcp_receive+0x888>)
 800eefa:	68db      	ldr	r3, [r3, #12]
 800eefc:	899b      	ldrh	r3, [r3, #12]
 800eefe:	b29b      	uxth	r3, r3
 800ef00:	4618      	mov	r0, r3
 800ef02:	f7fb f872 	bl	8009fea <lwip_htons>
 800ef06:	4603      	mov	r3, r0
 800ef08:	b2db      	uxtb	r3, r3
 800ef0a:	f003 0301 	and.w	r3, r3, #1
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d010      	beq.n	800ef34 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ef12:	e00a      	b.n	800ef2a <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef18:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ef1a:	687b      	ldr	r3, [r7, #4]
 800ef1c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ef24:	68f8      	ldr	r0, [r7, #12]
 800ef26:	f7fd fd96 	bl	800ca56 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d1f0      	bne.n	800ef14 <tcp_receive+0x7e8>
 800ef32:	e0c8      	b.n	800f0c6 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef38:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ef3a:	e052      	b.n	800efe2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ef3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ef3e:	68db      	ldr	r3, [r3, #12]
 800ef40:	899b      	ldrh	r3, [r3, #12]
 800ef42:	b29b      	uxth	r3, r3
 800ef44:	4618      	mov	r0, r3
 800ef46:	f7fb f850 	bl	8009fea <lwip_htons>
 800ef4a:	4603      	mov	r3, r0
 800ef4c:	b2db      	uxtb	r3, r3
 800ef4e:	f003 0301 	and.w	r3, r3, #1
 800ef52:	2b00      	cmp	r3, #0
 800ef54:	d03d      	beq.n	800efd2 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ef56:	4b17      	ldr	r3, [pc, #92]	; (800efb4 <tcp_receive+0x888>)
 800ef58:	68db      	ldr	r3, [r3, #12]
 800ef5a:	899b      	ldrh	r3, [r3, #12]
 800ef5c:	b29b      	uxth	r3, r3
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fb f843 	bl	8009fea <lwip_htons>
 800ef64:	4603      	mov	r3, r0
 800ef66:	b2db      	uxtb	r3, r3
 800ef68:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	d130      	bne.n	800efd2 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ef70:	4b10      	ldr	r3, [pc, #64]	; (800efb4 <tcp_receive+0x888>)
 800ef72:	68db      	ldr	r3, [r3, #12]
 800ef74:	899b      	ldrh	r3, [r3, #12]
 800ef76:	b29c      	uxth	r4, r3
 800ef78:	2001      	movs	r0, #1
 800ef7a:	f7fb f836 	bl	8009fea <lwip_htons>
 800ef7e:	4603      	mov	r3, r0
 800ef80:	461a      	mov	r2, r3
 800ef82:	4b0c      	ldr	r3, [pc, #48]	; (800efb4 <tcp_receive+0x888>)
 800ef84:	68db      	ldr	r3, [r3, #12]
 800ef86:	4322      	orrs	r2, r4
 800ef88:	b292      	uxth	r2, r2
 800ef8a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ef8c:	4b09      	ldr	r3, [pc, #36]	; (800efb4 <tcp_receive+0x888>)
 800ef8e:	891c      	ldrh	r4, [r3, #8]
 800ef90:	4b08      	ldr	r3, [pc, #32]	; (800efb4 <tcp_receive+0x888>)
 800ef92:	68db      	ldr	r3, [r3, #12]
 800ef94:	899b      	ldrh	r3, [r3, #12]
 800ef96:	b29b      	uxth	r3, r3
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fb f826 	bl	8009fea <lwip_htons>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	b2db      	uxtb	r3, r3
 800efa2:	f003 0303 	and.w	r3, r3, #3
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d00e      	beq.n	800efc8 <tcp_receive+0x89c>
 800efaa:	2301      	movs	r3, #1
 800efac:	e00d      	b.n	800efca <tcp_receive+0x89e>
 800efae:	bf00      	nop
 800efb0:	20000100 	.word	0x20000100
 800efb4:	200000e0 	.word	0x200000e0
 800efb8:	2000010a 	.word	0x2000010a
 800efbc:	080162c4 	.word	0x080162c4
 800efc0:	0801666c 	.word	0x0801666c
 800efc4:	08016310 	.word	0x08016310
 800efc8:	2300      	movs	r3, #0
 800efca:	4423      	add	r3, r4
 800efcc:	b29a      	uxth	r2, r3
 800efce:	4b98      	ldr	r3, [pc, #608]	; (800f230 <tcp_receive+0xb04>)
 800efd0:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800efd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd4:	613b      	str	r3, [r7, #16]
              next = next->next;
 800efd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800efdc:	6938      	ldr	r0, [r7, #16]
 800efde:	f7fd fd3a 	bl	800ca56 <tcp_seg_free>
            while (next &&
 800efe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d00e      	beq.n	800f006 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800efe8:	4b91      	ldr	r3, [pc, #580]	; (800f230 <tcp_receive+0xb04>)
 800efea:	881b      	ldrh	r3, [r3, #0]
 800efec:	461a      	mov	r2, r3
 800efee:	4b91      	ldr	r3, [pc, #580]	; (800f234 <tcp_receive+0xb08>)
 800eff0:	681b      	ldr	r3, [r3, #0]
 800eff2:	441a      	add	r2, r3
 800eff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eff6:	68db      	ldr	r3, [r3, #12]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800effc:	8909      	ldrh	r1, [r1, #8]
 800effe:	440b      	add	r3, r1
 800f000:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f002:	2b00      	cmp	r3, #0
 800f004:	da9a      	bge.n	800ef3c <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f006:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d059      	beq.n	800f0c0 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800f00c:	4b88      	ldr	r3, [pc, #544]	; (800f230 <tcp_receive+0xb04>)
 800f00e:	881b      	ldrh	r3, [r3, #0]
 800f010:	461a      	mov	r2, r3
 800f012:	4b88      	ldr	r3, [pc, #544]	; (800f234 <tcp_receive+0xb08>)
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	441a      	add	r2, r3
 800f018:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	685b      	ldr	r3, [r3, #4]
 800f01e:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f020:	2b00      	cmp	r3, #0
 800f022:	dd4d      	ble.n	800f0c0 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f026:	68db      	ldr	r3, [r3, #12]
 800f028:	685b      	ldr	r3, [r3, #4]
 800f02a:	b29a      	uxth	r2, r3
 800f02c:	4b81      	ldr	r3, [pc, #516]	; (800f234 <tcp_receive+0xb08>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	b29b      	uxth	r3, r3
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	b29a      	uxth	r2, r3
 800f036:	4b80      	ldr	r3, [pc, #512]	; (800f238 <tcp_receive+0xb0c>)
 800f038:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f03a:	4b7f      	ldr	r3, [pc, #508]	; (800f238 <tcp_receive+0xb0c>)
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	899b      	ldrh	r3, [r3, #12]
 800f040:	b29b      	uxth	r3, r3
 800f042:	4618      	mov	r0, r3
 800f044:	f7fa ffd1 	bl	8009fea <lwip_htons>
 800f048:	4603      	mov	r3, r0
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d005      	beq.n	800f060 <tcp_receive+0x934>
                inseg.len -= 1;
 800f054:	4b78      	ldr	r3, [pc, #480]	; (800f238 <tcp_receive+0xb0c>)
 800f056:	891b      	ldrh	r3, [r3, #8]
 800f058:	3b01      	subs	r3, #1
 800f05a:	b29a      	uxth	r2, r3
 800f05c:	4b76      	ldr	r3, [pc, #472]	; (800f238 <tcp_receive+0xb0c>)
 800f05e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f060:	4b75      	ldr	r3, [pc, #468]	; (800f238 <tcp_receive+0xb0c>)
 800f062:	685b      	ldr	r3, [r3, #4]
 800f064:	4a74      	ldr	r2, [pc, #464]	; (800f238 <tcp_receive+0xb0c>)
 800f066:	8912      	ldrh	r2, [r2, #8]
 800f068:	4611      	mov	r1, r2
 800f06a:	4618      	mov	r0, r3
 800f06c:	f7fc f8ea 	bl	800b244 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f070:	4b71      	ldr	r3, [pc, #452]	; (800f238 <tcp_receive+0xb0c>)
 800f072:	891c      	ldrh	r4, [r3, #8]
 800f074:	4b70      	ldr	r3, [pc, #448]	; (800f238 <tcp_receive+0xb0c>)
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	899b      	ldrh	r3, [r3, #12]
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	4618      	mov	r0, r3
 800f07e:	f7fa ffb4 	bl	8009fea <lwip_htons>
 800f082:	4603      	mov	r3, r0
 800f084:	b2db      	uxtb	r3, r3
 800f086:	f003 0303 	and.w	r3, r3, #3
 800f08a:	2b00      	cmp	r3, #0
 800f08c:	d001      	beq.n	800f092 <tcp_receive+0x966>
 800f08e:	2301      	movs	r3, #1
 800f090:	e000      	b.n	800f094 <tcp_receive+0x968>
 800f092:	2300      	movs	r3, #0
 800f094:	4423      	add	r3, r4
 800f096:	b29a      	uxth	r2, r3
 800f098:	4b65      	ldr	r3, [pc, #404]	; (800f230 <tcp_receive+0xb04>)
 800f09a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f09c:	4b64      	ldr	r3, [pc, #400]	; (800f230 <tcp_receive+0xb04>)
 800f09e:	881b      	ldrh	r3, [r3, #0]
 800f0a0:	461a      	mov	r2, r3
 800f0a2:	4b64      	ldr	r3, [pc, #400]	; (800f234 <tcp_receive+0xb08>)
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	441a      	add	r2, r3
 800f0a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f0aa:	68db      	ldr	r3, [r3, #12]
 800f0ac:	685b      	ldr	r3, [r3, #4]
 800f0ae:	429a      	cmp	r2, r3
 800f0b0:	d006      	beq.n	800f0c0 <tcp_receive+0x994>
 800f0b2:	4b62      	ldr	r3, [pc, #392]	; (800f23c <tcp_receive+0xb10>)
 800f0b4:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f0b8:	4961      	ldr	r1, [pc, #388]	; (800f240 <tcp_receive+0xb14>)
 800f0ba:	4862      	ldr	r0, [pc, #392]	; (800f244 <tcp_receive+0xb18>)
 800f0bc:	f004 ffc2 	bl	8014044 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f0c4:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f0c6:	4b5a      	ldr	r3, [pc, #360]	; (800f230 <tcp_receive+0xb04>)
 800f0c8:	881b      	ldrh	r3, [r3, #0]
 800f0ca:	461a      	mov	r2, r3
 800f0cc:	4b59      	ldr	r3, [pc, #356]	; (800f234 <tcp_receive+0xb08>)
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	441a      	add	r2, r3
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f0da:	4b55      	ldr	r3, [pc, #340]	; (800f230 <tcp_receive+0xb04>)
 800f0dc:	881b      	ldrh	r3, [r3, #0]
 800f0de:	429a      	cmp	r2, r3
 800f0e0:	d206      	bcs.n	800f0f0 <tcp_receive+0x9c4>
 800f0e2:	4b56      	ldr	r3, [pc, #344]	; (800f23c <tcp_receive+0xb10>)
 800f0e4:	f240 6207 	movw	r2, #1543	; 0x607
 800f0e8:	4957      	ldr	r1, [pc, #348]	; (800f248 <tcp_receive+0xb1c>)
 800f0ea:	4856      	ldr	r0, [pc, #344]	; (800f244 <tcp_receive+0xb18>)
 800f0ec:	f004 ffaa 	bl	8014044 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f0f4:	4b4e      	ldr	r3, [pc, #312]	; (800f230 <tcp_receive+0xb04>)
 800f0f6:	881b      	ldrh	r3, [r3, #0]
 800f0f8:	1ad3      	subs	r3, r2, r3
 800f0fa:	b29a      	uxth	r2, r3
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f7fc ffc9 	bl	800c098 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f106:	4b4c      	ldr	r3, [pc, #304]	; (800f238 <tcp_receive+0xb0c>)
 800f108:	685b      	ldr	r3, [r3, #4]
 800f10a:	891b      	ldrh	r3, [r3, #8]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d006      	beq.n	800f11e <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800f110:	4b49      	ldr	r3, [pc, #292]	; (800f238 <tcp_receive+0xb0c>)
 800f112:	685b      	ldr	r3, [r3, #4]
 800f114:	4a4d      	ldr	r2, [pc, #308]	; (800f24c <tcp_receive+0xb20>)
 800f116:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f118:	4b47      	ldr	r3, [pc, #284]	; (800f238 <tcp_receive+0xb0c>)
 800f11a:	2200      	movs	r2, #0
 800f11c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f11e:	4b46      	ldr	r3, [pc, #280]	; (800f238 <tcp_receive+0xb0c>)
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	899b      	ldrh	r3, [r3, #12]
 800f124:	b29b      	uxth	r3, r3
 800f126:	4618      	mov	r0, r3
 800f128:	f7fa ff5f 	bl	8009fea <lwip_htons>
 800f12c:	4603      	mov	r3, r0
 800f12e:	b2db      	uxtb	r3, r3
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	2b00      	cmp	r3, #0
 800f136:	f000 80b8 	beq.w	800f2aa <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f13a:	4b45      	ldr	r3, [pc, #276]	; (800f250 <tcp_receive+0xb24>)
 800f13c:	781b      	ldrb	r3, [r3, #0]
 800f13e:	f043 0320 	orr.w	r3, r3, #32
 800f142:	b2da      	uxtb	r2, r3
 800f144:	4b42      	ldr	r3, [pc, #264]	; (800f250 <tcp_receive+0xb24>)
 800f146:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f148:	e0af      	b.n	800f2aa <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f14e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4a36      	ldr	r2, [pc, #216]	; (800f234 <tcp_receive+0xb08>)
 800f15a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f15c:	68bb      	ldr	r3, [r7, #8]
 800f15e:	891b      	ldrh	r3, [r3, #8]
 800f160:	461c      	mov	r4, r3
 800f162:	68bb      	ldr	r3, [r7, #8]
 800f164:	68db      	ldr	r3, [r3, #12]
 800f166:	899b      	ldrh	r3, [r3, #12]
 800f168:	b29b      	uxth	r3, r3
 800f16a:	4618      	mov	r0, r3
 800f16c:	f7fa ff3d 	bl	8009fea <lwip_htons>
 800f170:	4603      	mov	r3, r0
 800f172:	b2db      	uxtb	r3, r3
 800f174:	f003 0303 	and.w	r3, r3, #3
 800f178:	2b00      	cmp	r3, #0
 800f17a:	d001      	beq.n	800f180 <tcp_receive+0xa54>
 800f17c:	2301      	movs	r3, #1
 800f17e:	e000      	b.n	800f182 <tcp_receive+0xa56>
 800f180:	2300      	movs	r3, #0
 800f182:	191a      	adds	r2, r3, r4
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f188:	441a      	add	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f192:	461c      	mov	r4, r3
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	891b      	ldrh	r3, [r3, #8]
 800f198:	461d      	mov	r5, r3
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	899b      	ldrh	r3, [r3, #12]
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fa ff21 	bl	8009fea <lwip_htons>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	b2db      	uxtb	r3, r3
 800f1ac:	f003 0303 	and.w	r3, r3, #3
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d001      	beq.n	800f1b8 <tcp_receive+0xa8c>
 800f1b4:	2301      	movs	r3, #1
 800f1b6:	e000      	b.n	800f1ba <tcp_receive+0xa8e>
 800f1b8:	2300      	movs	r3, #0
 800f1ba:	442b      	add	r3, r5
 800f1bc:	429c      	cmp	r4, r3
 800f1be:	d206      	bcs.n	800f1ce <tcp_receive+0xaa2>
 800f1c0:	4b1e      	ldr	r3, [pc, #120]	; (800f23c <tcp_receive+0xb10>)
 800f1c2:	f240 622b 	movw	r2, #1579	; 0x62b
 800f1c6:	4923      	ldr	r1, [pc, #140]	; (800f254 <tcp_receive+0xb28>)
 800f1c8:	481e      	ldr	r0, [pc, #120]	; (800f244 <tcp_receive+0xb18>)
 800f1ca:	f004 ff3b 	bl	8014044 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	891b      	ldrh	r3, [r3, #8]
 800f1d2:	461c      	mov	r4, r3
 800f1d4:	68bb      	ldr	r3, [r7, #8]
 800f1d6:	68db      	ldr	r3, [r3, #12]
 800f1d8:	899b      	ldrh	r3, [r3, #12]
 800f1da:	b29b      	uxth	r3, r3
 800f1dc:	4618      	mov	r0, r3
 800f1de:	f7fa ff04 	bl	8009fea <lwip_htons>
 800f1e2:	4603      	mov	r3, r0
 800f1e4:	b2db      	uxtb	r3, r3
 800f1e6:	f003 0303 	and.w	r3, r3, #3
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d001      	beq.n	800f1f2 <tcp_receive+0xac6>
 800f1ee:	2301      	movs	r3, #1
 800f1f0:	e000      	b.n	800f1f4 <tcp_receive+0xac8>
 800f1f2:	2300      	movs	r3, #0
 800f1f4:	1919      	adds	r1, r3, r4
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f1fa:	b28b      	uxth	r3, r1
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	b29a      	uxth	r2, r3
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f7fc ff47 	bl	800c098 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	891b      	ldrh	r3, [r3, #8]
 800f210:	2b00      	cmp	r3, #0
 800f212:	d028      	beq.n	800f266 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f214:	4b0d      	ldr	r3, [pc, #52]	; (800f24c <tcp_receive+0xb20>)
 800f216:	681b      	ldr	r3, [r3, #0]
 800f218:	2b00      	cmp	r3, #0
 800f21a:	d01d      	beq.n	800f258 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800f21c:	4b0b      	ldr	r3, [pc, #44]	; (800f24c <tcp_receive+0xb20>)
 800f21e:	681a      	ldr	r2, [r3, #0]
 800f220:	68bb      	ldr	r3, [r7, #8]
 800f222:	685b      	ldr	r3, [r3, #4]
 800f224:	4619      	mov	r1, r3
 800f226:	4610      	mov	r0, r2
 800f228:	f7fc fa54 	bl	800b6d4 <pbuf_cat>
 800f22c:	e018      	b.n	800f260 <tcp_receive+0xb34>
 800f22e:	bf00      	nop
 800f230:	2000010a 	.word	0x2000010a
 800f234:	20000100 	.word	0x20000100
 800f238:	200000e0 	.word	0x200000e0
 800f23c:	080162c4 	.word	0x080162c4
 800f240:	080166a4 	.word	0x080166a4
 800f244:	08016310 	.word	0x08016310
 800f248:	080166e0 	.word	0x080166e0
 800f24c:	20000110 	.word	0x20000110
 800f250:	2000010d 	.word	0x2000010d
 800f254:	08016700 	.word	0x08016700
            } else {
              recv_data = cseg->p;
 800f258:	68bb      	ldr	r3, [r7, #8]
 800f25a:	685b      	ldr	r3, [r3, #4]
 800f25c:	4a70      	ldr	r2, [pc, #448]	; (800f420 <tcp_receive+0xcf4>)
 800f25e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f260:	68bb      	ldr	r3, [r7, #8]
 800f262:	2200      	movs	r2, #0
 800f264:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f266:	68bb      	ldr	r3, [r7, #8]
 800f268:	68db      	ldr	r3, [r3, #12]
 800f26a:	899b      	ldrh	r3, [r3, #12]
 800f26c:	b29b      	uxth	r3, r3
 800f26e:	4618      	mov	r0, r3
 800f270:	f7fa febb 	bl	8009fea <lwip_htons>
 800f274:	4603      	mov	r3, r0
 800f276:	b2db      	uxtb	r3, r3
 800f278:	f003 0301 	and.w	r3, r3, #1
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d00d      	beq.n	800f29c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f280:	4b68      	ldr	r3, [pc, #416]	; (800f424 <tcp_receive+0xcf8>)
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	f043 0320 	orr.w	r3, r3, #32
 800f288:	b2da      	uxtb	r2, r3
 800f28a:	4b66      	ldr	r3, [pc, #408]	; (800f424 <tcp_receive+0xcf8>)
 800f28c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	7d1b      	ldrb	r3, [r3, #20]
 800f292:	2b04      	cmp	r3, #4
 800f294:	d102      	bne.n	800f29c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	2207      	movs	r2, #7
 800f29a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f29c:	68bb      	ldr	r3, [r7, #8]
 800f29e:	681a      	ldr	r2, [r3, #0]
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f2a4:	68b8      	ldr	r0, [r7, #8]
 800f2a6:	f7fd fbd6 	bl	800ca56 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f2aa:	687b      	ldr	r3, [r7, #4]
 800f2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d008      	beq.n	800f2c4 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f2b6:	68db      	ldr	r3, [r3, #12]
 800f2b8:	685a      	ldr	r2, [r3, #4]
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f2be:	429a      	cmp	r2, r3
 800f2c0:	f43f af43 	beq.w	800f14a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	8b5b      	ldrh	r3, [r3, #26]
 800f2c8:	f003 0301 	and.w	r3, r3, #1
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d00e      	beq.n	800f2ee <tcp_receive+0xbc2>
 800f2d0:	687b      	ldr	r3, [r7, #4]
 800f2d2:	8b5b      	ldrh	r3, [r3, #26]
 800f2d4:	f023 0301 	bic.w	r3, r3, #1
 800f2d8:	b29a      	uxth	r2, r3
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	835a      	strh	r2, [r3, #26]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	8b5b      	ldrh	r3, [r3, #26]
 800f2e2:	f043 0302 	orr.w	r3, r3, #2
 800f2e6:	b29a      	uxth	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f2ec:	e188      	b.n	800f600 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	8b5b      	ldrh	r3, [r3, #26]
 800f2f2:	f043 0301 	orr.w	r3, r3, #1
 800f2f6:	b29a      	uxth	r2, r3
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f2fc:	e180      	b.n	800f600 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f302:	2b00      	cmp	r3, #0
 800f304:	d106      	bne.n	800f314 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f306:	4848      	ldr	r0, [pc, #288]	; (800f428 <tcp_receive+0xcfc>)
 800f308:	f7fd fbbe 	bl	800ca88 <tcp_seg_copy>
 800f30c:	4602      	mov	r2, r0
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	675a      	str	r2, [r3, #116]	; 0x74
 800f312:	e16d      	b.n	800f5f0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f31c:	63bb      	str	r3, [r7, #56]	; 0x38
 800f31e:	e157      	b.n	800f5d0 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f322:	68db      	ldr	r3, [r3, #12]
 800f324:	685a      	ldr	r2, [r3, #4]
 800f326:	4b41      	ldr	r3, [pc, #260]	; (800f42c <tcp_receive+0xd00>)
 800f328:	681b      	ldr	r3, [r3, #0]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d11d      	bne.n	800f36a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f32e:	4b3e      	ldr	r3, [pc, #248]	; (800f428 <tcp_receive+0xcfc>)
 800f330:	891a      	ldrh	r2, [r3, #8]
 800f332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f334:	891b      	ldrh	r3, [r3, #8]
 800f336:	429a      	cmp	r2, r3
 800f338:	f240 814f 	bls.w	800f5da <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f33c:	483a      	ldr	r0, [pc, #232]	; (800f428 <tcp_receive+0xcfc>)
 800f33e:	f7fd fba3 	bl	800ca88 <tcp_seg_copy>
 800f342:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	2b00      	cmp	r3, #0
 800f348:	f000 8149 	beq.w	800f5de <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f34c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d003      	beq.n	800f35a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f354:	697a      	ldr	r2, [r7, #20]
 800f356:	601a      	str	r2, [r3, #0]
 800f358:	e002      	b.n	800f360 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	697a      	ldr	r2, [r7, #20]
 800f35e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f360:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f362:	6978      	ldr	r0, [r7, #20]
 800f364:	f7ff f8de 	bl	800e524 <tcp_oos_insert_segment>
                }
                break;
 800f368:	e139      	b.n	800f5de <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d117      	bne.n	800f3a0 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f370:	4b2e      	ldr	r3, [pc, #184]	; (800f42c <tcp_receive+0xd00>)
 800f372:	681a      	ldr	r2, [r3, #0]
 800f374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f376:	68db      	ldr	r3, [r3, #12]
 800f378:	685b      	ldr	r3, [r3, #4]
 800f37a:	1ad3      	subs	r3, r2, r3
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	da57      	bge.n	800f430 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f380:	4829      	ldr	r0, [pc, #164]	; (800f428 <tcp_receive+0xcfc>)
 800f382:	f7fd fb81 	bl	800ca88 <tcp_seg_copy>
 800f386:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f388:	69bb      	ldr	r3, [r7, #24]
 800f38a:	2b00      	cmp	r3, #0
 800f38c:	f000 8129 	beq.w	800f5e2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	69ba      	ldr	r2, [r7, #24]
 800f394:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f396:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f398:	69b8      	ldr	r0, [r7, #24]
 800f39a:	f7ff f8c3 	bl	800e524 <tcp_oos_insert_segment>
                  }
                  break;
 800f39e:	e120      	b.n	800f5e2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f3a0:	4b22      	ldr	r3, [pc, #136]	; (800f42c <tcp_receive+0xd00>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3a6:	68db      	ldr	r3, [r3, #12]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	1ad3      	subs	r3, r2, r3
 800f3ac:	3b01      	subs	r3, #1
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	db3e      	blt.n	800f430 <tcp_receive+0xd04>
 800f3b2:	4b1e      	ldr	r3, [pc, #120]	; (800f42c <tcp_receive+0xd00>)
 800f3b4:	681a      	ldr	r2, [r3, #0]
 800f3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f3b8:	68db      	ldr	r3, [r3, #12]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	1ad3      	subs	r3, r2, r3
 800f3be:	3301      	adds	r3, #1
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	dc35      	bgt.n	800f430 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f3c4:	4818      	ldr	r0, [pc, #96]	; (800f428 <tcp_receive+0xcfc>)
 800f3c6:	f7fd fb5f 	bl	800ca88 <tcp_seg_copy>
 800f3ca:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f3cc:	69fb      	ldr	r3, [r7, #28]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	f000 8109 	beq.w	800f5e6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f3d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3d6:	68db      	ldr	r3, [r3, #12]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f3dc:	8912      	ldrh	r2, [r2, #8]
 800f3de:	441a      	add	r2, r3
 800f3e0:	4b12      	ldr	r3, [pc, #72]	; (800f42c <tcp_receive+0xd00>)
 800f3e2:	681b      	ldr	r3, [r3, #0]
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	dd12      	ble.n	800f410 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f3ea:	4b10      	ldr	r3, [pc, #64]	; (800f42c <tcp_receive+0xd00>)
 800f3ec:	681b      	ldr	r3, [r3, #0]
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3f2:	68db      	ldr	r3, [r3, #12]
 800f3f4:	685b      	ldr	r3, [r3, #4]
 800f3f6:	b29b      	uxth	r3, r3
 800f3f8:	1ad3      	subs	r3, r2, r3
 800f3fa:	b29a      	uxth	r2, r3
 800f3fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f3fe:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f402:	685a      	ldr	r2, [r3, #4]
 800f404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f406:	891b      	ldrh	r3, [r3, #8]
 800f408:	4619      	mov	r1, r3
 800f40a:	4610      	mov	r0, r2
 800f40c:	f7fb ff1a 	bl	800b244 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f412:	69fa      	ldr	r2, [r7, #28]
 800f414:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f416:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f418:	69f8      	ldr	r0, [r7, #28]
 800f41a:	f7ff f883 	bl	800e524 <tcp_oos_insert_segment>
                  }
                  break;
 800f41e:	e0e2      	b.n	800f5e6 <tcp_receive+0xeba>
 800f420:	20000110 	.word	0x20000110
 800f424:	2000010d 	.word	0x2000010d
 800f428:	200000e0 	.word	0x200000e0
 800f42c:	20000100 	.word	0x20000100
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f432:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	f040 80c6 	bne.w	800f5ca <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f43e:	4b80      	ldr	r3, [pc, #512]	; (800f640 <tcp_receive+0xf14>)
 800f440:	681a      	ldr	r2, [r3, #0]
 800f442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f444:	68db      	ldr	r3, [r3, #12]
 800f446:	685b      	ldr	r3, [r3, #4]
 800f448:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	f340 80bd 	ble.w	800f5ca <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	899b      	ldrh	r3, [r3, #12]
 800f456:	b29b      	uxth	r3, r3
 800f458:	4618      	mov	r0, r3
 800f45a:	f7fa fdc6 	bl	8009fea <lwip_htons>
 800f45e:	4603      	mov	r3, r0
 800f460:	b2db      	uxtb	r3, r3
 800f462:	f003 0301 	and.w	r3, r3, #1
 800f466:	2b00      	cmp	r3, #0
 800f468:	f040 80bf 	bne.w	800f5ea <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f46c:	4875      	ldr	r0, [pc, #468]	; (800f644 <tcp_receive+0xf18>)
 800f46e:	f7fd fb0b 	bl	800ca88 <tcp_seg_copy>
 800f472:	4602      	mov	r2, r0
 800f474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f476:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	2b00      	cmp	r3, #0
 800f47e:	f000 80b6 	beq.w	800f5ee <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f484:	68db      	ldr	r3, [r3, #12]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f48a:	8912      	ldrh	r2, [r2, #8]
 800f48c:	441a      	add	r2, r3
 800f48e:	4b6c      	ldr	r3, [pc, #432]	; (800f640 <tcp_receive+0xf14>)
 800f490:	681b      	ldr	r3, [r3, #0]
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	2b00      	cmp	r3, #0
 800f496:	dd12      	ble.n	800f4be <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f498:	4b69      	ldr	r3, [pc, #420]	; (800f640 <tcp_receive+0xf14>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	b29a      	uxth	r2, r3
 800f49e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4a0:	68db      	ldr	r3, [r3, #12]
 800f4a2:	685b      	ldr	r3, [r3, #4]
 800f4a4:	b29b      	uxth	r3, r3
 800f4a6:	1ad3      	subs	r3, r2, r3
 800f4a8:	b29a      	uxth	r2, r3
 800f4aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ac:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f4ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b0:	685a      	ldr	r2, [r3, #4]
 800f4b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b4:	891b      	ldrh	r3, [r3, #8]
 800f4b6:	4619      	mov	r1, r3
 800f4b8:	4610      	mov	r0, r2
 800f4ba:	f7fb fec3 	bl	800b244 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f4be:	4b62      	ldr	r3, [pc, #392]	; (800f648 <tcp_receive+0xf1c>)
 800f4c0:	881b      	ldrh	r3, [r3, #0]
 800f4c2:	461a      	mov	r2, r3
 800f4c4:	4b5e      	ldr	r3, [pc, #376]	; (800f640 <tcp_receive+0xf14>)
 800f4c6:	681b      	ldr	r3, [r3, #0]
 800f4c8:	441a      	add	r2, r3
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4ce:	6879      	ldr	r1, [r7, #4]
 800f4d0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4d2:	440b      	add	r3, r1
 800f4d4:	1ad3      	subs	r3, r2, r3
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	f340 8089 	ble.w	800f5ee <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4de:	681b      	ldr	r3, [r3, #0]
 800f4e0:	68db      	ldr	r3, [r3, #12]
 800f4e2:	899b      	ldrh	r3, [r3, #12]
 800f4e4:	b29b      	uxth	r3, r3
 800f4e6:	4618      	mov	r0, r3
 800f4e8:	f7fa fd7f 	bl	8009fea <lwip_htons>
 800f4ec:	4603      	mov	r3, r0
 800f4ee:	b2db      	uxtb	r3, r3
 800f4f0:	f003 0301 	and.w	r3, r3, #1
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d022      	beq.n	800f53e <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	68db      	ldr	r3, [r3, #12]
 800f4fe:	899b      	ldrh	r3, [r3, #12]
 800f500:	b29b      	uxth	r3, r3
 800f502:	b21b      	sxth	r3, r3
 800f504:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f508:	b21c      	sxth	r4, r3
 800f50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f50c:	681b      	ldr	r3, [r3, #0]
 800f50e:	68db      	ldr	r3, [r3, #12]
 800f510:	899b      	ldrh	r3, [r3, #12]
 800f512:	b29b      	uxth	r3, r3
 800f514:	4618      	mov	r0, r3
 800f516:	f7fa fd68 	bl	8009fea <lwip_htons>
 800f51a:	4603      	mov	r3, r0
 800f51c:	b2db      	uxtb	r3, r3
 800f51e:	b29b      	uxth	r3, r3
 800f520:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f524:	b29b      	uxth	r3, r3
 800f526:	4618      	mov	r0, r3
 800f528:	f7fa fd5f 	bl	8009fea <lwip_htons>
 800f52c:	4603      	mov	r3, r0
 800f52e:	b21b      	sxth	r3, r3
 800f530:	4323      	orrs	r3, r4
 800f532:	b21a      	sxth	r2, r3
 800f534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	68db      	ldr	r3, [r3, #12]
 800f53a:	b292      	uxth	r2, r2
 800f53c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f53e:	687b      	ldr	r3, [r7, #4]
 800f540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f542:	b29a      	uxth	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f548:	4413      	add	r3, r2
 800f54a:	b299      	uxth	r1, r3
 800f54c:	4b3c      	ldr	r3, [pc, #240]	; (800f640 <tcp_receive+0xf14>)
 800f54e:	681b      	ldr	r3, [r3, #0]
 800f550:	b29a      	uxth	r2, r3
 800f552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f554:	681b      	ldr	r3, [r3, #0]
 800f556:	1a8a      	subs	r2, r1, r2
 800f558:	b292      	uxth	r2, r2
 800f55a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f55e:	681b      	ldr	r3, [r3, #0]
 800f560:	685a      	ldr	r2, [r3, #4]
 800f562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f564:	681b      	ldr	r3, [r3, #0]
 800f566:	891b      	ldrh	r3, [r3, #8]
 800f568:	4619      	mov	r1, r3
 800f56a:	4610      	mov	r0, r2
 800f56c:	f7fb fe6a 	bl	800b244 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	891c      	ldrh	r4, [r3, #8]
 800f576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f578:	681b      	ldr	r3, [r3, #0]
 800f57a:	68db      	ldr	r3, [r3, #12]
 800f57c:	899b      	ldrh	r3, [r3, #12]
 800f57e:	b29b      	uxth	r3, r3
 800f580:	4618      	mov	r0, r3
 800f582:	f7fa fd32 	bl	8009fea <lwip_htons>
 800f586:	4603      	mov	r3, r0
 800f588:	b2db      	uxtb	r3, r3
 800f58a:	f003 0303 	and.w	r3, r3, #3
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d001      	beq.n	800f596 <tcp_receive+0xe6a>
 800f592:	2301      	movs	r3, #1
 800f594:	e000      	b.n	800f598 <tcp_receive+0xe6c>
 800f596:	2300      	movs	r3, #0
 800f598:	4423      	add	r3, r4
 800f59a:	b29a      	uxth	r2, r3
 800f59c:	4b2a      	ldr	r3, [pc, #168]	; (800f648 <tcp_receive+0xf1c>)
 800f59e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f5a0:	4b29      	ldr	r3, [pc, #164]	; (800f648 <tcp_receive+0xf1c>)
 800f5a2:	881b      	ldrh	r3, [r3, #0]
 800f5a4:	461a      	mov	r2, r3
 800f5a6:	4b26      	ldr	r3, [pc, #152]	; (800f640 <tcp_receive+0xf14>)
 800f5a8:	681b      	ldr	r3, [r3, #0]
 800f5aa:	441a      	add	r2, r3
 800f5ac:	687b      	ldr	r3, [r7, #4]
 800f5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f5b0:	6879      	ldr	r1, [r7, #4]
 800f5b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f5b4:	440b      	add	r3, r1
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d019      	beq.n	800f5ee <tcp_receive+0xec2>
 800f5ba:	4b24      	ldr	r3, [pc, #144]	; (800f64c <tcp_receive+0xf20>)
 800f5bc:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f5c0:	4923      	ldr	r1, [pc, #140]	; (800f650 <tcp_receive+0xf24>)
 800f5c2:	4824      	ldr	r0, [pc, #144]	; (800f654 <tcp_receive+0xf28>)
 800f5c4:	f004 fd3e 	bl	8014044 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f5c8:	e011      	b.n	800f5ee <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f5ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5cc:	681b      	ldr	r3, [r3, #0]
 800f5ce:	63bb      	str	r3, [r7, #56]	; 0x38
 800f5d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f47f aea4 	bne.w	800f320 <tcp_receive+0xbf4>
 800f5d8:	e00a      	b.n	800f5f0 <tcp_receive+0xec4>
                break;
 800f5da:	bf00      	nop
 800f5dc:	e008      	b.n	800f5f0 <tcp_receive+0xec4>
                break;
 800f5de:	bf00      	nop
 800f5e0:	e006      	b.n	800f5f0 <tcp_receive+0xec4>
                  break;
 800f5e2:	bf00      	nop
 800f5e4:	e004      	b.n	800f5f0 <tcp_receive+0xec4>
                  break;
 800f5e6:	bf00      	nop
 800f5e8:	e002      	b.n	800f5f0 <tcp_receive+0xec4>
                  break;
 800f5ea:	bf00      	nop
 800f5ec:	e000      	b.n	800f5f0 <tcp_receive+0xec4>
                break;
 800f5ee:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f5f0:	6878      	ldr	r0, [r7, #4]
 800f5f2:	f001 fa33 	bl	8010a5c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f5f6:	e003      	b.n	800f600 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f5f8:	6878      	ldr	r0, [r7, #4]
 800f5fa:	f001 fa2f 	bl	8010a5c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f5fe:	e01a      	b.n	800f636 <tcp_receive+0xf0a>
 800f600:	e019      	b.n	800f636 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f602:	4b0f      	ldr	r3, [pc, #60]	; (800f640 <tcp_receive+0xf14>)
 800f604:	681a      	ldr	r2, [r3, #0]
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f60a:	1ad3      	subs	r3, r2, r3
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	db0a      	blt.n	800f626 <tcp_receive+0xefa>
 800f610:	4b0b      	ldr	r3, [pc, #44]	; (800f640 <tcp_receive+0xf14>)
 800f612:	681a      	ldr	r2, [r3, #0]
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	6879      	ldr	r1, [r7, #4]
 800f61a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f61c:	440b      	add	r3, r1
 800f61e:	1ad3      	subs	r3, r2, r3
 800f620:	3301      	adds	r3, #1
 800f622:	2b00      	cmp	r3, #0
 800f624:	dd07      	ble.n	800f636 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	8b5b      	ldrh	r3, [r3, #26]
 800f62a:	f043 0302 	orr.w	r3, r3, #2
 800f62e:	b29a      	uxth	r2, r3
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f634:	e7ff      	b.n	800f636 <tcp_receive+0xf0a>
 800f636:	bf00      	nop
 800f638:	3750      	adds	r7, #80	; 0x50
 800f63a:	46bd      	mov	sp, r7
 800f63c:	bdb0      	pop	{r4, r5, r7, pc}
 800f63e:	bf00      	nop
 800f640:	20000100 	.word	0x20000100
 800f644:	200000e0 	.word	0x200000e0
 800f648:	2000010a 	.word	0x2000010a
 800f64c:	080162c4 	.word	0x080162c4
 800f650:	0801666c 	.word	0x0801666c
 800f654:	08016310 	.word	0x08016310

0800f658 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f658:	b480      	push	{r7}
 800f65a:	b083      	sub	sp, #12
 800f65c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f65e:	4b15      	ldr	r3, [pc, #84]	; (800f6b4 <tcp_get_next_optbyte+0x5c>)
 800f660:	881b      	ldrh	r3, [r3, #0]
 800f662:	1c5a      	adds	r2, r3, #1
 800f664:	b291      	uxth	r1, r2
 800f666:	4a13      	ldr	r2, [pc, #76]	; (800f6b4 <tcp_get_next_optbyte+0x5c>)
 800f668:	8011      	strh	r1, [r2, #0]
 800f66a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f66c:	4b12      	ldr	r3, [pc, #72]	; (800f6b8 <tcp_get_next_optbyte+0x60>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	2b00      	cmp	r3, #0
 800f672:	d004      	beq.n	800f67e <tcp_get_next_optbyte+0x26>
 800f674:	4b11      	ldr	r3, [pc, #68]	; (800f6bc <tcp_get_next_optbyte+0x64>)
 800f676:	881b      	ldrh	r3, [r3, #0]
 800f678:	88fa      	ldrh	r2, [r7, #6]
 800f67a:	429a      	cmp	r2, r3
 800f67c:	d208      	bcs.n	800f690 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f67e:	4b10      	ldr	r3, [pc, #64]	; (800f6c0 <tcp_get_next_optbyte+0x68>)
 800f680:	681b      	ldr	r3, [r3, #0]
 800f682:	3314      	adds	r3, #20
 800f684:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f686:	88fb      	ldrh	r3, [r7, #6]
 800f688:	683a      	ldr	r2, [r7, #0]
 800f68a:	4413      	add	r3, r2
 800f68c:	781b      	ldrb	r3, [r3, #0]
 800f68e:	e00b      	b.n	800f6a8 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f690:	88fb      	ldrh	r3, [r7, #6]
 800f692:	b2da      	uxtb	r2, r3
 800f694:	4b09      	ldr	r3, [pc, #36]	; (800f6bc <tcp_get_next_optbyte+0x64>)
 800f696:	881b      	ldrh	r3, [r3, #0]
 800f698:	b2db      	uxtb	r3, r3
 800f69a:	1ad3      	subs	r3, r2, r3
 800f69c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f69e:	4b06      	ldr	r3, [pc, #24]	; (800f6b8 <tcp_get_next_optbyte+0x60>)
 800f6a0:	681a      	ldr	r2, [r3, #0]
 800f6a2:	797b      	ldrb	r3, [r7, #5]
 800f6a4:	4413      	add	r3, r2
 800f6a6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f6a8:	4618      	mov	r0, r3
 800f6aa:	370c      	adds	r7, #12
 800f6ac:	46bd      	mov	sp, r7
 800f6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6b2:	4770      	bx	lr
 800f6b4:	200000fc 	.word	0x200000fc
 800f6b8:	200000f8 	.word	0x200000f8
 800f6bc:	200000f6 	.word	0x200000f6
 800f6c0:	200000f0 	.word	0x200000f0

0800f6c4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f6c4:	b580      	push	{r7, lr}
 800f6c6:	b084      	sub	sp, #16
 800f6c8:	af00      	add	r7, sp, #0
 800f6ca:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d106      	bne.n	800f6e0 <tcp_parseopt+0x1c>
 800f6d2:	4b32      	ldr	r3, [pc, #200]	; (800f79c <tcp_parseopt+0xd8>)
 800f6d4:	f240 727d 	movw	r2, #1917	; 0x77d
 800f6d8:	4931      	ldr	r1, [pc, #196]	; (800f7a0 <tcp_parseopt+0xdc>)
 800f6da:	4832      	ldr	r0, [pc, #200]	; (800f7a4 <tcp_parseopt+0xe0>)
 800f6dc:	f004 fcb2 	bl	8014044 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f6e0:	4b31      	ldr	r3, [pc, #196]	; (800f7a8 <tcp_parseopt+0xe4>)
 800f6e2:	881b      	ldrh	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d055      	beq.n	800f794 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f6e8:	4b30      	ldr	r3, [pc, #192]	; (800f7ac <tcp_parseopt+0xe8>)
 800f6ea:	2200      	movs	r2, #0
 800f6ec:	801a      	strh	r2, [r3, #0]
 800f6ee:	e045      	b.n	800f77c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f6f0:	f7ff ffb2 	bl	800f658 <tcp_get_next_optbyte>
 800f6f4:	4603      	mov	r3, r0
 800f6f6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f6f8:	7bfb      	ldrb	r3, [r7, #15]
 800f6fa:	2b02      	cmp	r3, #2
 800f6fc:	d006      	beq.n	800f70c <tcp_parseopt+0x48>
 800f6fe:	2b02      	cmp	r3, #2
 800f700:	dc2b      	bgt.n	800f75a <tcp_parseopt+0x96>
 800f702:	2b00      	cmp	r3, #0
 800f704:	d041      	beq.n	800f78a <tcp_parseopt+0xc6>
 800f706:	2b01      	cmp	r3, #1
 800f708:	d127      	bne.n	800f75a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f70a:	e037      	b.n	800f77c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f70c:	f7ff ffa4 	bl	800f658 <tcp_get_next_optbyte>
 800f710:	4603      	mov	r3, r0
 800f712:	2b04      	cmp	r3, #4
 800f714:	d13b      	bne.n	800f78e <tcp_parseopt+0xca>
 800f716:	4b25      	ldr	r3, [pc, #148]	; (800f7ac <tcp_parseopt+0xe8>)
 800f718:	881b      	ldrh	r3, [r3, #0]
 800f71a:	3301      	adds	r3, #1
 800f71c:	4a22      	ldr	r2, [pc, #136]	; (800f7a8 <tcp_parseopt+0xe4>)
 800f71e:	8812      	ldrh	r2, [r2, #0]
 800f720:	4293      	cmp	r3, r2
 800f722:	da34      	bge.n	800f78e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f724:	f7ff ff98 	bl	800f658 <tcp_get_next_optbyte>
 800f728:	4603      	mov	r3, r0
 800f72a:	b29b      	uxth	r3, r3
 800f72c:	021b      	lsls	r3, r3, #8
 800f72e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f730:	f7ff ff92 	bl	800f658 <tcp_get_next_optbyte>
 800f734:	4603      	mov	r3, r0
 800f736:	b29a      	uxth	r2, r3
 800f738:	89bb      	ldrh	r3, [r7, #12]
 800f73a:	4313      	orrs	r3, r2
 800f73c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f73e:	89bb      	ldrh	r3, [r7, #12]
 800f740:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f744:	d804      	bhi.n	800f750 <tcp_parseopt+0x8c>
 800f746:	89bb      	ldrh	r3, [r7, #12]
 800f748:	2b00      	cmp	r3, #0
 800f74a:	d001      	beq.n	800f750 <tcp_parseopt+0x8c>
 800f74c:	89ba      	ldrh	r2, [r7, #12]
 800f74e:	e001      	b.n	800f754 <tcp_parseopt+0x90>
 800f750:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f758:	e010      	b.n	800f77c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f75a:	f7ff ff7d 	bl	800f658 <tcp_get_next_optbyte>
 800f75e:	4603      	mov	r3, r0
 800f760:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f762:	7afb      	ldrb	r3, [r7, #11]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d914      	bls.n	800f792 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f768:	7afb      	ldrb	r3, [r7, #11]
 800f76a:	b29a      	uxth	r2, r3
 800f76c:	4b0f      	ldr	r3, [pc, #60]	; (800f7ac <tcp_parseopt+0xe8>)
 800f76e:	881b      	ldrh	r3, [r3, #0]
 800f770:	4413      	add	r3, r2
 800f772:	b29b      	uxth	r3, r3
 800f774:	3b02      	subs	r3, #2
 800f776:	b29a      	uxth	r2, r3
 800f778:	4b0c      	ldr	r3, [pc, #48]	; (800f7ac <tcp_parseopt+0xe8>)
 800f77a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f77c:	4b0b      	ldr	r3, [pc, #44]	; (800f7ac <tcp_parseopt+0xe8>)
 800f77e:	881a      	ldrh	r2, [r3, #0]
 800f780:	4b09      	ldr	r3, [pc, #36]	; (800f7a8 <tcp_parseopt+0xe4>)
 800f782:	881b      	ldrh	r3, [r3, #0]
 800f784:	429a      	cmp	r2, r3
 800f786:	d3b3      	bcc.n	800f6f0 <tcp_parseopt+0x2c>
 800f788:	e004      	b.n	800f794 <tcp_parseopt+0xd0>
          return;
 800f78a:	bf00      	nop
 800f78c:	e002      	b.n	800f794 <tcp_parseopt+0xd0>
            return;
 800f78e:	bf00      	nop
 800f790:	e000      	b.n	800f794 <tcp_parseopt+0xd0>
            return;
 800f792:	bf00      	nop
      }
    }
  }
}
 800f794:	3710      	adds	r7, #16
 800f796:	46bd      	mov	sp, r7
 800f798:	bd80      	pop	{r7, pc}
 800f79a:	bf00      	nop
 800f79c:	080162c4 	.word	0x080162c4
 800f7a0:	08016728 	.word	0x08016728
 800f7a4:	08016310 	.word	0x08016310
 800f7a8:	200000f4 	.word	0x200000f4
 800f7ac:	200000fc 	.word	0x200000fc

0800f7b0 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f7b0:	b480      	push	{r7}
 800f7b2:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f7b4:	4b05      	ldr	r3, [pc, #20]	; (800f7cc <tcp_trigger_input_pcb_close+0x1c>)
 800f7b6:	781b      	ldrb	r3, [r3, #0]
 800f7b8:	f043 0310 	orr.w	r3, r3, #16
 800f7bc:	b2da      	uxtb	r2, r3
 800f7be:	4b03      	ldr	r3, [pc, #12]	; (800f7cc <tcp_trigger_input_pcb_close+0x1c>)
 800f7c0:	701a      	strb	r2, [r3, #0]
}
 800f7c2:	bf00      	nop
 800f7c4:	46bd      	mov	sp, r7
 800f7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ca:	4770      	bx	lr
 800f7cc:	2000010d 	.word	0x2000010d

0800f7d0 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f7d0:	b580      	push	{r7, lr}
 800f7d2:	b084      	sub	sp, #16
 800f7d4:	af00      	add	r7, sp, #0
 800f7d6:	60f8      	str	r0, [r7, #12]
 800f7d8:	60b9      	str	r1, [r7, #8]
 800f7da:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d00a      	beq.n	800f7f8 <tcp_route+0x28>
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	7a1b      	ldrb	r3, [r3, #8]
 800f7e6:	2b00      	cmp	r3, #0
 800f7e8:	d006      	beq.n	800f7f8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	7a1b      	ldrb	r3, [r3, #8]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f7fb fb4e 	bl	800ae90 <netif_get_by_index>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	e003      	b.n	800f800 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f003 f9f5 	bl	8012be8 <ip4_route>
 800f7fe:	4603      	mov	r3, r0
  }
}
 800f800:	4618      	mov	r0, r3
 800f802:	3710      	adds	r7, #16
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f808:	b590      	push	{r4, r7, lr}
 800f80a:	b087      	sub	sp, #28
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	60f8      	str	r0, [r7, #12]
 800f810:	60b9      	str	r1, [r7, #8]
 800f812:	603b      	str	r3, [r7, #0]
 800f814:	4613      	mov	r3, r2
 800f816:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d105      	bne.n	800f82a <tcp_create_segment+0x22>
 800f81e:	4b44      	ldr	r3, [pc, #272]	; (800f930 <tcp_create_segment+0x128>)
 800f820:	22a3      	movs	r2, #163	; 0xa3
 800f822:	4944      	ldr	r1, [pc, #272]	; (800f934 <tcp_create_segment+0x12c>)
 800f824:	4844      	ldr	r0, [pc, #272]	; (800f938 <tcp_create_segment+0x130>)
 800f826:	f004 fc0d 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f82a:	68bb      	ldr	r3, [r7, #8]
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d105      	bne.n	800f83c <tcp_create_segment+0x34>
 800f830:	4b3f      	ldr	r3, [pc, #252]	; (800f930 <tcp_create_segment+0x128>)
 800f832:	22a4      	movs	r2, #164	; 0xa4
 800f834:	4941      	ldr	r1, [pc, #260]	; (800f93c <tcp_create_segment+0x134>)
 800f836:	4840      	ldr	r0, [pc, #256]	; (800f938 <tcp_create_segment+0x130>)
 800f838:	f004 fc04 	bl	8014044 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f83c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f840:	009b      	lsls	r3, r3, #2
 800f842:	b2db      	uxtb	r3, r3
 800f844:	f003 0304 	and.w	r3, r3, #4
 800f848:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f84a:	2003      	movs	r0, #3
 800f84c:	f7fb f822 	bl	800a894 <memp_malloc>
 800f850:	6138      	str	r0, [r7, #16]
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d104      	bne.n	800f862 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f858:	68b8      	ldr	r0, [r7, #8]
 800f85a:	f7fb fe79 	bl	800b550 <pbuf_free>
    return NULL;
 800f85e:	2300      	movs	r3, #0
 800f860:	e061      	b.n	800f926 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f862:	693b      	ldr	r3, [r7, #16]
 800f864:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f868:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f86a:	693b      	ldr	r3, [r7, #16]
 800f86c:	2200      	movs	r2, #0
 800f86e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f870:	693b      	ldr	r3, [r7, #16]
 800f872:	68ba      	ldr	r2, [r7, #8]
 800f874:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	891a      	ldrh	r2, [r3, #8]
 800f87a:	7dfb      	ldrb	r3, [r7, #23]
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	429a      	cmp	r2, r3
 800f880:	d205      	bcs.n	800f88e <tcp_create_segment+0x86>
 800f882:	4b2b      	ldr	r3, [pc, #172]	; (800f930 <tcp_create_segment+0x128>)
 800f884:	22b0      	movs	r2, #176	; 0xb0
 800f886:	492e      	ldr	r1, [pc, #184]	; (800f940 <tcp_create_segment+0x138>)
 800f888:	482b      	ldr	r0, [pc, #172]	; (800f938 <tcp_create_segment+0x130>)
 800f88a:	f004 fbdb 	bl	8014044 <iprintf>
  seg->len = p->tot_len - optlen;
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	891a      	ldrh	r2, [r3, #8]
 800f892:	7dfb      	ldrb	r3, [r7, #23]
 800f894:	b29b      	uxth	r3, r3
 800f896:	1ad3      	subs	r3, r2, r3
 800f898:	b29a      	uxth	r2, r3
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f89e:	2114      	movs	r1, #20
 800f8a0:	68b8      	ldr	r0, [r7, #8]
 800f8a2:	f7fb fdbf 	bl	800b424 <pbuf_add_header>
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d004      	beq.n	800f8b6 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f8ac:	6938      	ldr	r0, [r7, #16]
 800f8ae:	f7fd f8d2 	bl	800ca56 <tcp_seg_free>
    return NULL;
 800f8b2:	2300      	movs	r3, #0
 800f8b4:	e037      	b.n	800f926 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f8b6:	693b      	ldr	r3, [r7, #16]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	685a      	ldr	r2, [r3, #4]
 800f8bc:	693b      	ldr	r3, [r7, #16]
 800f8be:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f8c0:	68fb      	ldr	r3, [r7, #12]
 800f8c2:	8ada      	ldrh	r2, [r3, #22]
 800f8c4:	693b      	ldr	r3, [r7, #16]
 800f8c6:	68dc      	ldr	r4, [r3, #12]
 800f8c8:	4610      	mov	r0, r2
 800f8ca:	f7fa fb8e 	bl	8009fea <lwip_htons>
 800f8ce:	4603      	mov	r3, r0
 800f8d0:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	8b1a      	ldrh	r2, [r3, #24]
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	68dc      	ldr	r4, [r3, #12]
 800f8da:	4610      	mov	r0, r2
 800f8dc:	f7fa fb85 	bl	8009fea <lwip_htons>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f8e4:	693b      	ldr	r3, [r7, #16]
 800f8e6:	68dc      	ldr	r4, [r3, #12]
 800f8e8:	6838      	ldr	r0, [r7, #0]
 800f8ea:	f7fa fb93 	bl	800a014 <lwip_htonl>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f8f2:	7dfb      	ldrb	r3, [r7, #23]
 800f8f4:	089b      	lsrs	r3, r3, #2
 800f8f6:	b2db      	uxtb	r3, r3
 800f8f8:	b29b      	uxth	r3, r3
 800f8fa:	3305      	adds	r3, #5
 800f8fc:	b29b      	uxth	r3, r3
 800f8fe:	031b      	lsls	r3, r3, #12
 800f900:	b29a      	uxth	r2, r3
 800f902:	79fb      	ldrb	r3, [r7, #7]
 800f904:	b29b      	uxth	r3, r3
 800f906:	4313      	orrs	r3, r2
 800f908:	b29a      	uxth	r2, r3
 800f90a:	693b      	ldr	r3, [r7, #16]
 800f90c:	68dc      	ldr	r4, [r3, #12]
 800f90e:	4610      	mov	r0, r2
 800f910:	f7fa fb6b 	bl	8009fea <lwip_htons>
 800f914:	4603      	mov	r3, r0
 800f916:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f918:	693b      	ldr	r3, [r7, #16]
 800f91a:	68db      	ldr	r3, [r3, #12]
 800f91c:	2200      	movs	r2, #0
 800f91e:	749a      	strb	r2, [r3, #18]
 800f920:	2200      	movs	r2, #0
 800f922:	74da      	strb	r2, [r3, #19]
  return seg;
 800f924:	693b      	ldr	r3, [r7, #16]
}
 800f926:	4618      	mov	r0, r3
 800f928:	371c      	adds	r7, #28
 800f92a:	46bd      	mov	sp, r7
 800f92c:	bd90      	pop	{r4, r7, pc}
 800f92e:	bf00      	nop
 800f930:	08016744 	.word	0x08016744
 800f934:	08016778 	.word	0x08016778
 800f938:	08016798 	.word	0x08016798
 800f93c:	080167c0 	.word	0x080167c0
 800f940:	080167e4 	.word	0x080167e4

0800f944 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f944:	b590      	push	{r4, r7, lr}
 800f946:	b08b      	sub	sp, #44	; 0x2c
 800f948:	af02      	add	r7, sp, #8
 800f94a:	6078      	str	r0, [r7, #4]
 800f94c:	460b      	mov	r3, r1
 800f94e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f950:	2300      	movs	r3, #0
 800f952:	61fb      	str	r3, [r7, #28]
 800f954:	2300      	movs	r3, #0
 800f956:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f958:	2300      	movs	r3, #0
 800f95a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d106      	bne.n	800f970 <tcp_split_unsent_seg+0x2c>
 800f962:	4b95      	ldr	r3, [pc, #596]	; (800fbb8 <tcp_split_unsent_seg+0x274>)
 800f964:	f240 324b 	movw	r2, #843	; 0x34b
 800f968:	4994      	ldr	r1, [pc, #592]	; (800fbbc <tcp_split_unsent_seg+0x278>)
 800f96a:	4895      	ldr	r0, [pc, #596]	; (800fbc0 <tcp_split_unsent_seg+0x27c>)
 800f96c:	f004 fb6a 	bl	8014044 <iprintf>

  useg = pcb->unsent;
 800f970:	687b      	ldr	r3, [r7, #4]
 800f972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f974:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f976:	697b      	ldr	r3, [r7, #20]
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d102      	bne.n	800f982 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f97c:	f04f 33ff 	mov.w	r3, #4294967295
 800f980:	e116      	b.n	800fbb0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f982:	887b      	ldrh	r3, [r7, #2]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d109      	bne.n	800f99c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f988:	4b8b      	ldr	r3, [pc, #556]	; (800fbb8 <tcp_split_unsent_seg+0x274>)
 800f98a:	f240 3253 	movw	r2, #851	; 0x353
 800f98e:	498d      	ldr	r1, [pc, #564]	; (800fbc4 <tcp_split_unsent_seg+0x280>)
 800f990:	488b      	ldr	r0, [pc, #556]	; (800fbc0 <tcp_split_unsent_seg+0x27c>)
 800f992:	f004 fb57 	bl	8014044 <iprintf>
    return ERR_VAL;
 800f996:	f06f 0305 	mvn.w	r3, #5
 800f99a:	e109      	b.n	800fbb0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f99c:	697b      	ldr	r3, [r7, #20]
 800f99e:	891b      	ldrh	r3, [r3, #8]
 800f9a0:	887a      	ldrh	r2, [r7, #2]
 800f9a2:	429a      	cmp	r2, r3
 800f9a4:	d301      	bcc.n	800f9aa <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	e102      	b.n	800fbb0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f9ae:	887a      	ldrh	r2, [r7, #2]
 800f9b0:	429a      	cmp	r2, r3
 800f9b2:	d906      	bls.n	800f9c2 <tcp_split_unsent_seg+0x7e>
 800f9b4:	4b80      	ldr	r3, [pc, #512]	; (800fbb8 <tcp_split_unsent_seg+0x274>)
 800f9b6:	f240 325b 	movw	r2, #859	; 0x35b
 800f9ba:	4983      	ldr	r1, [pc, #524]	; (800fbc8 <tcp_split_unsent_seg+0x284>)
 800f9bc:	4880      	ldr	r0, [pc, #512]	; (800fbc0 <tcp_split_unsent_seg+0x27c>)
 800f9be:	f004 fb41 	bl	8014044 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f9c2:	697b      	ldr	r3, [r7, #20]
 800f9c4:	891b      	ldrh	r3, [r3, #8]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d106      	bne.n	800f9d8 <tcp_split_unsent_seg+0x94>
 800f9ca:	4b7b      	ldr	r3, [pc, #492]	; (800fbb8 <tcp_split_unsent_seg+0x274>)
 800f9cc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f9d0:	497e      	ldr	r1, [pc, #504]	; (800fbcc <tcp_split_unsent_seg+0x288>)
 800f9d2:	487b      	ldr	r0, [pc, #492]	; (800fbc0 <tcp_split_unsent_seg+0x27c>)
 800f9d4:	f004 fb36 	bl	8014044 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f9d8:	697b      	ldr	r3, [r7, #20]
 800f9da:	7a9b      	ldrb	r3, [r3, #10]
 800f9dc:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f9de:	7bfb      	ldrb	r3, [r7, #15]
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	b2db      	uxtb	r3, r3
 800f9e4:	f003 0304 	and.w	r3, r3, #4
 800f9e8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f9ea:	697b      	ldr	r3, [r7, #20]
 800f9ec:	891a      	ldrh	r2, [r3, #8]
 800f9ee:	887b      	ldrh	r3, [r7, #2]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f9f4:	7bbb      	ldrb	r3, [r7, #14]
 800f9f6:	b29a      	uxth	r2, r3
 800f9f8:	89bb      	ldrh	r3, [r7, #12]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	b29b      	uxth	r3, r3
 800f9fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa02:	4619      	mov	r1, r3
 800fa04:	2036      	movs	r0, #54	; 0x36
 800fa06:	f7fb fabf 	bl	800af88 <pbuf_alloc>
 800fa0a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800fa0c:	693b      	ldr	r3, [r7, #16]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	f000 80b7 	beq.w	800fb82 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800fa14:	697b      	ldr	r3, [r7, #20]
 800fa16:	685b      	ldr	r3, [r3, #4]
 800fa18:	891a      	ldrh	r2, [r3, #8]
 800fa1a:	697b      	ldr	r3, [r7, #20]
 800fa1c:	891b      	ldrh	r3, [r3, #8]
 800fa1e:	1ad3      	subs	r3, r2, r3
 800fa20:	b29a      	uxth	r2, r3
 800fa22:	887b      	ldrh	r3, [r7, #2]
 800fa24:	4413      	add	r3, r2
 800fa26:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800fa28:	697b      	ldr	r3, [r7, #20]
 800fa2a:	6858      	ldr	r0, [r3, #4]
 800fa2c:	693b      	ldr	r3, [r7, #16]
 800fa2e:	685a      	ldr	r2, [r3, #4]
 800fa30:	7bbb      	ldrb	r3, [r7, #14]
 800fa32:	18d1      	adds	r1, r2, r3
 800fa34:	897b      	ldrh	r3, [r7, #10]
 800fa36:	89ba      	ldrh	r2, [r7, #12]
 800fa38:	f7fb ff84 	bl	800b944 <pbuf_copy_partial>
 800fa3c:	4603      	mov	r3, r0
 800fa3e:	461a      	mov	r2, r3
 800fa40:	89bb      	ldrh	r3, [r7, #12]
 800fa42:	4293      	cmp	r3, r2
 800fa44:	f040 809f 	bne.w	800fb86 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800fa48:	697b      	ldr	r3, [r7, #20]
 800fa4a:	68db      	ldr	r3, [r3, #12]
 800fa4c:	899b      	ldrh	r3, [r3, #12]
 800fa4e:	b29b      	uxth	r3, r3
 800fa50:	4618      	mov	r0, r3
 800fa52:	f7fa faca 	bl	8009fea <lwip_htons>
 800fa56:	4603      	mov	r3, r0
 800fa58:	b2db      	uxtb	r3, r3
 800fa5a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800fa5e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800fa60:	2300      	movs	r3, #0
 800fa62:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800fa64:	7efb      	ldrb	r3, [r7, #27]
 800fa66:	f003 0308 	and.w	r3, r3, #8
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d007      	beq.n	800fa7e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800fa6e:	7efb      	ldrb	r3, [r7, #27]
 800fa70:	f023 0308 	bic.w	r3, r3, #8
 800fa74:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800fa76:	7ebb      	ldrb	r3, [r7, #26]
 800fa78:	f043 0308 	orr.w	r3, r3, #8
 800fa7c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800fa7e:	7efb      	ldrb	r3, [r7, #27]
 800fa80:	f003 0301 	and.w	r3, r3, #1
 800fa84:	2b00      	cmp	r3, #0
 800fa86:	d007      	beq.n	800fa98 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800fa88:	7efb      	ldrb	r3, [r7, #27]
 800fa8a:	f023 0301 	bic.w	r3, r3, #1
 800fa8e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800fa90:	7ebb      	ldrb	r3, [r7, #26]
 800fa92:	f043 0301 	orr.w	r3, r3, #1
 800fa96:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800fa98:	697b      	ldr	r3, [r7, #20]
 800fa9a:	68db      	ldr	r3, [r3, #12]
 800fa9c:	685b      	ldr	r3, [r3, #4]
 800fa9e:	4618      	mov	r0, r3
 800faa0:	f7fa fab8 	bl	800a014 <lwip_htonl>
 800faa4:	4602      	mov	r2, r0
 800faa6:	887b      	ldrh	r3, [r7, #2]
 800faa8:	18d1      	adds	r1, r2, r3
 800faaa:	7eba      	ldrb	r2, [r7, #26]
 800faac:	7bfb      	ldrb	r3, [r7, #15]
 800faae:	9300      	str	r3, [sp, #0]
 800fab0:	460b      	mov	r3, r1
 800fab2:	6939      	ldr	r1, [r7, #16]
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f7ff fea7 	bl	800f808 <tcp_create_segment>
 800faba:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800fabc:	69fb      	ldr	r3, [r7, #28]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d063      	beq.n	800fb8a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800fac2:	697b      	ldr	r3, [r7, #20]
 800fac4:	685b      	ldr	r3, [r3, #4]
 800fac6:	4618      	mov	r0, r3
 800fac8:	f7fb fdca 	bl	800b660 <pbuf_clen>
 800facc:	4603      	mov	r3, r0
 800face:	461a      	mov	r2, r3
 800fad0:	687b      	ldr	r3, [r7, #4]
 800fad2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fad6:	1a9b      	subs	r3, r3, r2
 800fad8:	b29a      	uxth	r2, r3
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800fae0:	697b      	ldr	r3, [r7, #20]
 800fae2:	6858      	ldr	r0, [r3, #4]
 800fae4:	697b      	ldr	r3, [r7, #20]
 800fae6:	685b      	ldr	r3, [r3, #4]
 800fae8:	891a      	ldrh	r2, [r3, #8]
 800faea:	89bb      	ldrh	r3, [r7, #12]
 800faec:	1ad3      	subs	r3, r2, r3
 800faee:	b29b      	uxth	r3, r3
 800faf0:	4619      	mov	r1, r3
 800faf2:	f7fb fba7 	bl	800b244 <pbuf_realloc>
  useg->len -= remainder;
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	891a      	ldrh	r2, [r3, #8]
 800fafa:	89bb      	ldrh	r3, [r7, #12]
 800fafc:	1ad3      	subs	r3, r2, r3
 800fafe:	b29a      	uxth	r2, r3
 800fb00:	697b      	ldr	r3, [r7, #20]
 800fb02:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	899b      	ldrh	r3, [r3, #12]
 800fb0a:	b29c      	uxth	r4, r3
 800fb0c:	7efb      	ldrb	r3, [r7, #27]
 800fb0e:	b29b      	uxth	r3, r3
 800fb10:	4618      	mov	r0, r3
 800fb12:	f7fa fa6a 	bl	8009fea <lwip_htons>
 800fb16:	4603      	mov	r3, r0
 800fb18:	461a      	mov	r2, r3
 800fb1a:	697b      	ldr	r3, [r7, #20]
 800fb1c:	68db      	ldr	r3, [r3, #12]
 800fb1e:	4322      	orrs	r2, r4
 800fb20:	b292      	uxth	r2, r2
 800fb22:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800fb24:	697b      	ldr	r3, [r7, #20]
 800fb26:	685b      	ldr	r3, [r3, #4]
 800fb28:	4618      	mov	r0, r3
 800fb2a:	f7fb fd99 	bl	800b660 <pbuf_clen>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	461a      	mov	r2, r3
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb38:	4413      	add	r3, r2
 800fb3a:	b29a      	uxth	r2, r3
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fb42:	69fb      	ldr	r3, [r7, #28]
 800fb44:	685b      	ldr	r3, [r3, #4]
 800fb46:	4618      	mov	r0, r3
 800fb48:	f7fb fd8a 	bl	800b660 <pbuf_clen>
 800fb4c:	4603      	mov	r3, r0
 800fb4e:	461a      	mov	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fb56:	4413      	add	r3, r2
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800fb60:	697b      	ldr	r3, [r7, #20]
 800fb62:	681a      	ldr	r2, [r3, #0]
 800fb64:	69fb      	ldr	r3, [r7, #28]
 800fb66:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	69fa      	ldr	r2, [r7, #28]
 800fb6c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800fb6e:	69fb      	ldr	r3, [r7, #28]
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d103      	bne.n	800fb7e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	2200      	movs	r2, #0
 800fb7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800fb7e:	2300      	movs	r3, #0
 800fb80:	e016      	b.n	800fbb0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800fb82:	bf00      	nop
 800fb84:	e002      	b.n	800fb8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fb86:	bf00      	nop
 800fb88:	e000      	b.n	800fb8c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800fb8a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800fb8c:	69fb      	ldr	r3, [r7, #28]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d006      	beq.n	800fba0 <tcp_split_unsent_seg+0x25c>
 800fb92:	4b09      	ldr	r3, [pc, #36]	; (800fbb8 <tcp_split_unsent_seg+0x274>)
 800fb94:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800fb98:	490d      	ldr	r1, [pc, #52]	; (800fbd0 <tcp_split_unsent_seg+0x28c>)
 800fb9a:	4809      	ldr	r0, [pc, #36]	; (800fbc0 <tcp_split_unsent_seg+0x27c>)
 800fb9c:	f004 fa52 	bl	8014044 <iprintf>
  if (p != NULL) {
 800fba0:	693b      	ldr	r3, [r7, #16]
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d002      	beq.n	800fbac <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800fba6:	6938      	ldr	r0, [r7, #16]
 800fba8:	f7fb fcd2 	bl	800b550 <pbuf_free>
  }

  return ERR_MEM;
 800fbac:	f04f 33ff 	mov.w	r3, #4294967295
}
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	3724      	adds	r7, #36	; 0x24
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	bd90      	pop	{r4, r7, pc}
 800fbb8:	08016744 	.word	0x08016744
 800fbbc:	08016ad8 	.word	0x08016ad8
 800fbc0:	08016798 	.word	0x08016798
 800fbc4:	08016afc 	.word	0x08016afc
 800fbc8:	08016b20 	.word	0x08016b20
 800fbcc:	08016b30 	.word	0x08016b30
 800fbd0:	08016b40 	.word	0x08016b40

0800fbd4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800fbd4:	b590      	push	{r4, r7, lr}
 800fbd6:	b085      	sub	sp, #20
 800fbd8:	af00      	add	r7, sp, #0
 800fbda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d106      	bne.n	800fbf0 <tcp_send_fin+0x1c>
 800fbe2:	4b21      	ldr	r3, [pc, #132]	; (800fc68 <tcp_send_fin+0x94>)
 800fbe4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800fbe8:	4920      	ldr	r1, [pc, #128]	; (800fc6c <tcp_send_fin+0x98>)
 800fbea:	4821      	ldr	r0, [pc, #132]	; (800fc70 <tcp_send_fin+0x9c>)
 800fbec:	f004 fa2a 	bl	8014044 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800fbf0:	687b      	ldr	r3, [r7, #4]
 800fbf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d02e      	beq.n	800fc56 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbfc:	60fb      	str	r3, [r7, #12]
 800fbfe:	e002      	b.n	800fc06 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800fc00:	68fb      	ldr	r3, [r7, #12]
 800fc02:	681b      	ldr	r3, [r3, #0]
 800fc04:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	681b      	ldr	r3, [r3, #0]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1f8      	bne.n	800fc00 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	68db      	ldr	r3, [r3, #12]
 800fc12:	899b      	ldrh	r3, [r3, #12]
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	4618      	mov	r0, r3
 800fc18:	f7fa f9e7 	bl	8009fea <lwip_htons>
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	b2db      	uxtb	r3, r3
 800fc20:	f003 0307 	and.w	r3, r3, #7
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	d116      	bne.n	800fc56 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	68db      	ldr	r3, [r3, #12]
 800fc2c:	899b      	ldrh	r3, [r3, #12]
 800fc2e:	b29c      	uxth	r4, r3
 800fc30:	2001      	movs	r0, #1
 800fc32:	f7fa f9da 	bl	8009fea <lwip_htons>
 800fc36:	4603      	mov	r3, r0
 800fc38:	461a      	mov	r2, r3
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	68db      	ldr	r3, [r3, #12]
 800fc3e:	4322      	orrs	r2, r4
 800fc40:	b292      	uxth	r2, r2
 800fc42:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	8b5b      	ldrh	r3, [r3, #26]
 800fc48:	f043 0320 	orr.w	r3, r3, #32
 800fc4c:	b29a      	uxth	r2, r3
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fc52:	2300      	movs	r3, #0
 800fc54:	e004      	b.n	800fc60 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fc56:	2101      	movs	r1, #1
 800fc58:	6878      	ldr	r0, [r7, #4]
 800fc5a:	f000 f80b 	bl	800fc74 <tcp_enqueue_flags>
 800fc5e:	4603      	mov	r3, r0
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3714      	adds	r7, #20
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd90      	pop	{r4, r7, pc}
 800fc68:	08016744 	.word	0x08016744
 800fc6c:	08016b4c 	.word	0x08016b4c
 800fc70:	08016798 	.word	0x08016798

0800fc74 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fc74:	b580      	push	{r7, lr}
 800fc76:	b08a      	sub	sp, #40	; 0x28
 800fc78:	af02      	add	r7, sp, #8
 800fc7a:	6078      	str	r0, [r7, #4]
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fc80:	2300      	movs	r3, #0
 800fc82:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fc84:	2300      	movs	r3, #0
 800fc86:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fc88:	78fb      	ldrb	r3, [r7, #3]
 800fc8a:	f003 0303 	and.w	r3, r3, #3
 800fc8e:	2b00      	cmp	r3, #0
 800fc90:	d106      	bne.n	800fca0 <tcp_enqueue_flags+0x2c>
 800fc92:	4b67      	ldr	r3, [pc, #412]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fc94:	f240 4211 	movw	r2, #1041	; 0x411
 800fc98:	4966      	ldr	r1, [pc, #408]	; (800fe34 <tcp_enqueue_flags+0x1c0>)
 800fc9a:	4867      	ldr	r0, [pc, #412]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fc9c:	f004 f9d2 	bl	8014044 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2b00      	cmp	r3, #0
 800fca4:	d106      	bne.n	800fcb4 <tcp_enqueue_flags+0x40>
 800fca6:	4b62      	ldr	r3, [pc, #392]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fca8:	f240 4213 	movw	r2, #1043	; 0x413
 800fcac:	4963      	ldr	r1, [pc, #396]	; (800fe3c <tcp_enqueue_flags+0x1c8>)
 800fcae:	4862      	ldr	r0, [pc, #392]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fcb0:	f004 f9c8 	bl	8014044 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fcb4:	78fb      	ldrb	r3, [r7, #3]
 800fcb6:	f003 0302 	and.w	r3, r3, #2
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d001      	beq.n	800fcc2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fcbe:	2301      	movs	r3, #1
 800fcc0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fcc2:	7ffb      	ldrb	r3, [r7, #31]
 800fcc4:	009b      	lsls	r3, r3, #2
 800fcc6:	b2db      	uxtb	r3, r3
 800fcc8:	f003 0304 	and.w	r3, r3, #4
 800fccc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fcce:	7dfb      	ldrb	r3, [r7, #23]
 800fcd0:	b29b      	uxth	r3, r3
 800fcd2:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	2036      	movs	r0, #54	; 0x36
 800fcda:	f7fb f955 	bl	800af88 <pbuf_alloc>
 800fcde:	6138      	str	r0, [r7, #16]
 800fce0:	693b      	ldr	r3, [r7, #16]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d109      	bne.n	800fcfa <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	8b5b      	ldrh	r3, [r3, #26]
 800fcea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fcf4:	f04f 33ff 	mov.w	r3, #4294967295
 800fcf8:	e095      	b.n	800fe26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800fcfa:	693b      	ldr	r3, [r7, #16]
 800fcfc:	895a      	ldrh	r2, [r3, #10]
 800fcfe:	7dfb      	ldrb	r3, [r7, #23]
 800fd00:	b29b      	uxth	r3, r3
 800fd02:	429a      	cmp	r2, r3
 800fd04:	d206      	bcs.n	800fd14 <tcp_enqueue_flags+0xa0>
 800fd06:	4b4a      	ldr	r3, [pc, #296]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fd08:	f240 4239 	movw	r2, #1081	; 0x439
 800fd0c:	494c      	ldr	r1, [pc, #304]	; (800fe40 <tcp_enqueue_flags+0x1cc>)
 800fd0e:	484a      	ldr	r0, [pc, #296]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fd10:	f004 f998 	bl	8014044 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fd18:	78fa      	ldrb	r2, [r7, #3]
 800fd1a:	7ffb      	ldrb	r3, [r7, #31]
 800fd1c:	9300      	str	r3, [sp, #0]
 800fd1e:	460b      	mov	r3, r1
 800fd20:	6939      	ldr	r1, [r7, #16]
 800fd22:	6878      	ldr	r0, [r7, #4]
 800fd24:	f7ff fd70 	bl	800f808 <tcp_create_segment>
 800fd28:	60f8      	str	r0, [r7, #12]
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	2b00      	cmp	r3, #0
 800fd2e:	d109      	bne.n	800fd44 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8b5b      	ldrh	r3, [r3, #26]
 800fd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fd38:	b29a      	uxth	r2, r3
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800fd42:	e070      	b.n	800fe26 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fd44:	68fb      	ldr	r3, [r7, #12]
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	f003 0303 	and.w	r3, r3, #3
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d006      	beq.n	800fd5e <tcp_enqueue_flags+0xea>
 800fd50:	4b37      	ldr	r3, [pc, #220]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fd52:	f240 4242 	movw	r2, #1090	; 0x442
 800fd56:	493b      	ldr	r1, [pc, #236]	; (800fe44 <tcp_enqueue_flags+0x1d0>)
 800fd58:	4837      	ldr	r0, [pc, #220]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fd5a:	f004 f973 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fd5e:	68fb      	ldr	r3, [r7, #12]
 800fd60:	891b      	ldrh	r3, [r3, #8]
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	d006      	beq.n	800fd74 <tcp_enqueue_flags+0x100>
 800fd66:	4b32      	ldr	r3, [pc, #200]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fd68:	f240 4243 	movw	r2, #1091	; 0x443
 800fd6c:	4936      	ldr	r1, [pc, #216]	; (800fe48 <tcp_enqueue_flags+0x1d4>)
 800fd6e:	4832      	ldr	r0, [pc, #200]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fd70:	f004 f968 	bl	8014044 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d103      	bne.n	800fd84 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	68fa      	ldr	r2, [r7, #12]
 800fd80:	66da      	str	r2, [r3, #108]	; 0x6c
 800fd82:	e00d      	b.n	800fda0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fd88:	61bb      	str	r3, [r7, #24]
 800fd8a:	e002      	b.n	800fd92 <tcp_enqueue_flags+0x11e>
 800fd8c:	69bb      	ldr	r3, [r7, #24]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	61bb      	str	r3, [r7, #24]
 800fd92:	69bb      	ldr	r3, [r7, #24]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2b00      	cmp	r3, #0
 800fd98:	d1f8      	bne.n	800fd8c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fd9a:	69bb      	ldr	r3, [r7, #24]
 800fd9c:	68fa      	ldr	r2, [r7, #12]
 800fd9e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	2200      	movs	r2, #0
 800fda4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fda8:	78fb      	ldrb	r3, [r7, #3]
 800fdaa:	f003 0302 	and.w	r3, r3, #2
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	d104      	bne.n	800fdbc <tcp_enqueue_flags+0x148>
 800fdb2:	78fb      	ldrb	r3, [r7, #3]
 800fdb4:	f003 0301 	and.w	r3, r3, #1
 800fdb8:	2b00      	cmp	r3, #0
 800fdba:	d004      	beq.n	800fdc6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fdc0:	1c5a      	adds	r2, r3, #1
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fdc6:	78fb      	ldrb	r3, [r7, #3]
 800fdc8:	f003 0301 	and.w	r3, r3, #1
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d006      	beq.n	800fdde <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	8b5b      	ldrh	r3, [r3, #26]
 800fdd4:	f043 0320 	orr.w	r3, r3, #32
 800fdd8:	b29a      	uxth	r2, r3
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	685b      	ldr	r3, [r3, #4]
 800fde2:	4618      	mov	r0, r3
 800fde4:	f7fb fc3c 	bl	800b660 <pbuf_clen>
 800fde8:	4603      	mov	r3, r0
 800fdea:	461a      	mov	r2, r3
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fdf2:	4413      	add	r3, r2
 800fdf4:	b29a      	uxth	r2, r3
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d00e      	beq.n	800fe24 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d10a      	bne.n	800fe24 <tcp_enqueue_flags+0x1b0>
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fe12:	2b00      	cmp	r3, #0
 800fe14:	d106      	bne.n	800fe24 <tcp_enqueue_flags+0x1b0>
 800fe16:	4b06      	ldr	r3, [pc, #24]	; (800fe30 <tcp_enqueue_flags+0x1bc>)
 800fe18:	f240 4265 	movw	r2, #1125	; 0x465
 800fe1c:	490b      	ldr	r1, [pc, #44]	; (800fe4c <tcp_enqueue_flags+0x1d8>)
 800fe1e:	4806      	ldr	r0, [pc, #24]	; (800fe38 <tcp_enqueue_flags+0x1c4>)
 800fe20:	f004 f910 	bl	8014044 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fe24:	2300      	movs	r3, #0
}
 800fe26:	4618      	mov	r0, r3
 800fe28:	3720      	adds	r7, #32
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	bd80      	pop	{r7, pc}
 800fe2e:	bf00      	nop
 800fe30:	08016744 	.word	0x08016744
 800fe34:	08016b68 	.word	0x08016b68
 800fe38:	08016798 	.word	0x08016798
 800fe3c:	08016bc0 	.word	0x08016bc0
 800fe40:	08016be0 	.word	0x08016be0
 800fe44:	08016c1c 	.word	0x08016c1c
 800fe48:	08016c34 	.word	0x08016c34
 800fe4c:	08016c60 	.word	0x08016c60

0800fe50 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fe50:	b5b0      	push	{r4, r5, r7, lr}
 800fe52:	b08a      	sub	sp, #40	; 0x28
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d106      	bne.n	800fe6c <tcp_output+0x1c>
 800fe5e:	4b9e      	ldr	r3, [pc, #632]	; (80100d8 <tcp_output+0x288>)
 800fe60:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fe64:	499d      	ldr	r1, [pc, #628]	; (80100dc <tcp_output+0x28c>)
 800fe66:	489e      	ldr	r0, [pc, #632]	; (80100e0 <tcp_output+0x290>)
 800fe68:	f004 f8ec 	bl	8014044 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fe6c:	687b      	ldr	r3, [r7, #4]
 800fe6e:	7d1b      	ldrb	r3, [r3, #20]
 800fe70:	2b01      	cmp	r3, #1
 800fe72:	d106      	bne.n	800fe82 <tcp_output+0x32>
 800fe74:	4b98      	ldr	r3, [pc, #608]	; (80100d8 <tcp_output+0x288>)
 800fe76:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fe7a:	499a      	ldr	r1, [pc, #616]	; (80100e4 <tcp_output+0x294>)
 800fe7c:	4898      	ldr	r0, [pc, #608]	; (80100e0 <tcp_output+0x290>)
 800fe7e:	f004 f8e1 	bl	8014044 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fe82:	4b99      	ldr	r3, [pc, #612]	; (80100e8 <tcp_output+0x298>)
 800fe84:	681b      	ldr	r3, [r3, #0]
 800fe86:	687a      	ldr	r2, [r7, #4]
 800fe88:	429a      	cmp	r2, r3
 800fe8a:	d101      	bne.n	800fe90 <tcp_output+0x40>
    return ERR_OK;
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	e1ce      	b.n	801022e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fe9c:	4293      	cmp	r3, r2
 800fe9e:	bf28      	it	cs
 800fea0:	4613      	movcs	r3, r2
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feaa:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800feac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d10b      	bne.n	800feca <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800feb2:	687b      	ldr	r3, [r7, #4]
 800feb4:	8b5b      	ldrh	r3, [r3, #26]
 800feb6:	f003 0302 	and.w	r3, r3, #2
 800feba:	2b00      	cmp	r3, #0
 800febc:	f000 81aa 	beq.w	8010214 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fec0:	6878      	ldr	r0, [r7, #4]
 800fec2:	f000 fdcb 	bl	8010a5c <tcp_send_empty_ack>
 800fec6:	4603      	mov	r3, r0
 800fec8:	e1b1      	b.n	801022e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800feca:	6879      	ldr	r1, [r7, #4]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	3304      	adds	r3, #4
 800fed0:	461a      	mov	r2, r3
 800fed2:	6878      	ldr	r0, [r7, #4]
 800fed4:	f7ff fc7c 	bl	800f7d0 <tcp_route>
 800fed8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d102      	bne.n	800fee6 <tcp_output+0x96>
    return ERR_RTE;
 800fee0:	f06f 0303 	mvn.w	r3, #3
 800fee4:	e1a3      	b.n	801022e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d003      	beq.n	800fef4 <tcp_output+0xa4>
 800feec:	687b      	ldr	r3, [r7, #4]
 800feee:	681b      	ldr	r3, [r3, #0]
 800fef0:	2b00      	cmp	r3, #0
 800fef2:	d111      	bne.n	800ff18 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fef4:	697b      	ldr	r3, [r7, #20]
 800fef6:	2b00      	cmp	r3, #0
 800fef8:	d002      	beq.n	800ff00 <tcp_output+0xb0>
 800fefa:	697b      	ldr	r3, [r7, #20]
 800fefc:	3304      	adds	r3, #4
 800fefe:	e000      	b.n	800ff02 <tcp_output+0xb2>
 800ff00:	2300      	movs	r3, #0
 800ff02:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800ff04:	693b      	ldr	r3, [r7, #16]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d102      	bne.n	800ff10 <tcp_output+0xc0>
      return ERR_RTE;
 800ff0a:	f06f 0303 	mvn.w	r3, #3
 800ff0e:	e18e      	b.n	801022e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800ff10:	693b      	ldr	r3, [r7, #16]
 800ff12:	681a      	ldr	r2, [r3, #0]
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800ff18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff1a:	68db      	ldr	r3, [r3, #12]
 800ff1c:	685b      	ldr	r3, [r3, #4]
 800ff1e:	4618      	mov	r0, r3
 800ff20:	f7fa f878 	bl	800a014 <lwip_htonl>
 800ff24:	4602      	mov	r2, r0
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ff2a:	1ad3      	subs	r3, r2, r3
 800ff2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff2e:	8912      	ldrh	r2, [r2, #8]
 800ff30:	4413      	add	r3, r2
 800ff32:	69ba      	ldr	r2, [r7, #24]
 800ff34:	429a      	cmp	r2, r3
 800ff36:	d227      	bcs.n	800ff88 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ff3e:	461a      	mov	r2, r3
 800ff40:	69bb      	ldr	r3, [r7, #24]
 800ff42:	4293      	cmp	r3, r2
 800ff44:	d114      	bne.n	800ff70 <tcp_output+0x120>
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d110      	bne.n	800ff70 <tcp_output+0x120>
 800ff4e:	687b      	ldr	r3, [r7, #4]
 800ff50:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d10b      	bne.n	800ff70 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2201      	movs	r2, #1
 800ff64:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2200      	movs	r2, #0
 800ff6c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800ff70:	687b      	ldr	r3, [r7, #4]
 800ff72:	8b5b      	ldrh	r3, [r3, #26]
 800ff74:	f003 0302 	and.w	r3, r3, #2
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 814d 	beq.w	8010218 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800ff7e:	6878      	ldr	r0, [r7, #4]
 800ff80:	f000 fd6c 	bl	8010a5c <tcp_send_empty_ack>
 800ff84:	4603      	mov	r3, r0
 800ff86:	e152      	b.n	801022e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2200      	movs	r2, #0
 800ff8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff94:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800ff96:	6a3b      	ldr	r3, [r7, #32]
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	f000 811c 	beq.w	80101d6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800ff9e:	e002      	b.n	800ffa6 <tcp_output+0x156>
 800ffa0:	6a3b      	ldr	r3, [r7, #32]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	623b      	str	r3, [r7, #32]
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d1f8      	bne.n	800ffa0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800ffae:	e112      	b.n	80101d6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	68db      	ldr	r3, [r3, #12]
 800ffb4:	899b      	ldrh	r3, [r3, #12]
 800ffb6:	b29b      	uxth	r3, r3
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f7fa f816 	bl	8009fea <lwip_htons>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	b2db      	uxtb	r3, r3
 800ffc2:	f003 0304 	and.w	r3, r3, #4
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d006      	beq.n	800ffd8 <tcp_output+0x188>
 800ffca:	4b43      	ldr	r3, [pc, #268]	; (80100d8 <tcp_output+0x288>)
 800ffcc:	f240 5236 	movw	r2, #1334	; 0x536
 800ffd0:	4946      	ldr	r1, [pc, #280]	; (80100ec <tcp_output+0x29c>)
 800ffd2:	4843      	ldr	r0, [pc, #268]	; (80100e0 <tcp_output+0x290>)
 800ffd4:	f004 f836 	bl	8014044 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d01f      	beq.n	8010020 <tcp_output+0x1d0>
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	8b5b      	ldrh	r3, [r3, #26]
 800ffe4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d119      	bne.n	8010020 <tcp_output+0x1d0>
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	2b00      	cmp	r3, #0
 800fff2:	d00b      	beq.n	801000c <tcp_output+0x1bc>
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d110      	bne.n	8010020 <tcp_output+0x1d0>
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010002:	891a      	ldrh	r2, [r3, #8]
 8010004:	687b      	ldr	r3, [r7, #4]
 8010006:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010008:	429a      	cmp	r2, r3
 801000a:	d209      	bcs.n	8010020 <tcp_output+0x1d0>
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010012:	2b00      	cmp	r3, #0
 8010014:	d004      	beq.n	8010020 <tcp_output+0x1d0>
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801001c:	2b08      	cmp	r3, #8
 801001e:	d901      	bls.n	8010024 <tcp_output+0x1d4>
 8010020:	2301      	movs	r3, #1
 8010022:	e000      	b.n	8010026 <tcp_output+0x1d6>
 8010024:	2300      	movs	r3, #0
 8010026:	2b00      	cmp	r3, #0
 8010028:	d106      	bne.n	8010038 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	8b5b      	ldrh	r3, [r3, #26]
 801002e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010032:	2b00      	cmp	r3, #0
 8010034:	f000 80e4 	beq.w	8010200 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	7d1b      	ldrb	r3, [r3, #20]
 801003c:	2b02      	cmp	r3, #2
 801003e:	d00d      	beq.n	801005c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010042:	68db      	ldr	r3, [r3, #12]
 8010044:	899b      	ldrh	r3, [r3, #12]
 8010046:	b29c      	uxth	r4, r3
 8010048:	2010      	movs	r0, #16
 801004a:	f7f9 ffce 	bl	8009fea <lwip_htons>
 801004e:	4603      	mov	r3, r0
 8010050:	461a      	mov	r2, r3
 8010052:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010054:	68db      	ldr	r3, [r3, #12]
 8010056:	4322      	orrs	r2, r4
 8010058:	b292      	uxth	r2, r2
 801005a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801005c:	697a      	ldr	r2, [r7, #20]
 801005e:	6879      	ldr	r1, [r7, #4]
 8010060:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010062:	f000 f909 	bl	8010278 <tcp_output_segment>
 8010066:	4603      	mov	r3, r0
 8010068:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801006a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d009      	beq.n	8010086 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	8b5b      	ldrh	r3, [r3, #26]
 8010076:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801007a:	b29a      	uxth	r2, r3
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	835a      	strh	r2, [r3, #26]
      return err;
 8010080:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010084:	e0d3      	b.n	801022e <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010088:	681a      	ldr	r2, [r3, #0]
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	7d1b      	ldrb	r3, [r3, #20]
 8010092:	2b02      	cmp	r3, #2
 8010094:	d006      	beq.n	80100a4 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	8b5b      	ldrh	r3, [r3, #26]
 801009a:	f023 0303 	bic.w	r3, r3, #3
 801009e:	b29a      	uxth	r2, r3
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80100a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7f9 ffb2 	bl	800a014 <lwip_htonl>
 80100b0:	4604      	mov	r4, r0
 80100b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b4:	891b      	ldrh	r3, [r3, #8]
 80100b6:	461d      	mov	r5, r3
 80100b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100ba:	68db      	ldr	r3, [r3, #12]
 80100bc:	899b      	ldrh	r3, [r3, #12]
 80100be:	b29b      	uxth	r3, r3
 80100c0:	4618      	mov	r0, r3
 80100c2:	f7f9 ff92 	bl	8009fea <lwip_htons>
 80100c6:	4603      	mov	r3, r0
 80100c8:	b2db      	uxtb	r3, r3
 80100ca:	f003 0303 	and.w	r3, r3, #3
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00e      	beq.n	80100f0 <tcp_output+0x2a0>
 80100d2:	2301      	movs	r3, #1
 80100d4:	e00d      	b.n	80100f2 <tcp_output+0x2a2>
 80100d6:	bf00      	nop
 80100d8:	08016744 	.word	0x08016744
 80100dc:	08016c88 	.word	0x08016c88
 80100e0:	08016798 	.word	0x08016798
 80100e4:	08016ca0 	.word	0x08016ca0
 80100e8:	20007218 	.word	0x20007218
 80100ec:	08016cc8 	.word	0x08016cc8
 80100f0:	2300      	movs	r3, #0
 80100f2:	442b      	add	r3, r5
 80100f4:	4423      	add	r3, r4
 80100f6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	1ad3      	subs	r3, r2, r3
 8010100:	2b00      	cmp	r3, #0
 8010102:	da02      	bge.n	801010a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	68ba      	ldr	r2, [r7, #8]
 8010108:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801010a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801010c:	891b      	ldrh	r3, [r3, #8]
 801010e:	461c      	mov	r4, r3
 8010110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	899b      	ldrh	r3, [r3, #12]
 8010116:	b29b      	uxth	r3, r3
 8010118:	4618      	mov	r0, r3
 801011a:	f7f9 ff66 	bl	8009fea <lwip_htons>
 801011e:	4603      	mov	r3, r0
 8010120:	b2db      	uxtb	r3, r3
 8010122:	f003 0303 	and.w	r3, r3, #3
 8010126:	2b00      	cmp	r3, #0
 8010128:	d001      	beq.n	801012e <tcp_output+0x2de>
 801012a:	2301      	movs	r3, #1
 801012c:	e000      	b.n	8010130 <tcp_output+0x2e0>
 801012e:	2300      	movs	r3, #0
 8010130:	4423      	add	r3, r4
 8010132:	2b00      	cmp	r3, #0
 8010134:	d049      	beq.n	80101ca <tcp_output+0x37a>
      seg->next = NULL;
 8010136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010138:	2200      	movs	r2, #0
 801013a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010140:	2b00      	cmp	r3, #0
 8010142:	d105      	bne.n	8010150 <tcp_output+0x300>
        pcb->unacked = seg;
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010148:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801014a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801014c:	623b      	str	r3, [r7, #32]
 801014e:	e03f      	b.n	80101d0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010152:	68db      	ldr	r3, [r3, #12]
 8010154:	685b      	ldr	r3, [r3, #4]
 8010156:	4618      	mov	r0, r3
 8010158:	f7f9 ff5c 	bl	800a014 <lwip_htonl>
 801015c:	4604      	mov	r4, r0
 801015e:	6a3b      	ldr	r3, [r7, #32]
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	685b      	ldr	r3, [r3, #4]
 8010164:	4618      	mov	r0, r3
 8010166:	f7f9 ff55 	bl	800a014 <lwip_htonl>
 801016a:	4603      	mov	r3, r0
 801016c:	1ae3      	subs	r3, r4, r3
 801016e:	2b00      	cmp	r3, #0
 8010170:	da24      	bge.n	80101bc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	3370      	adds	r3, #112	; 0x70
 8010176:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010178:	e002      	b.n	8010180 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010180:	69fb      	ldr	r3, [r7, #28]
 8010182:	681b      	ldr	r3, [r3, #0]
 8010184:	2b00      	cmp	r3, #0
 8010186:	d011      	beq.n	80101ac <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010188:	69fb      	ldr	r3, [r7, #28]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	685b      	ldr	r3, [r3, #4]
 8010190:	4618      	mov	r0, r3
 8010192:	f7f9 ff3f 	bl	800a014 <lwip_htonl>
 8010196:	4604      	mov	r4, r0
 8010198:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801019a:	68db      	ldr	r3, [r3, #12]
 801019c:	685b      	ldr	r3, [r3, #4]
 801019e:	4618      	mov	r0, r3
 80101a0:	f7f9 ff38 	bl	800a014 <lwip_htonl>
 80101a4:	4603      	mov	r3, r0
 80101a6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	dbe6      	blt.n	801017a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80101ac:	69fb      	ldr	r3, [r7, #28]
 80101ae:	681a      	ldr	r2, [r3, #0]
 80101b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101b2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80101b4:	69fb      	ldr	r3, [r7, #28]
 80101b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101b8:	601a      	str	r2, [r3, #0]
 80101ba:	e009      	b.n	80101d0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80101bc:	6a3b      	ldr	r3, [r7, #32]
 80101be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101c0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80101c2:	6a3b      	ldr	r3, [r7, #32]
 80101c4:	681b      	ldr	r3, [r3, #0]
 80101c6:	623b      	str	r3, [r7, #32]
 80101c8:	e002      	b.n	80101d0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80101ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80101cc:	f7fc fc43 	bl	800ca56 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80101d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80101d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d012      	beq.n	8010202 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80101dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101de:	68db      	ldr	r3, [r3, #12]
 80101e0:	685b      	ldr	r3, [r3, #4]
 80101e2:	4618      	mov	r0, r3
 80101e4:	f7f9 ff16 	bl	800a014 <lwip_htonl>
 80101e8:	4602      	mov	r2, r0
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80101ee:	1ad3      	subs	r3, r2, r3
 80101f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101f2:	8912      	ldrh	r2, [r2, #8]
 80101f4:	4413      	add	r3, r2
  while (seg != NULL &&
 80101f6:	69ba      	ldr	r2, [r7, #24]
 80101f8:	429a      	cmp	r2, r3
 80101fa:	f4bf aed9 	bcs.w	800ffb0 <tcp_output+0x160>
 80101fe:	e000      	b.n	8010202 <tcp_output+0x3b2>
      break;
 8010200:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010206:	2b00      	cmp	r3, #0
 8010208:	d108      	bne.n	801021c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2200      	movs	r2, #0
 801020e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8010212:	e004      	b.n	801021e <tcp_output+0x3ce>
    goto output_done;
 8010214:	bf00      	nop
 8010216:	e002      	b.n	801021e <tcp_output+0x3ce>
    goto output_done;
 8010218:	bf00      	nop
 801021a:	e000      	b.n	801021e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801021c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	8b5b      	ldrh	r3, [r3, #26]
 8010222:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010226:	b29a      	uxth	r2, r3
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801022c:	2300      	movs	r3, #0
}
 801022e:	4618      	mov	r0, r3
 8010230:	3728      	adds	r7, #40	; 0x28
 8010232:	46bd      	mov	sp, r7
 8010234:	bdb0      	pop	{r4, r5, r7, pc}
 8010236:	bf00      	nop

08010238 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010238:	b580      	push	{r7, lr}
 801023a:	b082      	sub	sp, #8
 801023c:	af00      	add	r7, sp, #0
 801023e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d106      	bne.n	8010254 <tcp_output_segment_busy+0x1c>
 8010246:	4b09      	ldr	r3, [pc, #36]	; (801026c <tcp_output_segment_busy+0x34>)
 8010248:	f240 529a 	movw	r2, #1434	; 0x59a
 801024c:	4908      	ldr	r1, [pc, #32]	; (8010270 <tcp_output_segment_busy+0x38>)
 801024e:	4809      	ldr	r0, [pc, #36]	; (8010274 <tcp_output_segment_busy+0x3c>)
 8010250:	f003 fef8 	bl	8014044 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	685b      	ldr	r3, [r3, #4]
 8010258:	7b9b      	ldrb	r3, [r3, #14]
 801025a:	2b01      	cmp	r3, #1
 801025c:	d001      	beq.n	8010262 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801025e:	2301      	movs	r3, #1
 8010260:	e000      	b.n	8010264 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3708      	adds	r7, #8
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	08016744 	.word	0x08016744
 8010270:	08016ce0 	.word	0x08016ce0
 8010274:	08016798 	.word	0x08016798

08010278 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010278:	b5b0      	push	{r4, r5, r7, lr}
 801027a:	b08c      	sub	sp, #48	; 0x30
 801027c:	af04      	add	r7, sp, #16
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010284:	68fb      	ldr	r3, [r7, #12]
 8010286:	2b00      	cmp	r3, #0
 8010288:	d106      	bne.n	8010298 <tcp_output_segment+0x20>
 801028a:	4b63      	ldr	r3, [pc, #396]	; (8010418 <tcp_output_segment+0x1a0>)
 801028c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010290:	4962      	ldr	r1, [pc, #392]	; (801041c <tcp_output_segment+0x1a4>)
 8010292:	4863      	ldr	r0, [pc, #396]	; (8010420 <tcp_output_segment+0x1a8>)
 8010294:	f003 fed6 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	2b00      	cmp	r3, #0
 801029c:	d106      	bne.n	80102ac <tcp_output_segment+0x34>
 801029e:	4b5e      	ldr	r3, [pc, #376]	; (8010418 <tcp_output_segment+0x1a0>)
 80102a0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80102a4:	495f      	ldr	r1, [pc, #380]	; (8010424 <tcp_output_segment+0x1ac>)
 80102a6:	485e      	ldr	r0, [pc, #376]	; (8010420 <tcp_output_segment+0x1a8>)
 80102a8:	f003 fecc 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <tcp_output_segment+0x48>
 80102b2:	4b59      	ldr	r3, [pc, #356]	; (8010418 <tcp_output_segment+0x1a0>)
 80102b4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80102b8:	495b      	ldr	r1, [pc, #364]	; (8010428 <tcp_output_segment+0x1b0>)
 80102ba:	4859      	ldr	r0, [pc, #356]	; (8010420 <tcp_output_segment+0x1a8>)
 80102bc:	f003 fec2 	bl	8014044 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80102c0:	68f8      	ldr	r0, [r7, #12]
 80102c2:	f7ff ffb9 	bl	8010238 <tcp_output_segment_busy>
 80102c6:	4603      	mov	r3, r0
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d001      	beq.n	80102d0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80102cc:	2300      	movs	r3, #0
 80102ce:	e09f      	b.n	8010410 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80102d0:	68bb      	ldr	r3, [r7, #8]
 80102d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	68dc      	ldr	r4, [r3, #12]
 80102d8:	4610      	mov	r0, r2
 80102da:	f7f9 fe9b 	bl	800a014 <lwip_htonl>
 80102de:	4603      	mov	r3, r0
 80102e0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80102e2:	68bb      	ldr	r3, [r7, #8]
 80102e4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80102e6:	68fb      	ldr	r3, [r7, #12]
 80102e8:	68dc      	ldr	r4, [r3, #12]
 80102ea:	4610      	mov	r0, r2
 80102ec:	f7f9 fe7d 	bl	8009fea <lwip_htons>
 80102f0:	4603      	mov	r3, r0
 80102f2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80102f4:	68bb      	ldr	r3, [r7, #8]
 80102f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f8:	68ba      	ldr	r2, [r7, #8]
 80102fa:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80102fc:	441a      	add	r2, r3
 80102fe:	68bb      	ldr	r3, [r7, #8]
 8010300:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	3314      	adds	r3, #20
 8010308:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	7a9b      	ldrb	r3, [r3, #10]
 801030e:	f003 0301 	and.w	r3, r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	d015      	beq.n	8010342 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010316:	68bb      	ldr	r3, [r7, #8]
 8010318:	3304      	adds	r3, #4
 801031a:	461a      	mov	r2, r3
 801031c:	6879      	ldr	r1, [r7, #4]
 801031e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010322:	f7fc fe8f 	bl	800d044 <tcp_eff_send_mss_netif>
 8010326:	4603      	mov	r3, r0
 8010328:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801032a:	8b7b      	ldrh	r3, [r7, #26]
 801032c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010330:	4618      	mov	r0, r3
 8010332:	f7f9 fe6f 	bl	800a014 <lwip_htonl>
 8010336:	4602      	mov	r2, r0
 8010338:	69fb      	ldr	r3, [r7, #28]
 801033a:	601a      	str	r2, [r3, #0]
    opts += 1;
 801033c:	69fb      	ldr	r3, [r7, #28]
 801033e:	3304      	adds	r3, #4
 8010340:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010348:	2b00      	cmp	r3, #0
 801034a:	da02      	bge.n	8010352 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801034c:	68bb      	ldr	r3, [r7, #8]
 801034e:	2200      	movs	r2, #0
 8010350:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010352:	68bb      	ldr	r3, [r7, #8]
 8010354:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010356:	2b00      	cmp	r3, #0
 8010358:	d10c      	bne.n	8010374 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801035a:	4b34      	ldr	r3, [pc, #208]	; (801042c <tcp_output_segment+0x1b4>)
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010362:	68fb      	ldr	r3, [r7, #12]
 8010364:	68db      	ldr	r3, [r3, #12]
 8010366:	685b      	ldr	r3, [r3, #4]
 8010368:	4618      	mov	r0, r3
 801036a:	f7f9 fe53 	bl	800a014 <lwip_htonl>
 801036e:	4602      	mov	r2, r0
 8010370:	68bb      	ldr	r3, [r7, #8]
 8010372:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	68da      	ldr	r2, [r3, #12]
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	685b      	ldr	r3, [r3, #4]
 801037c:	685b      	ldr	r3, [r3, #4]
 801037e:	1ad3      	subs	r3, r2, r3
 8010380:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	685b      	ldr	r3, [r3, #4]
 8010386:	8959      	ldrh	r1, [r3, #10]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	8b3a      	ldrh	r2, [r7, #24]
 801038e:	1a8a      	subs	r2, r1, r2
 8010390:	b292      	uxth	r2, r2
 8010392:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	685b      	ldr	r3, [r3, #4]
 8010398:	8919      	ldrh	r1, [r3, #8]
 801039a:	68fb      	ldr	r3, [r7, #12]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	8b3a      	ldrh	r2, [r7, #24]
 80103a0:	1a8a      	subs	r2, r1, r2
 80103a2:	b292      	uxth	r2, r2
 80103a4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80103a6:	68fb      	ldr	r3, [r7, #12]
 80103a8:	685b      	ldr	r3, [r3, #4]
 80103aa:	68fa      	ldr	r2, [r7, #12]
 80103ac:	68d2      	ldr	r2, [r2, #12]
 80103ae:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80103b0:	68fb      	ldr	r3, [r7, #12]
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	2200      	movs	r2, #0
 80103b6:	741a      	strb	r2, [r3, #16]
 80103b8:	2200      	movs	r2, #0
 80103ba:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80103bc:	68fb      	ldr	r3, [r7, #12]
 80103be:	68db      	ldr	r3, [r3, #12]
 80103c0:	f103 0214 	add.w	r2, r3, #20
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	7a9b      	ldrb	r3, [r3, #10]
 80103c8:	009b      	lsls	r3, r3, #2
 80103ca:	f003 0304 	and.w	r3, r3, #4
 80103ce:	4413      	add	r3, r2
 80103d0:	69fa      	ldr	r2, [r7, #28]
 80103d2:	429a      	cmp	r2, r3
 80103d4:	d006      	beq.n	80103e4 <tcp_output_segment+0x16c>
 80103d6:	4b10      	ldr	r3, [pc, #64]	; (8010418 <tcp_output_segment+0x1a0>)
 80103d8:	f240 621c 	movw	r2, #1564	; 0x61c
 80103dc:	4914      	ldr	r1, [pc, #80]	; (8010430 <tcp_output_segment+0x1b8>)
 80103de:	4810      	ldr	r0, [pc, #64]	; (8010420 <tcp_output_segment+0x1a8>)
 80103e0:	f003 fe30 	bl	8014044 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80103e4:	68fb      	ldr	r3, [r7, #12]
 80103e6:	6858      	ldr	r0, [r3, #4]
 80103e8:	68b9      	ldr	r1, [r7, #8]
 80103ea:	68bb      	ldr	r3, [r7, #8]
 80103ec:	1d1c      	adds	r4, r3, #4
 80103ee:	68bb      	ldr	r3, [r7, #8]
 80103f0:	7add      	ldrb	r5, [r3, #11]
 80103f2:	68bb      	ldr	r3, [r7, #8]
 80103f4:	7a9b      	ldrb	r3, [r3, #10]
 80103f6:	687a      	ldr	r2, [r7, #4]
 80103f8:	9202      	str	r2, [sp, #8]
 80103fa:	2206      	movs	r2, #6
 80103fc:	9201      	str	r2, [sp, #4]
 80103fe:	9300      	str	r3, [sp, #0]
 8010400:	462b      	mov	r3, r5
 8010402:	4622      	mov	r2, r4
 8010404:	f002 fdae 	bl	8012f64 <ip4_output_if>
 8010408:	4603      	mov	r3, r0
 801040a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801040c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010410:	4618      	mov	r0, r3
 8010412:	3720      	adds	r7, #32
 8010414:	46bd      	mov	sp, r7
 8010416:	bdb0      	pop	{r4, r5, r7, pc}
 8010418:	08016744 	.word	0x08016744
 801041c:	08016d08 	.word	0x08016d08
 8010420:	08016798 	.word	0x08016798
 8010424:	08016d28 	.word	0x08016d28
 8010428:	08016d48 	.word	0x08016d48
 801042c:	20007208 	.word	0x20007208
 8010430:	08016d6c 	.word	0x08016d6c

08010434 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010434:	b5b0      	push	{r4, r5, r7, lr}
 8010436:	b084      	sub	sp, #16
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d106      	bne.n	8010450 <tcp_rexmit_rto_prepare+0x1c>
 8010442:	4b31      	ldr	r3, [pc, #196]	; (8010508 <tcp_rexmit_rto_prepare+0xd4>)
 8010444:	f240 6263 	movw	r2, #1635	; 0x663
 8010448:	4930      	ldr	r1, [pc, #192]	; (801050c <tcp_rexmit_rto_prepare+0xd8>)
 801044a:	4831      	ldr	r0, [pc, #196]	; (8010510 <tcp_rexmit_rto_prepare+0xdc>)
 801044c:	f003 fdfa 	bl	8014044 <iprintf>

  if (pcb->unacked == NULL) {
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010454:	2b00      	cmp	r3, #0
 8010456:	d102      	bne.n	801045e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010458:	f06f 0305 	mvn.w	r3, #5
 801045c:	e050      	b.n	8010500 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010462:	60fb      	str	r3, [r7, #12]
 8010464:	e00b      	b.n	801047e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f7ff fee6 	bl	8010238 <tcp_output_segment_busy>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d002      	beq.n	8010478 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010472:	f06f 0305 	mvn.w	r3, #5
 8010476:	e043      	b.n	8010500 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010478:	68fb      	ldr	r3, [r7, #12]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	60fb      	str	r3, [r7, #12]
 801047e:	68fb      	ldr	r3, [r7, #12]
 8010480:	681b      	ldr	r3, [r3, #0]
 8010482:	2b00      	cmp	r3, #0
 8010484:	d1ef      	bne.n	8010466 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010486:	68f8      	ldr	r0, [r7, #12]
 8010488:	f7ff fed6 	bl	8010238 <tcp_output_segment_busy>
 801048c:	4603      	mov	r3, r0
 801048e:	2b00      	cmp	r3, #0
 8010490:	d002      	beq.n	8010498 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010492:	f06f 0305 	mvn.w	r3, #5
 8010496:	e033      	b.n	8010500 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801049c:	68fb      	ldr	r3, [r7, #12]
 801049e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	2200      	movs	r2, #0
 80104ac:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	8b5b      	ldrh	r3, [r3, #26]
 80104b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80104bc:	68fb      	ldr	r3, [r7, #12]
 80104be:	68db      	ldr	r3, [r3, #12]
 80104c0:	685b      	ldr	r3, [r3, #4]
 80104c2:	4618      	mov	r0, r3
 80104c4:	f7f9 fda6 	bl	800a014 <lwip_htonl>
 80104c8:	4604      	mov	r4, r0
 80104ca:	68fb      	ldr	r3, [r7, #12]
 80104cc:	891b      	ldrh	r3, [r3, #8]
 80104ce:	461d      	mov	r5, r3
 80104d0:	68fb      	ldr	r3, [r7, #12]
 80104d2:	68db      	ldr	r3, [r3, #12]
 80104d4:	899b      	ldrh	r3, [r3, #12]
 80104d6:	b29b      	uxth	r3, r3
 80104d8:	4618      	mov	r0, r3
 80104da:	f7f9 fd86 	bl	8009fea <lwip_htons>
 80104de:	4603      	mov	r3, r0
 80104e0:	b2db      	uxtb	r3, r3
 80104e2:	f003 0303 	and.w	r3, r3, #3
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d001      	beq.n	80104ee <tcp_rexmit_rto_prepare+0xba>
 80104ea:	2301      	movs	r3, #1
 80104ec:	e000      	b.n	80104f0 <tcp_rexmit_rto_prepare+0xbc>
 80104ee:	2300      	movs	r3, #0
 80104f0:	442b      	add	r3, r5
 80104f2:	18e2      	adds	r2, r4, r3
 80104f4:	687b      	ldr	r3, [r7, #4]
 80104f6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	2200      	movs	r2, #0
 80104fc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80104fe:	2300      	movs	r3, #0
}
 8010500:	4618      	mov	r0, r3
 8010502:	3710      	adds	r7, #16
 8010504:	46bd      	mov	sp, r7
 8010506:	bdb0      	pop	{r4, r5, r7, pc}
 8010508:	08016744 	.word	0x08016744
 801050c:	08016d80 	.word	0x08016d80
 8010510:	08016798 	.word	0x08016798

08010514 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010514:	b580      	push	{r7, lr}
 8010516:	b082      	sub	sp, #8
 8010518:	af00      	add	r7, sp, #0
 801051a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d106      	bne.n	8010530 <tcp_rexmit_rto_commit+0x1c>
 8010522:	4b0d      	ldr	r3, [pc, #52]	; (8010558 <tcp_rexmit_rto_commit+0x44>)
 8010524:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010528:	490c      	ldr	r1, [pc, #48]	; (801055c <tcp_rexmit_rto_commit+0x48>)
 801052a:	480d      	ldr	r0, [pc, #52]	; (8010560 <tcp_rexmit_rto_commit+0x4c>)
 801052c:	f003 fd8a 	bl	8014044 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010536:	2bff      	cmp	r3, #255	; 0xff
 8010538:	d007      	beq.n	801054a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010540:	3301      	adds	r3, #1
 8010542:	b2da      	uxtb	r2, r3
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801054a:	6878      	ldr	r0, [r7, #4]
 801054c:	f7ff fc80 	bl	800fe50 <tcp_output>
}
 8010550:	bf00      	nop
 8010552:	3708      	adds	r7, #8
 8010554:	46bd      	mov	sp, r7
 8010556:	bd80      	pop	{r7, pc}
 8010558:	08016744 	.word	0x08016744
 801055c:	08016da4 	.word	0x08016da4
 8010560:	08016798 	.word	0x08016798

08010564 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010564:	b580      	push	{r7, lr}
 8010566:	b082      	sub	sp, #8
 8010568:	af00      	add	r7, sp, #0
 801056a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d106      	bne.n	8010580 <tcp_rexmit_rto+0x1c>
 8010572:	4b0a      	ldr	r3, [pc, #40]	; (801059c <tcp_rexmit_rto+0x38>)
 8010574:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010578:	4909      	ldr	r1, [pc, #36]	; (80105a0 <tcp_rexmit_rto+0x3c>)
 801057a:	480a      	ldr	r0, [pc, #40]	; (80105a4 <tcp_rexmit_rto+0x40>)
 801057c:	f003 fd62 	bl	8014044 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010580:	6878      	ldr	r0, [r7, #4]
 8010582:	f7ff ff57 	bl	8010434 <tcp_rexmit_rto_prepare>
 8010586:	4603      	mov	r3, r0
 8010588:	2b00      	cmp	r3, #0
 801058a:	d102      	bne.n	8010592 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801058c:	6878      	ldr	r0, [r7, #4]
 801058e:	f7ff ffc1 	bl	8010514 <tcp_rexmit_rto_commit>
  }
}
 8010592:	bf00      	nop
 8010594:	3708      	adds	r7, #8
 8010596:	46bd      	mov	sp, r7
 8010598:	bd80      	pop	{r7, pc}
 801059a:	bf00      	nop
 801059c:	08016744 	.word	0x08016744
 80105a0:	08016dc8 	.word	0x08016dc8
 80105a4:	08016798 	.word	0x08016798

080105a8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80105a8:	b590      	push	{r4, r7, lr}
 80105aa:	b085      	sub	sp, #20
 80105ac:	af00      	add	r7, sp, #0
 80105ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	d106      	bne.n	80105c4 <tcp_rexmit+0x1c>
 80105b6:	4b2f      	ldr	r3, [pc, #188]	; (8010674 <tcp_rexmit+0xcc>)
 80105b8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80105bc:	492e      	ldr	r1, [pc, #184]	; (8010678 <tcp_rexmit+0xd0>)
 80105be:	482f      	ldr	r0, [pc, #188]	; (801067c <tcp_rexmit+0xd4>)
 80105c0:	f003 fd40 	bl	8014044 <iprintf>

  if (pcb->unacked == NULL) {
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105c8:	2b00      	cmp	r3, #0
 80105ca:	d102      	bne.n	80105d2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80105cc:	f06f 0305 	mvn.w	r3, #5
 80105d0:	e04c      	b.n	801066c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105d6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80105d8:	68b8      	ldr	r0, [r7, #8]
 80105da:	f7ff fe2d 	bl	8010238 <tcp_output_segment_busy>
 80105de:	4603      	mov	r3, r0
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d002      	beq.n	80105ea <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80105e4:	f06f 0305 	mvn.w	r3, #5
 80105e8:	e040      	b.n	801066c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80105ea:	68bb      	ldr	r3, [r7, #8]
 80105ec:	681a      	ldr	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	336c      	adds	r3, #108	; 0x6c
 80105f6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80105f8:	e002      	b.n	8010600 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010600:	68fb      	ldr	r3, [r7, #12]
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	2b00      	cmp	r3, #0
 8010606:	d011      	beq.n	801062c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010608:	68fb      	ldr	r3, [r7, #12]
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	68db      	ldr	r3, [r3, #12]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	4618      	mov	r0, r3
 8010612:	f7f9 fcff 	bl	800a014 <lwip_htonl>
 8010616:	4604      	mov	r4, r0
 8010618:	68bb      	ldr	r3, [r7, #8]
 801061a:	68db      	ldr	r3, [r3, #12]
 801061c:	685b      	ldr	r3, [r3, #4]
 801061e:	4618      	mov	r0, r3
 8010620:	f7f9 fcf8 	bl	800a014 <lwip_htonl>
 8010624:	4603      	mov	r3, r0
 8010626:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010628:	2b00      	cmp	r3, #0
 801062a:	dbe6      	blt.n	80105fa <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801062c:	68fb      	ldr	r3, [r7, #12]
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010634:	68fb      	ldr	r3, [r7, #12]
 8010636:	68ba      	ldr	r2, [r7, #8]
 8010638:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801063a:	68bb      	ldr	r3, [r7, #8]
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	2b00      	cmp	r3, #0
 8010640:	d103      	bne.n	801064a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2200      	movs	r2, #0
 8010646:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010650:	2bff      	cmp	r3, #255	; 0xff
 8010652:	d007      	beq.n	8010664 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801065a:	3301      	adds	r3, #1
 801065c:	b2da      	uxtb	r2, r3
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010664:	687b      	ldr	r3, [r7, #4]
 8010666:	2200      	movs	r2, #0
 8010668:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801066a:	2300      	movs	r3, #0
}
 801066c:	4618      	mov	r0, r3
 801066e:	3714      	adds	r7, #20
 8010670:	46bd      	mov	sp, r7
 8010672:	bd90      	pop	{r4, r7, pc}
 8010674:	08016744 	.word	0x08016744
 8010678:	08016de4 	.word	0x08016de4
 801067c:	08016798 	.word	0x08016798

08010680 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
 8010686:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	2b00      	cmp	r3, #0
 801068c:	d106      	bne.n	801069c <tcp_rexmit_fast+0x1c>
 801068e:	4b2a      	ldr	r3, [pc, #168]	; (8010738 <tcp_rexmit_fast+0xb8>)
 8010690:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010694:	4929      	ldr	r1, [pc, #164]	; (801073c <tcp_rexmit_fast+0xbc>)
 8010696:	482a      	ldr	r0, [pc, #168]	; (8010740 <tcp_rexmit_fast+0xc0>)
 8010698:	f003 fcd4 	bl	8014044 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d044      	beq.n	801072e <tcp_rexmit_fast+0xae>
 80106a4:	687b      	ldr	r3, [r7, #4]
 80106a6:	8b5b      	ldrh	r3, [r3, #26]
 80106a8:	f003 0304 	and.w	r3, r3, #4
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d13e      	bne.n	801072e <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80106b0:	6878      	ldr	r0, [r7, #4]
 80106b2:	f7ff ff79 	bl	80105a8 <tcp_rexmit>
 80106b6:	4603      	mov	r3, r0
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d138      	bne.n	801072e <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80106c8:	4293      	cmp	r3, r2
 80106ca:	bf28      	it	cs
 80106cc:	4613      	movcs	r3, r2
 80106ce:	b29b      	uxth	r3, r3
 80106d0:	0fda      	lsrs	r2, r3, #31
 80106d2:	4413      	add	r3, r2
 80106d4:	105b      	asrs	r3, r3, #1
 80106d6:	b29a      	uxth	r2, r3
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80106e4:	461a      	mov	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106ea:	005b      	lsls	r3, r3, #1
 80106ec:	429a      	cmp	r2, r3
 80106ee:	d206      	bcs.n	80106fe <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80106f4:	005b      	lsls	r3, r3, #1
 80106f6:	b29a      	uxth	r2, r3
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010708:	4619      	mov	r1, r3
 801070a:	0049      	lsls	r1, r1, #1
 801070c:	440b      	add	r3, r1
 801070e:	b29b      	uxth	r3, r3
 8010710:	4413      	add	r3, r2
 8010712:	b29a      	uxth	r2, r3
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801071a:	687b      	ldr	r3, [r7, #4]
 801071c:	8b5b      	ldrh	r3, [r3, #26]
 801071e:	f043 0304 	orr.w	r3, r3, #4
 8010722:	b29a      	uxth	r2, r3
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	2200      	movs	r2, #0
 801072c:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801072e:	bf00      	nop
 8010730:	3708      	adds	r7, #8
 8010732:	46bd      	mov	sp, r7
 8010734:	bd80      	pop	{r7, pc}
 8010736:	bf00      	nop
 8010738:	08016744 	.word	0x08016744
 801073c:	08016dfc 	.word	0x08016dfc
 8010740:	08016798 	.word	0x08016798

08010744 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b086      	sub	sp, #24
 8010748:	af00      	add	r7, sp, #0
 801074a:	60f8      	str	r0, [r7, #12]
 801074c:	607b      	str	r3, [r7, #4]
 801074e:	460b      	mov	r3, r1
 8010750:	817b      	strh	r3, [r7, #10]
 8010752:	4613      	mov	r3, r2
 8010754:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010756:	897a      	ldrh	r2, [r7, #10]
 8010758:	893b      	ldrh	r3, [r7, #8]
 801075a:	4413      	add	r3, r2
 801075c:	b29b      	uxth	r3, r3
 801075e:	3314      	adds	r3, #20
 8010760:	b29b      	uxth	r3, r3
 8010762:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010766:	4619      	mov	r1, r3
 8010768:	2022      	movs	r0, #34	; 0x22
 801076a:	f7fa fc0d 	bl	800af88 <pbuf_alloc>
 801076e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010770:	697b      	ldr	r3, [r7, #20]
 8010772:	2b00      	cmp	r3, #0
 8010774:	d04d      	beq.n	8010812 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010776:	897b      	ldrh	r3, [r7, #10]
 8010778:	3313      	adds	r3, #19
 801077a:	697a      	ldr	r2, [r7, #20]
 801077c:	8952      	ldrh	r2, [r2, #10]
 801077e:	4293      	cmp	r3, r2
 8010780:	db06      	blt.n	8010790 <tcp_output_alloc_header_common+0x4c>
 8010782:	4b26      	ldr	r3, [pc, #152]	; (801081c <tcp_output_alloc_header_common+0xd8>)
 8010784:	f240 7223 	movw	r2, #1827	; 0x723
 8010788:	4925      	ldr	r1, [pc, #148]	; (8010820 <tcp_output_alloc_header_common+0xdc>)
 801078a:	4826      	ldr	r0, [pc, #152]	; (8010824 <tcp_output_alloc_header_common+0xe0>)
 801078c:	f003 fc5a 	bl	8014044 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010790:	697b      	ldr	r3, [r7, #20]
 8010792:	685b      	ldr	r3, [r3, #4]
 8010794:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010796:	8c3b      	ldrh	r3, [r7, #32]
 8010798:	4618      	mov	r0, r3
 801079a:	f7f9 fc26 	bl	8009fea <lwip_htons>
 801079e:	4603      	mov	r3, r0
 80107a0:	461a      	mov	r2, r3
 80107a2:	693b      	ldr	r3, [r7, #16]
 80107a4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80107a6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107a8:	4618      	mov	r0, r3
 80107aa:	f7f9 fc1e 	bl	8009fea <lwip_htons>
 80107ae:	4603      	mov	r3, r0
 80107b0:	461a      	mov	r2, r3
 80107b2:	693b      	ldr	r3, [r7, #16]
 80107b4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80107b6:	693b      	ldr	r3, [r7, #16]
 80107b8:	687a      	ldr	r2, [r7, #4]
 80107ba:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80107bc:	68f8      	ldr	r0, [r7, #12]
 80107be:	f7f9 fc29 	bl	800a014 <lwip_htonl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	693b      	ldr	r3, [r7, #16]
 80107c6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80107c8:	897b      	ldrh	r3, [r7, #10]
 80107ca:	089b      	lsrs	r3, r3, #2
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	3305      	adds	r3, #5
 80107d0:	b29b      	uxth	r3, r3
 80107d2:	031b      	lsls	r3, r3, #12
 80107d4:	b29a      	uxth	r2, r3
 80107d6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80107da:	b29b      	uxth	r3, r3
 80107dc:	4313      	orrs	r3, r2
 80107de:	b29b      	uxth	r3, r3
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7f9 fc02 	bl	8009fea <lwip_htons>
 80107e6:	4603      	mov	r3, r0
 80107e8:	461a      	mov	r2, r3
 80107ea:	693b      	ldr	r3, [r7, #16]
 80107ec:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80107ee:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107f0:	4618      	mov	r0, r3
 80107f2:	f7f9 fbfa 	bl	8009fea <lwip_htons>
 80107f6:	4603      	mov	r3, r0
 80107f8:	461a      	mov	r2, r3
 80107fa:	693b      	ldr	r3, [r7, #16]
 80107fc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80107fe:	693b      	ldr	r3, [r7, #16]
 8010800:	2200      	movs	r2, #0
 8010802:	741a      	strb	r2, [r3, #16]
 8010804:	2200      	movs	r2, #0
 8010806:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010808:	693b      	ldr	r3, [r7, #16]
 801080a:	2200      	movs	r2, #0
 801080c:	749a      	strb	r2, [r3, #18]
 801080e:	2200      	movs	r2, #0
 8010810:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010812:	697b      	ldr	r3, [r7, #20]
}
 8010814:	4618      	mov	r0, r3
 8010816:	3718      	adds	r7, #24
 8010818:	46bd      	mov	sp, r7
 801081a:	bd80      	pop	{r7, pc}
 801081c:	08016744 	.word	0x08016744
 8010820:	08016e1c 	.word	0x08016e1c
 8010824:	08016798 	.word	0x08016798

08010828 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010828:	b5b0      	push	{r4, r5, r7, lr}
 801082a:	b08a      	sub	sp, #40	; 0x28
 801082c:	af04      	add	r7, sp, #16
 801082e:	60f8      	str	r0, [r7, #12]
 8010830:	607b      	str	r3, [r7, #4]
 8010832:	460b      	mov	r3, r1
 8010834:	817b      	strh	r3, [r7, #10]
 8010836:	4613      	mov	r3, r2
 8010838:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d106      	bne.n	801084e <tcp_output_alloc_header+0x26>
 8010840:	4b15      	ldr	r3, [pc, #84]	; (8010898 <tcp_output_alloc_header+0x70>)
 8010842:	f240 7242 	movw	r2, #1858	; 0x742
 8010846:	4915      	ldr	r1, [pc, #84]	; (801089c <tcp_output_alloc_header+0x74>)
 8010848:	4815      	ldr	r0, [pc, #84]	; (80108a0 <tcp_output_alloc_header+0x78>)
 801084a:	f003 fbfb 	bl	8014044 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801084e:	68fb      	ldr	r3, [r7, #12]
 8010850:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010852:	68fb      	ldr	r3, [r7, #12]
 8010854:	8adb      	ldrh	r3, [r3, #22]
 8010856:	68fa      	ldr	r2, [r7, #12]
 8010858:	8b12      	ldrh	r2, [r2, #24]
 801085a:	68f9      	ldr	r1, [r7, #12]
 801085c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801085e:	893d      	ldrh	r5, [r7, #8]
 8010860:	897c      	ldrh	r4, [r7, #10]
 8010862:	9103      	str	r1, [sp, #12]
 8010864:	2110      	movs	r1, #16
 8010866:	9102      	str	r1, [sp, #8]
 8010868:	9201      	str	r2, [sp, #4]
 801086a:	9300      	str	r3, [sp, #0]
 801086c:	687b      	ldr	r3, [r7, #4]
 801086e:	462a      	mov	r2, r5
 8010870:	4621      	mov	r1, r4
 8010872:	f7ff ff67 	bl	8010744 <tcp_output_alloc_header_common>
 8010876:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010878:	697b      	ldr	r3, [r7, #20]
 801087a:	2b00      	cmp	r3, #0
 801087c:	d006      	beq.n	801088c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801087e:	68fb      	ldr	r3, [r7, #12]
 8010880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010882:	68fa      	ldr	r2, [r7, #12]
 8010884:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010886:	441a      	add	r2, r3
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801088c:	697b      	ldr	r3, [r7, #20]
}
 801088e:	4618      	mov	r0, r3
 8010890:	3718      	adds	r7, #24
 8010892:	46bd      	mov	sp, r7
 8010894:	bdb0      	pop	{r4, r5, r7, pc}
 8010896:	bf00      	nop
 8010898:	08016744 	.word	0x08016744
 801089c:	08016e4c 	.word	0x08016e4c
 80108a0:	08016798 	.word	0x08016798

080108a4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b088      	sub	sp, #32
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	4611      	mov	r1, r2
 80108b0:	461a      	mov	r2, r3
 80108b2:	460b      	mov	r3, r1
 80108b4:	71fb      	strb	r3, [r7, #7]
 80108b6:	4613      	mov	r3, r2
 80108b8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80108ba:	2300      	movs	r3, #0
 80108bc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80108be:	68bb      	ldr	r3, [r7, #8]
 80108c0:	2b00      	cmp	r3, #0
 80108c2:	d106      	bne.n	80108d2 <tcp_output_fill_options+0x2e>
 80108c4:	4b13      	ldr	r3, [pc, #76]	; (8010914 <tcp_output_fill_options+0x70>)
 80108c6:	f240 7256 	movw	r2, #1878	; 0x756
 80108ca:	4913      	ldr	r1, [pc, #76]	; (8010918 <tcp_output_fill_options+0x74>)
 80108cc:	4813      	ldr	r0, [pc, #76]	; (801091c <tcp_output_fill_options+0x78>)
 80108ce:	f003 fbb9 	bl	8014044 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80108d2:	68bb      	ldr	r3, [r7, #8]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80108d8:	69bb      	ldr	r3, [r7, #24]
 80108da:	3314      	adds	r3, #20
 80108dc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80108de:	69bb      	ldr	r3, [r7, #24]
 80108e0:	f103 0214 	add.w	r2, r3, #20
 80108e4:	8bfb      	ldrh	r3, [r7, #30]
 80108e6:	009b      	lsls	r3, r3, #2
 80108e8:	4619      	mov	r1, r3
 80108ea:	79fb      	ldrb	r3, [r7, #7]
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	f003 0304 	and.w	r3, r3, #4
 80108f2:	440b      	add	r3, r1
 80108f4:	4413      	add	r3, r2
 80108f6:	697a      	ldr	r2, [r7, #20]
 80108f8:	429a      	cmp	r2, r3
 80108fa:	d006      	beq.n	801090a <tcp_output_fill_options+0x66>
 80108fc:	4b05      	ldr	r3, [pc, #20]	; (8010914 <tcp_output_fill_options+0x70>)
 80108fe:	f240 7275 	movw	r2, #1909	; 0x775
 8010902:	4907      	ldr	r1, [pc, #28]	; (8010920 <tcp_output_fill_options+0x7c>)
 8010904:	4805      	ldr	r0, [pc, #20]	; (801091c <tcp_output_fill_options+0x78>)
 8010906:	f003 fb9d 	bl	8014044 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801090a:	bf00      	nop
 801090c:	3720      	adds	r7, #32
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}
 8010912:	bf00      	nop
 8010914:	08016744 	.word	0x08016744
 8010918:	08016e74 	.word	0x08016e74
 801091c:	08016798 	.word	0x08016798
 8010920:	08016d6c 	.word	0x08016d6c

08010924 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010924:	b580      	push	{r7, lr}
 8010926:	b08a      	sub	sp, #40	; 0x28
 8010928:	af04      	add	r7, sp, #16
 801092a:	60f8      	str	r0, [r7, #12]
 801092c:	60b9      	str	r1, [r7, #8]
 801092e:	607a      	str	r2, [r7, #4]
 8010930:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010932:	68bb      	ldr	r3, [r7, #8]
 8010934:	2b00      	cmp	r3, #0
 8010936:	d106      	bne.n	8010946 <tcp_output_control_segment+0x22>
 8010938:	4b1c      	ldr	r3, [pc, #112]	; (80109ac <tcp_output_control_segment+0x88>)
 801093a:	f240 7287 	movw	r2, #1927	; 0x787
 801093e:	491c      	ldr	r1, [pc, #112]	; (80109b0 <tcp_output_control_segment+0x8c>)
 8010940:	481c      	ldr	r0, [pc, #112]	; (80109b4 <tcp_output_control_segment+0x90>)
 8010942:	f003 fb7f 	bl	8014044 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010946:	683a      	ldr	r2, [r7, #0]
 8010948:	6879      	ldr	r1, [r7, #4]
 801094a:	68f8      	ldr	r0, [r7, #12]
 801094c:	f7fe ff40 	bl	800f7d0 <tcp_route>
 8010950:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010952:	693b      	ldr	r3, [r7, #16]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d102      	bne.n	801095e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010958:	23fc      	movs	r3, #252	; 0xfc
 801095a:	75fb      	strb	r3, [r7, #23]
 801095c:	e01c      	b.n	8010998 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801095e:	68fb      	ldr	r3, [r7, #12]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d006      	beq.n	8010972 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010964:	68fb      	ldr	r3, [r7, #12]
 8010966:	7adb      	ldrb	r3, [r3, #11]
 8010968:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801096a:	68fb      	ldr	r3, [r7, #12]
 801096c:	7a9b      	ldrb	r3, [r3, #10]
 801096e:	757b      	strb	r3, [r7, #21]
 8010970:	e003      	b.n	801097a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010972:	23ff      	movs	r3, #255	; 0xff
 8010974:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010976:	2300      	movs	r3, #0
 8010978:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801097a:	7dba      	ldrb	r2, [r7, #22]
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	9302      	str	r3, [sp, #8]
 8010980:	2306      	movs	r3, #6
 8010982:	9301      	str	r3, [sp, #4]
 8010984:	7d7b      	ldrb	r3, [r7, #21]
 8010986:	9300      	str	r3, [sp, #0]
 8010988:	4613      	mov	r3, r2
 801098a:	683a      	ldr	r2, [r7, #0]
 801098c:	6879      	ldr	r1, [r7, #4]
 801098e:	68b8      	ldr	r0, [r7, #8]
 8010990:	f002 fae8 	bl	8012f64 <ip4_output_if>
 8010994:	4603      	mov	r3, r0
 8010996:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010998:	68b8      	ldr	r0, [r7, #8]
 801099a:	f7fa fdd9 	bl	800b550 <pbuf_free>
  return err;
 801099e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80109a2:	4618      	mov	r0, r3
 80109a4:	3718      	adds	r7, #24
 80109a6:	46bd      	mov	sp, r7
 80109a8:	bd80      	pop	{r7, pc}
 80109aa:	bf00      	nop
 80109ac:	08016744 	.word	0x08016744
 80109b0:	08016e9c 	.word	0x08016e9c
 80109b4:	08016798 	.word	0x08016798

080109b8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80109b8:	b590      	push	{r4, r7, lr}
 80109ba:	b08b      	sub	sp, #44	; 0x2c
 80109bc:	af04      	add	r7, sp, #16
 80109be:	60f8      	str	r0, [r7, #12]
 80109c0:	60b9      	str	r1, [r7, #8]
 80109c2:	607a      	str	r2, [r7, #4]
 80109c4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80109c6:	683b      	ldr	r3, [r7, #0]
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d106      	bne.n	80109da <tcp_rst+0x22>
 80109cc:	4b1f      	ldr	r3, [pc, #124]	; (8010a4c <tcp_rst+0x94>)
 80109ce:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80109d2:	491f      	ldr	r1, [pc, #124]	; (8010a50 <tcp_rst+0x98>)
 80109d4:	481f      	ldr	r0, [pc, #124]	; (8010a54 <tcp_rst+0x9c>)
 80109d6:	f003 fb35 	bl	8014044 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80109da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80109dc:	2b00      	cmp	r3, #0
 80109de:	d106      	bne.n	80109ee <tcp_rst+0x36>
 80109e0:	4b1a      	ldr	r3, [pc, #104]	; (8010a4c <tcp_rst+0x94>)
 80109e2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80109e6:	491c      	ldr	r1, [pc, #112]	; (8010a58 <tcp_rst+0xa0>)
 80109e8:	481a      	ldr	r0, [pc, #104]	; (8010a54 <tcp_rst+0x9c>)
 80109ea:	f003 fb2b 	bl	8014044 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80109ee:	2300      	movs	r3, #0
 80109f0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80109f2:	f246 0308 	movw	r3, #24584	; 0x6008
 80109f6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80109f8:	7dfb      	ldrb	r3, [r7, #23]
 80109fa:	b29c      	uxth	r4, r3
 80109fc:	68b8      	ldr	r0, [r7, #8]
 80109fe:	f7f9 fb09 	bl	800a014 <lwip_htonl>
 8010a02:	4602      	mov	r2, r0
 8010a04:	8abb      	ldrh	r3, [r7, #20]
 8010a06:	9303      	str	r3, [sp, #12]
 8010a08:	2314      	movs	r3, #20
 8010a0a:	9302      	str	r3, [sp, #8]
 8010a0c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8010a0e:	9301      	str	r3, [sp, #4]
 8010a10:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010a12:	9300      	str	r3, [sp, #0]
 8010a14:	4613      	mov	r3, r2
 8010a16:	2200      	movs	r2, #0
 8010a18:	4621      	mov	r1, r4
 8010a1a:	6878      	ldr	r0, [r7, #4]
 8010a1c:	f7ff fe92 	bl	8010744 <tcp_output_alloc_header_common>
 8010a20:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8010a22:	693b      	ldr	r3, [r7, #16]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d00c      	beq.n	8010a42 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010a28:	7dfb      	ldrb	r3, [r7, #23]
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	6939      	ldr	r1, [r7, #16]
 8010a2e:	68f8      	ldr	r0, [r7, #12]
 8010a30:	f7ff ff38 	bl	80108a4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8010a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a36:	683a      	ldr	r2, [r7, #0]
 8010a38:	6939      	ldr	r1, [r7, #16]
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	f7ff ff72 	bl	8010924 <tcp_output_control_segment>
 8010a40:	e000      	b.n	8010a44 <tcp_rst+0x8c>
    return;
 8010a42:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010a44:	371c      	adds	r7, #28
 8010a46:	46bd      	mov	sp, r7
 8010a48:	bd90      	pop	{r4, r7, pc}
 8010a4a:	bf00      	nop
 8010a4c:	08016744 	.word	0x08016744
 8010a50:	08016ec8 	.word	0x08016ec8
 8010a54:	08016798 	.word	0x08016798
 8010a58:	08016ee4 	.word	0x08016ee4

08010a5c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8010a5c:	b590      	push	{r4, r7, lr}
 8010a5e:	b087      	sub	sp, #28
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010a64:	2300      	movs	r3, #0
 8010a66:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_send_empty_ack+0x24>
 8010a72:	4b28      	ldr	r3, [pc, #160]	; (8010b14 <tcp_send_empty_ack+0xb8>)
 8010a74:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010a78:	4927      	ldr	r1, [pc, #156]	; (8010b18 <tcp_send_empty_ack+0xbc>)
 8010a7a:	4828      	ldr	r0, [pc, #160]	; (8010b1c <tcp_send_empty_ack+0xc0>)
 8010a7c:	f003 fae2 	bl	8014044 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010a80:	7dfb      	ldrb	r3, [r7, #23]
 8010a82:	009b      	lsls	r3, r3, #2
 8010a84:	b2db      	uxtb	r3, r3
 8010a86:	f003 0304 	and.w	r3, r3, #4
 8010a8a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8010a8c:	7d7b      	ldrb	r3, [r7, #21]
 8010a8e:	b29c      	uxth	r4, r3
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010a94:	4618      	mov	r0, r3
 8010a96:	f7f9 fabd 	bl	800a014 <lwip_htonl>
 8010a9a:	4603      	mov	r3, r0
 8010a9c:	2200      	movs	r2, #0
 8010a9e:	4621      	mov	r1, r4
 8010aa0:	6878      	ldr	r0, [r7, #4]
 8010aa2:	f7ff fec1 	bl	8010828 <tcp_output_alloc_header>
 8010aa6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010aa8:	693b      	ldr	r3, [r7, #16]
 8010aaa:	2b00      	cmp	r3, #0
 8010aac:	d109      	bne.n	8010ac2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010aae:	687b      	ldr	r3, [r7, #4]
 8010ab0:	8b5b      	ldrh	r3, [r3, #26]
 8010ab2:	f043 0303 	orr.w	r3, r3, #3
 8010ab6:	b29a      	uxth	r2, r3
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8010abc:	f06f 0301 	mvn.w	r3, #1
 8010ac0:	e023      	b.n	8010b0a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010ac2:	7dbb      	ldrb	r3, [r7, #22]
 8010ac4:	7dfa      	ldrb	r2, [r7, #23]
 8010ac6:	6939      	ldr	r1, [r7, #16]
 8010ac8:	6878      	ldr	r0, [r7, #4]
 8010aca:	f7ff feeb 	bl	80108a4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010ace:	687a      	ldr	r2, [r7, #4]
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	3304      	adds	r3, #4
 8010ad4:	6939      	ldr	r1, [r7, #16]
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f7ff ff24 	bl	8010924 <tcp_output_control_segment>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8010ae0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d007      	beq.n	8010af8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	8b5b      	ldrh	r3, [r3, #26]
 8010aec:	f043 0303 	orr.w	r3, r3, #3
 8010af0:	b29a      	uxth	r2, r3
 8010af2:	687b      	ldr	r3, [r7, #4]
 8010af4:	835a      	strh	r2, [r3, #26]
 8010af6:	e006      	b.n	8010b06 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	8b5b      	ldrh	r3, [r3, #26]
 8010afc:	f023 0303 	bic.w	r3, r3, #3
 8010b00:	b29a      	uxth	r2, r3
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8010b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b0a:	4618      	mov	r0, r3
 8010b0c:	371c      	adds	r7, #28
 8010b0e:	46bd      	mov	sp, r7
 8010b10:	bd90      	pop	{r4, r7, pc}
 8010b12:	bf00      	nop
 8010b14:	08016744 	.word	0x08016744
 8010b18:	08016f00 	.word	0x08016f00
 8010b1c:	08016798 	.word	0x08016798

08010b20 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8010b20:	b590      	push	{r4, r7, lr}
 8010b22:	b087      	sub	sp, #28
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010b28:	2300      	movs	r3, #0
 8010b2a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	d106      	bne.n	8010b40 <tcp_keepalive+0x20>
 8010b32:	4b18      	ldr	r3, [pc, #96]	; (8010b94 <tcp_keepalive+0x74>)
 8010b34:	f640 0224 	movw	r2, #2084	; 0x824
 8010b38:	4917      	ldr	r1, [pc, #92]	; (8010b98 <tcp_keepalive+0x78>)
 8010b3a:	4818      	ldr	r0, [pc, #96]	; (8010b9c <tcp_keepalive+0x7c>)
 8010b3c:	f003 fa82 	bl	8014044 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010b40:	7dfb      	ldrb	r3, [r7, #23]
 8010b42:	b29c      	uxth	r4, r3
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	4618      	mov	r0, r3
 8010b4c:	f7f9 fa62 	bl	800a014 <lwip_htonl>
 8010b50:	4603      	mov	r3, r0
 8010b52:	2200      	movs	r2, #0
 8010b54:	4621      	mov	r1, r4
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fe66 	bl	8010828 <tcp_output_alloc_header>
 8010b5c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010b5e:	693b      	ldr	r3, [r7, #16]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d102      	bne.n	8010b6a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010b64:	f04f 33ff 	mov.w	r3, #4294967295
 8010b68:	e010      	b.n	8010b8c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010b6a:	7dfb      	ldrb	r3, [r7, #23]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	6939      	ldr	r1, [r7, #16]
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f7ff fe97 	bl	80108a4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	3304      	adds	r3, #4
 8010b7c:	6939      	ldr	r1, [r7, #16]
 8010b7e:	6878      	ldr	r0, [r7, #4]
 8010b80:	f7ff fed0 	bl	8010924 <tcp_output_control_segment>
 8010b84:	4603      	mov	r3, r0
 8010b86:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	371c      	adds	r7, #28
 8010b90:	46bd      	mov	sp, r7
 8010b92:	bd90      	pop	{r4, r7, pc}
 8010b94:	08016744 	.word	0x08016744
 8010b98:	08016f20 	.word	0x08016f20
 8010b9c:	08016798 	.word	0x08016798

08010ba0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010ba0:	b590      	push	{r4, r7, lr}
 8010ba2:	b08b      	sub	sp, #44	; 0x2c
 8010ba4:	af00      	add	r7, sp, #0
 8010ba6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ba8:	2300      	movs	r3, #0
 8010baa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	2b00      	cmp	r3, #0
 8010bb2:	d106      	bne.n	8010bc2 <tcp_zero_window_probe+0x22>
 8010bb4:	4b4c      	ldr	r3, [pc, #304]	; (8010ce8 <tcp_zero_window_probe+0x148>)
 8010bb6:	f640 024f 	movw	r2, #2127	; 0x84f
 8010bba:	494c      	ldr	r1, [pc, #304]	; (8010cec <tcp_zero_window_probe+0x14c>)
 8010bbc:	484c      	ldr	r0, [pc, #304]	; (8010cf0 <tcp_zero_window_probe+0x150>)
 8010bbe:	f003 fa41 	bl	8014044 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bc6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010bc8:	6a3b      	ldr	r3, [r7, #32]
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e086      	b.n	8010ce0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010bd2:	687b      	ldr	r3, [r7, #4]
 8010bd4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010bd8:	2bff      	cmp	r3, #255	; 0xff
 8010bda:	d007      	beq.n	8010bec <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010be2:	3301      	adds	r3, #1
 8010be4:	b2da      	uxtb	r2, r3
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8010bec:	6a3b      	ldr	r3, [r7, #32]
 8010bee:	68db      	ldr	r3, [r3, #12]
 8010bf0:	899b      	ldrh	r3, [r3, #12]
 8010bf2:	b29b      	uxth	r3, r3
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	f7f9 f9f8 	bl	8009fea <lwip_htons>
 8010bfa:	4603      	mov	r3, r0
 8010bfc:	b2db      	uxtb	r3, r3
 8010bfe:	f003 0301 	and.w	r3, r3, #1
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	d005      	beq.n	8010c12 <tcp_zero_window_probe+0x72>
 8010c06:	6a3b      	ldr	r3, [r7, #32]
 8010c08:	891b      	ldrh	r3, [r3, #8]
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	d101      	bne.n	8010c12 <tcp_zero_window_probe+0x72>
 8010c0e:	2301      	movs	r3, #1
 8010c10:	e000      	b.n	8010c14 <tcp_zero_window_probe+0x74>
 8010c12:	2300      	movs	r3, #0
 8010c14:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8010c16:	7ffb      	ldrb	r3, [r7, #31]
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	bf0c      	ite	eq
 8010c1c:	2301      	moveq	r3, #1
 8010c1e:	2300      	movne	r3, #0
 8010c20:	b2db      	uxtb	r3, r3
 8010c22:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8010c24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c28:	b299      	uxth	r1, r3
 8010c2a:	6a3b      	ldr	r3, [r7, #32]
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	685b      	ldr	r3, [r3, #4]
 8010c30:	8bba      	ldrh	r2, [r7, #28]
 8010c32:	6878      	ldr	r0, [r7, #4]
 8010c34:	f7ff fdf8 	bl	8010828 <tcp_output_alloc_header>
 8010c38:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8010c3a:	69bb      	ldr	r3, [r7, #24]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	d102      	bne.n	8010c46 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010c40:	f04f 33ff 	mov.w	r3, #4294967295
 8010c44:	e04c      	b.n	8010ce0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010c46:	69bb      	ldr	r3, [r7, #24]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010c4c:	7ffb      	ldrb	r3, [r7, #31]
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d011      	beq.n	8010c76 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010c52:	697b      	ldr	r3, [r7, #20]
 8010c54:	899b      	ldrh	r3, [r3, #12]
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	b21b      	sxth	r3, r3
 8010c5a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010c5e:	b21c      	sxth	r4, r3
 8010c60:	2011      	movs	r0, #17
 8010c62:	f7f9 f9c2 	bl	8009fea <lwip_htons>
 8010c66:	4603      	mov	r3, r0
 8010c68:	b21b      	sxth	r3, r3
 8010c6a:	4323      	orrs	r3, r4
 8010c6c:	b21b      	sxth	r3, r3
 8010c6e:	b29a      	uxth	r2, r3
 8010c70:	697b      	ldr	r3, [r7, #20]
 8010c72:	819a      	strh	r2, [r3, #12]
 8010c74:	e010      	b.n	8010c98 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010c76:	69bb      	ldr	r3, [r7, #24]
 8010c78:	685b      	ldr	r3, [r3, #4]
 8010c7a:	3314      	adds	r3, #20
 8010c7c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010c7e:	6a3b      	ldr	r3, [r7, #32]
 8010c80:	6858      	ldr	r0, [r3, #4]
 8010c82:	6a3b      	ldr	r3, [r7, #32]
 8010c84:	685b      	ldr	r3, [r3, #4]
 8010c86:	891a      	ldrh	r2, [r3, #8]
 8010c88:	6a3b      	ldr	r3, [r7, #32]
 8010c8a:	891b      	ldrh	r3, [r3, #8]
 8010c8c:	1ad3      	subs	r3, r2, r3
 8010c8e:	b29b      	uxth	r3, r3
 8010c90:	2201      	movs	r2, #1
 8010c92:	6939      	ldr	r1, [r7, #16]
 8010c94:	f7fa fe56 	bl	800b944 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010c98:	6a3b      	ldr	r3, [r7, #32]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	685b      	ldr	r3, [r3, #4]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7f9 f9b8 	bl	800a014 <lwip_htonl>
 8010ca4:	4603      	mov	r3, r0
 8010ca6:	3301      	adds	r3, #1
 8010ca8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010caa:	687b      	ldr	r3, [r7, #4]
 8010cac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010cae:	68fb      	ldr	r3, [r7, #12]
 8010cb0:	1ad3      	subs	r3, r2, r3
 8010cb2:	2b00      	cmp	r3, #0
 8010cb4:	da02      	bge.n	8010cbc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010cb6:	687b      	ldr	r3, [r7, #4]
 8010cb8:	68fa      	ldr	r2, [r7, #12]
 8010cba:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010cbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010cc0:	2200      	movs	r2, #0
 8010cc2:	69b9      	ldr	r1, [r7, #24]
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f7ff fded 	bl	80108a4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010cca:	687a      	ldr	r2, [r7, #4]
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	3304      	adds	r3, #4
 8010cd0:	69b9      	ldr	r1, [r7, #24]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f7ff fe26 	bl	8010924 <tcp_output_control_segment>
 8010cd8:	4603      	mov	r3, r0
 8010cda:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010cdc:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	372c      	adds	r7, #44	; 0x2c
 8010ce4:	46bd      	mov	sp, r7
 8010ce6:	bd90      	pop	{r4, r7, pc}
 8010ce8:	08016744 	.word	0x08016744
 8010cec:	08016f3c 	.word	0x08016f3c
 8010cf0:	08016798 	.word	0x08016798

08010cf4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010cf4:	b580      	push	{r7, lr}
 8010cf6:	b082      	sub	sp, #8
 8010cf8:	af00      	add	r7, sp, #0
 8010cfa:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010cfc:	f7fa ff10 	bl	800bb20 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010d00:	4b0a      	ldr	r3, [pc, #40]	; (8010d2c <tcpip_tcp_timer+0x38>)
 8010d02:	681b      	ldr	r3, [r3, #0]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d103      	bne.n	8010d10 <tcpip_tcp_timer+0x1c>
 8010d08:	4b09      	ldr	r3, [pc, #36]	; (8010d30 <tcpip_tcp_timer+0x3c>)
 8010d0a:	681b      	ldr	r3, [r3, #0]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d005      	beq.n	8010d1c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010d10:	2200      	movs	r2, #0
 8010d12:	4908      	ldr	r1, [pc, #32]	; (8010d34 <tcpip_tcp_timer+0x40>)
 8010d14:	20fa      	movs	r0, #250	; 0xfa
 8010d16:	f000 f8f3 	bl	8010f00 <sys_timeout>
 8010d1a:	e003      	b.n	8010d24 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010d1c:	4b06      	ldr	r3, [pc, #24]	; (8010d38 <tcpip_tcp_timer+0x44>)
 8010d1e:	2200      	movs	r2, #0
 8010d20:	601a      	str	r2, [r3, #0]
  }
}
 8010d22:	bf00      	nop
 8010d24:	bf00      	nop
 8010d26:	3708      	adds	r7, #8
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	20007204 	.word	0x20007204
 8010d30:	20007214 	.word	0x20007214
 8010d34:	08010cf5 	.word	0x08010cf5
 8010d38:	2000011c 	.word	0x2000011c

08010d3c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010d3c:	b580      	push	{r7, lr}
 8010d3e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010d40:	4b0a      	ldr	r3, [pc, #40]	; (8010d6c <tcp_timer_needed+0x30>)
 8010d42:	681b      	ldr	r3, [r3, #0]
 8010d44:	2b00      	cmp	r3, #0
 8010d46:	d10f      	bne.n	8010d68 <tcp_timer_needed+0x2c>
 8010d48:	4b09      	ldr	r3, [pc, #36]	; (8010d70 <tcp_timer_needed+0x34>)
 8010d4a:	681b      	ldr	r3, [r3, #0]
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	d103      	bne.n	8010d58 <tcp_timer_needed+0x1c>
 8010d50:	4b08      	ldr	r3, [pc, #32]	; (8010d74 <tcp_timer_needed+0x38>)
 8010d52:	681b      	ldr	r3, [r3, #0]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d007      	beq.n	8010d68 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010d58:	4b04      	ldr	r3, [pc, #16]	; (8010d6c <tcp_timer_needed+0x30>)
 8010d5a:	2201      	movs	r2, #1
 8010d5c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010d5e:	2200      	movs	r2, #0
 8010d60:	4905      	ldr	r1, [pc, #20]	; (8010d78 <tcp_timer_needed+0x3c>)
 8010d62:	20fa      	movs	r0, #250	; 0xfa
 8010d64:	f000 f8cc 	bl	8010f00 <sys_timeout>
  }
}
 8010d68:	bf00      	nop
 8010d6a:	bd80      	pop	{r7, pc}
 8010d6c:	2000011c 	.word	0x2000011c
 8010d70:	20007204 	.word	0x20007204
 8010d74:	20007214 	.word	0x20007214
 8010d78:	08010cf5 	.word	0x08010cf5

08010d7c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010d7c:	b580      	push	{r7, lr}
 8010d7e:	b086      	sub	sp, #24
 8010d80:	af00      	add	r7, sp, #0
 8010d82:	60f8      	str	r0, [r7, #12]
 8010d84:	60b9      	str	r1, [r7, #8]
 8010d86:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010d88:	2006      	movs	r0, #6
 8010d8a:	f7f9 fd83 	bl	800a894 <memp_malloc>
 8010d8e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010d90:	693b      	ldr	r3, [r7, #16]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d109      	bne.n	8010daa <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d151      	bne.n	8010e40 <sys_timeout_abs+0xc4>
 8010d9c:	4b2a      	ldr	r3, [pc, #168]	; (8010e48 <sys_timeout_abs+0xcc>)
 8010d9e:	22be      	movs	r2, #190	; 0xbe
 8010da0:	492a      	ldr	r1, [pc, #168]	; (8010e4c <sys_timeout_abs+0xd0>)
 8010da2:	482b      	ldr	r0, [pc, #172]	; (8010e50 <sys_timeout_abs+0xd4>)
 8010da4:	f003 f94e 	bl	8014044 <iprintf>
    return;
 8010da8:	e04a      	b.n	8010e40 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010daa:	693b      	ldr	r3, [r7, #16]
 8010dac:	2200      	movs	r2, #0
 8010dae:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010db0:	693b      	ldr	r3, [r7, #16]
 8010db2:	68ba      	ldr	r2, [r7, #8]
 8010db4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010db6:	693b      	ldr	r3, [r7, #16]
 8010db8:	687a      	ldr	r2, [r7, #4]
 8010dba:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	68fa      	ldr	r2, [r7, #12]
 8010dc0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010dc2:	4b24      	ldr	r3, [pc, #144]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010dc4:	681b      	ldr	r3, [r3, #0]
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010dca:	4a22      	ldr	r2, [pc, #136]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	6013      	str	r3, [r2, #0]
    return;
 8010dd0:	e037      	b.n	8010e42 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010dd2:	693b      	ldr	r3, [r7, #16]
 8010dd4:	685a      	ldr	r2, [r3, #4]
 8010dd6:	4b1f      	ldr	r3, [pc, #124]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010dd8:	681b      	ldr	r3, [r3, #0]
 8010dda:	685b      	ldr	r3, [r3, #4]
 8010ddc:	1ad3      	subs	r3, r2, r3
 8010dde:	0fdb      	lsrs	r3, r3, #31
 8010de0:	f003 0301 	and.w	r3, r3, #1
 8010de4:	b2db      	uxtb	r3, r3
 8010de6:	2b00      	cmp	r3, #0
 8010de8:	d007      	beq.n	8010dfa <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010dea:	4b1a      	ldr	r3, [pc, #104]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010dec:	681a      	ldr	r2, [r3, #0]
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010df2:	4a18      	ldr	r2, [pc, #96]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010df4:	693b      	ldr	r3, [r7, #16]
 8010df6:	6013      	str	r3, [r2, #0]
 8010df8:	e023      	b.n	8010e42 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010dfa:	4b16      	ldr	r3, [pc, #88]	; (8010e54 <sys_timeout_abs+0xd8>)
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	617b      	str	r3, [r7, #20]
 8010e00:	e01a      	b.n	8010e38 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010e02:	697b      	ldr	r3, [r7, #20]
 8010e04:	681b      	ldr	r3, [r3, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00b      	beq.n	8010e22 <sys_timeout_abs+0xa6>
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	685a      	ldr	r2, [r3, #4]
 8010e0e:	697b      	ldr	r3, [r7, #20]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	685b      	ldr	r3, [r3, #4]
 8010e14:	1ad3      	subs	r3, r2, r3
 8010e16:	0fdb      	lsrs	r3, r3, #31
 8010e18:	f003 0301 	and.w	r3, r3, #1
 8010e1c:	b2db      	uxtb	r3, r3
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d007      	beq.n	8010e32 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010e22:	697b      	ldr	r3, [r7, #20]
 8010e24:	681a      	ldr	r2, [r3, #0]
 8010e26:	693b      	ldr	r3, [r7, #16]
 8010e28:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010e2a:	697b      	ldr	r3, [r7, #20]
 8010e2c:	693a      	ldr	r2, [r7, #16]
 8010e2e:	601a      	str	r2, [r3, #0]
        break;
 8010e30:	e007      	b.n	8010e42 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	681b      	ldr	r3, [r3, #0]
 8010e36:	617b      	str	r3, [r7, #20]
 8010e38:	697b      	ldr	r3, [r7, #20]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d1e1      	bne.n	8010e02 <sys_timeout_abs+0x86>
 8010e3e:	e000      	b.n	8010e42 <sys_timeout_abs+0xc6>
    return;
 8010e40:	bf00      	nop
      }
    }
  }
}
 8010e42:	3718      	adds	r7, #24
 8010e44:	46bd      	mov	sp, r7
 8010e46:	bd80      	pop	{r7, pc}
 8010e48:	08016f60 	.word	0x08016f60
 8010e4c:	08016f94 	.word	0x08016f94
 8010e50:	08016fd4 	.word	0x08016fd4
 8010e54:	20000114 	.word	0x20000114

08010e58 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010e58:	b580      	push	{r7, lr}
 8010e5a:	b086      	sub	sp, #24
 8010e5c:	af00      	add	r7, sp, #0
 8010e5e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010e64:	697b      	ldr	r3, [r7, #20]
 8010e66:	685b      	ldr	r3, [r3, #4]
 8010e68:	4798      	blx	r3

  now = sys_now();
 8010e6a:	f7f8 ffd5 	bl	8009e18 <sys_now>
 8010e6e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010e70:	697b      	ldr	r3, [r7, #20]
 8010e72:	681a      	ldr	r2, [r3, #0]
 8010e74:	4b0f      	ldr	r3, [pc, #60]	; (8010eb4 <lwip_cyclic_timer+0x5c>)
 8010e76:	681b      	ldr	r3, [r3, #0]
 8010e78:	4413      	add	r3, r2
 8010e7a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010e7c:	68fa      	ldr	r2, [r7, #12]
 8010e7e:	693b      	ldr	r3, [r7, #16]
 8010e80:	1ad3      	subs	r3, r2, r3
 8010e82:	0fdb      	lsrs	r3, r3, #31
 8010e84:	f003 0301 	and.w	r3, r3, #1
 8010e88:	b2db      	uxtb	r3, r3
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d009      	beq.n	8010ea2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010e8e:	697b      	ldr	r3, [r7, #20]
 8010e90:	681a      	ldr	r2, [r3, #0]
 8010e92:	693b      	ldr	r3, [r7, #16]
 8010e94:	4413      	add	r3, r2
 8010e96:	687a      	ldr	r2, [r7, #4]
 8010e98:	4907      	ldr	r1, [pc, #28]	; (8010eb8 <lwip_cyclic_timer+0x60>)
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	f7ff ff6e 	bl	8010d7c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010ea0:	e004      	b.n	8010eac <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010ea2:	687a      	ldr	r2, [r7, #4]
 8010ea4:	4904      	ldr	r1, [pc, #16]	; (8010eb8 <lwip_cyclic_timer+0x60>)
 8010ea6:	68f8      	ldr	r0, [r7, #12]
 8010ea8:	f7ff ff68 	bl	8010d7c <sys_timeout_abs>
}
 8010eac:	bf00      	nop
 8010eae:	3718      	adds	r7, #24
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	20000118 	.word	0x20000118
 8010eb8:	08010e59 	.word	0x08010e59

08010ebc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b082      	sub	sp, #8
 8010ec0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	607b      	str	r3, [r7, #4]
 8010ec6:	e00e      	b.n	8010ee6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010ec8:	4a0b      	ldr	r2, [pc, #44]	; (8010ef8 <sys_timeouts_init+0x3c>)
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	00db      	lsls	r3, r3, #3
 8010ed4:	4a08      	ldr	r2, [pc, #32]	; (8010ef8 <sys_timeouts_init+0x3c>)
 8010ed6:	4413      	add	r3, r2
 8010ed8:	461a      	mov	r2, r3
 8010eda:	4908      	ldr	r1, [pc, #32]	; (8010efc <sys_timeouts_init+0x40>)
 8010edc:	f000 f810 	bl	8010f00 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	3301      	adds	r3, #1
 8010ee4:	607b      	str	r3, [r7, #4]
 8010ee6:	687b      	ldr	r3, [r7, #4]
 8010ee8:	2b02      	cmp	r3, #2
 8010eea:	d9ed      	bls.n	8010ec8 <sys_timeouts_init+0xc>
  }
}
 8010eec:	bf00      	nop
 8010eee:	bf00      	nop
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}
 8010ef6:	bf00      	nop
 8010ef8:	08017b5c 	.word	0x08017b5c
 8010efc:	08010e59 	.word	0x08010e59

08010f00 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b086      	sub	sp, #24
 8010f04:	af00      	add	r7, sp, #0
 8010f06:	60f8      	str	r0, [r7, #12]
 8010f08:	60b9      	str	r1, [r7, #8]
 8010f0a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010f0c:	68fb      	ldr	r3, [r7, #12]
 8010f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010f12:	d306      	bcc.n	8010f22 <sys_timeout+0x22>
 8010f14:	4b0a      	ldr	r3, [pc, #40]	; (8010f40 <sys_timeout+0x40>)
 8010f16:	f240 1229 	movw	r2, #297	; 0x129
 8010f1a:	490a      	ldr	r1, [pc, #40]	; (8010f44 <sys_timeout+0x44>)
 8010f1c:	480a      	ldr	r0, [pc, #40]	; (8010f48 <sys_timeout+0x48>)
 8010f1e:	f003 f891 	bl	8014044 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010f22:	f7f8 ff79 	bl	8009e18 <sys_now>
 8010f26:	4602      	mov	r2, r0
 8010f28:	68fb      	ldr	r3, [r7, #12]
 8010f2a:	4413      	add	r3, r2
 8010f2c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010f2e:	687a      	ldr	r2, [r7, #4]
 8010f30:	68b9      	ldr	r1, [r7, #8]
 8010f32:	6978      	ldr	r0, [r7, #20]
 8010f34:	f7ff ff22 	bl	8010d7c <sys_timeout_abs>
#endif
}
 8010f38:	bf00      	nop
 8010f3a:	3718      	adds	r7, #24
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	08016f60 	.word	0x08016f60
 8010f44:	08016ffc 	.word	0x08016ffc
 8010f48:	08016fd4 	.word	0x08016fd4

08010f4c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010f4c:	b580      	push	{r7, lr}
 8010f4e:	b084      	sub	sp, #16
 8010f50:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010f52:	f7f8 ff61 	bl	8009e18 <sys_now>
 8010f56:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010f58:	4b1a      	ldr	r3, [pc, #104]	; (8010fc4 <sys_check_timeouts+0x78>)
 8010f5a:	781b      	ldrb	r3, [r3, #0]
 8010f5c:	b2db      	uxtb	r3, r3
 8010f5e:	2b00      	cmp	r3, #0
 8010f60:	d001      	beq.n	8010f66 <sys_check_timeouts+0x1a>
 8010f62:	f7f9 ffbb 	bl	800aedc <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010f66:	4b18      	ldr	r3, [pc, #96]	; (8010fc8 <sys_check_timeouts+0x7c>)
 8010f68:	681b      	ldr	r3, [r3, #0]
 8010f6a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	2b00      	cmp	r3, #0
 8010f70:	d022      	beq.n	8010fb8 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010f72:	68bb      	ldr	r3, [r7, #8]
 8010f74:	685b      	ldr	r3, [r3, #4]
 8010f76:	68fa      	ldr	r2, [r7, #12]
 8010f78:	1ad3      	subs	r3, r2, r3
 8010f7a:	0fdb      	lsrs	r3, r3, #31
 8010f7c:	f003 0301 	and.w	r3, r3, #1
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d11a      	bne.n	8010fbc <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	681b      	ldr	r3, [r3, #0]
 8010f8a:	4a0f      	ldr	r2, [pc, #60]	; (8010fc8 <sys_check_timeouts+0x7c>)
 8010f8c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010f94:	68bb      	ldr	r3, [r7, #8]
 8010f96:	68db      	ldr	r3, [r3, #12]
 8010f98:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	685b      	ldr	r3, [r3, #4]
 8010f9e:	4a0b      	ldr	r2, [pc, #44]	; (8010fcc <sys_check_timeouts+0x80>)
 8010fa0:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010fa2:	68b9      	ldr	r1, [r7, #8]
 8010fa4:	2006      	movs	r0, #6
 8010fa6:	f7f9 fcc1 	bl	800a92c <memp_free>
    if (handler != NULL) {
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	d0d3      	beq.n	8010f58 <sys_check_timeouts+0xc>
      handler(arg);
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	6838      	ldr	r0, [r7, #0]
 8010fb4:	4798      	blx	r3
  do {
 8010fb6:	e7cf      	b.n	8010f58 <sys_check_timeouts+0xc>
      return;
 8010fb8:	bf00      	nop
 8010fba:	e000      	b.n	8010fbe <sys_check_timeouts+0x72>
      return;
 8010fbc:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010fbe:	3710      	adds	r7, #16
 8010fc0:	46bd      	mov	sp, r7
 8010fc2:	bd80      	pop	{r7, pc}
 8010fc4:	200071fc 	.word	0x200071fc
 8010fc8:	20000114 	.word	0x20000114
 8010fcc:	20000118 	.word	0x20000118

08010fd0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010fd0:	b580      	push	{r7, lr}
 8010fd2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010fd4:	f003 f84e 	bl	8014074 <rand>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	b29b      	uxth	r3, r3
 8010fdc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010fe0:	b29b      	uxth	r3, r3
 8010fe2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	4b01      	ldr	r3, [pc, #4]	; (8010ff0 <udp_init+0x20>)
 8010fea:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010fec:	bf00      	nop
 8010fee:	bd80      	pop	{r7, pc}
 8010ff0:	20000010 	.word	0x20000010

08010ff4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010ff4:	b480      	push	{r7}
 8010ff6:	b083      	sub	sp, #12
 8010ff8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010ffe:	4b17      	ldr	r3, [pc, #92]	; (801105c <udp_new_port+0x68>)
 8011000:	881b      	ldrh	r3, [r3, #0]
 8011002:	1c5a      	adds	r2, r3, #1
 8011004:	b291      	uxth	r1, r2
 8011006:	4a15      	ldr	r2, [pc, #84]	; (801105c <udp_new_port+0x68>)
 8011008:	8011      	strh	r1, [r2, #0]
 801100a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801100e:	4293      	cmp	r3, r2
 8011010:	d103      	bne.n	801101a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011012:	4b12      	ldr	r3, [pc, #72]	; (801105c <udp_new_port+0x68>)
 8011014:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011018:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801101a:	4b11      	ldr	r3, [pc, #68]	; (8011060 <udp_new_port+0x6c>)
 801101c:	681b      	ldr	r3, [r3, #0]
 801101e:	603b      	str	r3, [r7, #0]
 8011020:	e011      	b.n	8011046 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011022:	683b      	ldr	r3, [r7, #0]
 8011024:	8a5a      	ldrh	r2, [r3, #18]
 8011026:	4b0d      	ldr	r3, [pc, #52]	; (801105c <udp_new_port+0x68>)
 8011028:	881b      	ldrh	r3, [r3, #0]
 801102a:	429a      	cmp	r2, r3
 801102c:	d108      	bne.n	8011040 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801102e:	88fb      	ldrh	r3, [r7, #6]
 8011030:	3301      	adds	r3, #1
 8011032:	80fb      	strh	r3, [r7, #6]
 8011034:	88fb      	ldrh	r3, [r7, #6]
 8011036:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801103a:	d3e0      	bcc.n	8010ffe <udp_new_port+0xa>
        return 0;
 801103c:	2300      	movs	r3, #0
 801103e:	e007      	b.n	8011050 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	68db      	ldr	r3, [r3, #12]
 8011044:	603b      	str	r3, [r7, #0]
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	2b00      	cmp	r3, #0
 801104a:	d1ea      	bne.n	8011022 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801104c:	4b03      	ldr	r3, [pc, #12]	; (801105c <udp_new_port+0x68>)
 801104e:	881b      	ldrh	r3, [r3, #0]
}
 8011050:	4618      	mov	r0, r3
 8011052:	370c      	adds	r7, #12
 8011054:	46bd      	mov	sp, r7
 8011056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801105a:	4770      	bx	lr
 801105c:	20000010 	.word	0x20000010
 8011060:	2000721c 	.word	0x2000721c

08011064 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011064:	b580      	push	{r7, lr}
 8011066:	b084      	sub	sp, #16
 8011068:	af00      	add	r7, sp, #0
 801106a:	60f8      	str	r0, [r7, #12]
 801106c:	60b9      	str	r1, [r7, #8]
 801106e:	4613      	mov	r3, r2
 8011070:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011072:	68fb      	ldr	r3, [r7, #12]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d105      	bne.n	8011084 <udp_input_local_match+0x20>
 8011078:	4b27      	ldr	r3, [pc, #156]	; (8011118 <udp_input_local_match+0xb4>)
 801107a:	2287      	movs	r2, #135	; 0x87
 801107c:	4927      	ldr	r1, [pc, #156]	; (801111c <udp_input_local_match+0xb8>)
 801107e:	4828      	ldr	r0, [pc, #160]	; (8011120 <udp_input_local_match+0xbc>)
 8011080:	f002 ffe0 	bl	8014044 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011084:	68bb      	ldr	r3, [r7, #8]
 8011086:	2b00      	cmp	r3, #0
 8011088:	d105      	bne.n	8011096 <udp_input_local_match+0x32>
 801108a:	4b23      	ldr	r3, [pc, #140]	; (8011118 <udp_input_local_match+0xb4>)
 801108c:	2288      	movs	r2, #136	; 0x88
 801108e:	4925      	ldr	r1, [pc, #148]	; (8011124 <udp_input_local_match+0xc0>)
 8011090:	4823      	ldr	r0, [pc, #140]	; (8011120 <udp_input_local_match+0xbc>)
 8011092:	f002 ffd7 	bl	8014044 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	7a1b      	ldrb	r3, [r3, #8]
 801109a:	2b00      	cmp	r3, #0
 801109c:	d00b      	beq.n	80110b6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	7a1a      	ldrb	r2, [r3, #8]
 80110a2:	4b21      	ldr	r3, [pc, #132]	; (8011128 <udp_input_local_match+0xc4>)
 80110a4:	685b      	ldr	r3, [r3, #4]
 80110a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80110aa:	3301      	adds	r3, #1
 80110ac:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80110ae:	429a      	cmp	r2, r3
 80110b0:	d001      	beq.n	80110b6 <udp_input_local_match+0x52>
    return 0;
 80110b2:	2300      	movs	r3, #0
 80110b4:	e02b      	b.n	801110e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80110b6:	79fb      	ldrb	r3, [r7, #7]
 80110b8:	2b00      	cmp	r3, #0
 80110ba:	d018      	beq.n	80110ee <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80110bc:	68fb      	ldr	r3, [r7, #12]
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d013      	beq.n	80110ea <udp_input_local_match+0x86>
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	681b      	ldr	r3, [r3, #0]
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d00f      	beq.n	80110ea <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80110ca:	4b17      	ldr	r3, [pc, #92]	; (8011128 <udp_input_local_match+0xc4>)
 80110cc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80110ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110d2:	d00a      	beq.n	80110ea <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	681a      	ldr	r2, [r3, #0]
 80110d8:	4b13      	ldr	r3, [pc, #76]	; (8011128 <udp_input_local_match+0xc4>)
 80110da:	695b      	ldr	r3, [r3, #20]
 80110dc:	405a      	eors	r2, r3
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	3308      	adds	r3, #8
 80110e2:	681b      	ldr	r3, [r3, #0]
 80110e4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80110e6:	2b00      	cmp	r3, #0
 80110e8:	d110      	bne.n	801110c <udp_input_local_match+0xa8>
          return 1;
 80110ea:	2301      	movs	r3, #1
 80110ec:	e00f      	b.n	801110e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d009      	beq.n	8011108 <udp_input_local_match+0xa4>
 80110f4:	68fb      	ldr	r3, [r7, #12]
 80110f6:	681b      	ldr	r3, [r3, #0]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d005      	beq.n	8011108 <udp_input_local_match+0xa4>
 80110fc:	68fb      	ldr	r3, [r7, #12]
 80110fe:	681a      	ldr	r2, [r3, #0]
 8011100:	4b09      	ldr	r3, [pc, #36]	; (8011128 <udp_input_local_match+0xc4>)
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	429a      	cmp	r2, r3
 8011106:	d101      	bne.n	801110c <udp_input_local_match+0xa8>
        return 1;
 8011108:	2301      	movs	r3, #1
 801110a:	e000      	b.n	801110e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801110c:	2300      	movs	r3, #0
}
 801110e:	4618      	mov	r0, r3
 8011110:	3710      	adds	r7, #16
 8011112:	46bd      	mov	sp, r7
 8011114:	bd80      	pop	{r7, pc}
 8011116:	bf00      	nop
 8011118:	08017048 	.word	0x08017048
 801111c:	08017078 	.word	0x08017078
 8011120:	0801709c 	.word	0x0801709c
 8011124:	080170c4 	.word	0x080170c4
 8011128:	20003cc0 	.word	0x20003cc0

0801112c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b08d      	sub	sp, #52	; 0x34
 8011130:	af02      	add	r7, sp, #8
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8011136:	2300      	movs	r3, #0
 8011138:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d105      	bne.n	801114c <udp_input+0x20>
 8011140:	4b7c      	ldr	r3, [pc, #496]	; (8011334 <udp_input+0x208>)
 8011142:	22cf      	movs	r2, #207	; 0xcf
 8011144:	497c      	ldr	r1, [pc, #496]	; (8011338 <udp_input+0x20c>)
 8011146:	487d      	ldr	r0, [pc, #500]	; (801133c <udp_input+0x210>)
 8011148:	f002 ff7c 	bl	8014044 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	2b00      	cmp	r3, #0
 8011150:	d105      	bne.n	801115e <udp_input+0x32>
 8011152:	4b78      	ldr	r3, [pc, #480]	; (8011334 <udp_input+0x208>)
 8011154:	22d0      	movs	r2, #208	; 0xd0
 8011156:	497a      	ldr	r1, [pc, #488]	; (8011340 <udp_input+0x214>)
 8011158:	4878      	ldr	r0, [pc, #480]	; (801133c <udp_input+0x210>)
 801115a:	f002 ff73 	bl	8014044 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801115e:	687b      	ldr	r3, [r7, #4]
 8011160:	895b      	ldrh	r3, [r3, #10]
 8011162:	2b07      	cmp	r3, #7
 8011164:	d803      	bhi.n	801116e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8011166:	6878      	ldr	r0, [r7, #4]
 8011168:	f7fa f9f2 	bl	800b550 <pbuf_free>
    goto end;
 801116c:	e0de      	b.n	801132c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801116e:	687b      	ldr	r3, [r7, #4]
 8011170:	685b      	ldr	r3, [r3, #4]
 8011172:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011174:	4b73      	ldr	r3, [pc, #460]	; (8011344 <udp_input+0x218>)
 8011176:	695b      	ldr	r3, [r3, #20]
 8011178:	4a72      	ldr	r2, [pc, #456]	; (8011344 <udp_input+0x218>)
 801117a:	6812      	ldr	r2, [r2, #0]
 801117c:	4611      	mov	r1, r2
 801117e:	4618      	mov	r0, r3
 8011180:	f001 ffc8 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8011184:	4603      	mov	r3, r0
 8011186:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	881b      	ldrh	r3, [r3, #0]
 801118c:	b29b      	uxth	r3, r3
 801118e:	4618      	mov	r0, r3
 8011190:	f7f8 ff2b 	bl	8009fea <lwip_htons>
 8011194:	4603      	mov	r3, r0
 8011196:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011198:	697b      	ldr	r3, [r7, #20]
 801119a:	885b      	ldrh	r3, [r3, #2]
 801119c:	b29b      	uxth	r3, r3
 801119e:	4618      	mov	r0, r3
 80111a0:	f7f8 ff23 	bl	8009fea <lwip_htons>
 80111a4:	4603      	mov	r3, r0
 80111a6:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80111a8:	2300      	movs	r3, #0
 80111aa:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80111ac:	2300      	movs	r3, #0
 80111ae:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80111b0:	2300      	movs	r3, #0
 80111b2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80111b4:	4b64      	ldr	r3, [pc, #400]	; (8011348 <udp_input+0x21c>)
 80111b6:	681b      	ldr	r3, [r3, #0]
 80111b8:	627b      	str	r3, [r7, #36]	; 0x24
 80111ba:	e054      	b.n	8011266 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80111bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111be:	8a5b      	ldrh	r3, [r3, #18]
 80111c0:	89fa      	ldrh	r2, [r7, #14]
 80111c2:	429a      	cmp	r2, r3
 80111c4:	d14a      	bne.n	801125c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80111c6:	7cfb      	ldrb	r3, [r7, #19]
 80111c8:	461a      	mov	r2, r3
 80111ca:	6839      	ldr	r1, [r7, #0]
 80111cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80111ce:	f7ff ff49 	bl	8011064 <udp_input_local_match>
 80111d2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80111d4:	2b00      	cmp	r3, #0
 80111d6:	d041      	beq.n	801125c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80111d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111da:	7c1b      	ldrb	r3, [r3, #16]
 80111dc:	f003 0304 	and.w	r3, r3, #4
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d11d      	bne.n	8011220 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80111e4:	69fb      	ldr	r3, [r7, #28]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d102      	bne.n	80111f0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80111ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80111ec:	61fb      	str	r3, [r7, #28]
 80111ee:	e017      	b.n	8011220 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80111f0:	7cfb      	ldrb	r3, [r7, #19]
 80111f2:	2b00      	cmp	r3, #0
 80111f4:	d014      	beq.n	8011220 <udp_input+0xf4>
 80111f6:	4b53      	ldr	r3, [pc, #332]	; (8011344 <udp_input+0x218>)
 80111f8:	695b      	ldr	r3, [r3, #20]
 80111fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111fe:	d10f      	bne.n	8011220 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8011200:	69fb      	ldr	r3, [r7, #28]
 8011202:	681a      	ldr	r2, [r3, #0]
 8011204:	683b      	ldr	r3, [r7, #0]
 8011206:	3304      	adds	r3, #4
 8011208:	681b      	ldr	r3, [r3, #0]
 801120a:	429a      	cmp	r2, r3
 801120c:	d008      	beq.n	8011220 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011210:	681a      	ldr	r2, [r3, #0]
 8011212:	683b      	ldr	r3, [r7, #0]
 8011214:	3304      	adds	r3, #4
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	429a      	cmp	r2, r3
 801121a:	d101      	bne.n	8011220 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801121e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8011220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011222:	8a9b      	ldrh	r3, [r3, #20]
 8011224:	8a3a      	ldrh	r2, [r7, #16]
 8011226:	429a      	cmp	r2, r3
 8011228:	d118      	bne.n	801125c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801122c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801122e:	2b00      	cmp	r3, #0
 8011230:	d005      	beq.n	801123e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8011232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011234:	685a      	ldr	r2, [r3, #4]
 8011236:	4b43      	ldr	r3, [pc, #268]	; (8011344 <udp_input+0x218>)
 8011238:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801123a:	429a      	cmp	r2, r3
 801123c:	d10e      	bne.n	801125c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801123e:	6a3b      	ldr	r3, [r7, #32]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d014      	beq.n	801126e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011246:	68da      	ldr	r2, [r3, #12]
 8011248:	6a3b      	ldr	r3, [r7, #32]
 801124a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801124c:	4b3e      	ldr	r3, [pc, #248]	; (8011348 <udp_input+0x21c>)
 801124e:	681a      	ldr	r2, [r3, #0]
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011254:	4a3c      	ldr	r2, [pc, #240]	; (8011348 <udp_input+0x21c>)
 8011256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011258:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801125a:	e008      	b.n	801126e <udp_input+0x142>
      }
    }

    prev = pcb;
 801125c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011262:	68db      	ldr	r3, [r3, #12]
 8011264:	627b      	str	r3, [r7, #36]	; 0x24
 8011266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1a7      	bne.n	80111bc <udp_input+0x90>
 801126c:	e000      	b.n	8011270 <udp_input+0x144>
        break;
 801126e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011272:	2b00      	cmp	r3, #0
 8011274:	d101      	bne.n	801127a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011276:	69fb      	ldr	r3, [r7, #28]
 8011278:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801127a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801127c:	2b00      	cmp	r3, #0
 801127e:	d002      	beq.n	8011286 <udp_input+0x15a>
    for_us = 1;
 8011280:	2301      	movs	r3, #1
 8011282:	76fb      	strb	r3, [r7, #27]
 8011284:	e00a      	b.n	801129c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011286:	683b      	ldr	r3, [r7, #0]
 8011288:	3304      	adds	r3, #4
 801128a:	681a      	ldr	r2, [r3, #0]
 801128c:	4b2d      	ldr	r3, [pc, #180]	; (8011344 <udp_input+0x218>)
 801128e:	695b      	ldr	r3, [r3, #20]
 8011290:	429a      	cmp	r2, r3
 8011292:	bf0c      	ite	eq
 8011294:	2301      	moveq	r3, #1
 8011296:	2300      	movne	r3, #0
 8011298:	b2db      	uxtb	r3, r3
 801129a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801129c:	7efb      	ldrb	r3, [r7, #27]
 801129e:	2b00      	cmp	r3, #0
 80112a0:	d041      	beq.n	8011326 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80112a2:	2108      	movs	r1, #8
 80112a4:	6878      	ldr	r0, [r7, #4]
 80112a6:	f7fa f8cd 	bl	800b444 <pbuf_remove_header>
 80112aa:	4603      	mov	r3, r0
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d00a      	beq.n	80112c6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80112b0:	4b20      	ldr	r3, [pc, #128]	; (8011334 <udp_input+0x208>)
 80112b2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80112b6:	4925      	ldr	r1, [pc, #148]	; (801134c <udp_input+0x220>)
 80112b8:	4820      	ldr	r0, [pc, #128]	; (801133c <udp_input+0x210>)
 80112ba:	f002 fec3 	bl	8014044 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80112be:	6878      	ldr	r0, [r7, #4]
 80112c0:	f7fa f946 	bl	800b550 <pbuf_free>
      goto end;
 80112c4:	e032      	b.n	801132c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80112c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d012      	beq.n	80112f2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	699b      	ldr	r3, [r3, #24]
 80112d0:	2b00      	cmp	r3, #0
 80112d2:	d00a      	beq.n	80112ea <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80112d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112d6:	699c      	ldr	r4, [r3, #24]
 80112d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112da:	69d8      	ldr	r0, [r3, #28]
 80112dc:	8a3b      	ldrh	r3, [r7, #16]
 80112de:	9300      	str	r3, [sp, #0]
 80112e0:	4b1b      	ldr	r3, [pc, #108]	; (8011350 <udp_input+0x224>)
 80112e2:	687a      	ldr	r2, [r7, #4]
 80112e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80112e6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80112e8:	e021      	b.n	801132e <udp_input+0x202>
        pbuf_free(p);
 80112ea:	6878      	ldr	r0, [r7, #4]
 80112ec:	f7fa f930 	bl	800b550 <pbuf_free>
        goto end;
 80112f0:	e01c      	b.n	801132c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80112f2:	7cfb      	ldrb	r3, [r7, #19]
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d112      	bne.n	801131e <udp_input+0x1f2>
 80112f8:	4b12      	ldr	r3, [pc, #72]	; (8011344 <udp_input+0x218>)
 80112fa:	695b      	ldr	r3, [r3, #20]
 80112fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011300:	2be0      	cmp	r3, #224	; 0xe0
 8011302:	d00c      	beq.n	801131e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011304:	4b0f      	ldr	r3, [pc, #60]	; (8011344 <udp_input+0x218>)
 8011306:	899b      	ldrh	r3, [r3, #12]
 8011308:	3308      	adds	r3, #8
 801130a:	b29b      	uxth	r3, r3
 801130c:	b21b      	sxth	r3, r3
 801130e:	4619      	mov	r1, r3
 8011310:	6878      	ldr	r0, [r7, #4]
 8011312:	f7fa f90a 	bl	800b52a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011316:	2103      	movs	r1, #3
 8011318:	6878      	ldr	r0, [r7, #4]
 801131a:	f001 fbdb 	bl	8012ad4 <icmp_dest_unreach>
      pbuf_free(p);
 801131e:	6878      	ldr	r0, [r7, #4]
 8011320:	f7fa f916 	bl	800b550 <pbuf_free>
  return;
 8011324:	e003      	b.n	801132e <udp_input+0x202>
    pbuf_free(p);
 8011326:	6878      	ldr	r0, [r7, #4]
 8011328:	f7fa f912 	bl	800b550 <pbuf_free>
  return;
 801132c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801132e:	372c      	adds	r7, #44	; 0x2c
 8011330:	46bd      	mov	sp, r7
 8011332:	bd90      	pop	{r4, r7, pc}
 8011334:	08017048 	.word	0x08017048
 8011338:	080170ec 	.word	0x080170ec
 801133c:	0801709c 	.word	0x0801709c
 8011340:	08017104 	.word	0x08017104
 8011344:	20003cc0 	.word	0x20003cc0
 8011348:	2000721c 	.word	0x2000721c
 801134c:	08017120 	.word	0x08017120
 8011350:	20003cd0 	.word	0x20003cd0

08011354 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8011354:	b580      	push	{r7, lr}
 8011356:	b082      	sub	sp, #8
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
 801135c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <udp_send+0x24>
 8011364:	4b11      	ldr	r3, [pc, #68]	; (80113ac <udp_send+0x58>)
 8011366:	f240 12d5 	movw	r2, #469	; 0x1d5
 801136a:	4911      	ldr	r1, [pc, #68]	; (80113b0 <udp_send+0x5c>)
 801136c:	4811      	ldr	r0, [pc, #68]	; (80113b4 <udp_send+0x60>)
 801136e:	f002 fe69 	bl	8014044 <iprintf>
 8011372:	f06f 030f 	mvn.w	r3, #15
 8011376:	e015      	b.n	80113a4 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8011378:	683b      	ldr	r3, [r7, #0]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d109      	bne.n	8011392 <udp_send+0x3e>
 801137e:	4b0b      	ldr	r3, [pc, #44]	; (80113ac <udp_send+0x58>)
 8011380:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011384:	490c      	ldr	r1, [pc, #48]	; (80113b8 <udp_send+0x64>)
 8011386:	480b      	ldr	r0, [pc, #44]	; (80113b4 <udp_send+0x60>)
 8011388:	f002 fe5c 	bl	8014044 <iprintf>
 801138c:	f06f 030f 	mvn.w	r3, #15
 8011390:	e008      	b.n	80113a4 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	1d1a      	adds	r2, r3, #4
 8011396:	687b      	ldr	r3, [r7, #4]
 8011398:	8a9b      	ldrh	r3, [r3, #20]
 801139a:	6839      	ldr	r1, [r7, #0]
 801139c:	6878      	ldr	r0, [r7, #4]
 801139e:	f000 f80d 	bl	80113bc <udp_sendto>
 80113a2:	4603      	mov	r3, r0
}
 80113a4:	4618      	mov	r0, r3
 80113a6:	3708      	adds	r7, #8
 80113a8:	46bd      	mov	sp, r7
 80113aa:	bd80      	pop	{r7, pc}
 80113ac:	08017048 	.word	0x08017048
 80113b0:	0801713c 	.word	0x0801713c
 80113b4:	0801709c 	.word	0x0801709c
 80113b8:	08017154 	.word	0x08017154

080113bc <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b088      	sub	sp, #32
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	60f8      	str	r0, [r7, #12]
 80113c4:	60b9      	str	r1, [r7, #8]
 80113c6:	607a      	str	r2, [r7, #4]
 80113c8:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d109      	bne.n	80113e4 <udp_sendto+0x28>
 80113d0:	4b23      	ldr	r3, [pc, #140]	; (8011460 <udp_sendto+0xa4>)
 80113d2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80113d6:	4923      	ldr	r1, [pc, #140]	; (8011464 <udp_sendto+0xa8>)
 80113d8:	4823      	ldr	r0, [pc, #140]	; (8011468 <udp_sendto+0xac>)
 80113da:	f002 fe33 	bl	8014044 <iprintf>
 80113de:	f06f 030f 	mvn.w	r3, #15
 80113e2:	e038      	b.n	8011456 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d109      	bne.n	80113fe <udp_sendto+0x42>
 80113ea:	4b1d      	ldr	r3, [pc, #116]	; (8011460 <udp_sendto+0xa4>)
 80113ec:	f240 2219 	movw	r2, #537	; 0x219
 80113f0:	491e      	ldr	r1, [pc, #120]	; (801146c <udp_sendto+0xb0>)
 80113f2:	481d      	ldr	r0, [pc, #116]	; (8011468 <udp_sendto+0xac>)
 80113f4:	f002 fe26 	bl	8014044 <iprintf>
 80113f8:	f06f 030f 	mvn.w	r3, #15
 80113fc:	e02b      	b.n	8011456 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80113fe:	687b      	ldr	r3, [r7, #4]
 8011400:	2b00      	cmp	r3, #0
 8011402:	d109      	bne.n	8011418 <udp_sendto+0x5c>
 8011404:	4b16      	ldr	r3, [pc, #88]	; (8011460 <udp_sendto+0xa4>)
 8011406:	f240 221a 	movw	r2, #538	; 0x21a
 801140a:	4919      	ldr	r1, [pc, #100]	; (8011470 <udp_sendto+0xb4>)
 801140c:	4816      	ldr	r0, [pc, #88]	; (8011468 <udp_sendto+0xac>)
 801140e:	f002 fe19 	bl	8014044 <iprintf>
 8011412:	f06f 030f 	mvn.w	r3, #15
 8011416:	e01e      	b.n	8011456 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	7a1b      	ldrb	r3, [r3, #8]
 801141c:	2b00      	cmp	r3, #0
 801141e:	d006      	beq.n	801142e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	7a1b      	ldrb	r3, [r3, #8]
 8011424:	4618      	mov	r0, r3
 8011426:	f7f9 fd33 	bl	800ae90 <netif_get_by_index>
 801142a:	6178      	str	r0, [r7, #20]
 801142c:	e003      	b.n	8011436 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801142e:	6878      	ldr	r0, [r7, #4]
 8011430:	f001 fbda 	bl	8012be8 <ip4_route>
 8011434:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	2b00      	cmp	r3, #0
 801143a:	d102      	bne.n	8011442 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801143c:	f06f 0303 	mvn.w	r3, #3
 8011440:	e009      	b.n	8011456 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011442:	887a      	ldrh	r2, [r7, #2]
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	4613      	mov	r3, r2
 801144a:	687a      	ldr	r2, [r7, #4]
 801144c:	68b9      	ldr	r1, [r7, #8]
 801144e:	68f8      	ldr	r0, [r7, #12]
 8011450:	f000 f810 	bl	8011474 <udp_sendto_if>
 8011454:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011456:	4618      	mov	r0, r3
 8011458:	3718      	adds	r7, #24
 801145a:	46bd      	mov	sp, r7
 801145c:	bd80      	pop	{r7, pc}
 801145e:	bf00      	nop
 8011460:	08017048 	.word	0x08017048
 8011464:	0801716c 	.word	0x0801716c
 8011468:	0801709c 	.word	0x0801709c
 801146c:	08017184 	.word	0x08017184
 8011470:	080171a0 	.word	0x080171a0

08011474 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011474:	b580      	push	{r7, lr}
 8011476:	b088      	sub	sp, #32
 8011478:	af02      	add	r7, sp, #8
 801147a:	60f8      	str	r0, [r7, #12]
 801147c:	60b9      	str	r1, [r7, #8]
 801147e:	607a      	str	r2, [r7, #4]
 8011480:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d109      	bne.n	801149c <udp_sendto_if+0x28>
 8011488:	4b2e      	ldr	r3, [pc, #184]	; (8011544 <udp_sendto_if+0xd0>)
 801148a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801148e:	492e      	ldr	r1, [pc, #184]	; (8011548 <udp_sendto_if+0xd4>)
 8011490:	482e      	ldr	r0, [pc, #184]	; (801154c <udp_sendto_if+0xd8>)
 8011492:	f002 fdd7 	bl	8014044 <iprintf>
 8011496:	f06f 030f 	mvn.w	r3, #15
 801149a:	e04f      	b.n	801153c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801149c:	68bb      	ldr	r3, [r7, #8]
 801149e:	2b00      	cmp	r3, #0
 80114a0:	d109      	bne.n	80114b6 <udp_sendto_if+0x42>
 80114a2:	4b28      	ldr	r3, [pc, #160]	; (8011544 <udp_sendto_if+0xd0>)
 80114a4:	f240 2281 	movw	r2, #641	; 0x281
 80114a8:	4929      	ldr	r1, [pc, #164]	; (8011550 <udp_sendto_if+0xdc>)
 80114aa:	4828      	ldr	r0, [pc, #160]	; (801154c <udp_sendto_if+0xd8>)
 80114ac:	f002 fdca 	bl	8014044 <iprintf>
 80114b0:	f06f 030f 	mvn.w	r3, #15
 80114b4:	e042      	b.n	801153c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d109      	bne.n	80114d0 <udp_sendto_if+0x5c>
 80114bc:	4b21      	ldr	r3, [pc, #132]	; (8011544 <udp_sendto_if+0xd0>)
 80114be:	f240 2282 	movw	r2, #642	; 0x282
 80114c2:	4924      	ldr	r1, [pc, #144]	; (8011554 <udp_sendto_if+0xe0>)
 80114c4:	4821      	ldr	r0, [pc, #132]	; (801154c <udp_sendto_if+0xd8>)
 80114c6:	f002 fdbd 	bl	8014044 <iprintf>
 80114ca:	f06f 030f 	mvn.w	r3, #15
 80114ce:	e035      	b.n	801153c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80114d0:	6a3b      	ldr	r3, [r7, #32]
 80114d2:	2b00      	cmp	r3, #0
 80114d4:	d109      	bne.n	80114ea <udp_sendto_if+0x76>
 80114d6:	4b1b      	ldr	r3, [pc, #108]	; (8011544 <udp_sendto_if+0xd0>)
 80114d8:	f240 2283 	movw	r2, #643	; 0x283
 80114dc:	491e      	ldr	r1, [pc, #120]	; (8011558 <udp_sendto_if+0xe4>)
 80114de:	481b      	ldr	r0, [pc, #108]	; (801154c <udp_sendto_if+0xd8>)
 80114e0:	f002 fdb0 	bl	8014044 <iprintf>
 80114e4:	f06f 030f 	mvn.w	r3, #15
 80114e8:	e028      	b.n	801153c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d009      	beq.n	8011504 <udp_sendto_if+0x90>
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d005      	beq.n	8011504 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011500:	2be0      	cmp	r3, #224	; 0xe0
 8011502:	d103      	bne.n	801150c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011504:	6a3b      	ldr	r3, [r7, #32]
 8011506:	3304      	adds	r3, #4
 8011508:	617b      	str	r3, [r7, #20]
 801150a:	e00b      	b.n	8011524 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681a      	ldr	r2, [r3, #0]
 8011510:	6a3b      	ldr	r3, [r7, #32]
 8011512:	3304      	adds	r3, #4
 8011514:	681b      	ldr	r3, [r3, #0]
 8011516:	429a      	cmp	r2, r3
 8011518:	d002      	beq.n	8011520 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801151a:	f06f 0303 	mvn.w	r3, #3
 801151e:	e00d      	b.n	801153c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011524:	887a      	ldrh	r2, [r7, #2]
 8011526:	697b      	ldr	r3, [r7, #20]
 8011528:	9301      	str	r3, [sp, #4]
 801152a:	6a3b      	ldr	r3, [r7, #32]
 801152c:	9300      	str	r3, [sp, #0]
 801152e:	4613      	mov	r3, r2
 8011530:	687a      	ldr	r2, [r7, #4]
 8011532:	68b9      	ldr	r1, [r7, #8]
 8011534:	68f8      	ldr	r0, [r7, #12]
 8011536:	f000 f811 	bl	801155c <udp_sendto_if_src>
 801153a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801153c:	4618      	mov	r0, r3
 801153e:	3718      	adds	r7, #24
 8011540:	46bd      	mov	sp, r7
 8011542:	bd80      	pop	{r7, pc}
 8011544:	08017048 	.word	0x08017048
 8011548:	080171bc 	.word	0x080171bc
 801154c:	0801709c 	.word	0x0801709c
 8011550:	080171d8 	.word	0x080171d8
 8011554:	080171f4 	.word	0x080171f4
 8011558:	08017214 	.word	0x08017214

0801155c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801155c:	b580      	push	{r7, lr}
 801155e:	b08c      	sub	sp, #48	; 0x30
 8011560:	af04      	add	r7, sp, #16
 8011562:	60f8      	str	r0, [r7, #12]
 8011564:	60b9      	str	r1, [r7, #8]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d109      	bne.n	8011584 <udp_sendto_if_src+0x28>
 8011570:	4b65      	ldr	r3, [pc, #404]	; (8011708 <udp_sendto_if_src+0x1ac>)
 8011572:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011576:	4965      	ldr	r1, [pc, #404]	; (801170c <udp_sendto_if_src+0x1b0>)
 8011578:	4865      	ldr	r0, [pc, #404]	; (8011710 <udp_sendto_if_src+0x1b4>)
 801157a:	f002 fd63 	bl	8014044 <iprintf>
 801157e:	f06f 030f 	mvn.w	r3, #15
 8011582:	e0bc      	b.n	80116fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d109      	bne.n	801159e <udp_sendto_if_src+0x42>
 801158a:	4b5f      	ldr	r3, [pc, #380]	; (8011708 <udp_sendto_if_src+0x1ac>)
 801158c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011590:	4960      	ldr	r1, [pc, #384]	; (8011714 <udp_sendto_if_src+0x1b8>)
 8011592:	485f      	ldr	r0, [pc, #380]	; (8011710 <udp_sendto_if_src+0x1b4>)
 8011594:	f002 fd56 	bl	8014044 <iprintf>
 8011598:	f06f 030f 	mvn.w	r3, #15
 801159c:	e0af      	b.n	80116fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	2b00      	cmp	r3, #0
 80115a2:	d109      	bne.n	80115b8 <udp_sendto_if_src+0x5c>
 80115a4:	4b58      	ldr	r3, [pc, #352]	; (8011708 <udp_sendto_if_src+0x1ac>)
 80115a6:	f240 22d3 	movw	r2, #723	; 0x2d3
 80115aa:	495b      	ldr	r1, [pc, #364]	; (8011718 <udp_sendto_if_src+0x1bc>)
 80115ac:	4858      	ldr	r0, [pc, #352]	; (8011710 <udp_sendto_if_src+0x1b4>)
 80115ae:	f002 fd49 	bl	8014044 <iprintf>
 80115b2:	f06f 030f 	mvn.w	r3, #15
 80115b6:	e0a2      	b.n	80116fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 80115b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d109      	bne.n	80115d2 <udp_sendto_if_src+0x76>
 80115be:	4b52      	ldr	r3, [pc, #328]	; (8011708 <udp_sendto_if_src+0x1ac>)
 80115c0:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 80115c4:	4955      	ldr	r1, [pc, #340]	; (801171c <udp_sendto_if_src+0x1c0>)
 80115c6:	4852      	ldr	r0, [pc, #328]	; (8011710 <udp_sendto_if_src+0x1b4>)
 80115c8:	f002 fd3c 	bl	8014044 <iprintf>
 80115cc:	f06f 030f 	mvn.w	r3, #15
 80115d0:	e095      	b.n	80116fe <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80115d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115d4:	2b00      	cmp	r3, #0
 80115d6:	d109      	bne.n	80115ec <udp_sendto_if_src+0x90>
 80115d8:	4b4b      	ldr	r3, [pc, #300]	; (8011708 <udp_sendto_if_src+0x1ac>)
 80115da:	f240 22d5 	movw	r2, #725	; 0x2d5
 80115de:	4950      	ldr	r1, [pc, #320]	; (8011720 <udp_sendto_if_src+0x1c4>)
 80115e0:	484b      	ldr	r0, [pc, #300]	; (8011710 <udp_sendto_if_src+0x1b4>)
 80115e2:	f002 fd2f 	bl	8014044 <iprintf>
 80115e6:	f06f 030f 	mvn.w	r3, #15
 80115ea:	e088      	b.n	80116fe <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8a5b      	ldrh	r3, [r3, #18]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d10f      	bne.n	8011614 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80115f4:	68f9      	ldr	r1, [r7, #12]
 80115f6:	68fb      	ldr	r3, [r7, #12]
 80115f8:	8a5b      	ldrh	r3, [r3, #18]
 80115fa:	461a      	mov	r2, r3
 80115fc:	68f8      	ldr	r0, [r7, #12]
 80115fe:	f000 f893 	bl	8011728 <udp_bind>
 8011602:	4603      	mov	r3, r0
 8011604:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011606:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801160a:	2b00      	cmp	r3, #0
 801160c:	d002      	beq.n	8011614 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801160e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011612:	e074      	b.n	80116fe <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011614:	68bb      	ldr	r3, [r7, #8]
 8011616:	891b      	ldrh	r3, [r3, #8]
 8011618:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801161c:	4293      	cmp	r3, r2
 801161e:	d902      	bls.n	8011626 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011620:	f04f 33ff 	mov.w	r3, #4294967295
 8011624:	e06b      	b.n	80116fe <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011626:	2108      	movs	r1, #8
 8011628:	68b8      	ldr	r0, [r7, #8]
 801162a:	f7f9 fefb 	bl	800b424 <pbuf_add_header>
 801162e:	4603      	mov	r3, r0
 8011630:	2b00      	cmp	r3, #0
 8011632:	d015      	beq.n	8011660 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011634:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011638:	2108      	movs	r1, #8
 801163a:	2022      	movs	r0, #34	; 0x22
 801163c:	f7f9 fca4 	bl	800af88 <pbuf_alloc>
 8011640:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011642:	69fb      	ldr	r3, [r7, #28]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d102      	bne.n	801164e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011648:	f04f 33ff 	mov.w	r3, #4294967295
 801164c:	e057      	b.n	80116fe <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801164e:	68bb      	ldr	r3, [r7, #8]
 8011650:	891b      	ldrh	r3, [r3, #8]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d006      	beq.n	8011664 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011656:	68b9      	ldr	r1, [r7, #8]
 8011658:	69f8      	ldr	r0, [r7, #28]
 801165a:	f7fa f891 	bl	800b780 <pbuf_chain>
 801165e:	e001      	b.n	8011664 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011660:	68bb      	ldr	r3, [r7, #8]
 8011662:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011664:	69fb      	ldr	r3, [r7, #28]
 8011666:	895b      	ldrh	r3, [r3, #10]
 8011668:	2b07      	cmp	r3, #7
 801166a:	d806      	bhi.n	801167a <udp_sendto_if_src+0x11e>
 801166c:	4b26      	ldr	r3, [pc, #152]	; (8011708 <udp_sendto_if_src+0x1ac>)
 801166e:	f240 320d 	movw	r2, #781	; 0x30d
 8011672:	492c      	ldr	r1, [pc, #176]	; (8011724 <udp_sendto_if_src+0x1c8>)
 8011674:	4826      	ldr	r0, [pc, #152]	; (8011710 <udp_sendto_if_src+0x1b4>)
 8011676:	f002 fce5 	bl	8014044 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801167a:	69fb      	ldr	r3, [r7, #28]
 801167c:	685b      	ldr	r3, [r3, #4]
 801167e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	8a5b      	ldrh	r3, [r3, #18]
 8011684:	4618      	mov	r0, r3
 8011686:	f7f8 fcb0 	bl	8009fea <lwip_htons>
 801168a:	4603      	mov	r3, r0
 801168c:	461a      	mov	r2, r3
 801168e:	697b      	ldr	r3, [r7, #20]
 8011690:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011692:	887b      	ldrh	r3, [r7, #2]
 8011694:	4618      	mov	r0, r3
 8011696:	f7f8 fca8 	bl	8009fea <lwip_htons>
 801169a:	4603      	mov	r3, r0
 801169c:	461a      	mov	r2, r3
 801169e:	697b      	ldr	r3, [r7, #20]
 80116a0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2200      	movs	r2, #0
 80116a6:	719a      	strb	r2, [r3, #6]
 80116a8:	2200      	movs	r2, #0
 80116aa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 80116ac:	69fb      	ldr	r3, [r7, #28]
 80116ae:	891b      	ldrh	r3, [r3, #8]
 80116b0:	4618      	mov	r0, r3
 80116b2:	f7f8 fc9a 	bl	8009fea <lwip_htons>
 80116b6:	4603      	mov	r3, r0
 80116b8:	461a      	mov	r2, r3
 80116ba:	697b      	ldr	r3, [r7, #20]
 80116bc:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 80116be:	2311      	movs	r3, #17
 80116c0:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	7adb      	ldrb	r3, [r3, #11]
 80116c6:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	7a9b      	ldrb	r3, [r3, #10]
 80116cc:	7cb9      	ldrb	r1, [r7, #18]
 80116ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80116d0:	9202      	str	r2, [sp, #8]
 80116d2:	7cfa      	ldrb	r2, [r7, #19]
 80116d4:	9201      	str	r2, [sp, #4]
 80116d6:	9300      	str	r3, [sp, #0]
 80116d8:	460b      	mov	r3, r1
 80116da:	687a      	ldr	r2, [r7, #4]
 80116dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80116de:	69f8      	ldr	r0, [r7, #28]
 80116e0:	f001 fc6a 	bl	8012fb8 <ip4_output_if_src>
 80116e4:	4603      	mov	r3, r0
 80116e6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80116e8:	69fa      	ldr	r2, [r7, #28]
 80116ea:	68bb      	ldr	r3, [r7, #8]
 80116ec:	429a      	cmp	r2, r3
 80116ee:	d004      	beq.n	80116fa <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80116f0:	69f8      	ldr	r0, [r7, #28]
 80116f2:	f7f9 ff2d 	bl	800b550 <pbuf_free>
    q = NULL;
 80116f6:	2300      	movs	r3, #0
 80116f8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80116fa:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80116fe:	4618      	mov	r0, r3
 8011700:	3720      	adds	r7, #32
 8011702:	46bd      	mov	sp, r7
 8011704:	bd80      	pop	{r7, pc}
 8011706:	bf00      	nop
 8011708:	08017048 	.word	0x08017048
 801170c:	08017234 	.word	0x08017234
 8011710:	0801709c 	.word	0x0801709c
 8011714:	08017254 	.word	0x08017254
 8011718:	08017274 	.word	0x08017274
 801171c:	08017298 	.word	0x08017298
 8011720:	080172bc 	.word	0x080172bc
 8011724:	080172e0 	.word	0x080172e0

08011728 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b086      	sub	sp, #24
 801172c:	af00      	add	r7, sp, #0
 801172e:	60f8      	str	r0, [r7, #12]
 8011730:	60b9      	str	r1, [r7, #8]
 8011732:	4613      	mov	r3, r2
 8011734:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011736:	68bb      	ldr	r3, [r7, #8]
 8011738:	2b00      	cmp	r3, #0
 801173a:	d101      	bne.n	8011740 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801173c:	4b39      	ldr	r3, [pc, #228]	; (8011824 <udp_bind+0xfc>)
 801173e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	2b00      	cmp	r3, #0
 8011744:	d109      	bne.n	801175a <udp_bind+0x32>
 8011746:	4b38      	ldr	r3, [pc, #224]	; (8011828 <udp_bind+0x100>)
 8011748:	f240 32b7 	movw	r2, #951	; 0x3b7
 801174c:	4937      	ldr	r1, [pc, #220]	; (801182c <udp_bind+0x104>)
 801174e:	4838      	ldr	r0, [pc, #224]	; (8011830 <udp_bind+0x108>)
 8011750:	f002 fc78 	bl	8014044 <iprintf>
 8011754:	f06f 030f 	mvn.w	r3, #15
 8011758:	e060      	b.n	801181c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801175a:	2300      	movs	r3, #0
 801175c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801175e:	4b35      	ldr	r3, [pc, #212]	; (8011834 <udp_bind+0x10c>)
 8011760:	681b      	ldr	r3, [r3, #0]
 8011762:	617b      	str	r3, [r7, #20]
 8011764:	e009      	b.n	801177a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011766:	68fa      	ldr	r2, [r7, #12]
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	429a      	cmp	r2, r3
 801176c:	d102      	bne.n	8011774 <udp_bind+0x4c>
      rebind = 1;
 801176e:	2301      	movs	r3, #1
 8011770:	74fb      	strb	r3, [r7, #19]
      break;
 8011772:	e005      	b.n	8011780 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011774:	697b      	ldr	r3, [r7, #20]
 8011776:	68db      	ldr	r3, [r3, #12]
 8011778:	617b      	str	r3, [r7, #20]
 801177a:	697b      	ldr	r3, [r7, #20]
 801177c:	2b00      	cmp	r3, #0
 801177e:	d1f2      	bne.n	8011766 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011780:	88fb      	ldrh	r3, [r7, #6]
 8011782:	2b00      	cmp	r3, #0
 8011784:	d109      	bne.n	801179a <udp_bind+0x72>
    port = udp_new_port();
 8011786:	f7ff fc35 	bl	8010ff4 <udp_new_port>
 801178a:	4603      	mov	r3, r0
 801178c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801178e:	88fb      	ldrh	r3, [r7, #6]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d12c      	bne.n	80117ee <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011794:	f06f 0307 	mvn.w	r3, #7
 8011798:	e040      	b.n	801181c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801179a:	4b26      	ldr	r3, [pc, #152]	; (8011834 <udp_bind+0x10c>)
 801179c:	681b      	ldr	r3, [r3, #0]
 801179e:	617b      	str	r3, [r7, #20]
 80117a0:	e022      	b.n	80117e8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 80117a2:	68fa      	ldr	r2, [r7, #12]
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	429a      	cmp	r2, r3
 80117a8:	d01b      	beq.n	80117e2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 80117aa:	697b      	ldr	r3, [r7, #20]
 80117ac:	8a5b      	ldrh	r3, [r3, #18]
 80117ae:	88fa      	ldrh	r2, [r7, #6]
 80117b0:	429a      	cmp	r2, r3
 80117b2:	d116      	bne.n	80117e2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80117b4:	697b      	ldr	r3, [r7, #20]
 80117b6:	681a      	ldr	r2, [r3, #0]
 80117b8:	68bb      	ldr	r3, [r7, #8]
 80117ba:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 80117bc:	429a      	cmp	r2, r3
 80117be:	d00d      	beq.n	80117dc <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80117c0:	68bb      	ldr	r3, [r7, #8]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	d00a      	beq.n	80117dc <udp_bind+0xb4>
 80117c6:	68bb      	ldr	r3, [r7, #8]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d006      	beq.n	80117dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80117ce:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d003      	beq.n	80117dc <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80117d4:	697b      	ldr	r3, [r7, #20]
 80117d6:	681b      	ldr	r3, [r3, #0]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d102      	bne.n	80117e2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80117dc:	f06f 0307 	mvn.w	r3, #7
 80117e0:	e01c      	b.n	801181c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	617b      	str	r3, [r7, #20]
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	2b00      	cmp	r3, #0
 80117ec:	d1d9      	bne.n	80117a2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80117ee:	68bb      	ldr	r3, [r7, #8]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d002      	beq.n	80117fa <udp_bind+0xd2>
 80117f4:	68bb      	ldr	r3, [r7, #8]
 80117f6:	681b      	ldr	r3, [r3, #0]
 80117f8:	e000      	b.n	80117fc <udp_bind+0xd4>
 80117fa:	2300      	movs	r3, #0
 80117fc:	68fa      	ldr	r2, [r7, #12]
 80117fe:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011800:	68fb      	ldr	r3, [r7, #12]
 8011802:	88fa      	ldrh	r2, [r7, #6]
 8011804:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011806:	7cfb      	ldrb	r3, [r7, #19]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d106      	bne.n	801181a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801180c:	4b09      	ldr	r3, [pc, #36]	; (8011834 <udp_bind+0x10c>)
 801180e:	681a      	ldr	r2, [r3, #0]
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011814:	4a07      	ldr	r2, [pc, #28]	; (8011834 <udp_bind+0x10c>)
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801181a:	2300      	movs	r3, #0
}
 801181c:	4618      	mov	r0, r3
 801181e:	3718      	adds	r7, #24
 8011820:	46bd      	mov	sp, r7
 8011822:	bd80      	pop	{r7, pc}
 8011824:	08017b74 	.word	0x08017b74
 8011828:	08017048 	.word	0x08017048
 801182c:	08017310 	.word	0x08017310
 8011830:	0801709c 	.word	0x0801709c
 8011834:	2000721c 	.word	0x2000721c

08011838 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011838:	b580      	push	{r7, lr}
 801183a:	b086      	sub	sp, #24
 801183c:	af00      	add	r7, sp, #0
 801183e:	60f8      	str	r0, [r7, #12]
 8011840:	60b9      	str	r1, [r7, #8]
 8011842:	4613      	mov	r3, r2
 8011844:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2b00      	cmp	r3, #0
 801184a:	d109      	bne.n	8011860 <udp_connect+0x28>
 801184c:	4b2c      	ldr	r3, [pc, #176]	; (8011900 <udp_connect+0xc8>)
 801184e:	f240 4235 	movw	r2, #1077	; 0x435
 8011852:	492c      	ldr	r1, [pc, #176]	; (8011904 <udp_connect+0xcc>)
 8011854:	482c      	ldr	r0, [pc, #176]	; (8011908 <udp_connect+0xd0>)
 8011856:	f002 fbf5 	bl	8014044 <iprintf>
 801185a:	f06f 030f 	mvn.w	r3, #15
 801185e:	e04b      	b.n	80118f8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011860:	68bb      	ldr	r3, [r7, #8]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d109      	bne.n	801187a <udp_connect+0x42>
 8011866:	4b26      	ldr	r3, [pc, #152]	; (8011900 <udp_connect+0xc8>)
 8011868:	f240 4236 	movw	r2, #1078	; 0x436
 801186c:	4927      	ldr	r1, [pc, #156]	; (801190c <udp_connect+0xd4>)
 801186e:	4826      	ldr	r0, [pc, #152]	; (8011908 <udp_connect+0xd0>)
 8011870:	f002 fbe8 	bl	8014044 <iprintf>
 8011874:	f06f 030f 	mvn.w	r3, #15
 8011878:	e03e      	b.n	80118f8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	8a5b      	ldrh	r3, [r3, #18]
 801187e:	2b00      	cmp	r3, #0
 8011880:	d10f      	bne.n	80118a2 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011882:	68f9      	ldr	r1, [r7, #12]
 8011884:	68fb      	ldr	r3, [r7, #12]
 8011886:	8a5b      	ldrh	r3, [r3, #18]
 8011888:	461a      	mov	r2, r3
 801188a:	68f8      	ldr	r0, [r7, #12]
 801188c:	f7ff ff4c 	bl	8011728 <udp_bind>
 8011890:	4603      	mov	r3, r0
 8011892:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011894:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <udp_connect+0x6a>
      return err;
 801189c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80118a0:	e02a      	b.n	80118f8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 80118a2:	68bb      	ldr	r3, [r7, #8]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d002      	beq.n	80118ae <udp_connect+0x76>
 80118a8:	68bb      	ldr	r3, [r7, #8]
 80118aa:	681b      	ldr	r3, [r3, #0]
 80118ac:	e000      	b.n	80118b0 <udp_connect+0x78>
 80118ae:	2300      	movs	r3, #0
 80118b0:	68fa      	ldr	r2, [r7, #12]
 80118b2:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	88fa      	ldrh	r2, [r7, #6]
 80118b8:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	7c1b      	ldrb	r3, [r3, #16]
 80118be:	f043 0304 	orr.w	r3, r3, #4
 80118c2:	b2da      	uxtb	r2, r3
 80118c4:	68fb      	ldr	r3, [r7, #12]
 80118c6:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118c8:	4b11      	ldr	r3, [pc, #68]	; (8011910 <udp_connect+0xd8>)
 80118ca:	681b      	ldr	r3, [r3, #0]
 80118cc:	617b      	str	r3, [r7, #20]
 80118ce:	e008      	b.n	80118e2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80118d0:	68fa      	ldr	r2, [r7, #12]
 80118d2:	697b      	ldr	r3, [r7, #20]
 80118d4:	429a      	cmp	r2, r3
 80118d6:	d101      	bne.n	80118dc <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80118d8:	2300      	movs	r3, #0
 80118da:	e00d      	b.n	80118f8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80118dc:	697b      	ldr	r3, [r7, #20]
 80118de:	68db      	ldr	r3, [r3, #12]
 80118e0:	617b      	str	r3, [r7, #20]
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d1f3      	bne.n	80118d0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80118e8:	4b09      	ldr	r3, [pc, #36]	; (8011910 <udp_connect+0xd8>)
 80118ea:	681a      	ldr	r2, [r3, #0]
 80118ec:	68fb      	ldr	r3, [r7, #12]
 80118ee:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80118f0:	4a07      	ldr	r2, [pc, #28]	; (8011910 <udp_connect+0xd8>)
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80118f6:	2300      	movs	r3, #0
}
 80118f8:	4618      	mov	r0, r3
 80118fa:	3718      	adds	r7, #24
 80118fc:	46bd      	mov	sp, r7
 80118fe:	bd80      	pop	{r7, pc}
 8011900:	08017048 	.word	0x08017048
 8011904:	08017328 	.word	0x08017328
 8011908:	0801709c 	.word	0x0801709c
 801190c:	08017344 	.word	0x08017344
 8011910:	2000721c 	.word	0x2000721c

08011914 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 8011914:	b580      	push	{r7, lr}
 8011916:	b082      	sub	sp, #8
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d107      	bne.n	8011932 <udp_disconnect+0x1e>
 8011922:	4b0d      	ldr	r3, [pc, #52]	; (8011958 <udp_disconnect+0x44>)
 8011924:	f240 426a 	movw	r2, #1130	; 0x46a
 8011928:	490c      	ldr	r1, [pc, #48]	; (801195c <udp_disconnect+0x48>)
 801192a:	480d      	ldr	r0, [pc, #52]	; (8011960 <udp_disconnect+0x4c>)
 801192c:	f002 fb8a 	bl	8014044 <iprintf>
 8011930:	e00f      	b.n	8011952 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	2200      	movs	r2, #0
 8011936:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	2200      	movs	r2, #0
 801193c:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2200      	movs	r2, #0
 8011942:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	7c1b      	ldrb	r3, [r3, #16]
 8011948:	f023 0304 	bic.w	r3, r3, #4
 801194c:	b2da      	uxtb	r2, r3
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	741a      	strb	r2, [r3, #16]
}
 8011952:	3708      	adds	r7, #8
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}
 8011958:	08017048 	.word	0x08017048
 801195c:	08017360 	.word	0x08017360
 8011960:	0801709c 	.word	0x0801709c

08011964 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011964:	b580      	push	{r7, lr}
 8011966:	b084      	sub	sp, #16
 8011968:	af00      	add	r7, sp, #0
 801196a:	60f8      	str	r0, [r7, #12]
 801196c:	60b9      	str	r1, [r7, #8]
 801196e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011970:	68fb      	ldr	r3, [r7, #12]
 8011972:	2b00      	cmp	r3, #0
 8011974:	d107      	bne.n	8011986 <udp_recv+0x22>
 8011976:	4b08      	ldr	r3, [pc, #32]	; (8011998 <udp_recv+0x34>)
 8011978:	f240 428a 	movw	r2, #1162	; 0x48a
 801197c:	4907      	ldr	r1, [pc, #28]	; (801199c <udp_recv+0x38>)
 801197e:	4808      	ldr	r0, [pc, #32]	; (80119a0 <udp_recv+0x3c>)
 8011980:	f002 fb60 	bl	8014044 <iprintf>
 8011984:	e005      	b.n	8011992 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	68ba      	ldr	r2, [r7, #8]
 801198a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	687a      	ldr	r2, [r7, #4]
 8011990:	61da      	str	r2, [r3, #28]
}
 8011992:	3710      	adds	r7, #16
 8011994:	46bd      	mov	sp, r7
 8011996:	bd80      	pop	{r7, pc}
 8011998:	08017048 	.word	0x08017048
 801199c:	0801737c 	.word	0x0801737c
 80119a0:	0801709c 	.word	0x0801709c

080119a4 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80119a4:	b580      	push	{r7, lr}
 80119a6:	b082      	sub	sp, #8
 80119a8:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80119aa:	2000      	movs	r0, #0
 80119ac:	f7f8 ff72 	bl	800a894 <memp_malloc>
 80119b0:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	2b00      	cmp	r3, #0
 80119b6:	d007      	beq.n	80119c8 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80119b8:	2220      	movs	r2, #32
 80119ba:	2100      	movs	r1, #0
 80119bc:	6878      	ldr	r0, [r7, #4]
 80119be:	f002 fb39 	bl	8014034 <memset>
    pcb->ttl = UDP_TTL;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	22ff      	movs	r2, #255	; 0xff
 80119c6:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80119c8:	687b      	ldr	r3, [r7, #4]
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3708      	adds	r7, #8
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd80      	pop	{r7, pc}
	...

080119d4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80119d4:	b480      	push	{r7}
 80119d6:	b085      	sub	sp, #20
 80119d8:	af00      	add	r7, sp, #0
 80119da:	6078      	str	r0, [r7, #4]
 80119dc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80119de:	687b      	ldr	r3, [r7, #4]
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	d01e      	beq.n	8011a22 <udp_netif_ip_addr_changed+0x4e>
 80119e4:	687b      	ldr	r3, [r7, #4]
 80119e6:	681b      	ldr	r3, [r3, #0]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	d01a      	beq.n	8011a22 <udp_netif_ip_addr_changed+0x4e>
 80119ec:	683b      	ldr	r3, [r7, #0]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d017      	beq.n	8011a22 <udp_netif_ip_addr_changed+0x4e>
 80119f2:	683b      	ldr	r3, [r7, #0]
 80119f4:	681b      	ldr	r3, [r3, #0]
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d013      	beq.n	8011a22 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80119fa:	4b0d      	ldr	r3, [pc, #52]	; (8011a30 <udp_netif_ip_addr_changed+0x5c>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	60fb      	str	r3, [r7, #12]
 8011a00:	e00c      	b.n	8011a1c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011a02:	68fb      	ldr	r3, [r7, #12]
 8011a04:	681a      	ldr	r2, [r3, #0]
 8011a06:	687b      	ldr	r3, [r7, #4]
 8011a08:	681b      	ldr	r3, [r3, #0]
 8011a0a:	429a      	cmp	r2, r3
 8011a0c:	d103      	bne.n	8011a16 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011a0e:	683b      	ldr	r3, [r7, #0]
 8011a10:	681a      	ldr	r2, [r3, #0]
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011a16:	68fb      	ldr	r3, [r7, #12]
 8011a18:	68db      	ldr	r3, [r3, #12]
 8011a1a:	60fb      	str	r3, [r7, #12]
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d1ef      	bne.n	8011a02 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011a22:	bf00      	nop
 8011a24:	3714      	adds	r7, #20
 8011a26:	46bd      	mov	sp, r7
 8011a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2c:	4770      	bx	lr
 8011a2e:	bf00      	nop
 8011a30:	2000721c 	.word	0x2000721c

08011a34 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b082      	sub	sp, #8
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011a3c:	4915      	ldr	r1, [pc, #84]	; (8011a94 <etharp_free_entry+0x60>)
 8011a3e:	687a      	ldr	r2, [r7, #4]
 8011a40:	4613      	mov	r3, r2
 8011a42:	005b      	lsls	r3, r3, #1
 8011a44:	4413      	add	r3, r2
 8011a46:	00db      	lsls	r3, r3, #3
 8011a48:	440b      	add	r3, r1
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d013      	beq.n	8011a78 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011a50:	4910      	ldr	r1, [pc, #64]	; (8011a94 <etharp_free_entry+0x60>)
 8011a52:	687a      	ldr	r2, [r7, #4]
 8011a54:	4613      	mov	r3, r2
 8011a56:	005b      	lsls	r3, r3, #1
 8011a58:	4413      	add	r3, r2
 8011a5a:	00db      	lsls	r3, r3, #3
 8011a5c:	440b      	add	r3, r1
 8011a5e:	681b      	ldr	r3, [r3, #0]
 8011a60:	4618      	mov	r0, r3
 8011a62:	f7f9 fd75 	bl	800b550 <pbuf_free>
    arp_table[i].q = NULL;
 8011a66:	490b      	ldr	r1, [pc, #44]	; (8011a94 <etharp_free_entry+0x60>)
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	4613      	mov	r3, r2
 8011a6c:	005b      	lsls	r3, r3, #1
 8011a6e:	4413      	add	r3, r2
 8011a70:	00db      	lsls	r3, r3, #3
 8011a72:	440b      	add	r3, r1
 8011a74:	2200      	movs	r2, #0
 8011a76:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011a78:	4906      	ldr	r1, [pc, #24]	; (8011a94 <etharp_free_entry+0x60>)
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	440b      	add	r3, r1
 8011a86:	3314      	adds	r3, #20
 8011a88:	2200      	movs	r2, #0
 8011a8a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011a8c:	bf00      	nop
 8011a8e:	3708      	adds	r7, #8
 8011a90:	46bd      	mov	sp, r7
 8011a92:	bd80      	pop	{r7, pc}
 8011a94:	20000120 	.word	0x20000120

08011a98 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011a98:	b580      	push	{r7, lr}
 8011a9a:	b082      	sub	sp, #8
 8011a9c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	607b      	str	r3, [r7, #4]
 8011aa2:	e096      	b.n	8011bd2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011aa4:	494f      	ldr	r1, [pc, #316]	; (8011be4 <etharp_tmr+0x14c>)
 8011aa6:	687a      	ldr	r2, [r7, #4]
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	005b      	lsls	r3, r3, #1
 8011aac:	4413      	add	r3, r2
 8011aae:	00db      	lsls	r3, r3, #3
 8011ab0:	440b      	add	r3, r1
 8011ab2:	3314      	adds	r3, #20
 8011ab4:	781b      	ldrb	r3, [r3, #0]
 8011ab6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011ab8:	78fb      	ldrb	r3, [r7, #3]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	f000 8086 	beq.w	8011bcc <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011ac0:	4948      	ldr	r1, [pc, #288]	; (8011be4 <etharp_tmr+0x14c>)
 8011ac2:	687a      	ldr	r2, [r7, #4]
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	4413      	add	r3, r2
 8011aca:	00db      	lsls	r3, r3, #3
 8011acc:	440b      	add	r3, r1
 8011ace:	3312      	adds	r3, #18
 8011ad0:	881b      	ldrh	r3, [r3, #0]
 8011ad2:	3301      	adds	r3, #1
 8011ad4:	b298      	uxth	r0, r3
 8011ad6:	4943      	ldr	r1, [pc, #268]	; (8011be4 <etharp_tmr+0x14c>)
 8011ad8:	687a      	ldr	r2, [r7, #4]
 8011ada:	4613      	mov	r3, r2
 8011adc:	005b      	lsls	r3, r3, #1
 8011ade:	4413      	add	r3, r2
 8011ae0:	00db      	lsls	r3, r3, #3
 8011ae2:	440b      	add	r3, r1
 8011ae4:	3312      	adds	r3, #18
 8011ae6:	4602      	mov	r2, r0
 8011ae8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011aea:	493e      	ldr	r1, [pc, #248]	; (8011be4 <etharp_tmr+0x14c>)
 8011aec:	687a      	ldr	r2, [r7, #4]
 8011aee:	4613      	mov	r3, r2
 8011af0:	005b      	lsls	r3, r3, #1
 8011af2:	4413      	add	r3, r2
 8011af4:	00db      	lsls	r3, r3, #3
 8011af6:	440b      	add	r3, r1
 8011af8:	3312      	adds	r3, #18
 8011afa:	881b      	ldrh	r3, [r3, #0]
 8011afc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011b00:	d215      	bcs.n	8011b2e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011b02:	4938      	ldr	r1, [pc, #224]	; (8011be4 <etharp_tmr+0x14c>)
 8011b04:	687a      	ldr	r2, [r7, #4]
 8011b06:	4613      	mov	r3, r2
 8011b08:	005b      	lsls	r3, r3, #1
 8011b0a:	4413      	add	r3, r2
 8011b0c:	00db      	lsls	r3, r3, #3
 8011b0e:	440b      	add	r3, r1
 8011b10:	3314      	adds	r3, #20
 8011b12:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011b14:	2b01      	cmp	r3, #1
 8011b16:	d10e      	bne.n	8011b36 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011b18:	4932      	ldr	r1, [pc, #200]	; (8011be4 <etharp_tmr+0x14c>)
 8011b1a:	687a      	ldr	r2, [r7, #4]
 8011b1c:	4613      	mov	r3, r2
 8011b1e:	005b      	lsls	r3, r3, #1
 8011b20:	4413      	add	r3, r2
 8011b22:	00db      	lsls	r3, r3, #3
 8011b24:	440b      	add	r3, r1
 8011b26:	3312      	adds	r3, #18
 8011b28:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011b2a:	2b04      	cmp	r3, #4
 8011b2c:	d903      	bls.n	8011b36 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff ff80 	bl	8011a34 <etharp_free_entry>
 8011b34:	e04a      	b.n	8011bcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011b36:	492b      	ldr	r1, [pc, #172]	; (8011be4 <etharp_tmr+0x14c>)
 8011b38:	687a      	ldr	r2, [r7, #4]
 8011b3a:	4613      	mov	r3, r2
 8011b3c:	005b      	lsls	r3, r3, #1
 8011b3e:	4413      	add	r3, r2
 8011b40:	00db      	lsls	r3, r3, #3
 8011b42:	440b      	add	r3, r1
 8011b44:	3314      	adds	r3, #20
 8011b46:	781b      	ldrb	r3, [r3, #0]
 8011b48:	2b03      	cmp	r3, #3
 8011b4a:	d10a      	bne.n	8011b62 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011b4c:	4925      	ldr	r1, [pc, #148]	; (8011be4 <etharp_tmr+0x14c>)
 8011b4e:	687a      	ldr	r2, [r7, #4]
 8011b50:	4613      	mov	r3, r2
 8011b52:	005b      	lsls	r3, r3, #1
 8011b54:	4413      	add	r3, r2
 8011b56:	00db      	lsls	r3, r3, #3
 8011b58:	440b      	add	r3, r1
 8011b5a:	3314      	adds	r3, #20
 8011b5c:	2204      	movs	r2, #4
 8011b5e:	701a      	strb	r2, [r3, #0]
 8011b60:	e034      	b.n	8011bcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011b62:	4920      	ldr	r1, [pc, #128]	; (8011be4 <etharp_tmr+0x14c>)
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	4613      	mov	r3, r2
 8011b68:	005b      	lsls	r3, r3, #1
 8011b6a:	4413      	add	r3, r2
 8011b6c:	00db      	lsls	r3, r3, #3
 8011b6e:	440b      	add	r3, r1
 8011b70:	3314      	adds	r3, #20
 8011b72:	781b      	ldrb	r3, [r3, #0]
 8011b74:	2b04      	cmp	r3, #4
 8011b76:	d10a      	bne.n	8011b8e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011b78:	491a      	ldr	r1, [pc, #104]	; (8011be4 <etharp_tmr+0x14c>)
 8011b7a:	687a      	ldr	r2, [r7, #4]
 8011b7c:	4613      	mov	r3, r2
 8011b7e:	005b      	lsls	r3, r3, #1
 8011b80:	4413      	add	r3, r2
 8011b82:	00db      	lsls	r3, r3, #3
 8011b84:	440b      	add	r3, r1
 8011b86:	3314      	adds	r3, #20
 8011b88:	2202      	movs	r2, #2
 8011b8a:	701a      	strb	r2, [r3, #0]
 8011b8c:	e01e      	b.n	8011bcc <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011b8e:	4915      	ldr	r1, [pc, #84]	; (8011be4 <etharp_tmr+0x14c>)
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	4613      	mov	r3, r2
 8011b94:	005b      	lsls	r3, r3, #1
 8011b96:	4413      	add	r3, r2
 8011b98:	00db      	lsls	r3, r3, #3
 8011b9a:	440b      	add	r3, r1
 8011b9c:	3314      	adds	r3, #20
 8011b9e:	781b      	ldrb	r3, [r3, #0]
 8011ba0:	2b01      	cmp	r3, #1
 8011ba2:	d113      	bne.n	8011bcc <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011ba4:	490f      	ldr	r1, [pc, #60]	; (8011be4 <etharp_tmr+0x14c>)
 8011ba6:	687a      	ldr	r2, [r7, #4]
 8011ba8:	4613      	mov	r3, r2
 8011baa:	005b      	lsls	r3, r3, #1
 8011bac:	4413      	add	r3, r2
 8011bae:	00db      	lsls	r3, r3, #3
 8011bb0:	440b      	add	r3, r1
 8011bb2:	3308      	adds	r3, #8
 8011bb4:	6818      	ldr	r0, [r3, #0]
 8011bb6:	687a      	ldr	r2, [r7, #4]
 8011bb8:	4613      	mov	r3, r2
 8011bba:	005b      	lsls	r3, r3, #1
 8011bbc:	4413      	add	r3, r2
 8011bbe:	00db      	lsls	r3, r3, #3
 8011bc0:	4a08      	ldr	r2, [pc, #32]	; (8011be4 <etharp_tmr+0x14c>)
 8011bc2:	4413      	add	r3, r2
 8011bc4:	3304      	adds	r3, #4
 8011bc6:	4619      	mov	r1, r3
 8011bc8:	f000 fe6e 	bl	80128a8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	3301      	adds	r3, #1
 8011bd0:	607b      	str	r3, [r7, #4]
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2b09      	cmp	r3, #9
 8011bd6:	f77f af65 	ble.w	8011aa4 <etharp_tmr+0xc>
      }
    }
  }
}
 8011bda:	bf00      	nop
 8011bdc:	bf00      	nop
 8011bde:	3708      	adds	r7, #8
 8011be0:	46bd      	mov	sp, r7
 8011be2:	bd80      	pop	{r7, pc}
 8011be4:	20000120 	.word	0x20000120

08011be8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b08a      	sub	sp, #40	; 0x28
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	60f8      	str	r0, [r7, #12]
 8011bf0:	460b      	mov	r3, r1
 8011bf2:	607a      	str	r2, [r7, #4]
 8011bf4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011bf6:	230a      	movs	r3, #10
 8011bf8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011bfa:	230a      	movs	r3, #10
 8011bfc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011bfe:	230a      	movs	r3, #10
 8011c00:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011c02:	2300      	movs	r3, #0
 8011c04:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011c06:	230a      	movs	r3, #10
 8011c08:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	83bb      	strh	r3, [r7, #28]
 8011c0e:	2300      	movs	r3, #0
 8011c10:	837b      	strh	r3, [r7, #26]
 8011c12:	2300      	movs	r3, #0
 8011c14:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011c16:	2300      	movs	r3, #0
 8011c18:	843b      	strh	r3, [r7, #32]
 8011c1a:	e0ae      	b.n	8011d7a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011c1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c20:	49a6      	ldr	r1, [pc, #664]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011c22:	4613      	mov	r3, r2
 8011c24:	005b      	lsls	r3, r3, #1
 8011c26:	4413      	add	r3, r2
 8011c28:	00db      	lsls	r3, r3, #3
 8011c2a:	440b      	add	r3, r1
 8011c2c:	3314      	adds	r3, #20
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011c32:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011c36:	2b0a      	cmp	r3, #10
 8011c38:	d105      	bne.n	8011c46 <etharp_find_entry+0x5e>
 8011c3a:	7dfb      	ldrb	r3, [r7, #23]
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	d102      	bne.n	8011c46 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011c40:	8c3b      	ldrh	r3, [r7, #32]
 8011c42:	847b      	strh	r3, [r7, #34]	; 0x22
 8011c44:	e095      	b.n	8011d72 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011c46:	7dfb      	ldrb	r3, [r7, #23]
 8011c48:	2b00      	cmp	r3, #0
 8011c4a:	f000 8092 	beq.w	8011d72 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011c4e:	7dfb      	ldrb	r3, [r7, #23]
 8011c50:	2b01      	cmp	r3, #1
 8011c52:	d009      	beq.n	8011c68 <etharp_find_entry+0x80>
 8011c54:	7dfb      	ldrb	r3, [r7, #23]
 8011c56:	2b01      	cmp	r3, #1
 8011c58:	d806      	bhi.n	8011c68 <etharp_find_entry+0x80>
 8011c5a:	4b99      	ldr	r3, [pc, #612]	; (8011ec0 <etharp_find_entry+0x2d8>)
 8011c5c:	f240 1223 	movw	r2, #291	; 0x123
 8011c60:	4998      	ldr	r1, [pc, #608]	; (8011ec4 <etharp_find_entry+0x2dc>)
 8011c62:	4899      	ldr	r0, [pc, #612]	; (8011ec8 <etharp_find_entry+0x2e0>)
 8011c64:	f002 f9ee 	bl	8014044 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011c68:	68fb      	ldr	r3, [r7, #12]
 8011c6a:	2b00      	cmp	r3, #0
 8011c6c:	d020      	beq.n	8011cb0 <etharp_find_entry+0xc8>
 8011c6e:	68fb      	ldr	r3, [r7, #12]
 8011c70:	6819      	ldr	r1, [r3, #0]
 8011c72:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c76:	4891      	ldr	r0, [pc, #580]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011c78:	4613      	mov	r3, r2
 8011c7a:	005b      	lsls	r3, r3, #1
 8011c7c:	4413      	add	r3, r2
 8011c7e:	00db      	lsls	r3, r3, #3
 8011c80:	4403      	add	r3, r0
 8011c82:	3304      	adds	r3, #4
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	4299      	cmp	r1, r3
 8011c88:	d112      	bne.n	8011cb0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011c8a:	687b      	ldr	r3, [r7, #4]
 8011c8c:	2b00      	cmp	r3, #0
 8011c8e:	d00c      	beq.n	8011caa <etharp_find_entry+0xc2>
 8011c90:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c94:	4989      	ldr	r1, [pc, #548]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011c96:	4613      	mov	r3, r2
 8011c98:	005b      	lsls	r3, r3, #1
 8011c9a:	4413      	add	r3, r2
 8011c9c:	00db      	lsls	r3, r3, #3
 8011c9e:	440b      	add	r3, r1
 8011ca0:	3308      	adds	r3, #8
 8011ca2:	681b      	ldr	r3, [r3, #0]
 8011ca4:	687a      	ldr	r2, [r7, #4]
 8011ca6:	429a      	cmp	r2, r3
 8011ca8:	d102      	bne.n	8011cb0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011caa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011cae:	e100      	b.n	8011eb2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011cb0:	7dfb      	ldrb	r3, [r7, #23]
 8011cb2:	2b01      	cmp	r3, #1
 8011cb4:	d140      	bne.n	8011d38 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011cb6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cba:	4980      	ldr	r1, [pc, #512]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011cbc:	4613      	mov	r3, r2
 8011cbe:	005b      	lsls	r3, r3, #1
 8011cc0:	4413      	add	r3, r2
 8011cc2:	00db      	lsls	r3, r3, #3
 8011cc4:	440b      	add	r3, r1
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d01a      	beq.n	8011d02 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011ccc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cd0:	497a      	ldr	r1, [pc, #488]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011cd2:	4613      	mov	r3, r2
 8011cd4:	005b      	lsls	r3, r3, #1
 8011cd6:	4413      	add	r3, r2
 8011cd8:	00db      	lsls	r3, r3, #3
 8011cda:	440b      	add	r3, r1
 8011cdc:	3312      	adds	r3, #18
 8011cde:	881b      	ldrh	r3, [r3, #0]
 8011ce0:	8bba      	ldrh	r2, [r7, #28]
 8011ce2:	429a      	cmp	r2, r3
 8011ce4:	d845      	bhi.n	8011d72 <etharp_find_entry+0x18a>
            old_queue = i;
 8011ce6:	8c3b      	ldrh	r3, [r7, #32]
 8011ce8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011cea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011cee:	4973      	ldr	r1, [pc, #460]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011cf0:	4613      	mov	r3, r2
 8011cf2:	005b      	lsls	r3, r3, #1
 8011cf4:	4413      	add	r3, r2
 8011cf6:	00db      	lsls	r3, r3, #3
 8011cf8:	440b      	add	r3, r1
 8011cfa:	3312      	adds	r3, #18
 8011cfc:	881b      	ldrh	r3, [r3, #0]
 8011cfe:	83bb      	strh	r3, [r7, #28]
 8011d00:	e037      	b.n	8011d72 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011d02:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d06:	496d      	ldr	r1, [pc, #436]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011d08:	4613      	mov	r3, r2
 8011d0a:	005b      	lsls	r3, r3, #1
 8011d0c:	4413      	add	r3, r2
 8011d0e:	00db      	lsls	r3, r3, #3
 8011d10:	440b      	add	r3, r1
 8011d12:	3312      	adds	r3, #18
 8011d14:	881b      	ldrh	r3, [r3, #0]
 8011d16:	8b7a      	ldrh	r2, [r7, #26]
 8011d18:	429a      	cmp	r2, r3
 8011d1a:	d82a      	bhi.n	8011d72 <etharp_find_entry+0x18a>
            old_pending = i;
 8011d1c:	8c3b      	ldrh	r3, [r7, #32]
 8011d1e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011d20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d24:	4965      	ldr	r1, [pc, #404]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011d26:	4613      	mov	r3, r2
 8011d28:	005b      	lsls	r3, r3, #1
 8011d2a:	4413      	add	r3, r2
 8011d2c:	00db      	lsls	r3, r3, #3
 8011d2e:	440b      	add	r3, r1
 8011d30:	3312      	adds	r3, #18
 8011d32:	881b      	ldrh	r3, [r3, #0]
 8011d34:	837b      	strh	r3, [r7, #26]
 8011d36:	e01c      	b.n	8011d72 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011d38:	7dfb      	ldrb	r3, [r7, #23]
 8011d3a:	2b01      	cmp	r3, #1
 8011d3c:	d919      	bls.n	8011d72 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011d3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d42:	495e      	ldr	r1, [pc, #376]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011d44:	4613      	mov	r3, r2
 8011d46:	005b      	lsls	r3, r3, #1
 8011d48:	4413      	add	r3, r2
 8011d4a:	00db      	lsls	r3, r3, #3
 8011d4c:	440b      	add	r3, r1
 8011d4e:	3312      	adds	r3, #18
 8011d50:	881b      	ldrh	r3, [r3, #0]
 8011d52:	8b3a      	ldrh	r2, [r7, #24]
 8011d54:	429a      	cmp	r2, r3
 8011d56:	d80c      	bhi.n	8011d72 <etharp_find_entry+0x18a>
            old_stable = i;
 8011d58:	8c3b      	ldrh	r3, [r7, #32]
 8011d5a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011d5c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d60:	4956      	ldr	r1, [pc, #344]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011d62:	4613      	mov	r3, r2
 8011d64:	005b      	lsls	r3, r3, #1
 8011d66:	4413      	add	r3, r2
 8011d68:	00db      	lsls	r3, r3, #3
 8011d6a:	440b      	add	r3, r1
 8011d6c:	3312      	adds	r3, #18
 8011d6e:	881b      	ldrh	r3, [r3, #0]
 8011d70:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d72:	8c3b      	ldrh	r3, [r7, #32]
 8011d74:	3301      	adds	r3, #1
 8011d76:	b29b      	uxth	r3, r3
 8011d78:	843b      	strh	r3, [r7, #32]
 8011d7a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011d7e:	2b09      	cmp	r3, #9
 8011d80:	f77f af4c 	ble.w	8011c1c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011d84:	7afb      	ldrb	r3, [r7, #11]
 8011d86:	f003 0302 	and.w	r3, r3, #2
 8011d8a:	2b00      	cmp	r3, #0
 8011d8c:	d108      	bne.n	8011da0 <etharp_find_entry+0x1b8>
 8011d8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d92:	2b0a      	cmp	r3, #10
 8011d94:	d107      	bne.n	8011da6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011d96:	7afb      	ldrb	r3, [r7, #11]
 8011d98:	f003 0301 	and.w	r3, r3, #1
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d102      	bne.n	8011da6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011da0:	f04f 33ff 	mov.w	r3, #4294967295
 8011da4:	e085      	b.n	8011eb2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011da6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011daa:	2b09      	cmp	r3, #9
 8011dac:	dc02      	bgt.n	8011db4 <etharp_find_entry+0x1cc>
    i = empty;
 8011dae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011db0:	843b      	strh	r3, [r7, #32]
 8011db2:	e039      	b.n	8011e28 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011db4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011db8:	2b09      	cmp	r3, #9
 8011dba:	dc14      	bgt.n	8011de6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011dbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011dbe:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011dc0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dc4:	493d      	ldr	r1, [pc, #244]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011dc6:	4613      	mov	r3, r2
 8011dc8:	005b      	lsls	r3, r3, #1
 8011dca:	4413      	add	r3, r2
 8011dcc:	00db      	lsls	r3, r3, #3
 8011dce:	440b      	add	r3, r1
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d018      	beq.n	8011e08 <etharp_find_entry+0x220>
 8011dd6:	4b3a      	ldr	r3, [pc, #232]	; (8011ec0 <etharp_find_entry+0x2d8>)
 8011dd8:	f240 126d 	movw	r2, #365	; 0x16d
 8011ddc:	493b      	ldr	r1, [pc, #236]	; (8011ecc <etharp_find_entry+0x2e4>)
 8011dde:	483a      	ldr	r0, [pc, #232]	; (8011ec8 <etharp_find_entry+0x2e0>)
 8011de0:	f002 f930 	bl	8014044 <iprintf>
 8011de4:	e010      	b.n	8011e08 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011de6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011dea:	2b09      	cmp	r3, #9
 8011dec:	dc02      	bgt.n	8011df4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011dee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011df0:	843b      	strh	r3, [r7, #32]
 8011df2:	e009      	b.n	8011e08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011df4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011df8:	2b09      	cmp	r3, #9
 8011dfa:	dc02      	bgt.n	8011e02 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011dfc:	8bfb      	ldrh	r3, [r7, #30]
 8011dfe:	843b      	strh	r3, [r7, #32]
 8011e00:	e002      	b.n	8011e08 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011e02:	f04f 33ff 	mov.w	r3, #4294967295
 8011e06:	e054      	b.n	8011eb2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011e08:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e0c:	2b09      	cmp	r3, #9
 8011e0e:	dd06      	ble.n	8011e1e <etharp_find_entry+0x236>
 8011e10:	4b2b      	ldr	r3, [pc, #172]	; (8011ec0 <etharp_find_entry+0x2d8>)
 8011e12:	f240 127f 	movw	r2, #383	; 0x17f
 8011e16:	492e      	ldr	r1, [pc, #184]	; (8011ed0 <etharp_find_entry+0x2e8>)
 8011e18:	482b      	ldr	r0, [pc, #172]	; (8011ec8 <etharp_find_entry+0x2e0>)
 8011e1a:	f002 f913 	bl	8014044 <iprintf>
    etharp_free_entry(i);
 8011e1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e22:	4618      	mov	r0, r3
 8011e24:	f7ff fe06 	bl	8011a34 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011e28:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011e2c:	2b09      	cmp	r3, #9
 8011e2e:	dd06      	ble.n	8011e3e <etharp_find_entry+0x256>
 8011e30:	4b23      	ldr	r3, [pc, #140]	; (8011ec0 <etharp_find_entry+0x2d8>)
 8011e32:	f240 1283 	movw	r2, #387	; 0x183
 8011e36:	4926      	ldr	r1, [pc, #152]	; (8011ed0 <etharp_find_entry+0x2e8>)
 8011e38:	4823      	ldr	r0, [pc, #140]	; (8011ec8 <etharp_find_entry+0x2e0>)
 8011e3a:	f002 f903 	bl	8014044 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011e3e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e42:	491e      	ldr	r1, [pc, #120]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011e44:	4613      	mov	r3, r2
 8011e46:	005b      	lsls	r3, r3, #1
 8011e48:	4413      	add	r3, r2
 8011e4a:	00db      	lsls	r3, r3, #3
 8011e4c:	440b      	add	r3, r1
 8011e4e:	3314      	adds	r3, #20
 8011e50:	781b      	ldrb	r3, [r3, #0]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d006      	beq.n	8011e64 <etharp_find_entry+0x27c>
 8011e56:	4b1a      	ldr	r3, [pc, #104]	; (8011ec0 <etharp_find_entry+0x2d8>)
 8011e58:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011e5c:	491d      	ldr	r1, [pc, #116]	; (8011ed4 <etharp_find_entry+0x2ec>)
 8011e5e:	481a      	ldr	r0, [pc, #104]	; (8011ec8 <etharp_find_entry+0x2e0>)
 8011e60:	f002 f8f0 	bl	8014044 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d00b      	beq.n	8011e82 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011e6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e6e:	68fb      	ldr	r3, [r7, #12]
 8011e70:	6819      	ldr	r1, [r3, #0]
 8011e72:	4812      	ldr	r0, [pc, #72]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011e74:	4613      	mov	r3, r2
 8011e76:	005b      	lsls	r3, r3, #1
 8011e78:	4413      	add	r3, r2
 8011e7a:	00db      	lsls	r3, r3, #3
 8011e7c:	4403      	add	r3, r0
 8011e7e:	3304      	adds	r3, #4
 8011e80:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011e82:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e86:	490d      	ldr	r1, [pc, #52]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011e88:	4613      	mov	r3, r2
 8011e8a:	005b      	lsls	r3, r3, #1
 8011e8c:	4413      	add	r3, r2
 8011e8e:	00db      	lsls	r3, r3, #3
 8011e90:	440b      	add	r3, r1
 8011e92:	3312      	adds	r3, #18
 8011e94:	2200      	movs	r2, #0
 8011e96:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011e98:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e9c:	4907      	ldr	r1, [pc, #28]	; (8011ebc <etharp_find_entry+0x2d4>)
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	005b      	lsls	r3, r3, #1
 8011ea2:	4413      	add	r3, r2
 8011ea4:	00db      	lsls	r3, r3, #3
 8011ea6:	440b      	add	r3, r1
 8011ea8:	3308      	adds	r3, #8
 8011eaa:	687a      	ldr	r2, [r7, #4]
 8011eac:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011eae:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011eb2:	4618      	mov	r0, r3
 8011eb4:	3728      	adds	r7, #40	; 0x28
 8011eb6:	46bd      	mov	sp, r7
 8011eb8:	bd80      	pop	{r7, pc}
 8011eba:	bf00      	nop
 8011ebc:	20000120 	.word	0x20000120
 8011ec0:	080173ac 	.word	0x080173ac
 8011ec4:	080173e4 	.word	0x080173e4
 8011ec8:	08017424 	.word	0x08017424
 8011ecc:	0801744c 	.word	0x0801744c
 8011ed0:	08017464 	.word	0x08017464
 8011ed4:	08017478 	.word	0x08017478

08011ed8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011ed8:	b580      	push	{r7, lr}
 8011eda:	b088      	sub	sp, #32
 8011edc:	af02      	add	r7, sp, #8
 8011ede:	60f8      	str	r0, [r7, #12]
 8011ee0:	60b9      	str	r1, [r7, #8]
 8011ee2:	607a      	str	r2, [r7, #4]
 8011ee4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011ee6:	68fb      	ldr	r3, [r7, #12]
 8011ee8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011eec:	2b06      	cmp	r3, #6
 8011eee:	d006      	beq.n	8011efe <etharp_update_arp_entry+0x26>
 8011ef0:	4b48      	ldr	r3, [pc, #288]	; (8012014 <etharp_update_arp_entry+0x13c>)
 8011ef2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011ef6:	4948      	ldr	r1, [pc, #288]	; (8012018 <etharp_update_arp_entry+0x140>)
 8011ef8:	4848      	ldr	r0, [pc, #288]	; (801201c <etharp_update_arp_entry+0x144>)
 8011efa:	f002 f8a3 	bl	8014044 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011efe:	68bb      	ldr	r3, [r7, #8]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d012      	beq.n	8011f2a <etharp_update_arp_entry+0x52>
 8011f04:	68bb      	ldr	r3, [r7, #8]
 8011f06:	681b      	ldr	r3, [r3, #0]
 8011f08:	2b00      	cmp	r3, #0
 8011f0a:	d00e      	beq.n	8011f2a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f0c:	68bb      	ldr	r3, [r7, #8]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	68f9      	ldr	r1, [r7, #12]
 8011f12:	4618      	mov	r0, r3
 8011f14:	f001 f8fe 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8011f18:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011f1a:	2b00      	cmp	r3, #0
 8011f1c:	d105      	bne.n	8011f2a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011f1e:	68bb      	ldr	r3, [r7, #8]
 8011f20:	681b      	ldr	r3, [r3, #0]
 8011f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011f26:	2be0      	cmp	r3, #224	; 0xe0
 8011f28:	d102      	bne.n	8011f30 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011f2a:	f06f 030f 	mvn.w	r3, #15
 8011f2e:	e06c      	b.n	801200a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011f30:	78fb      	ldrb	r3, [r7, #3]
 8011f32:	68fa      	ldr	r2, [r7, #12]
 8011f34:	4619      	mov	r1, r3
 8011f36:	68b8      	ldr	r0, [r7, #8]
 8011f38:	f7ff fe56 	bl	8011be8 <etharp_find_entry>
 8011f3c:	4603      	mov	r3, r0
 8011f3e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011f40:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	da02      	bge.n	8011f4e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011f48:	8afb      	ldrh	r3, [r7, #22]
 8011f4a:	b25b      	sxtb	r3, r3
 8011f4c:	e05d      	b.n	801200a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011f4e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f52:	4933      	ldr	r1, [pc, #204]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011f54:	4613      	mov	r3, r2
 8011f56:	005b      	lsls	r3, r3, #1
 8011f58:	4413      	add	r3, r2
 8011f5a:	00db      	lsls	r3, r3, #3
 8011f5c:	440b      	add	r3, r1
 8011f5e:	3314      	adds	r3, #20
 8011f60:	2202      	movs	r2, #2
 8011f62:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011f64:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f68:	492d      	ldr	r1, [pc, #180]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	3308      	adds	r3, #8
 8011f76:	68fa      	ldr	r2, [r7, #12]
 8011f78:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011f7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f7e:	4613      	mov	r3, r2
 8011f80:	005b      	lsls	r3, r3, #1
 8011f82:	4413      	add	r3, r2
 8011f84:	00db      	lsls	r3, r3, #3
 8011f86:	3308      	adds	r3, #8
 8011f88:	4a25      	ldr	r2, [pc, #148]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011f8a:	4413      	add	r3, r2
 8011f8c:	3304      	adds	r3, #4
 8011f8e:	2206      	movs	r2, #6
 8011f90:	6879      	ldr	r1, [r7, #4]
 8011f92:	4618      	mov	r0, r3
 8011f94:	f002 f840 	bl	8014018 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011f98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011f9c:	4920      	ldr	r1, [pc, #128]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011f9e:	4613      	mov	r3, r2
 8011fa0:	005b      	lsls	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
 8011fa4:	00db      	lsls	r3, r3, #3
 8011fa6:	440b      	add	r3, r1
 8011fa8:	3312      	adds	r3, #18
 8011faa:	2200      	movs	r2, #0
 8011fac:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011fae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011fb2:	491b      	ldr	r1, [pc, #108]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011fb4:	4613      	mov	r3, r2
 8011fb6:	005b      	lsls	r3, r3, #1
 8011fb8:	4413      	add	r3, r2
 8011fba:	00db      	lsls	r3, r3, #3
 8011fbc:	440b      	add	r3, r1
 8011fbe:	681b      	ldr	r3, [r3, #0]
 8011fc0:	2b00      	cmp	r3, #0
 8011fc2:	d021      	beq.n	8012008 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011fc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011fc8:	4915      	ldr	r1, [pc, #84]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011fca:	4613      	mov	r3, r2
 8011fcc:	005b      	lsls	r3, r3, #1
 8011fce:	4413      	add	r3, r2
 8011fd0:	00db      	lsls	r3, r3, #3
 8011fd2:	440b      	add	r3, r1
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011fd8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011fdc:	4910      	ldr	r1, [pc, #64]	; (8012020 <etharp_update_arp_entry+0x148>)
 8011fde:	4613      	mov	r3, r2
 8011fe0:	005b      	lsls	r3, r3, #1
 8011fe2:	4413      	add	r3, r2
 8011fe4:	00db      	lsls	r3, r3, #3
 8011fe6:	440b      	add	r3, r1
 8011fe8:	2200      	movs	r2, #0
 8011fea:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011ff2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011ff6:	9300      	str	r3, [sp, #0]
 8011ff8:	687b      	ldr	r3, [r7, #4]
 8011ffa:	6939      	ldr	r1, [r7, #16]
 8011ffc:	68f8      	ldr	r0, [r7, #12]
 8011ffe:	f001 ff91 	bl	8013f24 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012002:	6938      	ldr	r0, [r7, #16]
 8012004:	f7f9 faa4 	bl	800b550 <pbuf_free>
  }
  return ERR_OK;
 8012008:	2300      	movs	r3, #0
}
 801200a:	4618      	mov	r0, r3
 801200c:	3718      	adds	r7, #24
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}
 8012012:	bf00      	nop
 8012014:	080173ac 	.word	0x080173ac
 8012018:	080174a4 	.word	0x080174a4
 801201c:	08017424 	.word	0x08017424
 8012020:	20000120 	.word	0x20000120

08012024 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012024:	b580      	push	{r7, lr}
 8012026:	b084      	sub	sp, #16
 8012028:	af00      	add	r7, sp, #0
 801202a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801202c:	2300      	movs	r3, #0
 801202e:	60fb      	str	r3, [r7, #12]
 8012030:	e01e      	b.n	8012070 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012032:	4913      	ldr	r1, [pc, #76]	; (8012080 <etharp_cleanup_netif+0x5c>)
 8012034:	68fa      	ldr	r2, [r7, #12]
 8012036:	4613      	mov	r3, r2
 8012038:	005b      	lsls	r3, r3, #1
 801203a:	4413      	add	r3, r2
 801203c:	00db      	lsls	r3, r3, #3
 801203e:	440b      	add	r3, r1
 8012040:	3314      	adds	r3, #20
 8012042:	781b      	ldrb	r3, [r3, #0]
 8012044:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8012046:	7afb      	ldrb	r3, [r7, #11]
 8012048:	2b00      	cmp	r3, #0
 801204a:	d00e      	beq.n	801206a <etharp_cleanup_netif+0x46>
 801204c:	490c      	ldr	r1, [pc, #48]	; (8012080 <etharp_cleanup_netif+0x5c>)
 801204e:	68fa      	ldr	r2, [r7, #12]
 8012050:	4613      	mov	r3, r2
 8012052:	005b      	lsls	r3, r3, #1
 8012054:	4413      	add	r3, r2
 8012056:	00db      	lsls	r3, r3, #3
 8012058:	440b      	add	r3, r1
 801205a:	3308      	adds	r3, #8
 801205c:	681b      	ldr	r3, [r3, #0]
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	429a      	cmp	r2, r3
 8012062:	d102      	bne.n	801206a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012064:	68f8      	ldr	r0, [r7, #12]
 8012066:	f7ff fce5 	bl	8011a34 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	3301      	adds	r3, #1
 801206e:	60fb      	str	r3, [r7, #12]
 8012070:	68fb      	ldr	r3, [r7, #12]
 8012072:	2b09      	cmp	r3, #9
 8012074:	dddd      	ble.n	8012032 <etharp_cleanup_netif+0xe>
    }
  }
}
 8012076:	bf00      	nop
 8012078:	bf00      	nop
 801207a:	3710      	adds	r7, #16
 801207c:	46bd      	mov	sp, r7
 801207e:	bd80      	pop	{r7, pc}
 8012080:	20000120 	.word	0x20000120

08012084 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8012084:	b5b0      	push	{r4, r5, r7, lr}
 8012086:	b08a      	sub	sp, #40	; 0x28
 8012088:	af04      	add	r7, sp, #16
 801208a:	6078      	str	r0, [r7, #4]
 801208c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	2b00      	cmp	r3, #0
 8012092:	d107      	bne.n	80120a4 <etharp_input+0x20>
 8012094:	4b3d      	ldr	r3, [pc, #244]	; (801218c <etharp_input+0x108>)
 8012096:	f240 228a 	movw	r2, #650	; 0x28a
 801209a:	493d      	ldr	r1, [pc, #244]	; (8012190 <etharp_input+0x10c>)
 801209c:	483d      	ldr	r0, [pc, #244]	; (8012194 <etharp_input+0x110>)
 801209e:	f001 ffd1 	bl	8014044 <iprintf>
 80120a2:	e06f      	b.n	8012184 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	685b      	ldr	r3, [r3, #4]
 80120a8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80120aa:	693b      	ldr	r3, [r7, #16]
 80120ac:	881b      	ldrh	r3, [r3, #0]
 80120ae:	b29b      	uxth	r3, r3
 80120b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120b4:	d10c      	bne.n	80120d0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80120b6:	693b      	ldr	r3, [r7, #16]
 80120b8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80120ba:	2b06      	cmp	r3, #6
 80120bc:	d108      	bne.n	80120d0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80120be:	693b      	ldr	r3, [r7, #16]
 80120c0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80120c2:	2b04      	cmp	r3, #4
 80120c4:	d104      	bne.n	80120d0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80120c6:	693b      	ldr	r3, [r7, #16]
 80120c8:	885b      	ldrh	r3, [r3, #2]
 80120ca:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80120cc:	2b08      	cmp	r3, #8
 80120ce:	d003      	beq.n	80120d8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80120d0:	6878      	ldr	r0, [r7, #4]
 80120d2:	f7f9 fa3d 	bl	800b550 <pbuf_free>
    return;
 80120d6:	e055      	b.n	8012184 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80120d8:	693b      	ldr	r3, [r7, #16]
 80120da:	330e      	adds	r3, #14
 80120dc:	681b      	ldr	r3, [r3, #0]
 80120de:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80120e0:	693b      	ldr	r3, [r7, #16]
 80120e2:	3318      	adds	r3, #24
 80120e4:	681b      	ldr	r3, [r3, #0]
 80120e6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80120e8:	683b      	ldr	r3, [r7, #0]
 80120ea:	3304      	adds	r3, #4
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d102      	bne.n	80120f8 <etharp_input+0x74>
    for_us = 0;
 80120f2:	2300      	movs	r3, #0
 80120f4:	75fb      	strb	r3, [r7, #23]
 80120f6:	e009      	b.n	801210c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80120f8:	68ba      	ldr	r2, [r7, #8]
 80120fa:	683b      	ldr	r3, [r7, #0]
 80120fc:	3304      	adds	r3, #4
 80120fe:	681b      	ldr	r3, [r3, #0]
 8012100:	429a      	cmp	r2, r3
 8012102:	bf0c      	ite	eq
 8012104:	2301      	moveq	r3, #1
 8012106:	2300      	movne	r3, #0
 8012108:	b2db      	uxtb	r3, r3
 801210a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801210c:	693b      	ldr	r3, [r7, #16]
 801210e:	f103 0208 	add.w	r2, r3, #8
 8012112:	7dfb      	ldrb	r3, [r7, #23]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d001      	beq.n	801211c <etharp_input+0x98>
 8012118:	2301      	movs	r3, #1
 801211a:	e000      	b.n	801211e <etharp_input+0x9a>
 801211c:	2302      	movs	r3, #2
 801211e:	f107 010c 	add.w	r1, r7, #12
 8012122:	6838      	ldr	r0, [r7, #0]
 8012124:	f7ff fed8 	bl	8011ed8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8012128:	693b      	ldr	r3, [r7, #16]
 801212a:	88db      	ldrh	r3, [r3, #6]
 801212c:	b29b      	uxth	r3, r3
 801212e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012132:	d003      	beq.n	801213c <etharp_input+0xb8>
 8012134:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8012138:	d01e      	beq.n	8012178 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801213a:	e020      	b.n	801217e <etharp_input+0xfa>
      if (for_us) {
 801213c:	7dfb      	ldrb	r3, [r7, #23]
 801213e:	2b00      	cmp	r3, #0
 8012140:	d01c      	beq.n	801217c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012142:	683b      	ldr	r3, [r7, #0]
 8012144:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8012148:	693b      	ldr	r3, [r7, #16]
 801214a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801214e:	683b      	ldr	r3, [r7, #0]
 8012150:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8012158:	693a      	ldr	r2, [r7, #16]
 801215a:	3208      	adds	r2, #8
        etharp_raw(netif,
 801215c:	2102      	movs	r1, #2
 801215e:	9103      	str	r1, [sp, #12]
 8012160:	f107 010c 	add.w	r1, r7, #12
 8012164:	9102      	str	r1, [sp, #8]
 8012166:	9201      	str	r2, [sp, #4]
 8012168:	9300      	str	r3, [sp, #0]
 801216a:	462b      	mov	r3, r5
 801216c:	4622      	mov	r2, r4
 801216e:	4601      	mov	r1, r0
 8012170:	6838      	ldr	r0, [r7, #0]
 8012172:	f000 faeb 	bl	801274c <etharp_raw>
      break;
 8012176:	e001      	b.n	801217c <etharp_input+0xf8>
      break;
 8012178:	bf00      	nop
 801217a:	e000      	b.n	801217e <etharp_input+0xfa>
      break;
 801217c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f7f9 f9e6 	bl	800b550 <pbuf_free>
}
 8012184:	3718      	adds	r7, #24
 8012186:	46bd      	mov	sp, r7
 8012188:	bdb0      	pop	{r4, r5, r7, pc}
 801218a:	bf00      	nop
 801218c:	080173ac 	.word	0x080173ac
 8012190:	080174fc 	.word	0x080174fc
 8012194:	08017424 	.word	0x08017424

08012198 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8012198:	b580      	push	{r7, lr}
 801219a:	b086      	sub	sp, #24
 801219c:	af02      	add	r7, sp, #8
 801219e:	60f8      	str	r0, [r7, #12]
 80121a0:	60b9      	str	r1, [r7, #8]
 80121a2:	4613      	mov	r3, r2
 80121a4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80121a6:	79fa      	ldrb	r2, [r7, #7]
 80121a8:	4944      	ldr	r1, [pc, #272]	; (80122bc <etharp_output_to_arp_index+0x124>)
 80121aa:	4613      	mov	r3, r2
 80121ac:	005b      	lsls	r3, r3, #1
 80121ae:	4413      	add	r3, r2
 80121b0:	00db      	lsls	r3, r3, #3
 80121b2:	440b      	add	r3, r1
 80121b4:	3314      	adds	r3, #20
 80121b6:	781b      	ldrb	r3, [r3, #0]
 80121b8:	2b01      	cmp	r3, #1
 80121ba:	d806      	bhi.n	80121ca <etharp_output_to_arp_index+0x32>
 80121bc:	4b40      	ldr	r3, [pc, #256]	; (80122c0 <etharp_output_to_arp_index+0x128>)
 80121be:	f240 22ee 	movw	r2, #750	; 0x2ee
 80121c2:	4940      	ldr	r1, [pc, #256]	; (80122c4 <etharp_output_to_arp_index+0x12c>)
 80121c4:	4840      	ldr	r0, [pc, #256]	; (80122c8 <etharp_output_to_arp_index+0x130>)
 80121c6:	f001 ff3d 	bl	8014044 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80121ca:	79fa      	ldrb	r2, [r7, #7]
 80121cc:	493b      	ldr	r1, [pc, #236]	; (80122bc <etharp_output_to_arp_index+0x124>)
 80121ce:	4613      	mov	r3, r2
 80121d0:	005b      	lsls	r3, r3, #1
 80121d2:	4413      	add	r3, r2
 80121d4:	00db      	lsls	r3, r3, #3
 80121d6:	440b      	add	r3, r1
 80121d8:	3314      	adds	r3, #20
 80121da:	781b      	ldrb	r3, [r3, #0]
 80121dc:	2b02      	cmp	r3, #2
 80121de:	d153      	bne.n	8012288 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80121e0:	79fa      	ldrb	r2, [r7, #7]
 80121e2:	4936      	ldr	r1, [pc, #216]	; (80122bc <etharp_output_to_arp_index+0x124>)
 80121e4:	4613      	mov	r3, r2
 80121e6:	005b      	lsls	r3, r3, #1
 80121e8:	4413      	add	r3, r2
 80121ea:	00db      	lsls	r3, r3, #3
 80121ec:	440b      	add	r3, r1
 80121ee:	3312      	adds	r3, #18
 80121f0:	881b      	ldrh	r3, [r3, #0]
 80121f2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80121f6:	d919      	bls.n	801222c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80121f8:	79fa      	ldrb	r2, [r7, #7]
 80121fa:	4613      	mov	r3, r2
 80121fc:	005b      	lsls	r3, r3, #1
 80121fe:	4413      	add	r3, r2
 8012200:	00db      	lsls	r3, r3, #3
 8012202:	4a2e      	ldr	r2, [pc, #184]	; (80122bc <etharp_output_to_arp_index+0x124>)
 8012204:	4413      	add	r3, r2
 8012206:	3304      	adds	r3, #4
 8012208:	4619      	mov	r1, r3
 801220a:	68f8      	ldr	r0, [r7, #12]
 801220c:	f000 fb4c 	bl	80128a8 <etharp_request>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d138      	bne.n	8012288 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012216:	79fa      	ldrb	r2, [r7, #7]
 8012218:	4928      	ldr	r1, [pc, #160]	; (80122bc <etharp_output_to_arp_index+0x124>)
 801221a:	4613      	mov	r3, r2
 801221c:	005b      	lsls	r3, r3, #1
 801221e:	4413      	add	r3, r2
 8012220:	00db      	lsls	r3, r3, #3
 8012222:	440b      	add	r3, r1
 8012224:	3314      	adds	r3, #20
 8012226:	2203      	movs	r2, #3
 8012228:	701a      	strb	r2, [r3, #0]
 801222a:	e02d      	b.n	8012288 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801222c:	79fa      	ldrb	r2, [r7, #7]
 801222e:	4923      	ldr	r1, [pc, #140]	; (80122bc <etharp_output_to_arp_index+0x124>)
 8012230:	4613      	mov	r3, r2
 8012232:	005b      	lsls	r3, r3, #1
 8012234:	4413      	add	r3, r2
 8012236:	00db      	lsls	r3, r3, #3
 8012238:	440b      	add	r3, r1
 801223a:	3312      	adds	r3, #18
 801223c:	881b      	ldrh	r3, [r3, #0]
 801223e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012242:	d321      	bcc.n	8012288 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012244:	79fa      	ldrb	r2, [r7, #7]
 8012246:	4613      	mov	r3, r2
 8012248:	005b      	lsls	r3, r3, #1
 801224a:	4413      	add	r3, r2
 801224c:	00db      	lsls	r3, r3, #3
 801224e:	4a1b      	ldr	r2, [pc, #108]	; (80122bc <etharp_output_to_arp_index+0x124>)
 8012250:	4413      	add	r3, r2
 8012252:	1d19      	adds	r1, r3, #4
 8012254:	79fa      	ldrb	r2, [r7, #7]
 8012256:	4613      	mov	r3, r2
 8012258:	005b      	lsls	r3, r3, #1
 801225a:	4413      	add	r3, r2
 801225c:	00db      	lsls	r3, r3, #3
 801225e:	3308      	adds	r3, #8
 8012260:	4a16      	ldr	r2, [pc, #88]	; (80122bc <etharp_output_to_arp_index+0x124>)
 8012262:	4413      	add	r3, r2
 8012264:	3304      	adds	r3, #4
 8012266:	461a      	mov	r2, r3
 8012268:	68f8      	ldr	r0, [r7, #12]
 801226a:	f000 fafb 	bl	8012864 <etharp_request_dst>
 801226e:	4603      	mov	r3, r0
 8012270:	2b00      	cmp	r3, #0
 8012272:	d109      	bne.n	8012288 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012274:	79fa      	ldrb	r2, [r7, #7]
 8012276:	4911      	ldr	r1, [pc, #68]	; (80122bc <etharp_output_to_arp_index+0x124>)
 8012278:	4613      	mov	r3, r2
 801227a:	005b      	lsls	r3, r3, #1
 801227c:	4413      	add	r3, r2
 801227e:	00db      	lsls	r3, r3, #3
 8012280:	440b      	add	r3, r1
 8012282:	3314      	adds	r3, #20
 8012284:	2203      	movs	r2, #3
 8012286:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012288:	68fb      	ldr	r3, [r7, #12]
 801228a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801228e:	79fa      	ldrb	r2, [r7, #7]
 8012290:	4613      	mov	r3, r2
 8012292:	005b      	lsls	r3, r3, #1
 8012294:	4413      	add	r3, r2
 8012296:	00db      	lsls	r3, r3, #3
 8012298:	3308      	adds	r3, #8
 801229a:	4a08      	ldr	r2, [pc, #32]	; (80122bc <etharp_output_to_arp_index+0x124>)
 801229c:	4413      	add	r3, r2
 801229e:	3304      	adds	r3, #4
 80122a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80122a4:	9200      	str	r2, [sp, #0]
 80122a6:	460a      	mov	r2, r1
 80122a8:	68b9      	ldr	r1, [r7, #8]
 80122aa:	68f8      	ldr	r0, [r7, #12]
 80122ac:	f001 fe3a 	bl	8013f24 <ethernet_output>
 80122b0:	4603      	mov	r3, r0
}
 80122b2:	4618      	mov	r0, r3
 80122b4:	3710      	adds	r7, #16
 80122b6:	46bd      	mov	sp, r7
 80122b8:	bd80      	pop	{r7, pc}
 80122ba:	bf00      	nop
 80122bc:	20000120 	.word	0x20000120
 80122c0:	080173ac 	.word	0x080173ac
 80122c4:	0801751c 	.word	0x0801751c
 80122c8:	08017424 	.word	0x08017424

080122cc <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80122cc:	b580      	push	{r7, lr}
 80122ce:	b08a      	sub	sp, #40	; 0x28
 80122d0:	af02      	add	r7, sp, #8
 80122d2:	60f8      	str	r0, [r7, #12]
 80122d4:	60b9      	str	r1, [r7, #8]
 80122d6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80122d8:	687b      	ldr	r3, [r7, #4]
 80122da:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <etharp_output+0x24>
 80122e2:	4b73      	ldr	r3, [pc, #460]	; (80124b0 <etharp_output+0x1e4>)
 80122e4:	f240 321e 	movw	r2, #798	; 0x31e
 80122e8:	4972      	ldr	r1, [pc, #456]	; (80124b4 <etharp_output+0x1e8>)
 80122ea:	4873      	ldr	r0, [pc, #460]	; (80124b8 <etharp_output+0x1ec>)
 80122ec:	f001 feaa 	bl	8014044 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d106      	bne.n	8012304 <etharp_output+0x38>
 80122f6:	4b6e      	ldr	r3, [pc, #440]	; (80124b0 <etharp_output+0x1e4>)
 80122f8:	f240 321f 	movw	r2, #799	; 0x31f
 80122fc:	496f      	ldr	r1, [pc, #444]	; (80124bc <etharp_output+0x1f0>)
 80122fe:	486e      	ldr	r0, [pc, #440]	; (80124b8 <etharp_output+0x1ec>)
 8012300:	f001 fea0 	bl	8014044 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2b00      	cmp	r3, #0
 8012308:	d106      	bne.n	8012318 <etharp_output+0x4c>
 801230a:	4b69      	ldr	r3, [pc, #420]	; (80124b0 <etharp_output+0x1e4>)
 801230c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012310:	496b      	ldr	r1, [pc, #428]	; (80124c0 <etharp_output+0x1f4>)
 8012312:	4869      	ldr	r0, [pc, #420]	; (80124b8 <etharp_output+0x1ec>)
 8012314:	f001 fe96 	bl	8014044 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	681b      	ldr	r3, [r3, #0]
 801231c:	68f9      	ldr	r1, [r7, #12]
 801231e:	4618      	mov	r0, r3
 8012320:	f000 fef8 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8012324:	4603      	mov	r3, r0
 8012326:	2b00      	cmp	r3, #0
 8012328:	d002      	beq.n	8012330 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801232a:	4b66      	ldr	r3, [pc, #408]	; (80124c4 <etharp_output+0x1f8>)
 801232c:	61fb      	str	r3, [r7, #28]
 801232e:	e0af      	b.n	8012490 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012330:	687b      	ldr	r3, [r7, #4]
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012338:	2be0      	cmp	r3, #224	; 0xe0
 801233a:	d118      	bne.n	801236e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801233c:	2301      	movs	r3, #1
 801233e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012340:	2300      	movs	r3, #0
 8012342:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012344:	235e      	movs	r3, #94	; 0x5e
 8012346:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012348:	687b      	ldr	r3, [r7, #4]
 801234a:	3301      	adds	r3, #1
 801234c:	781b      	ldrb	r3, [r3, #0]
 801234e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012352:	b2db      	uxtb	r3, r3
 8012354:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	3302      	adds	r3, #2
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801235e:	687b      	ldr	r3, [r7, #4]
 8012360:	3303      	adds	r3, #3
 8012362:	781b      	ldrb	r3, [r3, #0]
 8012364:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012366:	f107 0310 	add.w	r3, r7, #16
 801236a:	61fb      	str	r3, [r7, #28]
 801236c:	e090      	b.n	8012490 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	681a      	ldr	r2, [r3, #0]
 8012372:	68fb      	ldr	r3, [r7, #12]
 8012374:	3304      	adds	r3, #4
 8012376:	681b      	ldr	r3, [r3, #0]
 8012378:	405a      	eors	r2, r3
 801237a:	68fb      	ldr	r3, [r7, #12]
 801237c:	3308      	adds	r3, #8
 801237e:	681b      	ldr	r3, [r3, #0]
 8012380:	4013      	ands	r3, r2
 8012382:	2b00      	cmp	r3, #0
 8012384:	d012      	beq.n	80123ac <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012386:	687b      	ldr	r3, [r7, #4]
 8012388:	681b      	ldr	r3, [r3, #0]
 801238a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801238c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012390:	4293      	cmp	r3, r2
 8012392:	d00b      	beq.n	80123ac <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	330c      	adds	r3, #12
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d003      	beq.n	80123a6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	330c      	adds	r3, #12
 80123a2:	61bb      	str	r3, [r7, #24]
 80123a4:	e002      	b.n	80123ac <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80123a6:	f06f 0303 	mvn.w	r3, #3
 80123aa:	e07d      	b.n	80124a8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80123ac:	4b46      	ldr	r3, [pc, #280]	; (80124c8 <etharp_output+0x1fc>)
 80123ae:	781b      	ldrb	r3, [r3, #0]
 80123b0:	4619      	mov	r1, r3
 80123b2:	4a46      	ldr	r2, [pc, #280]	; (80124cc <etharp_output+0x200>)
 80123b4:	460b      	mov	r3, r1
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	440b      	add	r3, r1
 80123ba:	00db      	lsls	r3, r3, #3
 80123bc:	4413      	add	r3, r2
 80123be:	3314      	adds	r3, #20
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	2b01      	cmp	r3, #1
 80123c4:	d925      	bls.n	8012412 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80123c6:	4b40      	ldr	r3, [pc, #256]	; (80124c8 <etharp_output+0x1fc>)
 80123c8:	781b      	ldrb	r3, [r3, #0]
 80123ca:	4619      	mov	r1, r3
 80123cc:	4a3f      	ldr	r2, [pc, #252]	; (80124cc <etharp_output+0x200>)
 80123ce:	460b      	mov	r3, r1
 80123d0:	005b      	lsls	r3, r3, #1
 80123d2:	440b      	add	r3, r1
 80123d4:	00db      	lsls	r3, r3, #3
 80123d6:	4413      	add	r3, r2
 80123d8:	3308      	adds	r3, #8
 80123da:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	429a      	cmp	r2, r3
 80123e0:	d117      	bne.n	8012412 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80123e2:	69bb      	ldr	r3, [r7, #24]
 80123e4:	681a      	ldr	r2, [r3, #0]
 80123e6:	4b38      	ldr	r3, [pc, #224]	; (80124c8 <etharp_output+0x1fc>)
 80123e8:	781b      	ldrb	r3, [r3, #0]
 80123ea:	4618      	mov	r0, r3
 80123ec:	4937      	ldr	r1, [pc, #220]	; (80124cc <etharp_output+0x200>)
 80123ee:	4603      	mov	r3, r0
 80123f0:	005b      	lsls	r3, r3, #1
 80123f2:	4403      	add	r3, r0
 80123f4:	00db      	lsls	r3, r3, #3
 80123f6:	440b      	add	r3, r1
 80123f8:	3304      	adds	r3, #4
 80123fa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80123fc:	429a      	cmp	r2, r3
 80123fe:	d108      	bne.n	8012412 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012400:	4b31      	ldr	r3, [pc, #196]	; (80124c8 <etharp_output+0x1fc>)
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	461a      	mov	r2, r3
 8012406:	68b9      	ldr	r1, [r7, #8]
 8012408:	68f8      	ldr	r0, [r7, #12]
 801240a:	f7ff fec5 	bl	8012198 <etharp_output_to_arp_index>
 801240e:	4603      	mov	r3, r0
 8012410:	e04a      	b.n	80124a8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012412:	2300      	movs	r3, #0
 8012414:	75fb      	strb	r3, [r7, #23]
 8012416:	e031      	b.n	801247c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012418:	7dfa      	ldrb	r2, [r7, #23]
 801241a:	492c      	ldr	r1, [pc, #176]	; (80124cc <etharp_output+0x200>)
 801241c:	4613      	mov	r3, r2
 801241e:	005b      	lsls	r3, r3, #1
 8012420:	4413      	add	r3, r2
 8012422:	00db      	lsls	r3, r3, #3
 8012424:	440b      	add	r3, r1
 8012426:	3314      	adds	r3, #20
 8012428:	781b      	ldrb	r3, [r3, #0]
 801242a:	2b01      	cmp	r3, #1
 801242c:	d923      	bls.n	8012476 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801242e:	7dfa      	ldrb	r2, [r7, #23]
 8012430:	4926      	ldr	r1, [pc, #152]	; (80124cc <etharp_output+0x200>)
 8012432:	4613      	mov	r3, r2
 8012434:	005b      	lsls	r3, r3, #1
 8012436:	4413      	add	r3, r2
 8012438:	00db      	lsls	r3, r3, #3
 801243a:	440b      	add	r3, r1
 801243c:	3308      	adds	r3, #8
 801243e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012440:	68fa      	ldr	r2, [r7, #12]
 8012442:	429a      	cmp	r2, r3
 8012444:	d117      	bne.n	8012476 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012446:	69bb      	ldr	r3, [r7, #24]
 8012448:	6819      	ldr	r1, [r3, #0]
 801244a:	7dfa      	ldrb	r2, [r7, #23]
 801244c:	481f      	ldr	r0, [pc, #124]	; (80124cc <etharp_output+0x200>)
 801244e:	4613      	mov	r3, r2
 8012450:	005b      	lsls	r3, r3, #1
 8012452:	4413      	add	r3, r2
 8012454:	00db      	lsls	r3, r3, #3
 8012456:	4403      	add	r3, r0
 8012458:	3304      	adds	r3, #4
 801245a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801245c:	4299      	cmp	r1, r3
 801245e:	d10a      	bne.n	8012476 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012460:	4a19      	ldr	r2, [pc, #100]	; (80124c8 <etharp_output+0x1fc>)
 8012462:	7dfb      	ldrb	r3, [r7, #23]
 8012464:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012466:	7dfb      	ldrb	r3, [r7, #23]
 8012468:	461a      	mov	r2, r3
 801246a:	68b9      	ldr	r1, [r7, #8]
 801246c:	68f8      	ldr	r0, [r7, #12]
 801246e:	f7ff fe93 	bl	8012198 <etharp_output_to_arp_index>
 8012472:	4603      	mov	r3, r0
 8012474:	e018      	b.n	80124a8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012476:	7dfb      	ldrb	r3, [r7, #23]
 8012478:	3301      	adds	r3, #1
 801247a:	75fb      	strb	r3, [r7, #23]
 801247c:	7dfb      	ldrb	r3, [r7, #23]
 801247e:	2b09      	cmp	r3, #9
 8012480:	d9ca      	bls.n	8012418 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012482:	68ba      	ldr	r2, [r7, #8]
 8012484:	69b9      	ldr	r1, [r7, #24]
 8012486:	68f8      	ldr	r0, [r7, #12]
 8012488:	f000 f822 	bl	80124d0 <etharp_query>
 801248c:	4603      	mov	r3, r0
 801248e:	e00b      	b.n	80124a8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012496:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801249a:	9300      	str	r3, [sp, #0]
 801249c:	69fb      	ldr	r3, [r7, #28]
 801249e:	68b9      	ldr	r1, [r7, #8]
 80124a0:	68f8      	ldr	r0, [r7, #12]
 80124a2:	f001 fd3f 	bl	8013f24 <ethernet_output>
 80124a6:	4603      	mov	r3, r0
}
 80124a8:	4618      	mov	r0, r3
 80124aa:	3720      	adds	r7, #32
 80124ac:	46bd      	mov	sp, r7
 80124ae:	bd80      	pop	{r7, pc}
 80124b0:	080173ac 	.word	0x080173ac
 80124b4:	080174fc 	.word	0x080174fc
 80124b8:	08017424 	.word	0x08017424
 80124bc:	0801754c 	.word	0x0801754c
 80124c0:	080174ec 	.word	0x080174ec
 80124c4:	08017b78 	.word	0x08017b78
 80124c8:	20000210 	.word	0x20000210
 80124cc:	20000120 	.word	0x20000120

080124d0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80124d0:	b580      	push	{r7, lr}
 80124d2:	b08c      	sub	sp, #48	; 0x30
 80124d4:	af02      	add	r7, sp, #8
 80124d6:	60f8      	str	r0, [r7, #12]
 80124d8:	60b9      	str	r1, [r7, #8]
 80124da:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	3326      	adds	r3, #38	; 0x26
 80124e0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80124e2:	23ff      	movs	r3, #255	; 0xff
 80124e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80124e8:	2300      	movs	r3, #0
 80124ea:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80124ec:	68bb      	ldr	r3, [r7, #8]
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	68f9      	ldr	r1, [r7, #12]
 80124f2:	4618      	mov	r0, r3
 80124f4:	f000 fe0e 	bl	8013114 <ip4_addr_isbroadcast_u32>
 80124f8:	4603      	mov	r3, r0
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d10c      	bne.n	8012518 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012506:	2be0      	cmp	r3, #224	; 0xe0
 8012508:	d006      	beq.n	8012518 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801250a:	68bb      	ldr	r3, [r7, #8]
 801250c:	2b00      	cmp	r3, #0
 801250e:	d003      	beq.n	8012518 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012510:	68bb      	ldr	r3, [r7, #8]
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d102      	bne.n	801251e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8012518:	f06f 030f 	mvn.w	r3, #15
 801251c:	e101      	b.n	8012722 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801251e:	68fa      	ldr	r2, [r7, #12]
 8012520:	2101      	movs	r1, #1
 8012522:	68b8      	ldr	r0, [r7, #8]
 8012524:	f7ff fb60 	bl	8011be8 <etharp_find_entry>
 8012528:	4603      	mov	r3, r0
 801252a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801252c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012530:	2b00      	cmp	r3, #0
 8012532:	da02      	bge.n	801253a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012534:	8a7b      	ldrh	r3, [r7, #18]
 8012536:	b25b      	sxtb	r3, r3
 8012538:	e0f3      	b.n	8012722 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801253a:	8a7b      	ldrh	r3, [r7, #18]
 801253c:	2b7e      	cmp	r3, #126	; 0x7e
 801253e:	d906      	bls.n	801254e <etharp_query+0x7e>
 8012540:	4b7a      	ldr	r3, [pc, #488]	; (801272c <etharp_query+0x25c>)
 8012542:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012546:	497a      	ldr	r1, [pc, #488]	; (8012730 <etharp_query+0x260>)
 8012548:	487a      	ldr	r0, [pc, #488]	; (8012734 <etharp_query+0x264>)
 801254a:	f001 fd7b 	bl	8014044 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801254e:	8a7b      	ldrh	r3, [r7, #18]
 8012550:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012552:	7c7a      	ldrb	r2, [r7, #17]
 8012554:	4978      	ldr	r1, [pc, #480]	; (8012738 <etharp_query+0x268>)
 8012556:	4613      	mov	r3, r2
 8012558:	005b      	lsls	r3, r3, #1
 801255a:	4413      	add	r3, r2
 801255c:	00db      	lsls	r3, r3, #3
 801255e:	440b      	add	r3, r1
 8012560:	3314      	adds	r3, #20
 8012562:	781b      	ldrb	r3, [r3, #0]
 8012564:	2b00      	cmp	r3, #0
 8012566:	d115      	bne.n	8012594 <etharp_query+0xc4>
    is_new_entry = 1;
 8012568:	2301      	movs	r3, #1
 801256a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801256c:	7c7a      	ldrb	r2, [r7, #17]
 801256e:	4972      	ldr	r1, [pc, #456]	; (8012738 <etharp_query+0x268>)
 8012570:	4613      	mov	r3, r2
 8012572:	005b      	lsls	r3, r3, #1
 8012574:	4413      	add	r3, r2
 8012576:	00db      	lsls	r3, r3, #3
 8012578:	440b      	add	r3, r1
 801257a:	3314      	adds	r3, #20
 801257c:	2201      	movs	r2, #1
 801257e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012580:	7c7a      	ldrb	r2, [r7, #17]
 8012582:	496d      	ldr	r1, [pc, #436]	; (8012738 <etharp_query+0x268>)
 8012584:	4613      	mov	r3, r2
 8012586:	005b      	lsls	r3, r3, #1
 8012588:	4413      	add	r3, r2
 801258a:	00db      	lsls	r3, r3, #3
 801258c:	440b      	add	r3, r1
 801258e:	3308      	adds	r3, #8
 8012590:	68fa      	ldr	r2, [r7, #12]
 8012592:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012594:	7c7a      	ldrb	r2, [r7, #17]
 8012596:	4968      	ldr	r1, [pc, #416]	; (8012738 <etharp_query+0x268>)
 8012598:	4613      	mov	r3, r2
 801259a:	005b      	lsls	r3, r3, #1
 801259c:	4413      	add	r3, r2
 801259e:	00db      	lsls	r3, r3, #3
 80125a0:	440b      	add	r3, r1
 80125a2:	3314      	adds	r3, #20
 80125a4:	781b      	ldrb	r3, [r3, #0]
 80125a6:	2b01      	cmp	r3, #1
 80125a8:	d011      	beq.n	80125ce <etharp_query+0xfe>
 80125aa:	7c7a      	ldrb	r2, [r7, #17]
 80125ac:	4962      	ldr	r1, [pc, #392]	; (8012738 <etharp_query+0x268>)
 80125ae:	4613      	mov	r3, r2
 80125b0:	005b      	lsls	r3, r3, #1
 80125b2:	4413      	add	r3, r2
 80125b4:	00db      	lsls	r3, r3, #3
 80125b6:	440b      	add	r3, r1
 80125b8:	3314      	adds	r3, #20
 80125ba:	781b      	ldrb	r3, [r3, #0]
 80125bc:	2b01      	cmp	r3, #1
 80125be:	d806      	bhi.n	80125ce <etharp_query+0xfe>
 80125c0:	4b5a      	ldr	r3, [pc, #360]	; (801272c <etharp_query+0x25c>)
 80125c2:	f240 32cd 	movw	r2, #973	; 0x3cd
 80125c6:	495d      	ldr	r1, [pc, #372]	; (801273c <etharp_query+0x26c>)
 80125c8:	485a      	ldr	r0, [pc, #360]	; (8012734 <etharp_query+0x264>)
 80125ca:	f001 fd3b 	bl	8014044 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80125ce:	6a3b      	ldr	r3, [r7, #32]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d102      	bne.n	80125da <etharp_query+0x10a>
 80125d4:	687b      	ldr	r3, [r7, #4]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d10c      	bne.n	80125f4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80125da:	68b9      	ldr	r1, [r7, #8]
 80125dc:	68f8      	ldr	r0, [r7, #12]
 80125de:	f000 f963 	bl	80128a8 <etharp_request>
 80125e2:	4603      	mov	r3, r0
 80125e4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	d102      	bne.n	80125f4 <etharp_query+0x124>
      return result;
 80125ee:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80125f2:	e096      	b.n	8012722 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d106      	bne.n	8012608 <etharp_query+0x138>
 80125fa:	4b4c      	ldr	r3, [pc, #304]	; (801272c <etharp_query+0x25c>)
 80125fc:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012600:	494f      	ldr	r1, [pc, #316]	; (8012740 <etharp_query+0x270>)
 8012602:	484c      	ldr	r0, [pc, #304]	; (8012734 <etharp_query+0x264>)
 8012604:	f001 fd1e 	bl	8014044 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8012608:	7c7a      	ldrb	r2, [r7, #17]
 801260a:	494b      	ldr	r1, [pc, #300]	; (8012738 <etharp_query+0x268>)
 801260c:	4613      	mov	r3, r2
 801260e:	005b      	lsls	r3, r3, #1
 8012610:	4413      	add	r3, r2
 8012612:	00db      	lsls	r3, r3, #3
 8012614:	440b      	add	r3, r1
 8012616:	3314      	adds	r3, #20
 8012618:	781b      	ldrb	r3, [r3, #0]
 801261a:	2b01      	cmp	r3, #1
 801261c:	d917      	bls.n	801264e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801261e:	4a49      	ldr	r2, [pc, #292]	; (8012744 <etharp_query+0x274>)
 8012620:	7c7b      	ldrb	r3, [r7, #17]
 8012622:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012624:	7c7a      	ldrb	r2, [r7, #17]
 8012626:	4613      	mov	r3, r2
 8012628:	005b      	lsls	r3, r3, #1
 801262a:	4413      	add	r3, r2
 801262c:	00db      	lsls	r3, r3, #3
 801262e:	3308      	adds	r3, #8
 8012630:	4a41      	ldr	r2, [pc, #260]	; (8012738 <etharp_query+0x268>)
 8012632:	4413      	add	r3, r2
 8012634:	3304      	adds	r3, #4
 8012636:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801263a:	9200      	str	r2, [sp, #0]
 801263c:	697a      	ldr	r2, [r7, #20]
 801263e:	6879      	ldr	r1, [r7, #4]
 8012640:	68f8      	ldr	r0, [r7, #12]
 8012642:	f001 fc6f 	bl	8013f24 <ethernet_output>
 8012646:	4603      	mov	r3, r0
 8012648:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801264c:	e067      	b.n	801271e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801264e:	7c7a      	ldrb	r2, [r7, #17]
 8012650:	4939      	ldr	r1, [pc, #228]	; (8012738 <etharp_query+0x268>)
 8012652:	4613      	mov	r3, r2
 8012654:	005b      	lsls	r3, r3, #1
 8012656:	4413      	add	r3, r2
 8012658:	00db      	lsls	r3, r3, #3
 801265a:	440b      	add	r3, r1
 801265c:	3314      	adds	r3, #20
 801265e:	781b      	ldrb	r3, [r3, #0]
 8012660:	2b01      	cmp	r3, #1
 8012662:	d15c      	bne.n	801271e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801266c:	e01c      	b.n	80126a8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	895a      	ldrh	r2, [r3, #10]
 8012672:	69fb      	ldr	r3, [r7, #28]
 8012674:	891b      	ldrh	r3, [r3, #8]
 8012676:	429a      	cmp	r2, r3
 8012678:	d10a      	bne.n	8012690 <etharp_query+0x1c0>
 801267a:	69fb      	ldr	r3, [r7, #28]
 801267c:	681b      	ldr	r3, [r3, #0]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d006      	beq.n	8012690 <etharp_query+0x1c0>
 8012682:	4b2a      	ldr	r3, [pc, #168]	; (801272c <etharp_query+0x25c>)
 8012684:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012688:	492f      	ldr	r1, [pc, #188]	; (8012748 <etharp_query+0x278>)
 801268a:	482a      	ldr	r0, [pc, #168]	; (8012734 <etharp_query+0x264>)
 801268c:	f001 fcda 	bl	8014044 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012690:	69fb      	ldr	r3, [r7, #28]
 8012692:	7b1b      	ldrb	r3, [r3, #12]
 8012694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012698:	2b00      	cmp	r3, #0
 801269a:	d002      	beq.n	80126a2 <etharp_query+0x1d2>
        copy_needed = 1;
 801269c:	2301      	movs	r3, #1
 801269e:	61bb      	str	r3, [r7, #24]
        break;
 80126a0:	e005      	b.n	80126ae <etharp_query+0x1de>
      }
      p = p->next;
 80126a2:	69fb      	ldr	r3, [r7, #28]
 80126a4:	681b      	ldr	r3, [r3, #0]
 80126a6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80126a8:	69fb      	ldr	r3, [r7, #28]
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d1df      	bne.n	801266e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80126ae:	69bb      	ldr	r3, [r7, #24]
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d007      	beq.n	80126c4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80126b4:	687a      	ldr	r2, [r7, #4]
 80126b6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80126ba:	200e      	movs	r0, #14
 80126bc:	f7f9 f9b4 	bl	800ba28 <pbuf_clone>
 80126c0:	61f8      	str	r0, [r7, #28]
 80126c2:	e004      	b.n	80126ce <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80126c4:	687b      	ldr	r3, [r7, #4]
 80126c6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80126c8:	69f8      	ldr	r0, [r7, #28]
 80126ca:	f7f8 ffe1 	bl	800b690 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80126ce:	69fb      	ldr	r3, [r7, #28]
 80126d0:	2b00      	cmp	r3, #0
 80126d2:	d021      	beq.n	8012718 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80126d4:	7c7a      	ldrb	r2, [r7, #17]
 80126d6:	4918      	ldr	r1, [pc, #96]	; (8012738 <etharp_query+0x268>)
 80126d8:	4613      	mov	r3, r2
 80126da:	005b      	lsls	r3, r3, #1
 80126dc:	4413      	add	r3, r2
 80126de:	00db      	lsls	r3, r3, #3
 80126e0:	440b      	add	r3, r1
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d00a      	beq.n	80126fe <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80126e8:	7c7a      	ldrb	r2, [r7, #17]
 80126ea:	4913      	ldr	r1, [pc, #76]	; (8012738 <etharp_query+0x268>)
 80126ec:	4613      	mov	r3, r2
 80126ee:	005b      	lsls	r3, r3, #1
 80126f0:	4413      	add	r3, r2
 80126f2:	00db      	lsls	r3, r3, #3
 80126f4:	440b      	add	r3, r1
 80126f6:	681b      	ldr	r3, [r3, #0]
 80126f8:	4618      	mov	r0, r3
 80126fa:	f7f8 ff29 	bl	800b550 <pbuf_free>
      }
      arp_table[i].q = p;
 80126fe:	7c7a      	ldrb	r2, [r7, #17]
 8012700:	490d      	ldr	r1, [pc, #52]	; (8012738 <etharp_query+0x268>)
 8012702:	4613      	mov	r3, r2
 8012704:	005b      	lsls	r3, r3, #1
 8012706:	4413      	add	r3, r2
 8012708:	00db      	lsls	r3, r3, #3
 801270a:	440b      	add	r3, r1
 801270c:	69fa      	ldr	r2, [r7, #28]
 801270e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012710:	2300      	movs	r3, #0
 8012712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012716:	e002      	b.n	801271e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8012718:	23ff      	movs	r3, #255	; 0xff
 801271a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801271e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012722:	4618      	mov	r0, r3
 8012724:	3728      	adds	r7, #40	; 0x28
 8012726:	46bd      	mov	sp, r7
 8012728:	bd80      	pop	{r7, pc}
 801272a:	bf00      	nop
 801272c:	080173ac 	.word	0x080173ac
 8012730:	08017558 	.word	0x08017558
 8012734:	08017424 	.word	0x08017424
 8012738:	20000120 	.word	0x20000120
 801273c:	08017568 	.word	0x08017568
 8012740:	0801754c 	.word	0x0801754c
 8012744:	20000210 	.word	0x20000210
 8012748:	08017590 	.word	0x08017590

0801274c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801274c:	b580      	push	{r7, lr}
 801274e:	b08a      	sub	sp, #40	; 0x28
 8012750:	af02      	add	r7, sp, #8
 8012752:	60f8      	str	r0, [r7, #12]
 8012754:	60b9      	str	r1, [r7, #8]
 8012756:	607a      	str	r2, [r7, #4]
 8012758:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801275a:	2300      	movs	r3, #0
 801275c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d106      	bne.n	8012772 <etharp_raw+0x26>
 8012764:	4b3a      	ldr	r3, [pc, #232]	; (8012850 <etharp_raw+0x104>)
 8012766:	f240 4257 	movw	r2, #1111	; 0x457
 801276a:	493a      	ldr	r1, [pc, #232]	; (8012854 <etharp_raw+0x108>)
 801276c:	483a      	ldr	r0, [pc, #232]	; (8012858 <etharp_raw+0x10c>)
 801276e:	f001 fc69 	bl	8014044 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012772:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012776:	211c      	movs	r1, #28
 8012778:	200e      	movs	r0, #14
 801277a:	f7f8 fc05 	bl	800af88 <pbuf_alloc>
 801277e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012780:	69bb      	ldr	r3, [r7, #24]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d102      	bne.n	801278c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012786:	f04f 33ff 	mov.w	r3, #4294967295
 801278a:	e05d      	b.n	8012848 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801278c:	69bb      	ldr	r3, [r7, #24]
 801278e:	895b      	ldrh	r3, [r3, #10]
 8012790:	2b1b      	cmp	r3, #27
 8012792:	d806      	bhi.n	80127a2 <etharp_raw+0x56>
 8012794:	4b2e      	ldr	r3, [pc, #184]	; (8012850 <etharp_raw+0x104>)
 8012796:	f240 4262 	movw	r2, #1122	; 0x462
 801279a:	4930      	ldr	r1, [pc, #192]	; (801285c <etharp_raw+0x110>)
 801279c:	482e      	ldr	r0, [pc, #184]	; (8012858 <etharp_raw+0x10c>)
 801279e:	f001 fc51 	bl	8014044 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80127a2:	69bb      	ldr	r3, [r7, #24]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80127a8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80127aa:	4618      	mov	r0, r3
 80127ac:	f7f7 fc1d 	bl	8009fea <lwip_htons>
 80127b0:	4603      	mov	r3, r0
 80127b2:	461a      	mov	r2, r3
 80127b4:	697b      	ldr	r3, [r7, #20]
 80127b6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80127b8:	68fb      	ldr	r3, [r7, #12]
 80127ba:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80127be:	2b06      	cmp	r3, #6
 80127c0:	d006      	beq.n	80127d0 <etharp_raw+0x84>
 80127c2:	4b23      	ldr	r3, [pc, #140]	; (8012850 <etharp_raw+0x104>)
 80127c4:	f240 4269 	movw	r2, #1129	; 0x469
 80127c8:	4925      	ldr	r1, [pc, #148]	; (8012860 <etharp_raw+0x114>)
 80127ca:	4823      	ldr	r0, [pc, #140]	; (8012858 <etharp_raw+0x10c>)
 80127cc:	f001 fc3a 	bl	8014044 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80127d0:	697b      	ldr	r3, [r7, #20]
 80127d2:	3308      	adds	r3, #8
 80127d4:	2206      	movs	r2, #6
 80127d6:	6839      	ldr	r1, [r7, #0]
 80127d8:	4618      	mov	r0, r3
 80127da:	f001 fc1d 	bl	8014018 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80127de:	697b      	ldr	r3, [r7, #20]
 80127e0:	3312      	adds	r3, #18
 80127e2:	2206      	movs	r2, #6
 80127e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80127e6:	4618      	mov	r0, r3
 80127e8:	f001 fc16 	bl	8014018 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80127ec:	697b      	ldr	r3, [r7, #20]
 80127ee:	330e      	adds	r3, #14
 80127f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80127f2:	6812      	ldr	r2, [r2, #0]
 80127f4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80127f6:	697b      	ldr	r3, [r7, #20]
 80127f8:	3318      	adds	r3, #24
 80127fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80127fc:	6812      	ldr	r2, [r2, #0]
 80127fe:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	2200      	movs	r2, #0
 8012804:	701a      	strb	r2, [r3, #0]
 8012806:	2200      	movs	r2, #0
 8012808:	f042 0201 	orr.w	r2, r2, #1
 801280c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	2200      	movs	r2, #0
 8012812:	f042 0208 	orr.w	r2, r2, #8
 8012816:	709a      	strb	r2, [r3, #2]
 8012818:	2200      	movs	r2, #0
 801281a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801281c:	697b      	ldr	r3, [r7, #20]
 801281e:	2206      	movs	r2, #6
 8012820:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012822:	697b      	ldr	r3, [r7, #20]
 8012824:	2204      	movs	r2, #4
 8012826:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8012828:	f640 0306 	movw	r3, #2054	; 0x806
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	68ba      	ldr	r2, [r7, #8]
 8012832:	69b9      	ldr	r1, [r7, #24]
 8012834:	68f8      	ldr	r0, [r7, #12]
 8012836:	f001 fb75 	bl	8013f24 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801283a:	69b8      	ldr	r0, [r7, #24]
 801283c:	f7f8 fe88 	bl	800b550 <pbuf_free>
  p = NULL;
 8012840:	2300      	movs	r3, #0
 8012842:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012844:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012848:	4618      	mov	r0, r3
 801284a:	3720      	adds	r7, #32
 801284c:	46bd      	mov	sp, r7
 801284e:	bd80      	pop	{r7, pc}
 8012850:	080173ac 	.word	0x080173ac
 8012854:	080174fc 	.word	0x080174fc
 8012858:	08017424 	.word	0x08017424
 801285c:	080175ac 	.word	0x080175ac
 8012860:	080175e0 	.word	0x080175e0

08012864 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012864:	b580      	push	{r7, lr}
 8012866:	b088      	sub	sp, #32
 8012868:	af04      	add	r7, sp, #16
 801286a:	60f8      	str	r0, [r7, #12]
 801286c:	60b9      	str	r1, [r7, #8]
 801286e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012880:	2201      	movs	r2, #1
 8012882:	9203      	str	r2, [sp, #12]
 8012884:	68ba      	ldr	r2, [r7, #8]
 8012886:	9202      	str	r2, [sp, #8]
 8012888:	4a06      	ldr	r2, [pc, #24]	; (80128a4 <etharp_request_dst+0x40>)
 801288a:	9201      	str	r2, [sp, #4]
 801288c:	9300      	str	r3, [sp, #0]
 801288e:	4603      	mov	r3, r0
 8012890:	687a      	ldr	r2, [r7, #4]
 8012892:	68f8      	ldr	r0, [r7, #12]
 8012894:	f7ff ff5a 	bl	801274c <etharp_raw>
 8012898:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801289a:	4618      	mov	r0, r3
 801289c:	3710      	adds	r7, #16
 801289e:	46bd      	mov	sp, r7
 80128a0:	bd80      	pop	{r7, pc}
 80128a2:	bf00      	nop
 80128a4:	08017b80 	.word	0x08017b80

080128a8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80128a8:	b580      	push	{r7, lr}
 80128aa:	b082      	sub	sp, #8
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80128b2:	4a05      	ldr	r2, [pc, #20]	; (80128c8 <etharp_request+0x20>)
 80128b4:	6839      	ldr	r1, [r7, #0]
 80128b6:	6878      	ldr	r0, [r7, #4]
 80128b8:	f7ff ffd4 	bl	8012864 <etharp_request_dst>
 80128bc:	4603      	mov	r3, r0
}
 80128be:	4618      	mov	r0, r3
 80128c0:	3708      	adds	r7, #8
 80128c2:	46bd      	mov	sp, r7
 80128c4:	bd80      	pop	{r7, pc}
 80128c6:	bf00      	nop
 80128c8:	08017b78 	.word	0x08017b78

080128cc <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b08e      	sub	sp, #56	; 0x38
 80128d0:	af04      	add	r7, sp, #16
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80128d6:	4b79      	ldr	r3, [pc, #484]	; (8012abc <icmp_input+0x1f0>)
 80128d8:	689b      	ldr	r3, [r3, #8]
 80128da:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80128dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128de:	781b      	ldrb	r3, [r3, #0]
 80128e0:	f003 030f 	and.w	r3, r3, #15
 80128e4:	b2db      	uxtb	r3, r3
 80128e6:	009b      	lsls	r3, r3, #2
 80128e8:	b2db      	uxtb	r3, r3
 80128ea:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80128ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80128ee:	2b13      	cmp	r3, #19
 80128f0:	f240 80cd 	bls.w	8012a8e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	895b      	ldrh	r3, [r3, #10]
 80128f8:	2b03      	cmp	r3, #3
 80128fa:	f240 80ca 	bls.w	8012a92 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	685b      	ldr	r3, [r3, #4]
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012908:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801290c:	2b00      	cmp	r3, #0
 801290e:	f000 80b7 	beq.w	8012a80 <icmp_input+0x1b4>
 8012912:	2b08      	cmp	r3, #8
 8012914:	f040 80b7 	bne.w	8012a86 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012918:	4b69      	ldr	r3, [pc, #420]	; (8012ac0 <icmp_input+0x1f4>)
 801291a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801291c:	4b67      	ldr	r3, [pc, #412]	; (8012abc <icmp_input+0x1f0>)
 801291e:	695b      	ldr	r3, [r3, #20]
 8012920:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012924:	2be0      	cmp	r3, #224	; 0xe0
 8012926:	f000 80bb 	beq.w	8012aa0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801292a:	4b64      	ldr	r3, [pc, #400]	; (8012abc <icmp_input+0x1f0>)
 801292c:	695b      	ldr	r3, [r3, #20]
 801292e:	4a63      	ldr	r2, [pc, #396]	; (8012abc <icmp_input+0x1f0>)
 8012930:	6812      	ldr	r2, [r2, #0]
 8012932:	4611      	mov	r1, r2
 8012934:	4618      	mov	r0, r3
 8012936:	f000 fbed 	bl	8013114 <ip4_addr_isbroadcast_u32>
 801293a:	4603      	mov	r3, r0
 801293c:	2b00      	cmp	r3, #0
 801293e:	f040 80b1 	bne.w	8012aa4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	891b      	ldrh	r3, [r3, #8]
 8012946:	2b07      	cmp	r3, #7
 8012948:	f240 80a5 	bls.w	8012a96 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801294c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801294e:	330e      	adds	r3, #14
 8012950:	4619      	mov	r1, r3
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f7f8 fd66 	bl	800b424 <pbuf_add_header>
 8012958:	4603      	mov	r3, r0
 801295a:	2b00      	cmp	r3, #0
 801295c:	d04b      	beq.n	80129f6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	891a      	ldrh	r2, [r3, #8]
 8012962:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012964:	4413      	add	r3, r2
 8012966:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012968:	687b      	ldr	r3, [r7, #4]
 801296a:	891b      	ldrh	r3, [r3, #8]
 801296c:	8b7a      	ldrh	r2, [r7, #26]
 801296e:	429a      	cmp	r2, r3
 8012970:	f0c0 809a 	bcc.w	8012aa8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012974:	8b7b      	ldrh	r3, [r7, #26]
 8012976:	f44f 7220 	mov.w	r2, #640	; 0x280
 801297a:	4619      	mov	r1, r3
 801297c:	200e      	movs	r0, #14
 801297e:	f7f8 fb03 	bl	800af88 <pbuf_alloc>
 8012982:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	2b00      	cmp	r3, #0
 8012988:	f000 8090 	beq.w	8012aac <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801298c:	697b      	ldr	r3, [r7, #20]
 801298e:	895b      	ldrh	r3, [r3, #10]
 8012990:	461a      	mov	r2, r3
 8012992:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012994:	3308      	adds	r3, #8
 8012996:	429a      	cmp	r2, r3
 8012998:	d203      	bcs.n	80129a2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801299a:	6978      	ldr	r0, [r7, #20]
 801299c:	f7f8 fdd8 	bl	800b550 <pbuf_free>
          goto icmperr;
 80129a0:	e085      	b.n	8012aae <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80129a2:	697b      	ldr	r3, [r7, #20]
 80129a4:	685b      	ldr	r3, [r3, #4]
 80129a6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80129a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80129aa:	4618      	mov	r0, r3
 80129ac:	f001 fb34 	bl	8014018 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80129b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129b2:	4619      	mov	r1, r3
 80129b4:	6978      	ldr	r0, [r7, #20]
 80129b6:	f7f8 fd45 	bl	800b444 <pbuf_remove_header>
 80129ba:	4603      	mov	r3, r0
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d009      	beq.n	80129d4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80129c0:	4b40      	ldr	r3, [pc, #256]	; (8012ac4 <icmp_input+0x1f8>)
 80129c2:	22b6      	movs	r2, #182	; 0xb6
 80129c4:	4940      	ldr	r1, [pc, #256]	; (8012ac8 <icmp_input+0x1fc>)
 80129c6:	4841      	ldr	r0, [pc, #260]	; (8012acc <icmp_input+0x200>)
 80129c8:	f001 fb3c 	bl	8014044 <iprintf>
          pbuf_free(r);
 80129cc:	6978      	ldr	r0, [r7, #20]
 80129ce:	f7f8 fdbf 	bl	800b550 <pbuf_free>
          goto icmperr;
 80129d2:	e06c      	b.n	8012aae <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80129d4:	6879      	ldr	r1, [r7, #4]
 80129d6:	6978      	ldr	r0, [r7, #20]
 80129d8:	f7f8 fee2 	bl	800b7a0 <pbuf_copy>
 80129dc:	4603      	mov	r3, r0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d003      	beq.n	80129ea <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80129e2:	6978      	ldr	r0, [r7, #20]
 80129e4:	f7f8 fdb4 	bl	800b550 <pbuf_free>
          goto icmperr;
 80129e8:	e061      	b.n	8012aae <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80129ea:	6878      	ldr	r0, [r7, #4]
 80129ec:	f7f8 fdb0 	bl	800b550 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	607b      	str	r3, [r7, #4]
 80129f4:	e00f      	b.n	8012a16 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80129f6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80129f8:	330e      	adds	r3, #14
 80129fa:	4619      	mov	r1, r3
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f7f8 fd21 	bl	800b444 <pbuf_remove_header>
 8012a02:	4603      	mov	r3, r0
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d006      	beq.n	8012a16 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012a08:	4b2e      	ldr	r3, [pc, #184]	; (8012ac4 <icmp_input+0x1f8>)
 8012a0a:	22c7      	movs	r2, #199	; 0xc7
 8012a0c:	4930      	ldr	r1, [pc, #192]	; (8012ad0 <icmp_input+0x204>)
 8012a0e:	482f      	ldr	r0, [pc, #188]	; (8012acc <icmp_input+0x200>)
 8012a10:	f001 fb18 	bl	8014044 <iprintf>
          goto icmperr;
 8012a14:	e04b      	b.n	8012aae <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	685b      	ldr	r3, [r3, #4]
 8012a1a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012a1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a1e:	4619      	mov	r1, r3
 8012a20:	6878      	ldr	r0, [r7, #4]
 8012a22:	f7f8 fcff 	bl	800b424 <pbuf_add_header>
 8012a26:	4603      	mov	r3, r0
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d12b      	bne.n	8012a84 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012a2c:	687b      	ldr	r3, [r7, #4]
 8012a2e:	685b      	ldr	r3, [r3, #4]
 8012a30:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012a32:	69fb      	ldr	r3, [r7, #28]
 8012a34:	681a      	ldr	r2, [r3, #0]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012a3a:	4b20      	ldr	r3, [pc, #128]	; (8012abc <icmp_input+0x1f0>)
 8012a3c:	691a      	ldr	r2, [r3, #16]
 8012a3e:	68fb      	ldr	r3, [r7, #12]
 8012a40:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012a42:	693b      	ldr	r3, [r7, #16]
 8012a44:	2200      	movs	r2, #0
 8012a46:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	709a      	strb	r2, [r3, #2]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012a52:	68fb      	ldr	r3, [r7, #12]
 8012a54:	22ff      	movs	r2, #255	; 0xff
 8012a56:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012a58:	68fb      	ldr	r3, [r7, #12]
 8012a5a:	2200      	movs	r2, #0
 8012a5c:	729a      	strb	r2, [r3, #10]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012a62:	683b      	ldr	r3, [r7, #0]
 8012a64:	9302      	str	r3, [sp, #8]
 8012a66:	2301      	movs	r3, #1
 8012a68:	9301      	str	r3, [sp, #4]
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	9300      	str	r3, [sp, #0]
 8012a6e:	23ff      	movs	r3, #255	; 0xff
 8012a70:	2200      	movs	r2, #0
 8012a72:	69f9      	ldr	r1, [r7, #28]
 8012a74:	6878      	ldr	r0, [r7, #4]
 8012a76:	f000 fa75 	bl	8012f64 <ip4_output_if>
 8012a7a:	4603      	mov	r3, r0
 8012a7c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012a7e:	e001      	b.n	8012a84 <icmp_input+0x1b8>
      break;
 8012a80:	bf00      	nop
 8012a82:	e000      	b.n	8012a86 <icmp_input+0x1ba>
      break;
 8012a84:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f7f8 fd62 	bl	800b550 <pbuf_free>
  return;
 8012a8c:	e013      	b.n	8012ab6 <icmp_input+0x1ea>
    goto lenerr;
 8012a8e:	bf00      	nop
 8012a90:	e002      	b.n	8012a98 <icmp_input+0x1cc>
    goto lenerr;
 8012a92:	bf00      	nop
 8012a94:	e000      	b.n	8012a98 <icmp_input+0x1cc>
        goto lenerr;
 8012a96:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012a98:	6878      	ldr	r0, [r7, #4]
 8012a9a:	f7f8 fd59 	bl	800b550 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012a9e:	e00a      	b.n	8012ab6 <icmp_input+0x1ea>
        goto icmperr;
 8012aa0:	bf00      	nop
 8012aa2:	e004      	b.n	8012aae <icmp_input+0x1e2>
        goto icmperr;
 8012aa4:	bf00      	nop
 8012aa6:	e002      	b.n	8012aae <icmp_input+0x1e2>
          goto icmperr;
 8012aa8:	bf00      	nop
 8012aaa:	e000      	b.n	8012aae <icmp_input+0x1e2>
          goto icmperr;
 8012aac:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012aae:	6878      	ldr	r0, [r7, #4]
 8012ab0:	f7f8 fd4e 	bl	800b550 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012ab4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012ab6:	3728      	adds	r7, #40	; 0x28
 8012ab8:	46bd      	mov	sp, r7
 8012aba:	bd80      	pop	{r7, pc}
 8012abc:	20003cc0 	.word	0x20003cc0
 8012ac0:	20003cd4 	.word	0x20003cd4
 8012ac4:	08017624 	.word	0x08017624
 8012ac8:	0801765c 	.word	0x0801765c
 8012acc:	08017694 	.word	0x08017694
 8012ad0:	080176bc 	.word	0x080176bc

08012ad4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b082      	sub	sp, #8
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	6078      	str	r0, [r7, #4]
 8012adc:	460b      	mov	r3, r1
 8012ade:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012ae0:	78fb      	ldrb	r3, [r7, #3]
 8012ae2:	461a      	mov	r2, r3
 8012ae4:	2103      	movs	r1, #3
 8012ae6:	6878      	ldr	r0, [r7, #4]
 8012ae8:	f000 f814 	bl	8012b14 <icmp_send_response>
}
 8012aec:	bf00      	nop
 8012aee:	3708      	adds	r7, #8
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd80      	pop	{r7, pc}

08012af4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012af4:	b580      	push	{r7, lr}
 8012af6:	b082      	sub	sp, #8
 8012af8:	af00      	add	r7, sp, #0
 8012afa:	6078      	str	r0, [r7, #4]
 8012afc:	460b      	mov	r3, r1
 8012afe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012b00:	78fb      	ldrb	r3, [r7, #3]
 8012b02:	461a      	mov	r2, r3
 8012b04:	210b      	movs	r1, #11
 8012b06:	6878      	ldr	r0, [r7, #4]
 8012b08:	f000 f804 	bl	8012b14 <icmp_send_response>
}
 8012b0c:	bf00      	nop
 8012b0e:	3708      	adds	r7, #8
 8012b10:	46bd      	mov	sp, r7
 8012b12:	bd80      	pop	{r7, pc}

08012b14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012b14:	b580      	push	{r7, lr}
 8012b16:	b08c      	sub	sp, #48	; 0x30
 8012b18:	af04      	add	r7, sp, #16
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	460b      	mov	r3, r1
 8012b1e:	70fb      	strb	r3, [r7, #3]
 8012b20:	4613      	mov	r3, r2
 8012b22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012b24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012b28:	2124      	movs	r1, #36	; 0x24
 8012b2a:	2022      	movs	r0, #34	; 0x22
 8012b2c:	f7f8 fa2c 	bl	800af88 <pbuf_alloc>
 8012b30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012b32:	69fb      	ldr	r3, [r7, #28]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d04c      	beq.n	8012bd2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012b38:	69fb      	ldr	r3, [r7, #28]
 8012b3a:	895b      	ldrh	r3, [r3, #10]
 8012b3c:	2b23      	cmp	r3, #35	; 0x23
 8012b3e:	d806      	bhi.n	8012b4e <icmp_send_response+0x3a>
 8012b40:	4b26      	ldr	r3, [pc, #152]	; (8012bdc <icmp_send_response+0xc8>)
 8012b42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012b46:	4926      	ldr	r1, [pc, #152]	; (8012be0 <icmp_send_response+0xcc>)
 8012b48:	4826      	ldr	r0, [pc, #152]	; (8012be4 <icmp_send_response+0xd0>)
 8012b4a:	f001 fa7b 	bl	8014044 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	685b      	ldr	r3, [r3, #4]
 8012b52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012b54:	69fb      	ldr	r3, [r7, #28]
 8012b56:	685b      	ldr	r3, [r3, #4]
 8012b58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	78fa      	ldrb	r2, [r7, #3]
 8012b5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	78ba      	ldrb	r2, [r7, #2]
 8012b64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012b66:	697b      	ldr	r3, [r7, #20]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	711a      	strb	r2, [r3, #4]
 8012b6c:	2200      	movs	r2, #0
 8012b6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	2200      	movs	r2, #0
 8012b74:	719a      	strb	r2, [r3, #6]
 8012b76:	2200      	movs	r2, #0
 8012b78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012b7a:	69fb      	ldr	r3, [r7, #28]
 8012b7c:	685b      	ldr	r3, [r3, #4]
 8012b7e:	f103 0008 	add.w	r0, r3, #8
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	685b      	ldr	r3, [r3, #4]
 8012b86:	221c      	movs	r2, #28
 8012b88:	4619      	mov	r1, r3
 8012b8a:	f001 fa45 	bl	8014018 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012b8e:	69bb      	ldr	r3, [r7, #24]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012b94:	f107 030c 	add.w	r3, r7, #12
 8012b98:	4618      	mov	r0, r3
 8012b9a:	f000 f825 	bl	8012be8 <ip4_route>
 8012b9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012ba0:	693b      	ldr	r3, [r7, #16]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d011      	beq.n	8012bca <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012ba6:	697b      	ldr	r3, [r7, #20]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	709a      	strb	r2, [r3, #2]
 8012bac:	2200      	movs	r2, #0
 8012bae:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012bb0:	f107 020c 	add.w	r2, r7, #12
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	9302      	str	r3, [sp, #8]
 8012bb8:	2301      	movs	r3, #1
 8012bba:	9301      	str	r3, [sp, #4]
 8012bbc:	2300      	movs	r3, #0
 8012bbe:	9300      	str	r3, [sp, #0]
 8012bc0:	23ff      	movs	r3, #255	; 0xff
 8012bc2:	2100      	movs	r1, #0
 8012bc4:	69f8      	ldr	r0, [r7, #28]
 8012bc6:	f000 f9cd 	bl	8012f64 <ip4_output_if>
  }
  pbuf_free(q);
 8012bca:	69f8      	ldr	r0, [r7, #28]
 8012bcc:	f7f8 fcc0 	bl	800b550 <pbuf_free>
 8012bd0:	e000      	b.n	8012bd4 <icmp_send_response+0xc0>
    return;
 8012bd2:	bf00      	nop
}
 8012bd4:	3720      	adds	r7, #32
 8012bd6:	46bd      	mov	sp, r7
 8012bd8:	bd80      	pop	{r7, pc}
 8012bda:	bf00      	nop
 8012bdc:	08017624 	.word	0x08017624
 8012be0:	080176f0 	.word	0x080176f0
 8012be4:	08017694 	.word	0x08017694

08012be8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012be8:	b480      	push	{r7}
 8012bea:	b085      	sub	sp, #20
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012bf0:	4b33      	ldr	r3, [pc, #204]	; (8012cc0 <ip4_route+0xd8>)
 8012bf2:	681b      	ldr	r3, [r3, #0]
 8012bf4:	60fb      	str	r3, [r7, #12]
 8012bf6:	e036      	b.n	8012c66 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bfe:	f003 0301 	and.w	r3, r3, #1
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	2b00      	cmp	r3, #0
 8012c06:	d02b      	beq.n	8012c60 <ip4_route+0x78>
 8012c08:	68fb      	ldr	r3, [r7, #12]
 8012c0a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c0e:	089b      	lsrs	r3, r3, #2
 8012c10:	f003 0301 	and.w	r3, r3, #1
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d022      	beq.n	8012c60 <ip4_route+0x78>
 8012c1a:	68fb      	ldr	r3, [r7, #12]
 8012c1c:	3304      	adds	r3, #4
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d01d      	beq.n	8012c60 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	681a      	ldr	r2, [r3, #0]
 8012c28:	68fb      	ldr	r3, [r7, #12]
 8012c2a:	3304      	adds	r3, #4
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	405a      	eors	r2, r3
 8012c30:	68fb      	ldr	r3, [r7, #12]
 8012c32:	3308      	adds	r3, #8
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	4013      	ands	r3, r2
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d101      	bne.n	8012c40 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012c3c:	68fb      	ldr	r3, [r7, #12]
 8012c3e:	e038      	b.n	8012cb2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c46:	f003 0302 	and.w	r3, r3, #2
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d108      	bne.n	8012c60 <ip4_route+0x78>
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681a      	ldr	r2, [r3, #0]
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	330c      	adds	r3, #12
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	429a      	cmp	r2, r3
 8012c5a:	d101      	bne.n	8012c60 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012c5c:	68fb      	ldr	r3, [r7, #12]
 8012c5e:	e028      	b.n	8012cb2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012c60:	68fb      	ldr	r3, [r7, #12]
 8012c62:	681b      	ldr	r3, [r3, #0]
 8012c64:	60fb      	str	r3, [r7, #12]
 8012c66:	68fb      	ldr	r3, [r7, #12]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d1c5      	bne.n	8012bf8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012c6c:	4b15      	ldr	r3, [pc, #84]	; (8012cc4 <ip4_route+0xdc>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d01a      	beq.n	8012caa <ip4_route+0xc2>
 8012c74:	4b13      	ldr	r3, [pc, #76]	; (8012cc4 <ip4_route+0xdc>)
 8012c76:	681b      	ldr	r3, [r3, #0]
 8012c78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c7c:	f003 0301 	and.w	r3, r3, #1
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d012      	beq.n	8012caa <ip4_route+0xc2>
 8012c84:	4b0f      	ldr	r3, [pc, #60]	; (8012cc4 <ip4_route+0xdc>)
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c8c:	f003 0304 	and.w	r3, r3, #4
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d00a      	beq.n	8012caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012c94:	4b0b      	ldr	r3, [pc, #44]	; (8012cc4 <ip4_route+0xdc>)
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	3304      	adds	r3, #4
 8012c9a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012c9c:	2b00      	cmp	r3, #0
 8012c9e:	d004      	beq.n	8012caa <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012ca0:	687b      	ldr	r3, [r7, #4]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	b2db      	uxtb	r3, r3
 8012ca6:	2b7f      	cmp	r3, #127	; 0x7f
 8012ca8:	d101      	bne.n	8012cae <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012caa:	2300      	movs	r3, #0
 8012cac:	e001      	b.n	8012cb2 <ip4_route+0xca>
  }

  return netif_default;
 8012cae:	4b05      	ldr	r3, [pc, #20]	; (8012cc4 <ip4_route+0xdc>)
 8012cb0:	681b      	ldr	r3, [r3, #0]
}
 8012cb2:	4618      	mov	r0, r3
 8012cb4:	3714      	adds	r7, #20
 8012cb6:	46bd      	mov	sp, r7
 8012cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cbc:	4770      	bx	lr
 8012cbe:	bf00      	nop
 8012cc0:	200071f4 	.word	0x200071f4
 8012cc4:	200071f8 	.word	0x200071f8

08012cc8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
 8012cce:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cd6:	f003 0301 	and.w	r3, r3, #1
 8012cda:	b2db      	uxtb	r3, r3
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d016      	beq.n	8012d0e <ip4_input_accept+0x46>
 8012ce0:	687b      	ldr	r3, [r7, #4]
 8012ce2:	3304      	adds	r3, #4
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d011      	beq.n	8012d0e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012cea:	4b0b      	ldr	r3, [pc, #44]	; (8012d18 <ip4_input_accept+0x50>)
 8012cec:	695a      	ldr	r2, [r3, #20]
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	3304      	adds	r3, #4
 8012cf2:	681b      	ldr	r3, [r3, #0]
 8012cf4:	429a      	cmp	r2, r3
 8012cf6:	d008      	beq.n	8012d0a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012cf8:	4b07      	ldr	r3, [pc, #28]	; (8012d18 <ip4_input_accept+0x50>)
 8012cfa:	695b      	ldr	r3, [r3, #20]
 8012cfc:	6879      	ldr	r1, [r7, #4]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f000 fa08 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8012d04:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	d001      	beq.n	8012d0e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012d0a:	2301      	movs	r3, #1
 8012d0c:	e000      	b.n	8012d10 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012d0e:	2300      	movs	r3, #0
}
 8012d10:	4618      	mov	r0, r3
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	20003cc0 	.word	0x20003cc0

08012d1c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b086      	sub	sp, #24
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
 8012d24:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012d26:	687b      	ldr	r3, [r7, #4]
 8012d28:	685b      	ldr	r3, [r3, #4]
 8012d2a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012d2c:	697b      	ldr	r3, [r7, #20]
 8012d2e:	781b      	ldrb	r3, [r3, #0]
 8012d30:	091b      	lsrs	r3, r3, #4
 8012d32:	b2db      	uxtb	r3, r3
 8012d34:	2b04      	cmp	r3, #4
 8012d36:	d004      	beq.n	8012d42 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012d38:	6878      	ldr	r0, [r7, #4]
 8012d3a:	f7f8 fc09 	bl	800b550 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012d3e:	2300      	movs	r3, #0
 8012d40:	e107      	b.n	8012f52 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	f003 030f 	and.w	r3, r3, #15
 8012d4a:	b2db      	uxtb	r3, r3
 8012d4c:	009b      	lsls	r3, r3, #2
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	885b      	ldrh	r3, [r3, #2]
 8012d56:	b29b      	uxth	r3, r3
 8012d58:	4618      	mov	r0, r3
 8012d5a:	f7f7 f946 	bl	8009fea <lwip_htons>
 8012d5e:	4603      	mov	r3, r0
 8012d60:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	891b      	ldrh	r3, [r3, #8]
 8012d66:	89ba      	ldrh	r2, [r7, #12]
 8012d68:	429a      	cmp	r2, r3
 8012d6a:	d204      	bcs.n	8012d76 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012d6c:	89bb      	ldrh	r3, [r7, #12]
 8012d6e:	4619      	mov	r1, r3
 8012d70:	6878      	ldr	r0, [r7, #4]
 8012d72:	f7f8 fa67 	bl	800b244 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	895b      	ldrh	r3, [r3, #10]
 8012d7a:	89fa      	ldrh	r2, [r7, #14]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d807      	bhi.n	8012d90 <ip4_input+0x74>
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	891b      	ldrh	r3, [r3, #8]
 8012d84:	89ba      	ldrh	r2, [r7, #12]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d802      	bhi.n	8012d90 <ip4_input+0x74>
 8012d8a:	89fb      	ldrh	r3, [r7, #14]
 8012d8c:	2b13      	cmp	r3, #19
 8012d8e:	d804      	bhi.n	8012d9a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012d90:	6878      	ldr	r0, [r7, #4]
 8012d92:	f7f8 fbdd 	bl	800b550 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012d96:	2300      	movs	r3, #0
 8012d98:	e0db      	b.n	8012f52 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012d9a:	697b      	ldr	r3, [r7, #20]
 8012d9c:	691b      	ldr	r3, [r3, #16]
 8012d9e:	4a6f      	ldr	r2, [pc, #444]	; (8012f5c <ip4_input+0x240>)
 8012da0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012da2:	697b      	ldr	r3, [r7, #20]
 8012da4:	68db      	ldr	r3, [r3, #12]
 8012da6:	4a6d      	ldr	r2, [pc, #436]	; (8012f5c <ip4_input+0x240>)
 8012da8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012daa:	4b6c      	ldr	r3, [pc, #432]	; (8012f5c <ip4_input+0x240>)
 8012dac:	695b      	ldr	r3, [r3, #20]
 8012dae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012db2:	2be0      	cmp	r3, #224	; 0xe0
 8012db4:	d112      	bne.n	8012ddc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dbc:	f003 0301 	and.w	r3, r3, #1
 8012dc0:	b2db      	uxtb	r3, r3
 8012dc2:	2b00      	cmp	r3, #0
 8012dc4:	d007      	beq.n	8012dd6 <ip4_input+0xba>
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	3304      	adds	r3, #4
 8012dca:	681b      	ldr	r3, [r3, #0]
 8012dcc:	2b00      	cmp	r3, #0
 8012dce:	d002      	beq.n	8012dd6 <ip4_input+0xba>
      netif = inp;
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	613b      	str	r3, [r7, #16]
 8012dd4:	e02a      	b.n	8012e2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012dd6:	2300      	movs	r3, #0
 8012dd8:	613b      	str	r3, [r7, #16]
 8012dda:	e027      	b.n	8012e2c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012ddc:	6838      	ldr	r0, [r7, #0]
 8012dde:	f7ff ff73 	bl	8012cc8 <ip4_input_accept>
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d002      	beq.n	8012dee <ip4_input+0xd2>
      netif = inp;
 8012de8:	683b      	ldr	r3, [r7, #0]
 8012dea:	613b      	str	r3, [r7, #16]
 8012dec:	e01e      	b.n	8012e2c <ip4_input+0x110>
    } else {
      netif = NULL;
 8012dee:	2300      	movs	r3, #0
 8012df0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012df2:	4b5a      	ldr	r3, [pc, #360]	; (8012f5c <ip4_input+0x240>)
 8012df4:	695b      	ldr	r3, [r3, #20]
 8012df6:	b2db      	uxtb	r3, r3
 8012df8:	2b7f      	cmp	r3, #127	; 0x7f
 8012dfa:	d017      	beq.n	8012e2c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012dfc:	4b58      	ldr	r3, [pc, #352]	; (8012f60 <ip4_input+0x244>)
 8012dfe:	681b      	ldr	r3, [r3, #0]
 8012e00:	613b      	str	r3, [r7, #16]
 8012e02:	e00e      	b.n	8012e22 <ip4_input+0x106>
          if (netif == inp) {
 8012e04:	693a      	ldr	r2, [r7, #16]
 8012e06:	683b      	ldr	r3, [r7, #0]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	d006      	beq.n	8012e1a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012e0c:	6938      	ldr	r0, [r7, #16]
 8012e0e:	f7ff ff5b 	bl	8012cc8 <ip4_input_accept>
 8012e12:	4603      	mov	r3, r0
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d108      	bne.n	8012e2a <ip4_input+0x10e>
 8012e18:	e000      	b.n	8012e1c <ip4_input+0x100>
            continue;
 8012e1a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012e1c:	693b      	ldr	r3, [r7, #16]
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	613b      	str	r3, [r7, #16]
 8012e22:	693b      	ldr	r3, [r7, #16]
 8012e24:	2b00      	cmp	r3, #0
 8012e26:	d1ed      	bne.n	8012e04 <ip4_input+0xe8>
 8012e28:	e000      	b.n	8012e2c <ip4_input+0x110>
            break;
 8012e2a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e2c:	4b4b      	ldr	r3, [pc, #300]	; (8012f5c <ip4_input+0x240>)
 8012e2e:	691b      	ldr	r3, [r3, #16]
 8012e30:	6839      	ldr	r1, [r7, #0]
 8012e32:	4618      	mov	r0, r3
 8012e34:	f000 f96e 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8012e38:	4603      	mov	r3, r0
 8012e3a:	2b00      	cmp	r3, #0
 8012e3c:	d105      	bne.n	8012e4a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012e3e:	4b47      	ldr	r3, [pc, #284]	; (8012f5c <ip4_input+0x240>)
 8012e40:	691b      	ldr	r3, [r3, #16]
 8012e42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012e46:	2be0      	cmp	r3, #224	; 0xe0
 8012e48:	d104      	bne.n	8012e54 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f7f8 fb80 	bl	800b550 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012e50:	2300      	movs	r3, #0
 8012e52:	e07e      	b.n	8012f52 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012e54:	693b      	ldr	r3, [r7, #16]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d104      	bne.n	8012e64 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012e5a:	6878      	ldr	r0, [r7, #4]
 8012e5c:	f7f8 fb78 	bl	800b550 <pbuf_free>
    return ERR_OK;
 8012e60:	2300      	movs	r3, #0
 8012e62:	e076      	b.n	8012f52 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012e64:	697b      	ldr	r3, [r7, #20]
 8012e66:	88db      	ldrh	r3, [r3, #6]
 8012e68:	b29b      	uxth	r3, r3
 8012e6a:	461a      	mov	r2, r3
 8012e6c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012e70:	4013      	ands	r3, r2
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00b      	beq.n	8012e8e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 fc92 	bl	80137a0 <ip4_reass>
 8012e7c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2b00      	cmp	r3, #0
 8012e82:	d101      	bne.n	8012e88 <ip4_input+0x16c>
      return ERR_OK;
 8012e84:	2300      	movs	r3, #0
 8012e86:	e064      	b.n	8012f52 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012e88:	687b      	ldr	r3, [r7, #4]
 8012e8a:	685b      	ldr	r3, [r3, #4]
 8012e8c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012e8e:	4a33      	ldr	r2, [pc, #204]	; (8012f5c <ip4_input+0x240>)
 8012e90:	693b      	ldr	r3, [r7, #16]
 8012e92:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012e94:	4a31      	ldr	r2, [pc, #196]	; (8012f5c <ip4_input+0x240>)
 8012e96:	683b      	ldr	r3, [r7, #0]
 8012e98:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012e9a:	4a30      	ldr	r2, [pc, #192]	; (8012f5c <ip4_input+0x240>)
 8012e9c:	697b      	ldr	r3, [r7, #20]
 8012e9e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012ea0:	697b      	ldr	r3, [r7, #20]
 8012ea2:	781b      	ldrb	r3, [r3, #0]
 8012ea4:	f003 030f 	and.w	r3, r3, #15
 8012ea8:	b2db      	uxtb	r3, r3
 8012eaa:	009b      	lsls	r3, r3, #2
 8012eac:	b2db      	uxtb	r3, r3
 8012eae:	b29a      	uxth	r2, r3
 8012eb0:	4b2a      	ldr	r3, [pc, #168]	; (8012f5c <ip4_input+0x240>)
 8012eb2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012eb4:	89fb      	ldrh	r3, [r7, #14]
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	6878      	ldr	r0, [r7, #4]
 8012eba:	f7f8 fac3 	bl	800b444 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	7a5b      	ldrb	r3, [r3, #9]
 8012ec2:	2b11      	cmp	r3, #17
 8012ec4:	d006      	beq.n	8012ed4 <ip4_input+0x1b8>
 8012ec6:	2b11      	cmp	r3, #17
 8012ec8:	dc13      	bgt.n	8012ef2 <ip4_input+0x1d6>
 8012eca:	2b01      	cmp	r3, #1
 8012ecc:	d00c      	beq.n	8012ee8 <ip4_input+0x1cc>
 8012ece:	2b06      	cmp	r3, #6
 8012ed0:	d005      	beq.n	8012ede <ip4_input+0x1c2>
 8012ed2:	e00e      	b.n	8012ef2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012ed4:	6839      	ldr	r1, [r7, #0]
 8012ed6:	6878      	ldr	r0, [r7, #4]
 8012ed8:	f7fe f928 	bl	801112c <udp_input>
        break;
 8012edc:	e026      	b.n	8012f2c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012ede:	6839      	ldr	r1, [r7, #0]
 8012ee0:	6878      	ldr	r0, [r7, #4]
 8012ee2:	f7fa f96d 	bl	800d1c0 <tcp_input>
        break;
 8012ee6:	e021      	b.n	8012f2c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012ee8:	6839      	ldr	r1, [r7, #0]
 8012eea:	6878      	ldr	r0, [r7, #4]
 8012eec:	f7ff fcee 	bl	80128cc <icmp_input>
        break;
 8012ef0:	e01c      	b.n	8012f2c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012ef2:	4b1a      	ldr	r3, [pc, #104]	; (8012f5c <ip4_input+0x240>)
 8012ef4:	695b      	ldr	r3, [r3, #20]
 8012ef6:	6939      	ldr	r1, [r7, #16]
 8012ef8:	4618      	mov	r0, r3
 8012efa:	f000 f90b 	bl	8013114 <ip4_addr_isbroadcast_u32>
 8012efe:	4603      	mov	r3, r0
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d10f      	bne.n	8012f24 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012f04:	4b15      	ldr	r3, [pc, #84]	; (8012f5c <ip4_input+0x240>)
 8012f06:	695b      	ldr	r3, [r3, #20]
 8012f08:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012f0c:	2be0      	cmp	r3, #224	; 0xe0
 8012f0e:	d009      	beq.n	8012f24 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012f10:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012f14:	4619      	mov	r1, r3
 8012f16:	6878      	ldr	r0, [r7, #4]
 8012f18:	f7f8 fb07 	bl	800b52a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012f1c:	2102      	movs	r1, #2
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f7ff fdd8 	bl	8012ad4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012f24:	6878      	ldr	r0, [r7, #4]
 8012f26:	f7f8 fb13 	bl	800b550 <pbuf_free>
        break;
 8012f2a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012f2c:	4b0b      	ldr	r3, [pc, #44]	; (8012f5c <ip4_input+0x240>)
 8012f2e:	2200      	movs	r2, #0
 8012f30:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012f32:	4b0a      	ldr	r3, [pc, #40]	; (8012f5c <ip4_input+0x240>)
 8012f34:	2200      	movs	r2, #0
 8012f36:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012f38:	4b08      	ldr	r3, [pc, #32]	; (8012f5c <ip4_input+0x240>)
 8012f3a:	2200      	movs	r2, #0
 8012f3c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012f3e:	4b07      	ldr	r3, [pc, #28]	; (8012f5c <ip4_input+0x240>)
 8012f40:	2200      	movs	r2, #0
 8012f42:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012f44:	4b05      	ldr	r3, [pc, #20]	; (8012f5c <ip4_input+0x240>)
 8012f46:	2200      	movs	r2, #0
 8012f48:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012f4a:	4b04      	ldr	r3, [pc, #16]	; (8012f5c <ip4_input+0x240>)
 8012f4c:	2200      	movs	r2, #0
 8012f4e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	3718      	adds	r7, #24
 8012f56:	46bd      	mov	sp, r7
 8012f58:	bd80      	pop	{r7, pc}
 8012f5a:	bf00      	nop
 8012f5c:	20003cc0 	.word	0x20003cc0
 8012f60:	200071f4 	.word	0x200071f4

08012f64 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012f64:	b580      	push	{r7, lr}
 8012f66:	b08a      	sub	sp, #40	; 0x28
 8012f68:	af04      	add	r7, sp, #16
 8012f6a:	60f8      	str	r0, [r7, #12]
 8012f6c:	60b9      	str	r1, [r7, #8]
 8012f6e:	607a      	str	r2, [r7, #4]
 8012f70:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012f76:	687b      	ldr	r3, [r7, #4]
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d009      	beq.n	8012f90 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012f7c:	68bb      	ldr	r3, [r7, #8]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d003      	beq.n	8012f8a <ip4_output_if+0x26>
 8012f82:	68bb      	ldr	r3, [r7, #8]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	2b00      	cmp	r3, #0
 8012f88:	d102      	bne.n	8012f90 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f8c:	3304      	adds	r3, #4
 8012f8e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012f90:	78fa      	ldrb	r2, [r7, #3]
 8012f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f94:	9302      	str	r3, [sp, #8]
 8012f96:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012f9a:	9301      	str	r3, [sp, #4]
 8012f9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012fa0:	9300      	str	r3, [sp, #0]
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	687a      	ldr	r2, [r7, #4]
 8012fa6:	6979      	ldr	r1, [r7, #20]
 8012fa8:	68f8      	ldr	r0, [r7, #12]
 8012faa:	f000 f805 	bl	8012fb8 <ip4_output_if_src>
 8012fae:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012fb0:	4618      	mov	r0, r3
 8012fb2:	3718      	adds	r7, #24
 8012fb4:	46bd      	mov	sp, r7
 8012fb6:	bd80      	pop	{r7, pc}

08012fb8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012fb8:	b580      	push	{r7, lr}
 8012fba:	b088      	sub	sp, #32
 8012fbc:	af00      	add	r7, sp, #0
 8012fbe:	60f8      	str	r0, [r7, #12]
 8012fc0:	60b9      	str	r1, [r7, #8]
 8012fc2:	607a      	str	r2, [r7, #4]
 8012fc4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	7b9b      	ldrb	r3, [r3, #14]
 8012fca:	2b01      	cmp	r3, #1
 8012fcc:	d006      	beq.n	8012fdc <ip4_output_if_src+0x24>
 8012fce:	4b4b      	ldr	r3, [pc, #300]	; (80130fc <ip4_output_if_src+0x144>)
 8012fd0:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012fd4:	494a      	ldr	r1, [pc, #296]	; (8013100 <ip4_output_if_src+0x148>)
 8012fd6:	484b      	ldr	r0, [pc, #300]	; (8013104 <ip4_output_if_src+0x14c>)
 8012fd8:	f001 f834 	bl	8014044 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	d060      	beq.n	80130a4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012fe2:	2314      	movs	r3, #20
 8012fe4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012fe6:	2114      	movs	r1, #20
 8012fe8:	68f8      	ldr	r0, [r7, #12]
 8012fea:	f7f8 fa1b 	bl	800b424 <pbuf_add_header>
 8012fee:	4603      	mov	r3, r0
 8012ff0:	2b00      	cmp	r3, #0
 8012ff2:	d002      	beq.n	8012ffa <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012ff4:	f06f 0301 	mvn.w	r3, #1
 8012ff8:	e07c      	b.n	80130f4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012ffa:	68fb      	ldr	r3, [r7, #12]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013000:	68fb      	ldr	r3, [r7, #12]
 8013002:	895b      	ldrh	r3, [r3, #10]
 8013004:	2b13      	cmp	r3, #19
 8013006:	d806      	bhi.n	8013016 <ip4_output_if_src+0x5e>
 8013008:	4b3c      	ldr	r3, [pc, #240]	; (80130fc <ip4_output_if_src+0x144>)
 801300a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801300e:	493e      	ldr	r1, [pc, #248]	; (8013108 <ip4_output_if_src+0x150>)
 8013010:	483c      	ldr	r0, [pc, #240]	; (8013104 <ip4_output_if_src+0x14c>)
 8013012:	f001 f817 	bl	8014044 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8013016:	69fb      	ldr	r3, [r7, #28]
 8013018:	78fa      	ldrb	r2, [r7, #3]
 801301a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013022:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	681a      	ldr	r2, [r3, #0]
 8013028:	69fb      	ldr	r3, [r7, #28]
 801302a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801302c:	8b7b      	ldrh	r3, [r7, #26]
 801302e:	089b      	lsrs	r3, r3, #2
 8013030:	b29b      	uxth	r3, r3
 8013032:	b2db      	uxtb	r3, r3
 8013034:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013038:	b2da      	uxtb	r2, r3
 801303a:	69fb      	ldr	r3, [r7, #28]
 801303c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801303e:	69fb      	ldr	r3, [r7, #28]
 8013040:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013044:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8013046:	68fb      	ldr	r3, [r7, #12]
 8013048:	891b      	ldrh	r3, [r3, #8]
 801304a:	4618      	mov	r0, r3
 801304c:	f7f6 ffcd 	bl	8009fea <lwip_htons>
 8013050:	4603      	mov	r3, r0
 8013052:	461a      	mov	r2, r3
 8013054:	69fb      	ldr	r3, [r7, #28]
 8013056:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8013058:	69fb      	ldr	r3, [r7, #28]
 801305a:	2200      	movs	r2, #0
 801305c:	719a      	strb	r2, [r3, #6]
 801305e:	2200      	movs	r2, #0
 8013060:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013062:	4b2a      	ldr	r3, [pc, #168]	; (801310c <ip4_output_if_src+0x154>)
 8013064:	881b      	ldrh	r3, [r3, #0]
 8013066:	4618      	mov	r0, r3
 8013068:	f7f6 ffbf 	bl	8009fea <lwip_htons>
 801306c:	4603      	mov	r3, r0
 801306e:	461a      	mov	r2, r3
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013074:	4b25      	ldr	r3, [pc, #148]	; (801310c <ip4_output_if_src+0x154>)
 8013076:	881b      	ldrh	r3, [r3, #0]
 8013078:	3301      	adds	r3, #1
 801307a:	b29a      	uxth	r2, r3
 801307c:	4b23      	ldr	r3, [pc, #140]	; (801310c <ip4_output_if_src+0x154>)
 801307e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8013080:	68bb      	ldr	r3, [r7, #8]
 8013082:	2b00      	cmp	r3, #0
 8013084:	d104      	bne.n	8013090 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8013086:	4b22      	ldr	r3, [pc, #136]	; (8013110 <ip4_output_if_src+0x158>)
 8013088:	681a      	ldr	r2, [r3, #0]
 801308a:	69fb      	ldr	r3, [r7, #28]
 801308c:	60da      	str	r2, [r3, #12]
 801308e:	e003      	b.n	8013098 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	681a      	ldr	r2, [r3, #0]
 8013094:	69fb      	ldr	r3, [r7, #28]
 8013096:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8013098:	69fb      	ldr	r3, [r7, #28]
 801309a:	2200      	movs	r2, #0
 801309c:	729a      	strb	r2, [r3, #10]
 801309e:	2200      	movs	r2, #0
 80130a0:	72da      	strb	r2, [r3, #11]
 80130a2:	e00f      	b.n	80130c4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	895b      	ldrh	r3, [r3, #10]
 80130a8:	2b13      	cmp	r3, #19
 80130aa:	d802      	bhi.n	80130b2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80130ac:	f06f 0301 	mvn.w	r3, #1
 80130b0:	e020      	b.n	80130f4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80130b2:	68fb      	ldr	r3, [r7, #12]
 80130b4:	685b      	ldr	r3, [r3, #4]
 80130b6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80130b8:	69fb      	ldr	r3, [r7, #28]
 80130ba:	691b      	ldr	r3, [r3, #16]
 80130bc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80130be:	f107 0314 	add.w	r3, r7, #20
 80130c2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80130c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00c      	beq.n	80130e6 <ip4_output_if_src+0x12e>
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	891a      	ldrh	r2, [r3, #8]
 80130d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80130d4:	429a      	cmp	r2, r3
 80130d6:	d906      	bls.n	80130e6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80130d8:	687a      	ldr	r2, [r7, #4]
 80130da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80130dc:	68f8      	ldr	r0, [r7, #12]
 80130de:	f000 fd4d 	bl	8013b7c <ip4_frag>
 80130e2:	4603      	mov	r3, r0
 80130e4:	e006      	b.n	80130f4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80130e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e8:	695b      	ldr	r3, [r3, #20]
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	68f9      	ldr	r1, [r7, #12]
 80130ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80130f0:	4798      	blx	r3
 80130f2:	4603      	mov	r3, r0
}
 80130f4:	4618      	mov	r0, r3
 80130f6:	3720      	adds	r7, #32
 80130f8:	46bd      	mov	sp, r7
 80130fa:	bd80      	pop	{r7, pc}
 80130fc:	0801771c 	.word	0x0801771c
 8013100:	08017750 	.word	0x08017750
 8013104:	0801775c 	.word	0x0801775c
 8013108:	08017784 	.word	0x08017784
 801310c:	20000212 	.word	0x20000212
 8013110:	08017b74 	.word	0x08017b74

08013114 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013114:	b480      	push	{r7}
 8013116:	b085      	sub	sp, #20
 8013118:	af00      	add	r7, sp, #0
 801311a:	6078      	str	r0, [r7, #4]
 801311c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013128:	d002      	beq.n	8013130 <ip4_addr_isbroadcast_u32+0x1c>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d101      	bne.n	8013134 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013130:	2301      	movs	r3, #1
 8013132:	e02a      	b.n	801318a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013134:	683b      	ldr	r3, [r7, #0]
 8013136:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801313a:	f003 0302 	and.w	r3, r3, #2
 801313e:	2b00      	cmp	r3, #0
 8013140:	d101      	bne.n	8013146 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013142:	2300      	movs	r3, #0
 8013144:	e021      	b.n	801318a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8013146:	683b      	ldr	r3, [r7, #0]
 8013148:	3304      	adds	r3, #4
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	687a      	ldr	r2, [r7, #4]
 801314e:	429a      	cmp	r2, r3
 8013150:	d101      	bne.n	8013156 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013152:	2300      	movs	r3, #0
 8013154:	e019      	b.n	801318a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8013156:	68fa      	ldr	r2, [r7, #12]
 8013158:	683b      	ldr	r3, [r7, #0]
 801315a:	3304      	adds	r3, #4
 801315c:	681b      	ldr	r3, [r3, #0]
 801315e:	405a      	eors	r2, r3
 8013160:	683b      	ldr	r3, [r7, #0]
 8013162:	3308      	adds	r3, #8
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4013      	ands	r3, r2
 8013168:	2b00      	cmp	r3, #0
 801316a:	d10d      	bne.n	8013188 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801316c:	683b      	ldr	r3, [r7, #0]
 801316e:	3308      	adds	r3, #8
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	43da      	mvns	r2, r3
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8013178:	683b      	ldr	r3, [r7, #0]
 801317a:	3308      	adds	r3, #8
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013180:	429a      	cmp	r2, r3
 8013182:	d101      	bne.n	8013188 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8013184:	2301      	movs	r3, #1
 8013186:	e000      	b.n	801318a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8013188:	2300      	movs	r3, #0
  }
}
 801318a:	4618      	mov	r0, r3
 801318c:	3714      	adds	r7, #20
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr
	...

08013198 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8013198:	b580      	push	{r7, lr}
 801319a:	b084      	sub	sp, #16
 801319c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801319e:	2300      	movs	r3, #0
 80131a0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80131a2:	4b12      	ldr	r3, [pc, #72]	; (80131ec <ip_reass_tmr+0x54>)
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80131a8:	e018      	b.n	80131dc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	7fdb      	ldrb	r3, [r3, #31]
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00b      	beq.n	80131ca <ip_reass_tmr+0x32>
      r->timer--;
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	7fdb      	ldrb	r3, [r3, #31]
 80131b6:	3b01      	subs	r3, #1
 80131b8:	b2da      	uxtb	r2, r3
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	60fb      	str	r3, [r7, #12]
 80131c8:	e008      	b.n	80131dc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80131d4:	68b9      	ldr	r1, [r7, #8]
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f000 f80a 	bl	80131f0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d1e3      	bne.n	80131aa <ip_reass_tmr+0x12>
    }
  }
}
 80131e2:	bf00      	nop
 80131e4:	bf00      	nop
 80131e6:	3710      	adds	r7, #16
 80131e8:	46bd      	mov	sp, r7
 80131ea:	bd80      	pop	{r7, pc}
 80131ec:	20000214 	.word	0x20000214

080131f0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80131f0:	b580      	push	{r7, lr}
 80131f2:	b088      	sub	sp, #32
 80131f4:	af00      	add	r7, sp, #0
 80131f6:	6078      	str	r0, [r7, #4]
 80131f8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80131fe:	683a      	ldr	r2, [r7, #0]
 8013200:	687b      	ldr	r3, [r7, #4]
 8013202:	429a      	cmp	r2, r3
 8013204:	d105      	bne.n	8013212 <ip_reass_free_complete_datagram+0x22>
 8013206:	4b45      	ldr	r3, [pc, #276]	; (801331c <ip_reass_free_complete_datagram+0x12c>)
 8013208:	22ab      	movs	r2, #171	; 0xab
 801320a:	4945      	ldr	r1, [pc, #276]	; (8013320 <ip_reass_free_complete_datagram+0x130>)
 801320c:	4845      	ldr	r0, [pc, #276]	; (8013324 <ip_reass_free_complete_datagram+0x134>)
 801320e:	f000 ff19 	bl	8014044 <iprintf>
  if (prev != NULL) {
 8013212:	683b      	ldr	r3, [r7, #0]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d00a      	beq.n	801322e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8013218:	683b      	ldr	r3, [r7, #0]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	687a      	ldr	r2, [r7, #4]
 801321e:	429a      	cmp	r2, r3
 8013220:	d005      	beq.n	801322e <ip_reass_free_complete_datagram+0x3e>
 8013222:	4b3e      	ldr	r3, [pc, #248]	; (801331c <ip_reass_free_complete_datagram+0x12c>)
 8013224:	22ad      	movs	r2, #173	; 0xad
 8013226:	4940      	ldr	r1, [pc, #256]	; (8013328 <ip_reass_free_complete_datagram+0x138>)
 8013228:	483e      	ldr	r0, [pc, #248]	; (8013324 <ip_reass_free_complete_datagram+0x134>)
 801322a:	f000 ff0b 	bl	8014044 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	685b      	ldr	r3, [r3, #4]
 8013234:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8013236:	697b      	ldr	r3, [r7, #20]
 8013238:	889b      	ldrh	r3, [r3, #4]
 801323a:	b29b      	uxth	r3, r3
 801323c:	2b00      	cmp	r3, #0
 801323e:	d12a      	bne.n	8013296 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	685b      	ldr	r3, [r3, #4]
 8013244:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013246:	697b      	ldr	r3, [r7, #20]
 8013248:	681a      	ldr	r2, [r3, #0]
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801324e:	69bb      	ldr	r3, [r7, #24]
 8013250:	6858      	ldr	r0, [r3, #4]
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	3308      	adds	r3, #8
 8013256:	2214      	movs	r2, #20
 8013258:	4619      	mov	r1, r3
 801325a:	f000 fedd 	bl	8014018 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801325e:	2101      	movs	r1, #1
 8013260:	69b8      	ldr	r0, [r7, #24]
 8013262:	f7ff fc47 	bl	8012af4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013266:	69b8      	ldr	r0, [r7, #24]
 8013268:	f7f8 f9fa 	bl	800b660 <pbuf_clen>
 801326c:	4603      	mov	r3, r0
 801326e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013270:	8bfa      	ldrh	r2, [r7, #30]
 8013272:	8a7b      	ldrh	r3, [r7, #18]
 8013274:	4413      	add	r3, r2
 8013276:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801327a:	db05      	blt.n	8013288 <ip_reass_free_complete_datagram+0x98>
 801327c:	4b27      	ldr	r3, [pc, #156]	; (801331c <ip_reass_free_complete_datagram+0x12c>)
 801327e:	22bc      	movs	r2, #188	; 0xbc
 8013280:	492a      	ldr	r1, [pc, #168]	; (801332c <ip_reass_free_complete_datagram+0x13c>)
 8013282:	4828      	ldr	r0, [pc, #160]	; (8013324 <ip_reass_free_complete_datagram+0x134>)
 8013284:	f000 fede 	bl	8014044 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013288:	8bfa      	ldrh	r2, [r7, #30]
 801328a:	8a7b      	ldrh	r3, [r7, #18]
 801328c:	4413      	add	r3, r2
 801328e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013290:	69b8      	ldr	r0, [r7, #24]
 8013292:	f7f8 f95d 	bl	800b550 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	685b      	ldr	r3, [r3, #4]
 801329a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801329c:	e01f      	b.n	80132de <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801329e:	69bb      	ldr	r3, [r7, #24]
 80132a0:	685b      	ldr	r3, [r3, #4]
 80132a2:	617b      	str	r3, [r7, #20]
    pcur = p;
 80132a4:	69bb      	ldr	r3, [r7, #24]
 80132a6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80132a8:	697b      	ldr	r3, [r7, #20]
 80132aa:	681b      	ldr	r3, [r3, #0]
 80132ac:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80132ae:	68f8      	ldr	r0, [r7, #12]
 80132b0:	f7f8 f9d6 	bl	800b660 <pbuf_clen>
 80132b4:	4603      	mov	r3, r0
 80132b6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80132b8:	8bfa      	ldrh	r2, [r7, #30]
 80132ba:	8a7b      	ldrh	r3, [r7, #18]
 80132bc:	4413      	add	r3, r2
 80132be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132c2:	db05      	blt.n	80132d0 <ip_reass_free_complete_datagram+0xe0>
 80132c4:	4b15      	ldr	r3, [pc, #84]	; (801331c <ip_reass_free_complete_datagram+0x12c>)
 80132c6:	22cc      	movs	r2, #204	; 0xcc
 80132c8:	4918      	ldr	r1, [pc, #96]	; (801332c <ip_reass_free_complete_datagram+0x13c>)
 80132ca:	4816      	ldr	r0, [pc, #88]	; (8013324 <ip_reass_free_complete_datagram+0x134>)
 80132cc:	f000 feba 	bl	8014044 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80132d0:	8bfa      	ldrh	r2, [r7, #30]
 80132d2:	8a7b      	ldrh	r3, [r7, #18]
 80132d4:	4413      	add	r3, r2
 80132d6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80132d8:	68f8      	ldr	r0, [r7, #12]
 80132da:	f7f8 f939 	bl	800b550 <pbuf_free>
  while (p != NULL) {
 80132de:	69bb      	ldr	r3, [r7, #24]
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d1dc      	bne.n	801329e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80132e4:	6839      	ldr	r1, [r7, #0]
 80132e6:	6878      	ldr	r0, [r7, #4]
 80132e8:	f000 f8c2 	bl	8013470 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80132ec:	4b10      	ldr	r3, [pc, #64]	; (8013330 <ip_reass_free_complete_datagram+0x140>)
 80132ee:	881b      	ldrh	r3, [r3, #0]
 80132f0:	8bfa      	ldrh	r2, [r7, #30]
 80132f2:	429a      	cmp	r2, r3
 80132f4:	d905      	bls.n	8013302 <ip_reass_free_complete_datagram+0x112>
 80132f6:	4b09      	ldr	r3, [pc, #36]	; (801331c <ip_reass_free_complete_datagram+0x12c>)
 80132f8:	22d2      	movs	r2, #210	; 0xd2
 80132fa:	490e      	ldr	r1, [pc, #56]	; (8013334 <ip_reass_free_complete_datagram+0x144>)
 80132fc:	4809      	ldr	r0, [pc, #36]	; (8013324 <ip_reass_free_complete_datagram+0x134>)
 80132fe:	f000 fea1 	bl	8014044 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013302:	4b0b      	ldr	r3, [pc, #44]	; (8013330 <ip_reass_free_complete_datagram+0x140>)
 8013304:	881a      	ldrh	r2, [r3, #0]
 8013306:	8bfb      	ldrh	r3, [r7, #30]
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	b29a      	uxth	r2, r3
 801330c:	4b08      	ldr	r3, [pc, #32]	; (8013330 <ip_reass_free_complete_datagram+0x140>)
 801330e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013310:	8bfb      	ldrh	r3, [r7, #30]
}
 8013312:	4618      	mov	r0, r3
 8013314:	3720      	adds	r7, #32
 8013316:	46bd      	mov	sp, r7
 8013318:	bd80      	pop	{r7, pc}
 801331a:	bf00      	nop
 801331c:	080177b4 	.word	0x080177b4
 8013320:	080177f0 	.word	0x080177f0
 8013324:	080177fc 	.word	0x080177fc
 8013328:	08017824 	.word	0x08017824
 801332c:	08017838 	.word	0x08017838
 8013330:	20000218 	.word	0x20000218
 8013334:	08017858 	.word	0x08017858

08013338 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b08a      	sub	sp, #40	; 0x28
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
 8013340:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013342:	2300      	movs	r3, #0
 8013344:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013346:	2300      	movs	r3, #0
 8013348:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801334a:	2300      	movs	r3, #0
 801334c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801334e:	2300      	movs	r3, #0
 8013350:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013352:	2300      	movs	r3, #0
 8013354:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013356:	4b28      	ldr	r3, [pc, #160]	; (80133f8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801335c:	e030      	b.n	80133c0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801335e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013360:	695a      	ldr	r2, [r3, #20]
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	68db      	ldr	r3, [r3, #12]
 8013366:	429a      	cmp	r2, r3
 8013368:	d10c      	bne.n	8013384 <ip_reass_remove_oldest_datagram+0x4c>
 801336a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801336c:	699a      	ldr	r2, [r3, #24]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	691b      	ldr	r3, [r3, #16]
 8013372:	429a      	cmp	r2, r3
 8013374:	d106      	bne.n	8013384 <ip_reass_remove_oldest_datagram+0x4c>
 8013376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013378:	899a      	ldrh	r2, [r3, #12]
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	889b      	ldrh	r3, [r3, #4]
 801337e:	b29b      	uxth	r3, r3
 8013380:	429a      	cmp	r2, r3
 8013382:	d014      	beq.n	80133ae <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013384:	693b      	ldr	r3, [r7, #16]
 8013386:	3301      	adds	r3, #1
 8013388:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801338a:	6a3b      	ldr	r3, [r7, #32]
 801338c:	2b00      	cmp	r3, #0
 801338e:	d104      	bne.n	801339a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013392:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013394:	69fb      	ldr	r3, [r7, #28]
 8013396:	61bb      	str	r3, [r7, #24]
 8013398:	e009      	b.n	80133ae <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801339a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801339c:	7fda      	ldrb	r2, [r3, #31]
 801339e:	6a3b      	ldr	r3, [r7, #32]
 80133a0:	7fdb      	ldrb	r3, [r3, #31]
 80133a2:	429a      	cmp	r2, r3
 80133a4:	d803      	bhi.n	80133ae <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80133a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133a8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80133aa:	69fb      	ldr	r3, [r7, #28]
 80133ac:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80133ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b0:	681b      	ldr	r3, [r3, #0]
 80133b2:	2b00      	cmp	r3, #0
 80133b4:	d001      	beq.n	80133ba <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80133b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133b8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80133ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80133c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d1cb      	bne.n	801335e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80133c6:	6a3b      	ldr	r3, [r7, #32]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d008      	beq.n	80133de <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80133cc:	69b9      	ldr	r1, [r7, #24]
 80133ce:	6a38      	ldr	r0, [r7, #32]
 80133d0:	f7ff ff0e 	bl	80131f0 <ip_reass_free_complete_datagram>
 80133d4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80133d6:	697a      	ldr	r2, [r7, #20]
 80133d8:	68fb      	ldr	r3, [r7, #12]
 80133da:	4413      	add	r3, r2
 80133dc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80133de:	697a      	ldr	r2, [r7, #20]
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	429a      	cmp	r2, r3
 80133e4:	da02      	bge.n	80133ec <ip_reass_remove_oldest_datagram+0xb4>
 80133e6:	693b      	ldr	r3, [r7, #16]
 80133e8:	2b01      	cmp	r3, #1
 80133ea:	dcac      	bgt.n	8013346 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80133ec:	697b      	ldr	r3, [r7, #20]
}
 80133ee:	4618      	mov	r0, r3
 80133f0:	3728      	adds	r7, #40	; 0x28
 80133f2:	46bd      	mov	sp, r7
 80133f4:	bd80      	pop	{r7, pc}
 80133f6:	bf00      	nop
 80133f8:	20000214 	.word	0x20000214

080133fc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80133fc:	b580      	push	{r7, lr}
 80133fe:	b084      	sub	sp, #16
 8013400:	af00      	add	r7, sp, #0
 8013402:	6078      	str	r0, [r7, #4]
 8013404:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013406:	2004      	movs	r0, #4
 8013408:	f7f7 fa44 	bl	800a894 <memp_malloc>
 801340c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801340e:	68fb      	ldr	r3, [r7, #12]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d110      	bne.n	8013436 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013414:	6839      	ldr	r1, [r7, #0]
 8013416:	6878      	ldr	r0, [r7, #4]
 8013418:	f7ff ff8e 	bl	8013338 <ip_reass_remove_oldest_datagram>
 801341c:	4602      	mov	r2, r0
 801341e:	683b      	ldr	r3, [r7, #0]
 8013420:	4293      	cmp	r3, r2
 8013422:	dc03      	bgt.n	801342c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013424:	2004      	movs	r0, #4
 8013426:	f7f7 fa35 	bl	800a894 <memp_malloc>
 801342a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801342c:	68fb      	ldr	r3, [r7, #12]
 801342e:	2b00      	cmp	r3, #0
 8013430:	d101      	bne.n	8013436 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013432:	2300      	movs	r3, #0
 8013434:	e016      	b.n	8013464 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8013436:	2220      	movs	r2, #32
 8013438:	2100      	movs	r1, #0
 801343a:	68f8      	ldr	r0, [r7, #12]
 801343c:	f000 fdfa 	bl	8014034 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	220f      	movs	r2, #15
 8013444:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013446:	4b09      	ldr	r3, [pc, #36]	; (801346c <ip_reass_enqueue_new_datagram+0x70>)
 8013448:	681a      	ldr	r2, [r3, #0]
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801344e:	4a07      	ldr	r2, [pc, #28]	; (801346c <ip_reass_enqueue_new_datagram+0x70>)
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013454:	68fb      	ldr	r3, [r7, #12]
 8013456:	3308      	adds	r3, #8
 8013458:	2214      	movs	r2, #20
 801345a:	6879      	ldr	r1, [r7, #4]
 801345c:	4618      	mov	r0, r3
 801345e:	f000 fddb 	bl	8014018 <memcpy>
  return ipr;
 8013462:	68fb      	ldr	r3, [r7, #12]
}
 8013464:	4618      	mov	r0, r3
 8013466:	3710      	adds	r7, #16
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	20000214 	.word	0x20000214

08013470 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b082      	sub	sp, #8
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
 8013478:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801347a:	4b10      	ldr	r3, [pc, #64]	; (80134bc <ip_reass_dequeue_datagram+0x4c>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	687a      	ldr	r2, [r7, #4]
 8013480:	429a      	cmp	r2, r3
 8013482:	d104      	bne.n	801348e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	4a0c      	ldr	r2, [pc, #48]	; (80134bc <ip_reass_dequeue_datagram+0x4c>)
 801348a:	6013      	str	r3, [r2, #0]
 801348c:	e00d      	b.n	80134aa <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801348e:	683b      	ldr	r3, [r7, #0]
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <ip_reass_dequeue_datagram+0x32>
 8013494:	4b0a      	ldr	r3, [pc, #40]	; (80134c0 <ip_reass_dequeue_datagram+0x50>)
 8013496:	f240 1245 	movw	r2, #325	; 0x145
 801349a:	490a      	ldr	r1, [pc, #40]	; (80134c4 <ip_reass_dequeue_datagram+0x54>)
 801349c:	480a      	ldr	r0, [pc, #40]	; (80134c8 <ip_reass_dequeue_datagram+0x58>)
 801349e:	f000 fdd1 	bl	8014044 <iprintf>
    prev->next = ipr->next;
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	681a      	ldr	r2, [r3, #0]
 80134a6:	683b      	ldr	r3, [r7, #0]
 80134a8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80134aa:	6879      	ldr	r1, [r7, #4]
 80134ac:	2004      	movs	r0, #4
 80134ae:	f7f7 fa3d 	bl	800a92c <memp_free>
}
 80134b2:	bf00      	nop
 80134b4:	3708      	adds	r7, #8
 80134b6:	46bd      	mov	sp, r7
 80134b8:	bd80      	pop	{r7, pc}
 80134ba:	bf00      	nop
 80134bc:	20000214 	.word	0x20000214
 80134c0:	080177b4 	.word	0x080177b4
 80134c4:	0801787c 	.word	0x0801787c
 80134c8:	080177fc 	.word	0x080177fc

080134cc <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80134cc:	b580      	push	{r7, lr}
 80134ce:	b08c      	sub	sp, #48	; 0x30
 80134d0:	af00      	add	r7, sp, #0
 80134d2:	60f8      	str	r0, [r7, #12]
 80134d4:	60b9      	str	r1, [r7, #8]
 80134d6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80134d8:	2300      	movs	r3, #0
 80134da:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80134dc:	2301      	movs	r3, #1
 80134de:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80134e0:	68bb      	ldr	r3, [r7, #8]
 80134e2:	685b      	ldr	r3, [r3, #4]
 80134e4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	885b      	ldrh	r3, [r3, #2]
 80134ea:	b29b      	uxth	r3, r3
 80134ec:	4618      	mov	r0, r3
 80134ee:	f7f6 fd7c 	bl	8009fea <lwip_htons>
 80134f2:	4603      	mov	r3, r0
 80134f4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	781b      	ldrb	r3, [r3, #0]
 80134fa:	f003 030f 	and.w	r3, r3, #15
 80134fe:	b2db      	uxtb	r3, r3
 8013500:	009b      	lsls	r3, r3, #2
 8013502:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013504:	7e7b      	ldrb	r3, [r7, #25]
 8013506:	b29b      	uxth	r3, r3
 8013508:	8b7a      	ldrh	r2, [r7, #26]
 801350a:	429a      	cmp	r2, r3
 801350c:	d202      	bcs.n	8013514 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801350e:	f04f 33ff 	mov.w	r3, #4294967295
 8013512:	e135      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013514:	7e7b      	ldrb	r3, [r7, #25]
 8013516:	b29b      	uxth	r3, r3
 8013518:	8b7a      	ldrh	r2, [r7, #26]
 801351a:	1ad3      	subs	r3, r2, r3
 801351c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801351e:	69fb      	ldr	r3, [r7, #28]
 8013520:	88db      	ldrh	r3, [r3, #6]
 8013522:	b29b      	uxth	r3, r3
 8013524:	4618      	mov	r0, r3
 8013526:	f7f6 fd60 	bl	8009fea <lwip_htons>
 801352a:	4603      	mov	r3, r0
 801352c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013530:	b29b      	uxth	r3, r3
 8013532:	00db      	lsls	r3, r3, #3
 8013534:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8013536:	68bb      	ldr	r3, [r7, #8]
 8013538:	685b      	ldr	r3, [r3, #4]
 801353a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801353c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801353e:	2200      	movs	r2, #0
 8013540:	701a      	strb	r2, [r3, #0]
 8013542:	2200      	movs	r2, #0
 8013544:	705a      	strb	r2, [r3, #1]
 8013546:	2200      	movs	r2, #0
 8013548:	709a      	strb	r2, [r3, #2]
 801354a:	2200      	movs	r2, #0
 801354c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801354e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013550:	8afa      	ldrh	r2, [r7, #22]
 8013552:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013554:	8afa      	ldrh	r2, [r7, #22]
 8013556:	8b7b      	ldrh	r3, [r7, #26]
 8013558:	4413      	add	r3, r2
 801355a:	b29a      	uxth	r2, r3
 801355c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801355e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013562:	88db      	ldrh	r3, [r3, #6]
 8013564:	b29b      	uxth	r3, r3
 8013566:	8afa      	ldrh	r2, [r7, #22]
 8013568:	429a      	cmp	r2, r3
 801356a:	d902      	bls.n	8013572 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801356c:	f04f 33ff 	mov.w	r3, #4294967295
 8013570:	e106      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013572:	68fb      	ldr	r3, [r7, #12]
 8013574:	685b      	ldr	r3, [r3, #4]
 8013576:	627b      	str	r3, [r7, #36]	; 0x24
 8013578:	e068      	b.n	801364c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801357a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801357c:	685b      	ldr	r3, [r3, #4]
 801357e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013582:	889b      	ldrh	r3, [r3, #4]
 8013584:	b29a      	uxth	r2, r3
 8013586:	693b      	ldr	r3, [r7, #16]
 8013588:	889b      	ldrh	r3, [r3, #4]
 801358a:	b29b      	uxth	r3, r3
 801358c:	429a      	cmp	r2, r3
 801358e:	d235      	bcs.n	80135fc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013594:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013598:	2b00      	cmp	r3, #0
 801359a:	d020      	beq.n	80135de <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801359c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801359e:	889b      	ldrh	r3, [r3, #4]
 80135a0:	b29a      	uxth	r2, r3
 80135a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135a4:	88db      	ldrh	r3, [r3, #6]
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	429a      	cmp	r2, r3
 80135aa:	d307      	bcc.n	80135bc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80135ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135ae:	88db      	ldrh	r3, [r3, #6]
 80135b0:	b29a      	uxth	r2, r3
 80135b2:	693b      	ldr	r3, [r7, #16]
 80135b4:	889b      	ldrh	r3, [r3, #4]
 80135b6:	b29b      	uxth	r3, r3
 80135b8:	429a      	cmp	r2, r3
 80135ba:	d902      	bls.n	80135c2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135bc:	f04f 33ff 	mov.w	r3, #4294967295
 80135c0:	e0de      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80135c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135c4:	68ba      	ldr	r2, [r7, #8]
 80135c6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80135c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ca:	88db      	ldrh	r3, [r3, #6]
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135d0:	889b      	ldrh	r3, [r3, #4]
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d03d      	beq.n	8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80135d8:	2300      	movs	r3, #0
 80135da:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80135dc:	e03a      	b.n	8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80135de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135e0:	88db      	ldrh	r3, [r3, #6]
 80135e2:	b29a      	uxth	r2, r3
 80135e4:	693b      	ldr	r3, [r7, #16]
 80135e6:	889b      	ldrh	r3, [r3, #4]
 80135e8:	b29b      	uxth	r3, r3
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d902      	bls.n	80135f4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80135ee:	f04f 33ff 	mov.w	r3, #4294967295
 80135f2:	e0c5      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80135f4:	68fb      	ldr	r3, [r7, #12]
 80135f6:	68ba      	ldr	r2, [r7, #8]
 80135f8:	605a      	str	r2, [r3, #4]
      break;
 80135fa:	e02b      	b.n	8013654 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80135fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80135fe:	889b      	ldrh	r3, [r3, #4]
 8013600:	b29a      	uxth	r2, r3
 8013602:	693b      	ldr	r3, [r7, #16]
 8013604:	889b      	ldrh	r3, [r3, #4]
 8013606:	b29b      	uxth	r3, r3
 8013608:	429a      	cmp	r2, r3
 801360a:	d102      	bne.n	8013612 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801360c:	f04f 33ff 	mov.w	r3, #4294967295
 8013610:	e0b6      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013614:	889b      	ldrh	r3, [r3, #4]
 8013616:	b29a      	uxth	r2, r3
 8013618:	693b      	ldr	r3, [r7, #16]
 801361a:	88db      	ldrh	r3, [r3, #6]
 801361c:	b29b      	uxth	r3, r3
 801361e:	429a      	cmp	r2, r3
 8013620:	d202      	bcs.n	8013628 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013622:	f04f 33ff 	mov.w	r3, #4294967295
 8013626:	e0ab      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8013628:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801362a:	2b00      	cmp	r3, #0
 801362c:	d009      	beq.n	8013642 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801362e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013630:	88db      	ldrh	r3, [r3, #6]
 8013632:	b29a      	uxth	r2, r3
 8013634:	693b      	ldr	r3, [r7, #16]
 8013636:	889b      	ldrh	r3, [r3, #4]
 8013638:	b29b      	uxth	r3, r3
 801363a:	429a      	cmp	r2, r3
 801363c:	d001      	beq.n	8013642 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801363e:	2300      	movs	r3, #0
 8013640:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013642:	693b      	ldr	r3, [r7, #16]
 8013644:	681b      	ldr	r3, [r3, #0]
 8013646:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013648:	693b      	ldr	r3, [r7, #16]
 801364a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801364c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801364e:	2b00      	cmp	r3, #0
 8013650:	d193      	bne.n	801357a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013652:	e000      	b.n	8013656 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013654:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013658:	2b00      	cmp	r3, #0
 801365a:	d12d      	bne.n	80136b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801365c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365e:	2b00      	cmp	r3, #0
 8013660:	d01c      	beq.n	801369c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013664:	88db      	ldrh	r3, [r3, #6]
 8013666:	b29a      	uxth	r2, r3
 8013668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801366a:	889b      	ldrh	r3, [r3, #4]
 801366c:	b29b      	uxth	r3, r3
 801366e:	429a      	cmp	r2, r3
 8013670:	d906      	bls.n	8013680 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013672:	4b45      	ldr	r3, [pc, #276]	; (8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013674:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013678:	4944      	ldr	r1, [pc, #272]	; (801378c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801367a:	4845      	ldr	r0, [pc, #276]	; (8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801367c:	f000 fce2 	bl	8014044 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013682:	68ba      	ldr	r2, [r7, #8]
 8013684:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013688:	88db      	ldrh	r3, [r3, #6]
 801368a:	b29a      	uxth	r2, r3
 801368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801368e:	889b      	ldrh	r3, [r3, #4]
 8013690:	b29b      	uxth	r3, r3
 8013692:	429a      	cmp	r2, r3
 8013694:	d010      	beq.n	80136b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013696:	2300      	movs	r3, #0
 8013698:	623b      	str	r3, [r7, #32]
 801369a:	e00d      	b.n	80136b8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	685b      	ldr	r3, [r3, #4]
 80136a0:	2b00      	cmp	r3, #0
 80136a2:	d006      	beq.n	80136b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80136a4:	4b38      	ldr	r3, [pc, #224]	; (8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80136a6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80136aa:	493a      	ldr	r1, [pc, #232]	; (8013794 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80136ac:	4838      	ldr	r0, [pc, #224]	; (8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80136ae:	f000 fcc9 	bl	8014044 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	68ba      	ldr	r2, [r7, #8]
 80136b6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d105      	bne.n	80136ca <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	7f9b      	ldrb	r3, [r3, #30]
 80136c2:	f003 0301 	and.w	r3, r3, #1
 80136c6:	2b00      	cmp	r3, #0
 80136c8:	d059      	beq.n	801377e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80136ca:	6a3b      	ldr	r3, [r7, #32]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d04f      	beq.n	8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	685b      	ldr	r3, [r3, #4]
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d006      	beq.n	80136e6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	685b      	ldr	r3, [r3, #4]
 80136dc:	685b      	ldr	r3, [r3, #4]
 80136de:	889b      	ldrh	r3, [r3, #4]
 80136e0:	b29b      	uxth	r3, r3
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d002      	beq.n	80136ec <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80136e6:	2300      	movs	r3, #0
 80136e8:	623b      	str	r3, [r7, #32]
 80136ea:	e041      	b.n	8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80136ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ee:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80136f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f2:	681b      	ldr	r3, [r3, #0]
 80136f4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80136f6:	e012      	b.n	801371e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80136f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136fa:	685b      	ldr	r3, [r3, #4]
 80136fc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80136fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013700:	88db      	ldrh	r3, [r3, #6]
 8013702:	b29a      	uxth	r2, r3
 8013704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013706:	889b      	ldrh	r3, [r3, #4]
 8013708:	b29b      	uxth	r3, r3
 801370a:	429a      	cmp	r2, r3
 801370c:	d002      	beq.n	8013714 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801370e:	2300      	movs	r3, #0
 8013710:	623b      	str	r3, [r7, #32]
            break;
 8013712:	e007      	b.n	8013724 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013716:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8013718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801371a:	681b      	ldr	r3, [r3, #0]
 801371c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801371e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1e9      	bne.n	80136f8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013724:	6a3b      	ldr	r3, [r7, #32]
 8013726:	2b00      	cmp	r3, #0
 8013728:	d022      	beq.n	8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	685b      	ldr	r3, [r3, #4]
 801372e:	2b00      	cmp	r3, #0
 8013730:	d106      	bne.n	8013740 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013732:	4b15      	ldr	r3, [pc, #84]	; (8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013734:	f240 12df 	movw	r2, #479	; 0x1df
 8013738:	4917      	ldr	r1, [pc, #92]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801373a:	4815      	ldr	r0, [pc, #84]	; (8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801373c:	f000 fc82 	bl	8014044 <iprintf>
          LWIP_ASSERT("sanity check",
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	685b      	ldr	r3, [r3, #4]
 8013744:	685b      	ldr	r3, [r3, #4]
 8013746:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013748:	429a      	cmp	r2, r3
 801374a:	d106      	bne.n	801375a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801374c:	4b0e      	ldr	r3, [pc, #56]	; (8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801374e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013752:	4911      	ldr	r1, [pc, #68]	; (8013798 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013754:	480e      	ldr	r0, [pc, #56]	; (8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013756:	f000 fc75 	bl	8014044 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	2b00      	cmp	r3, #0
 8013760:	d006      	beq.n	8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013762:	4b09      	ldr	r3, [pc, #36]	; (8013788 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013764:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013768:	490c      	ldr	r1, [pc, #48]	; (801379c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801376a:	4809      	ldr	r0, [pc, #36]	; (8013790 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801376c:	f000 fc6a 	bl	8014044 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013770:	6a3b      	ldr	r3, [r7, #32]
 8013772:	2b00      	cmp	r3, #0
 8013774:	bf14      	ite	ne
 8013776:	2301      	movne	r3, #1
 8013778:	2300      	moveq	r3, #0
 801377a:	b2db      	uxtb	r3, r3
 801377c:	e000      	b.n	8013780 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801377e:	2300      	movs	r3, #0
}
 8013780:	4618      	mov	r0, r3
 8013782:	3730      	adds	r7, #48	; 0x30
 8013784:	46bd      	mov	sp, r7
 8013786:	bd80      	pop	{r7, pc}
 8013788:	080177b4 	.word	0x080177b4
 801378c:	08017898 	.word	0x08017898
 8013790:	080177fc 	.word	0x080177fc
 8013794:	080178b8 	.word	0x080178b8
 8013798:	080178f0 	.word	0x080178f0
 801379c:	08017900 	.word	0x08017900

080137a0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b08e      	sub	sp, #56	; 0x38
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	685b      	ldr	r3, [r3, #4]
 80137ac:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80137ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137b0:	781b      	ldrb	r3, [r3, #0]
 80137b2:	f003 030f 	and.w	r3, r3, #15
 80137b6:	b2db      	uxtb	r3, r3
 80137b8:	009b      	lsls	r3, r3, #2
 80137ba:	b2db      	uxtb	r3, r3
 80137bc:	2b14      	cmp	r3, #20
 80137be:	f040 8167 	bne.w	8013a90 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80137c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137c4:	88db      	ldrh	r3, [r3, #6]
 80137c6:	b29b      	uxth	r3, r3
 80137c8:	4618      	mov	r0, r3
 80137ca:	f7f6 fc0e 	bl	8009fea <lwip_htons>
 80137ce:	4603      	mov	r3, r0
 80137d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80137d4:	b29b      	uxth	r3, r3
 80137d6:	00db      	lsls	r3, r3, #3
 80137d8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80137da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137dc:	885b      	ldrh	r3, [r3, #2]
 80137de:	b29b      	uxth	r3, r3
 80137e0:	4618      	mov	r0, r3
 80137e2:	f7f6 fc02 	bl	8009fea <lwip_htons>
 80137e6:	4603      	mov	r3, r0
 80137e8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80137ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ec:	781b      	ldrb	r3, [r3, #0]
 80137ee:	f003 030f 	and.w	r3, r3, #15
 80137f2:	b2db      	uxtb	r3, r3
 80137f4:	009b      	lsls	r3, r3, #2
 80137f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80137fa:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80137fe:	b29b      	uxth	r3, r3
 8013800:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013802:	429a      	cmp	r2, r3
 8013804:	f0c0 8146 	bcc.w	8013a94 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8013808:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801380c:	b29b      	uxth	r3, r3
 801380e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013810:	1ad3      	subs	r3, r2, r3
 8013812:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013814:	6878      	ldr	r0, [r7, #4]
 8013816:	f7f7 ff23 	bl	800b660 <pbuf_clen>
 801381a:	4603      	mov	r3, r0
 801381c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801381e:	4b9f      	ldr	r3, [pc, #636]	; (8013a9c <ip4_reass+0x2fc>)
 8013820:	881b      	ldrh	r3, [r3, #0]
 8013822:	461a      	mov	r2, r3
 8013824:	8c3b      	ldrh	r3, [r7, #32]
 8013826:	4413      	add	r3, r2
 8013828:	2b0a      	cmp	r3, #10
 801382a:	dd10      	ble.n	801384e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801382c:	8c3b      	ldrh	r3, [r7, #32]
 801382e:	4619      	mov	r1, r3
 8013830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013832:	f7ff fd81 	bl	8013338 <ip_reass_remove_oldest_datagram>
 8013836:	4603      	mov	r3, r0
 8013838:	2b00      	cmp	r3, #0
 801383a:	f000 812d 	beq.w	8013a98 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801383e:	4b97      	ldr	r3, [pc, #604]	; (8013a9c <ip4_reass+0x2fc>)
 8013840:	881b      	ldrh	r3, [r3, #0]
 8013842:	461a      	mov	r2, r3
 8013844:	8c3b      	ldrh	r3, [r7, #32]
 8013846:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013848:	2b0a      	cmp	r3, #10
 801384a:	f300 8125 	bgt.w	8013a98 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801384e:	4b94      	ldr	r3, [pc, #592]	; (8013aa0 <ip4_reass+0x300>)
 8013850:	681b      	ldr	r3, [r3, #0]
 8013852:	633b      	str	r3, [r7, #48]	; 0x30
 8013854:	e015      	b.n	8013882 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013858:	695a      	ldr	r2, [r3, #20]
 801385a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	429a      	cmp	r2, r3
 8013860:	d10c      	bne.n	801387c <ip4_reass+0xdc>
 8013862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013864:	699a      	ldr	r2, [r3, #24]
 8013866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013868:	691b      	ldr	r3, [r3, #16]
 801386a:	429a      	cmp	r2, r3
 801386c:	d106      	bne.n	801387c <ip4_reass+0xdc>
 801386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013870:	899a      	ldrh	r2, [r3, #12]
 8013872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013874:	889b      	ldrh	r3, [r3, #4]
 8013876:	b29b      	uxth	r3, r3
 8013878:	429a      	cmp	r2, r3
 801387a:	d006      	beq.n	801388a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801387c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	633b      	str	r3, [r7, #48]	; 0x30
 8013882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013884:	2b00      	cmp	r3, #0
 8013886:	d1e6      	bne.n	8013856 <ip4_reass+0xb6>
 8013888:	e000      	b.n	801388c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801388a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801388c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801388e:	2b00      	cmp	r3, #0
 8013890:	d109      	bne.n	80138a6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013892:	8c3b      	ldrh	r3, [r7, #32]
 8013894:	4619      	mov	r1, r3
 8013896:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013898:	f7ff fdb0 	bl	80133fc <ip_reass_enqueue_new_datagram>
 801389c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801389e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138a0:	2b00      	cmp	r3, #0
 80138a2:	d11c      	bne.n	80138de <ip4_reass+0x13e>
      goto nullreturn;
 80138a4:	e109      	b.n	8013aba <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138a8:	88db      	ldrh	r3, [r3, #6]
 80138aa:	b29b      	uxth	r3, r3
 80138ac:	4618      	mov	r0, r3
 80138ae:	f7f6 fb9c 	bl	8009fea <lwip_htons>
 80138b2:	4603      	mov	r3, r0
 80138b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138b8:	2b00      	cmp	r3, #0
 80138ba:	d110      	bne.n	80138de <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80138bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138be:	89db      	ldrh	r3, [r3, #14]
 80138c0:	4618      	mov	r0, r3
 80138c2:	f7f6 fb92 	bl	8009fea <lwip_htons>
 80138c6:	4603      	mov	r3, r0
 80138c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80138cc:	2b00      	cmp	r3, #0
 80138ce:	d006      	beq.n	80138de <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80138d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80138d2:	3308      	adds	r3, #8
 80138d4:	2214      	movs	r2, #20
 80138d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80138d8:	4618      	mov	r0, r3
 80138da:	f000 fb9d 	bl	8014018 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80138de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e0:	88db      	ldrh	r3, [r3, #6]
 80138e2:	b29b      	uxth	r3, r3
 80138e4:	f003 0320 	and.w	r3, r3, #32
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	bf0c      	ite	eq
 80138ec:	2301      	moveq	r3, #1
 80138ee:	2300      	movne	r3, #0
 80138f0:	b2db      	uxtb	r3, r3
 80138f2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80138f4:	69fb      	ldr	r3, [r7, #28]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d00e      	beq.n	8013918 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80138fa:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80138fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80138fe:	4413      	add	r3, r2
 8013900:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013902:	8b7a      	ldrh	r2, [r7, #26]
 8013904:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013906:	429a      	cmp	r2, r3
 8013908:	f0c0 80a0 	bcc.w	8013a4c <ip4_reass+0x2ac>
 801390c:	8b7b      	ldrh	r3, [r7, #26]
 801390e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013912:	4293      	cmp	r3, r2
 8013914:	f200 809a 	bhi.w	8013a4c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013918:	69fa      	ldr	r2, [r7, #28]
 801391a:	6879      	ldr	r1, [r7, #4]
 801391c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801391e:	f7ff fdd5 	bl	80134cc <ip_reass_chain_frag_into_datagram_and_validate>
 8013922:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013924:	697b      	ldr	r3, [r7, #20]
 8013926:	f1b3 3fff 	cmp.w	r3, #4294967295
 801392a:	f000 8091 	beq.w	8013a50 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801392e:	4b5b      	ldr	r3, [pc, #364]	; (8013a9c <ip4_reass+0x2fc>)
 8013930:	881a      	ldrh	r2, [r3, #0]
 8013932:	8c3b      	ldrh	r3, [r7, #32]
 8013934:	4413      	add	r3, r2
 8013936:	b29a      	uxth	r2, r3
 8013938:	4b58      	ldr	r3, [pc, #352]	; (8013a9c <ip4_reass+0x2fc>)
 801393a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801393c:	69fb      	ldr	r3, [r7, #28]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d00d      	beq.n	801395e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013942:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013944:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013946:	4413      	add	r3, r2
 8013948:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801394a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801394c:	8a7a      	ldrh	r2, [r7, #18]
 801394e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013952:	7f9b      	ldrb	r3, [r3, #30]
 8013954:	f043 0301 	orr.w	r3, r3, #1
 8013958:	b2da      	uxtb	r2, r3
 801395a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801395c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801395e:	697b      	ldr	r3, [r7, #20]
 8013960:	2b01      	cmp	r3, #1
 8013962:	d171      	bne.n	8013a48 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013966:	8b9b      	ldrh	r3, [r3, #28]
 8013968:	3314      	adds	r3, #20
 801396a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	685b      	ldr	r3, [r3, #4]
 8013970:	685b      	ldr	r3, [r3, #4]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	685b      	ldr	r3, [r3, #4]
 801397c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801397e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013980:	3308      	adds	r3, #8
 8013982:	2214      	movs	r2, #20
 8013984:	4619      	mov	r1, r3
 8013986:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013988:	f000 fb46 	bl	8014018 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801398c:	8a3b      	ldrh	r3, [r7, #16]
 801398e:	4618      	mov	r0, r3
 8013990:	f7f6 fb2b 	bl	8009fea <lwip_htons>
 8013994:	4603      	mov	r3, r0
 8013996:	461a      	mov	r2, r3
 8013998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801399c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801399e:	2200      	movs	r2, #0
 80139a0:	719a      	strb	r2, [r3, #6]
 80139a2:	2200      	movs	r2, #0
 80139a4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80139a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139a8:	2200      	movs	r2, #0
 80139aa:	729a      	strb	r2, [r3, #10]
 80139ac:	2200      	movs	r2, #0
 80139ae:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b2:	685b      	ldr	r3, [r3, #4]
 80139b4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80139b6:	e00d      	b.n	80139d4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80139b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139ba:	685b      	ldr	r3, [r3, #4]
 80139bc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80139be:	2114      	movs	r1, #20
 80139c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80139c2:	f7f7 fd3f 	bl	800b444 <pbuf_remove_header>
      pbuf_cat(p, r);
 80139c6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f7f7 fe83 	bl	800b6d4 <pbuf_cat>
      r = iprh->next_pbuf;
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80139d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d1ee      	bne.n	80139b8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80139da:	4b31      	ldr	r3, [pc, #196]	; (8013aa0 <ip4_reass+0x300>)
 80139dc:	681b      	ldr	r3, [r3, #0]
 80139de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139e0:	429a      	cmp	r2, r3
 80139e2:	d102      	bne.n	80139ea <ip4_reass+0x24a>
      ipr_prev = NULL;
 80139e4:	2300      	movs	r3, #0
 80139e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139e8:	e010      	b.n	8013a0c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80139ea:	4b2d      	ldr	r3, [pc, #180]	; (8013aa0 <ip4_reass+0x300>)
 80139ec:	681b      	ldr	r3, [r3, #0]
 80139ee:	62fb      	str	r3, [r7, #44]	; 0x2c
 80139f0:	e007      	b.n	8013a02 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80139f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139f4:	681b      	ldr	r3, [r3, #0]
 80139f6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80139f8:	429a      	cmp	r2, r3
 80139fa:	d006      	beq.n	8013a0a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80139fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80139fe:	681b      	ldr	r3, [r3, #0]
 8013a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013a04:	2b00      	cmp	r3, #0
 8013a06:	d1f4      	bne.n	80139f2 <ip4_reass+0x252>
 8013a08:	e000      	b.n	8013a0c <ip4_reass+0x26c>
          break;
 8013a0a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013a0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a10:	f7ff fd2e 	bl	8013470 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013a14:	6878      	ldr	r0, [r7, #4]
 8013a16:	f7f7 fe23 	bl	800b660 <pbuf_clen>
 8013a1a:	4603      	mov	r3, r0
 8013a1c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013a1e:	4b1f      	ldr	r3, [pc, #124]	; (8013a9c <ip4_reass+0x2fc>)
 8013a20:	881b      	ldrh	r3, [r3, #0]
 8013a22:	8c3a      	ldrh	r2, [r7, #32]
 8013a24:	429a      	cmp	r2, r3
 8013a26:	d906      	bls.n	8013a36 <ip4_reass+0x296>
 8013a28:	4b1e      	ldr	r3, [pc, #120]	; (8013aa4 <ip4_reass+0x304>)
 8013a2a:	f240 229b 	movw	r2, #667	; 0x29b
 8013a2e:	491e      	ldr	r1, [pc, #120]	; (8013aa8 <ip4_reass+0x308>)
 8013a30:	481e      	ldr	r0, [pc, #120]	; (8013aac <ip4_reass+0x30c>)
 8013a32:	f000 fb07 	bl	8014044 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013a36:	4b19      	ldr	r3, [pc, #100]	; (8013a9c <ip4_reass+0x2fc>)
 8013a38:	881a      	ldrh	r2, [r3, #0]
 8013a3a:	8c3b      	ldrh	r3, [r7, #32]
 8013a3c:	1ad3      	subs	r3, r2, r3
 8013a3e:	b29a      	uxth	r2, r3
 8013a40:	4b16      	ldr	r3, [pc, #88]	; (8013a9c <ip4_reass+0x2fc>)
 8013a42:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	e03c      	b.n	8013ac2 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013a48:	2300      	movs	r3, #0
 8013a4a:	e03a      	b.n	8013ac2 <ip4_reass+0x322>
      goto nullreturn_ipr;
 8013a4c:	bf00      	nop
 8013a4e:	e000      	b.n	8013a52 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013a50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a54:	2b00      	cmp	r3, #0
 8013a56:	d106      	bne.n	8013a66 <ip4_reass+0x2c6>
 8013a58:	4b12      	ldr	r3, [pc, #72]	; (8013aa4 <ip4_reass+0x304>)
 8013a5a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013a5e:	4914      	ldr	r1, [pc, #80]	; (8013ab0 <ip4_reass+0x310>)
 8013a60:	4812      	ldr	r0, [pc, #72]	; (8013aac <ip4_reass+0x30c>)
 8013a62:	f000 faef 	bl	8014044 <iprintf>
  if (ipr->p == NULL) {
 8013a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a68:	685b      	ldr	r3, [r3, #4]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	d124      	bne.n	8013ab8 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013a6e:	4b0c      	ldr	r3, [pc, #48]	; (8013aa0 <ip4_reass+0x300>)
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013a74:	429a      	cmp	r2, r3
 8013a76:	d006      	beq.n	8013a86 <ip4_reass+0x2e6>
 8013a78:	4b0a      	ldr	r3, [pc, #40]	; (8013aa4 <ip4_reass+0x304>)
 8013a7a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013a7e:	490d      	ldr	r1, [pc, #52]	; (8013ab4 <ip4_reass+0x314>)
 8013a80:	480a      	ldr	r0, [pc, #40]	; (8013aac <ip4_reass+0x30c>)
 8013a82:	f000 fadf 	bl	8014044 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013a86:	2100      	movs	r1, #0
 8013a88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a8a:	f7ff fcf1 	bl	8013470 <ip_reass_dequeue_datagram>
 8013a8e:	e014      	b.n	8013aba <ip4_reass+0x31a>
    goto nullreturn;
 8013a90:	bf00      	nop
 8013a92:	e012      	b.n	8013aba <ip4_reass+0x31a>
    goto nullreturn;
 8013a94:	bf00      	nop
 8013a96:	e010      	b.n	8013aba <ip4_reass+0x31a>
      goto nullreturn;
 8013a98:	bf00      	nop
 8013a9a:	e00e      	b.n	8013aba <ip4_reass+0x31a>
 8013a9c:	20000218 	.word	0x20000218
 8013aa0:	20000214 	.word	0x20000214
 8013aa4:	080177b4 	.word	0x080177b4
 8013aa8:	08017924 	.word	0x08017924
 8013aac:	080177fc 	.word	0x080177fc
 8013ab0:	08017940 	.word	0x08017940
 8013ab4:	0801794c 	.word	0x0801794c
  }

nullreturn:
 8013ab8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013aba:	6878      	ldr	r0, [r7, #4]
 8013abc:	f7f7 fd48 	bl	800b550 <pbuf_free>
  return NULL;
 8013ac0:	2300      	movs	r3, #0
}
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	3738      	adds	r7, #56	; 0x38
 8013ac6:	46bd      	mov	sp, r7
 8013ac8:	bd80      	pop	{r7, pc}
 8013aca:	bf00      	nop

08013acc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013ad0:	2005      	movs	r0, #5
 8013ad2:	f7f6 fedf 	bl	800a894 <memp_malloc>
 8013ad6:	4603      	mov	r3, r0
}
 8013ad8:	4618      	mov	r0, r3
 8013ada:	bd80      	pop	{r7, pc}

08013adc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d106      	bne.n	8013af8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013aea:	4b07      	ldr	r3, [pc, #28]	; (8013b08 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013aec:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013af0:	4906      	ldr	r1, [pc, #24]	; (8013b0c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013af2:	4807      	ldr	r0, [pc, #28]	; (8013b10 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013af4:	f000 faa6 	bl	8014044 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013af8:	6879      	ldr	r1, [r7, #4]
 8013afa:	2005      	movs	r0, #5
 8013afc:	f7f6 ff16 	bl	800a92c <memp_free>
}
 8013b00:	bf00      	nop
 8013b02:	3708      	adds	r7, #8
 8013b04:	46bd      	mov	sp, r7
 8013b06:	bd80      	pop	{r7, pc}
 8013b08:	080177b4 	.word	0x080177b4
 8013b0c:	0801796c 	.word	0x0801796c
 8013b10:	080177fc 	.word	0x080177fc

08013b14 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013b14:	b580      	push	{r7, lr}
 8013b16:	b084      	sub	sp, #16
 8013b18:	af00      	add	r7, sp, #0
 8013b1a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013b1c:	687b      	ldr	r3, [r7, #4]
 8013b1e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013b20:	68fb      	ldr	r3, [r7, #12]
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	d106      	bne.n	8013b34 <ipfrag_free_pbuf_custom+0x20>
 8013b26:	4b11      	ldr	r3, [pc, #68]	; (8013b6c <ipfrag_free_pbuf_custom+0x58>)
 8013b28:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013b2c:	4910      	ldr	r1, [pc, #64]	; (8013b70 <ipfrag_free_pbuf_custom+0x5c>)
 8013b2e:	4811      	ldr	r0, [pc, #68]	; (8013b74 <ipfrag_free_pbuf_custom+0x60>)
 8013b30:	f000 fa88 	bl	8014044 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013b34:	68fa      	ldr	r2, [r7, #12]
 8013b36:	687b      	ldr	r3, [r7, #4]
 8013b38:	429a      	cmp	r2, r3
 8013b3a:	d006      	beq.n	8013b4a <ipfrag_free_pbuf_custom+0x36>
 8013b3c:	4b0b      	ldr	r3, [pc, #44]	; (8013b6c <ipfrag_free_pbuf_custom+0x58>)
 8013b3e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013b42:	490d      	ldr	r1, [pc, #52]	; (8013b78 <ipfrag_free_pbuf_custom+0x64>)
 8013b44:	480b      	ldr	r0, [pc, #44]	; (8013b74 <ipfrag_free_pbuf_custom+0x60>)
 8013b46:	f000 fa7d 	bl	8014044 <iprintf>
  if (pcr->original != NULL) {
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	695b      	ldr	r3, [r3, #20]
 8013b4e:	2b00      	cmp	r3, #0
 8013b50:	d004      	beq.n	8013b5c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013b52:	68fb      	ldr	r3, [r7, #12]
 8013b54:	695b      	ldr	r3, [r3, #20]
 8013b56:	4618      	mov	r0, r3
 8013b58:	f7f7 fcfa 	bl	800b550 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013b5c:	68f8      	ldr	r0, [r7, #12]
 8013b5e:	f7ff ffbd 	bl	8013adc <ip_frag_free_pbuf_custom_ref>
}
 8013b62:	bf00      	nop
 8013b64:	3710      	adds	r7, #16
 8013b66:	46bd      	mov	sp, r7
 8013b68:	bd80      	pop	{r7, pc}
 8013b6a:	bf00      	nop
 8013b6c:	080177b4 	.word	0x080177b4
 8013b70:	08017978 	.word	0x08017978
 8013b74:	080177fc 	.word	0x080177fc
 8013b78:	08017984 	.word	0x08017984

08013b7c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013b7c:	b580      	push	{r7, lr}
 8013b7e:	b094      	sub	sp, #80	; 0x50
 8013b80:	af02      	add	r7, sp, #8
 8013b82:	60f8      	str	r0, [r7, #12]
 8013b84:	60b9      	str	r1, [r7, #8]
 8013b86:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013b8e:	68bb      	ldr	r3, [r7, #8]
 8013b90:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b92:	3b14      	subs	r3, #20
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	da00      	bge.n	8013b9a <ip4_frag+0x1e>
 8013b98:	3307      	adds	r3, #7
 8013b9a:	10db      	asrs	r3, r3, #3
 8013b9c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013b9e:	2314      	movs	r3, #20
 8013ba0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013ba2:	68fb      	ldr	r3, [r7, #12]
 8013ba4:	685b      	ldr	r3, [r3, #4]
 8013ba6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013baa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013bae:	781b      	ldrb	r3, [r3, #0]
 8013bb0:	f003 030f 	and.w	r3, r3, #15
 8013bb4:	b2db      	uxtb	r3, r3
 8013bb6:	009b      	lsls	r3, r3, #2
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	2b14      	cmp	r3, #20
 8013bbc:	d002      	beq.n	8013bc4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013bbe:	f06f 0305 	mvn.w	r3, #5
 8013bc2:	e110      	b.n	8013de6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	895b      	ldrh	r3, [r3, #10]
 8013bc8:	2b13      	cmp	r3, #19
 8013bca:	d809      	bhi.n	8013be0 <ip4_frag+0x64>
 8013bcc:	4b88      	ldr	r3, [pc, #544]	; (8013df0 <ip4_frag+0x274>)
 8013bce:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013bd2:	4988      	ldr	r1, [pc, #544]	; (8013df4 <ip4_frag+0x278>)
 8013bd4:	4888      	ldr	r0, [pc, #544]	; (8013df8 <ip4_frag+0x27c>)
 8013bd6:	f000 fa35 	bl	8014044 <iprintf>
 8013bda:	f06f 0305 	mvn.w	r3, #5
 8013bde:	e102      	b.n	8013de6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013be2:	88db      	ldrh	r3, [r3, #6]
 8013be4:	b29b      	uxth	r3, r3
 8013be6:	4618      	mov	r0, r3
 8013be8:	f7f6 f9ff 	bl	8009fea <lwip_htons>
 8013bec:	4603      	mov	r3, r0
 8013bee:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013bf0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013bf2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013bf6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013bfa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013bfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013c00:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	891b      	ldrh	r3, [r3, #8]
 8013c06:	3b14      	subs	r3, #20
 8013c08:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013c0c:	e0e1      	b.n	8013dd2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013c0e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c10:	00db      	lsls	r3, r3, #3
 8013c12:	b29b      	uxth	r3, r3
 8013c14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013c18:	4293      	cmp	r3, r2
 8013c1a:	bf28      	it	cs
 8013c1c:	4613      	movcs	r3, r2
 8013c1e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013c20:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013c24:	2114      	movs	r1, #20
 8013c26:	200e      	movs	r0, #14
 8013c28:	f7f7 f9ae 	bl	800af88 <pbuf_alloc>
 8013c2c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	f000 80d5 	beq.w	8013de0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c38:	895b      	ldrh	r3, [r3, #10]
 8013c3a:	2b13      	cmp	r3, #19
 8013c3c:	d806      	bhi.n	8013c4c <ip4_frag+0xd0>
 8013c3e:	4b6c      	ldr	r3, [pc, #432]	; (8013df0 <ip4_frag+0x274>)
 8013c40:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013c44:	496d      	ldr	r1, [pc, #436]	; (8013dfc <ip4_frag+0x280>)
 8013c46:	486c      	ldr	r0, [pc, #432]	; (8013df8 <ip4_frag+0x27c>)
 8013c48:	f000 f9fc 	bl	8014044 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c4e:	685b      	ldr	r3, [r3, #4]
 8013c50:	2214      	movs	r2, #20
 8013c52:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013c54:	4618      	mov	r0, r3
 8013c56:	f000 f9df 	bl	8014018 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c5c:	685b      	ldr	r3, [r3, #4]
 8013c5e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013c60:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013c62:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013c66:	e064      	b.n	8013d32 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	895a      	ldrh	r2, [r3, #10]
 8013c6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013c6e:	1ad3      	subs	r3, r2, r3
 8013c70:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013c72:	68fb      	ldr	r3, [r7, #12]
 8013c74:	895b      	ldrh	r3, [r3, #10]
 8013c76:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013c78:	429a      	cmp	r2, r3
 8013c7a:	d906      	bls.n	8013c8a <ip4_frag+0x10e>
 8013c7c:	4b5c      	ldr	r3, [pc, #368]	; (8013df0 <ip4_frag+0x274>)
 8013c7e:	f240 322d 	movw	r2, #813	; 0x32d
 8013c82:	495f      	ldr	r1, [pc, #380]	; (8013e00 <ip4_frag+0x284>)
 8013c84:	485c      	ldr	r0, [pc, #368]	; (8013df8 <ip4_frag+0x27c>)
 8013c86:	f000 f9dd 	bl	8014044 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013c8a:	8bfa      	ldrh	r2, [r7, #30]
 8013c8c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013c90:	4293      	cmp	r3, r2
 8013c92:	bf28      	it	cs
 8013c94:	4613      	movcs	r3, r2
 8013c96:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013c9a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013c9e:	2b00      	cmp	r3, #0
 8013ca0:	d105      	bne.n	8013cae <ip4_frag+0x132>
        poff = 0;
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013ca6:	68fb      	ldr	r3, [r7, #12]
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	60fb      	str	r3, [r7, #12]
        continue;
 8013cac:	e041      	b.n	8013d32 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013cae:	f7ff ff0d 	bl	8013acc <ip_frag_alloc_pbuf_custom_ref>
 8013cb2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013cb4:	69bb      	ldr	r3, [r7, #24]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d103      	bne.n	8013cc2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013cba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cbc:	f7f7 fc48 	bl	800b550 <pbuf_free>
        goto memerr;
 8013cc0:	e08f      	b.n	8013de2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013cc2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013cc8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013cca:	4413      	add	r3, r2
 8013ccc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013cd0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013cd4:	9201      	str	r2, [sp, #4]
 8013cd6:	9300      	str	r3, [sp, #0]
 8013cd8:	4603      	mov	r3, r0
 8013cda:	2241      	movs	r2, #65	; 0x41
 8013cdc:	2000      	movs	r0, #0
 8013cde:	f7f7 fa7d 	bl	800b1dc <pbuf_alloced_custom>
 8013ce2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013ce4:	697b      	ldr	r3, [r7, #20]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d106      	bne.n	8013cf8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013cea:	69b8      	ldr	r0, [r7, #24]
 8013cec:	f7ff fef6 	bl	8013adc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013cf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013cf2:	f7f7 fc2d 	bl	800b550 <pbuf_free>
        goto memerr;
 8013cf6:	e074      	b.n	8013de2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013cf8:	68f8      	ldr	r0, [r7, #12]
 8013cfa:	f7f7 fcc9 	bl	800b690 <pbuf_ref>
      pcr->original = p;
 8013cfe:	69bb      	ldr	r3, [r7, #24]
 8013d00:	68fa      	ldr	r2, [r7, #12]
 8013d02:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013d04:	69bb      	ldr	r3, [r7, #24]
 8013d06:	4a3f      	ldr	r2, [pc, #252]	; (8013e04 <ip4_frag+0x288>)
 8013d08:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013d0a:	6979      	ldr	r1, [r7, #20]
 8013d0c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d0e:	f7f7 fce1 	bl	800b6d4 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013d12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013d16:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d1a:	1ad3      	subs	r3, r2, r3
 8013d1c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013d20:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d24:	2b00      	cmp	r3, #0
 8013d26:	d004      	beq.n	8013d32 <ip4_frag+0x1b6>
        poff = 0;
 8013d28:	2300      	movs	r3, #0
 8013d2a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013d32:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d196      	bne.n	8013c68 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013d3a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013d3c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013d40:	4413      	add	r3, r2
 8013d42:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013d48:	f1a3 0213 	sub.w	r2, r3, #19
 8013d4c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013d50:	429a      	cmp	r2, r3
 8013d52:	bfcc      	ite	gt
 8013d54:	2301      	movgt	r3, #1
 8013d56:	2300      	movle	r3, #0
 8013d58:	b2db      	uxtb	r3, r3
 8013d5a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013d5c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013d60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d64:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013d66:	6a3b      	ldr	r3, [r7, #32]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d002      	beq.n	8013d72 <ip4_frag+0x1f6>
 8013d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013d6e:	2b00      	cmp	r3, #0
 8013d70:	d003      	beq.n	8013d7a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013d72:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d74:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013d78:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013d7a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d7c:	4618      	mov	r0, r3
 8013d7e:	f7f6 f934 	bl	8009fea <lwip_htons>
 8013d82:	4603      	mov	r3, r0
 8013d84:	461a      	mov	r2, r3
 8013d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d88:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013d8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d8c:	3314      	adds	r3, #20
 8013d8e:	b29b      	uxth	r3, r3
 8013d90:	4618      	mov	r0, r3
 8013d92:	f7f6 f92a 	bl	8009fea <lwip_htons>
 8013d96:	4603      	mov	r3, r0
 8013d98:	461a      	mov	r2, r3
 8013d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d9c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013da0:	2200      	movs	r2, #0
 8013da2:	729a      	strb	r2, [r3, #10]
 8013da4:	2200      	movs	r2, #0
 8013da6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013da8:	68bb      	ldr	r3, [r7, #8]
 8013daa:	695b      	ldr	r3, [r3, #20]
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013db0:	68b8      	ldr	r0, [r7, #8]
 8013db2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013db4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013db6:	f7f7 fbcb 	bl	800b550 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013dba:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013dbe:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013dc0:	1ad3      	subs	r3, r2, r3
 8013dc2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013dc6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013dca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013dcc:	4413      	add	r3, r2
 8013dce:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013dd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013dd6:	2b00      	cmp	r3, #0
 8013dd8:	f47f af19 	bne.w	8013c0e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013ddc:	2300      	movs	r3, #0
 8013dde:	e002      	b.n	8013de6 <ip4_frag+0x26a>
      goto memerr;
 8013de0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013de2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013de6:	4618      	mov	r0, r3
 8013de8:	3748      	adds	r7, #72	; 0x48
 8013dea:	46bd      	mov	sp, r7
 8013dec:	bd80      	pop	{r7, pc}
 8013dee:	bf00      	nop
 8013df0:	080177b4 	.word	0x080177b4
 8013df4:	08017990 	.word	0x08017990
 8013df8:	080177fc 	.word	0x080177fc
 8013dfc:	080179ac 	.word	0x080179ac
 8013e00:	080179cc 	.word	0x080179cc
 8013e04:	08013b15 	.word	0x08013b15

08013e08 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013e08:	b580      	push	{r7, lr}
 8013e0a:	b086      	sub	sp, #24
 8013e0c:	af00      	add	r7, sp, #0
 8013e0e:	6078      	str	r0, [r7, #4]
 8013e10:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013e12:	230e      	movs	r3, #14
 8013e14:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	895b      	ldrh	r3, [r3, #10]
 8013e1a:	2b0e      	cmp	r3, #14
 8013e1c:	d96e      	bls.n	8013efc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	7bdb      	ldrb	r3, [r3, #15]
 8013e22:	2b00      	cmp	r3, #0
 8013e24:	d106      	bne.n	8013e34 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013e26:	683b      	ldr	r3, [r7, #0]
 8013e28:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013e2c:	3301      	adds	r3, #1
 8013e2e:	b2da      	uxtb	r2, r3
 8013e30:	687b      	ldr	r3, [r7, #4]
 8013e32:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	685b      	ldr	r3, [r3, #4]
 8013e38:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013e3a:	693b      	ldr	r3, [r7, #16]
 8013e3c:	7b1a      	ldrb	r2, [r3, #12]
 8013e3e:	7b5b      	ldrb	r3, [r3, #13]
 8013e40:	021b      	lsls	r3, r3, #8
 8013e42:	4313      	orrs	r3, r2
 8013e44:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013e46:	693b      	ldr	r3, [r7, #16]
 8013e48:	781b      	ldrb	r3, [r3, #0]
 8013e4a:	f003 0301 	and.w	r3, r3, #1
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d023      	beq.n	8013e9a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013e52:	693b      	ldr	r3, [r7, #16]
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	d10f      	bne.n	8013e7a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e5a:	693b      	ldr	r3, [r7, #16]
 8013e5c:	785b      	ldrb	r3, [r3, #1]
 8013e5e:	2b00      	cmp	r3, #0
 8013e60:	d11b      	bne.n	8013e9a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013e62:	693b      	ldr	r3, [r7, #16]
 8013e64:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013e66:	2b5e      	cmp	r3, #94	; 0x5e
 8013e68:	d117      	bne.n	8013e9a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	7b5b      	ldrb	r3, [r3, #13]
 8013e6e:	f043 0310 	orr.w	r3, r3, #16
 8013e72:	b2da      	uxtb	r2, r3
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	735a      	strb	r2, [r3, #13]
 8013e78:	e00f      	b.n	8013e9a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013e7a:	693b      	ldr	r3, [r7, #16]
 8013e7c:	2206      	movs	r2, #6
 8013e7e:	4928      	ldr	r1, [pc, #160]	; (8013f20 <ethernet_input+0x118>)
 8013e80:	4618      	mov	r0, r3
 8013e82:	f000 f8bb 	bl	8013ffc <memcmp>
 8013e86:	4603      	mov	r3, r0
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d106      	bne.n	8013e9a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	7b5b      	ldrb	r3, [r3, #13]
 8013e90:	f043 0308 	orr.w	r3, r3, #8
 8013e94:	b2da      	uxtb	r2, r3
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013e9a:	89fb      	ldrh	r3, [r7, #14]
 8013e9c:	2b08      	cmp	r3, #8
 8013e9e:	d003      	beq.n	8013ea8 <ethernet_input+0xa0>
 8013ea0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013ea4:	d014      	beq.n	8013ed0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013ea6:	e032      	b.n	8013f0e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ea8:	683b      	ldr	r3, [r7, #0]
 8013eaa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013eae:	f003 0308 	and.w	r3, r3, #8
 8013eb2:	2b00      	cmp	r3, #0
 8013eb4:	d024      	beq.n	8013f00 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013eb6:	8afb      	ldrh	r3, [r7, #22]
 8013eb8:	4619      	mov	r1, r3
 8013eba:	6878      	ldr	r0, [r7, #4]
 8013ebc:	f7f7 fac2 	bl	800b444 <pbuf_remove_header>
 8013ec0:	4603      	mov	r3, r0
 8013ec2:	2b00      	cmp	r3, #0
 8013ec4:	d11e      	bne.n	8013f04 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ec6:	6839      	ldr	r1, [r7, #0]
 8013ec8:	6878      	ldr	r0, [r7, #4]
 8013eca:	f7fe ff27 	bl	8012d1c <ip4_input>
      break;
 8013ece:	e013      	b.n	8013ef8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013ed0:	683b      	ldr	r3, [r7, #0]
 8013ed2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013ed6:	f003 0308 	and.w	r3, r3, #8
 8013eda:	2b00      	cmp	r3, #0
 8013edc:	d014      	beq.n	8013f08 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013ede:	8afb      	ldrh	r3, [r7, #22]
 8013ee0:	4619      	mov	r1, r3
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f7f7 faae 	bl	800b444 <pbuf_remove_header>
 8013ee8:	4603      	mov	r3, r0
 8013eea:	2b00      	cmp	r3, #0
 8013eec:	d10e      	bne.n	8013f0c <ethernet_input+0x104>
        etharp_input(p, netif);
 8013eee:	6839      	ldr	r1, [r7, #0]
 8013ef0:	6878      	ldr	r0, [r7, #4]
 8013ef2:	f7fe f8c7 	bl	8012084 <etharp_input>
      break;
 8013ef6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013ef8:	2300      	movs	r3, #0
 8013efa:	e00c      	b.n	8013f16 <ethernet_input+0x10e>
    goto free_and_return;
 8013efc:	bf00      	nop
 8013efe:	e006      	b.n	8013f0e <ethernet_input+0x106>
        goto free_and_return;
 8013f00:	bf00      	nop
 8013f02:	e004      	b.n	8013f0e <ethernet_input+0x106>
        goto free_and_return;
 8013f04:	bf00      	nop
 8013f06:	e002      	b.n	8013f0e <ethernet_input+0x106>
        goto free_and_return;
 8013f08:	bf00      	nop
 8013f0a:	e000      	b.n	8013f0e <ethernet_input+0x106>
        goto free_and_return;
 8013f0c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013f0e:	6878      	ldr	r0, [r7, #4]
 8013f10:	f7f7 fb1e 	bl	800b550 <pbuf_free>
  return ERR_OK;
 8013f14:	2300      	movs	r3, #0
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3718      	adds	r7, #24
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	08017b78 	.word	0x08017b78

08013f24 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b086      	sub	sp, #24
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	60f8      	str	r0, [r7, #12]
 8013f2c:	60b9      	str	r1, [r7, #8]
 8013f2e:	607a      	str	r2, [r7, #4]
 8013f30:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013f32:	8c3b      	ldrh	r3, [r7, #32]
 8013f34:	4618      	mov	r0, r3
 8013f36:	f7f6 f858 	bl	8009fea <lwip_htons>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013f3e:	210e      	movs	r1, #14
 8013f40:	68b8      	ldr	r0, [r7, #8]
 8013f42:	f7f7 fa6f 	bl	800b424 <pbuf_add_header>
 8013f46:	4603      	mov	r3, r0
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d125      	bne.n	8013f98 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013f4c:	68bb      	ldr	r3, [r7, #8]
 8013f4e:	685b      	ldr	r3, [r3, #4]
 8013f50:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013f52:	693b      	ldr	r3, [r7, #16]
 8013f54:	8afa      	ldrh	r2, [r7, #22]
 8013f56:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013f58:	693b      	ldr	r3, [r7, #16]
 8013f5a:	2206      	movs	r2, #6
 8013f5c:	6839      	ldr	r1, [r7, #0]
 8013f5e:	4618      	mov	r0, r3
 8013f60:	f000 f85a 	bl	8014018 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013f64:	693b      	ldr	r3, [r7, #16]
 8013f66:	3306      	adds	r3, #6
 8013f68:	2206      	movs	r2, #6
 8013f6a:	6879      	ldr	r1, [r7, #4]
 8013f6c:	4618      	mov	r0, r3
 8013f6e:	f000 f853 	bl	8014018 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013f72:	68fb      	ldr	r3, [r7, #12]
 8013f74:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013f78:	2b06      	cmp	r3, #6
 8013f7a:	d006      	beq.n	8013f8a <ethernet_output+0x66>
 8013f7c:	4b0a      	ldr	r3, [pc, #40]	; (8013fa8 <ethernet_output+0x84>)
 8013f7e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013f82:	490a      	ldr	r1, [pc, #40]	; (8013fac <ethernet_output+0x88>)
 8013f84:	480a      	ldr	r0, [pc, #40]	; (8013fb0 <ethernet_output+0x8c>)
 8013f86:	f000 f85d 	bl	8014044 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013f8a:	68fb      	ldr	r3, [r7, #12]
 8013f8c:	699b      	ldr	r3, [r3, #24]
 8013f8e:	68b9      	ldr	r1, [r7, #8]
 8013f90:	68f8      	ldr	r0, [r7, #12]
 8013f92:	4798      	blx	r3
 8013f94:	4603      	mov	r3, r0
 8013f96:	e002      	b.n	8013f9e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013f98:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013f9a:	f06f 0301 	mvn.w	r3, #1
}
 8013f9e:	4618      	mov	r0, r3
 8013fa0:	3718      	adds	r7, #24
 8013fa2:	46bd      	mov	sp, r7
 8013fa4:	bd80      	pop	{r7, pc}
 8013fa6:	bf00      	nop
 8013fa8:	080179dc 	.word	0x080179dc
 8013fac:	08017a14 	.word	0x08017a14
 8013fb0:	08017a48 	.word	0x08017a48

08013fb4 <__libc_init_array>:
 8013fb4:	b570      	push	{r4, r5, r6, lr}
 8013fb6:	4d0d      	ldr	r5, [pc, #52]	; (8013fec <__libc_init_array+0x38>)
 8013fb8:	4c0d      	ldr	r4, [pc, #52]	; (8013ff0 <__libc_init_array+0x3c>)
 8013fba:	1b64      	subs	r4, r4, r5
 8013fbc:	10a4      	asrs	r4, r4, #2
 8013fbe:	2600      	movs	r6, #0
 8013fc0:	42a6      	cmp	r6, r4
 8013fc2:	d109      	bne.n	8013fd8 <__libc_init_array+0x24>
 8013fc4:	4d0b      	ldr	r5, [pc, #44]	; (8013ff4 <__libc_init_array+0x40>)
 8013fc6:	4c0c      	ldr	r4, [pc, #48]	; (8013ff8 <__libc_init_array+0x44>)
 8013fc8:	f001 f856 	bl	8015078 <_init>
 8013fcc:	1b64      	subs	r4, r4, r5
 8013fce:	10a4      	asrs	r4, r4, #2
 8013fd0:	2600      	movs	r6, #0
 8013fd2:	42a6      	cmp	r6, r4
 8013fd4:	d105      	bne.n	8013fe2 <__libc_init_array+0x2e>
 8013fd6:	bd70      	pop	{r4, r5, r6, pc}
 8013fd8:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fdc:	4798      	blx	r3
 8013fde:	3601      	adds	r6, #1
 8013fe0:	e7ee      	b.n	8013fc0 <__libc_init_array+0xc>
 8013fe2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013fe6:	4798      	blx	r3
 8013fe8:	3601      	adds	r6, #1
 8013fea:	e7f2      	b.n	8013fd2 <__libc_init_array+0x1e>
 8013fec:	08017cdc 	.word	0x08017cdc
 8013ff0:	08017cdc 	.word	0x08017cdc
 8013ff4:	08017cdc 	.word	0x08017cdc
 8013ff8:	08017ce0 	.word	0x08017ce0

08013ffc <memcmp>:
 8013ffc:	b530      	push	{r4, r5, lr}
 8013ffe:	3901      	subs	r1, #1
 8014000:	2400      	movs	r4, #0
 8014002:	42a2      	cmp	r2, r4
 8014004:	d101      	bne.n	801400a <memcmp+0xe>
 8014006:	2000      	movs	r0, #0
 8014008:	e005      	b.n	8014016 <memcmp+0x1a>
 801400a:	5d03      	ldrb	r3, [r0, r4]
 801400c:	3401      	adds	r4, #1
 801400e:	5d0d      	ldrb	r5, [r1, r4]
 8014010:	42ab      	cmp	r3, r5
 8014012:	d0f6      	beq.n	8014002 <memcmp+0x6>
 8014014:	1b58      	subs	r0, r3, r5
 8014016:	bd30      	pop	{r4, r5, pc}

08014018 <memcpy>:
 8014018:	440a      	add	r2, r1
 801401a:	4291      	cmp	r1, r2
 801401c:	f100 33ff 	add.w	r3, r0, #4294967295
 8014020:	d100      	bne.n	8014024 <memcpy+0xc>
 8014022:	4770      	bx	lr
 8014024:	b510      	push	{r4, lr}
 8014026:	f811 4b01 	ldrb.w	r4, [r1], #1
 801402a:	f803 4f01 	strb.w	r4, [r3, #1]!
 801402e:	4291      	cmp	r1, r2
 8014030:	d1f9      	bne.n	8014026 <memcpy+0xe>
 8014032:	bd10      	pop	{r4, pc}

08014034 <memset>:
 8014034:	4402      	add	r2, r0
 8014036:	4603      	mov	r3, r0
 8014038:	4293      	cmp	r3, r2
 801403a:	d100      	bne.n	801403e <memset+0xa>
 801403c:	4770      	bx	lr
 801403e:	f803 1b01 	strb.w	r1, [r3], #1
 8014042:	e7f9      	b.n	8014038 <memset+0x4>

08014044 <iprintf>:
 8014044:	b40f      	push	{r0, r1, r2, r3}
 8014046:	4b0a      	ldr	r3, [pc, #40]	; (8014070 <iprintf+0x2c>)
 8014048:	b513      	push	{r0, r1, r4, lr}
 801404a:	681c      	ldr	r4, [r3, #0]
 801404c:	b124      	cbz	r4, 8014058 <iprintf+0x14>
 801404e:	69a3      	ldr	r3, [r4, #24]
 8014050:	b913      	cbnz	r3, 8014058 <iprintf+0x14>
 8014052:	4620      	mov	r0, r4
 8014054:	f000 f8c4 	bl	80141e0 <__sinit>
 8014058:	ab05      	add	r3, sp, #20
 801405a:	9a04      	ldr	r2, [sp, #16]
 801405c:	68a1      	ldr	r1, [r4, #8]
 801405e:	9301      	str	r3, [sp, #4]
 8014060:	4620      	mov	r0, r4
 8014062:	f000 fa4b 	bl	80144fc <_vfiprintf_r>
 8014066:	b002      	add	sp, #8
 8014068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801406c:	b004      	add	sp, #16
 801406e:	4770      	bx	lr
 8014070:	20000014 	.word	0x20000014

08014074 <rand>:
 8014074:	4b17      	ldr	r3, [pc, #92]	; (80140d4 <rand+0x60>)
 8014076:	b510      	push	{r4, lr}
 8014078:	681c      	ldr	r4, [r3, #0]
 801407a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 801407c:	b9b3      	cbnz	r3, 80140ac <rand+0x38>
 801407e:	2018      	movs	r0, #24
 8014080:	f000 f960 	bl	8014344 <malloc>
 8014084:	63a0      	str	r0, [r4, #56]	; 0x38
 8014086:	b928      	cbnz	r0, 8014094 <rand+0x20>
 8014088:	4602      	mov	r2, r0
 801408a:	4b13      	ldr	r3, [pc, #76]	; (80140d8 <rand+0x64>)
 801408c:	4813      	ldr	r0, [pc, #76]	; (80140dc <rand+0x68>)
 801408e:	214e      	movs	r1, #78	; 0x4e
 8014090:	f000 f830 	bl	80140f4 <__assert_func>
 8014094:	4a12      	ldr	r2, [pc, #72]	; (80140e0 <rand+0x6c>)
 8014096:	4b13      	ldr	r3, [pc, #76]	; (80140e4 <rand+0x70>)
 8014098:	e9c0 2300 	strd	r2, r3, [r0]
 801409c:	4b12      	ldr	r3, [pc, #72]	; (80140e8 <rand+0x74>)
 801409e:	6083      	str	r3, [r0, #8]
 80140a0:	230b      	movs	r3, #11
 80140a2:	8183      	strh	r3, [r0, #12]
 80140a4:	2201      	movs	r2, #1
 80140a6:	2300      	movs	r3, #0
 80140a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80140ac:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80140ae:	480f      	ldr	r0, [pc, #60]	; (80140ec <rand+0x78>)
 80140b0:	690a      	ldr	r2, [r1, #16]
 80140b2:	694b      	ldr	r3, [r1, #20]
 80140b4:	4c0e      	ldr	r4, [pc, #56]	; (80140f0 <rand+0x7c>)
 80140b6:	4350      	muls	r0, r2
 80140b8:	fb04 0003 	mla	r0, r4, r3, r0
 80140bc:	fba2 3404 	umull	r3, r4, r2, r4
 80140c0:	1c5a      	adds	r2, r3, #1
 80140c2:	4404      	add	r4, r0
 80140c4:	f144 0000 	adc.w	r0, r4, #0
 80140c8:	e9c1 2004 	strd	r2, r0, [r1, #16]
 80140cc:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80140d0:	bd10      	pop	{r4, pc}
 80140d2:	bf00      	nop
 80140d4:	20000014 	.word	0x20000014
 80140d8:	08017b8c 	.word	0x08017b8c
 80140dc:	08017ba3 	.word	0x08017ba3
 80140e0:	abcd330e 	.word	0xabcd330e
 80140e4:	e66d1234 	.word	0xe66d1234
 80140e8:	0005deec 	.word	0x0005deec
 80140ec:	5851f42d 	.word	0x5851f42d
 80140f0:	4c957f2d 	.word	0x4c957f2d

080140f4 <__assert_func>:
 80140f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80140f6:	4614      	mov	r4, r2
 80140f8:	461a      	mov	r2, r3
 80140fa:	4b09      	ldr	r3, [pc, #36]	; (8014120 <__assert_func+0x2c>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	4605      	mov	r5, r0
 8014100:	68d8      	ldr	r0, [r3, #12]
 8014102:	b14c      	cbz	r4, 8014118 <__assert_func+0x24>
 8014104:	4b07      	ldr	r3, [pc, #28]	; (8014124 <__assert_func+0x30>)
 8014106:	9100      	str	r1, [sp, #0]
 8014108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801410c:	4906      	ldr	r1, [pc, #24]	; (8014128 <__assert_func+0x34>)
 801410e:	462b      	mov	r3, r5
 8014110:	f000 f8e4 	bl	80142dc <fiprintf>
 8014114:	f000 fddc 	bl	8014cd0 <abort>
 8014118:	4b04      	ldr	r3, [pc, #16]	; (801412c <__assert_func+0x38>)
 801411a:	461c      	mov	r4, r3
 801411c:	e7f3      	b.n	8014106 <__assert_func+0x12>
 801411e:	bf00      	nop
 8014120:	20000014 	.word	0x20000014
 8014124:	08017c02 	.word	0x08017c02
 8014128:	08017c0f 	.word	0x08017c0f
 801412c:	08017c3d 	.word	0x08017c3d

08014130 <std>:
 8014130:	2300      	movs	r3, #0
 8014132:	b510      	push	{r4, lr}
 8014134:	4604      	mov	r4, r0
 8014136:	e9c0 3300 	strd	r3, r3, [r0]
 801413a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801413e:	6083      	str	r3, [r0, #8]
 8014140:	8181      	strh	r1, [r0, #12]
 8014142:	6643      	str	r3, [r0, #100]	; 0x64
 8014144:	81c2      	strh	r2, [r0, #14]
 8014146:	6183      	str	r3, [r0, #24]
 8014148:	4619      	mov	r1, r3
 801414a:	2208      	movs	r2, #8
 801414c:	305c      	adds	r0, #92	; 0x5c
 801414e:	f7ff ff71 	bl	8014034 <memset>
 8014152:	4b05      	ldr	r3, [pc, #20]	; (8014168 <std+0x38>)
 8014154:	6263      	str	r3, [r4, #36]	; 0x24
 8014156:	4b05      	ldr	r3, [pc, #20]	; (801416c <std+0x3c>)
 8014158:	62a3      	str	r3, [r4, #40]	; 0x28
 801415a:	4b05      	ldr	r3, [pc, #20]	; (8014170 <std+0x40>)
 801415c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801415e:	4b05      	ldr	r3, [pc, #20]	; (8014174 <std+0x44>)
 8014160:	6224      	str	r4, [r4, #32]
 8014162:	6323      	str	r3, [r4, #48]	; 0x30
 8014164:	bd10      	pop	{r4, pc}
 8014166:	bf00      	nop
 8014168:	08014aa5 	.word	0x08014aa5
 801416c:	08014ac7 	.word	0x08014ac7
 8014170:	08014aff 	.word	0x08014aff
 8014174:	08014b23 	.word	0x08014b23

08014178 <_cleanup_r>:
 8014178:	4901      	ldr	r1, [pc, #4]	; (8014180 <_cleanup_r+0x8>)
 801417a:	f000 b8c1 	b.w	8014300 <_fwalk_reent>
 801417e:	bf00      	nop
 8014180:	08014e0d 	.word	0x08014e0d

08014184 <__sfmoreglue>:
 8014184:	b570      	push	{r4, r5, r6, lr}
 8014186:	1e4a      	subs	r2, r1, #1
 8014188:	2568      	movs	r5, #104	; 0x68
 801418a:	4355      	muls	r5, r2
 801418c:	460e      	mov	r6, r1
 801418e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014192:	f000 f92f 	bl	80143f4 <_malloc_r>
 8014196:	4604      	mov	r4, r0
 8014198:	b140      	cbz	r0, 80141ac <__sfmoreglue+0x28>
 801419a:	2100      	movs	r1, #0
 801419c:	e9c0 1600 	strd	r1, r6, [r0]
 80141a0:	300c      	adds	r0, #12
 80141a2:	60a0      	str	r0, [r4, #8]
 80141a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80141a8:	f7ff ff44 	bl	8014034 <memset>
 80141ac:	4620      	mov	r0, r4
 80141ae:	bd70      	pop	{r4, r5, r6, pc}

080141b0 <__sfp_lock_acquire>:
 80141b0:	4801      	ldr	r0, [pc, #4]	; (80141b8 <__sfp_lock_acquire+0x8>)
 80141b2:	f000 b8c5 	b.w	8014340 <__retarget_lock_acquire_recursive>
 80141b6:	bf00      	nop
 80141b8:	2000722c 	.word	0x2000722c

080141bc <__sfp_lock_release>:
 80141bc:	4801      	ldr	r0, [pc, #4]	; (80141c4 <__sfp_lock_release+0x8>)
 80141be:	f000 b8c0 	b.w	8014342 <__retarget_lock_release_recursive>
 80141c2:	bf00      	nop
 80141c4:	2000722c 	.word	0x2000722c

080141c8 <__sinit_lock_acquire>:
 80141c8:	4801      	ldr	r0, [pc, #4]	; (80141d0 <__sinit_lock_acquire+0x8>)
 80141ca:	f000 b8b9 	b.w	8014340 <__retarget_lock_acquire_recursive>
 80141ce:	bf00      	nop
 80141d0:	20007227 	.word	0x20007227

080141d4 <__sinit_lock_release>:
 80141d4:	4801      	ldr	r0, [pc, #4]	; (80141dc <__sinit_lock_release+0x8>)
 80141d6:	f000 b8b4 	b.w	8014342 <__retarget_lock_release_recursive>
 80141da:	bf00      	nop
 80141dc:	20007227 	.word	0x20007227

080141e0 <__sinit>:
 80141e0:	b510      	push	{r4, lr}
 80141e2:	4604      	mov	r4, r0
 80141e4:	f7ff fff0 	bl	80141c8 <__sinit_lock_acquire>
 80141e8:	69a3      	ldr	r3, [r4, #24]
 80141ea:	b11b      	cbz	r3, 80141f4 <__sinit+0x14>
 80141ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80141f0:	f7ff bff0 	b.w	80141d4 <__sinit_lock_release>
 80141f4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80141f8:	6523      	str	r3, [r4, #80]	; 0x50
 80141fa:	4b13      	ldr	r3, [pc, #76]	; (8014248 <__sinit+0x68>)
 80141fc:	4a13      	ldr	r2, [pc, #76]	; (801424c <__sinit+0x6c>)
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	62a2      	str	r2, [r4, #40]	; 0x28
 8014202:	42a3      	cmp	r3, r4
 8014204:	bf04      	itt	eq
 8014206:	2301      	moveq	r3, #1
 8014208:	61a3      	streq	r3, [r4, #24]
 801420a:	4620      	mov	r0, r4
 801420c:	f000 f820 	bl	8014250 <__sfp>
 8014210:	6060      	str	r0, [r4, #4]
 8014212:	4620      	mov	r0, r4
 8014214:	f000 f81c 	bl	8014250 <__sfp>
 8014218:	60a0      	str	r0, [r4, #8]
 801421a:	4620      	mov	r0, r4
 801421c:	f000 f818 	bl	8014250 <__sfp>
 8014220:	2200      	movs	r2, #0
 8014222:	60e0      	str	r0, [r4, #12]
 8014224:	2104      	movs	r1, #4
 8014226:	6860      	ldr	r0, [r4, #4]
 8014228:	f7ff ff82 	bl	8014130 <std>
 801422c:	68a0      	ldr	r0, [r4, #8]
 801422e:	2201      	movs	r2, #1
 8014230:	2109      	movs	r1, #9
 8014232:	f7ff ff7d 	bl	8014130 <std>
 8014236:	68e0      	ldr	r0, [r4, #12]
 8014238:	2202      	movs	r2, #2
 801423a:	2112      	movs	r1, #18
 801423c:	f7ff ff78 	bl	8014130 <std>
 8014240:	2301      	movs	r3, #1
 8014242:	61a3      	str	r3, [r4, #24]
 8014244:	e7d2      	b.n	80141ec <__sinit+0xc>
 8014246:	bf00      	nop
 8014248:	08017b88 	.word	0x08017b88
 801424c:	08014179 	.word	0x08014179

08014250 <__sfp>:
 8014250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014252:	4607      	mov	r7, r0
 8014254:	f7ff ffac 	bl	80141b0 <__sfp_lock_acquire>
 8014258:	4b1e      	ldr	r3, [pc, #120]	; (80142d4 <__sfp+0x84>)
 801425a:	681e      	ldr	r6, [r3, #0]
 801425c:	69b3      	ldr	r3, [r6, #24]
 801425e:	b913      	cbnz	r3, 8014266 <__sfp+0x16>
 8014260:	4630      	mov	r0, r6
 8014262:	f7ff ffbd 	bl	80141e0 <__sinit>
 8014266:	3648      	adds	r6, #72	; 0x48
 8014268:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801426c:	3b01      	subs	r3, #1
 801426e:	d503      	bpl.n	8014278 <__sfp+0x28>
 8014270:	6833      	ldr	r3, [r6, #0]
 8014272:	b30b      	cbz	r3, 80142b8 <__sfp+0x68>
 8014274:	6836      	ldr	r6, [r6, #0]
 8014276:	e7f7      	b.n	8014268 <__sfp+0x18>
 8014278:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801427c:	b9d5      	cbnz	r5, 80142b4 <__sfp+0x64>
 801427e:	4b16      	ldr	r3, [pc, #88]	; (80142d8 <__sfp+0x88>)
 8014280:	60e3      	str	r3, [r4, #12]
 8014282:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014286:	6665      	str	r5, [r4, #100]	; 0x64
 8014288:	f000 f859 	bl	801433e <__retarget_lock_init_recursive>
 801428c:	f7ff ff96 	bl	80141bc <__sfp_lock_release>
 8014290:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014294:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014298:	6025      	str	r5, [r4, #0]
 801429a:	61a5      	str	r5, [r4, #24]
 801429c:	2208      	movs	r2, #8
 801429e:	4629      	mov	r1, r5
 80142a0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80142a4:	f7ff fec6 	bl	8014034 <memset>
 80142a8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80142ac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80142b0:	4620      	mov	r0, r4
 80142b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80142b4:	3468      	adds	r4, #104	; 0x68
 80142b6:	e7d9      	b.n	801426c <__sfp+0x1c>
 80142b8:	2104      	movs	r1, #4
 80142ba:	4638      	mov	r0, r7
 80142bc:	f7ff ff62 	bl	8014184 <__sfmoreglue>
 80142c0:	4604      	mov	r4, r0
 80142c2:	6030      	str	r0, [r6, #0]
 80142c4:	2800      	cmp	r0, #0
 80142c6:	d1d5      	bne.n	8014274 <__sfp+0x24>
 80142c8:	f7ff ff78 	bl	80141bc <__sfp_lock_release>
 80142cc:	230c      	movs	r3, #12
 80142ce:	603b      	str	r3, [r7, #0]
 80142d0:	e7ee      	b.n	80142b0 <__sfp+0x60>
 80142d2:	bf00      	nop
 80142d4:	08017b88 	.word	0x08017b88
 80142d8:	ffff0001 	.word	0xffff0001

080142dc <fiprintf>:
 80142dc:	b40e      	push	{r1, r2, r3}
 80142de:	b503      	push	{r0, r1, lr}
 80142e0:	4601      	mov	r1, r0
 80142e2:	ab03      	add	r3, sp, #12
 80142e4:	4805      	ldr	r0, [pc, #20]	; (80142fc <fiprintf+0x20>)
 80142e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ea:	6800      	ldr	r0, [r0, #0]
 80142ec:	9301      	str	r3, [sp, #4]
 80142ee:	f000 f905 	bl	80144fc <_vfiprintf_r>
 80142f2:	b002      	add	sp, #8
 80142f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80142f8:	b003      	add	sp, #12
 80142fa:	4770      	bx	lr
 80142fc:	20000014 	.word	0x20000014

08014300 <_fwalk_reent>:
 8014300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014304:	4606      	mov	r6, r0
 8014306:	4688      	mov	r8, r1
 8014308:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801430c:	2700      	movs	r7, #0
 801430e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014312:	f1b9 0901 	subs.w	r9, r9, #1
 8014316:	d505      	bpl.n	8014324 <_fwalk_reent+0x24>
 8014318:	6824      	ldr	r4, [r4, #0]
 801431a:	2c00      	cmp	r4, #0
 801431c:	d1f7      	bne.n	801430e <_fwalk_reent+0xe>
 801431e:	4638      	mov	r0, r7
 8014320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014324:	89ab      	ldrh	r3, [r5, #12]
 8014326:	2b01      	cmp	r3, #1
 8014328:	d907      	bls.n	801433a <_fwalk_reent+0x3a>
 801432a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801432e:	3301      	adds	r3, #1
 8014330:	d003      	beq.n	801433a <_fwalk_reent+0x3a>
 8014332:	4629      	mov	r1, r5
 8014334:	4630      	mov	r0, r6
 8014336:	47c0      	blx	r8
 8014338:	4307      	orrs	r7, r0
 801433a:	3568      	adds	r5, #104	; 0x68
 801433c:	e7e9      	b.n	8014312 <_fwalk_reent+0x12>

0801433e <__retarget_lock_init_recursive>:
 801433e:	4770      	bx	lr

08014340 <__retarget_lock_acquire_recursive>:
 8014340:	4770      	bx	lr

08014342 <__retarget_lock_release_recursive>:
 8014342:	4770      	bx	lr

08014344 <malloc>:
 8014344:	4b02      	ldr	r3, [pc, #8]	; (8014350 <malloc+0xc>)
 8014346:	4601      	mov	r1, r0
 8014348:	6818      	ldr	r0, [r3, #0]
 801434a:	f000 b853 	b.w	80143f4 <_malloc_r>
 801434e:	bf00      	nop
 8014350:	20000014 	.word	0x20000014

08014354 <_free_r>:
 8014354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014356:	2900      	cmp	r1, #0
 8014358:	d048      	beq.n	80143ec <_free_r+0x98>
 801435a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801435e:	9001      	str	r0, [sp, #4]
 8014360:	2b00      	cmp	r3, #0
 8014362:	f1a1 0404 	sub.w	r4, r1, #4
 8014366:	bfb8      	it	lt
 8014368:	18e4      	addlt	r4, r4, r3
 801436a:	f000 fe01 	bl	8014f70 <__malloc_lock>
 801436e:	4a20      	ldr	r2, [pc, #128]	; (80143f0 <_free_r+0x9c>)
 8014370:	9801      	ldr	r0, [sp, #4]
 8014372:	6813      	ldr	r3, [r2, #0]
 8014374:	4615      	mov	r5, r2
 8014376:	b933      	cbnz	r3, 8014386 <_free_r+0x32>
 8014378:	6063      	str	r3, [r4, #4]
 801437a:	6014      	str	r4, [r2, #0]
 801437c:	b003      	add	sp, #12
 801437e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014382:	f000 bdfb 	b.w	8014f7c <__malloc_unlock>
 8014386:	42a3      	cmp	r3, r4
 8014388:	d90b      	bls.n	80143a2 <_free_r+0x4e>
 801438a:	6821      	ldr	r1, [r4, #0]
 801438c:	1862      	adds	r2, r4, r1
 801438e:	4293      	cmp	r3, r2
 8014390:	bf04      	itt	eq
 8014392:	681a      	ldreq	r2, [r3, #0]
 8014394:	685b      	ldreq	r3, [r3, #4]
 8014396:	6063      	str	r3, [r4, #4]
 8014398:	bf04      	itt	eq
 801439a:	1852      	addeq	r2, r2, r1
 801439c:	6022      	streq	r2, [r4, #0]
 801439e:	602c      	str	r4, [r5, #0]
 80143a0:	e7ec      	b.n	801437c <_free_r+0x28>
 80143a2:	461a      	mov	r2, r3
 80143a4:	685b      	ldr	r3, [r3, #4]
 80143a6:	b10b      	cbz	r3, 80143ac <_free_r+0x58>
 80143a8:	42a3      	cmp	r3, r4
 80143aa:	d9fa      	bls.n	80143a2 <_free_r+0x4e>
 80143ac:	6811      	ldr	r1, [r2, #0]
 80143ae:	1855      	adds	r5, r2, r1
 80143b0:	42a5      	cmp	r5, r4
 80143b2:	d10b      	bne.n	80143cc <_free_r+0x78>
 80143b4:	6824      	ldr	r4, [r4, #0]
 80143b6:	4421      	add	r1, r4
 80143b8:	1854      	adds	r4, r2, r1
 80143ba:	42a3      	cmp	r3, r4
 80143bc:	6011      	str	r1, [r2, #0]
 80143be:	d1dd      	bne.n	801437c <_free_r+0x28>
 80143c0:	681c      	ldr	r4, [r3, #0]
 80143c2:	685b      	ldr	r3, [r3, #4]
 80143c4:	6053      	str	r3, [r2, #4]
 80143c6:	4421      	add	r1, r4
 80143c8:	6011      	str	r1, [r2, #0]
 80143ca:	e7d7      	b.n	801437c <_free_r+0x28>
 80143cc:	d902      	bls.n	80143d4 <_free_r+0x80>
 80143ce:	230c      	movs	r3, #12
 80143d0:	6003      	str	r3, [r0, #0]
 80143d2:	e7d3      	b.n	801437c <_free_r+0x28>
 80143d4:	6825      	ldr	r5, [r4, #0]
 80143d6:	1961      	adds	r1, r4, r5
 80143d8:	428b      	cmp	r3, r1
 80143da:	bf04      	itt	eq
 80143dc:	6819      	ldreq	r1, [r3, #0]
 80143de:	685b      	ldreq	r3, [r3, #4]
 80143e0:	6063      	str	r3, [r4, #4]
 80143e2:	bf04      	itt	eq
 80143e4:	1949      	addeq	r1, r1, r5
 80143e6:	6021      	streq	r1, [r4, #0]
 80143e8:	6054      	str	r4, [r2, #4]
 80143ea:	e7c7      	b.n	801437c <_free_r+0x28>
 80143ec:	b003      	add	sp, #12
 80143ee:	bd30      	pop	{r4, r5, pc}
 80143f0:	2000021c 	.word	0x2000021c

080143f4 <_malloc_r>:
 80143f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143f6:	1ccd      	adds	r5, r1, #3
 80143f8:	f025 0503 	bic.w	r5, r5, #3
 80143fc:	3508      	adds	r5, #8
 80143fe:	2d0c      	cmp	r5, #12
 8014400:	bf38      	it	cc
 8014402:	250c      	movcc	r5, #12
 8014404:	2d00      	cmp	r5, #0
 8014406:	4606      	mov	r6, r0
 8014408:	db01      	blt.n	801440e <_malloc_r+0x1a>
 801440a:	42a9      	cmp	r1, r5
 801440c:	d903      	bls.n	8014416 <_malloc_r+0x22>
 801440e:	230c      	movs	r3, #12
 8014410:	6033      	str	r3, [r6, #0]
 8014412:	2000      	movs	r0, #0
 8014414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014416:	f000 fdab 	bl	8014f70 <__malloc_lock>
 801441a:	4921      	ldr	r1, [pc, #132]	; (80144a0 <_malloc_r+0xac>)
 801441c:	680a      	ldr	r2, [r1, #0]
 801441e:	4614      	mov	r4, r2
 8014420:	b99c      	cbnz	r4, 801444a <_malloc_r+0x56>
 8014422:	4f20      	ldr	r7, [pc, #128]	; (80144a4 <_malloc_r+0xb0>)
 8014424:	683b      	ldr	r3, [r7, #0]
 8014426:	b923      	cbnz	r3, 8014432 <_malloc_r+0x3e>
 8014428:	4621      	mov	r1, r4
 801442a:	4630      	mov	r0, r6
 801442c:	f000 fb2a 	bl	8014a84 <_sbrk_r>
 8014430:	6038      	str	r0, [r7, #0]
 8014432:	4629      	mov	r1, r5
 8014434:	4630      	mov	r0, r6
 8014436:	f000 fb25 	bl	8014a84 <_sbrk_r>
 801443a:	1c43      	adds	r3, r0, #1
 801443c:	d123      	bne.n	8014486 <_malloc_r+0x92>
 801443e:	230c      	movs	r3, #12
 8014440:	6033      	str	r3, [r6, #0]
 8014442:	4630      	mov	r0, r6
 8014444:	f000 fd9a 	bl	8014f7c <__malloc_unlock>
 8014448:	e7e3      	b.n	8014412 <_malloc_r+0x1e>
 801444a:	6823      	ldr	r3, [r4, #0]
 801444c:	1b5b      	subs	r3, r3, r5
 801444e:	d417      	bmi.n	8014480 <_malloc_r+0x8c>
 8014450:	2b0b      	cmp	r3, #11
 8014452:	d903      	bls.n	801445c <_malloc_r+0x68>
 8014454:	6023      	str	r3, [r4, #0]
 8014456:	441c      	add	r4, r3
 8014458:	6025      	str	r5, [r4, #0]
 801445a:	e004      	b.n	8014466 <_malloc_r+0x72>
 801445c:	6863      	ldr	r3, [r4, #4]
 801445e:	42a2      	cmp	r2, r4
 8014460:	bf0c      	ite	eq
 8014462:	600b      	streq	r3, [r1, #0]
 8014464:	6053      	strne	r3, [r2, #4]
 8014466:	4630      	mov	r0, r6
 8014468:	f000 fd88 	bl	8014f7c <__malloc_unlock>
 801446c:	f104 000b 	add.w	r0, r4, #11
 8014470:	1d23      	adds	r3, r4, #4
 8014472:	f020 0007 	bic.w	r0, r0, #7
 8014476:	1ac2      	subs	r2, r0, r3
 8014478:	d0cc      	beq.n	8014414 <_malloc_r+0x20>
 801447a:	1a1b      	subs	r3, r3, r0
 801447c:	50a3      	str	r3, [r4, r2]
 801447e:	e7c9      	b.n	8014414 <_malloc_r+0x20>
 8014480:	4622      	mov	r2, r4
 8014482:	6864      	ldr	r4, [r4, #4]
 8014484:	e7cc      	b.n	8014420 <_malloc_r+0x2c>
 8014486:	1cc4      	adds	r4, r0, #3
 8014488:	f024 0403 	bic.w	r4, r4, #3
 801448c:	42a0      	cmp	r0, r4
 801448e:	d0e3      	beq.n	8014458 <_malloc_r+0x64>
 8014490:	1a21      	subs	r1, r4, r0
 8014492:	4630      	mov	r0, r6
 8014494:	f000 faf6 	bl	8014a84 <_sbrk_r>
 8014498:	3001      	adds	r0, #1
 801449a:	d1dd      	bne.n	8014458 <_malloc_r+0x64>
 801449c:	e7cf      	b.n	801443e <_malloc_r+0x4a>
 801449e:	bf00      	nop
 80144a0:	2000021c 	.word	0x2000021c
 80144a4:	20000220 	.word	0x20000220

080144a8 <__sfputc_r>:
 80144a8:	6893      	ldr	r3, [r2, #8]
 80144aa:	3b01      	subs	r3, #1
 80144ac:	2b00      	cmp	r3, #0
 80144ae:	b410      	push	{r4}
 80144b0:	6093      	str	r3, [r2, #8]
 80144b2:	da08      	bge.n	80144c6 <__sfputc_r+0x1e>
 80144b4:	6994      	ldr	r4, [r2, #24]
 80144b6:	42a3      	cmp	r3, r4
 80144b8:	db01      	blt.n	80144be <__sfputc_r+0x16>
 80144ba:	290a      	cmp	r1, #10
 80144bc:	d103      	bne.n	80144c6 <__sfputc_r+0x1e>
 80144be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144c2:	f000 bb33 	b.w	8014b2c <__swbuf_r>
 80144c6:	6813      	ldr	r3, [r2, #0]
 80144c8:	1c58      	adds	r0, r3, #1
 80144ca:	6010      	str	r0, [r2, #0]
 80144cc:	7019      	strb	r1, [r3, #0]
 80144ce:	4608      	mov	r0, r1
 80144d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80144d4:	4770      	bx	lr

080144d6 <__sfputs_r>:
 80144d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80144d8:	4606      	mov	r6, r0
 80144da:	460f      	mov	r7, r1
 80144dc:	4614      	mov	r4, r2
 80144de:	18d5      	adds	r5, r2, r3
 80144e0:	42ac      	cmp	r4, r5
 80144e2:	d101      	bne.n	80144e8 <__sfputs_r+0x12>
 80144e4:	2000      	movs	r0, #0
 80144e6:	e007      	b.n	80144f8 <__sfputs_r+0x22>
 80144e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144ec:	463a      	mov	r2, r7
 80144ee:	4630      	mov	r0, r6
 80144f0:	f7ff ffda 	bl	80144a8 <__sfputc_r>
 80144f4:	1c43      	adds	r3, r0, #1
 80144f6:	d1f3      	bne.n	80144e0 <__sfputs_r+0xa>
 80144f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080144fc <_vfiprintf_r>:
 80144fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014500:	460d      	mov	r5, r1
 8014502:	b09d      	sub	sp, #116	; 0x74
 8014504:	4614      	mov	r4, r2
 8014506:	4698      	mov	r8, r3
 8014508:	4606      	mov	r6, r0
 801450a:	b118      	cbz	r0, 8014514 <_vfiprintf_r+0x18>
 801450c:	6983      	ldr	r3, [r0, #24]
 801450e:	b90b      	cbnz	r3, 8014514 <_vfiprintf_r+0x18>
 8014510:	f7ff fe66 	bl	80141e0 <__sinit>
 8014514:	4b89      	ldr	r3, [pc, #548]	; (801473c <_vfiprintf_r+0x240>)
 8014516:	429d      	cmp	r5, r3
 8014518:	d11b      	bne.n	8014552 <_vfiprintf_r+0x56>
 801451a:	6875      	ldr	r5, [r6, #4]
 801451c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801451e:	07d9      	lsls	r1, r3, #31
 8014520:	d405      	bmi.n	801452e <_vfiprintf_r+0x32>
 8014522:	89ab      	ldrh	r3, [r5, #12]
 8014524:	059a      	lsls	r2, r3, #22
 8014526:	d402      	bmi.n	801452e <_vfiprintf_r+0x32>
 8014528:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801452a:	f7ff ff09 	bl	8014340 <__retarget_lock_acquire_recursive>
 801452e:	89ab      	ldrh	r3, [r5, #12]
 8014530:	071b      	lsls	r3, r3, #28
 8014532:	d501      	bpl.n	8014538 <_vfiprintf_r+0x3c>
 8014534:	692b      	ldr	r3, [r5, #16]
 8014536:	b9eb      	cbnz	r3, 8014574 <_vfiprintf_r+0x78>
 8014538:	4629      	mov	r1, r5
 801453a:	4630      	mov	r0, r6
 801453c:	f000 fb5a 	bl	8014bf4 <__swsetup_r>
 8014540:	b1c0      	cbz	r0, 8014574 <_vfiprintf_r+0x78>
 8014542:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014544:	07dc      	lsls	r4, r3, #31
 8014546:	d50e      	bpl.n	8014566 <_vfiprintf_r+0x6a>
 8014548:	f04f 30ff 	mov.w	r0, #4294967295
 801454c:	b01d      	add	sp, #116	; 0x74
 801454e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014552:	4b7b      	ldr	r3, [pc, #492]	; (8014740 <_vfiprintf_r+0x244>)
 8014554:	429d      	cmp	r5, r3
 8014556:	d101      	bne.n	801455c <_vfiprintf_r+0x60>
 8014558:	68b5      	ldr	r5, [r6, #8]
 801455a:	e7df      	b.n	801451c <_vfiprintf_r+0x20>
 801455c:	4b79      	ldr	r3, [pc, #484]	; (8014744 <_vfiprintf_r+0x248>)
 801455e:	429d      	cmp	r5, r3
 8014560:	bf08      	it	eq
 8014562:	68f5      	ldreq	r5, [r6, #12]
 8014564:	e7da      	b.n	801451c <_vfiprintf_r+0x20>
 8014566:	89ab      	ldrh	r3, [r5, #12]
 8014568:	0598      	lsls	r0, r3, #22
 801456a:	d4ed      	bmi.n	8014548 <_vfiprintf_r+0x4c>
 801456c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801456e:	f7ff fee8 	bl	8014342 <__retarget_lock_release_recursive>
 8014572:	e7e9      	b.n	8014548 <_vfiprintf_r+0x4c>
 8014574:	2300      	movs	r3, #0
 8014576:	9309      	str	r3, [sp, #36]	; 0x24
 8014578:	2320      	movs	r3, #32
 801457a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801457e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014582:	2330      	movs	r3, #48	; 0x30
 8014584:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014748 <_vfiprintf_r+0x24c>
 8014588:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801458c:	f04f 0901 	mov.w	r9, #1
 8014590:	4623      	mov	r3, r4
 8014592:	469a      	mov	sl, r3
 8014594:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014598:	b10a      	cbz	r2, 801459e <_vfiprintf_r+0xa2>
 801459a:	2a25      	cmp	r2, #37	; 0x25
 801459c:	d1f9      	bne.n	8014592 <_vfiprintf_r+0x96>
 801459e:	ebba 0b04 	subs.w	fp, sl, r4
 80145a2:	d00b      	beq.n	80145bc <_vfiprintf_r+0xc0>
 80145a4:	465b      	mov	r3, fp
 80145a6:	4622      	mov	r2, r4
 80145a8:	4629      	mov	r1, r5
 80145aa:	4630      	mov	r0, r6
 80145ac:	f7ff ff93 	bl	80144d6 <__sfputs_r>
 80145b0:	3001      	adds	r0, #1
 80145b2:	f000 80aa 	beq.w	801470a <_vfiprintf_r+0x20e>
 80145b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80145b8:	445a      	add	r2, fp
 80145ba:	9209      	str	r2, [sp, #36]	; 0x24
 80145bc:	f89a 3000 	ldrb.w	r3, [sl]
 80145c0:	2b00      	cmp	r3, #0
 80145c2:	f000 80a2 	beq.w	801470a <_vfiprintf_r+0x20e>
 80145c6:	2300      	movs	r3, #0
 80145c8:	f04f 32ff 	mov.w	r2, #4294967295
 80145cc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80145d0:	f10a 0a01 	add.w	sl, sl, #1
 80145d4:	9304      	str	r3, [sp, #16]
 80145d6:	9307      	str	r3, [sp, #28]
 80145d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80145dc:	931a      	str	r3, [sp, #104]	; 0x68
 80145de:	4654      	mov	r4, sl
 80145e0:	2205      	movs	r2, #5
 80145e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80145e6:	4858      	ldr	r0, [pc, #352]	; (8014748 <_vfiprintf_r+0x24c>)
 80145e8:	f7eb fe02 	bl	80001f0 <memchr>
 80145ec:	9a04      	ldr	r2, [sp, #16]
 80145ee:	b9d8      	cbnz	r0, 8014628 <_vfiprintf_r+0x12c>
 80145f0:	06d1      	lsls	r1, r2, #27
 80145f2:	bf44      	itt	mi
 80145f4:	2320      	movmi	r3, #32
 80145f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80145fa:	0713      	lsls	r3, r2, #28
 80145fc:	bf44      	itt	mi
 80145fe:	232b      	movmi	r3, #43	; 0x2b
 8014600:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014604:	f89a 3000 	ldrb.w	r3, [sl]
 8014608:	2b2a      	cmp	r3, #42	; 0x2a
 801460a:	d015      	beq.n	8014638 <_vfiprintf_r+0x13c>
 801460c:	9a07      	ldr	r2, [sp, #28]
 801460e:	4654      	mov	r4, sl
 8014610:	2000      	movs	r0, #0
 8014612:	f04f 0c0a 	mov.w	ip, #10
 8014616:	4621      	mov	r1, r4
 8014618:	f811 3b01 	ldrb.w	r3, [r1], #1
 801461c:	3b30      	subs	r3, #48	; 0x30
 801461e:	2b09      	cmp	r3, #9
 8014620:	d94e      	bls.n	80146c0 <_vfiprintf_r+0x1c4>
 8014622:	b1b0      	cbz	r0, 8014652 <_vfiprintf_r+0x156>
 8014624:	9207      	str	r2, [sp, #28]
 8014626:	e014      	b.n	8014652 <_vfiprintf_r+0x156>
 8014628:	eba0 0308 	sub.w	r3, r0, r8
 801462c:	fa09 f303 	lsl.w	r3, r9, r3
 8014630:	4313      	orrs	r3, r2
 8014632:	9304      	str	r3, [sp, #16]
 8014634:	46a2      	mov	sl, r4
 8014636:	e7d2      	b.n	80145de <_vfiprintf_r+0xe2>
 8014638:	9b03      	ldr	r3, [sp, #12]
 801463a:	1d19      	adds	r1, r3, #4
 801463c:	681b      	ldr	r3, [r3, #0]
 801463e:	9103      	str	r1, [sp, #12]
 8014640:	2b00      	cmp	r3, #0
 8014642:	bfbb      	ittet	lt
 8014644:	425b      	neglt	r3, r3
 8014646:	f042 0202 	orrlt.w	r2, r2, #2
 801464a:	9307      	strge	r3, [sp, #28]
 801464c:	9307      	strlt	r3, [sp, #28]
 801464e:	bfb8      	it	lt
 8014650:	9204      	strlt	r2, [sp, #16]
 8014652:	7823      	ldrb	r3, [r4, #0]
 8014654:	2b2e      	cmp	r3, #46	; 0x2e
 8014656:	d10c      	bne.n	8014672 <_vfiprintf_r+0x176>
 8014658:	7863      	ldrb	r3, [r4, #1]
 801465a:	2b2a      	cmp	r3, #42	; 0x2a
 801465c:	d135      	bne.n	80146ca <_vfiprintf_r+0x1ce>
 801465e:	9b03      	ldr	r3, [sp, #12]
 8014660:	1d1a      	adds	r2, r3, #4
 8014662:	681b      	ldr	r3, [r3, #0]
 8014664:	9203      	str	r2, [sp, #12]
 8014666:	2b00      	cmp	r3, #0
 8014668:	bfb8      	it	lt
 801466a:	f04f 33ff 	movlt.w	r3, #4294967295
 801466e:	3402      	adds	r4, #2
 8014670:	9305      	str	r3, [sp, #20]
 8014672:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014758 <_vfiprintf_r+0x25c>
 8014676:	7821      	ldrb	r1, [r4, #0]
 8014678:	2203      	movs	r2, #3
 801467a:	4650      	mov	r0, sl
 801467c:	f7eb fdb8 	bl	80001f0 <memchr>
 8014680:	b140      	cbz	r0, 8014694 <_vfiprintf_r+0x198>
 8014682:	2340      	movs	r3, #64	; 0x40
 8014684:	eba0 000a 	sub.w	r0, r0, sl
 8014688:	fa03 f000 	lsl.w	r0, r3, r0
 801468c:	9b04      	ldr	r3, [sp, #16]
 801468e:	4303      	orrs	r3, r0
 8014690:	3401      	adds	r4, #1
 8014692:	9304      	str	r3, [sp, #16]
 8014694:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014698:	482c      	ldr	r0, [pc, #176]	; (801474c <_vfiprintf_r+0x250>)
 801469a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801469e:	2206      	movs	r2, #6
 80146a0:	f7eb fda6 	bl	80001f0 <memchr>
 80146a4:	2800      	cmp	r0, #0
 80146a6:	d03f      	beq.n	8014728 <_vfiprintf_r+0x22c>
 80146a8:	4b29      	ldr	r3, [pc, #164]	; (8014750 <_vfiprintf_r+0x254>)
 80146aa:	bb1b      	cbnz	r3, 80146f4 <_vfiprintf_r+0x1f8>
 80146ac:	9b03      	ldr	r3, [sp, #12]
 80146ae:	3307      	adds	r3, #7
 80146b0:	f023 0307 	bic.w	r3, r3, #7
 80146b4:	3308      	adds	r3, #8
 80146b6:	9303      	str	r3, [sp, #12]
 80146b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80146ba:	443b      	add	r3, r7
 80146bc:	9309      	str	r3, [sp, #36]	; 0x24
 80146be:	e767      	b.n	8014590 <_vfiprintf_r+0x94>
 80146c0:	fb0c 3202 	mla	r2, ip, r2, r3
 80146c4:	460c      	mov	r4, r1
 80146c6:	2001      	movs	r0, #1
 80146c8:	e7a5      	b.n	8014616 <_vfiprintf_r+0x11a>
 80146ca:	2300      	movs	r3, #0
 80146cc:	3401      	adds	r4, #1
 80146ce:	9305      	str	r3, [sp, #20]
 80146d0:	4619      	mov	r1, r3
 80146d2:	f04f 0c0a 	mov.w	ip, #10
 80146d6:	4620      	mov	r0, r4
 80146d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80146dc:	3a30      	subs	r2, #48	; 0x30
 80146de:	2a09      	cmp	r2, #9
 80146e0:	d903      	bls.n	80146ea <_vfiprintf_r+0x1ee>
 80146e2:	2b00      	cmp	r3, #0
 80146e4:	d0c5      	beq.n	8014672 <_vfiprintf_r+0x176>
 80146e6:	9105      	str	r1, [sp, #20]
 80146e8:	e7c3      	b.n	8014672 <_vfiprintf_r+0x176>
 80146ea:	fb0c 2101 	mla	r1, ip, r1, r2
 80146ee:	4604      	mov	r4, r0
 80146f0:	2301      	movs	r3, #1
 80146f2:	e7f0      	b.n	80146d6 <_vfiprintf_r+0x1da>
 80146f4:	ab03      	add	r3, sp, #12
 80146f6:	9300      	str	r3, [sp, #0]
 80146f8:	462a      	mov	r2, r5
 80146fa:	4b16      	ldr	r3, [pc, #88]	; (8014754 <_vfiprintf_r+0x258>)
 80146fc:	a904      	add	r1, sp, #16
 80146fe:	4630      	mov	r0, r6
 8014700:	f3af 8000 	nop.w
 8014704:	4607      	mov	r7, r0
 8014706:	1c78      	adds	r0, r7, #1
 8014708:	d1d6      	bne.n	80146b8 <_vfiprintf_r+0x1bc>
 801470a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801470c:	07d9      	lsls	r1, r3, #31
 801470e:	d405      	bmi.n	801471c <_vfiprintf_r+0x220>
 8014710:	89ab      	ldrh	r3, [r5, #12]
 8014712:	059a      	lsls	r2, r3, #22
 8014714:	d402      	bmi.n	801471c <_vfiprintf_r+0x220>
 8014716:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014718:	f7ff fe13 	bl	8014342 <__retarget_lock_release_recursive>
 801471c:	89ab      	ldrh	r3, [r5, #12]
 801471e:	065b      	lsls	r3, r3, #25
 8014720:	f53f af12 	bmi.w	8014548 <_vfiprintf_r+0x4c>
 8014724:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014726:	e711      	b.n	801454c <_vfiprintf_r+0x50>
 8014728:	ab03      	add	r3, sp, #12
 801472a:	9300      	str	r3, [sp, #0]
 801472c:	462a      	mov	r2, r5
 801472e:	4b09      	ldr	r3, [pc, #36]	; (8014754 <_vfiprintf_r+0x258>)
 8014730:	a904      	add	r1, sp, #16
 8014732:	4630      	mov	r0, r6
 8014734:	f000 f880 	bl	8014838 <_printf_i>
 8014738:	e7e4      	b.n	8014704 <_vfiprintf_r+0x208>
 801473a:	bf00      	nop
 801473c:	08017c60 	.word	0x08017c60
 8014740:	08017c80 	.word	0x08017c80
 8014744:	08017c40 	.word	0x08017c40
 8014748:	08017ca0 	.word	0x08017ca0
 801474c:	08017caa 	.word	0x08017caa
 8014750:	00000000 	.word	0x00000000
 8014754:	080144d7 	.word	0x080144d7
 8014758:	08017ca6 	.word	0x08017ca6

0801475c <_printf_common>:
 801475c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014760:	4616      	mov	r6, r2
 8014762:	4699      	mov	r9, r3
 8014764:	688a      	ldr	r2, [r1, #8]
 8014766:	690b      	ldr	r3, [r1, #16]
 8014768:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801476c:	4293      	cmp	r3, r2
 801476e:	bfb8      	it	lt
 8014770:	4613      	movlt	r3, r2
 8014772:	6033      	str	r3, [r6, #0]
 8014774:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014778:	4607      	mov	r7, r0
 801477a:	460c      	mov	r4, r1
 801477c:	b10a      	cbz	r2, 8014782 <_printf_common+0x26>
 801477e:	3301      	adds	r3, #1
 8014780:	6033      	str	r3, [r6, #0]
 8014782:	6823      	ldr	r3, [r4, #0]
 8014784:	0699      	lsls	r1, r3, #26
 8014786:	bf42      	ittt	mi
 8014788:	6833      	ldrmi	r3, [r6, #0]
 801478a:	3302      	addmi	r3, #2
 801478c:	6033      	strmi	r3, [r6, #0]
 801478e:	6825      	ldr	r5, [r4, #0]
 8014790:	f015 0506 	ands.w	r5, r5, #6
 8014794:	d106      	bne.n	80147a4 <_printf_common+0x48>
 8014796:	f104 0a19 	add.w	sl, r4, #25
 801479a:	68e3      	ldr	r3, [r4, #12]
 801479c:	6832      	ldr	r2, [r6, #0]
 801479e:	1a9b      	subs	r3, r3, r2
 80147a0:	42ab      	cmp	r3, r5
 80147a2:	dc26      	bgt.n	80147f2 <_printf_common+0x96>
 80147a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80147a8:	1e13      	subs	r3, r2, #0
 80147aa:	6822      	ldr	r2, [r4, #0]
 80147ac:	bf18      	it	ne
 80147ae:	2301      	movne	r3, #1
 80147b0:	0692      	lsls	r2, r2, #26
 80147b2:	d42b      	bmi.n	801480c <_printf_common+0xb0>
 80147b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80147b8:	4649      	mov	r1, r9
 80147ba:	4638      	mov	r0, r7
 80147bc:	47c0      	blx	r8
 80147be:	3001      	adds	r0, #1
 80147c0:	d01e      	beq.n	8014800 <_printf_common+0xa4>
 80147c2:	6823      	ldr	r3, [r4, #0]
 80147c4:	68e5      	ldr	r5, [r4, #12]
 80147c6:	6832      	ldr	r2, [r6, #0]
 80147c8:	f003 0306 	and.w	r3, r3, #6
 80147cc:	2b04      	cmp	r3, #4
 80147ce:	bf08      	it	eq
 80147d0:	1aad      	subeq	r5, r5, r2
 80147d2:	68a3      	ldr	r3, [r4, #8]
 80147d4:	6922      	ldr	r2, [r4, #16]
 80147d6:	bf0c      	ite	eq
 80147d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80147dc:	2500      	movne	r5, #0
 80147de:	4293      	cmp	r3, r2
 80147e0:	bfc4      	itt	gt
 80147e2:	1a9b      	subgt	r3, r3, r2
 80147e4:	18ed      	addgt	r5, r5, r3
 80147e6:	2600      	movs	r6, #0
 80147e8:	341a      	adds	r4, #26
 80147ea:	42b5      	cmp	r5, r6
 80147ec:	d11a      	bne.n	8014824 <_printf_common+0xc8>
 80147ee:	2000      	movs	r0, #0
 80147f0:	e008      	b.n	8014804 <_printf_common+0xa8>
 80147f2:	2301      	movs	r3, #1
 80147f4:	4652      	mov	r2, sl
 80147f6:	4649      	mov	r1, r9
 80147f8:	4638      	mov	r0, r7
 80147fa:	47c0      	blx	r8
 80147fc:	3001      	adds	r0, #1
 80147fe:	d103      	bne.n	8014808 <_printf_common+0xac>
 8014800:	f04f 30ff 	mov.w	r0, #4294967295
 8014804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014808:	3501      	adds	r5, #1
 801480a:	e7c6      	b.n	801479a <_printf_common+0x3e>
 801480c:	18e1      	adds	r1, r4, r3
 801480e:	1c5a      	adds	r2, r3, #1
 8014810:	2030      	movs	r0, #48	; 0x30
 8014812:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014816:	4422      	add	r2, r4
 8014818:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801481c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014820:	3302      	adds	r3, #2
 8014822:	e7c7      	b.n	80147b4 <_printf_common+0x58>
 8014824:	2301      	movs	r3, #1
 8014826:	4622      	mov	r2, r4
 8014828:	4649      	mov	r1, r9
 801482a:	4638      	mov	r0, r7
 801482c:	47c0      	blx	r8
 801482e:	3001      	adds	r0, #1
 8014830:	d0e6      	beq.n	8014800 <_printf_common+0xa4>
 8014832:	3601      	adds	r6, #1
 8014834:	e7d9      	b.n	80147ea <_printf_common+0x8e>
	...

08014838 <_printf_i>:
 8014838:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801483c:	460c      	mov	r4, r1
 801483e:	4691      	mov	r9, r2
 8014840:	7e27      	ldrb	r7, [r4, #24]
 8014842:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014844:	2f78      	cmp	r7, #120	; 0x78
 8014846:	4680      	mov	r8, r0
 8014848:	469a      	mov	sl, r3
 801484a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801484e:	d807      	bhi.n	8014860 <_printf_i+0x28>
 8014850:	2f62      	cmp	r7, #98	; 0x62
 8014852:	d80a      	bhi.n	801486a <_printf_i+0x32>
 8014854:	2f00      	cmp	r7, #0
 8014856:	f000 80d8 	beq.w	8014a0a <_printf_i+0x1d2>
 801485a:	2f58      	cmp	r7, #88	; 0x58
 801485c:	f000 80a3 	beq.w	80149a6 <_printf_i+0x16e>
 8014860:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014864:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014868:	e03a      	b.n	80148e0 <_printf_i+0xa8>
 801486a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801486e:	2b15      	cmp	r3, #21
 8014870:	d8f6      	bhi.n	8014860 <_printf_i+0x28>
 8014872:	a001      	add	r0, pc, #4	; (adr r0, 8014878 <_printf_i+0x40>)
 8014874:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014878:	080148d1 	.word	0x080148d1
 801487c:	080148e5 	.word	0x080148e5
 8014880:	08014861 	.word	0x08014861
 8014884:	08014861 	.word	0x08014861
 8014888:	08014861 	.word	0x08014861
 801488c:	08014861 	.word	0x08014861
 8014890:	080148e5 	.word	0x080148e5
 8014894:	08014861 	.word	0x08014861
 8014898:	08014861 	.word	0x08014861
 801489c:	08014861 	.word	0x08014861
 80148a0:	08014861 	.word	0x08014861
 80148a4:	080149f1 	.word	0x080149f1
 80148a8:	08014915 	.word	0x08014915
 80148ac:	080149d3 	.word	0x080149d3
 80148b0:	08014861 	.word	0x08014861
 80148b4:	08014861 	.word	0x08014861
 80148b8:	08014a13 	.word	0x08014a13
 80148bc:	08014861 	.word	0x08014861
 80148c0:	08014915 	.word	0x08014915
 80148c4:	08014861 	.word	0x08014861
 80148c8:	08014861 	.word	0x08014861
 80148cc:	080149db 	.word	0x080149db
 80148d0:	680b      	ldr	r3, [r1, #0]
 80148d2:	1d1a      	adds	r2, r3, #4
 80148d4:	681b      	ldr	r3, [r3, #0]
 80148d6:	600a      	str	r2, [r1, #0]
 80148d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80148dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80148e0:	2301      	movs	r3, #1
 80148e2:	e0a3      	b.n	8014a2c <_printf_i+0x1f4>
 80148e4:	6825      	ldr	r5, [r4, #0]
 80148e6:	6808      	ldr	r0, [r1, #0]
 80148e8:	062e      	lsls	r6, r5, #24
 80148ea:	f100 0304 	add.w	r3, r0, #4
 80148ee:	d50a      	bpl.n	8014906 <_printf_i+0xce>
 80148f0:	6805      	ldr	r5, [r0, #0]
 80148f2:	600b      	str	r3, [r1, #0]
 80148f4:	2d00      	cmp	r5, #0
 80148f6:	da03      	bge.n	8014900 <_printf_i+0xc8>
 80148f8:	232d      	movs	r3, #45	; 0x2d
 80148fa:	426d      	negs	r5, r5
 80148fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014900:	485e      	ldr	r0, [pc, #376]	; (8014a7c <_printf_i+0x244>)
 8014902:	230a      	movs	r3, #10
 8014904:	e019      	b.n	801493a <_printf_i+0x102>
 8014906:	f015 0f40 	tst.w	r5, #64	; 0x40
 801490a:	6805      	ldr	r5, [r0, #0]
 801490c:	600b      	str	r3, [r1, #0]
 801490e:	bf18      	it	ne
 8014910:	b22d      	sxthne	r5, r5
 8014912:	e7ef      	b.n	80148f4 <_printf_i+0xbc>
 8014914:	680b      	ldr	r3, [r1, #0]
 8014916:	6825      	ldr	r5, [r4, #0]
 8014918:	1d18      	adds	r0, r3, #4
 801491a:	6008      	str	r0, [r1, #0]
 801491c:	0628      	lsls	r0, r5, #24
 801491e:	d501      	bpl.n	8014924 <_printf_i+0xec>
 8014920:	681d      	ldr	r5, [r3, #0]
 8014922:	e002      	b.n	801492a <_printf_i+0xf2>
 8014924:	0669      	lsls	r1, r5, #25
 8014926:	d5fb      	bpl.n	8014920 <_printf_i+0xe8>
 8014928:	881d      	ldrh	r5, [r3, #0]
 801492a:	4854      	ldr	r0, [pc, #336]	; (8014a7c <_printf_i+0x244>)
 801492c:	2f6f      	cmp	r7, #111	; 0x6f
 801492e:	bf0c      	ite	eq
 8014930:	2308      	moveq	r3, #8
 8014932:	230a      	movne	r3, #10
 8014934:	2100      	movs	r1, #0
 8014936:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801493a:	6866      	ldr	r6, [r4, #4]
 801493c:	60a6      	str	r6, [r4, #8]
 801493e:	2e00      	cmp	r6, #0
 8014940:	bfa2      	ittt	ge
 8014942:	6821      	ldrge	r1, [r4, #0]
 8014944:	f021 0104 	bicge.w	r1, r1, #4
 8014948:	6021      	strge	r1, [r4, #0]
 801494a:	b90d      	cbnz	r5, 8014950 <_printf_i+0x118>
 801494c:	2e00      	cmp	r6, #0
 801494e:	d04d      	beq.n	80149ec <_printf_i+0x1b4>
 8014950:	4616      	mov	r6, r2
 8014952:	fbb5 f1f3 	udiv	r1, r5, r3
 8014956:	fb03 5711 	mls	r7, r3, r1, r5
 801495a:	5dc7      	ldrb	r7, [r0, r7]
 801495c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014960:	462f      	mov	r7, r5
 8014962:	42bb      	cmp	r3, r7
 8014964:	460d      	mov	r5, r1
 8014966:	d9f4      	bls.n	8014952 <_printf_i+0x11a>
 8014968:	2b08      	cmp	r3, #8
 801496a:	d10b      	bne.n	8014984 <_printf_i+0x14c>
 801496c:	6823      	ldr	r3, [r4, #0]
 801496e:	07df      	lsls	r7, r3, #31
 8014970:	d508      	bpl.n	8014984 <_printf_i+0x14c>
 8014972:	6923      	ldr	r3, [r4, #16]
 8014974:	6861      	ldr	r1, [r4, #4]
 8014976:	4299      	cmp	r1, r3
 8014978:	bfde      	ittt	le
 801497a:	2330      	movle	r3, #48	; 0x30
 801497c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014980:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014984:	1b92      	subs	r2, r2, r6
 8014986:	6122      	str	r2, [r4, #16]
 8014988:	f8cd a000 	str.w	sl, [sp]
 801498c:	464b      	mov	r3, r9
 801498e:	aa03      	add	r2, sp, #12
 8014990:	4621      	mov	r1, r4
 8014992:	4640      	mov	r0, r8
 8014994:	f7ff fee2 	bl	801475c <_printf_common>
 8014998:	3001      	adds	r0, #1
 801499a:	d14c      	bne.n	8014a36 <_printf_i+0x1fe>
 801499c:	f04f 30ff 	mov.w	r0, #4294967295
 80149a0:	b004      	add	sp, #16
 80149a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80149a6:	4835      	ldr	r0, [pc, #212]	; (8014a7c <_printf_i+0x244>)
 80149a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80149ac:	6823      	ldr	r3, [r4, #0]
 80149ae:	680e      	ldr	r6, [r1, #0]
 80149b0:	061f      	lsls	r7, r3, #24
 80149b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80149b6:	600e      	str	r6, [r1, #0]
 80149b8:	d514      	bpl.n	80149e4 <_printf_i+0x1ac>
 80149ba:	07d9      	lsls	r1, r3, #31
 80149bc:	bf44      	itt	mi
 80149be:	f043 0320 	orrmi.w	r3, r3, #32
 80149c2:	6023      	strmi	r3, [r4, #0]
 80149c4:	b91d      	cbnz	r5, 80149ce <_printf_i+0x196>
 80149c6:	6823      	ldr	r3, [r4, #0]
 80149c8:	f023 0320 	bic.w	r3, r3, #32
 80149cc:	6023      	str	r3, [r4, #0]
 80149ce:	2310      	movs	r3, #16
 80149d0:	e7b0      	b.n	8014934 <_printf_i+0xfc>
 80149d2:	6823      	ldr	r3, [r4, #0]
 80149d4:	f043 0320 	orr.w	r3, r3, #32
 80149d8:	6023      	str	r3, [r4, #0]
 80149da:	2378      	movs	r3, #120	; 0x78
 80149dc:	4828      	ldr	r0, [pc, #160]	; (8014a80 <_printf_i+0x248>)
 80149de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80149e2:	e7e3      	b.n	80149ac <_printf_i+0x174>
 80149e4:	065e      	lsls	r6, r3, #25
 80149e6:	bf48      	it	mi
 80149e8:	b2ad      	uxthmi	r5, r5
 80149ea:	e7e6      	b.n	80149ba <_printf_i+0x182>
 80149ec:	4616      	mov	r6, r2
 80149ee:	e7bb      	b.n	8014968 <_printf_i+0x130>
 80149f0:	680b      	ldr	r3, [r1, #0]
 80149f2:	6826      	ldr	r6, [r4, #0]
 80149f4:	6960      	ldr	r0, [r4, #20]
 80149f6:	1d1d      	adds	r5, r3, #4
 80149f8:	600d      	str	r5, [r1, #0]
 80149fa:	0635      	lsls	r5, r6, #24
 80149fc:	681b      	ldr	r3, [r3, #0]
 80149fe:	d501      	bpl.n	8014a04 <_printf_i+0x1cc>
 8014a00:	6018      	str	r0, [r3, #0]
 8014a02:	e002      	b.n	8014a0a <_printf_i+0x1d2>
 8014a04:	0671      	lsls	r1, r6, #25
 8014a06:	d5fb      	bpl.n	8014a00 <_printf_i+0x1c8>
 8014a08:	8018      	strh	r0, [r3, #0]
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	6123      	str	r3, [r4, #16]
 8014a0e:	4616      	mov	r6, r2
 8014a10:	e7ba      	b.n	8014988 <_printf_i+0x150>
 8014a12:	680b      	ldr	r3, [r1, #0]
 8014a14:	1d1a      	adds	r2, r3, #4
 8014a16:	600a      	str	r2, [r1, #0]
 8014a18:	681e      	ldr	r6, [r3, #0]
 8014a1a:	6862      	ldr	r2, [r4, #4]
 8014a1c:	2100      	movs	r1, #0
 8014a1e:	4630      	mov	r0, r6
 8014a20:	f7eb fbe6 	bl	80001f0 <memchr>
 8014a24:	b108      	cbz	r0, 8014a2a <_printf_i+0x1f2>
 8014a26:	1b80      	subs	r0, r0, r6
 8014a28:	6060      	str	r0, [r4, #4]
 8014a2a:	6863      	ldr	r3, [r4, #4]
 8014a2c:	6123      	str	r3, [r4, #16]
 8014a2e:	2300      	movs	r3, #0
 8014a30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014a34:	e7a8      	b.n	8014988 <_printf_i+0x150>
 8014a36:	6923      	ldr	r3, [r4, #16]
 8014a38:	4632      	mov	r2, r6
 8014a3a:	4649      	mov	r1, r9
 8014a3c:	4640      	mov	r0, r8
 8014a3e:	47d0      	blx	sl
 8014a40:	3001      	adds	r0, #1
 8014a42:	d0ab      	beq.n	801499c <_printf_i+0x164>
 8014a44:	6823      	ldr	r3, [r4, #0]
 8014a46:	079b      	lsls	r3, r3, #30
 8014a48:	d413      	bmi.n	8014a72 <_printf_i+0x23a>
 8014a4a:	68e0      	ldr	r0, [r4, #12]
 8014a4c:	9b03      	ldr	r3, [sp, #12]
 8014a4e:	4298      	cmp	r0, r3
 8014a50:	bfb8      	it	lt
 8014a52:	4618      	movlt	r0, r3
 8014a54:	e7a4      	b.n	80149a0 <_printf_i+0x168>
 8014a56:	2301      	movs	r3, #1
 8014a58:	4632      	mov	r2, r6
 8014a5a:	4649      	mov	r1, r9
 8014a5c:	4640      	mov	r0, r8
 8014a5e:	47d0      	blx	sl
 8014a60:	3001      	adds	r0, #1
 8014a62:	d09b      	beq.n	801499c <_printf_i+0x164>
 8014a64:	3501      	adds	r5, #1
 8014a66:	68e3      	ldr	r3, [r4, #12]
 8014a68:	9903      	ldr	r1, [sp, #12]
 8014a6a:	1a5b      	subs	r3, r3, r1
 8014a6c:	42ab      	cmp	r3, r5
 8014a6e:	dcf2      	bgt.n	8014a56 <_printf_i+0x21e>
 8014a70:	e7eb      	b.n	8014a4a <_printf_i+0x212>
 8014a72:	2500      	movs	r5, #0
 8014a74:	f104 0619 	add.w	r6, r4, #25
 8014a78:	e7f5      	b.n	8014a66 <_printf_i+0x22e>
 8014a7a:	bf00      	nop
 8014a7c:	08017cb1 	.word	0x08017cb1
 8014a80:	08017cc2 	.word	0x08017cc2

08014a84 <_sbrk_r>:
 8014a84:	b538      	push	{r3, r4, r5, lr}
 8014a86:	4d06      	ldr	r5, [pc, #24]	; (8014aa0 <_sbrk_r+0x1c>)
 8014a88:	2300      	movs	r3, #0
 8014a8a:	4604      	mov	r4, r0
 8014a8c:	4608      	mov	r0, r1
 8014a8e:	602b      	str	r3, [r5, #0]
 8014a90:	f7ec fc4a 	bl	8001328 <_sbrk>
 8014a94:	1c43      	adds	r3, r0, #1
 8014a96:	d102      	bne.n	8014a9e <_sbrk_r+0x1a>
 8014a98:	682b      	ldr	r3, [r5, #0]
 8014a9a:	b103      	cbz	r3, 8014a9e <_sbrk_r+0x1a>
 8014a9c:	6023      	str	r3, [r4, #0]
 8014a9e:	bd38      	pop	{r3, r4, r5, pc}
 8014aa0:	20007220 	.word	0x20007220

08014aa4 <__sread>:
 8014aa4:	b510      	push	{r4, lr}
 8014aa6:	460c      	mov	r4, r1
 8014aa8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014aac:	f000 fa6c 	bl	8014f88 <_read_r>
 8014ab0:	2800      	cmp	r0, #0
 8014ab2:	bfab      	itete	ge
 8014ab4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014ab6:	89a3      	ldrhlt	r3, [r4, #12]
 8014ab8:	181b      	addge	r3, r3, r0
 8014aba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014abe:	bfac      	ite	ge
 8014ac0:	6563      	strge	r3, [r4, #84]	; 0x54
 8014ac2:	81a3      	strhlt	r3, [r4, #12]
 8014ac4:	bd10      	pop	{r4, pc}

08014ac6 <__swrite>:
 8014ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014aca:	461f      	mov	r7, r3
 8014acc:	898b      	ldrh	r3, [r1, #12]
 8014ace:	05db      	lsls	r3, r3, #23
 8014ad0:	4605      	mov	r5, r0
 8014ad2:	460c      	mov	r4, r1
 8014ad4:	4616      	mov	r6, r2
 8014ad6:	d505      	bpl.n	8014ae4 <__swrite+0x1e>
 8014ad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014adc:	2302      	movs	r3, #2
 8014ade:	2200      	movs	r2, #0
 8014ae0:	f000 f9d0 	bl	8014e84 <_lseek_r>
 8014ae4:	89a3      	ldrh	r3, [r4, #12]
 8014ae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014aea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014aee:	81a3      	strh	r3, [r4, #12]
 8014af0:	4632      	mov	r2, r6
 8014af2:	463b      	mov	r3, r7
 8014af4:	4628      	mov	r0, r5
 8014af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014afa:	f000 b869 	b.w	8014bd0 <_write_r>

08014afe <__sseek>:
 8014afe:	b510      	push	{r4, lr}
 8014b00:	460c      	mov	r4, r1
 8014b02:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b06:	f000 f9bd 	bl	8014e84 <_lseek_r>
 8014b0a:	1c43      	adds	r3, r0, #1
 8014b0c:	89a3      	ldrh	r3, [r4, #12]
 8014b0e:	bf15      	itete	ne
 8014b10:	6560      	strne	r0, [r4, #84]	; 0x54
 8014b12:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014b16:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014b1a:	81a3      	strheq	r3, [r4, #12]
 8014b1c:	bf18      	it	ne
 8014b1e:	81a3      	strhne	r3, [r4, #12]
 8014b20:	bd10      	pop	{r4, pc}

08014b22 <__sclose>:
 8014b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014b26:	f000 b8db 	b.w	8014ce0 <_close_r>
	...

08014b2c <__swbuf_r>:
 8014b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b2e:	460e      	mov	r6, r1
 8014b30:	4614      	mov	r4, r2
 8014b32:	4605      	mov	r5, r0
 8014b34:	b118      	cbz	r0, 8014b3e <__swbuf_r+0x12>
 8014b36:	6983      	ldr	r3, [r0, #24]
 8014b38:	b90b      	cbnz	r3, 8014b3e <__swbuf_r+0x12>
 8014b3a:	f7ff fb51 	bl	80141e0 <__sinit>
 8014b3e:	4b21      	ldr	r3, [pc, #132]	; (8014bc4 <__swbuf_r+0x98>)
 8014b40:	429c      	cmp	r4, r3
 8014b42:	d12b      	bne.n	8014b9c <__swbuf_r+0x70>
 8014b44:	686c      	ldr	r4, [r5, #4]
 8014b46:	69a3      	ldr	r3, [r4, #24]
 8014b48:	60a3      	str	r3, [r4, #8]
 8014b4a:	89a3      	ldrh	r3, [r4, #12]
 8014b4c:	071a      	lsls	r2, r3, #28
 8014b4e:	d52f      	bpl.n	8014bb0 <__swbuf_r+0x84>
 8014b50:	6923      	ldr	r3, [r4, #16]
 8014b52:	b36b      	cbz	r3, 8014bb0 <__swbuf_r+0x84>
 8014b54:	6923      	ldr	r3, [r4, #16]
 8014b56:	6820      	ldr	r0, [r4, #0]
 8014b58:	1ac0      	subs	r0, r0, r3
 8014b5a:	6963      	ldr	r3, [r4, #20]
 8014b5c:	b2f6      	uxtb	r6, r6
 8014b5e:	4283      	cmp	r3, r0
 8014b60:	4637      	mov	r7, r6
 8014b62:	dc04      	bgt.n	8014b6e <__swbuf_r+0x42>
 8014b64:	4621      	mov	r1, r4
 8014b66:	4628      	mov	r0, r5
 8014b68:	f000 f950 	bl	8014e0c <_fflush_r>
 8014b6c:	bb30      	cbnz	r0, 8014bbc <__swbuf_r+0x90>
 8014b6e:	68a3      	ldr	r3, [r4, #8]
 8014b70:	3b01      	subs	r3, #1
 8014b72:	60a3      	str	r3, [r4, #8]
 8014b74:	6823      	ldr	r3, [r4, #0]
 8014b76:	1c5a      	adds	r2, r3, #1
 8014b78:	6022      	str	r2, [r4, #0]
 8014b7a:	701e      	strb	r6, [r3, #0]
 8014b7c:	6963      	ldr	r3, [r4, #20]
 8014b7e:	3001      	adds	r0, #1
 8014b80:	4283      	cmp	r3, r0
 8014b82:	d004      	beq.n	8014b8e <__swbuf_r+0x62>
 8014b84:	89a3      	ldrh	r3, [r4, #12]
 8014b86:	07db      	lsls	r3, r3, #31
 8014b88:	d506      	bpl.n	8014b98 <__swbuf_r+0x6c>
 8014b8a:	2e0a      	cmp	r6, #10
 8014b8c:	d104      	bne.n	8014b98 <__swbuf_r+0x6c>
 8014b8e:	4621      	mov	r1, r4
 8014b90:	4628      	mov	r0, r5
 8014b92:	f000 f93b 	bl	8014e0c <_fflush_r>
 8014b96:	b988      	cbnz	r0, 8014bbc <__swbuf_r+0x90>
 8014b98:	4638      	mov	r0, r7
 8014b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b9c:	4b0a      	ldr	r3, [pc, #40]	; (8014bc8 <__swbuf_r+0x9c>)
 8014b9e:	429c      	cmp	r4, r3
 8014ba0:	d101      	bne.n	8014ba6 <__swbuf_r+0x7a>
 8014ba2:	68ac      	ldr	r4, [r5, #8]
 8014ba4:	e7cf      	b.n	8014b46 <__swbuf_r+0x1a>
 8014ba6:	4b09      	ldr	r3, [pc, #36]	; (8014bcc <__swbuf_r+0xa0>)
 8014ba8:	429c      	cmp	r4, r3
 8014baa:	bf08      	it	eq
 8014bac:	68ec      	ldreq	r4, [r5, #12]
 8014bae:	e7ca      	b.n	8014b46 <__swbuf_r+0x1a>
 8014bb0:	4621      	mov	r1, r4
 8014bb2:	4628      	mov	r0, r5
 8014bb4:	f000 f81e 	bl	8014bf4 <__swsetup_r>
 8014bb8:	2800      	cmp	r0, #0
 8014bba:	d0cb      	beq.n	8014b54 <__swbuf_r+0x28>
 8014bbc:	f04f 37ff 	mov.w	r7, #4294967295
 8014bc0:	e7ea      	b.n	8014b98 <__swbuf_r+0x6c>
 8014bc2:	bf00      	nop
 8014bc4:	08017c60 	.word	0x08017c60
 8014bc8:	08017c80 	.word	0x08017c80
 8014bcc:	08017c40 	.word	0x08017c40

08014bd0 <_write_r>:
 8014bd0:	b538      	push	{r3, r4, r5, lr}
 8014bd2:	4d07      	ldr	r5, [pc, #28]	; (8014bf0 <_write_r+0x20>)
 8014bd4:	4604      	mov	r4, r0
 8014bd6:	4608      	mov	r0, r1
 8014bd8:	4611      	mov	r1, r2
 8014bda:	2200      	movs	r2, #0
 8014bdc:	602a      	str	r2, [r5, #0]
 8014bde:	461a      	mov	r2, r3
 8014be0:	f7ec f832 	bl	8000c48 <_write>
 8014be4:	1c43      	adds	r3, r0, #1
 8014be6:	d102      	bne.n	8014bee <_write_r+0x1e>
 8014be8:	682b      	ldr	r3, [r5, #0]
 8014bea:	b103      	cbz	r3, 8014bee <_write_r+0x1e>
 8014bec:	6023      	str	r3, [r4, #0]
 8014bee:	bd38      	pop	{r3, r4, r5, pc}
 8014bf0:	20007220 	.word	0x20007220

08014bf4 <__swsetup_r>:
 8014bf4:	4b32      	ldr	r3, [pc, #200]	; (8014cc0 <__swsetup_r+0xcc>)
 8014bf6:	b570      	push	{r4, r5, r6, lr}
 8014bf8:	681d      	ldr	r5, [r3, #0]
 8014bfa:	4606      	mov	r6, r0
 8014bfc:	460c      	mov	r4, r1
 8014bfe:	b125      	cbz	r5, 8014c0a <__swsetup_r+0x16>
 8014c00:	69ab      	ldr	r3, [r5, #24]
 8014c02:	b913      	cbnz	r3, 8014c0a <__swsetup_r+0x16>
 8014c04:	4628      	mov	r0, r5
 8014c06:	f7ff faeb 	bl	80141e0 <__sinit>
 8014c0a:	4b2e      	ldr	r3, [pc, #184]	; (8014cc4 <__swsetup_r+0xd0>)
 8014c0c:	429c      	cmp	r4, r3
 8014c0e:	d10f      	bne.n	8014c30 <__swsetup_r+0x3c>
 8014c10:	686c      	ldr	r4, [r5, #4]
 8014c12:	89a3      	ldrh	r3, [r4, #12]
 8014c14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c18:	0719      	lsls	r1, r3, #28
 8014c1a:	d42c      	bmi.n	8014c76 <__swsetup_r+0x82>
 8014c1c:	06dd      	lsls	r5, r3, #27
 8014c1e:	d411      	bmi.n	8014c44 <__swsetup_r+0x50>
 8014c20:	2309      	movs	r3, #9
 8014c22:	6033      	str	r3, [r6, #0]
 8014c24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014c28:	81a3      	strh	r3, [r4, #12]
 8014c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8014c2e:	e03e      	b.n	8014cae <__swsetup_r+0xba>
 8014c30:	4b25      	ldr	r3, [pc, #148]	; (8014cc8 <__swsetup_r+0xd4>)
 8014c32:	429c      	cmp	r4, r3
 8014c34:	d101      	bne.n	8014c3a <__swsetup_r+0x46>
 8014c36:	68ac      	ldr	r4, [r5, #8]
 8014c38:	e7eb      	b.n	8014c12 <__swsetup_r+0x1e>
 8014c3a:	4b24      	ldr	r3, [pc, #144]	; (8014ccc <__swsetup_r+0xd8>)
 8014c3c:	429c      	cmp	r4, r3
 8014c3e:	bf08      	it	eq
 8014c40:	68ec      	ldreq	r4, [r5, #12]
 8014c42:	e7e6      	b.n	8014c12 <__swsetup_r+0x1e>
 8014c44:	0758      	lsls	r0, r3, #29
 8014c46:	d512      	bpl.n	8014c6e <__swsetup_r+0x7a>
 8014c48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014c4a:	b141      	cbz	r1, 8014c5e <__swsetup_r+0x6a>
 8014c4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c50:	4299      	cmp	r1, r3
 8014c52:	d002      	beq.n	8014c5a <__swsetup_r+0x66>
 8014c54:	4630      	mov	r0, r6
 8014c56:	f7ff fb7d 	bl	8014354 <_free_r>
 8014c5a:	2300      	movs	r3, #0
 8014c5c:	6363      	str	r3, [r4, #52]	; 0x34
 8014c5e:	89a3      	ldrh	r3, [r4, #12]
 8014c60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c64:	81a3      	strh	r3, [r4, #12]
 8014c66:	2300      	movs	r3, #0
 8014c68:	6063      	str	r3, [r4, #4]
 8014c6a:	6923      	ldr	r3, [r4, #16]
 8014c6c:	6023      	str	r3, [r4, #0]
 8014c6e:	89a3      	ldrh	r3, [r4, #12]
 8014c70:	f043 0308 	orr.w	r3, r3, #8
 8014c74:	81a3      	strh	r3, [r4, #12]
 8014c76:	6923      	ldr	r3, [r4, #16]
 8014c78:	b94b      	cbnz	r3, 8014c8e <__swsetup_r+0x9a>
 8014c7a:	89a3      	ldrh	r3, [r4, #12]
 8014c7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c84:	d003      	beq.n	8014c8e <__swsetup_r+0x9a>
 8014c86:	4621      	mov	r1, r4
 8014c88:	4630      	mov	r0, r6
 8014c8a:	f000 f931 	bl	8014ef0 <__smakebuf_r>
 8014c8e:	89a0      	ldrh	r0, [r4, #12]
 8014c90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c94:	f010 0301 	ands.w	r3, r0, #1
 8014c98:	d00a      	beq.n	8014cb0 <__swsetup_r+0xbc>
 8014c9a:	2300      	movs	r3, #0
 8014c9c:	60a3      	str	r3, [r4, #8]
 8014c9e:	6963      	ldr	r3, [r4, #20]
 8014ca0:	425b      	negs	r3, r3
 8014ca2:	61a3      	str	r3, [r4, #24]
 8014ca4:	6923      	ldr	r3, [r4, #16]
 8014ca6:	b943      	cbnz	r3, 8014cba <__swsetup_r+0xc6>
 8014ca8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014cac:	d1ba      	bne.n	8014c24 <__swsetup_r+0x30>
 8014cae:	bd70      	pop	{r4, r5, r6, pc}
 8014cb0:	0781      	lsls	r1, r0, #30
 8014cb2:	bf58      	it	pl
 8014cb4:	6963      	ldrpl	r3, [r4, #20]
 8014cb6:	60a3      	str	r3, [r4, #8]
 8014cb8:	e7f4      	b.n	8014ca4 <__swsetup_r+0xb0>
 8014cba:	2000      	movs	r0, #0
 8014cbc:	e7f7      	b.n	8014cae <__swsetup_r+0xba>
 8014cbe:	bf00      	nop
 8014cc0:	20000014 	.word	0x20000014
 8014cc4:	08017c60 	.word	0x08017c60
 8014cc8:	08017c80 	.word	0x08017c80
 8014ccc:	08017c40 	.word	0x08017c40

08014cd0 <abort>:
 8014cd0:	b508      	push	{r3, lr}
 8014cd2:	2006      	movs	r0, #6
 8014cd4:	f000 f992 	bl	8014ffc <raise>
 8014cd8:	2001      	movs	r0, #1
 8014cda:	f7ec fac9 	bl	8001270 <_exit>
	...

08014ce0 <_close_r>:
 8014ce0:	b538      	push	{r3, r4, r5, lr}
 8014ce2:	4d06      	ldr	r5, [pc, #24]	; (8014cfc <_close_r+0x1c>)
 8014ce4:	2300      	movs	r3, #0
 8014ce6:	4604      	mov	r4, r0
 8014ce8:	4608      	mov	r0, r1
 8014cea:	602b      	str	r3, [r5, #0]
 8014cec:	f7ec fae7 	bl	80012be <_close>
 8014cf0:	1c43      	adds	r3, r0, #1
 8014cf2:	d102      	bne.n	8014cfa <_close_r+0x1a>
 8014cf4:	682b      	ldr	r3, [r5, #0]
 8014cf6:	b103      	cbz	r3, 8014cfa <_close_r+0x1a>
 8014cf8:	6023      	str	r3, [r4, #0]
 8014cfa:	bd38      	pop	{r3, r4, r5, pc}
 8014cfc:	20007220 	.word	0x20007220

08014d00 <__sflush_r>:
 8014d00:	898a      	ldrh	r2, [r1, #12]
 8014d02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014d06:	4605      	mov	r5, r0
 8014d08:	0710      	lsls	r0, r2, #28
 8014d0a:	460c      	mov	r4, r1
 8014d0c:	d458      	bmi.n	8014dc0 <__sflush_r+0xc0>
 8014d0e:	684b      	ldr	r3, [r1, #4]
 8014d10:	2b00      	cmp	r3, #0
 8014d12:	dc05      	bgt.n	8014d20 <__sflush_r+0x20>
 8014d14:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	dc02      	bgt.n	8014d20 <__sflush_r+0x20>
 8014d1a:	2000      	movs	r0, #0
 8014d1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014d20:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d22:	2e00      	cmp	r6, #0
 8014d24:	d0f9      	beq.n	8014d1a <__sflush_r+0x1a>
 8014d26:	2300      	movs	r3, #0
 8014d28:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014d2c:	682f      	ldr	r7, [r5, #0]
 8014d2e:	602b      	str	r3, [r5, #0]
 8014d30:	d032      	beq.n	8014d98 <__sflush_r+0x98>
 8014d32:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014d34:	89a3      	ldrh	r3, [r4, #12]
 8014d36:	075a      	lsls	r2, r3, #29
 8014d38:	d505      	bpl.n	8014d46 <__sflush_r+0x46>
 8014d3a:	6863      	ldr	r3, [r4, #4]
 8014d3c:	1ac0      	subs	r0, r0, r3
 8014d3e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014d40:	b10b      	cbz	r3, 8014d46 <__sflush_r+0x46>
 8014d42:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014d44:	1ac0      	subs	r0, r0, r3
 8014d46:	2300      	movs	r3, #0
 8014d48:	4602      	mov	r2, r0
 8014d4a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014d4c:	6a21      	ldr	r1, [r4, #32]
 8014d4e:	4628      	mov	r0, r5
 8014d50:	47b0      	blx	r6
 8014d52:	1c43      	adds	r3, r0, #1
 8014d54:	89a3      	ldrh	r3, [r4, #12]
 8014d56:	d106      	bne.n	8014d66 <__sflush_r+0x66>
 8014d58:	6829      	ldr	r1, [r5, #0]
 8014d5a:	291d      	cmp	r1, #29
 8014d5c:	d82c      	bhi.n	8014db8 <__sflush_r+0xb8>
 8014d5e:	4a2a      	ldr	r2, [pc, #168]	; (8014e08 <__sflush_r+0x108>)
 8014d60:	40ca      	lsrs	r2, r1
 8014d62:	07d6      	lsls	r6, r2, #31
 8014d64:	d528      	bpl.n	8014db8 <__sflush_r+0xb8>
 8014d66:	2200      	movs	r2, #0
 8014d68:	6062      	str	r2, [r4, #4]
 8014d6a:	04d9      	lsls	r1, r3, #19
 8014d6c:	6922      	ldr	r2, [r4, #16]
 8014d6e:	6022      	str	r2, [r4, #0]
 8014d70:	d504      	bpl.n	8014d7c <__sflush_r+0x7c>
 8014d72:	1c42      	adds	r2, r0, #1
 8014d74:	d101      	bne.n	8014d7a <__sflush_r+0x7a>
 8014d76:	682b      	ldr	r3, [r5, #0]
 8014d78:	b903      	cbnz	r3, 8014d7c <__sflush_r+0x7c>
 8014d7a:	6560      	str	r0, [r4, #84]	; 0x54
 8014d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d7e:	602f      	str	r7, [r5, #0]
 8014d80:	2900      	cmp	r1, #0
 8014d82:	d0ca      	beq.n	8014d1a <__sflush_r+0x1a>
 8014d84:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d88:	4299      	cmp	r1, r3
 8014d8a:	d002      	beq.n	8014d92 <__sflush_r+0x92>
 8014d8c:	4628      	mov	r0, r5
 8014d8e:	f7ff fae1 	bl	8014354 <_free_r>
 8014d92:	2000      	movs	r0, #0
 8014d94:	6360      	str	r0, [r4, #52]	; 0x34
 8014d96:	e7c1      	b.n	8014d1c <__sflush_r+0x1c>
 8014d98:	6a21      	ldr	r1, [r4, #32]
 8014d9a:	2301      	movs	r3, #1
 8014d9c:	4628      	mov	r0, r5
 8014d9e:	47b0      	blx	r6
 8014da0:	1c41      	adds	r1, r0, #1
 8014da2:	d1c7      	bne.n	8014d34 <__sflush_r+0x34>
 8014da4:	682b      	ldr	r3, [r5, #0]
 8014da6:	2b00      	cmp	r3, #0
 8014da8:	d0c4      	beq.n	8014d34 <__sflush_r+0x34>
 8014daa:	2b1d      	cmp	r3, #29
 8014dac:	d001      	beq.n	8014db2 <__sflush_r+0xb2>
 8014dae:	2b16      	cmp	r3, #22
 8014db0:	d101      	bne.n	8014db6 <__sflush_r+0xb6>
 8014db2:	602f      	str	r7, [r5, #0]
 8014db4:	e7b1      	b.n	8014d1a <__sflush_r+0x1a>
 8014db6:	89a3      	ldrh	r3, [r4, #12]
 8014db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014dbc:	81a3      	strh	r3, [r4, #12]
 8014dbe:	e7ad      	b.n	8014d1c <__sflush_r+0x1c>
 8014dc0:	690f      	ldr	r7, [r1, #16]
 8014dc2:	2f00      	cmp	r7, #0
 8014dc4:	d0a9      	beq.n	8014d1a <__sflush_r+0x1a>
 8014dc6:	0793      	lsls	r3, r2, #30
 8014dc8:	680e      	ldr	r6, [r1, #0]
 8014dca:	bf08      	it	eq
 8014dcc:	694b      	ldreq	r3, [r1, #20]
 8014dce:	600f      	str	r7, [r1, #0]
 8014dd0:	bf18      	it	ne
 8014dd2:	2300      	movne	r3, #0
 8014dd4:	eba6 0807 	sub.w	r8, r6, r7
 8014dd8:	608b      	str	r3, [r1, #8]
 8014dda:	f1b8 0f00 	cmp.w	r8, #0
 8014dde:	dd9c      	ble.n	8014d1a <__sflush_r+0x1a>
 8014de0:	6a21      	ldr	r1, [r4, #32]
 8014de2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014de4:	4643      	mov	r3, r8
 8014de6:	463a      	mov	r2, r7
 8014de8:	4628      	mov	r0, r5
 8014dea:	47b0      	blx	r6
 8014dec:	2800      	cmp	r0, #0
 8014dee:	dc06      	bgt.n	8014dfe <__sflush_r+0xfe>
 8014df0:	89a3      	ldrh	r3, [r4, #12]
 8014df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014df6:	81a3      	strh	r3, [r4, #12]
 8014df8:	f04f 30ff 	mov.w	r0, #4294967295
 8014dfc:	e78e      	b.n	8014d1c <__sflush_r+0x1c>
 8014dfe:	4407      	add	r7, r0
 8014e00:	eba8 0800 	sub.w	r8, r8, r0
 8014e04:	e7e9      	b.n	8014dda <__sflush_r+0xda>
 8014e06:	bf00      	nop
 8014e08:	20400001 	.word	0x20400001

08014e0c <_fflush_r>:
 8014e0c:	b538      	push	{r3, r4, r5, lr}
 8014e0e:	690b      	ldr	r3, [r1, #16]
 8014e10:	4605      	mov	r5, r0
 8014e12:	460c      	mov	r4, r1
 8014e14:	b913      	cbnz	r3, 8014e1c <_fflush_r+0x10>
 8014e16:	2500      	movs	r5, #0
 8014e18:	4628      	mov	r0, r5
 8014e1a:	bd38      	pop	{r3, r4, r5, pc}
 8014e1c:	b118      	cbz	r0, 8014e26 <_fflush_r+0x1a>
 8014e1e:	6983      	ldr	r3, [r0, #24]
 8014e20:	b90b      	cbnz	r3, 8014e26 <_fflush_r+0x1a>
 8014e22:	f7ff f9dd 	bl	80141e0 <__sinit>
 8014e26:	4b14      	ldr	r3, [pc, #80]	; (8014e78 <_fflush_r+0x6c>)
 8014e28:	429c      	cmp	r4, r3
 8014e2a:	d11b      	bne.n	8014e64 <_fflush_r+0x58>
 8014e2c:	686c      	ldr	r4, [r5, #4]
 8014e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e32:	2b00      	cmp	r3, #0
 8014e34:	d0ef      	beq.n	8014e16 <_fflush_r+0xa>
 8014e36:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014e38:	07d0      	lsls	r0, r2, #31
 8014e3a:	d404      	bmi.n	8014e46 <_fflush_r+0x3a>
 8014e3c:	0599      	lsls	r1, r3, #22
 8014e3e:	d402      	bmi.n	8014e46 <_fflush_r+0x3a>
 8014e40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e42:	f7ff fa7d 	bl	8014340 <__retarget_lock_acquire_recursive>
 8014e46:	4628      	mov	r0, r5
 8014e48:	4621      	mov	r1, r4
 8014e4a:	f7ff ff59 	bl	8014d00 <__sflush_r>
 8014e4e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014e50:	07da      	lsls	r2, r3, #31
 8014e52:	4605      	mov	r5, r0
 8014e54:	d4e0      	bmi.n	8014e18 <_fflush_r+0xc>
 8014e56:	89a3      	ldrh	r3, [r4, #12]
 8014e58:	059b      	lsls	r3, r3, #22
 8014e5a:	d4dd      	bmi.n	8014e18 <_fflush_r+0xc>
 8014e5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014e5e:	f7ff fa70 	bl	8014342 <__retarget_lock_release_recursive>
 8014e62:	e7d9      	b.n	8014e18 <_fflush_r+0xc>
 8014e64:	4b05      	ldr	r3, [pc, #20]	; (8014e7c <_fflush_r+0x70>)
 8014e66:	429c      	cmp	r4, r3
 8014e68:	d101      	bne.n	8014e6e <_fflush_r+0x62>
 8014e6a:	68ac      	ldr	r4, [r5, #8]
 8014e6c:	e7df      	b.n	8014e2e <_fflush_r+0x22>
 8014e6e:	4b04      	ldr	r3, [pc, #16]	; (8014e80 <_fflush_r+0x74>)
 8014e70:	429c      	cmp	r4, r3
 8014e72:	bf08      	it	eq
 8014e74:	68ec      	ldreq	r4, [r5, #12]
 8014e76:	e7da      	b.n	8014e2e <_fflush_r+0x22>
 8014e78:	08017c60 	.word	0x08017c60
 8014e7c:	08017c80 	.word	0x08017c80
 8014e80:	08017c40 	.word	0x08017c40

08014e84 <_lseek_r>:
 8014e84:	b538      	push	{r3, r4, r5, lr}
 8014e86:	4d07      	ldr	r5, [pc, #28]	; (8014ea4 <_lseek_r+0x20>)
 8014e88:	4604      	mov	r4, r0
 8014e8a:	4608      	mov	r0, r1
 8014e8c:	4611      	mov	r1, r2
 8014e8e:	2200      	movs	r2, #0
 8014e90:	602a      	str	r2, [r5, #0]
 8014e92:	461a      	mov	r2, r3
 8014e94:	f7ec fa3a 	bl	800130c <_lseek>
 8014e98:	1c43      	adds	r3, r0, #1
 8014e9a:	d102      	bne.n	8014ea2 <_lseek_r+0x1e>
 8014e9c:	682b      	ldr	r3, [r5, #0]
 8014e9e:	b103      	cbz	r3, 8014ea2 <_lseek_r+0x1e>
 8014ea0:	6023      	str	r3, [r4, #0]
 8014ea2:	bd38      	pop	{r3, r4, r5, pc}
 8014ea4:	20007220 	.word	0x20007220

08014ea8 <__swhatbuf_r>:
 8014ea8:	b570      	push	{r4, r5, r6, lr}
 8014eaa:	460e      	mov	r6, r1
 8014eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014eb0:	2900      	cmp	r1, #0
 8014eb2:	b096      	sub	sp, #88	; 0x58
 8014eb4:	4614      	mov	r4, r2
 8014eb6:	461d      	mov	r5, r3
 8014eb8:	da07      	bge.n	8014eca <__swhatbuf_r+0x22>
 8014eba:	2300      	movs	r3, #0
 8014ebc:	602b      	str	r3, [r5, #0]
 8014ebe:	89b3      	ldrh	r3, [r6, #12]
 8014ec0:	061a      	lsls	r2, r3, #24
 8014ec2:	d410      	bmi.n	8014ee6 <__swhatbuf_r+0x3e>
 8014ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ec8:	e00e      	b.n	8014ee8 <__swhatbuf_r+0x40>
 8014eca:	466a      	mov	r2, sp
 8014ecc:	f000 f8b2 	bl	8015034 <_fstat_r>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	dbf2      	blt.n	8014eba <__swhatbuf_r+0x12>
 8014ed4:	9a01      	ldr	r2, [sp, #4]
 8014ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014ede:	425a      	negs	r2, r3
 8014ee0:	415a      	adcs	r2, r3
 8014ee2:	602a      	str	r2, [r5, #0]
 8014ee4:	e7ee      	b.n	8014ec4 <__swhatbuf_r+0x1c>
 8014ee6:	2340      	movs	r3, #64	; 0x40
 8014ee8:	2000      	movs	r0, #0
 8014eea:	6023      	str	r3, [r4, #0]
 8014eec:	b016      	add	sp, #88	; 0x58
 8014eee:	bd70      	pop	{r4, r5, r6, pc}

08014ef0 <__smakebuf_r>:
 8014ef0:	898b      	ldrh	r3, [r1, #12]
 8014ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014ef4:	079d      	lsls	r5, r3, #30
 8014ef6:	4606      	mov	r6, r0
 8014ef8:	460c      	mov	r4, r1
 8014efa:	d507      	bpl.n	8014f0c <__smakebuf_r+0x1c>
 8014efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014f00:	6023      	str	r3, [r4, #0]
 8014f02:	6123      	str	r3, [r4, #16]
 8014f04:	2301      	movs	r3, #1
 8014f06:	6163      	str	r3, [r4, #20]
 8014f08:	b002      	add	sp, #8
 8014f0a:	bd70      	pop	{r4, r5, r6, pc}
 8014f0c:	ab01      	add	r3, sp, #4
 8014f0e:	466a      	mov	r2, sp
 8014f10:	f7ff ffca 	bl	8014ea8 <__swhatbuf_r>
 8014f14:	9900      	ldr	r1, [sp, #0]
 8014f16:	4605      	mov	r5, r0
 8014f18:	4630      	mov	r0, r6
 8014f1a:	f7ff fa6b 	bl	80143f4 <_malloc_r>
 8014f1e:	b948      	cbnz	r0, 8014f34 <__smakebuf_r+0x44>
 8014f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f24:	059a      	lsls	r2, r3, #22
 8014f26:	d4ef      	bmi.n	8014f08 <__smakebuf_r+0x18>
 8014f28:	f023 0303 	bic.w	r3, r3, #3
 8014f2c:	f043 0302 	orr.w	r3, r3, #2
 8014f30:	81a3      	strh	r3, [r4, #12]
 8014f32:	e7e3      	b.n	8014efc <__smakebuf_r+0xc>
 8014f34:	4b0d      	ldr	r3, [pc, #52]	; (8014f6c <__smakebuf_r+0x7c>)
 8014f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8014f38:	89a3      	ldrh	r3, [r4, #12]
 8014f3a:	6020      	str	r0, [r4, #0]
 8014f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014f40:	81a3      	strh	r3, [r4, #12]
 8014f42:	9b00      	ldr	r3, [sp, #0]
 8014f44:	6163      	str	r3, [r4, #20]
 8014f46:	9b01      	ldr	r3, [sp, #4]
 8014f48:	6120      	str	r0, [r4, #16]
 8014f4a:	b15b      	cbz	r3, 8014f64 <__smakebuf_r+0x74>
 8014f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f50:	4630      	mov	r0, r6
 8014f52:	f000 f881 	bl	8015058 <_isatty_r>
 8014f56:	b128      	cbz	r0, 8014f64 <__smakebuf_r+0x74>
 8014f58:	89a3      	ldrh	r3, [r4, #12]
 8014f5a:	f023 0303 	bic.w	r3, r3, #3
 8014f5e:	f043 0301 	orr.w	r3, r3, #1
 8014f62:	81a3      	strh	r3, [r4, #12]
 8014f64:	89a0      	ldrh	r0, [r4, #12]
 8014f66:	4305      	orrs	r5, r0
 8014f68:	81a5      	strh	r5, [r4, #12]
 8014f6a:	e7cd      	b.n	8014f08 <__smakebuf_r+0x18>
 8014f6c:	08014179 	.word	0x08014179

08014f70 <__malloc_lock>:
 8014f70:	4801      	ldr	r0, [pc, #4]	; (8014f78 <__malloc_lock+0x8>)
 8014f72:	f7ff b9e5 	b.w	8014340 <__retarget_lock_acquire_recursive>
 8014f76:	bf00      	nop
 8014f78:	20007228 	.word	0x20007228

08014f7c <__malloc_unlock>:
 8014f7c:	4801      	ldr	r0, [pc, #4]	; (8014f84 <__malloc_unlock+0x8>)
 8014f7e:	f7ff b9e0 	b.w	8014342 <__retarget_lock_release_recursive>
 8014f82:	bf00      	nop
 8014f84:	20007228 	.word	0x20007228

08014f88 <_read_r>:
 8014f88:	b538      	push	{r3, r4, r5, lr}
 8014f8a:	4d07      	ldr	r5, [pc, #28]	; (8014fa8 <_read_r+0x20>)
 8014f8c:	4604      	mov	r4, r0
 8014f8e:	4608      	mov	r0, r1
 8014f90:	4611      	mov	r1, r2
 8014f92:	2200      	movs	r2, #0
 8014f94:	602a      	str	r2, [r5, #0]
 8014f96:	461a      	mov	r2, r3
 8014f98:	f7ec f974 	bl	8001284 <_read>
 8014f9c:	1c43      	adds	r3, r0, #1
 8014f9e:	d102      	bne.n	8014fa6 <_read_r+0x1e>
 8014fa0:	682b      	ldr	r3, [r5, #0]
 8014fa2:	b103      	cbz	r3, 8014fa6 <_read_r+0x1e>
 8014fa4:	6023      	str	r3, [r4, #0]
 8014fa6:	bd38      	pop	{r3, r4, r5, pc}
 8014fa8:	20007220 	.word	0x20007220

08014fac <_raise_r>:
 8014fac:	291f      	cmp	r1, #31
 8014fae:	b538      	push	{r3, r4, r5, lr}
 8014fb0:	4604      	mov	r4, r0
 8014fb2:	460d      	mov	r5, r1
 8014fb4:	d904      	bls.n	8014fc0 <_raise_r+0x14>
 8014fb6:	2316      	movs	r3, #22
 8014fb8:	6003      	str	r3, [r0, #0]
 8014fba:	f04f 30ff 	mov.w	r0, #4294967295
 8014fbe:	bd38      	pop	{r3, r4, r5, pc}
 8014fc0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014fc2:	b112      	cbz	r2, 8014fca <_raise_r+0x1e>
 8014fc4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014fc8:	b94b      	cbnz	r3, 8014fde <_raise_r+0x32>
 8014fca:	4620      	mov	r0, r4
 8014fcc:	f000 f830 	bl	8015030 <_getpid_r>
 8014fd0:	462a      	mov	r2, r5
 8014fd2:	4601      	mov	r1, r0
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014fda:	f000 b817 	b.w	801500c <_kill_r>
 8014fde:	2b01      	cmp	r3, #1
 8014fe0:	d00a      	beq.n	8014ff8 <_raise_r+0x4c>
 8014fe2:	1c59      	adds	r1, r3, #1
 8014fe4:	d103      	bne.n	8014fee <_raise_r+0x42>
 8014fe6:	2316      	movs	r3, #22
 8014fe8:	6003      	str	r3, [r0, #0]
 8014fea:	2001      	movs	r0, #1
 8014fec:	e7e7      	b.n	8014fbe <_raise_r+0x12>
 8014fee:	2400      	movs	r4, #0
 8014ff0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014ff4:	4628      	mov	r0, r5
 8014ff6:	4798      	blx	r3
 8014ff8:	2000      	movs	r0, #0
 8014ffa:	e7e0      	b.n	8014fbe <_raise_r+0x12>

08014ffc <raise>:
 8014ffc:	4b02      	ldr	r3, [pc, #8]	; (8015008 <raise+0xc>)
 8014ffe:	4601      	mov	r1, r0
 8015000:	6818      	ldr	r0, [r3, #0]
 8015002:	f7ff bfd3 	b.w	8014fac <_raise_r>
 8015006:	bf00      	nop
 8015008:	20000014 	.word	0x20000014

0801500c <_kill_r>:
 801500c:	b538      	push	{r3, r4, r5, lr}
 801500e:	4d07      	ldr	r5, [pc, #28]	; (801502c <_kill_r+0x20>)
 8015010:	2300      	movs	r3, #0
 8015012:	4604      	mov	r4, r0
 8015014:	4608      	mov	r0, r1
 8015016:	4611      	mov	r1, r2
 8015018:	602b      	str	r3, [r5, #0]
 801501a:	f7ec f917 	bl	800124c <_kill>
 801501e:	1c43      	adds	r3, r0, #1
 8015020:	d102      	bne.n	8015028 <_kill_r+0x1c>
 8015022:	682b      	ldr	r3, [r5, #0]
 8015024:	b103      	cbz	r3, 8015028 <_kill_r+0x1c>
 8015026:	6023      	str	r3, [r4, #0]
 8015028:	bd38      	pop	{r3, r4, r5, pc}
 801502a:	bf00      	nop
 801502c:	20007220 	.word	0x20007220

08015030 <_getpid_r>:
 8015030:	f7ec b904 	b.w	800123c <_getpid>

08015034 <_fstat_r>:
 8015034:	b538      	push	{r3, r4, r5, lr}
 8015036:	4d07      	ldr	r5, [pc, #28]	; (8015054 <_fstat_r+0x20>)
 8015038:	2300      	movs	r3, #0
 801503a:	4604      	mov	r4, r0
 801503c:	4608      	mov	r0, r1
 801503e:	4611      	mov	r1, r2
 8015040:	602b      	str	r3, [r5, #0]
 8015042:	f7ec f948 	bl	80012d6 <_fstat>
 8015046:	1c43      	adds	r3, r0, #1
 8015048:	d102      	bne.n	8015050 <_fstat_r+0x1c>
 801504a:	682b      	ldr	r3, [r5, #0]
 801504c:	b103      	cbz	r3, 8015050 <_fstat_r+0x1c>
 801504e:	6023      	str	r3, [r4, #0]
 8015050:	bd38      	pop	{r3, r4, r5, pc}
 8015052:	bf00      	nop
 8015054:	20007220 	.word	0x20007220

08015058 <_isatty_r>:
 8015058:	b538      	push	{r3, r4, r5, lr}
 801505a:	4d06      	ldr	r5, [pc, #24]	; (8015074 <_isatty_r+0x1c>)
 801505c:	2300      	movs	r3, #0
 801505e:	4604      	mov	r4, r0
 8015060:	4608      	mov	r0, r1
 8015062:	602b      	str	r3, [r5, #0]
 8015064:	f7ec f947 	bl	80012f6 <_isatty>
 8015068:	1c43      	adds	r3, r0, #1
 801506a:	d102      	bne.n	8015072 <_isatty_r+0x1a>
 801506c:	682b      	ldr	r3, [r5, #0]
 801506e:	b103      	cbz	r3, 8015072 <_isatty_r+0x1a>
 8015070:	6023      	str	r3, [r4, #0]
 8015072:	bd38      	pop	{r3, r4, r5, pc}
 8015074:	20007220 	.word	0x20007220

08015078 <_init>:
 8015078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801507a:	bf00      	nop
 801507c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801507e:	bc08      	pop	{r3}
 8015080:	469e      	mov	lr, r3
 8015082:	4770      	bx	lr

08015084 <_fini>:
 8015084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015086:	bf00      	nop
 8015088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801508a:	bc08      	pop	{r3}
 801508c:	469e      	mov	lr, r3
 801508e:	4770      	bx	lr
