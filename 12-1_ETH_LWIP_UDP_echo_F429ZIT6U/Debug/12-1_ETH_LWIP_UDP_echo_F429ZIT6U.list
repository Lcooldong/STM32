
12-1_ETH_LWIP_UDP_echo_F429ZIT6U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014ca0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002c44  08014e50  08014e50  00024e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a94  08017a94  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08017a94  08017a94  00027a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a9c  08017a9c  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08017a9c  08017a9c  00027a9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08017aa0  08017aa0  00027aa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08017aa4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030078  2**0
                  CONTENTS
 10 .bss          000071b4  20000078  20000078  00030078  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000722c  2000722c  00030078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 13 .debug_info   000460af  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008830  00000000  00000000  00076157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000024c0  00000000  00000000  0007e988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000022e8  00000000  00000000  00080e48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00036f5b  00000000  00000000  00083130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003deb7  00000000  00000000  000ba08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b72a  00000000  00000000  000f7f42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  0020366c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009f00  00000000  00000000  002036c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000078 	.word	0x20000078
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08014e38 	.word	0x08014e38

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000007c 	.word	0x2000007c
 80001ec:	08014e38 	.word	0x08014e38

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96e 	b.w	8000584 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468c      	mov	ip, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	f040 8083 	bne.w	80003d6 <__udivmoddi4+0x116>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d947      	bls.n	8000366 <__udivmoddi4+0xa6>
 80002d6:	fab2 f282 	clz	r2, r2
 80002da:	b142      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002dc:	f1c2 0020 	rsb	r0, r2, #32
 80002e0:	fa24 f000 	lsr.w	r0, r4, r0
 80002e4:	4091      	lsls	r1, r2
 80002e6:	4097      	lsls	r7, r2
 80002e8:	ea40 0c01 	orr.w	ip, r0, r1
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbbc f6f8 	udiv	r6, ip, r8
 80002f8:	fa1f fe87 	uxth.w	lr, r7
 80002fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb06 f10e 	mul.w	r1, r6, lr
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18fb      	adds	r3, r7, r3
 800030e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000312:	f080 8119 	bcs.w	8000548 <__udivmoddi4+0x288>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8116 	bls.w	8000548 <__udivmoddi4+0x288>
 800031c:	3e02      	subs	r6, #2
 800031e:	443b      	add	r3, r7
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0f8 	udiv	r0, r3, r8
 8000328:	fb08 3310 	mls	r3, r8, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fe0e 	mul.w	lr, r0, lr
 8000334:	45a6      	cmp	lr, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	193c      	adds	r4, r7, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295
 800033e:	f080 8105 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f240 8102 	bls.w	800054c <__udivmoddi4+0x28c>
 8000348:	3802      	subs	r0, #2
 800034a:	443c      	add	r4, r7
 800034c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000350:	eba4 040e 	sub.w	r4, r4, lr
 8000354:	2600      	movs	r6, #0
 8000356:	b11d      	cbz	r5, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c5 4300 	strd	r4, r3, [r5]
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	b902      	cbnz	r2, 800036a <__udivmoddi4+0xaa>
 8000368:	deff      	udf	#255	; 0xff
 800036a:	fab2 f282 	clz	r2, r2
 800036e:	2a00      	cmp	r2, #0
 8000370:	d150      	bne.n	8000414 <__udivmoddi4+0x154>
 8000372:	1bcb      	subs	r3, r1, r7
 8000374:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	2601      	movs	r6, #1
 800037e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000382:	0c21      	lsrs	r1, r4, #16
 8000384:	fb0e 331c 	mls	r3, lr, ip, r3
 8000388:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800038c:	fb08 f30c 	mul.w	r3, r8, ip
 8000390:	428b      	cmp	r3, r1
 8000392:	d907      	bls.n	80003a4 <__udivmoddi4+0xe4>
 8000394:	1879      	adds	r1, r7, r1
 8000396:	f10c 30ff 	add.w	r0, ip, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0xe2>
 800039c:	428b      	cmp	r3, r1
 800039e:	f200 80e9 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003a2:	4684      	mov	ip, r0
 80003a4:	1ac9      	subs	r1, r1, r3
 80003a6:	b2a3      	uxth	r3, r4
 80003a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80003b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003b4:	fb08 f800 	mul.w	r8, r8, r0
 80003b8:	45a0      	cmp	r8, r4
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x10c>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x10a>
 80003c4:	45a0      	cmp	r8, r4
 80003c6:	f200 80d9 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003ca:	4618      	mov	r0, r3
 80003cc:	eba4 0408 	sub.w	r4, r4, r8
 80003d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003d4:	e7bf      	b.n	8000356 <__udivmoddi4+0x96>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d909      	bls.n	80003ee <__udivmoddi4+0x12e>
 80003da:	2d00      	cmp	r5, #0
 80003dc:	f000 80b1 	beq.w	8000542 <__udivmoddi4+0x282>
 80003e0:	2600      	movs	r6, #0
 80003e2:	e9c5 0100 	strd	r0, r1, [r5]
 80003e6:	4630      	mov	r0, r6
 80003e8:	4631      	mov	r1, r6
 80003ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ee:	fab3 f683 	clz	r6, r3
 80003f2:	2e00      	cmp	r6, #0
 80003f4:	d14a      	bne.n	800048c <__udivmoddi4+0x1cc>
 80003f6:	428b      	cmp	r3, r1
 80003f8:	d302      	bcc.n	8000400 <__udivmoddi4+0x140>
 80003fa:	4282      	cmp	r2, r0
 80003fc:	f200 80b8 	bhi.w	8000570 <__udivmoddi4+0x2b0>
 8000400:	1a84      	subs	r4, r0, r2
 8000402:	eb61 0103 	sbc.w	r1, r1, r3
 8000406:	2001      	movs	r0, #1
 8000408:	468c      	mov	ip, r1
 800040a:	2d00      	cmp	r5, #0
 800040c:	d0a8      	beq.n	8000360 <__udivmoddi4+0xa0>
 800040e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000412:	e7a5      	b.n	8000360 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f603 	lsr.w	r6, r0, r3
 800041c:	4097      	lsls	r7, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000426:	40d9      	lsrs	r1, r3
 8000428:	4330      	orrs	r0, r6
 800042a:	0c03      	lsrs	r3, r0, #16
 800042c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000430:	fa1f f887 	uxth.w	r8, r7
 8000434:	fb0e 1116 	mls	r1, lr, r6, r1
 8000438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043c:	fb06 f108 	mul.w	r1, r6, r8
 8000440:	4299      	cmp	r1, r3
 8000442:	fa04 f402 	lsl.w	r4, r4, r2
 8000446:	d909      	bls.n	800045c <__udivmoddi4+0x19c>
 8000448:	18fb      	adds	r3, r7, r3
 800044a:	f106 3cff 	add.w	ip, r6, #4294967295
 800044e:	f080 808d 	bcs.w	800056c <__udivmoddi4+0x2ac>
 8000452:	4299      	cmp	r1, r3
 8000454:	f240 808a 	bls.w	800056c <__udivmoddi4+0x2ac>
 8000458:	3e02      	subs	r6, #2
 800045a:	443b      	add	r3, r7
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b281      	uxth	r1, r0
 8000460:	fbb3 f0fe 	udiv	r0, r3, lr
 8000464:	fb0e 3310 	mls	r3, lr, r0, r3
 8000468:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046c:	fb00 f308 	mul.w	r3, r0, r8
 8000470:	428b      	cmp	r3, r1
 8000472:	d907      	bls.n	8000484 <__udivmoddi4+0x1c4>
 8000474:	1879      	adds	r1, r7, r1
 8000476:	f100 3cff 	add.w	ip, r0, #4294967295
 800047a:	d273      	bcs.n	8000564 <__udivmoddi4+0x2a4>
 800047c:	428b      	cmp	r3, r1
 800047e:	d971      	bls.n	8000564 <__udivmoddi4+0x2a4>
 8000480:	3802      	subs	r0, #2
 8000482:	4439      	add	r1, r7
 8000484:	1acb      	subs	r3, r1, r3
 8000486:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800048a:	e778      	b.n	800037e <__udivmoddi4+0xbe>
 800048c:	f1c6 0c20 	rsb	ip, r6, #32
 8000490:	fa03 f406 	lsl.w	r4, r3, r6
 8000494:	fa22 f30c 	lsr.w	r3, r2, ip
 8000498:	431c      	orrs	r4, r3
 800049a:	fa20 f70c 	lsr.w	r7, r0, ip
 800049e:	fa01 f306 	lsl.w	r3, r1, r6
 80004a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004aa:	431f      	orrs	r7, r3
 80004ac:	0c3b      	lsrs	r3, r7, #16
 80004ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80004b2:	fa1f f884 	uxth.w	r8, r4
 80004b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004be:	fb09 fa08 	mul.w	sl, r9, r8
 80004c2:	458a      	cmp	sl, r1
 80004c4:	fa02 f206 	lsl.w	r2, r2, r6
 80004c8:	fa00 f306 	lsl.w	r3, r0, r6
 80004cc:	d908      	bls.n	80004e0 <__udivmoddi4+0x220>
 80004ce:	1861      	adds	r1, r4, r1
 80004d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004d4:	d248      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 80004d6:	458a      	cmp	sl, r1
 80004d8:	d946      	bls.n	8000568 <__udivmoddi4+0x2a8>
 80004da:	f1a9 0902 	sub.w	r9, r9, #2
 80004de:	4421      	add	r1, r4
 80004e0:	eba1 010a 	sub.w	r1, r1, sl
 80004e4:	b2bf      	uxth	r7, r7
 80004e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004f2:	fb00 f808 	mul.w	r8, r0, r8
 80004f6:	45b8      	cmp	r8, r7
 80004f8:	d907      	bls.n	800050a <__udivmoddi4+0x24a>
 80004fa:	19e7      	adds	r7, r4, r7
 80004fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000500:	d22e      	bcs.n	8000560 <__udivmoddi4+0x2a0>
 8000502:	45b8      	cmp	r8, r7
 8000504:	d92c      	bls.n	8000560 <__udivmoddi4+0x2a0>
 8000506:	3802      	subs	r0, #2
 8000508:	4427      	add	r7, r4
 800050a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800050e:	eba7 0708 	sub.w	r7, r7, r8
 8000512:	fba0 8902 	umull	r8, r9, r0, r2
 8000516:	454f      	cmp	r7, r9
 8000518:	46c6      	mov	lr, r8
 800051a:	4649      	mov	r1, r9
 800051c:	d31a      	bcc.n	8000554 <__udivmoddi4+0x294>
 800051e:	d017      	beq.n	8000550 <__udivmoddi4+0x290>
 8000520:	b15d      	cbz	r5, 800053a <__udivmoddi4+0x27a>
 8000522:	ebb3 020e 	subs.w	r2, r3, lr
 8000526:	eb67 0701 	sbc.w	r7, r7, r1
 800052a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800052e:	40f2      	lsrs	r2, r6
 8000530:	ea4c 0202 	orr.w	r2, ip, r2
 8000534:	40f7      	lsrs	r7, r6
 8000536:	e9c5 2700 	strd	r2, r7, [r5]
 800053a:	2600      	movs	r6, #0
 800053c:	4631      	mov	r1, r6
 800053e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e70b      	b.n	8000360 <__udivmoddi4+0xa0>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e9      	b.n	8000320 <__udivmoddi4+0x60>
 800054c:	4618      	mov	r0, r3
 800054e:	e6fd      	b.n	800034c <__udivmoddi4+0x8c>
 8000550:	4543      	cmp	r3, r8
 8000552:	d2e5      	bcs.n	8000520 <__udivmoddi4+0x260>
 8000554:	ebb8 0e02 	subs.w	lr, r8, r2
 8000558:	eb69 0104 	sbc.w	r1, r9, r4
 800055c:	3801      	subs	r0, #1
 800055e:	e7df      	b.n	8000520 <__udivmoddi4+0x260>
 8000560:	4608      	mov	r0, r1
 8000562:	e7d2      	b.n	800050a <__udivmoddi4+0x24a>
 8000564:	4660      	mov	r0, ip
 8000566:	e78d      	b.n	8000484 <__udivmoddi4+0x1c4>
 8000568:	4681      	mov	r9, r0
 800056a:	e7b9      	b.n	80004e0 <__udivmoddi4+0x220>
 800056c:	4666      	mov	r6, ip
 800056e:	e775      	b.n	800045c <__udivmoddi4+0x19c>
 8000570:	4630      	mov	r0, r6
 8000572:	e74a      	b.n	800040a <__udivmoddi4+0x14a>
 8000574:	f1ac 0c02 	sub.w	ip, ip, #2
 8000578:	4439      	add	r1, r7
 800057a:	e713      	b.n	80003a4 <__udivmoddi4+0xe4>
 800057c:	3802      	subs	r0, #2
 800057e:	443c      	add	r4, r7
 8000580:	e724      	b.n	80003cc <__udivmoddi4+0x10c>
 8000582:	bf00      	nop

08000584 <__aeabi_idiv0>:
 8000584:	4770      	bx	lr
 8000586:	bf00      	nop

08000588 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800058e:	463b      	mov	r3, r7
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800059a:	4b36      	ldr	r3, [pc, #216]	; (8000674 <MX_ADC1_Init+0xec>)
 800059c:	4a36      	ldr	r2, [pc, #216]	; (8000678 <MX_ADC1_Init+0xf0>)
 800059e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005a0:	4b34      	ldr	r3, [pc, #208]	; (8000674 <MX_ADC1_Init+0xec>)
 80005a2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005a6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <MX_ADC1_Init+0xec>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80005ae:	4b31      	ldr	r3, [pc, #196]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b0:	2201      	movs	r2, #1
 80005b2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80005b4:	4b2f      	ldr	r3, [pc, #188]	; (8000674 <MX_ADC1_Init+0xec>)
 80005b6:	2201      	movs	r2, #1
 80005b8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005ba:	4b2e      	ldr	r3, [pc, #184]	; (8000674 <MX_ADC1_Init+0xec>)
 80005bc:	2200      	movs	r2, #0
 80005be:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005c2:	4b2c      	ldr	r3, [pc, #176]	; (8000674 <MX_ADC1_Init+0xec>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005c8:	4b2a      	ldr	r3, [pc, #168]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ca:	4a2c      	ldr	r2, [pc, #176]	; (800067c <MX_ADC1_Init+0xf4>)
 80005cc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005ce:	4b29      	ldr	r3, [pc, #164]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <MX_ADC1_Init+0xec>)
 80005d6:	2204      	movs	r2, #4
 80005d8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80005da:	4b26      	ldr	r3, [pc, #152]	; (8000674 <MX_ADC1_Init+0xec>)
 80005dc:	2201      	movs	r2, #1
 80005de:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005e2:	4b24      	ldr	r3, [pc, #144]	; (8000674 <MX_ADC1_Init+0xec>)
 80005e4:	2201      	movs	r2, #1
 80005e6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005e8:	4822      	ldr	r0, [pc, #136]	; (8000674 <MX_ADC1_Init+0xec>)
 80005ea:	f001 fc4d 	bl	8001e88 <HAL_ADC_Init>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005f4:	f000 fbca 	bl	8000d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005f8:	230a      	movs	r3, #10
 80005fa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80005fc:	2301      	movs	r3, #1
 80005fe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_84CYCLES;
 8000600:	2304      	movs	r3, #4
 8000602:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000604:	463b      	mov	r3, r7
 8000606:	4619      	mov	r1, r3
 8000608:	481a      	ldr	r0, [pc, #104]	; (8000674 <MX_ADC1_Init+0xec>)
 800060a:	f001 fc81 	bl	8001f10 <HAL_ADC_ConfigChannel>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000614:	f000 fbba 	bl	8000d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000618:	230c      	movs	r3, #12
 800061a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800061c:	2302      	movs	r3, #2
 800061e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000620:	463b      	mov	r3, r7
 8000622:	4619      	mov	r1, r3
 8000624:	4813      	ldr	r0, [pc, #76]	; (8000674 <MX_ADC1_Init+0xec>)
 8000626:	f001 fc73 	bl	8001f10 <HAL_ADC_ConfigChannel>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000630:	f000 fbac 	bl	8000d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000634:	230d      	movs	r3, #13
 8000636:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800063c:	463b      	mov	r3, r7
 800063e:	4619      	mov	r1, r3
 8000640:	480c      	ldr	r0, [pc, #48]	; (8000674 <MX_ADC1_Init+0xec>)
 8000642:	f001 fc65 	bl	8001f10 <HAL_ADC_ConfigChannel>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 800064c:	f000 fb9e 	bl	8000d8c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000650:	2309      	movs	r3, #9
 8000652:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000654:	2304      	movs	r3, #4
 8000656:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000658:	463b      	mov	r3, r7
 800065a:	4619      	mov	r1, r3
 800065c:	4805      	ldr	r0, [pc, #20]	; (8000674 <MX_ADC1_Init+0xec>)
 800065e:	f001 fc57 	bl	8001f10 <HAL_ADC_ConfigChannel>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000668:	f000 fb90 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800066c:	bf00      	nop
 800066e:	3710      	adds	r7, #16
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000224 	.word	0x20000224
 8000678:	40012000 	.word	0x40012000
 800067c:	0f000001 	.word	0x0f000001

08000680 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08a      	sub	sp, #40	; 0x28
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <HAL_ADC_MspInit+0x110>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	d171      	bne.n	8000786 <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006a2:	2300      	movs	r3, #0
 80006a4:	613b      	str	r3, [r7, #16]
 80006a6:	4b3b      	ldr	r3, [pc, #236]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006aa:	4a3a      	ldr	r2, [pc, #232]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b0:	6453      	str	r3, [r2, #68]	; 0x44
 80006b2:	4b38      	ldr	r3, [pc, #224]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ba:	613b      	str	r3, [r7, #16]
 80006bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006be:	2300      	movs	r3, #0
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	4b34      	ldr	r3, [pc, #208]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	4a33      	ldr	r2, [pc, #204]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	6313      	str	r3, [r2, #48]	; 0x30
 80006ce:	4b31      	ldr	r3, [pc, #196]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	60fb      	str	r3, [r7, #12]
 80006d8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006da:	2300      	movs	r3, #0
 80006dc:	60bb      	str	r3, [r7, #8]
 80006de:	4b2d      	ldr	r3, [pc, #180]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	4a2c      	ldr	r2, [pc, #176]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006e4:	f043 0302 	orr.w	r3, r3, #2
 80006e8:	6313      	str	r3, [r2, #48]	; 0x30
 80006ea:	4b2a      	ldr	r3, [pc, #168]	; (8000794 <HAL_ADC_MspInit+0x114>)
 80006ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ee:	f003 0302 	and.w	r3, r3, #2
 80006f2:	60bb      	str	r3, [r7, #8]
 80006f4:	68bb      	ldr	r3, [r7, #8]
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PC3     ------> ADC1_IN13
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80006f6:	230d      	movs	r3, #13
 80006f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006fa:	2303      	movs	r3, #3
 80006fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000702:	f107 0314 	add.w	r3, r7, #20
 8000706:	4619      	mov	r1, r3
 8000708:	4823      	ldr	r0, [pc, #140]	; (8000798 <HAL_ADC_MspInit+0x118>)
 800070a:	f003 fce5 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800070e:	2302      	movs	r3, #2
 8000710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000712:	2303      	movs	r3, #3
 8000714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071a:	f107 0314 	add.w	r3, r7, #20
 800071e:	4619      	mov	r1, r3
 8000720:	481e      	ldr	r0, [pc, #120]	; (800079c <HAL_ADC_MspInit+0x11c>)
 8000722:	f003 fcd9 	bl	80040d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000726:	4b1e      	ldr	r3, [pc, #120]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_ADC_MspInit+0x124>)
 800072a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800072c:	4b1c      	ldr	r3, [pc, #112]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800072e:	2200      	movs	r2, #0
 8000730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000732:	4b1b      	ldr	r3, [pc, #108]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000734:	2200      	movs	r2, #0
 8000736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000738:	4b19      	ldr	r3, [pc, #100]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800073a:	2200      	movs	r2, #0
 800073c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800073e:	4b18      	ldr	r3, [pc, #96]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000746:	4b16      	ldr	r3, [pc, #88]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800074c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800074e:	4b14      	ldr	r3, [pc, #80]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000750:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000756:	4b12      	ldr	r3, [pc, #72]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800075c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800075e:	4b10      	ldr	r3, [pc, #64]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000760:	2200      	movs	r2, #0
 8000762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000764:	4b0e      	ldr	r3, [pc, #56]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000766:	2200      	movs	r2, #0
 8000768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800076a:	480d      	ldr	r0, [pc, #52]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800076c:	f001 ff80 	bl	8002670 <HAL_DMA_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8000776:	f000 fb09 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4a08      	ldr	r2, [pc, #32]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 800077e:	639a      	str	r2, [r3, #56]	; 0x38
 8000780:	4a07      	ldr	r2, [pc, #28]	; (80007a0 <HAL_ADC_MspInit+0x120>)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000786:	bf00      	nop
 8000788:	3728      	adds	r7, #40	; 0x28
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40012000 	.word	0x40012000
 8000794:	40023800 	.word	0x40023800
 8000798:	40020800 	.word	0x40020800
 800079c:	40020400 	.word	0x40020400
 80007a0:	2000026c 	.word	0x2000026c
 80007a4:	40026410 	.word	0x40026410

080007a8 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80007ae:	463b      	mov	r3, r7
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007b8:	4a0f      	ldr	r2, [pc, #60]	; (80007f8 <MX_DAC_Init+0x50>)
 80007ba:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80007bc:	480d      	ldr	r0, [pc, #52]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007be:	f001 fee6 	bl	800258e <HAL_DAC_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d001      	beq.n	80007cc <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80007c8:	f000 fae0 	bl	8000d8c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80007d0:	2300      	movs	r3, #0
 80007d2:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80007d4:	463b      	mov	r3, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	4619      	mov	r1, r3
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <MX_DAC_Init+0x4c>)
 80007dc:	f001 fef9 	bl	80025d2 <HAL_DAC_ConfigChannel>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80007e6:	f000 fad1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	200002cc 	.word	0x200002cc
 80007f8:	40007400 	.word	0x40007400

080007fc <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b08a      	sub	sp, #40	; 0x28
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
 8000812:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	4a17      	ldr	r2, [pc, #92]	; (8000878 <HAL_DAC_MspInit+0x7c>)
 800081a:	4293      	cmp	r3, r2
 800081c:	d127      	bne.n	800086e <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	613b      	str	r3, [r7, #16]
 8000822:	4b16      	ldr	r3, [pc, #88]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a15      	ldr	r2, [pc, #84]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000828:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b13      	ldr	r3, [pc, #76]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a0e      	ldr	r2, [pc, #56]	; (800087c <HAL_DAC_MspInit+0x80>)
 8000844:	f043 0301 	orr.w	r3, r3, #1
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <HAL_DAC_MspInit+0x80>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000856:	2310      	movs	r3, #16
 8000858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085a:	2303      	movs	r3, #3
 800085c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	4619      	mov	r1, r3
 8000868:	4805      	ldr	r0, [pc, #20]	; (8000880 <HAL_DAC_MspInit+0x84>)
 800086a:	f003 fc35 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800086e:	bf00      	nop
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40007400 	.word	0x40007400
 800087c:	40023800 	.word	0x40023800
 8000880:	40020000 	.word	0x40020000

08000884 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <MX_DMA_Init+0x5c>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <MX_DMA_Init+0x5c>)
 8000894:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b11      	ldr	r3, [pc, #68]	; (80008e0 <MX_DMA_Init+0x5c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2100      	movs	r1, #0
 80008aa:	2038      	movs	r0, #56	; 0x38
 80008ac:	f001 fe39 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008b0:	2038      	movs	r0, #56	; 0x38
 80008b2:	f001 fe52 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80008b6:	2200      	movs	r2, #0
 80008b8:	2100      	movs	r1, #0
 80008ba:	203b      	movs	r0, #59	; 0x3b
 80008bc:	f001 fe31 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80008c0:	203b      	movs	r0, #59	; 0x3b
 80008c2:	f001 fe4a 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80008c6:	2200      	movs	r2, #0
 80008c8:	2100      	movs	r1, #0
 80008ca:	2045      	movs	r0, #69	; 0x45
 80008cc:	f001 fe29 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80008d0:	2045      	movs	r0, #69	; 0x45
 80008d2:	f001 fe42 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	40023800 	.word	0x40023800

080008e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b08c      	sub	sp, #48	; 0x30
 80008e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ea:	f107 031c 	add.w	r3, r7, #28
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]
 80008f6:	60da      	str	r2, [r3, #12]
 80008f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008fa:	2300      	movs	r3, #0
 80008fc:	61bb      	str	r3, [r7, #24]
 80008fe:	4b4f      	ldr	r3, [pc, #316]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a4e      	ldr	r2, [pc, #312]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000904:	f043 0320 	orr.w	r3, r3, #32
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b4c      	ldr	r3, [pc, #304]	; (8000a3c <MX_GPIO_Init+0x158>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0320 	and.w	r3, r3, #32
 8000912:	61bb      	str	r3, [r7, #24]
 8000914:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	617b      	str	r3, [r7, #20]
 800091a:	4b48      	ldr	r3, [pc, #288]	; (8000a3c <MX_GPIO_Init+0x158>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a47      	ldr	r2, [pc, #284]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b45      	ldr	r3, [pc, #276]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800092e:	617b      	str	r3, [r7, #20]
 8000930:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
 8000936:	4b41      	ldr	r3, [pc, #260]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a40      	ldr	r2, [pc, #256]	; (8000a3c <MX_GPIO_Init+0x158>)
 800093c:	f043 0304 	orr.w	r3, r3, #4
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b3e      	ldr	r3, [pc, #248]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0304 	and.w	r3, r3, #4
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	4b3a      	ldr	r3, [pc, #232]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a39      	ldr	r2, [pc, #228]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b37      	ldr	r3, [pc, #220]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60fb      	str	r3, [r7, #12]
 8000968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	60bb      	str	r3, [r7, #8]
 800096e:	4b33      	ldr	r3, [pc, #204]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a32      	ldr	r2, [pc, #200]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b30      	ldr	r3, [pc, #192]	; (8000a3c <MX_GPIO_Init+0x158>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	60bb      	str	r3, [r7, #8]
 8000984:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b2c      	ldr	r3, [pc, #176]	; (8000a3c <MX_GPIO_Init+0x158>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	4a2b      	ldr	r2, [pc, #172]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000990:	f043 0308 	orr.w	r3, r3, #8
 8000994:	6313      	str	r3, [r2, #48]	; 0x30
 8000996:	4b29      	ldr	r3, [pc, #164]	; (8000a3c <MX_GPIO_Init+0x158>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	f003 0308 	and.w	r3, r3, #8
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80009a2:	2200      	movs	r2, #0
 80009a4:	2140      	movs	r1, #64	; 0x40
 80009a6:	4826      	ldr	r0, [pc, #152]	; (8000a40 <MX_GPIO_Init+0x15c>)
 80009a8:	f003 fd5a 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_7, GPIO_PIN_RESET);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2181      	movs	r1, #129	; 0x81
 80009b0:	4824      	ldr	r0, [pc, #144]	; (8000a44 <MX_GPIO_Init+0x160>)
 80009b2:	f003 fd55 	bl	8004460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80009b6:	2340      	movs	r3, #64	; 0x40
 80009b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c6:	f107 031c 	add.w	r3, r7, #28
 80009ca:	4619      	mov	r1, r3
 80009cc:	481c      	ldr	r0, [pc, #112]	; (8000a40 <MX_GPIO_Init+0x15c>)
 80009ce:	f003 fb83 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80009d2:	2381      	movs	r3, #129	; 0x81
 80009d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009d6:	2301      	movs	r3, #1
 80009d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009da:	2300      	movs	r3, #0
 80009dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009de:	2300      	movs	r3, #0
 80009e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e2:	f107 031c 	add.w	r3, r7, #28
 80009e6:	4619      	mov	r1, r3
 80009e8:	4816      	ldr	r0, [pc, #88]	; (8000a44 <MX_GPIO_Init+0x160>)
 80009ea:	f003 fb75 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80009f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009fa:	2302      	movs	r3, #2
 80009fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009fe:	f107 031c 	add.w	r3, r7, #28
 8000a02:	4619      	mov	r1, r3
 8000a04:	4810      	ldr	r0, [pc, #64]	; (8000a48 <MX_GPIO_Init+0x164>)
 8000a06:	f003 fb67 	bl	80040d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a0a:	2308      	movs	r3, #8
 8000a0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a16:	f107 031c 	add.w	r3, r7, #28
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <MX_GPIO_Init+0x164>)
 8000a1e:	f003 fb5b 	bl	80040d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a22:	2200      	movs	r2, #0
 8000a24:	2100      	movs	r1, #0
 8000a26:	2028      	movs	r0, #40	; 0x28
 8000a28:	f001 fd7b 	bl	8002522 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a2c:	2028      	movs	r0, #40	; 0x28
 8000a2e:	f001 fd94 	bl	800255a <HAL_NVIC_EnableIRQ>

}
 8000a32:	bf00      	nop
 8000a34:	3730      	adds	r7, #48	; 0x30
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400
 8000a48:	40020c00 	.word	0x40020c00

08000a4c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a52:	4a1c      	ldr	r2, [pc, #112]	; (8000ac4 <MX_I2C1_Init+0x78>)
 8000a54:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a58:	4a1b      	ldr	r2, [pc, #108]	; (8000ac8 <MX_I2C1_Init+0x7c>)
 8000a5a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a6a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a6e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a88:	480d      	ldr	r0, [pc, #52]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a8a:	f003 fd27 	bl	80044dc <HAL_I2C_Init>
 8000a8e:	4603      	mov	r3, r0
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d001      	beq.n	8000a98 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a94:	f000 f97a 	bl	8000d8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a98:	2100      	movs	r1, #0
 8000a9a:	4809      	ldr	r0, [pc, #36]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000a9c:	f003 fe62 	bl	8004764 <HAL_I2CEx_ConfigAnalogFilter>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000aa6:	f000 f971 	bl	8000d8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4804      	ldr	r0, [pc, #16]	; (8000ac0 <MX_I2C1_Init+0x74>)
 8000aae:	f003 fe95 	bl	80047dc <HAL_I2CEx_ConfigDigitalFilter>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d001      	beq.n	8000abc <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000ab8:	f000 f968 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000abc:	bf00      	nop
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200002e0 	.word	0x200002e0
 8000ac4:	40005400 	.word	0x40005400
 8000ac8:	00061a80 	.word	0x00061a80

08000acc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000ad0:	4b1b      	ldr	r3, [pc, #108]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ad2:	4a1c      	ldr	r2, [pc, #112]	; (8000b44 <MX_I2C2_Init+0x78>)
 8000ad4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ad8:	4a1b      	ldr	r2, [pc, #108]	; (8000b48 <MX_I2C2_Init+0x7c>)
 8000ada:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000adc:	4b18      	ldr	r3, [pc, #96]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ae8:	4b15      	ldr	r3, [pc, #84]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000aea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000aee:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000af6:	4b12      	ldr	r3, [pc, #72]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000afc:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b02:	4b0f      	ldr	r3, [pc, #60]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b0a:	f003 fce7 	bl	80044dc <HAL_I2C_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000b14:	f000 f93a 	bl	8000d8c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4809      	ldr	r0, [pc, #36]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b1c:	f003 fe22 	bl	8004764 <HAL_I2CEx_ConfigAnalogFilter>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 8000b26:	f000 f931 	bl	8000d8c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	4804      	ldr	r0, [pc, #16]	; (8000b40 <MX_I2C2_Init+0x74>)
 8000b2e:	f003 fe55 	bl	80047dc <HAL_I2CEx_ConfigDigitalFilter>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 8000b38:	f000 f928 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	20000334 	.word	0x20000334
 8000b44:	40005800 	.word	0x40005800
 8000b48:	000186a0 	.word	0x000186a0

08000b4c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08c      	sub	sp, #48	; 0x30
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a32      	ldr	r2, [pc, #200]	; (8000c34 <HAL_I2C_MspInit+0xe8>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d12d      	bne.n	8000bca <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b6e:	2300      	movs	r3, #0
 8000b70:	61bb      	str	r3, [r7, #24]
 8000b72:	4b31      	ldr	r3, [pc, #196]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b76:	4a30      	ldr	r2, [pc, #192]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b78:	f043 0302 	orr.w	r3, r3, #2
 8000b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7e:	4b2e      	ldr	r3, [pc, #184]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b82:	f003 0302 	and.w	r3, r3, #2
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b90:	2312      	movs	r3, #18
 8000b92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b98:	2303      	movs	r3, #3
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b9c:	2304      	movs	r3, #4
 8000b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba0:	f107 031c 	add.w	r3, r7, #28
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4825      	ldr	r0, [pc, #148]	; (8000c3c <HAL_I2C_MspInit+0xf0>)
 8000ba8:	f003 fa96 	bl	80040d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bac:	2300      	movs	r3, #0
 8000bae:	617b      	str	r3, [r7, #20]
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bb6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bba:	6413      	str	r3, [r2, #64]	; 0x40
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc4:	617b      	str	r3, [r7, #20]
 8000bc6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000bc8:	e030      	b.n	8000c2c <HAL_I2C_MspInit+0xe0>
  else if(i2cHandle->Instance==I2C2)
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a1c      	ldr	r2, [pc, #112]	; (8000c40 <HAL_I2C_MspInit+0xf4>)
 8000bd0:	4293      	cmp	r3, r2
 8000bd2:	d12b      	bne.n	8000c2c <HAL_I2C_MspInit+0xe0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	4b17      	ldr	r3, [pc, #92]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bdc:	4a16      	ldr	r2, [pc, #88]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000bde:	f043 0320 	orr.w	r3, r3, #32
 8000be2:	6313      	str	r3, [r2, #48]	; 0x30
 8000be4:	4b14      	ldr	r3, [pc, #80]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be8:	f003 0320 	and.w	r3, r3, #32
 8000bec:	613b      	str	r3, [r7, #16]
 8000bee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bf0:	2303      	movs	r3, #3
 8000bf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf4:	2312      	movs	r3, #18
 8000bf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c00:	2304      	movs	r3, #4
 8000c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480e      	ldr	r0, [pc, #56]	; (8000c44 <HAL_I2C_MspInit+0xf8>)
 8000c0c:	f003 fa64 	bl	80040d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	4b08      	ldr	r3, [pc, #32]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a07      	ldr	r2, [pc, #28]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c1a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b05      	ldr	r3, [pc, #20]	; (8000c38 <HAL_I2C_MspInit+0xec>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c28:	60fb      	str	r3, [r7, #12]
 8000c2a:	68fb      	ldr	r3, [r7, #12]
}
 8000c2c:	bf00      	nop
 8000c2e:	3730      	adds	r7, #48	; 0x30
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40005400 	.word	0x40005400
 8000c38:	40023800 	.word	0x40023800
 8000c3c:	40020400 	.word	0x40020400
 8000c40:	40005800 	.word	0x40005800
 8000c44:	40021400 	.word	0x40021400

08000c48 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c4c:	f001 f886 	bl	8001d5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c50:	f000 f82c 	bl	8000cac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c54:	f7ff fe46 	bl	80008e4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c58:	f000 ffdc 	bl	8001c14 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000c5c:	f7ff fef6 	bl	8000a4c <MX_I2C1_Init>
  MX_TIM7_Init();
 8000c60:	f000 fda6 	bl	80017b0 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000c64:	f000 fc18 	bl	8001498 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c68:	f000 fc8c 	bl	8001584 <MX_TIM4_Init>
  MX_TIM10_Init();
 8000c6c:	f000 fdd6 	bl	800181c <MX_TIM10_Init>
  MX_TIM2_Init();
 8000c70:	f000 fb9c 	bl	80013ac <MX_TIM2_Init>
  MX_DMA_Init();
 8000c74:	f7ff fe06 	bl	8000884 <MX_DMA_Init>
  MX_ADC1_Init();
 8000c78:	f7ff fc86 	bl	8000588 <MX_ADC1_Init>
  MX_TIM5_Init();
 8000c7c:	f000 fd16 	bl	80016ac <MX_TIM5_Init>
  MX_DAC_Init();
 8000c80:	f7ff fd92 	bl	80007a8 <MX_DAC_Init>
  MX_I2C2_Init();
 8000c84:	f7ff ff22 	bl	8000acc <MX_I2C2_Init>
  MX_SPI2_Init();
 8000c88:	f000 f996 	bl	8000fb8 <MX_SPI2_Init>
  MX_SDIO_SD_Init();
 8000c8c:	f000 f884 	bl	8000d98 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000c90:	f008 f922 	bl	8008ed8 <MX_FATFS_Init>
  MX_LWIP_Init();
 8000c94:	f008 fb7a 	bl	800938c <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */

  /* tcp echo server Init */
  udp_echoserver_init();
 8000c98:	f000 ff80 	bl	8001b9c <udp_echoserver_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
   /* Read a received packet from the Ethernet buffers and send it
	   to the lwIP for handling */
	ethernetif_input(&gnetif);
 8000c9c:	4802      	ldr	r0, [pc, #8]	; (8000ca8 <main+0x60>)
 8000c9e:	f008 ff4d 	bl	8009b3c <ethernetif_input>

	/* Handle timeouts */
	sys_check_timeouts();
 8000ca2:	f010 f833 	bl	8010d0c <sys_check_timeouts>
	ethernetif_input(&gnetif);
 8000ca6:	e7f9      	b.n	8000c9c <main+0x54>
 8000ca8:	20000b8c 	.word	0x20000b8c

08000cac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b094      	sub	sp, #80	; 0x50
 8000cb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb2:	f107 0320 	add.w	r3, r7, #32
 8000cb6:	2230      	movs	r2, #48	; 0x30
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f013 f89a 	bl	8013df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc0:	f107 030c 	add.w	r3, r7, #12
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
 8000cc8:	605a      	str	r2, [r3, #4]
 8000cca:	609a      	str	r2, [r3, #8]
 8000ccc:	60da      	str	r2, [r3, #12]
 8000cce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	60bb      	str	r3, [r7, #8]
 8000cd4:	4b2b      	ldr	r3, [pc, #172]	; (8000d84 <SystemClock_Config+0xd8>)
 8000cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd8:	4a2a      	ldr	r2, [pc, #168]	; (8000d84 <SystemClock_Config+0xd8>)
 8000cda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cde:	6413      	str	r3, [r2, #64]	; 0x40
 8000ce0:	4b28      	ldr	r3, [pc, #160]	; (8000d84 <SystemClock_Config+0xd8>)
 8000ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	4b25      	ldr	r3, [pc, #148]	; (8000d88 <SystemClock_Config+0xdc>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a24      	ldr	r2, [pc, #144]	; (8000d88 <SystemClock_Config+0xdc>)
 8000cf6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000cfa:	6013      	str	r3, [r2, #0]
 8000cfc:	4b22      	ldr	r3, [pc, #136]	; (8000d88 <SystemClock_Config+0xdc>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d04:	607b      	str	r3, [r7, #4]
 8000d06:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d08:	2301      	movs	r3, #1
 8000d0a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d0c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d12:	2302      	movs	r3, #2
 8000d14:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d16:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d1c:	2304      	movs	r3, #4
 8000d1e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000d20:	23b4      	movs	r3, #180	; 0xb4
 8000d22:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d2c:	f107 0320 	add.w	r3, r7, #32
 8000d30:	4618      	mov	r0, r3
 8000d32:	f003 fde3 	bl	80048fc <HAL_RCC_OscConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000d3c:	f000 f826 	bl	8000d8c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000d40:	f003 fd8c 	bl	800485c <HAL_PWREx_EnableOverDrive>
 8000d44:	4603      	mov	r3, r0
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d001      	beq.n	8000d4e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000d4a:	f000 f81f 	bl	8000d8c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4e:	230f      	movs	r3, #15
 8000d50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d52:	2302      	movs	r3, #2
 8000d54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000d5a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000d5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d64:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	2105      	movs	r1, #5
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f004 f83d 	bl	8004dec <HAL_RCC_ClockConfig>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d78:	f000 f808 	bl	8000d8c <Error_Handler>
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3750      	adds	r7, #80	; 0x50
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40023800 	.word	0x40023800
 8000d88:	40007000 	.word	0x40007000

08000d8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d90:	b672      	cpsid	i
}
 8000d92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <Error_Handler+0x8>
	...

08000d98 <MX_SDIO_SD_Init>:
DMA_HandleTypeDef hdma_sdio_rx;

/* SDIO init function */

void MX_SDIO_SD_Init(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000d9c:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000d9e:	4a0d      	ldr	r2, [pc, #52]	; (8000dd4 <MX_SDIO_SD_Init+0x3c>)
 8000da0:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8000da2:	4b0b      	ldr	r3, [pc, #44]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000da8:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8000dae:	4b08      	ldr	r3, [pc, #32]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000db4:	4b06      	ldr	r3, [pc, #24]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000dba:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8000dc0:	4b03      	ldr	r3, [pc, #12]	; (8000dd0 <MX_SDIO_SD_Init+0x38>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	20000448 	.word	0x20000448
 8000dd4:	40012c00 	.word	0x40012c00

08000dd8 <HAL_SD_MspInit>:

void HAL_SD_MspInit(SD_HandleTypeDef* sdHandle)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(sdHandle->Instance==SDIO)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a68      	ldr	r2, [pc, #416]	; (8000f98 <HAL_SD_MspInit+0x1c0>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	f040 80c9 	bne.w	8000f8e <HAL_SD_MspInit+0x1b6>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* SDIO clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	4b66      	ldr	r3, [pc, #408]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e04:	4a65      	ldr	r2, [pc, #404]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0c:	4b63      	ldr	r3, [pc, #396]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	4b5f      	ldr	r3, [pc, #380]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e20:	4a5e      	ldr	r2, [pc, #376]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e22:	f043 0304 	orr.w	r3, r3, #4
 8000e26:	6313      	str	r3, [r2, #48]	; 0x30
 8000e28:	4b5c      	ldr	r3, [pc, #368]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2c:	f003 0304 	and.w	r3, r3, #4
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e34:	2300      	movs	r3, #0
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	4b58      	ldr	r3, [pc, #352]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3c:	4a57      	ldr	r2, [pc, #348]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e3e:	f043 0308 	orr.w	r3, r3, #8
 8000e42:	6313      	str	r3, [r2, #48]	; 0x30
 8000e44:	4b55      	ldr	r3, [pc, #340]	; (8000f9c <HAL_SD_MspInit+0x1c4>)
 8000e46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e48:	f003 0308 	and.w	r3, r3, #8
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000e50:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000e54:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e62:	230c      	movs	r3, #12
 8000e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e66:	f107 0314 	add.w	r3, r7, #20
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	484c      	ldr	r0, [pc, #304]	; (8000fa0 <HAL_SD_MspInit+0x1c8>)
 8000e6e:	f003 f933 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e72:	2304      	movs	r3, #4
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8000e82:	230c      	movs	r3, #12
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4845      	ldr	r0, [pc, #276]	; (8000fa4 <HAL_SD_MspInit+0x1cc>)
 8000e8e:	f003 f923 	bl	80040d8 <HAL_GPIO_Init>

    /* SDIO DMA Init */
    /* SDIO_TX Init */
    hdma_sdio_tx.Instance = DMA2_Stream3;
 8000e92:	4b45      	ldr	r3, [pc, #276]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000e94:	4a45      	ldr	r2, [pc, #276]	; (8000fac <HAL_SD_MspInit+0x1d4>)
 8000e96:	601a      	str	r2, [r3, #0]
    hdma_sdio_tx.Init.Channel = DMA_CHANNEL_4;
 8000e98:	4b43      	ldr	r3, [pc, #268]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000e9a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e9e:	605a      	str	r2, [r3, #4]
    hdma_sdio_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ea0:	4b41      	ldr	r3, [pc, #260]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ea2:	2240      	movs	r2, #64	; 0x40
 8000ea4:	609a      	str	r2, [r3, #8]
    hdma_sdio_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ea6:	4b40      	ldr	r3, [pc, #256]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	60da      	str	r2, [r3, #12]
    hdma_sdio_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eac:	4b3e      	ldr	r3, [pc, #248]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000eae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eb2:	611a      	str	r2, [r3, #16]
    hdma_sdio_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000eb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000eba:	615a      	str	r2, [r3, #20]
    hdma_sdio_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ebc:	4b3a      	ldr	r3, [pc, #232]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ebe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ec2:	619a      	str	r2, [r3, #24]
    hdma_sdio_tx.Init.Mode = DMA_PFCTRL;
 8000ec4:	4b38      	ldr	r3, [pc, #224]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ec6:	2220      	movs	r2, #32
 8000ec8:	61da      	str	r2, [r3, #28]
    hdma_sdio_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000eca:	4b37      	ldr	r3, [pc, #220]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	621a      	str	r2, [r3, #32]
    hdma_sdio_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000ed0:	4b35      	ldr	r3, [pc, #212]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000ed6:	4b34      	ldr	r3, [pc, #208]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ed8:	2203      	movs	r2, #3
 8000eda:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000edc:	4b32      	ldr	r3, [pc, #200]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ede:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000ee2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000ee4:	4b30      	ldr	r3, [pc, #192]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000ee6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000eea:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_tx) != HAL_OK)
 8000eec:	482e      	ldr	r0, [pc, #184]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000eee:	f001 fbbf 	bl	8002670 <HAL_DMA_Init>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <HAL_SD_MspInit+0x124>
    {
      Error_Handler();
 8000ef8:	f7ff ff48 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmatx,hdma_sdio_tx);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a2a      	ldr	r2, [pc, #168]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000f00:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f02:	4a29      	ldr	r2, [pc, #164]	; (8000fa8 <HAL_SD_MspInit+0x1d0>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO_RX Init */
    hdma_sdio_rx.Instance = DMA2_Stream6;
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f0a:	4a2a      	ldr	r2, [pc, #168]	; (8000fb4 <HAL_SD_MspInit+0x1dc>)
 8000f0c:	601a      	str	r2, [r3, #0]
    hdma_sdio_rx.Init.Channel = DMA_CHANNEL_4;
 8000f0e:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f10:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f14:	605a      	str	r2, [r3, #4]
    hdma_sdio_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
    hdma_sdio_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f1c:	4b24      	ldr	r3, [pc, #144]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	60da      	str	r2, [r3, #12]
    hdma_sdio_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f22:	4b23      	ldr	r3, [pc, #140]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f28:	611a      	str	r2, [r3, #16]
    hdma_sdio_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f2a:	4b21      	ldr	r3, [pc, #132]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f2c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f30:	615a      	str	r2, [r3, #20]
    hdma_sdio_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f38:	619a      	str	r2, [r3, #24]
    hdma_sdio_rx.Init.Mode = DMA_PFCTRL;
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f3c:	2220      	movs	r2, #32
 8000f3e:	61da      	str	r2, [r3, #28]
    hdma_sdio_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f42:	2200      	movs	r2, #0
 8000f44:	621a      	str	r2, [r3, #32]
    hdma_sdio_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f48:	2204      	movs	r2, #4
 8000f4a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdio_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f4e:	2203      	movs	r2, #3
 8000f50:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdio_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f54:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000f58:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdio_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000f5a:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f5c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdio_rx) != HAL_OK)
 8000f62:	4813      	ldr	r0, [pc, #76]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f64:	f001 fb84 	bl	8002670 <HAL_DMA_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <HAL_SD_MspInit+0x19a>
    {
      Error_Handler();
 8000f6e:	f7ff ff0d 	bl	8000d8c <Error_Handler>
    }

    __HAL_LINKDMA(sdHandle,hdmarx,hdma_sdio_rx);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a0e      	ldr	r2, [pc, #56]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f76:	641a      	str	r2, [r3, #64]	; 0x40
 8000f78:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <HAL_SD_MspInit+0x1d8>)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDIO interrupt Init */
    HAL_NVIC_SetPriority(SDIO_IRQn, 0, 0);
 8000f7e:	2200      	movs	r2, #0
 8000f80:	2100      	movs	r1, #0
 8000f82:	2031      	movs	r0, #49	; 0x31
 8000f84:	f001 facd 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDIO_IRQn);
 8000f88:	2031      	movs	r0, #49	; 0x31
 8000f8a:	f001 fae6 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }
}
 8000f8e:	bf00      	nop
 8000f90:	3728      	adds	r7, #40	; 0x28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	40012c00 	.word	0x40012c00
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020800 	.word	0x40020800
 8000fa4:	40020c00 	.word	0x40020c00
 8000fa8:	200003e8 	.word	0x200003e8
 8000fac:	40026458 	.word	0x40026458
 8000fb0:	20000388 	.word	0x20000388
 8000fb4:	400264a0 	.word	0x400264a0

08000fb8 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <MX_SPI2_Init+0x64>)
 8000fbe:	4a18      	ldr	r2, [pc, #96]	; (8001020 <MX_SPI2_Init+0x68>)
 8000fc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fc2:	4b16      	ldr	r3, [pc, #88]	; (800101c <MX_SPI2_Init+0x64>)
 8000fc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000fc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <MX_SPI2_Init+0x64>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fd0:	4b12      	ldr	r3, [pc, #72]	; (800101c <MX_SPI2_Init+0x64>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <MX_SPI2_Init+0x64>)
 8000fd8:	2202      	movs	r2, #2
 8000fda:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000fdc:	4b0f      	ldr	r3, [pc, #60]	; (800101c <MX_SPI2_Init+0x64>)
 8000fde:	2201      	movs	r2, #1
 8000fe0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <MX_SPI2_Init+0x64>)
 8000fe4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fe8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000fea:	4b0c      	ldr	r3, [pc, #48]	; (800101c <MX_SPI2_Init+0x64>)
 8000fec:	2210      	movs	r2, #16
 8000fee:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ff0:	4b0a      	ldr	r3, [pc, #40]	; (800101c <MX_SPI2_Init+0x64>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ff6:	4b09      	ldr	r3, [pc, #36]	; (800101c <MX_SPI2_Init+0x64>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <MX_SPI2_Init+0x64>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001002:	4b06      	ldr	r3, [pc, #24]	; (800101c <MX_SPI2_Init+0x64>)
 8001004:	220a      	movs	r2, #10
 8001006:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001008:	4804      	ldr	r0, [pc, #16]	; (800101c <MX_SPI2_Init+0x64>)
 800100a:	f005 fc1a 	bl	8006842 <HAL_SPI_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001014:	f7ff feba 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	200004cc 	.word	0x200004cc
 8001020:	40003800 	.word	0x40003800

08001024 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08a      	sub	sp, #40	; 0x28
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f107 0314 	add.w	r3, r7, #20
 8001030:	2200      	movs	r2, #0
 8001032:	601a      	str	r2, [r3, #0]
 8001034:	605a      	str	r2, [r3, #4]
 8001036:	609a      	str	r2, [r3, #8]
 8001038:	60da      	str	r2, [r3, #12]
 800103a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a19      	ldr	r2, [pc, #100]	; (80010a8 <HAL_SPI_MspInit+0x84>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d12c      	bne.n	80010a0 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <HAL_SPI_MspInit+0x88>)
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001050:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001054:	6413      	str	r3, [r2, #64]	; 0x40
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <HAL_SPI_MspInit+0x88>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <HAL_SPI_MspInit+0x88>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB10     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800107e:	f44f 4344 	mov.w	r3, #50176	; 0xc400
 8001082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001090:	2305      	movs	r3, #5
 8001092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001094:	f107 0314 	add.w	r3, r7, #20
 8001098:	4619      	mov	r1, r3
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <HAL_SPI_MspInit+0x8c>)
 800109c:	f003 f81c 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010a0:	bf00      	nop
 80010a2:	3728      	adds	r7, #40	; 0x28
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40003800 	.word	0x40003800
 80010ac:	40023800 	.word	0x40023800
 80010b0:	40020400 	.word	0x40020400

080010b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	607b      	str	r3, [r7, #4]
 80010be:	4b10      	ldr	r3, [pc, #64]	; (8001100 <HAL_MspInit+0x4c>)
 80010c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c2:	4a0f      	ldr	r2, [pc, #60]	; (8001100 <HAL_MspInit+0x4c>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010c8:	6453      	str	r3, [r2, #68]	; 0x44
 80010ca:	4b0d      	ldr	r3, [pc, #52]	; (8001100 <HAL_MspInit+0x4c>)
 80010cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	603b      	str	r3, [r7, #0]
 80010da:	4b09      	ldr	r3, [pc, #36]	; (8001100 <HAL_MspInit+0x4c>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	4a08      	ldr	r2, [pc, #32]	; (8001100 <HAL_MspInit+0x4c>)
 80010e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e4:	6413      	str	r3, [r2, #64]	; 0x40
 80010e6:	4b06      	ldr	r3, [pc, #24]	; (8001100 <HAL_MspInit+0x4c>)
 80010e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ee:	603b      	str	r3, [r7, #0]
 80010f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f2:	bf00      	nop
 80010f4:	370c      	adds	r7, #12
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr
 80010fe:	bf00      	nop
 8001100:	40023800 	.word	0x40023800

08001104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <NMI_Handler+0x4>

0800110a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <HardFault_Handler+0x4>

08001110 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <MemManage_Handler+0x4>

08001116 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800111a:	e7fe      	b.n	800111a <BusFault_Handler+0x4>

0800111c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001120:	e7fe      	b.n	8001120 <UsageFault_Handler+0x4>

08001122 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001122:	b480      	push	{r7}
 8001124:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001130:	b480      	push	{r7}
 8001132:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001134:	bf00      	nop
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr

0800113e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr

0800114c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001150:	f000 fe56 	bl	8001e00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001154:	bf00      	nop
 8001156:	bd80      	pop	{r7, pc}

08001158 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800115c:	4802      	ldr	r0, [pc, #8]	; (8001168 <TIM4_IRQHandler+0x10>)
 800115e:	f005 fca1 	bl	8006aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	20000524 	.word	0x20000524

0800116c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001170:	4802      	ldr	r0, [pc, #8]	; (800117c <USART3_IRQHandler+0x10>)
 8001172:	f006 fb23 	bl	80077bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	200006d4 	.word	0x200006d4

08001180 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 8001184:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001188:	f003 f984 	bl	8004494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800118c:	bf00      	nop
 800118e:	bd80      	pop	{r7, pc}

08001190 <SDIO_IRQHandler>:

/**
  * @brief This function handles SDIO global interrupt.
  */
void SDIO_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDIO_IRQn 0 */

  /* USER CODE END SDIO_IRQn 0 */
  HAL_SD_IRQHandler(&hsd);
 8001194:	4802      	ldr	r0, [pc, #8]	; (80011a0 <SDIO_IRQHandler+0x10>)
 8001196:	f004 fa9b 	bl	80056d0 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDIO_IRQn 1 */

  /* USER CODE END SDIO_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000448 	.word	0x20000448

080011a4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80011a8:	4802      	ldr	r0, [pc, #8]	; (80011b4 <TIM7_IRQHandler+0x10>)
 80011aa:	f005 fc7b 	bl	8006aa4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	2000068c 	.word	0x2000068c

080011b8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80011bc:	4802      	ldr	r0, [pc, #8]	; (80011c8 <DMA2_Stream0_IRQHandler+0x10>)
 80011be:	f001 fbef 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	2000026c 	.word	0x2000026c

080011cc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_tx);
 80011d0:	4802      	ldr	r0, [pc, #8]	; (80011dc <DMA2_Stream3_IRQHandler+0x10>)
 80011d2:	f001 fbe5 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	200003e8 	.word	0x200003e8

080011e0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdio_rx);
 80011e4:	4802      	ldr	r0, [pc, #8]	; (80011f0 <DMA2_Stream6_IRQHandler+0x10>)
 80011e6:	f001 fbdb 	bl	80029a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000388 	.word	0x20000388

080011f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <_kill>:

int _kill(int pid, int sig)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800120e:	4b05      	ldr	r3, [pc, #20]	; (8001224 <_kill+0x20>)
 8001210:	2216      	movs	r2, #22
 8001212:	601a      	str	r2, [r3, #0]
	return -1;
 8001214:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001218:	4618      	mov	r0, r3
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	2000721c 	.word	0x2000721c

08001228 <_exit>:

void _exit (int status)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001230:	f04f 31ff 	mov.w	r1, #4294967295
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ffe5 	bl	8001204 <_kill>
	while (1) {}		/* Make sure we hang here */
 800123a:	e7fe      	b.n	800123a <_exit+0x12>

0800123c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
 800124c:	e00a      	b.n	8001264 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800124e:	f3af 8000 	nop.w
 8001252:	4601      	mov	r1, r0
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	1c5a      	adds	r2, r3, #1
 8001258:	60ba      	str	r2, [r7, #8]
 800125a:	b2ca      	uxtb	r2, r1
 800125c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	3301      	adds	r3, #1
 8001262:	617b      	str	r3, [r7, #20]
 8001264:	697a      	ldr	r2, [r7, #20]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	429a      	cmp	r2, r3
 800126a:	dbf0      	blt.n	800124e <_read+0x12>
	}

return len;
 800126c:	687b      	ldr	r3, [r7, #4]
}
 800126e:	4618      	mov	r0, r3
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	60f8      	str	r0, [r7, #12]
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001282:	2300      	movs	r3, #0
 8001284:	617b      	str	r3, [r7, #20]
 8001286:	e009      	b.n	800129c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	1c5a      	adds	r2, r3, #1
 800128c:	60ba      	str	r2, [r7, #8]
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf1      	blt.n	8001288 <_write+0x12>
	}
	return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_close>:

int _close(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
	return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
 80012ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012d6:	605a      	str	r2, [r3, #4]
	return 0;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr

080012e6 <_isatty>:

int _isatty(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	return 1;
 80012ee:	2301      	movs	r3, #1
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	60f8      	str	r0, [r7, #12]
 8001304:	60b9      	str	r1, [r7, #8]
 8001306:	607a      	str	r2, [r7, #4]
	return 0;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3714      	adds	r7, #20
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr
	...

08001318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001318:	b480      	push	{r7}
 800131a:	b087      	sub	sp, #28
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <_sbrk+0x5c>)
 8001322:	4b15      	ldr	r3, [pc, #84]	; (8001378 <_sbrk+0x60>)
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800132c:	4b13      	ldr	r3, [pc, #76]	; (800137c <_sbrk+0x64>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001334:	4b11      	ldr	r3, [pc, #68]	; (800137c <_sbrk+0x64>)
 8001336:	4a12      	ldr	r2, [pc, #72]	; (8001380 <_sbrk+0x68>)
 8001338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800133a:	4b10      	ldr	r3, [pc, #64]	; (800137c <_sbrk+0x64>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4413      	add	r3, r2
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	429a      	cmp	r2, r3
 8001346:	d205      	bcs.n	8001354 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8001348:	4b0e      	ldr	r3, [pc, #56]	; (8001384 <_sbrk+0x6c>)
 800134a:	220c      	movs	r2, #12
 800134c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800134e:	f04f 33ff 	mov.w	r3, #4294967295
 8001352:	e009      	b.n	8001368 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8001354:	4b09      	ldr	r3, [pc, #36]	; (800137c <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800135a:	4b08      	ldr	r3, [pc, #32]	; (800137c <_sbrk+0x64>)
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4413      	add	r3, r2
 8001362:	4a06      	ldr	r2, [pc, #24]	; (800137c <_sbrk+0x64>)
 8001364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001366:	68fb      	ldr	r3, [r7, #12]
}
 8001368:	4618      	mov	r0, r3
 800136a:	371c      	adds	r7, #28
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	20030000 	.word	0x20030000
 8001378:	00000400 	.word	0x00000400
 800137c:	20000094 	.word	0x20000094
 8001380:	20007230 	.word	0x20007230
 8001384:	2000721c 	.word	0x2000721c

08001388 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <SystemInit+0x20>)
 800138e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001392:	4a05      	ldr	r2, [pc, #20]	; (80013a8 <SystemInit+0x20>)
 8001394:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001398:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800139c:	bf00      	nop
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000ed00 	.word	0xe000ed00

080013ac <MX_TIM2_Init>:
TIM_HandleTypeDef htim7;
TIM_HandleTypeDef htim10;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b08e      	sub	sp, #56	; 0x38
 80013b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013b6:	2200      	movs	r2, #0
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	605a      	str	r2, [r3, #4]
 80013bc:	609a      	str	r2, [r3, #8]
 80013be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c0:	f107 0320 	add.w	r3, r7, #32
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]
 80013c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	615a      	str	r2, [r3, #20]
 80013da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013dc:	4b2d      	ldr	r3, [pc, #180]	; (8001494 <MX_TIM2_Init+0xe8>)
 80013de:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013e2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 180-1;
 80013e4:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <MX_TIM2_Init+0xe8>)
 80013e6:	22b3      	movs	r2, #179	; 0xb3
 80013e8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ea:	4b2a      	ldr	r3, [pc, #168]	; (8001494 <MX_TIM2_Init+0xe8>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 80013f0:	4b28      	ldr	r3, [pc, #160]	; (8001494 <MX_TIM2_Init+0xe8>)
 80013f2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80013f6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f8:	4b26      	ldr	r3, [pc, #152]	; (8001494 <MX_TIM2_Init+0xe8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fe:	4b25      	ldr	r3, [pc, #148]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001400:	2200      	movs	r2, #0
 8001402:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001404:	4823      	ldr	r0, [pc, #140]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001406:	f005 faa5 	bl	8006954 <HAL_TIM_Base_Init>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001410:	f7ff fcbc 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001414:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800141a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800141e:	4619      	mov	r1, r3
 8001420:	481c      	ldr	r0, [pc, #112]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001422:	f005 fd09 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800142c:	f7ff fcae 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001430:	4818      	ldr	r0, [pc, #96]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001432:	f005 fade 	bl	80069f2 <HAL_TIM_PWM_Init>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800143c:	f7ff fca6 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001440:	2300      	movs	r3, #0
 8001442:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	4619      	mov	r1, r3
 800144e:	4811      	ldr	r0, [pc, #68]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001450:	f006 f8d6 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800145a:	f7ff fc97 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800145e:	2360      	movs	r3, #96	; 0x60
 8001460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001462:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001466:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001468:	2300      	movs	r3, #0
 800146a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001470:	1d3b      	adds	r3, r7, #4
 8001472:	2200      	movs	r2, #0
 8001474:	4619      	mov	r1, r3
 8001476:	4807      	ldr	r0, [pc, #28]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001478:	f005 fc1c 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8001482:	f7ff fc83 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001486:	4803      	ldr	r0, [pc, #12]	; (8001494 <MX_TIM2_Init+0xe8>)
 8001488:	f000 fab2 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800148c:	bf00      	nop
 800148e:	3738      	adds	r7, #56	; 0x38
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	20000644 	.word	0x20000644

08001498 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b08e      	sub	sp, #56	; 0x38
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800149e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014a2:	2200      	movs	r2, #0
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	605a      	str	r2, [r3, #4]
 80014a8:	609a      	str	r2, [r3, #8]
 80014aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ac:	f107 0320 	add.w	r3, r7, #32
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014b6:	1d3b      	adds	r3, r7, #4
 80014b8:	2200      	movs	r2, #0
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	605a      	str	r2, [r3, #4]
 80014be:	609a      	str	r2, [r3, #8]
 80014c0:	60da      	str	r2, [r3, #12]
 80014c2:	611a      	str	r2, [r3, #16]
 80014c4:	615a      	str	r2, [r3, #20]
 80014c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <MX_TIM3_Init+0xe4>)
 80014ca:	4a2d      	ldr	r2, [pc, #180]	; (8001580 <MX_TIM3_Init+0xe8>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 9-1;
 80014ce:	4b2b      	ldr	r3, [pc, #172]	; (800157c <MX_TIM3_Init+0xe4>)
 80014d0:	2208      	movs	r2, #8
 80014d2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <MX_TIM3_Init+0xe4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000-1;
 80014da:	4b28      	ldr	r3, [pc, #160]	; (800157c <MX_TIM3_Init+0xe4>)
 80014dc:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80014e0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b26      	ldr	r3, [pc, #152]	; (800157c <MX_TIM3_Init+0xe4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e8:	4b24      	ldr	r3, [pc, #144]	; (800157c <MX_TIM3_Init+0xe4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014ee:	4823      	ldr	r0, [pc, #140]	; (800157c <MX_TIM3_Init+0xe4>)
 80014f0:	f005 fa30 	bl	8006954 <HAL_TIM_Base_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80014fa:	f7ff fc47 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014fe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001502:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001504:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001508:	4619      	mov	r1, r3
 800150a:	481c      	ldr	r0, [pc, #112]	; (800157c <MX_TIM3_Init+0xe4>)
 800150c:	f005 fc94 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001516:	f7ff fc39 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800151a:	4818      	ldr	r0, [pc, #96]	; (800157c <MX_TIM3_Init+0xe4>)
 800151c:	f005 fa69 	bl	80069f2 <HAL_TIM_PWM_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001526:	f7ff fc31 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001532:	f107 0320 	add.w	r3, r7, #32
 8001536:	4619      	mov	r1, r3
 8001538:	4810      	ldr	r0, [pc, #64]	; (800157c <MX_TIM3_Init+0xe4>)
 800153a:	f006 f861 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001544:	f7ff fc22 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001548:	2360      	movs	r3, #96	; 0x60
 800154a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800154c:	2300      	movs	r3, #0
 800154e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	4619      	mov	r1, r3
 800155e:	4807      	ldr	r0, [pc, #28]	; (800157c <MX_TIM3_Init+0xe4>)
 8001560:	f005 fba8 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 8001564:	4603      	mov	r3, r0
 8001566:	2b00      	cmp	r3, #0
 8001568:	d001      	beq.n	800156e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800156a:	f7ff fc0f 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800156e:	4803      	ldr	r0, [pc, #12]	; (800157c <MX_TIM3_Init+0xe4>)
 8001570:	f000 fa3e 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 8001574:	bf00      	nop
 8001576:	3738      	adds	r7, #56	; 0x38
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200005fc 	.word	0x200005fc
 8001580:	40000400 	.word	0x40000400

08001584 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08e      	sub	sp, #56	; 0x38
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800158a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
 8001596:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001598:	f107 0320 	add.w	r3, r7, #32
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015a2:	1d3b      	adds	r3, r7, #4
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
 80015b0:	615a      	str	r2, [r3, #20]
 80015b2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015b4:	4b3b      	ldr	r3, [pc, #236]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015b6:	4a3c      	ldr	r2, [pc, #240]	; (80016a8 <MX_TIM4_Init+0x124>)
 80015b8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 18-1;
 80015ba:	4b3a      	ldr	r3, [pc, #232]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015bc:	2211      	movs	r2, #17
 80015be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c0:	4b38      	ldr	r3, [pc, #224]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000-1;
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015c8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80015cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ce:	4b35      	ldr	r3, [pc, #212]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015d4:	4b33      	ldr	r3, [pc, #204]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80015da:	4832      	ldr	r0, [pc, #200]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015dc:	f005 f9ba 	bl	8006954 <HAL_TIM_Base_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80015e6:	f7ff fbd1 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80015f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015f4:	4619      	mov	r1, r3
 80015f6:	482b      	ldr	r0, [pc, #172]	; (80016a4 <MX_TIM4_Init+0x120>)
 80015f8:	f005 fc1e 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001602:	f7ff fbc3 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001606:	4827      	ldr	r0, [pc, #156]	; (80016a4 <MX_TIM4_Init+0x120>)
 8001608:	f005 f9f3 	bl	80069f2 <HAL_TIM_PWM_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001612:	f7ff fbbb 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001616:	2300      	movs	r3, #0
 8001618:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800161a:	2300      	movs	r3, #0
 800161c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800161e:	f107 0320 	add.w	r3, r7, #32
 8001622:	4619      	mov	r1, r3
 8001624:	481f      	ldr	r0, [pc, #124]	; (80016a4 <MX_TIM4_Init+0x120>)
 8001626:	f005 ffeb 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001630:	f7ff fbac 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001634:	2360      	movs	r3, #96	; 0x60
 8001636:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 25000-1;
 8001638:	f246 13a7 	movw	r3, #24999	; 0x61a7
 800163c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	4619      	mov	r1, r3
 800164c:	4815      	ldr	r0, [pc, #84]	; (80016a4 <MX_TIM4_Init+0x120>)
 800164e:	f005 fb31 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8001658:	f7ff fb98 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.Pulse = 12500-1;
 800165c:	f243 03d3 	movw	r3, #12499	; 0x30d3
 8001660:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	2204      	movs	r2, #4
 8001666:	4619      	mov	r1, r3
 8001668:	480e      	ldr	r0, [pc, #56]	; (80016a4 <MX_TIM4_Init+0x120>)
 800166a:	f005 fb23 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 8001674:	f7ff fb8a 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.Pulse = 7250-1;
 8001678:	f641 4351 	movw	r3, #7249	; 0x1c51
 800167c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2208      	movs	r2, #8
 8001682:	4619      	mov	r1, r3
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <MX_TIM4_Init+0x120>)
 8001686:	f005 fb15 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_TIM4_Init+0x110>
  {
    Error_Handler();
 8001690:	f7ff fb7c 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001694:	4803      	ldr	r0, [pc, #12]	; (80016a4 <MX_TIM4_Init+0x120>)
 8001696:	f000 f9ab 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	; 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000524 	.word	0x20000524
 80016a8:	40000800 	.word	0x40000800

080016ac <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08e      	sub	sp, #56	; 0x38
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016b2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016b6:	2200      	movs	r2, #0
 80016b8:	601a      	str	r2, [r3, #0]
 80016ba:	605a      	str	r2, [r3, #4]
 80016bc:	609a      	str	r2, [r3, #8]
 80016be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016c0:	f107 0320 	add.w	r3, r7, #32
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016ca:	1d3b      	adds	r3, r7, #4
 80016cc:	2200      	movs	r2, #0
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	605a      	str	r2, [r3, #4]
 80016d2:	609a      	str	r2, [r3, #8]
 80016d4:	60da      	str	r2, [r3, #12]
 80016d6:	611a      	str	r2, [r3, #16]
 80016d8:	615a      	str	r2, [r3, #20]
 80016da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80016dc:	4b31      	ldr	r3, [pc, #196]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016de:	4a32      	ldr	r2, [pc, #200]	; (80017a8 <MX_TIM5_Init+0xfc>)
 80016e0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 9;
 80016e2:	4b30      	ldr	r3, [pc, #192]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016e4:	2209      	movs	r2, #9
 80016e6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e8:	4b2e      	ldr	r3, [pc, #184]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 100000-1;
 80016ee:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016f0:	4a2e      	ldr	r2, [pc, #184]	; (80017ac <MX_TIM5_Init+0x100>)
 80016f2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f4:	4b2b      	ldr	r3, [pc, #172]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <MX_TIM5_Init+0xf8>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001700:	4828      	ldr	r0, [pc, #160]	; (80017a4 <MX_TIM5_Init+0xf8>)
 8001702:	f005 f927 	bl	8006954 <HAL_TIM_Base_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <MX_TIM5_Init+0x64>
  {
    Error_Handler();
 800170c:	f7ff fb3e 	bl	8000d8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001710:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001714:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001716:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800171a:	4619      	mov	r1, r3
 800171c:	4821      	ldr	r0, [pc, #132]	; (80017a4 <MX_TIM5_Init+0xf8>)
 800171e:	f005 fb8b 	bl	8006e38 <HAL_TIM_ConfigClockSource>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM5_Init+0x80>
  {
    Error_Handler();
 8001728:	f7ff fb30 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 800172c:	481d      	ldr	r0, [pc, #116]	; (80017a4 <MX_TIM5_Init+0xf8>)
 800172e:	f005 f960 	bl	80069f2 <HAL_TIM_PWM_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8001738:	f7ff fb28 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800173c:	2300      	movs	r3, #0
 800173e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001740:	2300      	movs	r3, #0
 8001742:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001744:	f107 0320 	add.w	r3, r7, #32
 8001748:	4619      	mov	r1, r3
 800174a:	4816      	ldr	r0, [pc, #88]	; (80017a4 <MX_TIM5_Init+0xf8>)
 800174c:	f005 ff58 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_TIM5_Init+0xae>
  {
    Error_Handler();
 8001756:	f7ff fb19 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800175a:	2360      	movs	r3, #96	; 0x60
 800175c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800175e:	2300      	movs	r3, #0
 8001760:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	480c      	ldr	r0, [pc, #48]	; (80017a4 <MX_TIM5_Init+0xf8>)
 8001772:	f005 fa9f 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM5_Init+0xd4>
  {
    Error_Handler();
 800177c:	f7ff fb06 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001780:	1d3b      	adds	r3, r7, #4
 8001782:	220c      	movs	r2, #12
 8001784:	4619      	mov	r1, r3
 8001786:	4807      	ldr	r0, [pc, #28]	; (80017a4 <MX_TIM5_Init+0xf8>)
 8001788:	f005 fa94 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <MX_TIM5_Init+0xea>
  {
    Error_Handler();
 8001792:	f7ff fafb 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001796:	4803      	ldr	r0, [pc, #12]	; (80017a4 <MX_TIM5_Init+0xf8>)
 8001798:	f000 f92a 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 800179c:	bf00      	nop
 800179e:	3738      	adds	r7, #56	; 0x38
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	200005b4 	.word	0x200005b4
 80017a8:	40000c00 	.word	0x40000c00
 80017ac:	0001869f 	.word	0x0001869f

080017b0 <MX_TIM7_Init>:
/* TIM7 init function */
void MX_TIM7_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017b6:	463b      	mov	r3, r7
 80017b8:	2200      	movs	r2, #0
 80017ba:	601a      	str	r2, [r3, #0]
 80017bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80017be:	4b15      	ldr	r3, [pc, #84]	; (8001814 <MX_TIM7_Init+0x64>)
 80017c0:	4a15      	ldr	r2, [pc, #84]	; (8001818 <MX_TIM7_Init+0x68>)
 80017c2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 8;
 80017c4:	4b13      	ldr	r3, [pc, #76]	; (8001814 <MX_TIM7_Init+0x64>)
 80017c6:	2208      	movs	r2, #8
 80017c8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b12      	ldr	r3, [pc, #72]	; (8001814 <MX_TIM7_Init+0x64>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 9999;
 80017d0:	4b10      	ldr	r3, [pc, #64]	; (8001814 <MX_TIM7_Init+0x64>)
 80017d2:	f242 720f 	movw	r2, #9999	; 0x270f
 80017d6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80017d8:	4b0e      	ldr	r3, [pc, #56]	; (8001814 <MX_TIM7_Init+0x64>)
 80017da:	2280      	movs	r2, #128	; 0x80
 80017dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80017de:	480d      	ldr	r0, [pc, #52]	; (8001814 <MX_TIM7_Init+0x64>)
 80017e0:	f005 f8b8 	bl	8006954 <HAL_TIM_Base_Init>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80017ea:	f7ff facf 	bl	8000d8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f2:	2300      	movs	r3, #0
 80017f4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80017f6:	463b      	mov	r3, r7
 80017f8:	4619      	mov	r1, r3
 80017fa:	4806      	ldr	r0, [pc, #24]	; (8001814 <MX_TIM7_Init+0x64>)
 80017fc:	f005 ff00 	bl	8007600 <HAL_TIMEx_MasterConfigSynchronization>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d001      	beq.n	800180a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001806:	f7ff fac1 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800180a:	bf00      	nop
 800180c:	3708      	adds	r7, #8
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	2000068c 	.word	0x2000068c
 8001818:	40001400 	.word	0x40001400

0800181c <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b088      	sub	sp, #32
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001822:	1d3b      	adds	r3, r7, #4
 8001824:	2200      	movs	r2, #0
 8001826:	601a      	str	r2, [r3, #0]
 8001828:	605a      	str	r2, [r3, #4]
 800182a:	609a      	str	r2, [r3, #8]
 800182c:	60da      	str	r2, [r3, #12]
 800182e:	611a      	str	r2, [r3, #16]
 8001830:	615a      	str	r2, [r3, #20]
 8001832:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001834:	4b1e      	ldr	r3, [pc, #120]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001836:	4a1f      	ldr	r2, [pc, #124]	; (80018b4 <MX_TIM10_Init+0x98>)
 8001838:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 72-1;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <MX_TIM10_Init+0x94>)
 800183c:	2247      	movs	r2, #71	; 0x47
 800183e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001842:	2200      	movs	r2, #0
 8001844:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 50000-1;
 8001846:	4b1a      	ldr	r3, [pc, #104]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001848:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800184c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800184e:	4b18      	ldr	r3, [pc, #96]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001854:	4b16      	ldr	r3, [pc, #88]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001856:	2200      	movs	r2, #0
 8001858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800185a:	4815      	ldr	r0, [pc, #84]	; (80018b0 <MX_TIM10_Init+0x94>)
 800185c:	f005 f87a 	bl	8006954 <HAL_TIM_Base_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001866:	f7ff fa91 	bl	8000d8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800186a:	4811      	ldr	r0, [pc, #68]	; (80018b0 <MX_TIM10_Init+0x94>)
 800186c:	f005 f8c1 	bl	80069f2 <HAL_TIM_PWM_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8001876:	f7ff fa89 	bl	8000d8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800187a:	2360      	movs	r3, #96	; 0x60
 800187c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 800187e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001882:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800188c:	1d3b      	adds	r3, r7, #4
 800188e:	2200      	movs	r2, #0
 8001890:	4619      	mov	r1, r3
 8001892:	4807      	ldr	r0, [pc, #28]	; (80018b0 <MX_TIM10_Init+0x94>)
 8001894:	f005 fa0e 	bl	8006cb4 <HAL_TIM_PWM_ConfigChannel>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 800189e:	f7ff fa75 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80018a2:	4803      	ldr	r0, [pc, #12]	; (80018b0 <MX_TIM10_Init+0x94>)
 80018a4:	f000 f8a4 	bl	80019f0 <HAL_TIM_MspPostInit>

}
 80018a8:	bf00      	nop
 80018aa:	3720      	adds	r7, #32
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	2000056c 	.word	0x2000056c
 80018b4:	40014400 	.word	0x40014400

080018b8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018c8:	d10e      	bne.n	80018e8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	61fb      	str	r3, [r7, #28]
 80018ce:	4b42      	ldr	r3, [pc, #264]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	4a41      	ldr	r2, [pc, #260]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80018d4:	f043 0301 	orr.w	r3, r3, #1
 80018d8:	6413      	str	r3, [r2, #64]	; 0x40
 80018da:	4b3f      	ldr	r3, [pc, #252]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	f003 0301 	and.w	r3, r3, #1
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_TIM10_CLK_ENABLE();
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }
}
 80018e6:	e072      	b.n	80019ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM3)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a3b      	ldr	r2, [pc, #236]	; (80019dc <HAL_TIM_Base_MspInit+0x124>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d10e      	bne.n	8001910 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018f2:	2300      	movs	r3, #0
 80018f4:	61bb      	str	r3, [r7, #24]
 80018f6:	4b38      	ldr	r3, [pc, #224]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80018f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fa:	4a37      	ldr	r2, [pc, #220]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	6413      	str	r3, [r2, #64]	; 0x40
 8001902:	4b35      	ldr	r3, [pc, #212]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	61bb      	str	r3, [r7, #24]
 800190c:	69bb      	ldr	r3, [r7, #24]
}
 800190e:	e05e      	b.n	80019ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM4)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a32      	ldr	r2, [pc, #200]	; (80019e0 <HAL_TIM_Base_MspInit+0x128>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d116      	bne.n	8001948 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
 800191e:	4b2e      	ldr	r3, [pc, #184]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001922:	4a2d      	ldr	r2, [pc, #180]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001924:	f043 0304 	orr.w	r3, r3, #4
 8001928:	6413      	str	r3, [r2, #64]	; 0x40
 800192a:	4b2b      	ldr	r3, [pc, #172]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 800192c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192e:	f003 0304 	and.w	r3, r3, #4
 8001932:	617b      	str	r3, [r7, #20]
 8001934:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001936:	2200      	movs	r2, #0
 8001938:	2100      	movs	r1, #0
 800193a:	201e      	movs	r0, #30
 800193c:	f000 fdf1 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001940:	201e      	movs	r0, #30
 8001942:	f000 fe0a 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 8001946:	e042      	b.n	80019ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM5)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a25      	ldr	r2, [pc, #148]	; (80019e4 <HAL_TIM_Base_MspInit+0x12c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d10e      	bne.n	8001970 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	4b20      	ldr	r3, [pc, #128]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 800195c:	f043 0308 	orr.w	r3, r3, #8
 8001960:	6413      	str	r3, [r2, #64]	; 0x40
 8001962:	4b1d      	ldr	r3, [pc, #116]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001966:	f003 0308 	and.w	r3, r3, #8
 800196a:	613b      	str	r3, [r7, #16]
 800196c:	693b      	ldr	r3, [r7, #16]
}
 800196e:	e02e      	b.n	80019ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM7)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a1c      	ldr	r2, [pc, #112]	; (80019e8 <HAL_TIM_Base_MspInit+0x130>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d116      	bne.n	80019a8 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800197a:	2300      	movs	r3, #0
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a15      	ldr	r2, [pc, #84]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 8001984:	f043 0320 	orr.w	r3, r3, #32
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
 800198a:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f003 0320 	and.w	r3, r3, #32
 8001992:	60fb      	str	r3, [r7, #12]
 8001994:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001996:	2200      	movs	r2, #0
 8001998:	2100      	movs	r1, #0
 800199a:	2037      	movs	r0, #55	; 0x37
 800199c:	f000 fdc1 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019a0:	2037      	movs	r0, #55	; 0x37
 80019a2:	f000 fdda 	bl	800255a <HAL_NVIC_EnableIRQ>
}
 80019a6:	e012      	b.n	80019ce <HAL_TIM_Base_MspInit+0x116>
  else if(tim_baseHandle->Instance==TIM10)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0f      	ldr	r2, [pc, #60]	; (80019ec <HAL_TIM_Base_MspInit+0x134>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d10d      	bne.n	80019ce <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	60bb      	str	r3, [r7, #8]
 80019b6:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a07      	ldr	r2, [pc, #28]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80019bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_TIM_Base_MspInit+0x120>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ca:	60bb      	str	r3, [r7, #8]
 80019cc:	68bb      	ldr	r3, [r7, #8]
}
 80019ce:	bf00      	nop
 80019d0:	3720      	adds	r7, #32
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40000400 	.word	0x40000400
 80019e0:	40000800 	.word	0x40000800
 80019e4:	40000c00 	.word	0x40000c00
 80019e8:	40001400 	.word	0x40001400
 80019ec:	40014400 	.word	0x40014400

080019f0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 031c 	add.w	r3, r7, #28
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a10:	d11e      	bne.n	8001a50 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	4b58      	ldr	r3, [pc, #352]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	4a57      	ldr	r2, [pc, #348]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a1c:	f043 0301 	orr.w	r3, r3, #1
 8001a20:	6313      	str	r3, [r2, #48]	; 0x30
 8001a22:	4b55      	ldr	r3, [pc, #340]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	61bb      	str	r3, [r7, #24]
 8001a2c:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a2e:	2320      	movs	r3, #32
 8001a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a32:	2302      	movs	r3, #2
 8001a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a42:	f107 031c 	add.w	r3, r7, #28
 8001a46:	4619      	mov	r1, r3
 8001a48:	484c      	ldr	r0, [pc, #304]	; (8001b7c <HAL_TIM_MspPostInit+0x18c>)
 8001a4a:	f002 fb45 	bl	80040d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001a4e:	e08f      	b.n	8001b70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM3)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a4a      	ldr	r2, [pc, #296]	; (8001b80 <HAL_TIM_MspPostInit+0x190>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d11e      	bne.n	8001a98 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
 8001a5e:	4b46      	ldr	r3, [pc, #280]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a62:	4a45      	ldr	r2, [pc, #276]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a64:	f043 0304 	orr.w	r3, r3, #4
 8001a68:	6313      	str	r3, [r2, #48]	; 0x30
 8001a6a:	4b43      	ldr	r3, [pc, #268]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6e:	f003 0304 	and.w	r3, r3, #4
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a76:	2340      	movs	r3, #64	; 0x40
 8001a78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a86:	2302      	movs	r3, #2
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 031c 	add.w	r3, r7, #28
 8001a8e:	4619      	mov	r1, r3
 8001a90:	483c      	ldr	r0, [pc, #240]	; (8001b84 <HAL_TIM_MspPostInit+0x194>)
 8001a92:	f002 fb21 	bl	80040d8 <HAL_GPIO_Init>
}
 8001a96:	e06b      	b.n	8001b70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM4)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a3a      	ldr	r2, [pc, #232]	; (8001b88 <HAL_TIM_MspPostInit+0x198>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d11f      	bne.n	8001ae2 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	613b      	str	r3, [r7, #16]
 8001aa6:	4b34      	ldr	r3, [pc, #208]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a33      	ldr	r2, [pc, #204]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001aac:	f043 0308 	orr.w	r3, r3, #8
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b31      	ldr	r3, [pc, #196]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0308 	and.w	r3, r3, #8
 8001aba:	613b      	str	r3, [r7, #16]
 8001abc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8001abe:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001ac2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad4:	f107 031c 	add.w	r3, r7, #28
 8001ad8:	4619      	mov	r1, r3
 8001ada:	482c      	ldr	r0, [pc, #176]	; (8001b8c <HAL_TIM_MspPostInit+0x19c>)
 8001adc:	f002 fafc 	bl	80040d8 <HAL_GPIO_Init>
}
 8001ae0:	e046      	b.n	8001b70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM5)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2a      	ldr	r2, [pc, #168]	; (8001b90 <HAL_TIM_MspPostInit+0x1a0>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d11e      	bne.n	8001b2a <HAL_TIM_MspPostInit+0x13a>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	4b21      	ldr	r3, [pc, #132]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af4:	4a20      	ldr	r2, [pc, #128]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001af6:	f043 0301 	orr.w	r3, r3, #1
 8001afa:	6313      	str	r3, [r2, #48]	; 0x30
 8001afc:	4b1e      	ldr	r3, [pc, #120]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b00:	f003 0301 	and.w	r3, r3, #1
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b14:	2300      	movs	r3, #0
 8001b16:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b1c:	f107 031c 	add.w	r3, r7, #28
 8001b20:	4619      	mov	r1, r3
 8001b22:	4816      	ldr	r0, [pc, #88]	; (8001b7c <HAL_TIM_MspPostInit+0x18c>)
 8001b24:	f002 fad8 	bl	80040d8 <HAL_GPIO_Init>
}
 8001b28:	e022      	b.n	8001b70 <HAL_TIM_MspPostInit+0x180>
  else if(timHandle->Instance==TIM10)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a19      	ldr	r2, [pc, #100]	; (8001b94 <HAL_TIM_MspPostInit+0x1a4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d11d      	bne.n	8001b70 <HAL_TIM_MspPostInit+0x180>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b34:	2300      	movs	r3, #0
 8001b36:	60bb      	str	r3, [r7, #8]
 8001b38:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001b3e:	f043 0320 	orr.w	r3, r3, #32
 8001b42:	6313      	str	r3, [r2, #48]	; 0x30
 8001b44:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_TIM_MspPostInit+0x188>)
 8001b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	60bb      	str	r3, [r7, #8]
 8001b4e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001b50:	2340      	movs	r3, #64	; 0x40
 8001b52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b54:	2302      	movs	r3, #2
 8001b56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001b60:	2303      	movs	r3, #3
 8001b62:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b64:	f107 031c 	add.w	r3, r7, #28
 8001b68:	4619      	mov	r1, r3
 8001b6a:	480b      	ldr	r0, [pc, #44]	; (8001b98 <HAL_TIM_MspPostInit+0x1a8>)
 8001b6c:	f002 fab4 	bl	80040d8 <HAL_GPIO_Init>
}
 8001b70:	bf00      	nop
 8001b72:	3730      	adds	r7, #48	; 0x30
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40023800 	.word	0x40023800
 8001b7c:	40020000 	.word	0x40020000
 8001b80:	40000400 	.word	0x40000400
 8001b84:	40020800 	.word	0x40020800
 8001b88:	40000800 	.word	0x40000800
 8001b8c:	40020c00 	.word	0x40020c00
 8001b90:	40000c00 	.word	0x40000c00
 8001b94:	40014400 	.word	0x40014400
 8001b98:	40021400 	.word	0x40021400

08001b9c <udp_echoserver_init>:
  * @brief  Initialize the server application.
  * @param  None
  * @retval None
  */
void udp_echoserver_init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b082      	sub	sp, #8
 8001ba0:	af00      	add	r7, sp, #0
   struct udp_pcb *upcb;
   err_t err;
   
   /* Create a new UDP control block  */
   upcb = udp_new();
 8001ba2:	f00f fddf 	bl	8011764 <udp_new>
 8001ba6:	6078      	str	r0, [r7, #4]
   
   if (upcb)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00f      	beq.n	8001bce <udp_echoserver_init+0x32>
   {
     /* Bind the upcb to the UDP_PORT port */
     /* Using IP_ADDR_ANY allow the upcb to be used by any local interface */
      err = udp_bind(upcb, IP_ADDR_ANY, UDP_SERVER_PORT);
 8001bae:	2207      	movs	r2, #7
 8001bb0:	4909      	ldr	r1, [pc, #36]	; (8001bd8 <udp_echoserver_init+0x3c>)
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f00f fc98 	bl	80114e8 <udp_bind>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	70fb      	strb	r3, [r7, #3]
      
      if(err == ERR_OK)
 8001bbc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d104      	bne.n	8001bce <udp_echoserver_init+0x32>
      {
        /* Set a receive callback for the upcb */
        udp_recv(upcb, udp_echoserver_receive_callback, NULL);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	4905      	ldr	r1, [pc, #20]	; (8001bdc <udp_echoserver_init+0x40>)
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f00f fdab 	bl	8011724 <udp_recv>
      }
   }
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	08017934 	.word	0x08017934
 8001bdc:	08001be1 	.word	0x08001be1

08001be0 <udp_echoserver_receive_callback>:
  * @param addr the remote IP address from which the packet was received
  * @param port the remote port from which the packet was received
  * @retval None
  */
void udp_echoserver_receive_callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b084      	sub	sp, #16
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	60f8      	str	r0, [r7, #12]
 8001be8:	60b9      	str	r1, [r7, #8]
 8001bea:	607a      	str	r2, [r7, #4]
 8001bec:	603b      	str	r3, [r7, #0]

  /* Connect to the remote client */
  udp_connect(upcb, addr, UDP_CLIENT_PORT);
 8001bee:	2207      	movs	r2, #7
 8001bf0:	6839      	ldr	r1, [r7, #0]
 8001bf2:	68b8      	ldr	r0, [r7, #8]
 8001bf4:	f00f fd00 	bl	80115f8 <udp_connect>
    
  /* Tell the client that we have accepted it */
  udp_send(upcb, p);
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f00f fa8a 	bl	8011114 <udp_send>

  /* free the UDP connection, so we can accept new clients */
  udp_disconnect(upcb);
 8001c00:	68b8      	ldr	r0, [r7, #8]
 8001c02:	f00f fd67 	bl	80116d4 <udp_disconnect>
	
  /* Free the p buffer */
  pbuf_free(p);
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f009 fb82 	bl	800b310 <pbuf_free>
   
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c18:	4b11      	ldr	r3, [pc, #68]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c1a:	4a12      	ldr	r2, [pc, #72]	; (8001c64 <MX_USART3_UART_Init+0x50>)
 8001c1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001c1e:	4b10      	ldr	r3, [pc, #64]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001c24:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c26:	4b0e      	ldr	r3, [pc, #56]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c2c:	4b0c      	ldr	r3, [pc, #48]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c32:	4b0b      	ldr	r3, [pc, #44]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c38:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c3a:	220c      	movs	r2, #12
 8001c3c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c3e:	4b08      	ldr	r3, [pc, #32]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c4a:	4805      	ldr	r0, [pc, #20]	; (8001c60 <MX_USART3_UART_Init+0x4c>)
 8001c4c:	f005 fd68 	bl	8007720 <HAL_UART_Init>
 8001c50:	4603      	mov	r3, r0
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d001      	beq.n	8001c5a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c56:	f7ff f899 	bl	8000d8c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c5a:	bf00      	nop
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	200006d4 	.word	0x200006d4
 8001c64:	40004800 	.word	0x40004800

08001c68 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08a      	sub	sp, #40	; 0x28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c70:	f107 0314 	add.w	r3, r7, #20
 8001c74:	2200      	movs	r2, #0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	605a      	str	r2, [r3, #4]
 8001c7a:	609a      	str	r2, [r3, #8]
 8001c7c:	60da      	str	r2, [r3, #12]
 8001c7e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1d      	ldr	r2, [pc, #116]	; (8001cfc <HAL_UART_MspInit+0x94>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d134      	bne.n	8001cf4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	4a1b      	ldr	r2, [pc, #108]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001c94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c98:	6413      	str	r3, [r2, #64]	; 0x40
 8001c9a:	4b19      	ldr	r3, [pc, #100]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ca2:	613b      	str	r3, [r7, #16]
 8001ca4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60fb      	str	r3, [r7, #12]
 8001caa:	4b15      	ldr	r3, [pc, #84]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	4a14      	ldr	r2, [pc, #80]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001cb0:	f043 0308 	orr.w	r3, r3, #8
 8001cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cb6:	4b12      	ldr	r3, [pc, #72]	; (8001d00 <HAL_UART_MspInit+0x98>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f003 0308 	and.w	r3, r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001cc2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001cc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc8:	2302      	movs	r3, #2
 8001cca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001cd4:	2307      	movs	r3, #7
 8001cd6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001cd8:	f107 0314 	add.w	r3, r7, #20
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4809      	ldr	r0, [pc, #36]	; (8001d04 <HAL_UART_MspInit+0x9c>)
 8001ce0:	f002 f9fa 	bl	80040d8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	2027      	movs	r0, #39	; 0x27
 8001cea:	f000 fc1a 	bl	8002522 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cee:	2027      	movs	r0, #39	; 0x27
 8001cf0:	f000 fc33 	bl	800255a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001cf4:	bf00      	nop
 8001cf6:	3728      	adds	r7, #40	; 0x28
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40004800 	.word	0x40004800
 8001d00:	40023800 	.word	0x40023800
 8001d04:	40020c00 	.word	0x40020c00

08001d08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001d08:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d40 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d0c:	480d      	ldr	r0, [pc, #52]	; (8001d44 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d0e:	490e      	ldr	r1, [pc, #56]	; (8001d48 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d10:	4a0e      	ldr	r2, [pc, #56]	; (8001d4c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d14:	e002      	b.n	8001d1c <LoopCopyDataInit>

08001d16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d1a:	3304      	adds	r3, #4

08001d1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d20:	d3f9      	bcc.n	8001d16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d22:	4a0b      	ldr	r2, [pc, #44]	; (8001d50 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d24:	4c0b      	ldr	r4, [pc, #44]	; (8001d54 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d28:	e001      	b.n	8001d2e <LoopFillZerobss>

08001d2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d2c:	3204      	adds	r2, #4

08001d2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d30:	d3fb      	bcc.n	8001d2a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d32:	f7ff fb29 	bl	8001388 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d36:	f012 f81d 	bl	8013d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d3a:	f7fe ff85 	bl	8000c48 <main>
  bx  lr    
 8001d3e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001d40:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001d44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d48:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001d4c:	08017aa4 	.word	0x08017aa4
  ldr r2, =_sbss
 8001d50:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001d54:	2000722c 	.word	0x2000722c

08001d58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d58:	e7fe      	b.n	8001d58 <ADC_IRQHandler>
	...

08001d5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d60:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0d      	ldr	r2, [pc, #52]	; (8001d9c <HAL_Init+0x40>)
 8001d66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d6c:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a0a      	ldr	r2, [pc, #40]	; (8001d9c <HAL_Init+0x40>)
 8001d72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d78:	4b08      	ldr	r3, [pc, #32]	; (8001d9c <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a07      	ldr	r2, [pc, #28]	; (8001d9c <HAL_Init+0x40>)
 8001d7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d84:	2003      	movs	r0, #3
 8001d86:	f000 fbc1 	bl	800250c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d8a:	200f      	movs	r0, #15
 8001d8c:	f000 f808 	bl	8001da0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d90:	f7ff f990 	bl	80010b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40023c00 	.word	0x40023c00

08001da0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001da8:	4b12      	ldr	r3, [pc, #72]	; (8001df4 <HAL_InitTick+0x54>)
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	4b12      	ldr	r3, [pc, #72]	; (8001df8 <HAL_InitTick+0x58>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001db6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f000 fbd9 	bl	8002576 <HAL_SYSTICK_Config>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d001      	beq.n	8001dce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e00e      	b.n	8001dec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0f      	cmp	r3, #15
 8001dd2:	d80a      	bhi.n	8001dea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	6879      	ldr	r1, [r7, #4]
 8001dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ddc:	f000 fba1 	bl	8002522 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001de0:	4a06      	ldr	r2, [pc, #24]	; (8001dfc <HAL_InitTick+0x5c>)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
 8001de8:	e000      	b.n	8001dec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	20000000 	.word	0x20000000
 8001df8:	20000008 	.word	0x20000008
 8001dfc:	20000004 	.word	0x20000004

08001e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_IncTick+0x20>)
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	461a      	mov	r2, r3
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_IncTick+0x24>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4413      	add	r3, r2
 8001e10:	4a04      	ldr	r2, [pc, #16]	; (8001e24 <HAL_IncTick+0x24>)
 8001e12:	6013      	str	r3, [r2, #0]
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	20000008 	.word	0x20000008
 8001e24:	20000718 	.word	0x20000718

08001e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e2c:	4b03      	ldr	r3, [pc, #12]	; (8001e3c <HAL_GetTick+0x14>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	20000718 	.word	0x20000718

08001e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e48:	f7ff ffee 	bl	8001e28 <HAL_GetTick>
 8001e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d005      	beq.n	8001e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	; (8001e84 <HAL_Delay+0x44>)
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	4413      	add	r3, r2
 8001e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e66:	bf00      	nop
 8001e68:	f7ff ffde 	bl	8001e28 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	68fa      	ldr	r2, [r7, #12]
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d8f7      	bhi.n	8001e68 <HAL_Delay+0x28>
  {
  }
}
 8001e78:	bf00      	nop
 8001e7a:	bf00      	nop
 8001e7c:	3710      	adds	r7, #16
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000008 	.word	0x20000008

08001e88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e033      	b.n	8001f06 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d109      	bne.n	8001eba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ea6:	6878      	ldr	r0, [r7, #4]
 8001ea8:	f7fe fbea 	bl	8000680 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 0310 	and.w	r3, r3, #16
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d118      	bne.n	8001ef8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ece:	f023 0302 	bic.w	r3, r3, #2
 8001ed2:	f043 0202 	orr.w	r2, r3, #2
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f94a 	bl	8002174 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eea:	f023 0303 	bic.w	r3, r3, #3
 8001eee:	f043 0201 	orr.w	r2, r3, #1
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
 8001ef6:	e001      	b.n	8001efc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b085      	sub	sp, #20
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x1c>
 8001f28:	2302      	movs	r3, #2
 8001f2a:	e113      	b.n	8002154 <HAL_ADC_ConfigChannel+0x244>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2201      	movs	r2, #1
 8001f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d925      	bls.n	8001f88 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68d9      	ldr	r1, [r3, #12]
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	005b      	lsls	r3, r3, #1
 8001f4e:	4413      	add	r3, r2
 8001f50:	3b1e      	subs	r3, #30
 8001f52:	2207      	movs	r2, #7
 8001f54:	fa02 f303 	lsl.w	r3, r2, r3
 8001f58:	43da      	mvns	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	400a      	ands	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68d9      	ldr	r1, [r3, #12]
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	689a      	ldr	r2, [r3, #8]
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	4618      	mov	r0, r3
 8001f74:	4603      	mov	r3, r0
 8001f76:	005b      	lsls	r3, r3, #1
 8001f78:	4403      	add	r3, r0
 8001f7a:	3b1e      	subs	r3, #30
 8001f7c:	409a      	lsls	r2, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	60da      	str	r2, [r3, #12]
 8001f86:	e022      	b.n	8001fce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	6919      	ldr	r1, [r3, #16]
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	b29b      	uxth	r3, r3
 8001f94:	461a      	mov	r2, r3
 8001f96:	4613      	mov	r3, r2
 8001f98:	005b      	lsls	r3, r3, #1
 8001f9a:	4413      	add	r3, r2
 8001f9c:	2207      	movs	r2, #7
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43da      	mvns	r2, r3
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	400a      	ands	r2, r1
 8001faa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6919      	ldr	r1, [r3, #16]
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b29b      	uxth	r3, r3
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	4603      	mov	r3, r0
 8001fc0:	005b      	lsls	r3, r3, #1
 8001fc2:	4403      	add	r3, r0
 8001fc4:	409a      	lsls	r2, r3
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	430a      	orrs	r2, r1
 8001fcc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d824      	bhi.n	8002020 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685a      	ldr	r2, [r3, #4]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	3b05      	subs	r3, #5
 8001fe8:	221f      	movs	r2, #31
 8001fea:	fa02 f303 	lsl.w	r3, r2, r3
 8001fee:	43da      	mvns	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	400a      	ands	r2, r1
 8001ff6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	b29b      	uxth	r3, r3
 8002004:	4618      	mov	r0, r3
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	685a      	ldr	r2, [r3, #4]
 800200a:	4613      	mov	r3, r2
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	3b05      	subs	r3, #5
 8002012:	fa00 f203 	lsl.w	r2, r0, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	635a      	str	r2, [r3, #52]	; 0x34
 800201e:	e04c      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b0c      	cmp	r3, #12
 8002026:	d824      	bhi.n	8002072 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685a      	ldr	r2, [r3, #4]
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	3b23      	subs	r3, #35	; 0x23
 800203a:	221f      	movs	r2, #31
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43da      	mvns	r2, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	400a      	ands	r2, r1
 8002048:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	b29b      	uxth	r3, r3
 8002056:	4618      	mov	r0, r3
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685a      	ldr	r2, [r3, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	009b      	lsls	r3, r3, #2
 8002060:	4413      	add	r3, r2
 8002062:	3b23      	subs	r3, #35	; 0x23
 8002064:	fa00 f203 	lsl.w	r2, r0, r3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	430a      	orrs	r2, r1
 800206e:	631a      	str	r2, [r3, #48]	; 0x30
 8002070:	e023      	b.n	80020ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685a      	ldr	r2, [r3, #4]
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	3b41      	subs	r3, #65	; 0x41
 8002084:	221f      	movs	r2, #31
 8002086:	fa02 f303 	lsl.w	r3, r2, r3
 800208a:	43da      	mvns	r2, r3
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	400a      	ands	r2, r1
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	b29b      	uxth	r3, r3
 80020a0:	4618      	mov	r0, r3
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	4613      	mov	r3, r2
 80020a8:	009b      	lsls	r3, r3, #2
 80020aa:	4413      	add	r3, r2
 80020ac:	3b41      	subs	r3, #65	; 0x41
 80020ae:	fa00 f203 	lsl.w	r2, r0, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	430a      	orrs	r2, r1
 80020b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ba:	4b29      	ldr	r3, [pc, #164]	; (8002160 <HAL_ADC_ConfigChannel+0x250>)
 80020bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a28      	ldr	r2, [pc, #160]	; (8002164 <HAL_ADC_ConfigChannel+0x254>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d10f      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d8>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b12      	cmp	r3, #18
 80020ce:	d10b      	bne.n	80020e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1d      	ldr	r2, [pc, #116]	; (8002164 <HAL_ADC_ConfigChannel+0x254>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d12b      	bne.n	800214a <HAL_ADC_ConfigChannel+0x23a>
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a1c      	ldr	r2, [pc, #112]	; (8002168 <HAL_ADC_ConfigChannel+0x258>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d003      	beq.n	8002104 <HAL_ADC_ConfigChannel+0x1f4>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b11      	cmp	r3, #17
 8002102:	d122      	bne.n	800214a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a11      	ldr	r2, [pc, #68]	; (8002168 <HAL_ADC_ConfigChannel+0x258>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d111      	bne.n	800214a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002126:	4b11      	ldr	r3, [pc, #68]	; (800216c <HAL_ADC_ConfigChannel+0x25c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a11      	ldr	r2, [pc, #68]	; (8002170 <HAL_ADC_ConfigChannel+0x260>)
 800212c:	fba2 2303 	umull	r2, r3, r2, r3
 8002130:	0c9a      	lsrs	r2, r3, #18
 8002132:	4613      	mov	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	4413      	add	r3, r2
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800213c:	e002      	b.n	8002144 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	3b01      	subs	r3, #1
 8002142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d1f9      	bne.n	800213e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002152:	2300      	movs	r3, #0
}
 8002154:	4618      	mov	r0, r3
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	40012000 	.word	0x40012000
 8002168:	10000012 	.word	0x10000012
 800216c:	20000000 	.word	0x20000000
 8002170:	431bde83 	.word	0x431bde83

08002174 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800217c:	4b79      	ldr	r3, [pc, #484]	; (8002364 <ADC_Init+0x1f0>)
 800217e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685b      	ldr	r3, [r3, #4]
 8002184:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	685a      	ldr	r2, [r3, #4]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	431a      	orrs	r2, r3
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6859      	ldr	r1, [r3, #4]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	691b      	ldr	r3, [r3, #16]
 80021b4:	021a      	lsls	r2, r3, #8
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	430a      	orrs	r2, r1
 80021bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	6859      	ldr	r1, [r3, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	430a      	orrs	r2, r1
 80021de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6899      	ldr	r1, [r3, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002206:	4a58      	ldr	r2, [pc, #352]	; (8002368 <ADC_Init+0x1f4>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d022      	beq.n	8002252 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	689a      	ldr	r2, [r3, #8]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800221a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	6899      	ldr	r1, [r3, #8]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800223c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6899      	ldr	r1, [r3, #8]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e00f      	b.n	8002272 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	689a      	ldr	r2, [r3, #8]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002270:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	689a      	ldr	r2, [r3, #8]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0202 	bic.w	r2, r2, #2
 8002280:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	6899      	ldr	r1, [r3, #8]
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	7e1b      	ldrb	r3, [r3, #24]
 800228c:	005a      	lsls	r2, r3, #1
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	430a      	orrs	r2, r1
 8002294:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 3020 	ldrb.w	r3, [r3, #32]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d01b      	beq.n	80022d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	685a      	ldr	r2, [r3, #4]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6859      	ldr	r1, [r3, #4]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ca:	3b01      	subs	r3, #1
 80022cc:	035a      	lsls	r2, r3, #13
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
 80022d6:	e007      	b.n	80022e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	685a      	ldr	r2, [r3, #4]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	3b01      	subs	r3, #1
 8002304:	051a      	lsls	r2, r3, #20
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	430a      	orrs	r2, r1
 800230c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	689a      	ldr	r2, [r3, #8]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800231c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	6899      	ldr	r1, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800232a:	025a      	lsls	r2, r3, #9
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	430a      	orrs	r2, r1
 8002332:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002342:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	6899      	ldr	r1, [r3, #8]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	029a      	lsls	r2, r3, #10
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
}
 8002358:	bf00      	nop
 800235a:	3714      	adds	r7, #20
 800235c:	46bd      	mov	sp, r7
 800235e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002362:	4770      	bx	lr
 8002364:	40012300 	.word	0x40012300
 8002368:	0f000001 	.word	0x0f000001

0800236c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f003 0307 	and.w	r3, r3, #7
 800237a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800237c:	4b0c      	ldr	r3, [pc, #48]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002382:	68ba      	ldr	r2, [r7, #8]
 8002384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002388:	4013      	ands	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800239c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800239e:	4a04      	ldr	r2, [pc, #16]	; (80023b0 <__NVIC_SetPriorityGrouping+0x44>)
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	60d3      	str	r3, [r2, #12]
}
 80023a4:	bf00      	nop
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ae:	4770      	bx	lr
 80023b0:	e000ed00 	.word	0xe000ed00

080023b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023b8:	4b04      	ldr	r3, [pc, #16]	; (80023cc <__NVIC_GetPriorityGrouping+0x18>)
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	f003 0307 	and.w	r3, r3, #7
}
 80023c2:	4618      	mov	r0, r3
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	e000ed00 	.word	0xe000ed00

080023d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	4603      	mov	r3, r0
 80023d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	db0b      	blt.n	80023fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	f003 021f 	and.w	r2, r3, #31
 80023e8:	4907      	ldr	r1, [pc, #28]	; (8002408 <__NVIC_EnableIRQ+0x38>)
 80023ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ee:	095b      	lsrs	r3, r3, #5
 80023f0:	2001      	movs	r0, #1
 80023f2:	fa00 f202 	lsl.w	r2, r0, r2
 80023f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000e100 	.word	0xe000e100

0800240c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	4603      	mov	r3, r0
 8002414:	6039      	str	r1, [r7, #0]
 8002416:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002418:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241c:	2b00      	cmp	r3, #0
 800241e:	db0a      	blt.n	8002436 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	b2da      	uxtb	r2, r3
 8002424:	490c      	ldr	r1, [pc, #48]	; (8002458 <__NVIC_SetPriority+0x4c>)
 8002426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800242a:	0112      	lsls	r2, r2, #4
 800242c:	b2d2      	uxtb	r2, r2
 800242e:	440b      	add	r3, r1
 8002430:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002434:	e00a      	b.n	800244c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	b2da      	uxtb	r2, r3
 800243a:	4908      	ldr	r1, [pc, #32]	; (800245c <__NVIC_SetPriority+0x50>)
 800243c:	79fb      	ldrb	r3, [r7, #7]
 800243e:	f003 030f 	and.w	r3, r3, #15
 8002442:	3b04      	subs	r3, #4
 8002444:	0112      	lsls	r2, r2, #4
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	440b      	add	r3, r1
 800244a:	761a      	strb	r2, [r3, #24]
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	e000e100 	.word	0xe000e100
 800245c:	e000ed00 	.word	0xe000ed00

08002460 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002460:	b480      	push	{r7}
 8002462:	b089      	sub	sp, #36	; 0x24
 8002464:	af00      	add	r7, sp, #0
 8002466:	60f8      	str	r0, [r7, #12]
 8002468:	60b9      	str	r1, [r7, #8]
 800246a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f1c3 0307 	rsb	r3, r3, #7
 800247a:	2b04      	cmp	r3, #4
 800247c:	bf28      	it	cs
 800247e:	2304      	movcs	r3, #4
 8002480:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	3304      	adds	r3, #4
 8002486:	2b06      	cmp	r3, #6
 8002488:	d902      	bls.n	8002490 <NVIC_EncodePriority+0x30>
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	3b03      	subs	r3, #3
 800248e:	e000      	b.n	8002492 <NVIC_EncodePriority+0x32>
 8002490:	2300      	movs	r3, #0
 8002492:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002494:	f04f 32ff 	mov.w	r2, #4294967295
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	fa02 f303 	lsl.w	r3, r2, r3
 800249e:	43da      	mvns	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	401a      	ands	r2, r3
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024a8:	f04f 31ff 	mov.w	r1, #4294967295
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fa01 f303 	lsl.w	r3, r1, r3
 80024b2:	43d9      	mvns	r1, r3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024b8:	4313      	orrs	r3, r2
         );
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	; 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
	...

080024c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	3b01      	subs	r3, #1
 80024d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024d8:	d301      	bcc.n	80024de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024da:	2301      	movs	r3, #1
 80024dc:	e00f      	b.n	80024fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024de:	4a0a      	ldr	r2, [pc, #40]	; (8002508 <SysTick_Config+0x40>)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	3b01      	subs	r3, #1
 80024e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024e6:	210f      	movs	r1, #15
 80024e8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ec:	f7ff ff8e 	bl	800240c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024f0:	4b05      	ldr	r3, [pc, #20]	; (8002508 <SysTick_Config+0x40>)
 80024f2:	2200      	movs	r2, #0
 80024f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024f6:	4b04      	ldr	r3, [pc, #16]	; (8002508 <SysTick_Config+0x40>)
 80024f8:	2207      	movs	r2, #7
 80024fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	e000e010 	.word	0xe000e010

0800250c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002514:	6878      	ldr	r0, [r7, #4]
 8002516:	f7ff ff29 	bl	800236c <__NVIC_SetPriorityGrouping>
}
 800251a:	bf00      	nop
 800251c:	3708      	adds	r7, #8
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}

08002522 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002522:	b580      	push	{r7, lr}
 8002524:	b086      	sub	sp, #24
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	60b9      	str	r1, [r7, #8]
 800252c:	607a      	str	r2, [r7, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002534:	f7ff ff3e 	bl	80023b4 <__NVIC_GetPriorityGrouping>
 8002538:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800253a:	687a      	ldr	r2, [r7, #4]
 800253c:	68b9      	ldr	r1, [r7, #8]
 800253e:	6978      	ldr	r0, [r7, #20]
 8002540:	f7ff ff8e 	bl	8002460 <NVIC_EncodePriority>
 8002544:	4602      	mov	r2, r0
 8002546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254a:	4611      	mov	r1, r2
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff ff5d 	bl	800240c <__NVIC_SetPriority>
}
 8002552:	bf00      	nop
 8002554:	3718      	adds	r7, #24
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800255a:	b580      	push	{r7, lr}
 800255c:	b082      	sub	sp, #8
 800255e:	af00      	add	r7, sp, #0
 8002560:	4603      	mov	r3, r0
 8002562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002568:	4618      	mov	r0, r3
 800256a:	f7ff ff31 	bl	80023d0 <__NVIC_EnableIRQ>
}
 800256e:	bf00      	nop
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ffa2 	bl	80024c8 <SysTick_Config>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3708      	adds	r7, #8
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b082      	sub	sp, #8
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e014      	b.n	80025ca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	791b      	ldrb	r3, [r3, #4]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d105      	bne.n	80025b6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7fe f923 	bl	80007fc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2202      	movs	r2, #2
 80025ba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3708      	adds	r7, #8
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}

080025d2 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b087      	sub	sp, #28
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	60f8      	str	r0, [r7, #12]
 80025da:	60b9      	str	r1, [r7, #8]
 80025dc:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	795b      	ldrb	r3, [r3, #5]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d101      	bne.n	80025ea <HAL_DAC_ConfigChannel+0x18>
 80025e6:	2302      	movs	r3, #2
 80025e8:	e03c      	b.n	8002664 <HAL_DAC_ConfigChannel+0x92>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2201      	movs	r2, #1
 80025ee:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	2202      	movs	r2, #2
 80025f4:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f003 0310 	and.w	r3, r3, #16
 8002604:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002608:	fa02 f303 	lsl.w	r3, r2, r3
 800260c:	43db      	mvns	r3, r3
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4013      	ands	r3, r2
 8002612:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	4313      	orrs	r3, r2
 800261e:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f003 0310 	and.w	r3, r3, #16
 8002626:	693a      	ldr	r2, [r7, #16]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	697a      	ldr	r2, [r7, #20]
 800262e:	4313      	orrs	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	697a      	ldr	r2, [r7, #20]
 8002638:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6819      	ldr	r1, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	22c0      	movs	r2, #192	; 0xc0
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	43da      	mvns	r2, r3
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	400a      	ands	r2, r1
 8002654:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2201      	movs	r2, #1
 800265a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2200      	movs	r2, #0
 8002660:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	371c      	adds	r7, #28
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b086      	sub	sp, #24
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002678:	2300      	movs	r3, #0
 800267a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800267c:	f7ff fbd4 	bl	8001e28 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d101      	bne.n	800268c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002688:	2301      	movs	r3, #1
 800268a:	e099      	b.n	80027c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2202      	movs	r2, #2
 8002690:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2200      	movs	r2, #0
 8002698:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681a      	ldr	r2, [r3, #0]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f022 0201 	bic.w	r2, r2, #1
 80026aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ac:	e00f      	b.n	80026ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026ae:	f7ff fbbb 	bl	8001e28 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d908      	bls.n	80026ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2220      	movs	r2, #32
 80026c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2203      	movs	r2, #3
 80026c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e078      	b.n	80027c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0301 	and.w	r3, r3, #1
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1e8      	bne.n	80026ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80026e4:	697a      	ldr	r2, [r7, #20]
 80026e6:	4b38      	ldr	r3, [pc, #224]	; (80027c8 <HAL_DMA_Init+0x158>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685a      	ldr	r2, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	689b      	ldr	r3, [r3, #8]
 80026f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80026fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002706:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002712:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	4313      	orrs	r3, r2
 800271e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b04      	cmp	r3, #4
 8002726:	d107      	bne.n	8002738 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002730:	4313      	orrs	r3, r2
 8002732:	697a      	ldr	r2, [r7, #20]
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	697a      	ldr	r2, [r7, #20]
 800273e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	695b      	ldr	r3, [r3, #20]
 8002746:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f023 0307 	bic.w	r3, r3, #7
 800274e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002754:	697a      	ldr	r2, [r7, #20]
 8002756:	4313      	orrs	r3, r2
 8002758:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	2b04      	cmp	r3, #4
 8002760:	d117      	bne.n	8002792 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002766:	697a      	ldr	r2, [r7, #20]
 8002768:	4313      	orrs	r3, r2
 800276a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002774:	6878      	ldr	r0, [r7, #4]
 8002776:	f000 fb0d 	bl	8002d94 <DMA_CheckFifoParam>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d008      	beq.n	8002792 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2240      	movs	r2, #64	; 0x40
 8002784:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2201      	movs	r2, #1
 800278a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800278e:	2301      	movs	r3, #1
 8002790:	e016      	b.n	80027c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	697a      	ldr	r2, [r7, #20]
 8002798:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 fac4 	bl	8002d28 <DMA_CalcBaseAndBitshift>
 80027a0:	4603      	mov	r3, r0
 80027a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a8:	223f      	movs	r2, #63	; 0x3f
 80027aa:	409a      	lsls	r2, r3
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2200      	movs	r2, #0
 80027b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3718      	adds	r7, #24
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	f010803f 	.word	0xf010803f

080027cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
 80027d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80027da:	2300      	movs	r3, #0
 80027dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d101      	bne.n	80027f2 <HAL_DMA_Start_IT+0x26>
 80027ee:	2302      	movs	r3, #2
 80027f0:	e040      	b.n	8002874 <HAL_DMA_Start_IT+0xa8>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2201      	movs	r2, #1
 80027f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d12f      	bne.n	8002866 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	2202      	movs	r2, #2
 800280a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	68b9      	ldr	r1, [r7, #8]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 fa56 	bl	8002ccc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002824:	223f      	movs	r2, #63	; 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f042 0216 	orr.w	r2, r2, #22
 800283a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	2b00      	cmp	r3, #0
 8002842:	d007      	beq.n	8002854 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	681a      	ldr	r2, [r3, #0]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f042 0208 	orr.w	r2, r2, #8
 8002852:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	e005      	b.n	8002872 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800286e:	2302      	movs	r3, #2
 8002870:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002872:	7dfb      	ldrb	r3, [r7, #23]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002888:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800288a:	f7ff facd 	bl	8001e28 <HAL_GetTick>
 800288e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d008      	beq.n	80028ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2280      	movs	r2, #128	; 0x80
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2200      	movs	r2, #0
 80028a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e052      	b.n	8002954 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f022 0216 	bic.w	r2, r2, #22
 80028bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695a      	ldr	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d103      	bne.n	80028de <HAL_DMA_Abort+0x62>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d007      	beq.n	80028ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	681a      	ldr	r2, [r3, #0]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0208 	bic.w	r2, r2, #8
 80028ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f022 0201 	bic.w	r2, r2, #1
 80028fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028fe:	e013      	b.n	8002928 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002900:	f7ff fa92 	bl	8001e28 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b05      	cmp	r3, #5
 800290c:	d90c      	bls.n	8002928 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2220      	movs	r2, #32
 8002912:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2203      	movs	r2, #3
 8002918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2200      	movs	r2, #0
 8002920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002924:	2303      	movs	r3, #3
 8002926:	e015      	b.n	8002954 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	2b00      	cmp	r3, #0
 8002934:	d1e4      	bne.n	8002900 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293a:	223f      	movs	r2, #63	; 0x3f
 800293c:	409a      	lsls	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2201      	movs	r2, #1
 8002946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	2200      	movs	r2, #0
 800294e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002952:	2300      	movs	r3, #0
}
 8002954:	4618      	mov	r0, r3
 8002956:	3710      	adds	r7, #16
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800296a:	b2db      	uxtb	r3, r3
 800296c:	2b02      	cmp	r3, #2
 800296e:	d004      	beq.n	800297a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2280      	movs	r2, #128	; 0x80
 8002974:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e00c      	b.n	8002994 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2205      	movs	r2, #5
 800297e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681a      	ldr	r2, [r3, #0]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 0201 	bic.w	r2, r2, #1
 8002990:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002992:	2300      	movs	r3, #0
}
 8002994:	4618      	mov	r0, r3
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80029a8:	2300      	movs	r3, #0
 80029aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80029ac:	4b92      	ldr	r3, [pc, #584]	; (8002bf8 <HAL_DMA_IRQHandler+0x258>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a92      	ldr	r2, [pc, #584]	; (8002bfc <HAL_DMA_IRQHandler+0x25c>)
 80029b2:	fba2 2303 	umull	r2, r3, r2, r3
 80029b6:	0a9b      	lsrs	r3, r3, #10
 80029b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ca:	2208      	movs	r2, #8
 80029cc:	409a      	lsls	r2, r3
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4013      	ands	r3, r2
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d01a      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0304 	and.w	r3, r3, #4
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d013      	beq.n	8002a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0204 	bic.w	r2, r2, #4
 80029f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f8:	2208      	movs	r2, #8
 80029fa:	409a      	lsls	r2, r3
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f043 0201 	orr.w	r2, r3, #1
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	2201      	movs	r2, #1
 8002a12:	409a      	lsls	r2, r3
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d012      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00b      	beq.n	8002a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2201      	movs	r2, #1
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a3a:	f043 0202 	orr.w	r2, r3, #2
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	2204      	movs	r2, #4
 8002a48:	409a      	lsls	r2, r3
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d012      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d00b      	beq.n	8002a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a64:	2204      	movs	r2, #4
 8002a66:	409a      	lsls	r2, r3
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a70:	f043 0204 	orr.w	r2, r3, #4
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a7c:	2210      	movs	r2, #16
 8002a7e:	409a      	lsls	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	4013      	ands	r3, r2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d043      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0308 	and.w	r3, r3, #8
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d03c      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9a:	2210      	movs	r2, #16
 8002a9c:	409a      	lsls	r2, r3
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d018      	beq.n	8002ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d108      	bne.n	8002ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d024      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	4798      	blx	r3
 8002ace:	e01f      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01b      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	4798      	blx	r3
 8002ae0:	e016      	b.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d107      	bne.n	8002b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f022 0208 	bic.w	r2, r2, #8
 8002afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d003      	beq.n	8002b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b14:	2220      	movs	r2, #32
 8002b16:	409a      	lsls	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 808e 	beq.w	8002c3e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8086 	beq.w	8002c3e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b36:	2220      	movs	r2, #32
 8002b38:	409a      	lsls	r2, r3
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b05      	cmp	r3, #5
 8002b48:	d136      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 0216 	bic.w	r2, r2, #22
 8002b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	695a      	ldr	r2, [r3, #20]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d103      	bne.n	8002b7a <HAL_DMA_IRQHandler+0x1da>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d007      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f022 0208 	bic.w	r2, r2, #8
 8002b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	223f      	movs	r2, #63	; 0x3f
 8002b90:	409a      	lsls	r2, r3
 8002b92:	693b      	ldr	r3, [r7, #16]
 8002b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d07d      	beq.n	8002caa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
        }
        return;
 8002bb6:	e078      	b.n	8002caa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01c      	beq.n	8002c00 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d108      	bne.n	8002be6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d030      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	4798      	blx	r3
 8002be4:	e02b      	b.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d027      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	4798      	blx	r3
 8002bf6:	e022      	b.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10f      	bne.n	8002c2e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 0210 	bic.w	r2, r2, #16
 8002c1c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2201      	movs	r2, #1
 8002c22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d032      	beq.n	8002cac <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c4a:	f003 0301 	and.w	r3, r3, #1
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d022      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2205      	movs	r2, #5
 8002c56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f022 0201 	bic.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	3301      	adds	r3, #1
 8002c6e:	60bb      	str	r3, [r7, #8]
 8002c70:	697a      	ldr	r2, [r7, #20]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d307      	bcc.n	8002c86 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d1f2      	bne.n	8002c6a <HAL_DMA_IRQHandler+0x2ca>
 8002c84:	e000      	b.n	8002c88 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002c86:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d005      	beq.n	8002cac <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	4798      	blx	r3
 8002ca8:	e000      	b.n	8002cac <HAL_DMA_IRQHandler+0x30c>
        return;
 8002caa:	bf00      	nop
    }
  }
}
 8002cac:	3718      	adds	r7, #24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop

08002cb4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b083      	sub	sp, #12
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	370c      	adds	r7, #12
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002ce8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	683a      	ldr	r2, [r7, #0]
 8002cf0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b40      	cmp	r3, #64	; 0x40
 8002cf8:	d108      	bne.n	8002d0c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	68ba      	ldr	r2, [r7, #8]
 8002d08:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d0a:	e007      	b.n	8002d1c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68ba      	ldr	r2, [r7, #8]
 8002d12:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	60da      	str	r2, [r3, #12]
}
 8002d1c:	bf00      	nop
 8002d1e:	3714      	adds	r7, #20
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr

08002d28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b085      	sub	sp, #20
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	3b10      	subs	r3, #16
 8002d38:	4a14      	ldr	r2, [pc, #80]	; (8002d8c <DMA_CalcBaseAndBitshift+0x64>)
 8002d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3e:	091b      	lsrs	r3, r3, #4
 8002d40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002d42:	4a13      	ldr	r2, [pc, #76]	; (8002d90 <DMA_CalcBaseAndBitshift+0x68>)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	4413      	add	r3, r2
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2b03      	cmp	r3, #3
 8002d54:	d909      	bls.n	8002d6a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d5e:	f023 0303 	bic.w	r3, r3, #3
 8002d62:	1d1a      	adds	r2, r3, #4
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	659a      	str	r2, [r3, #88]	; 0x58
 8002d68:	e007      	b.n	8002d7a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002d72:	f023 0303 	bic.w	r3, r3, #3
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3714      	adds	r7, #20
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	aaaaaaab 	.word	0xaaaaaaab
 8002d90:	08017848 	.word	0x08017848

08002d94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	699b      	ldr	r3, [r3, #24]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11f      	bne.n	8002dee <DMA_CheckFifoParam+0x5a>
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d856      	bhi.n	8002e62 <DMA_CheckFifoParam+0xce>
 8002db4:	a201      	add	r2, pc, #4	; (adr r2, 8002dbc <DMA_CheckFifoParam+0x28>)
 8002db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dba:	bf00      	nop
 8002dbc:	08002dcd 	.word	0x08002dcd
 8002dc0:	08002ddf 	.word	0x08002ddf
 8002dc4:	08002dcd 	.word	0x08002dcd
 8002dc8:	08002e63 	.word	0x08002e63
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d046      	beq.n	8002e66 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ddc:	e043      	b.n	8002e66 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de6:	d140      	bne.n	8002e6a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dec:	e03d      	b.n	8002e6a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002df6:	d121      	bne.n	8002e3c <DMA_CheckFifoParam+0xa8>
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	2b03      	cmp	r3, #3
 8002dfc:	d837      	bhi.n	8002e6e <DMA_CheckFifoParam+0xda>
 8002dfe:	a201      	add	r2, pc, #4	; (adr r2, 8002e04 <DMA_CheckFifoParam+0x70>)
 8002e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e04:	08002e15 	.word	0x08002e15
 8002e08:	08002e1b 	.word	0x08002e1b
 8002e0c:	08002e15 	.word	0x08002e15
 8002e10:	08002e2d 	.word	0x08002e2d
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002e14:	2301      	movs	r3, #1
 8002e16:	73fb      	strb	r3, [r7, #15]
      break;
 8002e18:	e030      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d025      	beq.n	8002e72 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e2a:	e022      	b.n	8002e72 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e34:	d11f      	bne.n	8002e76 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
 8002e38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002e3a:	e01c      	b.n	8002e76 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d903      	bls.n	8002e4a <DMA_CheckFifoParam+0xb6>
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	2b03      	cmp	r3, #3
 8002e46:	d003      	beq.n	8002e50 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002e48:	e018      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	73fb      	strb	r3, [r7, #15]
      break;
 8002e4e:	e015      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d00e      	beq.n	8002e7a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e60:	e00b      	b.n	8002e7a <DMA_CheckFifoParam+0xe6>
      break;
 8002e62:	bf00      	nop
 8002e64:	e00a      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e66:	bf00      	nop
 8002e68:	e008      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e6a:	bf00      	nop
 8002e6c:	e006      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e6e:	bf00      	nop
 8002e70:	e004      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <DMA_CheckFifoParam+0xe8>
      break;
 8002e7a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3714      	adds	r7, #20
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop

08002e8c <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b088      	sub	sp, #32
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U, phyreg = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	61fb      	str	r3, [r7, #28]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000U;
 8002e9c:	4baa      	ldr	r3, [pc, #680]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002e9e:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0U;
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d101      	bne.n	8002eb2 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	e183      	b.n	80031ba <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d106      	bne.n	8002ecc <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    heth->MspInitCallback(heth);

#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f006 fb92 	bl	80095f0 <HAL_ETH_MspInit>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ecc:	2300      	movs	r3, #0
 8002ece:	60bb      	str	r3, [r7, #8]
 8002ed0:	4b9e      	ldr	r3, [pc, #632]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed4:	4a9d      	ldr	r2, [pc, #628]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002ed6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002eda:	6453      	str	r3, [r2, #68]	; 0x44
 8002edc:	4b9b      	ldr	r3, [pc, #620]	; (800314c <HAL_ETH_Init+0x2c0>)
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002ee8:	4b99      	ldr	r3, [pc, #612]	; (8003150 <HAL_ETH_Init+0x2c4>)
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	4a98      	ldr	r2, [pc, #608]	; (8003150 <HAL_ETH_Init+0x2c4>)
 8002eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002ef2:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002ef4:	4b96      	ldr	r3, [pc, #600]	; (8003150 <HAL_ETH_Init+0x2c4>)
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	4994      	ldr	r1, [pc, #592]	; (8003150 <HAL_ETH_Init+0x2c4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f042 0201 	orr.w	r2, r2, #1
 8002f14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f18:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8002f1a:	f7fe ff85 	bl	8001e28 <HAL_GetTick>
 8002f1e:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f20:	e011      	b.n	8002f46 <HAL_ETH_Init+0xba>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8002f22:	f7fe ff81 	bl	8001e28 <HAL_GetTick>
 8002f26:	4602      	mov	r2, r0
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002f30:	d909      	bls.n	8002f46 <HAL_ETH_Init+0xba>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2203      	movs	r2, #3
 8002f36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
      return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e139      	b.n	80031ba <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d1e4      	bne.n	8002f22 <HAL_ETH_Init+0x96>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = (heth->Instance)->MACMIIAR;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691b      	ldr	r3, [r3, #16]
 8002f5e:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg1 &= ETH_MACMIIAR_CR_MASK;
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f023 031c 	bic.w	r3, r3, #28
 8002f66:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002f68:	f002 f908 	bl	800517c <HAL_RCC_GetHCLKFreq>
 8002f6c:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 8002f6e:	69bb      	ldr	r3, [r7, #24]
 8002f70:	4a78      	ldr	r2, [pc, #480]	; (8003154 <HAL_ETH_Init+0x2c8>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d908      	bls.n	8002f88 <HAL_ETH_Init+0xfc>
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	4a77      	ldr	r2, [pc, #476]	; (8003158 <HAL_ETH_Init+0x2cc>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d804      	bhi.n	8002f88 <HAL_ETH_Init+0xfc>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	f043 0308 	orr.w	r3, r3, #8
 8002f84:	61fb      	str	r3, [r7, #28]
 8002f86:	e027      	b.n	8002fd8 <HAL_ETH_Init+0x14c>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	4a73      	ldr	r2, [pc, #460]	; (8003158 <HAL_ETH_Init+0x2cc>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d908      	bls.n	8002fa2 <HAL_ETH_Init+0x116>
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	4a6d      	ldr	r2, [pc, #436]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d204      	bcs.n	8002fa2 <HAL_ETH_Init+0x116>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8002f98:	69fb      	ldr	r3, [r7, #28]
 8002f9a:	f043 030c 	orr.w	r3, r3, #12
 8002f9e:	61fb      	str	r3, [r7, #28]
 8002fa0:	e01a      	b.n	8002fd8 <HAL_ETH_Init+0x14c>
  }  
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	4a68      	ldr	r2, [pc, #416]	; (8003148 <HAL_ETH_Init+0x2bc>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d303      	bcc.n	8002fb2 <HAL_ETH_Init+0x126>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	4a6b      	ldr	r2, [pc, #428]	; (800315c <HAL_ETH_Init+0x2d0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d911      	bls.n	8002fd6 <HAL_ETH_Init+0x14a>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	4a69      	ldr	r2, [pc, #420]	; (800315c <HAL_ETH_Init+0x2d0>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d908      	bls.n	8002fcc <HAL_ETH_Init+0x140>
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	4a68      	ldr	r2, [pc, #416]	; (8003160 <HAL_ETH_Init+0x2d4>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d804      	bhi.n	8002fcc <HAL_ETH_Init+0x140>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f043 0304 	orr.w	r3, r3, #4
 8002fc8:	61fb      	str	r3, [r7, #28]
 8002fca:	e005      	b.n	8002fd8 <HAL_ETH_Init+0x14c>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000)) */
  {
    /* CSR Clock Range between 150-183 MHz */ 
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f043 0310 	orr.w	r3, r3, #16
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e000      	b.n	8002fd8 <HAL_ETH_Init+0x14c>
    tmpreg1 |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002fd6:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg1;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	69fa      	ldr	r2, [r7, #28]
 8002fde:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8002fe0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	6878      	ldr	r0, [r7, #4]
 8002fe8:	f000 fb98 	bl	800371c <HAL_ETH_WritePHYRegister>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d00b      	beq.n	800300a <HAL_ETH_Init+0x17e>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8002ff6:	6939      	ldr	r1, [r7, #16]
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fd4d 	bl	8003a98 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	2201      	movs	r2, #1
 8003002:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e0d7      	b.n	80031ba <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 800300a:	20ff      	movs	r0, #255	; 0xff
 800300c:	f7fe ff18 	bl	8001e40 <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	2b00      	cmp	r3, #0
 8003016:	f000 80a5 	beq.w	8003164 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800301a:	f7fe ff05 	bl	8001e28 <HAL_GetTick>
 800301e:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8003020:	f107 030c 	add.w	r3, r7, #12
 8003024:	461a      	mov	r2, r3
 8003026:	2101      	movs	r1, #1
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fb0f 	bl	800364c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 800302e:	f7fe fefb 	bl	8001e28 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d90f      	bls.n	8003060 <HAL_ETH_Init+0x1d4>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8003044:	6939      	ldr	r1, [r7, #16]
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f000 fd26 	bl	8003a98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2200      	movs	r2, #0
 8003058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e0ac      	b.n	80031ba <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0da      	beq.n	8003020 <HAL_ETH_Init+0x194>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 800306a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800306e:	2100      	movs	r1, #0
 8003070:	6878      	ldr	r0, [r7, #4]
 8003072:	f000 fb53 	bl	800371c <HAL_ETH_WritePHYRegister>
 8003076:	4603      	mov	r3, r0
 8003078:	2b00      	cmp	r3, #0
 800307a:	d00b      	beq.n	8003094 <HAL_ETH_Init+0x208>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8003080:	6939      	ldr	r1, [r7, #16]
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f000 fd08 	bl	8003a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2201      	movs	r2, #1
 800308c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8003090:	2301      	movs	r3, #1
 8003092:	e092      	b.n	80031ba <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8003094:	f7fe fec8 	bl	8001e28 <HAL_GetTick>
 8003098:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 800309a:	f107 030c 	add.w	r3, r7, #12
 800309e:	461a      	mov	r2, r3
 80030a0:	2101      	movs	r1, #1
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fad2 	bl	800364c <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 80030a8:	f7fe febe 	bl	8001e28 <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d90f      	bls.n	80030da <HAL_ETH_Init+0x24e>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 80030be:	6939      	ldr	r1, [r7, #16]
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fce9 	bl	8003a98 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e06f      	b.n	80031ba <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	f003 0320 	and.w	r3, r3, #32
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d0da      	beq.n	800309a <HAL_ETH_Init+0x20e>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 80030e4:	f107 030c 	add.w	r3, r7, #12
 80030e8:	461a      	mov	r2, r3
 80030ea:	2110      	movs	r1, #16
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 faad 	bl	800364c <HAL_ETH_ReadPHYRegister>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d00b      	beq.n	8003110 <HAL_ETH_Init+0x284>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 80030fc:	6939      	ldr	r1, [r7, #16]
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fcca 	bl	8003a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 800310c:	2301      	movs	r3, #1
 800310e:	e054      	b.n	80031ba <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f003 0304 	and.w	r3, r3, #4
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_ETH_Init+0x298>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003120:	60da      	str	r2, [r3, #12]
 8003122:	e002      	b.n	800312a <HAL_ETH_Init+0x29e>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_ETH_Init+0x2b0>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	609a      	str	r2, [r3, #8]
 800313a:	e035      	b.n	80031a8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003142:	609a      	str	r2, [r3, #8]
 8003144:	e030      	b.n	80031a8 <HAL_ETH_Init+0x31c>
 8003146:	bf00      	nop
 8003148:	03938700 	.word	0x03938700
 800314c:	40023800 	.word	0x40023800
 8003150:	40013800 	.word	0x40013800
 8003154:	01312cff 	.word	0x01312cff
 8003158:	02160ebf 	.word	0x02160ebf
 800315c:	05f5e0ff 	.word	0x05f5e0ff
 8003160:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	68db      	ldr	r3, [r3, #12]
 8003168:	08db      	lsrs	r3, r3, #3
 800316a:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1U))) != HAL_OK)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	085b      	lsrs	r3, r3, #1
 8003172:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3U) |
 8003174:	4313      	orrs	r3, r2
 8003176:	b29b      	uxth	r3, r3
 8003178:	461a      	mov	r2, r3
 800317a:	2100      	movs	r1, #0
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 facd 	bl	800371c <HAL_ETH_WritePHYRegister>
 8003182:	4603      	mov	r3, r0
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00b      	beq.n	80031a0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 800318c:	6939      	ldr	r1, [r7, #16]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f000 fc82 	bl	8003a98 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e00c      	b.n	80031ba <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 80031a0:	f640 70ff 	movw	r0, #4095	; 0xfff
 80031a4:	f7fe fe4c 	bl	8001e40 <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	6878      	ldr	r0, [r7, #4]
 80031ac:	f000 fc74 	bl	8003a98 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop

080031c4 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b087      	sub	sp, #28
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	60f8      	str	r0, [r7, #12]
 80031cc:	60b9      	str	r1, [r7, #8]
 80031ce:	607a      	str	r2, [r7, #4]
 80031d0:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80031d2:	2300      	movs	r3, #0
 80031d4:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_ETH_DMATxDescListInit+0x20>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e052      	b.n	800328a <HAL_ETH_DMATxDescListInit+0xc6>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0U; i < TxBuffCount; i++)
 80031fa:	2300      	movs	r3, #0
 80031fc:	617b      	str	r3, [r7, #20]
 80031fe:	e030      	b.n	8003262 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	68ba      	ldr	r2, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003210:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8003218:	fb02 f303 	mul.w	r3, r2, r3
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	4413      	add	r3, r2
 8003220:	461a      	mov	r2, r3
 8003222:	693b      	ldr	r3, [r7, #16]
 8003224:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1U))
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	3b01      	subs	r3, #1
 800323e:	697a      	ldr	r2, [r7, #20]
 8003240:	429a      	cmp	r2, r3
 8003242:	d208      	bcs.n	8003256 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1U);
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	3301      	adds	r3, #1
 8003248:	015b      	lsls	r3, r3, #5
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	4413      	add	r3, r2
 800324e:	461a      	mov	r2, r3
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	60da      	str	r2, [r3, #12]
 8003254:	e002      	b.n	800325c <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8003256:	68ba      	ldr	r2, [r7, #8]
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	60da      	str	r2, [r3, #12]
  for(i=0U; i < TxBuffCount; i++)
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	3301      	adds	r3, #1
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	429a      	cmp	r2, r3
 8003268:	d3ca      	bcc.n	8003200 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003274:	3310      	adds	r3, #16
 8003276:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2200      	movs	r2, #0
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003288:	2300      	movs	r3, #0
}
 800328a:	4618      	mov	r0, r3
 800328c:	371c      	adds	r7, #28
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr

08003296 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8003296:	b480      	push	{r7}
 8003298:	b087      	sub	sp, #28
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d101      	bne.n	80032b6 <HAL_ETH_DMARxDescListInit+0x20>
 80032b2:	2302      	movs	r3, #2
 80032b4:	e056      	b.n	8003364 <HAL_ETH_DMARxDescListInit+0xce>
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2201      	movs	r2, #1
 80032ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	68ba      	ldr	r2, [r7, #8]
 80032ca:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0U; i < RxBuffCount; i++)
 80032cc:	2300      	movs	r3, #0
 80032ce:	617b      	str	r3, [r7, #20]
 80032d0:	e034      	b.n	800333c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	015b      	lsls	r3, r3, #5
 80032d6:	68ba      	ldr	r2, [r7, #8]
 80032d8:	4413      	add	r3, r2
 80032da:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80032e2:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	f244 52f4 	movw	r2, #17908	; 0x45f4
 80032ea:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80032f2:	fb02 f303 	mul.w	r3, r2, r3
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	4413      	add	r3, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1U))
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	3b01      	subs	r3, #1
 8003318:	697a      	ldr	r2, [r7, #20]
 800331a:	429a      	cmp	r2, r3
 800331c:	d208      	bcs.n	8003330 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1U); 
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	3301      	adds	r3, #1
 8003322:	015b      	lsls	r3, r3, #5
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	4413      	add	r3, r2
 8003328:	461a      	mov	r2, r3
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	60da      	str	r2, [r3, #12]
 800332e:	e002      	b.n	8003336 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	60da      	str	r2, [r3, #12]
  for(i=0U; i < RxBuffCount; i++)
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	3301      	adds	r3, #1
 800333a:	617b      	str	r3, [r7, #20]
 800333c:	697a      	ldr	r2, [r7, #20]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	429a      	cmp	r2, r3
 8003342:	d3c6      	bcc.n	80032d2 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68ba      	ldr	r2, [r7, #8]
 800334a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800334e:	330c      	adds	r3, #12
 8003350:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2200      	movs	r2, #0
 800335e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8003362:	2300      	movs	r3, #0
}
 8003364:	4618      	mov	r0, r3
 8003366:	371c      	adds	r7, #28
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr

08003370 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8003370:	b480      	push	{r7}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
 8003378:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0U, size = 0U, i = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	617b      	str	r3, [r7, #20]
 800337e:	2300      	movs	r3, #0
 8003380:	60fb      	str	r3, [r7, #12]
 8003382:	2300      	movs	r3, #0
 8003384:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_ETH_TransmitFrame+0x24>
 8003390:	2302      	movs	r3, #2
 8003392:	e0cd      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0U) 
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d109      	bne.n	80033be <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2201      	movs	r2, #1
 80033ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 80033ba:	2301      	movs	r3, #1
 80033bc:	e0b8      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	da09      	bge.n	80033dc <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2212      	movs	r2, #18
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e0a9      	b.n	8003530 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d915      	bls.n	8003412 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	4a54      	ldr	r2, [pc, #336]	; (800353c <HAL_ETH_TransmitFrame+0x1cc>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	0a9b      	lsrs	r3, r3, #10
 80033f0:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 80033f2:	683a      	ldr	r2, [r7, #0]
 80033f4:	4b51      	ldr	r3, [pc, #324]	; (800353c <HAL_ETH_TransmitFrame+0x1cc>)
 80033f6:	fba3 1302 	umull	r1, r3, r3, r2
 80033fa:	0a9b      	lsrs	r3, r3, #10
 80033fc:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8003400:	fb01 f303 	mul.w	r3, r1, r3
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	3301      	adds	r3, #1
 800340e:	617b      	str	r3, [r7, #20]
 8003410:	e001      	b.n	8003416 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1U;
 8003412:	2301      	movs	r3, #1
 8003414:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1U)
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	2b01      	cmp	r3, #1
 800341a:	d11c      	bne.n	8003456 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003426:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 800342a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003436:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003442:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003446:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	461a      	mov	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	62da      	str	r2, [r3, #44]	; 0x2c
 8003454:	e04b      	b.n	80034ee <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0U; i< bufcount; i++)
 8003456:	2300      	movs	r3, #0
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e044      	b.n	80034e6 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003466:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800346a:	601a      	str	r2, [r3, #0]
      
      if (i == 0U) 
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d107      	bne.n	8003482 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800347c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003480:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003486:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800348a:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1U))
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	3b01      	subs	r3, #1
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	429a      	cmp	r2, r3
 8003494:	d116      	bne.n	80034c4 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80034a4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1U)*ETH_TX_BUF_SIZE;
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	4a25      	ldr	r2, [pc, #148]	; (8003540 <HAL_ETH_TransmitFrame+0x1d0>)
 80034aa:	fb02 f203 	mul.w	r2, r2, r3
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80034b6:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034bc:	68fa      	ldr	r2, [r7, #12]
 80034be:	f3c2 020c 	ubfx	r2, r2, #0, #13
 80034c2:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034ce:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80034d2:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034d8:	68db      	ldr	r3, [r3, #12]
 80034da:	461a      	mov	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0U; i< bufcount; i++)
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	3301      	adds	r3, #1
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	429a      	cmp	r2, r3
 80034ec:	d3b6      	bcc.n	800345c <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80034f6:	3314      	adds	r3, #20
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f003 0304 	and.w	r3, r3, #4
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00d      	beq.n	800351e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800350a:	3314      	adds	r3, #20
 800350c:	2204      	movs	r2, #4
 800350e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0U;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003518:	3304      	adds	r3, #4
 800351a:	2200      	movs	r2, #0
 800351c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2201      	movs	r2, #1
 8003522:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	371c      	adds	r7, #28
 8003534:	46bd      	mov	sp, r7
 8003536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353a:	4770      	bx	lr
 800353c:	ac02b00b 	.word	0xac02b00b
 8003540:	fffffa0c 	.word	0xfffffa0c

08003544 <HAL_ETH_GetReceivedFrame>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame(ETH_HandleTypeDef *heth)
{
 8003544:	b480      	push	{r7}
 8003546:	b085      	sub	sp, #20
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  uint32_t framelength = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_ETH_GetReceivedFrame+0x1a>
 800355a:	2302      	movs	r3, #2
 800355c:	e070      	b.n	8003640 <HAL_ETH_GetReceivedFrame+0xfc>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Check the ETH state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2202      	movs	r2, #2
 800356a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Check if segment is not owned by DMA */
  /* (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) */
  if(((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET))
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2b00      	cmp	r3, #0
 8003576:	db5a      	blt.n	800362e <HAL_ETH_GetReceivedFrame+0xea>
  {
    /* Check if last segment */
    if(((heth->RxDesc->Status & ETH_DMARXDESC_LS) != (uint32_t)RESET)) 
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d030      	beq.n	80035e8 <HAL_ETH_GetReceivedFrame+0xa4>
    {
      /* increment segment count */
      (heth->RxFrameInfos).SegCount++;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800358a:	1c5a      	adds	r2, r3, #1
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos).SegCount == 1U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003594:	2b01      	cmp	r3, #1
 8003596:	d103      	bne.n	80035a0 <HAL_ETH_GetReceivedFrame+0x5c>
      {
        (heth->RxFrameInfos).FSRxDesc =heth->RxDesc;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      framelength = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80035b4:	3b04      	subs	r3, #4
 80035b6:	60fb      	str	r3, [r7, #12]
      heth->RxFrameInfos.length = framelength;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	68fa      	ldr	r2, [r7, #12]
 80035bc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */
      heth->RxFrameInfos.buffer = ((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035c2:	689a      	ldr	r2, [r3, #8]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40
      /* point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) ((heth->RxDesc)->Buffer2NextDescAddr);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	461a      	mov	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2201      	movs	r2, #1
 80035d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
      
      /* Return function status */
      return HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	e02b      	b.n	8003640 <HAL_ETH_GetReceivedFrame+0xfc>
    }
    /* Check if first segment */
    else if((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d010      	beq.n	8003618 <HAL_ETH_GetReceivedFrame+0xd4>
    {
      (heth->RxFrameInfos).FSRxDesc = heth->RxDesc;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	631a      	str	r2, [r3, #48]	; 0x30
      (heth->RxFrameInfos).LSRxDesc = NULL;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	635a      	str	r2, [r3, #52]	; 0x34
      (heth->RxFrameInfos).SegCount = 1U;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	461a      	mov	r2, r3
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	629a      	str	r2, [r3, #40]	; 0x28
 8003616:	e00a      	b.n	800362e <HAL_ETH_GetReceivedFrame+0xea>
    }
    /* Check if intermediate segment */ 
    else
    {
      (heth->RxFrameInfos).SegCount++;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	461a      	mov	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	629a      	str	r2, [r3, #40]	; 0x28
    } 
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
}
 8003640:	4618      	mov	r0, r3
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr

0800364c <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b086      	sub	sp, #24
 8003650:	af00      	add	r7, sp, #0
 8003652:	60f8      	str	r0, [r7, #12]
 8003654:	460b      	mov	r3, r1
 8003656:	607a      	str	r2, [r7, #4]
 8003658:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;     
 800365a:	2300      	movs	r3, #0
 800365c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800365e:	2300      	movs	r3, #0
 8003660:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003668:	b2db      	uxtb	r3, r3
 800366a:	2b82      	cmp	r3, #130	; 0x82
 800366c:	d101      	bne.n	8003672 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 800366e:	2302      	movs	r3, #2
 8003670:	e050      	b.n	8003714 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2282      	movs	r2, #130	; 0x82
 8003676:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	691b      	ldr	r3, [r3, #16]
 8003680:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 031c 	and.w	r3, r3, #28
 8003688:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress << 11U) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	8a1b      	ldrh	r3, [r3, #16]
 800368e:	02db      	lsls	r3, r3, #11
 8003690:	b29b      	uxth	r3, r3
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 8003698:	897b      	ldrh	r3, [r7, #10]
 800369a:	019b      	lsls	r3, r3, #6
 800369c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80036a0:	697a      	ldr	r2, [r7, #20]
 80036a2:	4313      	orrs	r3, r2
 80036a4:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	f023 0302 	bic.w	r3, r3, #2
 80036ac:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	f043 0301 	orr.w	r3, r3, #1
 80036b4:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	697a      	ldr	r2, [r7, #20]
 80036bc:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80036be:	f7fe fbb3 	bl	8001e28 <HAL_GetTick>
 80036c2:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036c4:	e015      	b.n	80036f2 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 80036c6:	f7fe fbaf 	bl	8001e28 <HAL_GetTick>
 80036ca:	4602      	mov	r2, r0
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	1ad3      	subs	r3, r2, r3
 80036d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036d4:	d309      	bcc.n	80036ea <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e014      	b.n	8003714 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80036f2:	697b      	ldr	r3, [r7, #20]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e4      	bne.n	80036c6 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	b29b      	uxth	r3, r3
 8003704:	461a      	mov	r2, r3
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2201      	movs	r2, #1
 800370e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8003712:	2300      	movs	r3, #0
}
 8003714:	4618      	mov	r0, r3
 8003716:	3718      	adds	r7, #24
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b086      	sub	sp, #24
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	460b      	mov	r3, r1
 8003726:	607a      	str	r2, [r7, #4]
 8003728:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg1 = 0U;
 800372a:	2300      	movs	r3, #0
 800372c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 800372e:	2300      	movs	r3, #0
 8003730:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b42      	cmp	r3, #66	; 0x42
 800373c:	d101      	bne.n	8003742 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800373e:	2302      	movs	r3, #2
 8003740:	e04e      	b.n	80037e0 <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2242      	movs	r2, #66	; 0x42
 8003746:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	f003 031c 	and.w	r3, r3, #28
 8003758:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg1 |=(((uint32_t)heth->Init.PhyAddress<<11U) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	8a1b      	ldrh	r3, [r3, #16]
 800375e:	02db      	lsls	r3, r3, #11
 8003760:	b29b      	uxth	r3, r3
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	4313      	orrs	r3, r2
 8003766:	617b      	str	r3, [r7, #20]
  tmpreg1 |=(((uint32_t)PHYReg<<6U) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 8003768:	897b      	ldrh	r3, [r7, #10]
 800376a:	019b      	lsls	r3, r3, #6
 800376c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	4313      	orrs	r3, r2
 8003774:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	f043 0302 	orr.w	r3, r3, #2
 800377c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	f043 0301 	orr.w	r3, r3, #1
 8003784:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	697a      	ldr	r2, [r7, #20]
 8003796:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8003798:	f7fe fb46 	bl	8001e28 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800379e:	e015      	b.n	80037cc <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80037a0:	f7fe fb42 	bl	8001e28 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80037ae:	d309      	bcc.n	80037c4 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e00d      	b.n	80037e0 <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg1 = heth->Instance->MACMIIAR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	617b      	str	r3, [r7, #20]
  while((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d1e4      	bne.n	80037a0 <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 80037de:	2300      	movs	r3, #0
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3718      	adds	r7, #24
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b082      	sub	sp, #8
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d101      	bne.n	80037fe <HAL_ETH_Start+0x16>
 80037fa:	2302      	movs	r3, #2
 80037fc:	e01f      	b.n	800383e <HAL_ETH_Start+0x56>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2201      	movs	r2, #1
 8003802:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fb44 	bl	8003e9c <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fb7b 	bl	8003f10 <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 fc12 	bl	8004044 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 8003820:	6878      	ldr	r0, [r7, #4]
 8003822:	f000 fbaf 	bl	8003f84 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fbdc 	bl	8003fe4 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800383c:	2300      	movs	r3, #0
}
 800383e:	4618      	mov	r0, r3
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_ETH_Stop>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{  
 8003846:	b580      	push	{r7, lr}
 8003848:	b082      	sub	sp, #8
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003854:	2b01      	cmp	r3, #1
 8003856:	d101      	bne.n	800385c <HAL_ETH_Stop+0x16>
 8003858:	2302      	movs	r3, #2
 800385a:	e01f      	b.n	800389c <HAL_ETH_Stop+0x56>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Stop DMA transmission */
  ETH_DMATransmissionDisable(heth);
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fba1 	bl	8003fb4 <ETH_DMATransmissionDisable>
  
  /* Stop DMA reception */
  ETH_DMAReceptionDisable(heth);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fbce 	bl	8004014 <ETH_DMAReceptionDisable>
  
  /* Disable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionDisable(heth);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fb66 	bl	8003f4a <ETH_MACReceptionDisable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fbe0 	bl	8004044 <ETH_FlushTransmitFIFO>
  
  /* Disable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionDisable(heth);
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	f000 fb26 	bl	8003ed6 <ETH_MACTransmissionDisable>
  
  /* Set the ETH state*/
  heth->State = HAL_ETH_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2201      	movs	r2, #1
 800388e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800389a:	2300      	movs	r3, #0
}
 800389c:	4618      	mov	r0, r3
 800389e:	3708      	adds	r7, #8
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <HAL_ETH_ConfigMAC>:
  *         the configuration information for ETHERNET module
  * @param  macconf MAC Configuration structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ConfigMAC(ETH_HandleTypeDef *heth, ETH_MACInitTypeDef *macconf)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b084      	sub	sp, #16
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_ETH_ConfigMAC+0x1c>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0e4      	b.n	8003a8a <HAL_ETH_ConfigMAC+0x1e6>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State= HAL_ETH_STATE_BUSY;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  assert_param(IS_ETH_SPEED(heth->Init.Speed));
  assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode)); 
  
  if (macconf != NULL)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	f000 80b1 	beq.w	8003a3a <HAL_ETH_ConfigMAC+0x196>
    assert_param(IS_ETH_VLAN_TAG_COMPARISON(macconf->VLANTagComparison));
    assert_param(IS_ETH_VLAN_TAG_IDENTIFIER(macconf->VLANTagIdentifier));
    
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	60fb      	str	r3, [r7, #12]
    /* Clear WD, PCE, PS, TE and RE bits */
    tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <HAL_ETH_ConfigMAC+0x1f0>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
                         macconf->Jabber | 
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 80038f0:	431a      	orrs	r2, r3
                         macconf->InterFrameGap |
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
                         macconf->Jabber | 
 80038f6:	431a      	orrs	r2, r3
                         macconf->CarrierSense |
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	68db      	ldr	r3, [r3, #12]
                         macconf->InterFrameGap |
 80038fc:	431a      	orrs	r2, r3
                         (heth->Init).Speed | 
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	689b      	ldr	r3, [r3, #8]
                         macconf->CarrierSense |
 8003902:	431a      	orrs	r2, r3
                         macconf->ReceiveOwn |
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	691b      	ldr	r3, [r3, #16]
                         (heth->Init).Speed | 
 8003908:	431a      	orrs	r2, r3
                         macconf->LoopbackMode |
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	695b      	ldr	r3, [r3, #20]
                         macconf->ReceiveOwn |
 800390e:	431a      	orrs	r2, r3
                         (heth->Init).DuplexMode | 
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
                         macconf->LoopbackMode |
 8003914:	431a      	orrs	r2, r3
                         macconf->ChecksumOffload |    
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	699b      	ldr	r3, [r3, #24]
                         (heth->Init).DuplexMode | 
 800391a:	431a      	orrs	r2, r3
                         macconf->RetryTransmission | 
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	69db      	ldr	r3, [r3, #28]
                         macconf->ChecksumOffload |    
 8003920:	431a      	orrs	r2, r3
                         macconf->AutomaticPadCRCStrip | 
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6a1b      	ldr	r3, [r3, #32]
                         macconf->RetryTransmission | 
 8003926:	431a      	orrs	r2, r3
                         macconf->BackOffLimit | 
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                         macconf->AutomaticPadCRCStrip | 
 800392c:	431a      	orrs	r2, r3
                         macconf->DeferralCheck);
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                         macconf->BackOffLimit | 
 8003932:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(macconf->Watchdog | 
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68fa      	ldr	r2, [r7, #12]
 8003940:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800394a:	2001      	movs	r0, #1
 800394c:	f7fe fa78 	bl	8001e40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1; 
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	601a      	str	r2, [r3, #0]
    
    /*----------------------- ETHERNET MACFFR Configuration --------------------*/ 
    /* Write to ETHERNET MACFFR */  
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
                                          macconf->SourceAddrFilter |
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003960:	431a      	orrs	r2, r3
                                          macconf->PassControlFrames |
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
                                          macconf->SourceAddrFilter |
 8003966:	431a      	orrs	r2, r3
                                          macconf->BroadcastFramesReception | 
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                          macconf->PassControlFrames |
 800396c:	431a      	orrs	r2, r3
                                          macconf->DestinationAddrFilter |
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                          macconf->BroadcastFramesReception | 
 8003972:	431a      	orrs	r2, r3
                                          macconf->PromiscuousMode |
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                                          macconf->DestinationAddrFilter |
 8003978:	431a      	orrs	r2, r3
                                          macconf->MulticastFramesFilter |
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                                          macconf->PromiscuousMode |
 800397e:	ea42 0103 	orr.w	r1, r2, r3
                                          macconf->UnicastFramesFilter);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
                                          macconf->MulticastFramesFilter |
 800398a:	430a      	orrs	r2, r1
    (heth->Instance)->MACFFR = (uint32_t)(macconf->ReceiveAll | 
 800398c:	605a      	str	r2, [r3, #4]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFFR;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003996:	2001      	movs	r0, #1
 8003998:	f7fe fa52 	bl	8001e40 <HAL_Delay>
     (heth->Instance)->MACFFR = tmpreg1;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	605a      	str	r2, [r3, #4]
     
     /*--------------- ETHERNET MACHTHR and MACHTLR Configuration ---------------*/
     /* Write to ETHERNET MACHTHR */
     (heth->Instance)->MACHTHR = (uint32_t)macconf->HashTableHigh;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80039ac:	609a      	str	r2, [r3, #8]
     
     /* Write to ETHERNET MACHTLR */
     (heth->Instance)->MACHTLR = (uint32_t)macconf->HashTableLow;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80039b6:	60da      	str	r2, [r3, #12]
     /*----------------------- ETHERNET MACFCR Configuration --------------------*/
     
     /* Get the ETHERNET MACFCR value */  
     tmpreg1 = (heth->Instance)->MACFCR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	699b      	ldr	r3, [r3, #24]
 80039be:	60fb      	str	r3, [r7, #12]
     /* Clear xx bits */
     tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80039c0:	68fa      	ldr	r2, [r7, #12]
 80039c2:	f64f 7341 	movw	r3, #65345	; 0xff41
 80039c6:	4013      	ands	r3, r2
 80039c8:	60fb      	str	r3, [r7, #12]
     
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	041a      	lsls	r2, r3, #16
                          macconf->ZeroQuantaPause |
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039d4:	431a      	orrs	r2, r3
                          macconf->PauseLowThreshold |
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                          macconf->ZeroQuantaPause |
 80039da:	431a      	orrs	r2, r3
                          macconf->UnicastPauseFrameDetect | 
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                          macconf->PauseLowThreshold |
 80039e0:	431a      	orrs	r2, r3
                          macconf->ReceiveFlowControl |
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                          macconf->UnicastPauseFrameDetect | 
 80039e6:	431a      	orrs	r2, r3
                          macconf->TransmitFlowControl); 
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                          macconf->ReceiveFlowControl |
 80039ec:	4313      	orrs	r3, r2
     tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) | 
 80039ee:	68fa      	ldr	r2, [r7, #12]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
     
     /* Write to ETHERNET MACFCR */
     (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	619a      	str	r2, [r3, #24]
     
     /* Wait until the write operation will be taken into account :
     at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->MACFCR;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	699b      	ldr	r3, [r3, #24]
 8003a02:	60fb      	str	r3, [r7, #12]
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a04:	2001      	movs	r0, #1
 8003a06:	f7fe fa1b 	bl	8001e40 <HAL_Delay>
     (heth->Instance)->MACFCR = tmpreg1;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	619a      	str	r2, [r3, #24]
     
     /*----------------------- ETHERNET MACVLANTR Configuration -----------------*/
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
                                              macconf->VLANTagIdentifier);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
     (heth->Instance)->MACVLANTR = (uint32_t)(macconf->VLANTagComparison | 
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	61da      	str	r2, [r3, #28]
      
      /* Wait until the write operation will be taken into account :
      at least four TX_CLK/RX_CLK clock cycles */
      tmpreg1 = (heth->Instance)->MACVLANTR;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	69db      	ldr	r3, [r3, #28]
 8003a28:	60fb      	str	r3, [r7, #12]
      HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fe fa08 	bl	8001e40 <HAL_Delay>
      (heth->Instance)->MACVLANTR = tmpreg1;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68fa      	ldr	r2, [r7, #12]
 8003a36:	61da      	str	r2, [r3, #28]
 8003a38:	e01e      	b.n	8003a78 <HAL_ETH_ConfigMAC+0x1d4>
  }
  else /* macconf == NULL : here we just configure Speed and Duplex mode */
  {
    /*------------------------ ETHERNET MACCR Configuration --------------------*/
    /* Get the ETHERNET MACCR value */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60fb      	str	r3, [r7, #12]
    
    /* Clear FES and DM bits */
    tmpreg1 &= ~(0x00004800U);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	f423 4390 	bic.w	r3, r3, #18432	; 0x4800
 8003a48:	60fb      	str	r3, [r7, #12]
    
    tmpreg1 |= (uint32_t)(heth->Init.Speed | heth->Init.DuplexMode);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	689a      	ldr	r2, [r3, #8]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	68db      	ldr	r3, [r3, #12]
 8003a52:	4313      	orrs	r3, r2
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	60fb      	str	r3, [r7, #12]
    
    /* Write to ETHERNET MACCR */
    (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003a6a:	2001      	movs	r0, #1
 8003a6c:	f7fe f9e8 	bl	8001e40 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	601a      	str	r2, [r3, #0]
  }
  
  /* Set the ETH state to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;  
 8003a88:	2300      	movs	r3, #0
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3710      	adds	r7, #16
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	ff20810f 	.word	0xff20810f

08003a98 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b0b0      	sub	sp, #192	; 0xc0
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg1 = 0U;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d007      	beq.n	8003abe <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ab4:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003abc:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 8003aca:	2300      	movs	r3, #0
 8003acc:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d103      	bne.n	8003ae6 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 8003ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae2:	663b      	str	r3, [r7, #96]	; 0x60
 8003ae4:	e001      	b.n	8003aea <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 8003aea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003aee:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 8003af0:	2300      	movs	r3, #0
 8003af2:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003af4:	2300      	movs	r3, #0
 8003af6:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 8003af8:	2300      	movs	r3, #0
 8003afa:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 8003afc:	2300      	movs	r3, #0
 8003afe:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 8003b00:	2300      	movs	r3, #0
 8003b02:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8003b04:	2340      	movs	r3, #64	; 0x40
 8003b06:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8003b14:	2300      	movs	r3, #0
 8003b16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 8003b20:	2300      	movs	r3, #0
 8003b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8003b38:	2380      	movs	r3, #128	; 0x80
 8003b3a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8003b44:	2300      	movs	r3, #0
 8003b46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 8003b50:	2300      	movs	r3, #0
 8003b52:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8003b56:	2300      	movs	r3, #0
 8003b58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0U;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8003b6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003b70:	4bac      	ldr	r3, [pc, #688]	; (8003e24 <ETH_MACDMAConfig+0x38c>)
 8003b72:	4013      	ands	r3, r2
 8003b74:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003b78:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8003b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003b7c:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 8003b7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 8003b80:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 8003b82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8003b84:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8003b8a:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8003b8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 8003b8e:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 8003b90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 8003b92:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8003b98:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8003b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8003b9c:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 8003b9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 8003ba0:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 8003ba2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 8003ba4:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 8003ba6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 8003ba8:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 8003baa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 8003bac:	4313      	orrs	r3, r2
  tmpreg1 |= (uint32_t)(macinit.Watchdog | 
 8003bae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bc0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003bcc:	2001      	movs	r0, #1
 8003bce:	f7fe f937 	bl	8001e40 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1; 
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003bda:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003bdc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 8003bde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003be0:	431a      	orrs	r2, r3
                                        macinit.PassControlFrames |
 8003be2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 8003be4:	431a      	orrs	r2, r3
                                        macinit.BroadcastFramesReception | 
 8003be6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 8003bea:	431a      	orrs	r2, r3
                                        macinit.DestinationAddrFilter |
 8003bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 8003bf0:	431a      	orrs	r2, r3
                                        macinit.PromiscuousMode |
 8003bf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 8003bf6:	431a      	orrs	r2, r3
                                        macinit.MulticastFramesFilter |
 8003bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 8003bfc:	ea42 0103 	orr.w	r1, r2, r3
                                        macinit.UnicastFramesFilter);
 8003c00:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
                                        macinit.MulticastFramesFilter |
 8003c08:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8003c0a:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFFR;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f7fe f912 	bl	8001e40 <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg1;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c24:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003c2e:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8003c38:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg1 = (heth->Instance)->MACFCR;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8003c44:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c48:	f64f 7341 	movw	r3, #65345	; 0xff41
 8003c4c:	4013      	ands	r3, r2
 8003c4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c52:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003c56:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8003c58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c5c:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8003c5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 8003c62:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 8003c64:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8003c68:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8003c6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8003c6e:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 8003c70:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 8003c74:	4313      	orrs	r3, r2
   tmpreg1 |= (uint32_t)((macinit.PauseTime << 16U) | 
 8003c76:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003c88:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg1 = (heth->Instance)->MACFCR;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	699b      	ldr	r3, [r3, #24]
 8003c90:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8003c94:	2001      	movs	r0, #1
 8003c96:	f7fe f8d3 	bl	8001e40 <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg1;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ca2:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003ca4:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 8003ca8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	430a      	orrs	r2, r1
 8003cb2:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACVLANTR;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003cbe:	2001      	movs	r0, #1
 8003cc0:	f7fe f8be 	bl	8001e40 <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003ccc:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 8003cd2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cd6:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 8003cdc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003ce0:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 8003cf2:	2304      	movs	r3, #4
 8003cf4:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 8003cf6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003cfa:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 8003cfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8003d02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003d06:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003d08:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d0c:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8003d0e:	2380      	movs	r3, #128	; 0x80
 8003d10:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0U;
 8003d12:	2300      	movs	r3, #0
 8003d14:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003d16:	2300      	movs	r3, #0
 8003d18:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d22:	3318      	adds	r3, #24
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8003d2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d2e:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <ETH_MACDMAConfig+0x390>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d36:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8003d38:	68fb      	ldr	r3, [r7, #12]
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d3a:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8003d3c:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8003d3e:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 8003d40:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 8003d42:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 8003d44:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8003d46:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8003d48:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8003d4a:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8003d4c:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8003d4e:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 8003d52:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 8003d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8003d56:	4313      	orrs	r3, r2
    tmpreg1 |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8003d58:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d6a:	3318      	adds	r3, #24
 8003d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d70:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->DMAOMR;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8003d82:	2001      	movs	r0, #1
 8003d84:	f7fe f85c 	bl	8001e40 <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg1;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003d90:	3318      	adds	r3, #24
 8003d92:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003d96:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8003d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003d9c:	431a      	orrs	r2, r3
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 8003da0:	431a      	orrs	r2, r3
                                          dmainit.TxDMABurstLength |
 8003da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 8003da4:	431a      	orrs	r2, r3
                                          dmainit.EnhancedDescriptorFormat |
 8003da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 8003da8:	431a      	orrs	r2, r3
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003daa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dac:	009b      	lsls	r3, r3, #2
                                          dmainit.EnhancedDescriptorFormat |
 8003dae:	431a      	orrs	r2, r3
                                          dmainit.DMAArbitration |
 8003db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2U) |
 8003db2:	431a      	orrs	r2, r3
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8003dbc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dc0:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg1 = (heth->Instance)->DMABMR;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	f7fe f835 	bl	8001e40 <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg1;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003dde:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8003de2:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d10f      	bne.n	8003e0c <ETH_MACDMAConfig+0x374>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003df4:	331c      	adds	r3, #28
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003e00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003e08:	331c      	adds	r3, #28
 8003e0a:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	461a      	mov	r2, r3
 8003e12:	2100      	movs	r1, #0
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f000 f809 	bl	8003e2c <ETH_MACAddressConfig>
}
 8003e1a:	bf00      	nop
 8003e1c:	37c0      	adds	r7, #192	; 0xc0
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	ff20810f 	.word	0xff20810f
 8003e28:	f8de3f23 	.word	0xf8de3f23

08003e2c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b087      	sub	sp, #28
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	60f8      	str	r0, [r7, #12]
 8003e34:	60b9      	str	r1, [r7, #8]
 8003e36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3305      	adds	r3, #5
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	021b      	lsls	r3, r3, #8
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	3204      	adds	r2, #4
 8003e44:	7812      	ldrb	r2, [r2, #0]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <ETH_MACAddressConfig+0x68>)
 8003e4e:	4413      	add	r3, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	3303      	adds	r3, #3
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	061a      	lsls	r2, r3, #24
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3302      	adds	r3, #2
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	041b      	lsls	r3, r3, #16
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	3301      	adds	r3, #1
 8003e6c:	781b      	ldrb	r3, [r3, #0]
 8003e6e:	021b      	lsls	r3, r3, #8
 8003e70:	4313      	orrs	r3, r2
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003e7a:	68ba      	ldr	r2, [r7, #8]
 8003e7c:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <ETH_MACAddressConfig+0x6c>)
 8003e7e:	4413      	add	r3, r2
 8003e80:	461a      	mov	r2, r3
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	6013      	str	r3, [r2, #0]
}
 8003e86:	bf00      	nop
 8003e88:	371c      	adds	r7, #28
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr
 8003e92:	bf00      	nop
 8003e94:	40028040 	.word	0x40028040
 8003e98:	40028044 	.word	0x40028044

08003e9c <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b084      	sub	sp, #16
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f042 0208 	orr.w	r2, r2, #8
 8003eb6:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003ec0:	2001      	movs	r0, #1
 8003ec2:	f000 f8e9 	bl	8004098 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	601a      	str	r2, [r3, #0]
}
 8003ece:	bf00      	nop
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <ETH_MACTransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b084      	sub	sp, #16
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC transmission */
  (heth->Instance)->MACCR &= ~ETH_MACCR_TE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0208 	bic.w	r2, r2, #8
 8003ef0:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003efa:	2001      	movs	r0, #1
 8003efc:	f000 f8cc 	bl	8004098 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	601a      	str	r2, [r3, #0]
}
 8003f08:	bf00      	nop
 8003f0a:	3710      	adds	r7, #16
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	bd80      	pop	{r7, pc}

08003f10 <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b084      	sub	sp, #16
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f18:	2300      	movs	r3, #0
 8003f1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681a      	ldr	r2, [r3, #0]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f042 0204 	orr.w	r2, r2, #4
 8003f2a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f34:	2001      	movs	r0, #1
 8003f36:	f000 f8af 	bl	8004098 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	601a      	str	r2, [r3, #0]
}
 8003f42:	bf00      	nop
 8003f44:	3710      	adds	r7, #16
 8003f46:	46bd      	mov	sp, r7
 8003f48:	bd80      	pop	{r7, pc}

08003f4a <ETH_MACReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8003f4a:	b580      	push	{r7, lr}
 8003f4c:	b084      	sub	sp, #16
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	60fb      	str	r3, [r7, #12]
  
  /* Disable the MAC reception */
  (heth->Instance)->MACCR &= ~ETH_MACCR_RE; 
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0204 	bic.w	r2, r2, #4
 8003f64:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 8003f6e:	2001      	movs	r0, #1
 8003f70:	f000 f892 	bl	8004098 <ETH_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	601a      	str	r2, [r3, #0]
}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f94:	3318      	adds	r3, #24
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fa0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fa4:	3318      	adds	r3, #24
 8003fa6:	601a      	str	r2, [r3, #0]
}
 8003fa8:	bf00      	nop
 8003faa:	370c      	adds	r7, #12
 8003fac:	46bd      	mov	sp, r7
 8003fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb2:	4770      	bx	lr

08003fb4 <ETH_DMATransmissionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionDisable(ETH_HandleTypeDef *heth)
{ 
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  /* Disable the DMA transmission */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_ST;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fc4:	3318      	adds	r3, #24
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fd0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fd4:	3318      	adds	r3, #24
 8003fd6:	601a      	str	r2, [r3, #0]
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe2:	4770      	bx	lr

08003fe4 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003ff4:	3318      	adds	r3, #24
 8003ff6:	681a      	ldr	r2, [r3, #0]
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f042 0202 	orr.w	r2, r2, #2
 8004000:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004004:	3318      	adds	r3, #24
 8004006:	601a      	str	r2, [r3, #0]
}
 8004008:	bf00      	nop
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <ETH_DMAReceptionDisable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionDisable(ETH_HandleTypeDef *heth)
{ 
 8004014:	b480      	push	{r7}
 8004016:	b083      	sub	sp, #12
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  /* Disable the DMA reception */
  (heth->Instance)->DMAOMR &= ~ETH_DMAOMR_SR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004024:	3318      	adds	r3, #24
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0202 	bic.w	r2, r2, #2
 8004030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004034:	3318      	adds	r3, #24
 8004036:	601a      	str	r2, [r3, #0]
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b084      	sub	sp, #16
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg1 = 0U;
 800404c:	2300      	movs	r3, #0
 800404e:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004058:	3318      	adds	r3, #24
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004064:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004068:	3318      	adds	r3, #24
 800406a:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004074:	3318      	adds	r3, #24
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	60fb      	str	r3, [r7, #12]
  ETH_Delay(ETH_REG_WRITE_DELAY);
 800407a:	2001      	movs	r0, #1
 800407c:	f000 f80c 	bl	8004098 <ETH_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800408a:	3318      	adds	r3, #24
 800408c:	601a      	str	r2, [r3, #0]
}
 800408e:	bf00      	nop
 8004090:	3710      	adds	r7, #16
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
	...

08004098 <ETH_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay specifies the delay time length, in milliseconds.
  * @retval None
  */
static void ETH_Delay(uint32_t mdelay)
{
 8004098:	b480      	push	{r7}
 800409a:	b085      	sub	sp, #20
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80040a0:	4b0b      	ldr	r3, [pc, #44]	; (80040d0 <ETH_Delay+0x38>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <ETH_Delay+0x3c>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0a5b      	lsrs	r3, r3, #9
 80040ac:	687a      	ldr	r2, [r7, #4]
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	60fb      	str	r3, [r7, #12]
  do 
  {
    __NOP();
 80040b4:	bf00      	nop
  } 
  while (Delay --);
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	1e5a      	subs	r2, r3, #1
 80040ba:	60fa      	str	r2, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f9      	bne.n	80040b4 <ETH_Delay+0x1c>
}
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	3714      	adds	r7, #20
 80040c6:	46bd      	mov	sp, r7
 80040c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040cc:	4770      	bx	lr
 80040ce:	bf00      	nop
 80040d0:	20000000 	.word	0x20000000
 80040d4:	10624dd3 	.word	0x10624dd3

080040d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040d8:	b480      	push	{r7}
 80040da:	b089      	sub	sp, #36	; 0x24
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040e2:	2300      	movs	r3, #0
 80040e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040e6:	2300      	movs	r3, #0
 80040e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
 80040f2:	e177      	b.n	80043e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80040f4:	2201      	movs	r2, #1
 80040f6:	69fb      	ldr	r3, [r7, #28]
 80040f8:	fa02 f303 	lsl.w	r3, r2, r3
 80040fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4013      	ands	r3, r2
 8004106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	429a      	cmp	r2, r3
 800410e:	f040 8166 	bne.w	80043de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f003 0303 	and.w	r3, r3, #3
 800411a:	2b01      	cmp	r3, #1
 800411c:	d005      	beq.n	800412a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004126:	2b02      	cmp	r3, #2
 8004128:	d130      	bne.n	800418c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004130:	69fb      	ldr	r3, [r7, #28]
 8004132:	005b      	lsls	r3, r3, #1
 8004134:	2203      	movs	r2, #3
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	43db      	mvns	r3, r3
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	4013      	ands	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	68da      	ldr	r2, [r3, #12]
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	fa02 f303 	lsl.w	r3, r2, r3
 800414e:	69ba      	ldr	r2, [r7, #24]
 8004150:	4313      	orrs	r3, r2
 8004152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69ba      	ldr	r2, [r7, #24]
 8004158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004160:	2201      	movs	r2, #1
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	fa02 f303 	lsl.w	r3, r2, r3
 8004168:	43db      	mvns	r3, r3
 800416a:	69ba      	ldr	r2, [r7, #24]
 800416c:	4013      	ands	r3, r2
 800416e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	091b      	lsrs	r3, r3, #4
 8004176:	f003 0201 	and.w	r2, r3, #1
 800417a:	69fb      	ldr	r3, [r7, #28]
 800417c:	fa02 f303 	lsl.w	r3, r2, r3
 8004180:	69ba      	ldr	r2, [r7, #24]
 8004182:	4313      	orrs	r3, r2
 8004184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b03      	cmp	r3, #3
 8004196:	d017      	beq.n	80041c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	2203      	movs	r2, #3
 80041a4:	fa02 f303 	lsl.w	r3, r2, r3
 80041a8:	43db      	mvns	r3, r3
 80041aa:	69ba      	ldr	r2, [r7, #24]
 80041ac:	4013      	ands	r3, r2
 80041ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	005b      	lsls	r3, r3, #1
 80041b8:	fa02 f303 	lsl.w	r3, r2, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4313      	orrs	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d123      	bne.n	800421c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	08da      	lsrs	r2, r3, #3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	3208      	adds	r2, #8
 80041dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041e2:	69fb      	ldr	r3, [r7, #28]
 80041e4:	f003 0307 	and.w	r3, r3, #7
 80041e8:	009b      	lsls	r3, r3, #2
 80041ea:	220f      	movs	r2, #15
 80041ec:	fa02 f303 	lsl.w	r3, r2, r3
 80041f0:	43db      	mvns	r3, r3
 80041f2:	69ba      	ldr	r2, [r7, #24]
 80041f4:	4013      	ands	r3, r2
 80041f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f003 0307 	and.w	r3, r3, #7
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	fa02 f303 	lsl.w	r3, r2, r3
 8004208:	69ba      	ldr	r2, [r7, #24]
 800420a:	4313      	orrs	r3, r2
 800420c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	08da      	lsrs	r2, r3, #3
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	3208      	adds	r2, #8
 8004216:	69b9      	ldr	r1, [r7, #24]
 8004218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004222:	69fb      	ldr	r3, [r7, #28]
 8004224:	005b      	lsls	r3, r3, #1
 8004226:	2203      	movs	r2, #3
 8004228:	fa02 f303 	lsl.w	r3, r2, r3
 800422c:	43db      	mvns	r3, r3
 800422e:	69ba      	ldr	r2, [r7, #24]
 8004230:	4013      	ands	r3, r2
 8004232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 0203 	and.w	r2, r3, #3
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	fa02 f303 	lsl.w	r3, r2, r3
 8004244:	69ba      	ldr	r2, [r7, #24]
 8004246:	4313      	orrs	r3, r2
 8004248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	69ba      	ldr	r2, [r7, #24]
 800424e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004258:	2b00      	cmp	r3, #0
 800425a:	f000 80c0 	beq.w	80043de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800425e:	2300      	movs	r3, #0
 8004260:	60fb      	str	r3, [r7, #12]
 8004262:	4b66      	ldr	r3, [pc, #408]	; (80043fc <HAL_GPIO_Init+0x324>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	4a65      	ldr	r2, [pc, #404]	; (80043fc <HAL_GPIO_Init+0x324>)
 8004268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800426c:	6453      	str	r3, [r2, #68]	; 0x44
 800426e:	4b63      	ldr	r3, [pc, #396]	; (80043fc <HAL_GPIO_Init+0x324>)
 8004270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004276:	60fb      	str	r3, [r7, #12]
 8004278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800427a:	4a61      	ldr	r2, [pc, #388]	; (8004400 <HAL_GPIO_Init+0x328>)
 800427c:	69fb      	ldr	r3, [r7, #28]
 800427e:	089b      	lsrs	r3, r3, #2
 8004280:	3302      	adds	r3, #2
 8004282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	220f      	movs	r2, #15
 8004292:	fa02 f303 	lsl.w	r3, r2, r3
 8004296:	43db      	mvns	r3, r3
 8004298:	69ba      	ldr	r2, [r7, #24]
 800429a:	4013      	ands	r3, r2
 800429c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a58      	ldr	r2, [pc, #352]	; (8004404 <HAL_GPIO_Init+0x32c>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d037      	beq.n	8004316 <HAL_GPIO_Init+0x23e>
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a57      	ldr	r2, [pc, #348]	; (8004408 <HAL_GPIO_Init+0x330>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d031      	beq.n	8004312 <HAL_GPIO_Init+0x23a>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a56      	ldr	r2, [pc, #344]	; (800440c <HAL_GPIO_Init+0x334>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d02b      	beq.n	800430e <HAL_GPIO_Init+0x236>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a55      	ldr	r2, [pc, #340]	; (8004410 <HAL_GPIO_Init+0x338>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d025      	beq.n	800430a <HAL_GPIO_Init+0x232>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a54      	ldr	r2, [pc, #336]	; (8004414 <HAL_GPIO_Init+0x33c>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d01f      	beq.n	8004306 <HAL_GPIO_Init+0x22e>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a53      	ldr	r2, [pc, #332]	; (8004418 <HAL_GPIO_Init+0x340>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d019      	beq.n	8004302 <HAL_GPIO_Init+0x22a>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a52      	ldr	r2, [pc, #328]	; (800441c <HAL_GPIO_Init+0x344>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <HAL_GPIO_Init+0x226>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a51      	ldr	r2, [pc, #324]	; (8004420 <HAL_GPIO_Init+0x348>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d00d      	beq.n	80042fa <HAL_GPIO_Init+0x222>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a50      	ldr	r2, [pc, #320]	; (8004424 <HAL_GPIO_Init+0x34c>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d007      	beq.n	80042f6 <HAL_GPIO_Init+0x21e>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a4f      	ldr	r2, [pc, #316]	; (8004428 <HAL_GPIO_Init+0x350>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d101      	bne.n	80042f2 <HAL_GPIO_Init+0x21a>
 80042ee:	2309      	movs	r3, #9
 80042f0:	e012      	b.n	8004318 <HAL_GPIO_Init+0x240>
 80042f2:	230a      	movs	r3, #10
 80042f4:	e010      	b.n	8004318 <HAL_GPIO_Init+0x240>
 80042f6:	2308      	movs	r3, #8
 80042f8:	e00e      	b.n	8004318 <HAL_GPIO_Init+0x240>
 80042fa:	2307      	movs	r3, #7
 80042fc:	e00c      	b.n	8004318 <HAL_GPIO_Init+0x240>
 80042fe:	2306      	movs	r3, #6
 8004300:	e00a      	b.n	8004318 <HAL_GPIO_Init+0x240>
 8004302:	2305      	movs	r3, #5
 8004304:	e008      	b.n	8004318 <HAL_GPIO_Init+0x240>
 8004306:	2304      	movs	r3, #4
 8004308:	e006      	b.n	8004318 <HAL_GPIO_Init+0x240>
 800430a:	2303      	movs	r3, #3
 800430c:	e004      	b.n	8004318 <HAL_GPIO_Init+0x240>
 800430e:	2302      	movs	r3, #2
 8004310:	e002      	b.n	8004318 <HAL_GPIO_Init+0x240>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <HAL_GPIO_Init+0x240>
 8004316:	2300      	movs	r3, #0
 8004318:	69fa      	ldr	r2, [r7, #28]
 800431a:	f002 0203 	and.w	r2, r2, #3
 800431e:	0092      	lsls	r2, r2, #2
 8004320:	4093      	lsls	r3, r2
 8004322:	69ba      	ldr	r2, [r7, #24]
 8004324:	4313      	orrs	r3, r2
 8004326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004328:	4935      	ldr	r1, [pc, #212]	; (8004400 <HAL_GPIO_Init+0x328>)
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	089b      	lsrs	r3, r3, #2
 800432e:	3302      	adds	r3, #2
 8004330:	69ba      	ldr	r2, [r7, #24]
 8004332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004336:	4b3d      	ldr	r3, [pc, #244]	; (800442c <HAL_GPIO_Init+0x354>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	43db      	mvns	r3, r3
 8004340:	69ba      	ldr	r2, [r7, #24]
 8004342:	4013      	ands	r3, r2
 8004344:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	693b      	ldr	r3, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800435a:	4a34      	ldr	r2, [pc, #208]	; (800442c <HAL_GPIO_Init+0x354>)
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004360:	4b32      	ldr	r3, [pc, #200]	; (800442c <HAL_GPIO_Init+0x354>)
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d003      	beq.n	8004384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004384:	4a29      	ldr	r2, [pc, #164]	; (800442c <HAL_GPIO_Init+0x354>)
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800438a:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_GPIO_Init+0x354>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	43db      	mvns	r3, r3
 8004394:	69ba      	ldr	r2, [r7, #24]
 8004396:	4013      	ands	r3, r2
 8004398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d003      	beq.n	80043ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80043ae:	4a1f      	ldr	r2, [pc, #124]	; (800442c <HAL_GPIO_Init+0x354>)
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80043b4:	4b1d      	ldr	r3, [pc, #116]	; (800442c <HAL_GPIO_Init+0x354>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80043ba:	693b      	ldr	r3, [r7, #16]
 80043bc:	43db      	mvns	r3, r3
 80043be:	69ba      	ldr	r2, [r7, #24]
 80043c0:	4013      	ands	r3, r2
 80043c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d003      	beq.n	80043d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	4313      	orrs	r3, r2
 80043d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80043d8:	4a14      	ldr	r2, [pc, #80]	; (800442c <HAL_GPIO_Init+0x354>)
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	f67f ae84 	bls.w	80040f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043ec:	bf00      	nop
 80043ee:	bf00      	nop
 80043f0:	3724      	adds	r7, #36	; 0x24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	40023800 	.word	0x40023800
 8004400:	40013800 	.word	0x40013800
 8004404:	40020000 	.word	0x40020000
 8004408:	40020400 	.word	0x40020400
 800440c:	40020800 	.word	0x40020800
 8004410:	40020c00 	.word	0x40020c00
 8004414:	40021000 	.word	0x40021000
 8004418:	40021400 	.word	0x40021400
 800441c:	40021800 	.word	0x40021800
 8004420:	40021c00 	.word	0x40021c00
 8004424:	40022000 	.word	0x40022000
 8004428:	40022400 	.word	0x40022400
 800442c:	40013c00 	.word	0x40013c00

08004430 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004430:	b480      	push	{r7}
 8004432:	b085      	sub	sp, #20
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	4013      	ands	r3, r2
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004448:	2301      	movs	r3, #1
 800444a:	73fb      	strb	r3, [r7, #15]
 800444c:	e001      	b.n	8004452 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800444e:	2300      	movs	r3, #0
 8004450:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004452:	7bfb      	ldrb	r3, [r7, #15]
}
 8004454:	4618      	mov	r0, r3
 8004456:	3714      	adds	r7, #20
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	807b      	strh	r3, [r7, #2]
 800446c:	4613      	mov	r3, r2
 800446e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004470:	787b      	ldrb	r3, [r7, #1]
 8004472:	2b00      	cmp	r3, #0
 8004474:	d003      	beq.n	800447e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004476:	887a      	ldrh	r2, [r7, #2]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800447c:	e003      	b.n	8004486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800447e:	887b      	ldrh	r3, [r7, #2]
 8004480:	041a      	lsls	r2, r3, #16
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	619a      	str	r2, [r3, #24]
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004490:	4770      	bx	lr
	...

08004494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	4603      	mov	r3, r0
 800449c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800449e:	4b08      	ldr	r3, [pc, #32]	; (80044c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044a0:	695a      	ldr	r2, [r3, #20]
 80044a2:	88fb      	ldrh	r3, [r7, #6]
 80044a4:	4013      	ands	r3, r2
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d006      	beq.n	80044b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80044aa:	4a05      	ldr	r2, [pc, #20]	; (80044c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80044b0:	88fb      	ldrh	r3, [r7, #6]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 f806 	bl	80044c4 <HAL_GPIO_EXTI_Callback>
  }
}
 80044b8:	bf00      	nop
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	40013c00 	.word	0x40013c00

080044c4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	4603      	mov	r3, r0
 80044cc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80044ce:	bf00      	nop
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e12b      	b.n	8004746 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d106      	bne.n	8004508 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fc fb22 	bl	8000b4c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2224      	movs	r2, #36	; 0x24
 800450c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 0201 	bic.w	r2, r2, #1
 800451e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800452e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800453e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004540:	f000 fe28 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 8004544:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	4a81      	ldr	r2, [pc, #516]	; (8004750 <HAL_I2C_Init+0x274>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d807      	bhi.n	8004560 <HAL_I2C_Init+0x84>
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	4a80      	ldr	r2, [pc, #512]	; (8004754 <HAL_I2C_Init+0x278>)
 8004554:	4293      	cmp	r3, r2
 8004556:	bf94      	ite	ls
 8004558:	2301      	movls	r3, #1
 800455a:	2300      	movhi	r3, #0
 800455c:	b2db      	uxtb	r3, r3
 800455e:	e006      	b.n	800456e <HAL_I2C_Init+0x92>
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4a7d      	ldr	r2, [pc, #500]	; (8004758 <HAL_I2C_Init+0x27c>)
 8004564:	4293      	cmp	r3, r2
 8004566:	bf94      	ite	ls
 8004568:	2301      	movls	r3, #1
 800456a:	2300      	movhi	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2b00      	cmp	r3, #0
 8004570:	d001      	beq.n	8004576 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004572:	2301      	movs	r3, #1
 8004574:	e0e7      	b.n	8004746 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	4a78      	ldr	r2, [pc, #480]	; (800475c <HAL_I2C_Init+0x280>)
 800457a:	fba2 2303 	umull	r2, r3, r2, r3
 800457e:	0c9b      	lsrs	r3, r3, #18
 8004580:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4a6a      	ldr	r2, [pc, #424]	; (8004750 <HAL_I2C_Init+0x274>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d802      	bhi.n	80045b0 <HAL_I2C_Init+0xd4>
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	3301      	adds	r3, #1
 80045ae:	e009      	b.n	80045c4 <HAL_I2C_Init+0xe8>
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	4a69      	ldr	r2, [pc, #420]	; (8004760 <HAL_I2C_Init+0x284>)
 80045bc:	fba2 2303 	umull	r2, r3, r2, r3
 80045c0:	099b      	lsrs	r3, r3, #6
 80045c2:	3301      	adds	r3, #1
 80045c4:	687a      	ldr	r2, [r7, #4]
 80045c6:	6812      	ldr	r2, [r2, #0]
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045d6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	495c      	ldr	r1, [pc, #368]	; (8004750 <HAL_I2C_Init+0x274>)
 80045e0:	428b      	cmp	r3, r1
 80045e2:	d819      	bhi.n	8004618 <HAL_I2C_Init+0x13c>
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	1e59      	subs	r1, r3, #1
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	005b      	lsls	r3, r3, #1
 80045ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80045f2:	1c59      	adds	r1, r3, #1
 80045f4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80045f8:	400b      	ands	r3, r1
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <HAL_I2C_Init+0x138>
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1e59      	subs	r1, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	fbb1 f3f3 	udiv	r3, r1, r3
 800460c:	3301      	adds	r3, #1
 800460e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004612:	e051      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004614:	2304      	movs	r3, #4
 8004616:	e04f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d111      	bne.n	8004644 <HAL_I2C_Init+0x168>
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	1e58      	subs	r0, r3, #1
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6859      	ldr	r1, [r3, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	440b      	add	r3, r1
 800462e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004632:	3301      	adds	r3, #1
 8004634:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004638:	2b00      	cmp	r3, #0
 800463a:	bf0c      	ite	eq
 800463c:	2301      	moveq	r3, #1
 800463e:	2300      	movne	r3, #0
 8004640:	b2db      	uxtb	r3, r3
 8004642:	e012      	b.n	800466a <HAL_I2C_Init+0x18e>
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	1e58      	subs	r0, r3, #1
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6859      	ldr	r1, [r3, #4]
 800464c:	460b      	mov	r3, r1
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	0099      	lsls	r1, r3, #2
 8004654:	440b      	add	r3, r1
 8004656:	fbb0 f3f3 	udiv	r3, r0, r3
 800465a:	3301      	adds	r3, #1
 800465c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004660:	2b00      	cmp	r3, #0
 8004662:	bf0c      	ite	eq
 8004664:	2301      	moveq	r3, #1
 8004666:	2300      	movne	r3, #0
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d001      	beq.n	8004672 <HAL_I2C_Init+0x196>
 800466e:	2301      	movs	r3, #1
 8004670:	e022      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10e      	bne.n	8004698 <HAL_I2C_Init+0x1bc>
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	1e58      	subs	r0, r3, #1
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6859      	ldr	r1, [r3, #4]
 8004682:	460b      	mov	r3, r1
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	440b      	add	r3, r1
 8004688:	fbb0 f3f3 	udiv	r3, r0, r3
 800468c:	3301      	adds	r3, #1
 800468e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004692:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004696:	e00f      	b.n	80046b8 <HAL_I2C_Init+0x1dc>
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	1e58      	subs	r0, r3, #1
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6859      	ldr	r1, [r3, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	0099      	lsls	r1, r3, #2
 80046a8:	440b      	add	r3, r1
 80046aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ae:	3301      	adds	r3, #1
 80046b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046b4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046b8:	6879      	ldr	r1, [r7, #4]
 80046ba:	6809      	ldr	r1, [r1, #0]
 80046bc:	4313      	orrs	r3, r2
 80046be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69da      	ldr	r2, [r3, #28]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a1b      	ldr	r3, [r3, #32]
 80046d2:	431a      	orrs	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	430a      	orrs	r2, r1
 80046da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	689b      	ldr	r3, [r3, #8]
 80046e2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046e6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046ea:	687a      	ldr	r2, [r7, #4]
 80046ec:	6911      	ldr	r1, [r2, #16]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	68d2      	ldr	r2, [r2, #12]
 80046f2:	4311      	orrs	r1, r2
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	6812      	ldr	r2, [r2, #0]
 80046f8:	430b      	orrs	r3, r1
 80046fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	695a      	ldr	r2, [r3, #20]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	699b      	ldr	r3, [r3, #24]
 800470e:	431a      	orrs	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	430a      	orrs	r2, r1
 8004716:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2220      	movs	r2, #32
 8004732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2200      	movs	r2, #0
 800473a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004744:	2300      	movs	r3, #0
}
 8004746:	4618      	mov	r0, r3
 8004748:	3710      	adds	r7, #16
 800474a:	46bd      	mov	sp, r7
 800474c:	bd80      	pop	{r7, pc}
 800474e:	bf00      	nop
 8004750:	000186a0 	.word	0x000186a0
 8004754:	001e847f 	.word	0x001e847f
 8004758:	003d08ff 	.word	0x003d08ff
 800475c:	431bde83 	.word	0x431bde83
 8004760:	10624dd3 	.word	0x10624dd3

08004764 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
 800476c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b20      	cmp	r3, #32
 8004778:	d129      	bne.n	80047ce <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2224      	movs	r2, #36	; 0x24
 800477e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681a      	ldr	r2, [r3, #0]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f022 0201 	bic.w	r2, r2, #1
 8004790:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f022 0210 	bic.w	r2, r2, #16
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	683a      	ldr	r2, [r7, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0201 	orr.w	r2, r2, #1
 80047c0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2220      	movs	r2, #32
 80047c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ca:	2300      	movs	r3, #0
 80047cc:	e000      	b.n	80047d0 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80047ce:	2302      	movs	r3, #2
  }
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	370c      	adds	r7, #12
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr

080047dc <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80047dc:	b480      	push	{r7}
 80047de:	b085      	sub	sp, #20
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
 80047e4:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80047e6:	2300      	movs	r3, #0
 80047e8:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b20      	cmp	r3, #32
 80047f4:	d12a      	bne.n	800484c <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2224      	movs	r2, #36	; 0x24
 80047fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f022 0201 	bic.w	r2, r2, #1
 800480c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004814:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8004816:	89fb      	ldrh	r3, [r7, #14]
 8004818:	f023 030f 	bic.w	r3, r3, #15
 800481c:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	b29a      	uxth	r2, r3
 8004822:	89fb      	ldrh	r3, [r7, #14]
 8004824:	4313      	orrs	r3, r2
 8004826:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	89fa      	ldrh	r2, [r7, #14]
 800482e:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0201 	orr.w	r2, r2, #1
 800483e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2220      	movs	r2, #32
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004848:	2300      	movs	r3, #0
 800484a:	e000      	b.n	800484e <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 800484c:	2302      	movs	r3, #2
  }
}
 800484e:	4618      	mov	r0, r3
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004866:	2300      	movs	r3, #0
 8004868:	603b      	str	r3, [r7, #0]
 800486a:	4b20      	ldr	r3, [pc, #128]	; (80048ec <HAL_PWREx_EnableOverDrive+0x90>)
 800486c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800486e:	4a1f      	ldr	r2, [pc, #124]	; (80048ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004874:	6413      	str	r3, [r2, #64]	; 0x40
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_PWREx_EnableOverDrive+0x90>)
 8004878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800487a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8004884:	2201      	movs	r2, #1
 8004886:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004888:	f7fd face 	bl	8001e28 <HAL_GetTick>
 800488c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800488e:	e009      	b.n	80048a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004890:	f7fd faca 	bl	8001e28 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800489e:	d901      	bls.n	80048a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e01f      	b.n	80048e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80048a4:	4b13      	ldr	r3, [pc, #76]	; (80048f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b0:	d1ee      	bne.n	8004890 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80048b2:	4b11      	ldr	r3, [pc, #68]	; (80048f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80048b8:	f7fd fab6 	bl	8001e28 <HAL_GetTick>
 80048bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048be:	e009      	b.n	80048d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80048c0:	f7fd fab2 	bl	8001e28 <HAL_GetTick>
 80048c4:	4602      	mov	r2, r0
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	1ad3      	subs	r3, r2, r3
 80048ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80048ce:	d901      	bls.n	80048d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80048d0:	2303      	movs	r3, #3
 80048d2:	e007      	b.n	80048e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80048d4:	4b07      	ldr	r3, [pc, #28]	; (80048f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80048e0:	d1ee      	bne.n	80048c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40023800 	.word	0x40023800
 80048f0:	420e0040 	.word	0x420e0040
 80048f4:	40007000 	.word	0x40007000
 80048f8:	420e0044 	.word	0x420e0044

080048fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b086      	sub	sp, #24
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e264      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d075      	beq.n	8004a06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800491a:	4ba3      	ldr	r3, [pc, #652]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800491c:	689b      	ldr	r3, [r3, #8]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b04      	cmp	r3, #4
 8004924:	d00c      	beq.n	8004940 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004926:	4ba0      	ldr	r3, [pc, #640]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800492e:	2b08      	cmp	r3, #8
 8004930:	d112      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004932:	4b9d      	ldr	r3, [pc, #628]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800493e:	d10b      	bne.n	8004958 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004940:	4b99      	ldr	r3, [pc, #612]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d05b      	beq.n	8004a04 <HAL_RCC_OscConfig+0x108>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	685b      	ldr	r3, [r3, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d157      	bne.n	8004a04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	e23f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004960:	d106      	bne.n	8004970 <HAL_RCC_OscConfig+0x74>
 8004962:	4b91      	ldr	r3, [pc, #580]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a90      	ldr	r2, [pc, #576]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800496c:	6013      	str	r3, [r2, #0]
 800496e:	e01d      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004978:	d10c      	bne.n	8004994 <HAL_RCC_OscConfig+0x98>
 800497a:	4b8b      	ldr	r3, [pc, #556]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	4a8a      	ldr	r2, [pc, #552]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004984:	6013      	str	r3, [r2, #0]
 8004986:	4b88      	ldr	r3, [pc, #544]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a87      	ldr	r2, [pc, #540]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	e00b      	b.n	80049ac <HAL_RCC_OscConfig+0xb0>
 8004994:	4b84      	ldr	r3, [pc, #528]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a83      	ldr	r2, [pc, #524]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 800499a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800499e:	6013      	str	r3, [r2, #0]
 80049a0:	4b81      	ldr	r3, [pc, #516]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a80      	ldr	r2, [pc, #512]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d013      	beq.n	80049dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049b4:	f7fd fa38 	bl	8001e28 <HAL_GetTick>
 80049b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ba:	e008      	b.n	80049ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049bc:	f7fd fa34 	bl	8001e28 <HAL_GetTick>
 80049c0:	4602      	mov	r2, r0
 80049c2:	693b      	ldr	r3, [r7, #16]
 80049c4:	1ad3      	subs	r3, r2, r3
 80049c6:	2b64      	cmp	r3, #100	; 0x64
 80049c8:	d901      	bls.n	80049ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80049ca:	2303      	movs	r3, #3
 80049cc:	e204      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ce:	4b76      	ldr	r3, [pc, #472]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f0      	beq.n	80049bc <HAL_RCC_OscConfig+0xc0>
 80049da:	e014      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049dc:	f7fd fa24 	bl	8001e28 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049e2:	e008      	b.n	80049f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e4:	f7fd fa20 	bl	8001e28 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	2b64      	cmp	r3, #100	; 0x64
 80049f0:	d901      	bls.n	80049f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049f2:	2303      	movs	r3, #3
 80049f4:	e1f0      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049f6:	4b6c      	ldr	r3, [pc, #432]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d1f0      	bne.n	80049e4 <HAL_RCC_OscConfig+0xe8>
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d063      	beq.n	8004ada <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a12:	4b65      	ldr	r3, [pc, #404]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 030c 	and.w	r3, r3, #12
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00b      	beq.n	8004a36 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a1e:	4b62      	ldr	r3, [pc, #392]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a20:	689b      	ldr	r3, [r3, #8]
 8004a22:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004a26:	2b08      	cmp	r3, #8
 8004a28:	d11c      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a2a:	4b5f      	ldr	r3, [pc, #380]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d116      	bne.n	8004a64 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a36:	4b5c      	ldr	r3, [pc, #368]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d005      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d001      	beq.n	8004a4e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e1c4      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4e:	4b56      	ldr	r3, [pc, #344]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	00db      	lsls	r3, r3, #3
 8004a5c:	4952      	ldr	r1, [pc, #328]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a62:	e03a      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	68db      	ldr	r3, [r3, #12]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d020      	beq.n	8004aae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a6c:	4b4f      	ldr	r3, [pc, #316]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004a6e:	2201      	movs	r2, #1
 8004a70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a72:	f7fd f9d9 	bl	8001e28 <HAL_GetTick>
 8004a76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a78:	e008      	b.n	8004a8c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7a:	f7fd f9d5 	bl	8001e28 <HAL_GetTick>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	1ad3      	subs	r3, r2, r3
 8004a84:	2b02      	cmp	r3, #2
 8004a86:	d901      	bls.n	8004a8c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a88:	2303      	movs	r3, #3
 8004a8a:	e1a5      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a8c:	4b46      	ldr	r3, [pc, #280]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f003 0302 	and.w	r3, r3, #2
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d0f0      	beq.n	8004a7a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a98:	4b43      	ldr	r3, [pc, #268]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	00db      	lsls	r3, r3, #3
 8004aa6:	4940      	ldr	r1, [pc, #256]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	600b      	str	r3, [r1, #0]
 8004aac:	e015      	b.n	8004ada <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004aae:	4b3f      	ldr	r3, [pc, #252]	; (8004bac <HAL_RCC_OscConfig+0x2b0>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ab4:	f7fd f9b8 	bl	8001e28 <HAL_GetTick>
 8004ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004aba:	e008      	b.n	8004ace <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004abc:	f7fd f9b4 	bl	8001e28 <HAL_GetTick>
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d901      	bls.n	8004ace <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004aca:	2303      	movs	r3, #3
 8004acc:	e184      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ace:	4b36      	ldr	r3, [pc, #216]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0302 	and.w	r3, r3, #2
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d1f0      	bne.n	8004abc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0308 	and.w	r3, r3, #8
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d030      	beq.n	8004b48 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	695b      	ldr	r3, [r3, #20]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aee:	4b30      	ldr	r3, [pc, #192]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004af0:	2201      	movs	r2, #1
 8004af2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004af4:	f7fd f998 	bl	8001e28 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004afc:	f7fd f994 	bl	8001e28 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b02      	cmp	r3, #2
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e164      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b0e:	4b26      	ldr	r3, [pc, #152]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d0f0      	beq.n	8004afc <HAL_RCC_OscConfig+0x200>
 8004b1a:	e015      	b.n	8004b48 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b1c:	4b24      	ldr	r3, [pc, #144]	; (8004bb0 <HAL_RCC_OscConfig+0x2b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b22:	f7fd f981 	bl	8001e28 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b2a:	f7fd f97d 	bl	8001e28 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e14d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b3c:	4b1a      	ldr	r3, [pc, #104]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f000 80a0 	beq.w	8004c96 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b56:	2300      	movs	r3, #0
 8004b58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b5a:	4b13      	ldr	r3, [pc, #76]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10f      	bne.n	8004b86 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b66:	2300      	movs	r3, #0
 8004b68:	60bb      	str	r3, [r7, #8]
 8004b6a:	4b0f      	ldr	r3, [pc, #60]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b6e:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b74:	6413      	str	r3, [r2, #64]	; 0x40
 8004b76:	4b0c      	ldr	r3, [pc, #48]	; (8004ba8 <HAL_RCC_OscConfig+0x2ac>)
 8004b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b7e:	60bb      	str	r3, [r7, #8]
 8004b80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b82:	2301      	movs	r3, #1
 8004b84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b86:	4b0b      	ldr	r3, [pc, #44]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d121      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b92:	4b08      	ldr	r3, [pc, #32]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4a07      	ldr	r2, [pc, #28]	; (8004bb4 <HAL_RCC_OscConfig+0x2b8>)
 8004b98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b9e:	f7fd f943 	bl	8001e28 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ba4:	e011      	b.n	8004bca <HAL_RCC_OscConfig+0x2ce>
 8004ba6:	bf00      	nop
 8004ba8:	40023800 	.word	0x40023800
 8004bac:	42470000 	.word	0x42470000
 8004bb0:	42470e80 	.word	0x42470e80
 8004bb4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bb8:	f7fd f936 	bl	8001e28 <HAL_GetTick>
 8004bbc:	4602      	mov	r2, r0
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	1ad3      	subs	r3, r2, r3
 8004bc2:	2b02      	cmp	r3, #2
 8004bc4:	d901      	bls.n	8004bca <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004bc6:	2303      	movs	r3, #3
 8004bc8:	e106      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004bca:	4b85      	ldr	r3, [pc, #532]	; (8004de0 <HAL_RCC_OscConfig+0x4e4>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0f0      	beq.n	8004bb8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	2b01      	cmp	r3, #1
 8004bdc:	d106      	bne.n	8004bec <HAL_RCC_OscConfig+0x2f0>
 8004bde:	4b81      	ldr	r3, [pc, #516]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be2:	4a80      	ldr	r2, [pc, #512]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004be4:	f043 0301 	orr.w	r3, r3, #1
 8004be8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bea:	e01c      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d10c      	bne.n	8004c0e <HAL_RCC_OscConfig+0x312>
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf8:	4a7a      	ldr	r2, [pc, #488]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004bfa:	f043 0304 	orr.w	r3, r3, #4
 8004bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8004c00:	4b78      	ldr	r3, [pc, #480]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c04:	4a77      	ldr	r2, [pc, #476]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c06:	f043 0301 	orr.w	r3, r3, #1
 8004c0a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c0c:	e00b      	b.n	8004c26 <HAL_RCC_OscConfig+0x32a>
 8004c0e:	4b75      	ldr	r3, [pc, #468]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c12:	4a74      	ldr	r2, [pc, #464]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c14:	f023 0301 	bic.w	r3, r3, #1
 8004c18:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1a:	4b72      	ldr	r3, [pc, #456]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c1e:	4a71      	ldr	r2, [pc, #452]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c20:	f023 0304 	bic.w	r3, r3, #4
 8004c24:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d015      	beq.n	8004c5a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c2e:	f7fd f8fb 	bl	8001e28 <HAL_GetTick>
 8004c32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c34:	e00a      	b.n	8004c4c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c36:	f7fd f8f7 	bl	8001e28 <HAL_GetTick>
 8004c3a:	4602      	mov	r2, r0
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	1ad3      	subs	r3, r2, r3
 8004c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d901      	bls.n	8004c4c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004c48:	2303      	movs	r3, #3
 8004c4a:	e0c5      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c4c:	4b65      	ldr	r3, [pc, #404]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d0ee      	beq.n	8004c36 <HAL_RCC_OscConfig+0x33a>
 8004c58:	e014      	b.n	8004c84 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd f8e5 	bl	8001e28 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c60:	e00a      	b.n	8004c78 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c62:	f7fd f8e1 	bl	8001e28 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d901      	bls.n	8004c78 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004c74:	2303      	movs	r3, #3
 8004c76:	e0af      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c78:	4b5a      	ldr	r3, [pc, #360]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c7c:	f003 0302 	and.w	r3, r3, #2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1ee      	bne.n	8004c62 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c84:	7dfb      	ldrb	r3, [r7, #23]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	d105      	bne.n	8004c96 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c8a:	4b56      	ldr	r3, [pc, #344]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	4a55      	ldr	r2, [pc, #340]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004c90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c94:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	699b      	ldr	r3, [r3, #24]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f000 809b 	beq.w	8004dd6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ca0:	4b50      	ldr	r3, [pc, #320]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f003 030c 	and.w	r3, r3, #12
 8004ca8:	2b08      	cmp	r3, #8
 8004caa:	d05c      	beq.n	8004d66 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	699b      	ldr	r3, [r3, #24]
 8004cb0:	2b02      	cmp	r3, #2
 8004cb2:	d141      	bne.n	8004d38 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cb4:	4b4c      	ldr	r3, [pc, #304]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cba:	f7fd f8b5 	bl	8001e28 <HAL_GetTick>
 8004cbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cc0:	e008      	b.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc2:	f7fd f8b1 	bl	8001e28 <HAL_GetTick>
 8004cc6:	4602      	mov	r2, r0
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	2b02      	cmp	r3, #2
 8004cce:	d901      	bls.n	8004cd4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004cd0:	2303      	movs	r3, #3
 8004cd2:	e081      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cd4:	4b43      	ldr	r3, [pc, #268]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d1f0      	bne.n	8004cc2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	69da      	ldr	r2, [r3, #28]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6a1b      	ldr	r3, [r3, #32]
 8004ce8:	431a      	orrs	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cee:	019b      	lsls	r3, r3, #6
 8004cf0:	431a      	orrs	r2, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf6:	085b      	lsrs	r3, r3, #1
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	041b      	lsls	r3, r3, #16
 8004cfc:	431a      	orrs	r2, r3
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	4937      	ldr	r1, [pc, #220]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d0a:	4b37      	ldr	r3, [pc, #220]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d10:	f7fd f88a 	bl	8001e28 <HAL_GetTick>
 8004d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d16:	e008      	b.n	8004d2a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d18:	f7fd f886 	bl	8001e28 <HAL_GetTick>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	693b      	ldr	r3, [r7, #16]
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	2b02      	cmp	r3, #2
 8004d24:	d901      	bls.n	8004d2a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004d26:	2303      	movs	r3, #3
 8004d28:	e056      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d2a:	4b2e      	ldr	r3, [pc, #184]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d0f0      	beq.n	8004d18 <HAL_RCC_OscConfig+0x41c>
 8004d36:	e04e      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d38:	4b2b      	ldr	r3, [pc, #172]	; (8004de8 <HAL_RCC_OscConfig+0x4ec>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d3e:	f7fd f873 	bl	8001e28 <HAL_GetTick>
 8004d42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d44:	e008      	b.n	8004d58 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d46:	f7fd f86f 	bl	8001e28 <HAL_GetTick>
 8004d4a:	4602      	mov	r2, r0
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	1ad3      	subs	r3, r2, r3
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d901      	bls.n	8004d58 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004d54:	2303      	movs	r3, #3
 8004d56:	e03f      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d58:	4b22      	ldr	r3, [pc, #136]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d1f0      	bne.n	8004d46 <HAL_RCC_OscConfig+0x44a>
 8004d64:	e037      	b.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	699b      	ldr	r3, [r3, #24]
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d101      	bne.n	8004d72 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e032      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d72:	4b1c      	ldr	r3, [pc, #112]	; (8004de4 <HAL_RCC_OscConfig+0x4e8>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	699b      	ldr	r3, [r3, #24]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d028      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d8a:	429a      	cmp	r2, r3
 8004d8c:	d121      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d11a      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004da8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004daa:	4293      	cmp	r3, r2
 8004dac:	d111      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004db8:	085b      	lsrs	r3, r3, #1
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d107      	bne.n	8004dd2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d001      	beq.n	8004dd6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	e000      	b.n	8004dd8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004dd6:	2300      	movs	r3, #0
}
 8004dd8:	4618      	mov	r0, r3
 8004dda:	3718      	adds	r7, #24
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	40007000 	.word	0x40007000
 8004de4:	40023800 	.word	0x40023800
 8004de8:	42470060 	.word	0x42470060

08004dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b084      	sub	sp, #16
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e0cc      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e00:	4b68      	ldr	r3, [pc, #416]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	683a      	ldr	r2, [r7, #0]
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d90c      	bls.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e0e:	4b65      	ldr	r3, [pc, #404]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e10:	683a      	ldr	r2, [r7, #0]
 8004e12:	b2d2      	uxtb	r2, r2
 8004e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e16:	4b63      	ldr	r3, [pc, #396]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d001      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	e0b8      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f003 0302 	and.w	r3, r3, #2
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d020      	beq.n	8004e76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e40:	4b59      	ldr	r3, [pc, #356]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	4a58      	ldr	r2, [pc, #352]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e4a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 0308 	and.w	r3, r3, #8
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e58:	4b53      	ldr	r3, [pc, #332]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	4a52      	ldr	r2, [pc, #328]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e64:	4b50      	ldr	r3, [pc, #320]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e66:	689b      	ldr	r3, [r3, #8]
 8004e68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	494d      	ldr	r1, [pc, #308]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0301 	and.w	r3, r3, #1
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d044      	beq.n	8004f0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d107      	bne.n	8004e9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e8a:	4b47      	ldr	r3, [pc, #284]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d119      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e07f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d003      	beq.n	8004eaa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ea6:	2b03      	cmp	r3, #3
 8004ea8:	d107      	bne.n	8004eba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004eaa:	4b3f      	ldr	r3, [pc, #252]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d109      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e06f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004eba:	4b3b      	ldr	r3, [pc, #236]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ec6:	2301      	movs	r3, #1
 8004ec8:	e067      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004eca:	4b37      	ldr	r3, [pc, #220]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f023 0203 	bic.w	r2, r3, #3
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	4934      	ldr	r1, [pc, #208]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004edc:	f7fc ffa4 	bl	8001e28 <HAL_GetTick>
 8004ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ee2:	e00a      	b.n	8004efa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ee4:	f7fc ffa0 	bl	8001e28 <HAL_GetTick>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	1ad3      	subs	r3, r2, r3
 8004eee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d901      	bls.n	8004efa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ef6:	2303      	movs	r3, #3
 8004ef8:	e04f      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004efa:	4b2b      	ldr	r3, [pc, #172]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f003 020c 	and.w	r2, r3, #12
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d1eb      	bne.n	8004ee4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004f0c:	4b25      	ldr	r3, [pc, #148]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	683a      	ldr	r2, [r7, #0]
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d20c      	bcs.n	8004f34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f1a:	4b22      	ldr	r3, [pc, #136]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	b2d2      	uxtb	r2, r2
 8004f20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f22:	4b20      	ldr	r3, [pc, #128]	; (8004fa4 <HAL_RCC_ClockConfig+0x1b8>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d001      	beq.n	8004f34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004f30:	2301      	movs	r3, #1
 8004f32:	e032      	b.n	8004f9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0304 	and.w	r3, r3, #4
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d008      	beq.n	8004f52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f40:	4b19      	ldr	r3, [pc, #100]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f42:	689b      	ldr	r3, [r3, #8]
 8004f44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	4916      	ldr	r1, [pc, #88]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f5e:	4b12      	ldr	r3, [pc, #72]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	490e      	ldr	r1, [pc, #56]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f72:	f000 f821 	bl	8004fb8 <HAL_RCC_GetSysClockFreq>
 8004f76:	4602      	mov	r2, r0
 8004f78:	4b0b      	ldr	r3, [pc, #44]	; (8004fa8 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	091b      	lsrs	r3, r3, #4
 8004f7e:	f003 030f 	and.w	r3, r3, #15
 8004f82:	490a      	ldr	r1, [pc, #40]	; (8004fac <HAL_RCC_ClockConfig+0x1c0>)
 8004f84:	5ccb      	ldrb	r3, [r1, r3]
 8004f86:	fa22 f303 	lsr.w	r3, r2, r3
 8004f8a:	4a09      	ldr	r2, [pc, #36]	; (8004fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8004f8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f8e:	4b09      	ldr	r3, [pc, #36]	; (8004fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fc ff04 	bl	8001da0 <HAL_InitTick>

  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3710      	adds	r7, #16
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	bf00      	nop
 8004fa4:	40023c00 	.word	0x40023c00
 8004fa8:	40023800 	.word	0x40023800
 8004fac:	08017830 	.word	0x08017830
 8004fb0:	20000000 	.word	0x20000000
 8004fb4:	20000004 	.word	0x20000004

08004fb8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004fb8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004fbc:	b084      	sub	sp, #16
 8004fbe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	607b      	str	r3, [r7, #4]
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	2300      	movs	r3, #0
 8004fca:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004fcc:	2300      	movs	r3, #0
 8004fce:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fd0:	4b67      	ldr	r3, [pc, #412]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	f003 030c 	and.w	r3, r3, #12
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d00d      	beq.n	8004ff8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	f200 80bd 	bhi.w	800515c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d002      	beq.n	8004fec <HAL_RCC_GetSysClockFreq+0x34>
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d003      	beq.n	8004ff2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fea:	e0b7      	b.n	800515c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fec:	4b61      	ldr	r3, [pc, #388]	; (8005174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004fee:	60bb      	str	r3, [r7, #8]
       break;
 8004ff0:	e0b7      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ff2:	4b61      	ldr	r3, [pc, #388]	; (8005178 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004ff4:	60bb      	str	r3, [r7, #8]
      break;
 8004ff6:	e0b4      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ff8:	4b5d      	ldr	r3, [pc, #372]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005000:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005002:	4b5b      	ldr	r3, [pc, #364]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005004:	685b      	ldr	r3, [r3, #4]
 8005006:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d04d      	beq.n	80050aa <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800500e:	4b58      	ldr	r3, [pc, #352]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005010:	685b      	ldr	r3, [r3, #4]
 8005012:	099b      	lsrs	r3, r3, #6
 8005014:	461a      	mov	r2, r3
 8005016:	f04f 0300 	mov.w	r3, #0
 800501a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800501e:	f04f 0100 	mov.w	r1, #0
 8005022:	ea02 0800 	and.w	r8, r2, r0
 8005026:	ea03 0901 	and.w	r9, r3, r1
 800502a:	4640      	mov	r0, r8
 800502c:	4649      	mov	r1, r9
 800502e:	f04f 0200 	mov.w	r2, #0
 8005032:	f04f 0300 	mov.w	r3, #0
 8005036:	014b      	lsls	r3, r1, #5
 8005038:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800503c:	0142      	lsls	r2, r0, #5
 800503e:	4610      	mov	r0, r2
 8005040:	4619      	mov	r1, r3
 8005042:	ebb0 0008 	subs.w	r0, r0, r8
 8005046:	eb61 0109 	sbc.w	r1, r1, r9
 800504a:	f04f 0200 	mov.w	r2, #0
 800504e:	f04f 0300 	mov.w	r3, #0
 8005052:	018b      	lsls	r3, r1, #6
 8005054:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005058:	0182      	lsls	r2, r0, #6
 800505a:	1a12      	subs	r2, r2, r0
 800505c:	eb63 0301 	sbc.w	r3, r3, r1
 8005060:	f04f 0000 	mov.w	r0, #0
 8005064:	f04f 0100 	mov.w	r1, #0
 8005068:	00d9      	lsls	r1, r3, #3
 800506a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800506e:	00d0      	lsls	r0, r2, #3
 8005070:	4602      	mov	r2, r0
 8005072:	460b      	mov	r3, r1
 8005074:	eb12 0208 	adds.w	r2, r2, r8
 8005078:	eb43 0309 	adc.w	r3, r3, r9
 800507c:	f04f 0000 	mov.w	r0, #0
 8005080:	f04f 0100 	mov.w	r1, #0
 8005084:	0259      	lsls	r1, r3, #9
 8005086:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800508a:	0250      	lsls	r0, r2, #9
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4610      	mov	r0, r2
 8005092:	4619      	mov	r1, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	461a      	mov	r2, r3
 8005098:	f04f 0300 	mov.w	r3, #0
 800509c:	f7fb f8f8 	bl	8000290 <__aeabi_uldivmod>
 80050a0:	4602      	mov	r2, r0
 80050a2:	460b      	mov	r3, r1
 80050a4:	4613      	mov	r3, r2
 80050a6:	60fb      	str	r3, [r7, #12]
 80050a8:	e04a      	b.n	8005140 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050aa:	4b31      	ldr	r3, [pc, #196]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	099b      	lsrs	r3, r3, #6
 80050b0:	461a      	mov	r2, r3
 80050b2:	f04f 0300 	mov.w	r3, #0
 80050b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80050ba:	f04f 0100 	mov.w	r1, #0
 80050be:	ea02 0400 	and.w	r4, r2, r0
 80050c2:	ea03 0501 	and.w	r5, r3, r1
 80050c6:	4620      	mov	r0, r4
 80050c8:	4629      	mov	r1, r5
 80050ca:	f04f 0200 	mov.w	r2, #0
 80050ce:	f04f 0300 	mov.w	r3, #0
 80050d2:	014b      	lsls	r3, r1, #5
 80050d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80050d8:	0142      	lsls	r2, r0, #5
 80050da:	4610      	mov	r0, r2
 80050dc:	4619      	mov	r1, r3
 80050de:	1b00      	subs	r0, r0, r4
 80050e0:	eb61 0105 	sbc.w	r1, r1, r5
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	018b      	lsls	r3, r1, #6
 80050ee:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80050f2:	0182      	lsls	r2, r0, #6
 80050f4:	1a12      	subs	r2, r2, r0
 80050f6:	eb63 0301 	sbc.w	r3, r3, r1
 80050fa:	f04f 0000 	mov.w	r0, #0
 80050fe:	f04f 0100 	mov.w	r1, #0
 8005102:	00d9      	lsls	r1, r3, #3
 8005104:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005108:	00d0      	lsls	r0, r2, #3
 800510a:	4602      	mov	r2, r0
 800510c:	460b      	mov	r3, r1
 800510e:	1912      	adds	r2, r2, r4
 8005110:	eb45 0303 	adc.w	r3, r5, r3
 8005114:	f04f 0000 	mov.w	r0, #0
 8005118:	f04f 0100 	mov.w	r1, #0
 800511c:	0299      	lsls	r1, r3, #10
 800511e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005122:	0290      	lsls	r0, r2, #10
 8005124:	4602      	mov	r2, r0
 8005126:	460b      	mov	r3, r1
 8005128:	4610      	mov	r0, r2
 800512a:	4619      	mov	r1, r3
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	461a      	mov	r2, r3
 8005130:	f04f 0300 	mov.w	r3, #0
 8005134:	f7fb f8ac 	bl	8000290 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4613      	mov	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005140:	4b0b      	ldr	r3, [pc, #44]	; (8005170 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	0c1b      	lsrs	r3, r3, #16
 8005146:	f003 0303 	and.w	r3, r3, #3
 800514a:	3301      	adds	r3, #1
 800514c:	005b      	lsls	r3, r3, #1
 800514e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	fbb2 f3f3 	udiv	r3, r2, r3
 8005158:	60bb      	str	r3, [r7, #8]
      break;
 800515a:	e002      	b.n	8005162 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800515c:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800515e:	60bb      	str	r3, [r7, #8]
      break;
 8005160:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005162:	68bb      	ldr	r3, [r7, #8]
}
 8005164:	4618      	mov	r0, r3
 8005166:	3710      	adds	r7, #16
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800
 8005174:	00f42400 	.word	0x00f42400
 8005178:	007a1200 	.word	0x007a1200

0800517c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800517c:	b480      	push	{r7}
 800517e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005180:	4b03      	ldr	r3, [pc, #12]	; (8005190 <HAL_RCC_GetHCLKFreq+0x14>)
 8005182:	681b      	ldr	r3, [r3, #0]
}
 8005184:	4618      	mov	r0, r3
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	20000000 	.word	0x20000000

08005194 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005198:	f7ff fff0 	bl	800517c <HAL_RCC_GetHCLKFreq>
 800519c:	4602      	mov	r2, r0
 800519e:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	0a9b      	lsrs	r3, r3, #10
 80051a4:	f003 0307 	and.w	r3, r3, #7
 80051a8:	4903      	ldr	r1, [pc, #12]	; (80051b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051aa:	5ccb      	ldrb	r3, [r1, r3]
 80051ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40023800 	.word	0x40023800
 80051b8:	08017840 	.word	0x08017840

080051bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051c0:	f7ff ffdc 	bl	800517c <HAL_RCC_GetHCLKFreq>
 80051c4:	4602      	mov	r2, r0
 80051c6:	4b05      	ldr	r3, [pc, #20]	; (80051dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	0b5b      	lsrs	r3, r3, #13
 80051cc:	f003 0307 	and.w	r3, r3, #7
 80051d0:	4903      	ldr	r1, [pc, #12]	; (80051e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051d2:	5ccb      	ldrb	r3, [r1, r3]
 80051d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d8:	4618      	mov	r0, r3
 80051da:	bd80      	pop	{r7, pc}
 80051dc:	40023800 	.word	0x40023800
 80051e0:	08017840 	.word	0x08017840

080051e4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b082      	sub	sp, #8
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e022      	b.n	800523c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2200      	movs	r2, #0
 8005206:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f7fb fde5 	bl	8000dd8 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2203      	movs	r2, #3
 8005212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 f814 	bl	8005244 <HAL_SD_InitCard>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e00a      	b.n	800523c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2200      	movs	r2, #0
 8005230:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3708      	adds	r7, #8
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}

08005244 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005244:	b5b0      	push	{r4, r5, r7, lr}
 8005246:	b08e      	sub	sp, #56	; 0x38
 8005248:	af04      	add	r7, sp, #16
 800524a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800524c:	2300      	movs	r3, #0
 800524e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005250:	2300      	movs	r3, #0
 8005252:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005254:	2300      	movs	r3, #0
 8005256:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005258:	2300      	movs	r3, #0
 800525a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800525c:	2300      	movs	r3, #0
 800525e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005260:	2376      	movs	r3, #118	; 0x76
 8005262:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681d      	ldr	r5, [r3, #0]
 8005268:	466c      	mov	r4, sp
 800526a:	f107 0314 	add.w	r3, r7, #20
 800526e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005272:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005276:	f107 0308 	add.w	r3, r7, #8
 800527a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800527c:	4628      	mov	r0, r5
 800527e:	f003 f8b7 	bl	80083f0 <SDIO_Init>
 8005282:	4603      	mov	r3, r0
 8005284:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800528c:	2b00      	cmp	r3, #0
 800528e:	d001      	beq.n	8005294 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	e04c      	b.n	800532e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <HAL_SD_InitCard+0xf4>)
 8005296:	2200      	movs	r2, #0
 8005298:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4618      	mov	r0, r3
 80052a0:	f003 f8ef 	bl	8008482 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80052a4:	4b24      	ldr	r3, [pc, #144]	; (8005338 <HAL_SD_InitCard+0xf4>)
 80052a6:	2201      	movs	r2, #1
 80052a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 f804 	bl	80062b8 <SD_PowerON>
 80052b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	431a      	orrs	r2, r3
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e02e      	b.n	800532e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 ff25 	bl	8006120 <SD_InitCard>
 80052d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80052d8:	6a3b      	ldr	r3, [r7, #32]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00b      	beq.n	80052f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2201      	movs	r2, #1
 80052e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01b      	b.n	800532e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80052fe:	4618      	mov	r0, r3
 8005300:	f003 f952 	bl	80085a8 <SDMMC_CmdBlockLength>
 8005304:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005306:	6a3b      	ldr	r3, [r7, #32]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d00f      	beq.n	800532c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a0a      	ldr	r2, [pc, #40]	; (800533c <HAL_SD_InitCard+0xf8>)
 8005312:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	431a      	orrs	r2, r3
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e000      	b.n	800532e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3728      	adds	r7, #40	; 0x28
 8005332:	46bd      	mov	sp, r7
 8005334:	bdb0      	pop	{r4, r5, r7, pc}
 8005336:	bf00      	nop
 8005338:	422580a0 	.word	0x422580a0
 800533c:	004005ff 	.word	0x004005ff

08005340 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b08c      	sub	sp, #48	; 0x30
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
 800534c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d107      	bne.n	8005368 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e0c0      	b.n	80054ea <HAL_SD_ReadBlocks_DMA+0x1aa>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800536e:	b2db      	uxtb	r3, r3
 8005370:	2b01      	cmp	r3, #1
 8005372:	f040 80b9 	bne.w	80054e8 <HAL_SD_ReadBlocks_DMA+0x1a8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800537c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	441a      	add	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005386:	429a      	cmp	r2, r3
 8005388:	d907      	bls.n	800539a <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e0a7      	b.n	80054ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2203      	movs	r2, #3
 800539e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2200      	movs	r2, #0
 80053a8:	62da      	str	r2, [r3, #44]	; 0x2c

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND | SDIO_IT_STBITERR));
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b0:	68fa      	ldr	r2, [r7, #12]
 80053b2:	6812      	ldr	r2, [r2, #0]
 80053b4:	f443 734a 	orr.w	r3, r3, #808	; 0x328
 80053b8:	f043 0302 	orr.w	r3, r3, #2
 80053bc:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c2:	4a4c      	ldr	r2, [pc, #304]	; (80054f4 <HAL_SD_ReadBlocks_DMA+0x1b4>)
 80053c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ca:	4a4b      	ldr	r2, [pc, #300]	; (80054f8 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 80053cc:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053d2:	2200      	movs	r2, #0
 80053d4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053da:	2200      	movs	r2, #0
 80053dc:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	689a      	ldr	r2, [r3, #8]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3380      	adds	r3, #128	; 0x80
 8005404:	4619      	mov	r1, r3
 8005406:	68ba      	ldr	r2, [r7, #8]
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	025b      	lsls	r3, r3, #9
 800540c:	089b      	lsrs	r3, r3, #2
 800540e:	f7fd f9dd 	bl	80027cc <HAL_DMA_Start_IT>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d017      	beq.n	8005448 <HAL_SD_ReadBlocks_DMA+0x108>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_RXOVERR | SDIO_IT_DATAEND));
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8005426:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4a33      	ldr	r2, [pc, #204]	; (80054fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800542e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005434:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005444:	2301      	movs	r3, #1
 8005446:	e050      	b.n	80054ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8005448:	4b2d      	ldr	r3, [pc, #180]	; (8005500 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800544a:	2201      	movs	r2, #1
 800544c:	601a      	str	r2, [r3, #0]

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005452:	2b01      	cmp	r3, #1
 8005454:	d002      	beq.n	800545c <HAL_SD_ReadBlocks_DMA+0x11c>
      {
        add *= 512U;
 8005456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005458:	025b      	lsls	r3, r3, #9
 800545a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800545c:	f04f 33ff 	mov.w	r3, #4294967295
 8005460:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	025b      	lsls	r3, r3, #9
 8005466:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005468:	2390      	movs	r3, #144	; 0x90
 800546a:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 800546c:	2302      	movs	r3, #2
 800546e:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005470:	2300      	movs	r3, #0
 8005472:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 8005474:	2301      	movs	r3, #1
 8005476:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f107 0210 	add.w	r2, r7, #16
 8005480:	4611      	mov	r1, r2
 8005482:	4618      	mov	r0, r3
 8005484:	f003 f864 	bl	8008550 <SDIO_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	2b01      	cmp	r3, #1
 800548c:	d90a      	bls.n	80054a4 <HAL_SD_ReadBlocks_DMA+0x164>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	2282      	movs	r2, #130	; 0x82
 8005492:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800549a:	4618      	mov	r0, r3
 800549c:	f003 f8c8 	bl	8008630 <SDMMC_CmdReadMultiBlock>
 80054a0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80054a2:	e009      	b.n	80054b8 <HAL_SD_ReadBlocks_DMA+0x178>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2281      	movs	r2, #129	; 0x81
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b0:	4618      	mov	r0, r3
 80054b2:	f003 f89b 	bl	80085ec <SDMMC_CmdReadSingleBlock>
 80054b6:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <HAL_SD_ReadBlocks_DMA+0x1a4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a0e      	ldr	r2, [pc, #56]	; (80054fc <HAL_SD_ReadBlocks_DMA+0x1bc>)
 80054c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	431a      	orrs	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80054e0:	2301      	movs	r3, #1
 80054e2:	e002      	b.n	80054ea <HAL_SD_ReadBlocks_DMA+0x1aa>
      }

      return HAL_OK;
 80054e4:	2300      	movs	r3, #0
 80054e6:	e000      	b.n	80054ea <HAL_SD_ReadBlocks_DMA+0x1aa>
    }
  }
  else
  {
    return HAL_BUSY;
 80054e8:	2302      	movs	r3, #2
  }
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3730      	adds	r7, #48	; 0x30
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
 80054f2:	bf00      	nop
 80054f4:	08005f2f 	.word	0x08005f2f
 80054f8:	08005fa1 	.word	0x08005fa1
 80054fc:	004005ff 	.word	0x004005ff
 8005500:	4225858c 	.word	0x4225858c

08005504 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b08c      	sub	sp, #48	; 0x30
 8005508:	af00      	add	r7, sp, #0
 800550a:	60f8      	str	r0, [r7, #12]
 800550c:	60b9      	str	r1, [r7, #8]
 800550e:	607a      	str	r2, [r7, #4]
 8005510:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d107      	bne.n	800552c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005520:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0c5      	b.n	80056b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005532:	b2db      	uxtb	r3, r3
 8005534:	2b01      	cmp	r3, #1
 8005536:	f040 80be 	bne.w	80056b6 <HAL_SD_WriteBlocks_DMA+0x1b2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005540:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	441a      	add	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554a:	429a      	cmp	r2, r3
 800554c:	d907      	bls.n	800555e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005552:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e0ac      	b.n	80056b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2203      	movs	r2, #3
 8005562:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2200      	movs	r2, #0
 800556c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
#if defined(SDIO_STA_STBITERR)
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	6812      	ldr	r2, [r2, #0]
 8005578:	f443 7306 	orr.w	r3, r3, #536	; 0x218
 800557c:	f043 0302 	orr.w	r3, r3, #2
 8005580:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
    __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005586:	4a4e      	ldr	r2, [pc, #312]	; (80056c0 <HAL_SD_WriteBlocks_DMA+0x1bc>)
 8005588:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800558e:	4a4d      	ldr	r2, [pc, #308]	; (80056c4 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8005590:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005596:	2200      	movs	r2, #0
 8005598:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d002      	beq.n	80055a8 <HAL_SD_WriteBlocks_DMA+0xa4>
    {
      add *= 512U;
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	025b      	lsls	r3, r3, #9
 80055a6:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d90a      	bls.n	80055c4 <HAL_SD_WriteBlocks_DMA+0xc0>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22a0      	movs	r2, #160	; 0xa0
 80055b2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055ba:	4618      	mov	r0, r3
 80055bc:	f003 f87c 	bl	80086b8 <SDMMC_CmdWriteMultiBlock>
 80055c0:	62f8      	str	r0, [r7, #44]	; 0x2c
 80055c2:	e009      	b.n	80055d8 <HAL_SD_WriteBlocks_DMA+0xd4>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2290      	movs	r2, #144	; 0x90
 80055c8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80055d0:	4618      	mov	r0, r3
 80055d2:	f003 f84f 	bl	8008674 <SDMMC_CmdWriteSingleBlock>
 80055d6:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80055d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d012      	beq.n	8005604 <HAL_SD_WriteBlocks_DMA+0x100>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a39      	ldr	r2, [pc, #228]	; (80056c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 80055e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	431a      	orrs	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e059      	b.n	80056b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }

    /* Enable SDIO DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8005604:	4b31      	ldr	r3, [pc, #196]	; (80056cc <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560e:	2240      	movs	r2, #64	; 0x40
 8005610:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005622:	689a      	ldr	r2, [r3, #8]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	3380      	adds	r3, #128	; 0x80
 800563a:	461a      	mov	r2, r3
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	025b      	lsls	r3, r3, #9
 8005640:	089b      	lsrs	r3, r3, #2
 8005642:	f7fd f8c3 	bl	80027cc <HAL_DMA_Start_IT>
 8005646:	4603      	mov	r3, r0
 8005648:	2b00      	cmp	r3, #0
 800564a:	d01c      	beq.n	8005686 <HAL_SD_WriteBlocks_DMA+0x182>
    {
#if defined(SDIO_STA_STBITERR)
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR | SDIO_IT_STBITERR));
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005652:	68fa      	ldr	r2, [r7, #12]
 8005654:	6812      	ldr	r2, [r2, #0]
 8005656:	f423 7306 	bic.w	r3, r3, #536	; 0x218
 800565a:	f023 0302 	bic.w	r3, r3, #2
 800565e:	63d3      	str	r3, [r2, #60]	; 0x3c
#else /* SDIO_STA_STBITERR not defined */
      __HAL_SD_DISABLE_IT(hsd, (SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT | SDIO_IT_TXUNDERR));   
#endif /* SDIO_STA_STBITERR */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a18      	ldr	r2, [pc, #96]	; (80056c8 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8005666:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800566c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e018      	b.n	80056b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005686:	f04f 33ff 	mov.w	r3, #4294967295
 800568a:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	025b      	lsls	r3, r3, #9
 8005690:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005692:	2390      	movs	r3, #144	; 0x90
 8005694:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005696:	2300      	movs	r3, #0
 8005698:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 800569a:	2300      	movs	r3, #0
 800569c:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDIO_DPSM_ENABLE;
 800569e:	2301      	movs	r3, #1
 80056a0:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDIO_ConfigData(hsd->Instance, &config);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f107 0210 	add.w	r2, r7, #16
 80056aa:	4611      	mov	r1, r2
 80056ac:	4618      	mov	r0, r3
 80056ae:	f002 ff4f 	bl	8008550 <SDIO_ConfigData>

      return HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	e000      	b.n	80056b8 <HAL_SD_WriteBlocks_DMA+0x1b4>
    }
  }
  else
  {
    return HAL_BUSY;
 80056b6:	2302      	movs	r3, #2
  }
}
 80056b8:	4618      	mov	r0, r3
 80056ba:	3730      	adds	r7, #48	; 0x30
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}
 80056c0:	08005f05 	.word	0x08005f05
 80056c4:	08005fa1 	.word	0x08005fa1
 80056c8:	004005ff 	.word	0x004005ff
 80056cc:	4225858c 	.word	0x4225858c

080056d0 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056dc:	60fb      	str	r3, [r7, #12]

  /* Check for SDIO interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d008      	beq.n	80056fe <HAL_SD_IRQHandler+0x2e>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fffd 	bl	80066f6 <SD_Read_IT>
 80056fc:	e165      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005704:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 808f 	beq.w	800582c <HAL_SD_IRQHandler+0x15c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DATAEND);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005716:	639a      	str	r2, [r3, #56]	; 0x38

#if defined(SDIO_STA_STBITERR)
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	6812      	ldr	r2, [r2, #0]
 8005722:	f423 4343 	bic.w	r3, r3, #49920	; 0xc300
 8005726:	f023 033a 	bic.w	r3, r3, #58	; 0x3a
 800572a:	63d3      	str	r3, [r2, #60]	; 0x3c
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND  | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
                             SDIO_IT_TXUNDERR | SDIO_IT_RXOVERR  | SDIO_IT_TXFIFOHE |\
                             SDIO_IT_RXFIFOHF);
#endif /* SDIO_STA_STBITERR */

    hsd->Instance->DCTRL &= ~(SDIO_DCTRL_DTEN);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f022 0201 	bic.w	r2, r2, #1
 800573a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d039      	beq.n	80057ba <HAL_SD_IRQHandler+0xea>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d104      	bne.n	800575a <HAL_SD_IRQHandler+0x8a>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f003 0320 	and.w	r3, r3, #32
 8005756:	2b00      	cmp	r3, #0
 8005758:	d011      	beq.n	800577e <HAL_SD_IRQHandler+0xae>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4618      	mov	r0, r3
 8005760:	f002 ffcc 	bl	80086fc <SDMMC_CmdStopTransfer>
 8005764:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d008      	beq.n	800577e <HAL_SD_IRQHandler+0xae>
        {
          hsd->ErrorCode |= errorstate;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	431a      	orrs	r2, r3
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 f92f 	bl	80059dc <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f240 523a 	movw	r2, #1338	; 0x53a
 8005786:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b00      	cmp	r3, #0
 800579e:	d104      	bne.n	80057aa <HAL_SD_IRQHandler+0xda>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f003 0302 	and.w	r3, r3, #2
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d003      	beq.n	80057b2 <HAL_SD_IRQHandler+0xe2>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f003 fc32 	bl	8009014 <HAL_SD_RxCpltCallback>
 80057b0:	e10b      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f003 fc24 	bl	8009000 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80057b8:	e107      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	f000 8102 	beq.w	80059ca <HAL_SD_IRQHandler+0x2fa>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	f003 0320 	and.w	r3, r3, #32
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_SD_IRQHandler+0x124>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f002 ff91 	bl	80086fc <SDMMC_CmdStopTransfer>
 80057da:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80057dc:	68bb      	ldr	r3, [r7, #8]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d008      	beq.n	80057f4 <HAL_SD_IRQHandler+0x124>
          hsd->ErrorCode |= errorstate;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f000 f8f4 	bl	80059dc <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	f003 0301 	and.w	r3, r3, #1
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	f040 80e5 	bne.w	80059ca <HAL_SD_IRQHandler+0x2fa>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f003 0302 	and.w	r3, r3, #2
 8005806:	2b00      	cmp	r3, #0
 8005808:	f040 80df 	bne.w	80059ca <HAL_SD_IRQHandler+0x2fa>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f022 0208 	bic.w	r2, r2, #8
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f003 fbeb 	bl	8009000 <HAL_SD_TxCpltCallback>
}
 800582a:	e0ce      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
  else if((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d008      	beq.n	800584c <HAL_SD_IRQHandler+0x17c>
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f003 0308 	and.w	r3, r3, #8
 8005840:	2b00      	cmp	r3, #0
 8005842:	d003      	beq.n	800584c <HAL_SD_IRQHandler+0x17c>
    SD_Write_IT(hsd);
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	f000 ffa7 	bl	8006798 <SD_Write_IT>
 800584a:	e0be      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_RXOVERR | SDIO_FLAG_TXUNDERR | SDIO_FLAG_STBITERR) != RESET)
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005852:	f240 233a 	movw	r3, #570	; 0x23a
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 80b6 	beq.w	80059ca <HAL_SD_IRQHandler+0x2fa>
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL) != RESET)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005864:	f003 0302 	and.w	r3, r3, #2
 8005868:	2b00      	cmp	r3, #0
 800586a:	d005      	beq.n	8005878 <HAL_SD_IRQHandler+0x1a8>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005870:	f043 0202 	orr.w	r2, r3, #2
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT) != RESET)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	f003 0308 	and.w	r3, r3, #8
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <HAL_SD_IRQHandler+0x1c2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588a:	f043 0208 	orr.w	r2, r3, #8
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	f003 0320 	and.w	r3, r3, #32
 800589c:	2b00      	cmp	r3, #0
 800589e:	d005      	beq.n	80058ac <HAL_SD_IRQHandler+0x1dc>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a4:	f043 0220 	orr.w	r2, r3, #32
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR) != RESET)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	f003 0310 	and.w	r3, r3, #16
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d005      	beq.n	80058c6 <HAL_SD_IRQHandler+0x1f6>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	f043 0210 	orr.w	r2, r3, #16
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_STBITERR) != RESET)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d005      	beq.n	80058e0 <HAL_SD_IRQHandler+0x210>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d8:	f043 0208 	orr.w	r2, r3, #8
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS | SDIO_FLAG_STBITERR);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f240 723a 	movw	r2, #1850	; 0x73a
 80058e8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6812      	ldr	r2, [r2, #0]
 80058f4:	f423 734e 	bic.w	r3, r3, #824	; 0x338
 80058f8:	f023 0302 	bic.w	r3, r3, #2
 80058fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4618      	mov	r0, r3
 8005904:	f002 fefa 	bl	80086fc <SDMMC_CmdStopTransfer>
 8005908:	4602      	mov	r2, r0
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800590e:	431a      	orrs	r2, r3
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <HAL_SD_IRQHandler+0x264>
      hsd->State = HAL_SD_STATE_READY;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2201      	movs	r2, #1
 8005922:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	2200      	movs	r2, #0
 800592a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f000 f855 	bl	80059dc <HAL_SD_ErrorCallback>
}
 8005932:	e04a      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800593a:	2b00      	cmp	r3, #0
 800593c:	d045      	beq.n	80059ca <HAL_SD_IRQHandler+0x2fa>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f003 0310 	and.w	r3, r3, #16
 8005944:	2b00      	cmp	r3, #0
 8005946:	d104      	bne.n	8005952 <HAL_SD_IRQHandler+0x282>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 0320 	and.w	r3, r3, #32
 800594e:	2b00      	cmp	r3, #0
 8005950:	d011      	beq.n	8005976 <HAL_SD_IRQHandler+0x2a6>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005956:	4a1f      	ldr	r2, [pc, #124]	; (80059d4 <HAL_SD_IRQHandler+0x304>)
 8005958:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800595e:	4618      	mov	r0, r3
 8005960:	f7fc fffc 	bl	800295c <HAL_DMA_Abort_IT>
 8005964:	4603      	mov	r3, r0
 8005966:	2b00      	cmp	r3, #0
 8005968:	d02f      	beq.n	80059ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMATxAbort(hsd->hdmatx);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800596e:	4618      	mov	r0, r3
 8005970:	f000 fb68 	bl	8006044 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8005974:	e029      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f003 0301 	and.w	r3, r3, #1
 800597c:	2b00      	cmp	r3, #0
 800597e:	d104      	bne.n	800598a <HAL_SD_IRQHandler+0x2ba>
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f003 0302 	and.w	r3, r3, #2
 8005986:	2b00      	cmp	r3, #0
 8005988:	d011      	beq.n	80059ae <HAL_SD_IRQHandler+0x2de>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <HAL_SD_IRQHandler+0x308>)
 8005990:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005996:	4618      	mov	r0, r3
 8005998:	f7fc ffe0 	bl	800295c <HAL_DMA_Abort_IT>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d013      	beq.n	80059ca <HAL_SD_IRQHandler+0x2fa>
          SD_DMARxAbort(hsd->hdmarx);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fb83 	bl	80060b2 <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80059ac:	e00d      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2200      	movs	r2, #0
 80059c0:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f003 fb12 	bl	8008fec <HAL_SD_AbortCallback>
}
 80059c8:	e7ff      	b.n	80059ca <HAL_SD_IRQHandler+0x2fa>
 80059ca:	bf00      	nop
 80059cc:	3710      	adds	r7, #16
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	08006045 	.word	0x08006045
 80059d8:	080060b3 	.word	0x080060b3

080059dc <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80059fe:	0f9b      	lsrs	r3, r3, #30
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a0a:	0e9b      	lsrs	r3, r3, #26
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a1c:	0e1b      	lsrs	r3, r3, #24
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	f003 0303 	and.w	r3, r3, #3
 8005a24:	b2da      	uxtb	r2, r3
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a2e:	0c1b      	lsrs	r3, r3, #16
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	b2da      	uxtb	r2, r3
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a50:	0d1b      	lsrs	r3, r3, #20
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a5c:	0c1b      	lsrs	r3, r3, #16
 8005a5e:	b2db      	uxtb	r3, r3
 8005a60:	f003 030f 	and.w	r3, r3, #15
 8005a64:	b2da      	uxtb	r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a6e:	0bdb      	lsrs	r3, r3, #15
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	f003 0301 	and.w	r3, r3, #1
 8005a76:	b2da      	uxtb	r2, r3
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a80:	0b9b      	lsrs	r3, r3, #14
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	f003 0301 	and.w	r3, r3, #1
 8005a88:	b2da      	uxtb	r2, r3
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005a92:	0b5b      	lsrs	r3, r3, #13
 8005a94:	b2db      	uxtb	r3, r3
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	b2da      	uxtb	r2, r3
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aa4:	0b1b      	lsrs	r3, r3, #12
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	f003 0301 	and.w	r3, r3, #1
 8005aac:	b2da      	uxtb	r2, r3
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d163      	bne.n	8005b88 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ac4:	009a      	lsls	r2, r3, #2
 8005ac6:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005aca:	4013      	ands	r3, r2
 8005acc:	687a      	ldr	r2, [r7, #4]
 8005ace:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8005ad0:	0f92      	lsrs	r2, r2, #30
 8005ad2:	431a      	orrs	r2, r3
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005adc:	0edb      	lsrs	r3, r3, #27
 8005ade:	b2db      	uxtb	r3, r3
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005aee:	0e1b      	lsrs	r3, r3, #24
 8005af0:	b2db      	uxtb	r3, r3
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	b2da      	uxtb	r2, r3
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b00:	0d5b      	lsrs	r3, r3, #21
 8005b02:	b2db      	uxtb	r3, r3
 8005b04:	f003 0307 	and.w	r3, r3, #7
 8005b08:	b2da      	uxtb	r2, r3
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b12:	0c9b      	lsrs	r3, r3, #18
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	f003 0307 	and.w	r3, r3, #7
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b24:	0bdb      	lsrs	r3, r3, #15
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	f003 0307 	and.w	r3, r3, #7
 8005b2c:	b2da      	uxtb	r2, r3
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	691b      	ldr	r3, [r3, #16]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	7e1b      	ldrb	r3, [r3, #24]
 8005b40:	b2db      	uxtb	r3, r3
 8005b42:	f003 0307 	and.w	r3, r3, #7
 8005b46:	3302      	adds	r3, #2
 8005b48:	2201      	movs	r2, #1
 8005b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b4e:	687a      	ldr	r2, [r7, #4]
 8005b50:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8005b52:	fb02 f203 	mul.w	r2, r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	7a1b      	ldrb	r3, [r3, #8]
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	f003 030f 	and.w	r3, r3, #15
 8005b64:	2201      	movs	r2, #1
 8005b66:	409a      	lsls	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8005b74:	0a52      	lsrs	r2, r2, #9
 8005b76:	fb02 f203 	mul.w	r2, r2, r3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005b84:	661a      	str	r2, [r3, #96]	; 0x60
 8005b86:	e031      	b.n	8005bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d11d      	bne.n	8005bcc <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b94:	041b      	lsls	r3, r3, #16
 8005b96:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b9e:	0c1b      	lsrs	r3, r3, #16
 8005ba0:	431a      	orrs	r2, r3
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	3301      	adds	r3, #1
 8005bac:	029a      	lsls	r2, r3, #10
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bc0:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	661a      	str	r2, [r3, #96]	; 0x60
 8005bca:	e00f      	b.n	8005bec <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4a58      	ldr	r2, [pc, #352]	; (8005d34 <HAL_SD_GetCardCSD+0x344>)
 8005bd2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	2201      	movs	r2, #1
 8005be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e09d      	b.n	8005d28 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005bf0:	0b9b      	lsrs	r3, r3, #14
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	f003 0301 	and.w	r3, r3, #1
 8005bf8:	b2da      	uxtb	r2, r3
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c02:	09db      	lsrs	r3, r3, #7
 8005c04:	b2db      	uxtb	r3, r3
 8005c06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c0a:	b2da      	uxtb	r2, r3
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c1a:	b2da      	uxtb	r2, r3
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c24:	0fdb      	lsrs	r3, r3, #31
 8005c26:	b2da      	uxtb	r2, r3
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c30:	0f5b      	lsrs	r3, r3, #29
 8005c32:	b2db      	uxtb	r3, r3
 8005c34:	f003 0303 	and.w	r3, r3, #3
 8005c38:	b2da      	uxtb	r2, r3
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c42:	0e9b      	lsrs	r3, r3, #26
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	b2da      	uxtb	r2, r3
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c54:	0d9b      	lsrs	r3, r3, #22
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	b2da      	uxtb	r2, r3
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c66:	0d5b      	lsrs	r3, r3, #21
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	f003 0301 	and.w	r3, r3, #1
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c82:	0c1b      	lsrs	r3, r3, #16
 8005c84:	b2db      	uxtb	r3, r3
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	b2da      	uxtb	r2, r3
 8005c8c:	683b      	ldr	r3, [r7, #0]
 8005c8e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005c96:	0bdb      	lsrs	r3, r3, #15
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	f003 0301 	and.w	r3, r3, #1
 8005c9e:	b2da      	uxtb	r2, r3
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005caa:	0b9b      	lsrs	r3, r3, #14
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	b2da      	uxtb	r2, r3
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cbe:	0b5b      	lsrs	r3, r3, #13
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	f003 0301 	and.w	r3, r3, #1
 8005cc6:	b2da      	uxtb	r2, r3
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd2:	0b1b      	lsrs	r3, r3, #12
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	b2da      	uxtb	r2, r3
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce6:	0a9b      	lsrs	r3, r3, #10
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	f003 0303 	and.w	r3, r3, #3
 8005cee:	b2da      	uxtb	r2, r3
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	f003 0303 	and.w	r3, r3, #3
 8005d02:	b2da      	uxtb	r2, r3
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d0e:	085b      	lsrs	r3, r3, #1
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d16:	b2da      	uxtb	r2, r3
 8005d18:	683b      	ldr	r3, [r7, #0]
 8005d1a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	2201      	movs	r2, #1
 8005d22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8005d26:	2300      	movs	r3, #0
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	370c      	adds	r7, #12
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d32:	4770      	bx	lr
 8005d34:	004005ff 	.word	0x004005ff

08005d38 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	370c      	adds	r7, #12
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr

08005d90 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8005d90:	b5b0      	push	{r4, r5, r7, lr}
 8005d92:	b08e      	sub	sp, #56	; 0x38
 8005d94:	af04      	add	r7, sp, #16
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  SDIO_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2203      	movs	r2, #3
 8005da4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dac:	2b03      	cmp	r3, #3
 8005dae:	d02e      	beq.n	8005e0e <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005db6:	d106      	bne.n	8005dc6 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dbc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	639a      	str	r2, [r3, #56]	; 0x38
 8005dc4:	e029      	b.n	8005e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dcc:	d10a      	bne.n	8005de4 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fb28 	bl	8006424 <SD_WideBus_Enable>
 8005dd4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dda:	6a3b      	ldr	r3, [r7, #32]
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	639a      	str	r2, [r3, #56]	; 0x38
 8005de2:	e01a      	b.n	8005e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 8005de4:	683b      	ldr	r3, [r7, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d10a      	bne.n	8005e00 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fb65 	bl	80064ba <SD_WideBus_Disable>
 8005df0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8005dfe:	e00c      	b.n	8005e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e04:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	639a      	str	r2, [r3, #56]	; 0x38
 8005e0c:	e005      	b.n	8005e1a <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e12:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00b      	beq.n	8005e3a <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a26      	ldr	r2, [pc, #152]	; (8005ec0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e28:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e38:	e01f      	b.n	8005e7a <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	689b      	ldr	r3, [r3, #8]
 8005e44:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	699b      	ldr	r3, [r3, #24]
 8005e5a:	61fb      	str	r3, [r7, #28]
    (void)SDIO_Init(hsd->Instance, Init);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681d      	ldr	r5, [r3, #0]
 8005e60:	466c      	mov	r4, sp
 8005e62:	f107 0314 	add.w	r3, r7, #20
 8005e66:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e6a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e6e:	f107 0308 	add.w	r3, r7, #8
 8005e72:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e74:	4628      	mov	r0, r5
 8005e76:	f002 fabb 	bl	80083f0 <SDIO_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005e82:	4618      	mov	r0, r3
 8005e84:	f002 fb90 	bl	80085a8 <SDMMC_CmdBlockLength>
 8005e88:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a0a      	ldr	r2, [pc, #40]	; (8005ec0 <HAL_SD_ConfigWideBusOperation+0x130>)
 8005e96:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e9c:	6a3b      	ldr	r3, [r7, #32]
 8005e9e:	431a      	orrs	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2201      	movs	r2, #1
 8005eae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8005eb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3728      	adds	r7, #40	; 0x28
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bdb0      	pop	{r4, r5, r7, pc}
 8005ebe:	bf00      	nop
 8005ec0:	004005ff 	.word	0x004005ff

08005ec4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8005ecc:	2300      	movs	r3, #0
 8005ece:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8005ed0:	f107 030c 	add.w	r3, r7, #12
 8005ed4:	4619      	mov	r1, r3
 8005ed6:	6878      	ldr	r0, [r7, #4]
 8005ed8:	f000 fa7c 	bl	80063d4 <SD_SendStatus>
 8005edc:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d005      	beq.n	8005ef0 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ee8:	697b      	ldr	r3, [r7, #20]
 8005eea:	431a      	orrs	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	0a5b      	lsrs	r3, r3, #9
 8005ef4:	f003 030f 	and.w	r3, r3, #15
 8005ef8:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8005efa:	693b      	ldr	r3, [r7, #16]
}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}

08005f04 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b085      	sub	sp, #20
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f10:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDIO_IT_DATAEND));
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f20:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2c:	4770      	bx	lr

08005f2e <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b084      	sub	sp, #16
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f3a:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f40:	2b82      	cmp	r3, #130	; 0x82
 8005f42:	d111      	bne.n	8005f68 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f002 fbd7 	bl	80086fc <SDMMC_CmdStopTransfer>
 8005f4e:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8005f50:	68bb      	ldr	r3, [r7, #8]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d008      	beq.n	8005f68 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f5a:	68bb      	ldr	r3, [r7, #8]
 8005f5c:	431a      	orrs	r2, r3
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f7ff fd3a 	bl	80059dc <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDIO_DCTRL_DMAEN);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f022 0208 	bic.w	r2, r2, #8
 8005f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f80:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2201      	movs	r2, #1
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8005f90:	68f8      	ldr	r0, [r7, #12]
 8005f92:	f003 f83f 	bl	8009014 <HAL_SD_RxCpltCallback>
#endif
}
 8005f96:	bf00      	nop
 8005f98:	3710      	adds	r7, #16
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
	...

08005fa0 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b086      	sub	sp, #24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fac:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f7fc fe80 	bl	8002cb4 <HAL_DMA_GetError>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b02      	cmp	r3, #2
 8005fb8:	d03e      	beq.n	8006038 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc0:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 8005fc2:	697b      	ldr	r3, [r7, #20]
 8005fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005fc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fc8:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 8005fca:	693b      	ldr	r3, [r7, #16]
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d002      	beq.n	8005fd6 <SD_DMAError+0x36>
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d12d      	bne.n	8006032 <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005fd6:	697b      	ldr	r3, [r7, #20]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a19      	ldr	r2, [pc, #100]	; (8006040 <SD_DMAError+0xa0>)
 8005fdc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDIO_IT_DATAEND | SDIO_IT_DCRCFAIL | SDIO_IT_DTIMEOUT|\
 8005fde:	697b      	ldr	r3, [r7, #20]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8005fec:	63da      	str	r2, [r3, #60]	; 0x3c
        SDIO_IT_TXUNDERR| SDIO_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7ff ff62 	bl	8005ec4 <HAL_SD_GetCardState>
 8006000:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	2b06      	cmp	r3, #6
 8006006:	d002      	beq.n	800600e <SD_DMAError+0x6e>
 8006008:	68bb      	ldr	r3, [r7, #8]
 800600a:	2b05      	cmp	r3, #5
 800600c:	d10a      	bne.n	8006024 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4618      	mov	r0, r3
 8006014:	f002 fb72 	bl	80086fc <SDMMC_CmdStopTransfer>
 8006018:	4602      	mov	r2, r0
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601e:	431a      	orrs	r2, r3
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	2200      	movs	r2, #0
 8006030:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8006032:	6978      	ldr	r0, [r7, #20]
 8006034:	f7ff fcd2 	bl	80059dc <HAL_SD_ErrorCallback>
#endif
  }
}
 8006038:	bf00      	nop
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	004005ff 	.word	0x004005ff

08006044 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b084      	sub	sp, #16
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006050:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f240 523a 	movw	r2, #1338	; 0x53a
 800605a:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f7ff ff31 	bl	8005ec4 <HAL_SD_GetCardState>
 8006062:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2201      	movs	r2, #1
 8006068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d002      	beq.n	800607e <SD_DMATxAbort+0x3a>
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2b05      	cmp	r3, #5
 800607c:	d10a      	bne.n	8006094 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	4618      	mov	r0, r3
 8006084:	f002 fb3a 	bl	80086fc <SDMMC_CmdStopTransfer>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800608e:	431a      	orrs	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006098:	2b00      	cmp	r3, #0
 800609a:	d103      	bne.n	80060a4 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800609c:	68f8      	ldr	r0, [r7, #12]
 800609e:	f002 ffa5 	bl	8008fec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 80060a2:	e002      	b.n	80060aa <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f7ff fc99 	bl	80059dc <HAL_SD_ErrorCallback>
}
 80060aa:	bf00      	nop
 80060ac:	3710      	adds	r7, #16
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}

080060b2 <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 80060b2:	b580      	push	{r7, lr}
 80060b4:	b084      	sub	sp, #16
 80060b6:	af00      	add	r7, sp, #0
 80060b8:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060be:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f240 523a 	movw	r2, #1338	; 0x53a
 80060c8:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 80060ca:	68f8      	ldr	r0, [r7, #12]
 80060cc:	f7ff fefa 	bl	8005ec4 <HAL_SD_GetCardState>
 80060d0:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2200      	movs	r2, #0
 80060de:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d002      	beq.n	80060ec <SD_DMARxAbort+0x3a>
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2b05      	cmp	r3, #5
 80060ea:	d10a      	bne.n	8006102 <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4618      	mov	r0, r3
 80060f2:	f002 fb03 	bl	80086fc <SDMMC_CmdStopTransfer>
 80060f6:	4602      	mov	r2, r0
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060fc:	431a      	orrs	r2, r3
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006106:	2b00      	cmp	r3, #0
 8006108:	d103      	bne.n	8006112 <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f002 ff6e 	bl	8008fec <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8006110:	e002      	b.n	8006118 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f7ff fc62 	bl	80059dc <HAL_SD_ErrorCallback>
}
 8006118:	bf00      	nop
 800611a:	3710      	adds	r7, #16
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}

08006120 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006120:	b5b0      	push	{r4, r5, r7, lr}
 8006122:	b094      	sub	sp, #80	; 0x50
 8006124:	af04      	add	r7, sp, #16
 8006126:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8006128:	2301      	movs	r3, #1
 800612a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4618      	mov	r0, r3
 8006132:	f002 f9b5 	bl	80084a0 <SDIO_GetPowerState>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d102      	bne.n	8006142 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800613c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006140:	e0b6      	b.n	80062b0 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006146:	2b03      	cmp	r3, #3
 8006148:	d02f      	beq.n	80061aa <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	4618      	mov	r0, r3
 8006150:	f002 fbde 	bl	8008910 <SDMMC_CmdSendCID>
 8006154:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8006156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <SD_InitCard+0x40>
    {
      return errorstate;
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	e0a7      	b.n	80062b0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2100      	movs	r1, #0
 8006166:	4618      	mov	r0, r3
 8006168:	f002 f9df 	bl	800852a <SDIO_GetResponse>
 800616c:	4602      	mov	r2, r0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	2104      	movs	r1, #4
 8006178:	4618      	mov	r0, r3
 800617a:	f002 f9d6 	bl	800852a <SDIO_GetResponse>
 800617e:	4602      	mov	r2, r0
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2108      	movs	r1, #8
 800618a:	4618      	mov	r0, r3
 800618c:	f002 f9cd 	bl	800852a <SDIO_GetResponse>
 8006190:	4602      	mov	r2, r0
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	210c      	movs	r1, #12
 800619c:	4618      	mov	r0, r3
 800619e:	f002 f9c4 	bl	800852a <SDIO_GetResponse>
 80061a2:	4602      	mov	r2, r0
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ae:	2b03      	cmp	r3, #3
 80061b0:	d00d      	beq.n	80061ce <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f107 020e 	add.w	r2, r7, #14
 80061ba:	4611      	mov	r1, r2
 80061bc:	4618      	mov	r0, r3
 80061be:	f002 fbe4 	bl	800898a <SDMMC_CmdSetRelAdd>
 80061c2:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <SD_InitCard+0xae>
    {
      return errorstate;
 80061ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061cc:	e070      	b.n	80062b0 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061d2:	2b03      	cmp	r3, #3
 80061d4:	d036      	beq.n	8006244 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80061d6:	89fb      	ldrh	r3, [r7, #14]
 80061d8:	461a      	mov	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061e6:	041b      	lsls	r3, r3, #16
 80061e8:	4619      	mov	r1, r3
 80061ea:	4610      	mov	r0, r2
 80061ec:	f002 fbae 	bl	800894c <SDMMC_CmdSendCSD>
 80061f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <SD_InitCard+0xdc>
    {
      return errorstate;
 80061f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fa:	e059      	b.n	80062b0 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2100      	movs	r1, #0
 8006202:	4618      	mov	r0, r3
 8006204:	f002 f991 	bl	800852a <SDIO_GetResponse>
 8006208:	4602      	mov	r2, r0
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2104      	movs	r1, #4
 8006214:	4618      	mov	r0, r3
 8006216:	f002 f988 	bl	800852a <SDIO_GetResponse>
 800621a:	4602      	mov	r2, r0
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2108      	movs	r1, #8
 8006226:	4618      	mov	r0, r3
 8006228:	f002 f97f 	bl	800852a <SDIO_GetResponse>
 800622c:	4602      	mov	r2, r0
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	210c      	movs	r1, #12
 8006238:	4618      	mov	r0, r3
 800623a:	f002 f976 	bl	800852a <SDIO_GetResponse>
 800623e:	4602      	mov	r2, r0
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2104      	movs	r1, #4
 800624a:	4618      	mov	r0, r3
 800624c:	f002 f96d 	bl	800852a <SDIO_GetResponse>
 8006250:	4603      	mov	r3, r0
 8006252:	0d1a      	lsrs	r2, r3, #20
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8006258:	f107 0310 	add.w	r3, r7, #16
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff fbc6 	bl	80059f0 <HAL_SD_GetCardCSD>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d002      	beq.n	8006270 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800626a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800626e:	e01f      	b.n	80062b0 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6819      	ldr	r1, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006278:	041b      	lsls	r3, r3, #16
 800627a:	461a      	mov	r2, r3
 800627c:	f04f 0300 	mov.w	r3, #0
 8006280:	4608      	mov	r0, r1
 8006282:	f002 fa5d 	bl	8008740 <SDMMC_CmdSelDesel>
 8006286:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8006288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800628a:	2b00      	cmp	r3, #0
 800628c:	d001      	beq.n	8006292 <SD_InitCard+0x172>
  {
    return errorstate;
 800628e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006290:	e00e      	b.n	80062b0 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681d      	ldr	r5, [r3, #0]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	466c      	mov	r4, sp
 800629a:	f103 0210 	add.w	r2, r3, #16
 800629e:	ca07      	ldmia	r2, {r0, r1, r2}
 80062a0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80062a4:	3304      	adds	r3, #4
 80062a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80062a8:	4628      	mov	r0, r5
 80062aa:	f002 f8a1 	bl	80083f0 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3740      	adds	r7, #64	; 0x40
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bdb0      	pop	{r4, r5, r7, pc}

080062b8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80062c0:	2300      	movs	r3, #0
 80062c2:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80062c4:	2300      	movs	r3, #0
 80062c6:	617b      	str	r3, [r7, #20]
 80062c8:	2300      	movs	r3, #0
 80062ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4618      	mov	r0, r3
 80062d2:	f002 fa58 	bl	8008786 <SDMMC_CmdGoIdleState>
 80062d6:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <SD_PowerON+0x2a>
  {
    return errorstate;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	e072      	b.n	80063c8 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f002 fa6b 	bl	80087c2 <SDMMC_CmdOperCond>
 80062ec:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00d      	beq.n	8006310 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4618      	mov	r0, r3
 8006300:	f002 fa41 	bl	8008786 <SDMMC_CmdGoIdleState>
 8006304:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d004      	beq.n	8006316 <SD_PowerON+0x5e>
    {
      return errorstate;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	e05b      	b.n	80063c8 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800631a:	2b01      	cmp	r3, #1
 800631c:	d137      	bne.n	800638e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2100      	movs	r1, #0
 8006324:	4618      	mov	r0, r3
 8006326:	f002 fa6b 	bl	8008800 <SDMMC_CmdAppCommand>
 800632a:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d02d      	beq.n	800638e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006332:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006336:	e047      	b.n	80063c8 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2100      	movs	r1, #0
 800633e:	4618      	mov	r0, r3
 8006340:	f002 fa5e 	bl	8008800 <SDMMC_CmdAppCommand>
 8006344:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d001      	beq.n	8006350 <SD_PowerON+0x98>
    {
      return errorstate;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	e03b      	b.n	80063c8 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	491e      	ldr	r1, [pc, #120]	; (80063d0 <SD_PowerON+0x118>)
 8006356:	4618      	mov	r0, r3
 8006358:	f002 fa74 	bl	8008844 <SDMMC_CmdAppOperCommand>
 800635c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d002      	beq.n	800636a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006364:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006368:	e02e      	b.n	80063c8 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2100      	movs	r1, #0
 8006370:	4618      	mov	r0, r3
 8006372:	f002 f8da 	bl	800852a <SDIO_GetResponse>
 8006376:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	0fdb      	lsrs	r3, r3, #31
 800637c:	2b01      	cmp	r3, #1
 800637e:	d101      	bne.n	8006384 <SD_PowerON+0xcc>
 8006380:	2301      	movs	r3, #1
 8006382:	e000      	b.n	8006386 <SD_PowerON+0xce>
 8006384:	2300      	movs	r3, #0
 8006386:	613b      	str	r3, [r7, #16]

    count++;
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	3301      	adds	r3, #1
 800638c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800638e:	68bb      	ldr	r3, [r7, #8]
 8006390:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8006394:	4293      	cmp	r3, r2
 8006396:	d802      	bhi.n	800639e <SD_PowerON+0xe6>
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d0cc      	beq.n	8006338 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d902      	bls.n	80063ae <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80063a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80063ac:	e00c      	b.n	80063c8 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d003      	beq.n	80063c0 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	645a      	str	r2, [r3, #68]	; 0x44
 80063be:	e002      	b.n	80063c6 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2200      	movs	r2, #0
 80063c4:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80063c6:	2300      	movs	r3, #0
}
 80063c8:	4618      	mov	r0, r3
 80063ca:	3718      	adds	r7, #24
 80063cc:	46bd      	mov	sp, r7
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	c1100000 	.word	0xc1100000

080063d4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d102      	bne.n	80063ea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80063e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80063e8:	e018      	b.n	800641c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681a      	ldr	r2, [r3, #0]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f2:	041b      	lsls	r3, r3, #16
 80063f4:	4619      	mov	r1, r3
 80063f6:	4610      	mov	r0, r2
 80063f8:	f002 fae8 	bl	80089cc <SDMMC_CmdSendStatus>
 80063fc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <SD_SendStatus+0x34>
  {
    return errorstate;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	e009      	b.n	800641c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2100      	movs	r1, #0
 800640e:	4618      	mov	r0, r3
 8006410:	f002 f88b 	bl	800852a <SDIO_GetResponse>
 8006414:	4602      	mov	r2, r0
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3710      	adds	r7, #16
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800642c:	2300      	movs	r3, #0
 800642e:	60fb      	str	r3, [r7, #12]
 8006430:	2300      	movs	r3, #0
 8006432:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2100      	movs	r1, #0
 800643a:	4618      	mov	r0, r3
 800643c:	f002 f875 	bl	800852a <SDIO_GetResponse>
 8006440:	4603      	mov	r3, r0
 8006442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006446:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800644a:	d102      	bne.n	8006452 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800644c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006450:	e02f      	b.n	80064b2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8006452:	f107 030c 	add.w	r3, r7, #12
 8006456:	4619      	mov	r1, r3
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 f879 	bl	8006550 <SD_FindSCR>
 800645e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006460:	697b      	ldr	r3, [r7, #20]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d001      	beq.n	800646a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	e023      	b.n	80064b2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d01c      	beq.n	80064ae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647c:	041b      	lsls	r3, r3, #16
 800647e:	4619      	mov	r1, r3
 8006480:	4610      	mov	r0, r2
 8006482:	f002 f9bd 	bl	8008800 <SDMMC_CmdAppCommand>
 8006486:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d001      	beq.n	8006492 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	e00f      	b.n	80064b2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	2102      	movs	r1, #2
 8006498:	4618      	mov	r0, r3
 800649a:	f002 f9f6 	bl	800888a <SDMMC_CmdBusWidth>
 800649e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d001      	beq.n	80064aa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	e003      	b.n	80064b2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80064aa:	2300      	movs	r3, #0
 80064ac:	e001      	b.n	80064b2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80064ae:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3718      	adds	r7, #24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}

080064ba <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80064ba:	b580      	push	{r7, lr}
 80064bc:	b086      	sub	sp, #24
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80064c2:	2300      	movs	r3, #0
 80064c4:	60fb      	str	r3, [r7, #12]
 80064c6:	2300      	movs	r3, #0
 80064c8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f002 f82a 	bl	800852a <SDIO_GetResponse>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80064e0:	d102      	bne.n	80064e8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80064e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80064e6:	e02f      	b.n	8006548 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80064e8:	f107 030c 	add.w	r3, r7, #12
 80064ec:	4619      	mov	r1, r3
 80064ee:	6878      	ldr	r0, [r7, #4]
 80064f0:	f000 f82e 	bl	8006550 <SD_FindSCR>
 80064f4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	e023      	b.n	8006548 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006500:	693b      	ldr	r3, [r7, #16]
 8006502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006506:	2b00      	cmp	r3, #0
 8006508:	d01c      	beq.n	8006544 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006512:	041b      	lsls	r3, r3, #16
 8006514:	4619      	mov	r1, r3
 8006516:	4610      	mov	r0, r2
 8006518:	f002 f972 	bl	8008800 <SDMMC_CmdAppCommand>
 800651c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	2b00      	cmp	r3, #0
 8006522:	d001      	beq.n	8006528 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	e00f      	b.n	8006548 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2100      	movs	r1, #0
 800652e:	4618      	mov	r0, r3
 8006530:	f002 f9ab 	bl	800888a <SDMMC_CmdBusWidth>
 8006534:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d001      	beq.n	8006540 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	e003      	b.n	8006548 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006540:	2300      	movs	r3, #0
 8006542:	e001      	b.n	8006548 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006544:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006548:	4618      	mov	r0, r3
 800654a:	3718      	adds	r7, #24
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}

08006550 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006550:	b590      	push	{r4, r7, lr}
 8006552:	b08f      	sub	sp, #60	; 0x3c
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
 8006558:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800655a:	f7fb fc65 	bl	8001e28 <HAL_GetTick>
 800655e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006560:	2300      	movs	r3, #0
 8006562:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8006564:	2300      	movs	r3, #0
 8006566:	60bb      	str	r3, [r7, #8]
 8006568:	2300      	movs	r3, #0
 800656a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2108      	movs	r1, #8
 8006576:	4618      	mov	r0, r3
 8006578:	f002 f816 	bl	80085a8 <SDMMC_CmdBlockLength>
 800657c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <SD_FindSCR+0x38>
  {
    return errorstate;
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	e0b2      	b.n	80066ee <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681a      	ldr	r2, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006590:	041b      	lsls	r3, r3, #16
 8006592:	4619      	mov	r1, r3
 8006594:	4610      	mov	r0, r2
 8006596:	f002 f933 	bl	8008800 <SDMMC_CmdAppCommand>
 800659a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800659c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <SD_FindSCR+0x56>
  {
    return errorstate;
 80065a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a4:	e0a3      	b.n	80066ee <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80065a6:	f04f 33ff 	mov.w	r3, #4294967295
 80065aa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80065ac:	2308      	movs	r3, #8
 80065ae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80065b0:	2330      	movs	r3, #48	; 0x30
 80065b2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80065b4:	2302      	movs	r3, #2
 80065b6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80065b8:	2300      	movs	r3, #0
 80065ba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80065bc:	2301      	movs	r3, #1
 80065be:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f107 0210 	add.w	r2, r7, #16
 80065c8:	4611      	mov	r1, r2
 80065ca:	4618      	mov	r0, r3
 80065cc:	f001 ffc0 	bl	8008550 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	4618      	mov	r0, r3
 80065d6:	f002 f97a 	bl	80088ce <SDMMC_CmdSendSCR>
 80065da:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80065dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d02a      	beq.n	8006638 <SD_FindSCR+0xe8>
  {
    return errorstate;
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	e083      	b.n	80066ee <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00f      	beq.n	8006614 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6819      	ldr	r1, [r3, #0]
 80065f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	f107 0208 	add.w	r2, r7, #8
 8006600:	18d4      	adds	r4, r2, r3
 8006602:	4608      	mov	r0, r1
 8006604:	f001 ff1f 	bl	8008446 <SDIO_ReadFIFO>
 8006608:	4603      	mov	r3, r0
 800660a:	6023      	str	r3, [r4, #0]
      index++;
 800660c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660e:	3301      	adds	r3, #1
 8006610:	637b      	str	r3, [r7, #52]	; 0x34
 8006612:	e006      	b.n	8006622 <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXACT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800661a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800661e:	2b00      	cmp	r3, #0
 8006620:	d012      	beq.n	8006648 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8006622:	f7fb fc01 	bl	8001e28 <HAL_GetTick>
 8006626:	4602      	mov	r2, r0
 8006628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800662a:	1ad3      	subs	r3, r2, r3
 800662c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006630:	d102      	bne.n	8006638 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8006632:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006636:	e05a      	b.n	80066ee <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800663e:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 8006642:	2b00      	cmp	r3, #0
 8006644:	d0cf      	beq.n	80065e6 <SD_FindSCR+0x96>
 8006646:	e000      	b.n	800664a <SD_FindSCR+0xfa>
      break;
 8006648:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d005      	beq.n	8006664 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	2208      	movs	r2, #8
 800665e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006660:	2308      	movs	r3, #8
 8006662:	e044      	b.n	80066ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800666a:	f003 0302 	and.w	r3, r3, #2
 800666e:	2b00      	cmp	r3, #0
 8006670:	d005      	beq.n	800667e <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	2202      	movs	r2, #2
 8006678:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800667a:	2302      	movs	r3, #2
 800667c:	e037      	b.n	80066ee <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2220      	movs	r2, #32
 8006692:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8006694:	2320      	movs	r3, #32
 8006696:	e02a      	b.n	80066ee <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f240 523a 	movw	r2, #1338	; 0x53a
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	061a      	lsls	r2, r3, #24
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066ae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066b8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	0e1b      	lsrs	r3, r3, #24
 80066be:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80066c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c2:	601a      	str	r2, [r3, #0]
    scr++;
 80066c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066c6:	3304      	adds	r3, #4
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	061a      	lsls	r2, r3, #24
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	021b      	lsls	r3, r3, #8
 80066d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80066d6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	0a1b      	lsrs	r3, r3, #8
 80066dc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066e0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	0e1b      	lsrs	r3, r3, #24
 80066e6:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80066e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066ea:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80066ec:	2300      	movs	r3, #0
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	373c      	adds	r7, #60	; 0x3c
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd90      	pop	{r4, r7, pc}

080066f6 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b086      	sub	sp, #24
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006702:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d03f      	beq.n	8006790 <SD_Read_IT+0x9a>
  {
    /* Read data from SDIO Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8006710:	2300      	movs	r3, #0
 8006712:	617b      	str	r3, [r7, #20]
 8006714:	e033      	b.n	800677e <SD_Read_IT+0x88>
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4618      	mov	r0, r3
 800671c:	f001 fe93 	bl	8008446 <SDIO_ReadFIFO>
 8006720:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	b2da      	uxtb	r2, r3
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	701a      	strb	r2, [r3, #0]
      tmp++;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	3301      	adds	r3, #1
 800672e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006730:	693b      	ldr	r3, [r7, #16]
 8006732:	3b01      	subs	r3, #1
 8006734:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	0a1b      	lsrs	r3, r3, #8
 800673a:	b2da      	uxtb	r2, r3
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006746:	693b      	ldr	r3, [r7, #16]
 8006748:	3b01      	subs	r3, #1
 800674a:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800674c:	68bb      	ldr	r3, [r7, #8]
 800674e:	0c1b      	lsrs	r3, r3, #16
 8006750:	b2da      	uxtb	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	701a      	strb	r2, [r3, #0]
      tmp++;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	3301      	adds	r3, #1
 800675a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800675c:	693b      	ldr	r3, [r7, #16]
 800675e:	3b01      	subs	r3, #1
 8006760:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	0e1b      	lsrs	r3, r3, #24
 8006766:	b2da      	uxtb	r2, r3
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	3301      	adds	r3, #1
 8006770:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	3b01      	subs	r3, #1
 8006776:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	3301      	adds	r3, #1
 800677c:	617b      	str	r3, [r7, #20]
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	2b07      	cmp	r3, #7
 8006782:	d9c8      	bls.n	8006716 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8006790:	bf00      	nop
 8006792:	3718      	adds	r7, #24
 8006794:	46bd      	mov	sp, r7
 8006796:	bd80      	pop	{r7, pc}

08006798 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b086      	sub	sp, #24
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	6a1b      	ldr	r3, [r3, #32]
 80067a4:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d043      	beq.n	800683a <SD_Write_IT+0xa2>
  {
    /* Write data to SDIO Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80067b2:	2300      	movs	r3, #0
 80067b4:	617b      	str	r3, [r7, #20]
 80067b6:	e037      	b.n	8006828 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	3b01      	subs	r3, #1
 80067c8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	781b      	ldrb	r3, [r3, #0]
 80067ce:	021a      	lsls	r2, r3, #8
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	3301      	adds	r3, #1
 80067da:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	3b01      	subs	r3, #1
 80067e0:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	781b      	ldrb	r3, [r3, #0]
 80067e6:	041a      	lsls	r2, r3, #16
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	4313      	orrs	r3, r2
 80067ec:	60bb      	str	r3, [r7, #8]
      tmp++;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	3301      	adds	r3, #1
 80067f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3b01      	subs	r3, #1
 80067f8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	781b      	ldrb	r3, [r3, #0]
 80067fe:	061a      	lsls	r2, r3, #24
 8006800:	68bb      	ldr	r3, [r7, #8]
 8006802:	4313      	orrs	r3, r2
 8006804:	60bb      	str	r3, [r7, #8]
      tmp++;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	3b01      	subs	r3, #1
 8006810:	613b      	str	r3, [r7, #16]
      (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f107 0208 	add.w	r2, r7, #8
 800681a:	4611      	mov	r1, r2
 800681c:	4618      	mov	r0, r3
 800681e:	f001 fe1f 	bl	8008460 <SDIO_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	3301      	adds	r3, #1
 8006826:	617b      	str	r3, [r7, #20]
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b07      	cmp	r3, #7
 800682c:	d9c4      	bls.n	80067b8 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	68fa      	ldr	r2, [r7, #12]
 8006832:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	693a      	ldr	r2, [r7, #16]
 8006838:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800683a:	bf00      	nop
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006842:	b580      	push	{r7, lr}
 8006844:	b082      	sub	sp, #8
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d101      	bne.n	8006854 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e07b      	b.n	800694c <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	d108      	bne.n	800686e <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	685b      	ldr	r3, [r3, #4]
 8006860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006864:	d009      	beq.n	800687a <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	61da      	str	r2, [r3, #28]
 800686c:	e005      	b.n	800687a <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	2200      	movs	r2, #0
 800687e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006886:	b2db      	uxtb	r3, r3
 8006888:	2b00      	cmp	r3, #0
 800688a:	d106      	bne.n	800689a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f7fa fbc5 	bl	8001024 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068b0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	689b      	ldr	r3, [r3, #8]
 80068be:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068c2:	431a      	orrs	r2, r3
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068cc:	431a      	orrs	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	691b      	ldr	r3, [r3, #16]
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	431a      	orrs	r2, r3
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	695b      	ldr	r3, [r3, #20]
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	431a      	orrs	r2, r3
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	699b      	ldr	r3, [r3, #24]
 80068e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80068ea:	431a      	orrs	r2, r3
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69db      	ldr	r3, [r3, #28]
 80068f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068fe:	ea42 0103 	orr.w	r1, r2, r3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006906:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	699b      	ldr	r3, [r3, #24]
 8006916:	0c1b      	lsrs	r3, r3, #16
 8006918:	f003 0104 	and.w	r1, r3, #4
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	f003 0210 	and.w	r2, r3, #16
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	430a      	orrs	r2, r1
 800692a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	69da      	ldr	r2, [r3, #28]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800693a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800694a:	2300      	movs	r3, #0
}
 800694c:	4618      	mov	r0, r3
 800694e:	3708      	adds	r7, #8
 8006950:	46bd      	mov	sp, r7
 8006952:	bd80      	pop	{r7, pc}

08006954 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006954:	b580      	push	{r7, lr}
 8006956:	b082      	sub	sp, #8
 8006958:	af00      	add	r7, sp, #0
 800695a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d101      	bne.n	8006966 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006962:	2301      	movs	r3, #1
 8006964:	e041      	b.n	80069ea <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d106      	bne.n	8006980 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7fa ff9c 	bl	80018b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2202      	movs	r2, #2
 8006984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	3304      	adds	r3, #4
 8006990:	4619      	mov	r1, r3
 8006992:	4610      	mov	r0, r2
 8006994:	f000 fb4a 	bl	800702c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2201      	movs	r2, #1
 80069a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2201      	movs	r2, #1
 80069ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	2201      	movs	r2, #1
 80069b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2201      	movs	r2, #1
 80069bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2201      	movs	r2, #1
 80069c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3708      	adds	r7, #8
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b082      	sub	sp, #8
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d101      	bne.n	8006a04 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006a00:	2301      	movs	r3, #1
 8006a02:	e041      	b.n	8006a88 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d106      	bne.n	8006a1e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f000 f839 	bl	8006a90 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2202      	movs	r2, #2
 8006a22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681a      	ldr	r2, [r3, #0]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	3304      	adds	r3, #4
 8006a2e:	4619      	mov	r1, r3
 8006a30:	4610      	mov	r0, r2
 8006a32:	f000 fafb 	bl	800702c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2201      	movs	r2, #1
 8006a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2201      	movs	r2, #1
 8006a52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2201      	movs	r2, #1
 8006a62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	2201      	movs	r2, #1
 8006a6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2201      	movs	r2, #1
 8006a7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	3708      	adds	r7, #8
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	bd80      	pop	{r7, pc}

08006a90 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006a90:	b480      	push	{r7}
 8006a92:	b083      	sub	sp, #12
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006a98:	bf00      	nop
 8006a9a:	370c      	adds	r7, #12
 8006a9c:	46bd      	mov	sp, r7
 8006a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa2:	4770      	bx	lr

08006aa4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	691b      	ldr	r3, [r3, #16]
 8006ab2:	f003 0302 	and.w	r3, r3, #2
 8006ab6:	2b02      	cmp	r3, #2
 8006ab8:	d122      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	68db      	ldr	r3, [r3, #12]
 8006ac0:	f003 0302 	and.w	r3, r3, #2
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d11b      	bne.n	8006b00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f06f 0202 	mvn.w	r2, #2
 8006ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	f003 0303 	and.w	r3, r3, #3
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 fa81 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006aec:	e005      	b.n	8006afa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 fa73 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	f000 fa84 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	691b      	ldr	r3, [r3, #16]
 8006b06:	f003 0304 	and.w	r3, r3, #4
 8006b0a:	2b04      	cmp	r3, #4
 8006b0c:	d122      	bne.n	8006b54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	68db      	ldr	r3, [r3, #12]
 8006b14:	f003 0304 	and.w	r3, r3, #4
 8006b18:	2b04      	cmp	r3, #4
 8006b1a:	d11b      	bne.n	8006b54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f06f 0204 	mvn.w	r2, #4
 8006b24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2202      	movs	r2, #2
 8006b2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	699b      	ldr	r3, [r3, #24]
 8006b32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 fa57 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006b40:	e005      	b.n	8006b4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f000 fa49 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b48:	6878      	ldr	r0, [r7, #4]
 8006b4a:	f000 fa5a 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2200      	movs	r2, #0
 8006b52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b08      	cmp	r3, #8
 8006b60:	d122      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	f003 0308 	and.w	r3, r3, #8
 8006b6c:	2b08      	cmp	r3, #8
 8006b6e:	d11b      	bne.n	8006ba8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f06f 0208 	mvn.w	r2, #8
 8006b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2204      	movs	r2, #4
 8006b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	f003 0303 	and.w	r3, r3, #3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d003      	beq.n	8006b96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b8e:	6878      	ldr	r0, [r7, #4]
 8006b90:	f000 fa2d 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006b94:	e005      	b.n	8006ba2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fa1f 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fa30 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	691b      	ldr	r3, [r3, #16]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d122      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	f003 0310 	and.w	r3, r3, #16
 8006bc0:	2b10      	cmp	r3, #16
 8006bc2:	d11b      	bne.n	8006bfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	f06f 0210 	mvn.w	r2, #16
 8006bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2208      	movs	r2, #8
 8006bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69db      	ldr	r3, [r3, #28]
 8006bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d003      	beq.n	8006bea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	f000 fa03 	bl	8006fee <HAL_TIM_IC_CaptureCallback>
 8006be8:	e005      	b.n	8006bf6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 f9f5 	bl	8006fda <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	f000 fa06 	bl	8007002 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	691b      	ldr	r3, [r3, #16]
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b01      	cmp	r3, #1
 8006c08:	d10e      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	68db      	ldr	r3, [r3, #12]
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d107      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0201 	mvn.w	r2, #1
 8006c20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f9cf 	bl	8006fc6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c32:	2b80      	cmp	r3, #128	; 0x80
 8006c34:	d10e      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c40:	2b80      	cmp	r3, #128	; 0x80
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f000 fd5c 	bl	800770c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5e:	2b40      	cmp	r3, #64	; 0x40
 8006c60:	d10e      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c6c:	2b40      	cmp	r3, #64	; 0x40
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f9cb 	bl	8007016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0320 	and.w	r3, r3, #32
 8006c8a:	2b20      	cmp	r3, #32
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0320 	and.w	r3, r3, #32
 8006c98:	2b20      	cmp	r3, #32
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0220 	mvn.w	r2, #32
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 fd26 	bl	80076f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cac:	bf00      	nop
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	60f8      	str	r0, [r7, #12]
 8006cbc:	60b9      	str	r1, [r7, #8]
 8006cbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d101      	bne.n	8006cd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cce:	2302      	movs	r3, #2
 8006cd0:	e0ae      	b.n	8006e30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b0c      	cmp	r3, #12
 8006cde:	f200 809f 	bhi.w	8006e20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006ce2:	a201      	add	r2, pc, #4	; (adr r2, 8006ce8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ce8:	08006d1d 	.word	0x08006d1d
 8006cec:	08006e21 	.word	0x08006e21
 8006cf0:	08006e21 	.word	0x08006e21
 8006cf4:	08006e21 	.word	0x08006e21
 8006cf8:	08006d5d 	.word	0x08006d5d
 8006cfc:	08006e21 	.word	0x08006e21
 8006d00:	08006e21 	.word	0x08006e21
 8006d04:	08006e21 	.word	0x08006e21
 8006d08:	08006d9f 	.word	0x08006d9f
 8006d0c:	08006e21 	.word	0x08006e21
 8006d10:	08006e21 	.word	0x08006e21
 8006d14:	08006e21 	.word	0x08006e21
 8006d18:	08006ddf 	.word	0x08006ddf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	68b9      	ldr	r1, [r7, #8]
 8006d22:	4618      	mov	r0, r3
 8006d24:	f000 fa22 	bl	800716c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	699a      	ldr	r2, [r3, #24]
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f042 0208 	orr.w	r2, r2, #8
 8006d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	699a      	ldr	r2, [r3, #24]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	f022 0204 	bic.w	r2, r2, #4
 8006d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	6999      	ldr	r1, [r3, #24]
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	691a      	ldr	r2, [r3, #16]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	430a      	orrs	r2, r1
 8006d58:	619a      	str	r2, [r3, #24]
      break;
 8006d5a:	e064      	b.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	68b9      	ldr	r1, [r7, #8]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f000 fa72 	bl	800724c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	699a      	ldr	r2, [r3, #24]
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	699a      	ldr	r2, [r3, #24]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006d86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	6999      	ldr	r1, [r3, #24]
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	430a      	orrs	r2, r1
 8006d9a:	619a      	str	r2, [r3, #24]
      break;
 8006d9c:	e043      	b.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	68b9      	ldr	r1, [r7, #8]
 8006da4:	4618      	mov	r0, r3
 8006da6:	f000 fac7 	bl	8007338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	69da      	ldr	r2, [r3, #28]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	f042 0208 	orr.w	r2, r2, #8
 8006db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	69da      	ldr	r2, [r3, #28]
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f022 0204 	bic.w	r2, r2, #4
 8006dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	69d9      	ldr	r1, [r3, #28]
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	691a      	ldr	r2, [r3, #16]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	61da      	str	r2, [r3, #28]
      break;
 8006ddc:	e023      	b.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68b9      	ldr	r1, [r7, #8]
 8006de4:	4618      	mov	r0, r3
 8006de6:	f000 fb1b 	bl	8007420 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	69da      	ldr	r2, [r3, #28]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006df8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	69da      	ldr	r2, [r3, #28]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	69d9      	ldr	r1, [r3, #28]
 8006e10:	68bb      	ldr	r3, [r7, #8]
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	021a      	lsls	r2, r3, #8
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	430a      	orrs	r2, r1
 8006e1c:	61da      	str	r2, [r3, #28]
      break;
 8006e1e:	e002      	b.n	8006e26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	75fb      	strb	r3, [r7, #23]
      break;
 8006e24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	2200      	movs	r2, #0
 8006e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e30:	4618      	mov	r0, r3
 8006e32:	3718      	adds	r7, #24
 8006e34:	46bd      	mov	sp, r7
 8006e36:	bd80      	pop	{r7, pc}

08006e38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b084      	sub	sp, #16
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	6078      	str	r0, [r7, #4]
 8006e40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e42:	2300      	movs	r3, #0
 8006e44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4c:	2b01      	cmp	r3, #1
 8006e4e:	d101      	bne.n	8006e54 <HAL_TIM_ConfigClockSource+0x1c>
 8006e50:	2302      	movs	r3, #2
 8006e52:	e0b4      	b.n	8006fbe <HAL_TIM_ConfigClockSource+0x186>
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2201      	movs	r2, #1
 8006e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2202      	movs	r2, #2
 8006e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	68ba      	ldr	r2, [r7, #8]
 8006e82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e8c:	d03e      	beq.n	8006f0c <HAL_TIM_ConfigClockSource+0xd4>
 8006e8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e92:	f200 8087 	bhi.w	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006e96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e9a:	f000 8086 	beq.w	8006faa <HAL_TIM_ConfigClockSource+0x172>
 8006e9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ea2:	d87f      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ea4:	2b70      	cmp	r3, #112	; 0x70
 8006ea6:	d01a      	beq.n	8006ede <HAL_TIM_ConfigClockSource+0xa6>
 8006ea8:	2b70      	cmp	r3, #112	; 0x70
 8006eaa:	d87b      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eac:	2b60      	cmp	r3, #96	; 0x60
 8006eae:	d050      	beq.n	8006f52 <HAL_TIM_ConfigClockSource+0x11a>
 8006eb0:	2b60      	cmp	r3, #96	; 0x60
 8006eb2:	d877      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006eb4:	2b50      	cmp	r3, #80	; 0x50
 8006eb6:	d03c      	beq.n	8006f32 <HAL_TIM_ConfigClockSource+0xfa>
 8006eb8:	2b50      	cmp	r3, #80	; 0x50
 8006eba:	d873      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ebc:	2b40      	cmp	r3, #64	; 0x40
 8006ebe:	d058      	beq.n	8006f72 <HAL_TIM_ConfigClockSource+0x13a>
 8006ec0:	2b40      	cmp	r3, #64	; 0x40
 8006ec2:	d86f      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec4:	2b30      	cmp	r3, #48	; 0x30
 8006ec6:	d064      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ec8:	2b30      	cmp	r3, #48	; 0x30
 8006eca:	d86b      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d060      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ed0:	2b20      	cmp	r3, #32
 8006ed2:	d867      	bhi.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d05c      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x15a>
 8006ed8:	2b10      	cmp	r3, #16
 8006eda:	d05a      	beq.n	8006f92 <HAL_TIM_ConfigClockSource+0x15a>
 8006edc:	e062      	b.n	8006fa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6818      	ldr	r0, [r3, #0]
 8006ee2:	683b      	ldr	r3, [r7, #0]
 8006ee4:	6899      	ldr	r1, [r3, #8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	f000 fb67 	bl	80075c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	689b      	ldr	r3, [r3, #8]
 8006ef8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	609a      	str	r2, [r3, #8]
      break;
 8006f0a:	e04f      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6818      	ldr	r0, [r3, #0]
 8006f10:	683b      	ldr	r3, [r7, #0]
 8006f12:	6899      	ldr	r1, [r3, #8]
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685a      	ldr	r2, [r3, #4]
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	68db      	ldr	r3, [r3, #12]
 8006f1c:	f000 fb50 	bl	80075c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f2e:	609a      	str	r2, [r3, #8]
      break;
 8006f30:	e03c      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	6818      	ldr	r0, [r3, #0]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	6859      	ldr	r1, [r3, #4]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	461a      	mov	r2, r3
 8006f40:	f000 fac4 	bl	80074cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2150      	movs	r1, #80	; 0x50
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f000 fb1d 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 8006f50:	e02c      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6818      	ldr	r0, [r3, #0]
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	6859      	ldr	r1, [r3, #4]
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	68db      	ldr	r3, [r3, #12]
 8006f5e:	461a      	mov	r2, r3
 8006f60:	f000 fae3 	bl	800752a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	2160      	movs	r1, #96	; 0x60
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f000 fb0d 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 8006f70:	e01c      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6818      	ldr	r0, [r3, #0]
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	6859      	ldr	r1, [r3, #4]
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	68db      	ldr	r3, [r3, #12]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	f000 faa4 	bl	80074cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2140      	movs	r1, #64	; 0x40
 8006f8a:	4618      	mov	r0, r3
 8006f8c:	f000 fafd 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 8006f90:	e00c      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4619      	mov	r1, r3
 8006f9c:	4610      	mov	r0, r2
 8006f9e:	f000 faf4 	bl	800758a <TIM_ITRx_SetConfig>
      break;
 8006fa2:	e003      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	73fb      	strb	r3, [r7, #15]
      break;
 8006fa8:	e000      	b.n	8006fac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006faa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2201      	movs	r2, #1
 8006fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3710      	adds	r7, #16
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}

08006fc6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fc6:	b480      	push	{r7}
 8006fc8:	b083      	sub	sp, #12
 8006fca:	af00      	add	r7, sp, #0
 8006fcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006fce:	bf00      	nop
 8006fd0:	370c      	adds	r7, #12
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr

08006fda <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006fda:	b480      	push	{r7}
 8006fdc:	b083      	sub	sp, #12
 8006fde:	af00      	add	r7, sp, #0
 8006fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006fe2:	bf00      	nop
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b083      	sub	sp, #12
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007002:	b480      	push	{r7}
 8007004:	b083      	sub	sp, #12
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800700a:	bf00      	nop
 800700c:	370c      	adds	r7, #12
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800701e:	bf00      	nop
 8007020:	370c      	adds	r7, #12
 8007022:	46bd      	mov	sp, r7
 8007024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007028:	4770      	bx	lr
	...

0800702c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	4a40      	ldr	r2, [pc, #256]	; (8007140 <TIM_Base_SetConfig+0x114>)
 8007040:	4293      	cmp	r3, r2
 8007042:	d013      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800704a:	d00f      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	4a3d      	ldr	r2, [pc, #244]	; (8007144 <TIM_Base_SetConfig+0x118>)
 8007050:	4293      	cmp	r3, r2
 8007052:	d00b      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	4a3c      	ldr	r2, [pc, #240]	; (8007148 <TIM_Base_SetConfig+0x11c>)
 8007058:	4293      	cmp	r3, r2
 800705a:	d007      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	4a3b      	ldr	r2, [pc, #236]	; (800714c <TIM_Base_SetConfig+0x120>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d003      	beq.n	800706c <TIM_Base_SetConfig+0x40>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	4a3a      	ldr	r2, [pc, #232]	; (8007150 <TIM_Base_SetConfig+0x124>)
 8007068:	4293      	cmp	r3, r2
 800706a:	d108      	bne.n	800707e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4313      	orrs	r3, r2
 800707c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4a2f      	ldr	r2, [pc, #188]	; (8007140 <TIM_Base_SetConfig+0x114>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d02b      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800708c:	d027      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	4a2c      	ldr	r2, [pc, #176]	; (8007144 <TIM_Base_SetConfig+0x118>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d023      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	4a2b      	ldr	r2, [pc, #172]	; (8007148 <TIM_Base_SetConfig+0x11c>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d01f      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	4a2a      	ldr	r2, [pc, #168]	; (800714c <TIM_Base_SetConfig+0x120>)
 80070a2:	4293      	cmp	r3, r2
 80070a4:	d01b      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a29      	ldr	r2, [pc, #164]	; (8007150 <TIM_Base_SetConfig+0x124>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d017      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a28      	ldr	r2, [pc, #160]	; (8007154 <TIM_Base_SetConfig+0x128>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d013      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	4a27      	ldr	r2, [pc, #156]	; (8007158 <TIM_Base_SetConfig+0x12c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00f      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	4a26      	ldr	r2, [pc, #152]	; (800715c <TIM_Base_SetConfig+0x130>)
 80070c2:	4293      	cmp	r3, r2
 80070c4:	d00b      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	4a25      	ldr	r2, [pc, #148]	; (8007160 <TIM_Base_SetConfig+0x134>)
 80070ca:	4293      	cmp	r3, r2
 80070cc:	d007      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4a24      	ldr	r2, [pc, #144]	; (8007164 <TIM_Base_SetConfig+0x138>)
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d003      	beq.n	80070de <TIM_Base_SetConfig+0xb2>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4a23      	ldr	r2, [pc, #140]	; (8007168 <TIM_Base_SetConfig+0x13c>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d108      	bne.n	80070f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80070e6:	683b      	ldr	r3, [r7, #0]
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4313      	orrs	r3, r2
 80070ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	4313      	orrs	r3, r2
 80070fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	68fa      	ldr	r2, [r7, #12]
 8007102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	689a      	ldr	r2, [r3, #8]
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	681a      	ldr	r2, [r3, #0]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a0a      	ldr	r2, [pc, #40]	; (8007140 <TIM_Base_SetConfig+0x114>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0xf8>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a0c      	ldr	r2, [pc, #48]	; (8007150 <TIM_Base_SetConfig+0x124>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d103      	bne.n	800712c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	691a      	ldr	r2, [r3, #16]
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	615a      	str	r2, [r3, #20]
}
 8007132:	bf00      	nop
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40010000 	.word	0x40010000
 8007144:	40000400 	.word	0x40000400
 8007148:	40000800 	.word	0x40000800
 800714c:	40000c00 	.word	0x40000c00
 8007150:	40010400 	.word	0x40010400
 8007154:	40014000 	.word	0x40014000
 8007158:	40014400 	.word	0x40014400
 800715c:	40014800 	.word	0x40014800
 8007160:	40001800 	.word	0x40001800
 8007164:	40001c00 	.word	0x40001c00
 8007168:	40002000 	.word	0x40002000

0800716c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800716c:	b480      	push	{r7}
 800716e:	b087      	sub	sp, #28
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	6a1b      	ldr	r3, [r3, #32]
 800717a:	f023 0201 	bic.w	r2, r3, #1
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6a1b      	ldr	r3, [r3, #32]
 8007186:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	685b      	ldr	r3, [r3, #4]
 800718c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	699b      	ldr	r3, [r3, #24]
 8007192:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800719a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68fa      	ldr	r2, [r7, #12]
 80071aa:	4313      	orrs	r3, r2
 80071ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f023 0302 	bic.w	r3, r3, #2
 80071b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	697a      	ldr	r2, [r7, #20]
 80071bc:	4313      	orrs	r3, r2
 80071be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a20      	ldr	r2, [pc, #128]	; (8007244 <TIM_OC1_SetConfig+0xd8>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d003      	beq.n	80071d0 <TIM_OC1_SetConfig+0x64>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a1f      	ldr	r2, [pc, #124]	; (8007248 <TIM_OC1_SetConfig+0xdc>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d10c      	bne.n	80071ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	f023 0308 	bic.w	r3, r3, #8
 80071d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	68db      	ldr	r3, [r3, #12]
 80071dc:	697a      	ldr	r2, [r7, #20]
 80071de:	4313      	orrs	r3, r2
 80071e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f023 0304 	bic.w	r3, r3, #4
 80071e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a15      	ldr	r2, [pc, #84]	; (8007244 <TIM_OC1_SetConfig+0xd8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d003      	beq.n	80071fa <TIM_OC1_SetConfig+0x8e>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a14      	ldr	r2, [pc, #80]	; (8007248 <TIM_OC1_SetConfig+0xdc>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d111      	bne.n	800721e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007200:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007208:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	695b      	ldr	r3, [r3, #20]
 800720e:	693a      	ldr	r2, [r7, #16]
 8007210:	4313      	orrs	r3, r2
 8007212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007214:	683b      	ldr	r3, [r7, #0]
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	685a      	ldr	r2, [r3, #4]
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	697a      	ldr	r2, [r7, #20]
 8007236:	621a      	str	r2, [r3, #32]
}
 8007238:	bf00      	nop
 800723a:	371c      	adds	r7, #28
 800723c:	46bd      	mov	sp, r7
 800723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007242:	4770      	bx	lr
 8007244:	40010000 	.word	0x40010000
 8007248:	40010400 	.word	0x40010400

0800724c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800724c:	b480      	push	{r7}
 800724e:	b087      	sub	sp, #28
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	6a1b      	ldr	r3, [r3, #32]
 800725a:	f023 0210 	bic.w	r2, r3, #16
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6a1b      	ldr	r3, [r3, #32]
 8007266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	699b      	ldr	r3, [r3, #24]
 8007272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800727a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007282:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	021b      	lsls	r3, r3, #8
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	4313      	orrs	r3, r2
 800728e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f023 0320 	bic.w	r3, r3, #32
 8007296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007298:	683b      	ldr	r3, [r7, #0]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	011b      	lsls	r3, r3, #4
 800729e:	697a      	ldr	r2, [r7, #20]
 80072a0:	4313      	orrs	r3, r2
 80072a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	4a22      	ldr	r2, [pc, #136]	; (8007330 <TIM_OC2_SetConfig+0xe4>)
 80072a8:	4293      	cmp	r3, r2
 80072aa:	d003      	beq.n	80072b4 <TIM_OC2_SetConfig+0x68>
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	4a21      	ldr	r2, [pc, #132]	; (8007334 <TIM_OC2_SetConfig+0xe8>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d10d      	bne.n	80072d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	68db      	ldr	r3, [r3, #12]
 80072c0:	011b      	lsls	r3, r3, #4
 80072c2:	697a      	ldr	r2, [r7, #20]
 80072c4:	4313      	orrs	r3, r2
 80072c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80072ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a17      	ldr	r2, [pc, #92]	; (8007330 <TIM_OC2_SetConfig+0xe4>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_OC2_SetConfig+0x94>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a16      	ldr	r2, [pc, #88]	; (8007334 <TIM_OC2_SetConfig+0xe8>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d113      	bne.n	8007308 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80072e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80072ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	695b      	ldr	r3, [r3, #20]
 80072f4:	009b      	lsls	r3, r3, #2
 80072f6:	693a      	ldr	r2, [r7, #16]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	699b      	ldr	r3, [r3, #24]
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	693a      	ldr	r2, [r7, #16]
 8007304:	4313      	orrs	r3, r2
 8007306:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	693a      	ldr	r2, [r7, #16]
 800730c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	68fa      	ldr	r2, [r7, #12]
 8007312:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	697a      	ldr	r2, [r7, #20]
 8007320:	621a      	str	r2, [r3, #32]
}
 8007322:	bf00      	nop
 8007324:	371c      	adds	r7, #28
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	40010000 	.word	0x40010000
 8007334:	40010400 	.word	0x40010400

08007338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
 8007340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6a1b      	ldr	r3, [r3, #32]
 8007346:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a1b      	ldr	r3, [r3, #32]
 8007352:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	685b      	ldr	r3, [r3, #4]
 8007358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	69db      	ldr	r3, [r3, #28]
 800735e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	f023 0303 	bic.w	r3, r3, #3
 800736e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68fa      	ldr	r2, [r7, #12]
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800737a:	697b      	ldr	r3, [r7, #20]
 800737c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	021b      	lsls	r3, r3, #8
 8007388:	697a      	ldr	r2, [r7, #20]
 800738a:	4313      	orrs	r3, r2
 800738c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a21      	ldr	r2, [pc, #132]	; (8007418 <TIM_OC3_SetConfig+0xe0>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d003      	beq.n	800739e <TIM_OC3_SetConfig+0x66>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a20      	ldr	r2, [pc, #128]	; (800741c <TIM_OC3_SetConfig+0xe4>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d10d      	bne.n	80073ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800739e:	697b      	ldr	r3, [r7, #20]
 80073a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	021b      	lsls	r3, r3, #8
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	4313      	orrs	r3, r2
 80073b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	4a16      	ldr	r2, [pc, #88]	; (8007418 <TIM_OC3_SetConfig+0xe0>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d003      	beq.n	80073ca <TIM_OC3_SetConfig+0x92>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	4a15      	ldr	r2, [pc, #84]	; (800741c <TIM_OC3_SetConfig+0xe4>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d113      	bne.n	80073f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80073d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	695b      	ldr	r3, [r3, #20]
 80073de:	011b      	lsls	r3, r3, #4
 80073e0:	693a      	ldr	r2, [r7, #16]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	011b      	lsls	r3, r3, #4
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	693a      	ldr	r2, [r7, #16]
 80073f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	68fa      	ldr	r2, [r7, #12]
 80073fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	685a      	ldr	r2, [r3, #4]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	697a      	ldr	r2, [r7, #20]
 800740a:	621a      	str	r2, [r3, #32]
}
 800740c:	bf00      	nop
 800740e:	371c      	adds	r7, #28
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	40010000 	.word	0x40010000
 800741c:	40010400 	.word	0x40010400

08007420 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007420:	b480      	push	{r7}
 8007422:	b087      	sub	sp, #28
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a1b      	ldr	r3, [r3, #32]
 800742e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6a1b      	ldr	r3, [r3, #32]
 800743a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	69db      	ldr	r3, [r3, #28]
 8007446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800744e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007456:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	021b      	lsls	r3, r3, #8
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	4313      	orrs	r3, r2
 8007462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800746a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	689b      	ldr	r3, [r3, #8]
 8007470:	031b      	lsls	r3, r3, #12
 8007472:	693a      	ldr	r2, [r7, #16]
 8007474:	4313      	orrs	r3, r2
 8007476:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a12      	ldr	r2, [pc, #72]	; (80074c4 <TIM_OC4_SetConfig+0xa4>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_OC4_SetConfig+0x68>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a11      	ldr	r2, [pc, #68]	; (80074c8 <TIM_OC4_SetConfig+0xa8>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d109      	bne.n	800749c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800748e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	695b      	ldr	r3, [r3, #20]
 8007494:	019b      	lsls	r3, r3, #6
 8007496:	697a      	ldr	r2, [r7, #20]
 8007498:	4313      	orrs	r3, r2
 800749a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	697a      	ldr	r2, [r7, #20]
 80074a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	68fa      	ldr	r2, [r7, #12]
 80074a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	685a      	ldr	r2, [r3, #4]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	693a      	ldr	r2, [r7, #16]
 80074b4:	621a      	str	r2, [r3, #32]
}
 80074b6:	bf00      	nop
 80074b8:	371c      	adds	r7, #28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c0:	4770      	bx	lr
 80074c2:	bf00      	nop
 80074c4:	40010000 	.word	0x40010000
 80074c8:	40010400 	.word	0x40010400

080074cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80074cc:	b480      	push	{r7}
 80074ce:	b087      	sub	sp, #28
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	6a1b      	ldr	r3, [r3, #32]
 80074dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	f023 0201 	bic.w	r2, r3, #1
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80074f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	011b      	lsls	r3, r3, #4
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4313      	orrs	r3, r2
 8007500:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	f023 030a 	bic.w	r3, r3, #10
 8007508:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800750a:	697a      	ldr	r2, [r7, #20]
 800750c:	68bb      	ldr	r3, [r7, #8]
 800750e:	4313      	orrs	r3, r2
 8007510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	693a      	ldr	r2, [r7, #16]
 8007516:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	697a      	ldr	r2, [r7, #20]
 800751c:	621a      	str	r2, [r3, #32]
}
 800751e:	bf00      	nop
 8007520:	371c      	adds	r7, #28
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800752a:	b480      	push	{r7}
 800752c:	b087      	sub	sp, #28
 800752e:	af00      	add	r7, sp, #0
 8007530:	60f8      	str	r0, [r7, #12]
 8007532:	60b9      	str	r1, [r7, #8]
 8007534:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a1b      	ldr	r3, [r3, #32]
 800753a:	f023 0210 	bic.w	r2, r3, #16
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	699b      	ldr	r3, [r3, #24]
 8007546:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	6a1b      	ldr	r3, [r3, #32]
 800754c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007554:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	031b      	lsls	r3, r3, #12
 800755a:	697a      	ldr	r2, [r7, #20]
 800755c:	4313      	orrs	r3, r2
 800755e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007566:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	011b      	lsls	r3, r3, #4
 800756c:	693a      	ldr	r2, [r7, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	697a      	ldr	r2, [r7, #20]
 8007576:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	693a      	ldr	r2, [r7, #16]
 800757c:	621a      	str	r2, [r3, #32]
}
 800757e:	bf00      	nop
 8007580:	371c      	adds	r7, #28
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr

0800758a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800758a:	b480      	push	{r7}
 800758c:	b085      	sub	sp, #20
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
 8007592:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	689b      	ldr	r3, [r3, #8]
 8007598:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80075a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	f043 0307 	orr.w	r3, r3, #7
 80075ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	68fa      	ldr	r2, [r7, #12]
 80075b2:	609a      	str	r2, [r3, #8]
}
 80075b4:	bf00      	nop
 80075b6:	3714      	adds	r7, #20
 80075b8:	46bd      	mov	sp, r7
 80075ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075be:	4770      	bx	lr

080075c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80075c0:	b480      	push	{r7}
 80075c2:	b087      	sub	sp, #28
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80075da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80075dc:	683b      	ldr	r3, [r7, #0]
 80075de:	021a      	lsls	r2, r3, #8
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	431a      	orrs	r2, r3
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	4313      	orrs	r3, r2
 80075e8:	697a      	ldr	r2, [r7, #20]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	697a      	ldr	r2, [r7, #20]
 80075f2:	609a      	str	r2, [r3, #8]
}
 80075f4:	bf00      	nop
 80075f6:	371c      	adds	r7, #28
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d101      	bne.n	8007618 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007614:	2302      	movs	r3, #2
 8007616:	e05a      	b.n	80076ce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2201      	movs	r2, #1
 800761c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2202      	movs	r2, #2
 8007624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	689b      	ldr	r3, [r3, #8]
 8007636:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800763e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	68fa      	ldr	r2, [r7, #12]
 8007650:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	4a21      	ldr	r2, [pc, #132]	; (80076dc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007658:	4293      	cmp	r3, r2
 800765a:	d022      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007664:	d01d      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	4a1d      	ldr	r2, [pc, #116]	; (80076e0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d018      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a1b      	ldr	r2, [pc, #108]	; (80076e4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4a1a      	ldr	r2, [pc, #104]	; (80076e8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007680:	4293      	cmp	r3, r2
 8007682:	d00e      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a18      	ldr	r2, [pc, #96]	; (80076ec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d009      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a17      	ldr	r2, [pc, #92]	; (80076f0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d004      	beq.n	80076a2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a15      	ldr	r2, [pc, #84]	; (80076f4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d10c      	bne.n	80076bc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	68ba      	ldr	r2, [r7, #8]
 80076ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2201      	movs	r2, #1
 80076c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80076cc:	2300      	movs	r3, #0
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	3714      	adds	r7, #20
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	40010000 	.word	0x40010000
 80076e0:	40000400 	.word	0x40000400
 80076e4:	40000800 	.word	0x40000800
 80076e8:	40000c00 	.word	0x40000c00
 80076ec:	40010400 	.word	0x40010400
 80076f0:	40014000 	.word	0x40014000
 80076f4:	40001800 	.word	0x40001800

080076f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d101      	bne.n	8007732 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	e03f      	b.n	80077b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b00      	cmp	r3, #0
 800773c:	d106      	bne.n	800774c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2200      	movs	r2, #0
 8007742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f7fa fa8e 	bl	8001c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2224      	movs	r2, #36	; 0x24
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	68da      	ldr	r2, [r3, #12]
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007762:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fc7b 	bl	8008060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691a      	ldr	r2, [r3, #16]
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007778:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	695a      	ldr	r2, [r3, #20]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007788:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68da      	ldr	r2, [r3, #12]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007798:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2220      	movs	r2, #32
 80077a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2220      	movs	r2, #32
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80077b0:	2300      	movs	r3, #0
}
 80077b2:	4618      	mov	r0, r3
 80077b4:	3708      	adds	r7, #8
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}
	...

080077bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b0ba      	sub	sp, #232	; 0xe8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	695b      	ldr	r3, [r3, #20]
 80077de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80077e2:	2300      	movs	r3, #0
 80077e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80077e8:	2300      	movs	r3, #0
 80077ea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80077ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f2:	f003 030f 	and.w	r3, r3, #15
 80077f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80077fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d10f      	bne.n	8007822 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d009      	beq.n	8007822 <HAL_UART_IRQHandler+0x66>
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d003      	beq.n	8007822 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800781a:	6878      	ldr	r0, [r7, #4]
 800781c:	f000 fb65 	bl	8007eea <UART_Receive_IT>
      return;
 8007820:	e256      	b.n	8007cd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007826:	2b00      	cmp	r3, #0
 8007828:	f000 80de 	beq.w	80079e8 <HAL_UART_IRQHandler+0x22c>
 800782c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007830:	f003 0301 	and.w	r3, r3, #1
 8007834:	2b00      	cmp	r3, #0
 8007836:	d106      	bne.n	8007846 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800783c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 80d1 	beq.w	80079e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800784a:	f003 0301 	and.w	r3, r3, #1
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00b      	beq.n	800786a <HAL_UART_IRQHandler+0xae>
 8007852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007856:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800785a:	2b00      	cmp	r3, #0
 800785c:	d005      	beq.n	800786a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	f043 0201 	orr.w	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800786a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800786e:	f003 0304 	and.w	r3, r3, #4
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00b      	beq.n	800788e <HAL_UART_IRQHandler+0xd2>
 8007876:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800787a:	f003 0301 	and.w	r3, r3, #1
 800787e:	2b00      	cmp	r3, #0
 8007880:	d005      	beq.n	800788e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007886:	f043 0202 	orr.w	r2, r3, #2
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800788e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007892:	f003 0302 	and.w	r3, r3, #2
 8007896:	2b00      	cmp	r3, #0
 8007898:	d00b      	beq.n	80078b2 <HAL_UART_IRQHandler+0xf6>
 800789a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800789e:	f003 0301 	and.w	r3, r3, #1
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d005      	beq.n	80078b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078aa:	f043 0204 	orr.w	r2, r3, #4
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80078b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078b6:	f003 0308 	and.w	r3, r3, #8
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d011      	beq.n	80078e2 <HAL_UART_IRQHandler+0x126>
 80078be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078c2:	f003 0320 	and.w	r3, r3, #32
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d105      	bne.n	80078d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80078ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078ce:	f003 0301 	and.w	r3, r3, #1
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078da:	f043 0208 	orr.w	r2, r3, #8
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 81ed 	beq.w	8007cc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078f0:	f003 0320 	and.w	r3, r3, #32
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d008      	beq.n	800790a <HAL_UART_IRQHandler+0x14e>
 80078f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d002      	beq.n	800790a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 faf0 	bl	8007eea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695b      	ldr	r3, [r3, #20]
 8007910:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007914:	2b40      	cmp	r3, #64	; 0x40
 8007916:	bf0c      	ite	eq
 8007918:	2301      	moveq	r3, #1
 800791a:	2300      	movne	r3, #0
 800791c:	b2db      	uxtb	r3, r3
 800791e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	f003 0308 	and.w	r3, r3, #8
 800792a:	2b00      	cmp	r3, #0
 800792c:	d103      	bne.n	8007936 <HAL_UART_IRQHandler+0x17a>
 800792e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007932:	2b00      	cmp	r3, #0
 8007934:	d04f      	beq.n	80079d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007936:	6878      	ldr	r0, [r7, #4]
 8007938:	f000 f9f8 	bl	8007d2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d141      	bne.n	80079ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	3314      	adds	r3, #20
 8007950:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007954:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007960:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007964:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3314      	adds	r3, #20
 8007972:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007976:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800797a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007982:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800798e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d1d9      	bne.n	800794a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800799a:	2b00      	cmp	r3, #0
 800799c:	d013      	beq.n	80079c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079a2:	4a7d      	ldr	r2, [pc, #500]	; (8007b98 <HAL_UART_IRQHandler+0x3dc>)
 80079a4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079aa:	4618      	mov	r0, r3
 80079ac:	f7fa ffd6 	bl	800295c <HAL_DMA_Abort_IT>
 80079b0:	4603      	mov	r3, r0
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d016      	beq.n	80079e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079bc:	687a      	ldr	r2, [r7, #4]
 80079be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079c0:	4610      	mov	r0, r2
 80079c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079c4:	e00e      	b.n	80079e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f000 f99a 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079cc:	e00a      	b.n	80079e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 f996 	bl	8007d00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079d4:	e006      	b.n	80079e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f992 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80079e2:	e170      	b.n	8007cc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079e4:	bf00      	nop
    return;
 80079e6:	e16e      	b.n	8007cc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079ec:	2b01      	cmp	r3, #1
 80079ee:	f040 814a 	bne.w	8007c86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80079f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079f6:	f003 0310 	and.w	r3, r3, #16
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	f000 8143 	beq.w	8007c86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007a00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a04:	f003 0310 	and.w	r3, r3, #16
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 813c 	beq.w	8007c86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a0e:	2300      	movs	r3, #0
 8007a10:	60bb      	str	r3, [r7, #8]
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	60bb      	str	r3, [r7, #8]
 8007a22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	695b      	ldr	r3, [r3, #20]
 8007a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a2e:	2b40      	cmp	r3, #64	; 0x40
 8007a30:	f040 80b4 	bne.w	8007b9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	f000 8140 	beq.w	8007cca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007a4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a52:	429a      	cmp	r2, r3
 8007a54:	f080 8139 	bcs.w	8007cca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007a5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a6a:	f000 8088 	beq.w	8007b7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007a84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007a88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007a8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	330c      	adds	r3, #12
 8007a96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007a9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007a9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aa2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007aa6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007aaa:	e841 2300 	strex	r3, r2, [r1]
 8007aae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1d9      	bne.n	8007a6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	3314      	adds	r3, #20
 8007ac0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ac4:	e853 3f00 	ldrex	r3, [r3]
 8007ac8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007aca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007acc:	f023 0301 	bic.w	r3, r3, #1
 8007ad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3314      	adds	r3, #20
 8007ada:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007ade:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007ae2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007ae6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007aea:	e841 2300 	strex	r3, r2, [r1]
 8007aee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007af0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d1e1      	bne.n	8007aba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	3314      	adds	r3, #20
 8007afc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	3314      	adds	r3, #20
 8007b16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b22:	e841 2300 	strex	r3, r2, [r1]
 8007b26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1e3      	bne.n	8007af6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2220      	movs	r2, #32
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	330c      	adds	r3, #12
 8007b42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b46:	e853 3f00 	ldrex	r3, [r3]
 8007b4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b4e:	f023 0310 	bic.w	r3, r3, #16
 8007b52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	330c      	adds	r3, #12
 8007b5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007b60:	65ba      	str	r2, [r7, #88]	; 0x58
 8007b62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007b68:	e841 2300 	strex	r3, r2, [r1]
 8007b6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007b6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d1e3      	bne.n	8007b3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f7fa fe7f 	bl	800287c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	1ad3      	subs	r3, r2, r3
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	f000 f8c0 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007b94:	e099      	b.n	8007cca <HAL_UART_IRQHandler+0x50e>
 8007b96:	bf00      	nop
 8007b98:	08007df3 	.word	0x08007df3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	1ad3      	subs	r3, r2, r3
 8007ba8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007bb0:	b29b      	uxth	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	f000 808b 	beq.w	8007cce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007bb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	f000 8086 	beq.w	8007cce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	330c      	adds	r3, #12
 8007bc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bcc:	e853 3f00 	ldrex	r3, [r3]
 8007bd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007be6:	647a      	str	r2, [r7, #68]	; 0x44
 8007be8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007bec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bee:	e841 2300 	strex	r3, r2, [r1]
 8007bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007bf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d1e3      	bne.n	8007bc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	3314      	adds	r3, #20
 8007c00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c04:	e853 3f00 	ldrex	r3, [r3]
 8007c08:	623b      	str	r3, [r7, #32]
   return(result);
 8007c0a:	6a3b      	ldr	r3, [r7, #32]
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	3314      	adds	r3, #20
 8007c1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c1e:	633a      	str	r2, [r7, #48]	; 0x30
 8007c20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c26:	e841 2300 	strex	r3, r2, [r1]
 8007c2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1e3      	bne.n	8007bfa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2220      	movs	r2, #32
 8007c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	2200      	movs	r2, #0
 8007c3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	330c      	adds	r3, #12
 8007c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0310 	bic.w	r3, r3, #16
 8007c56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	330c      	adds	r3, #12
 8007c60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007c64:	61fa      	str	r2, [r7, #28]
 8007c66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	69b9      	ldr	r1, [r7, #24]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	617b      	str	r3, [r7, #20]
   return(result);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e3      	bne.n	8007c40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c7c:	4619      	mov	r1, r3
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f848 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007c84:	e023      	b.n	8007cce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d009      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x4ea>
 8007c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d003      	beq.n	8007ca6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 f8bb 	bl	8007e1a <UART_Transmit_IT>
    return;
 8007ca4:	e014      	b.n	8007cd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00e      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x514>
 8007cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d008      	beq.n	8007cd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007cbe:	6878      	ldr	r0, [r7, #4]
 8007cc0:	f000 f8fb 	bl	8007eba <UART_EndTransmit_IT>
    return;
 8007cc4:	e004      	b.n	8007cd0 <HAL_UART_IRQHandler+0x514>
    return;
 8007cc6:	bf00      	nop
 8007cc8:	e002      	b.n	8007cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8007cca:	bf00      	nop
 8007ccc:	e000      	b.n	8007cd0 <HAL_UART_IRQHandler+0x514>
      return;
 8007cce:	bf00      	nop
  }
}
 8007cd0:	37e8      	adds	r7, #232	; 0xe8
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	bd80      	pop	{r7, pc}
 8007cd6:	bf00      	nop

08007cd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007ce0:	bf00      	nop
 8007ce2:	370c      	adds	r7, #12
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cea:	4770      	bx	lr

08007cec <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007cec:	b480      	push	{r7}
 8007cee:	b083      	sub	sp, #12
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b083      	sub	sp, #12
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007d08:	bf00      	nop
 8007d0a:	370c      	adds	r7, #12
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d12:	4770      	bx	lr

08007d14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
 8007d1c:	460b      	mov	r3, r1
 8007d1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d20:	bf00      	nop
 8007d22:	370c      	adds	r7, #12
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b095      	sub	sp, #84	; 0x54
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	330c      	adds	r3, #12
 8007d3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	330c      	adds	r3, #12
 8007d52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d54:	643a      	str	r2, [r7, #64]	; 0x40
 8007d56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e5      	bne.n	8007d34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	3314      	adds	r3, #20
 8007d6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6a3b      	ldr	r3, [r7, #32]
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	f023 0301 	bic.w	r3, r3, #1
 8007d7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	3314      	adds	r3, #20
 8007d86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007d88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007d8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007d8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007d90:	e841 2300 	strex	r3, r2, [r1]
 8007d94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d1e5      	bne.n	8007d68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d119      	bne.n	8007dd8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	330c      	adds	r3, #12
 8007daa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	f023 0310 	bic.w	r3, r3, #16
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	330c      	adds	r3, #12
 8007dc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007dc4:	61ba      	str	r2, [r7, #24]
 8007dc6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6979      	ldr	r1, [r7, #20]
 8007dca:	69ba      	ldr	r2, [r7, #24]
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	613b      	str	r3, [r7, #16]
   return(result);
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007de6:	bf00      	nop
 8007de8:	3754      	adds	r7, #84	; 0x54
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr

08007df2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007df2:	b580      	push	{r7, lr}
 8007df4:	b084      	sub	sp, #16
 8007df6:	af00      	add	r7, sp, #0
 8007df8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	2200      	movs	r2, #0
 8007e04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007e0c:	68f8      	ldr	r0, [r7, #12]
 8007e0e:	f7ff ff77 	bl	8007d00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e12:	bf00      	nop
 8007e14:	3710      	adds	r7, #16
 8007e16:	46bd      	mov	sp, r7
 8007e18:	bd80      	pop	{r7, pc}

08007e1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b085      	sub	sp, #20
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b21      	cmp	r3, #33	; 0x21
 8007e2c:	d13e      	bne.n	8007eac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	689b      	ldr	r3, [r3, #8]
 8007e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007e36:	d114      	bne.n	8007e62 <UART_Transmit_IT+0x48>
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d110      	bne.n	8007e62 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6a1b      	ldr	r3, [r3, #32]
 8007e44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	881b      	ldrh	r3, [r3, #0]
 8007e4a:	461a      	mov	r2, r3
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	1c9a      	adds	r2, r3, #2
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	621a      	str	r2, [r3, #32]
 8007e60:	e008      	b.n	8007e74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a1b      	ldr	r3, [r3, #32]
 8007e66:	1c59      	adds	r1, r3, #1
 8007e68:	687a      	ldr	r2, [r7, #4]
 8007e6a:	6211      	str	r1, [r2, #32]
 8007e6c:	781a      	ldrb	r2, [r3, #0]
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007e78:	b29b      	uxth	r3, r3
 8007e7a:	3b01      	subs	r3, #1
 8007e7c:	b29b      	uxth	r3, r3
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	4619      	mov	r1, r3
 8007e82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d10f      	bne.n	8007ea8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	68da      	ldr	r2, [r3, #12]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007ea6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	e000      	b.n	8007eae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007eac:	2302      	movs	r3, #2
  }
}
 8007eae:	4618      	mov	r0, r3
 8007eb0:	3714      	adds	r7, #20
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	68da      	ldr	r2, [r3, #12]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007ed0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2220      	movs	r2, #32
 8007ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	f7ff fefc 	bl	8007cd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007ee0:	2300      	movs	r3, #0
}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3708      	adds	r7, #8
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}

08007eea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007eea:	b580      	push	{r7, lr}
 8007eec:	b08c      	sub	sp, #48	; 0x30
 8007eee:	af00      	add	r7, sp, #0
 8007ef0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ef8:	b2db      	uxtb	r3, r3
 8007efa:	2b22      	cmp	r3, #34	; 0x22
 8007efc:	f040 80ab 	bne.w	8008056 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f08:	d117      	bne.n	8007f3a <UART_Receive_IT+0x50>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	691b      	ldr	r3, [r3, #16]
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d113      	bne.n	8007f3a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007f12:	2300      	movs	r3, #0
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007f28:	b29a      	uxth	r2, r3
 8007f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f32:	1c9a      	adds	r2, r3, #2
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28
 8007f38:	e026      	b.n	8007f88 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007f40:	2300      	movs	r3, #0
 8007f42:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f4c:	d007      	beq.n	8007f5e <UART_Receive_IT+0x74>
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	689b      	ldr	r3, [r3, #8]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d10a      	bne.n	8007f6c <UART_Receive_IT+0x82>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	691b      	ldr	r3, [r3, #16]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d106      	bne.n	8007f6c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	b2da      	uxtb	r2, r3
 8007f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f68:	701a      	strb	r2, [r3, #0]
 8007f6a:	e008      	b.n	8007f7e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	b2db      	uxtb	r3, r3
 8007f74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f78:	b2da      	uxtb	r2, r3
 8007f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f7c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f82:	1c5a      	adds	r2, r3, #1
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007f8c:	b29b      	uxth	r3, r3
 8007f8e:	3b01      	subs	r3, #1
 8007f90:	b29b      	uxth	r3, r3
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	4619      	mov	r1, r3
 8007f96:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d15a      	bne.n	8008052 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68da      	ldr	r2, [r3, #12]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f022 0220 	bic.w	r2, r2, #32
 8007faa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68da      	ldr	r2, [r3, #12]
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007fba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695a      	ldr	r2, [r3, #20]
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f022 0201 	bic.w	r2, r2, #1
 8007fca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2220      	movs	r2, #32
 8007fd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d135      	bne.n	8008048 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	330c      	adds	r3, #12
 8007fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	e853 3f00 	ldrex	r3, [r3]
 8007ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	f023 0310 	bic.w	r3, r3, #16
 8007ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	330c      	adds	r3, #12
 8008000:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008002:	623a      	str	r2, [r7, #32]
 8008004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008006:	69f9      	ldr	r1, [r7, #28]
 8008008:	6a3a      	ldr	r2, [r7, #32]
 800800a:	e841 2300 	strex	r3, r2, [r1]
 800800e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008010:	69bb      	ldr	r3, [r7, #24]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d1e5      	bne.n	8007fe2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0310 	and.w	r3, r3, #16
 8008020:	2b10      	cmp	r3, #16
 8008022:	d10a      	bne.n	800803a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008024:	2300      	movs	r3, #0
 8008026:	60fb      	str	r3, [r7, #12]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60fb      	str	r3, [r7, #12]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800803e:	4619      	mov	r1, r3
 8008040:	6878      	ldr	r0, [r7, #4]
 8008042:	f7ff fe67 	bl	8007d14 <HAL_UARTEx_RxEventCallback>
 8008046:	e002      	b.n	800804e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f7ff fe4f 	bl	8007cec <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800804e:	2300      	movs	r3, #0
 8008050:	e002      	b.n	8008058 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008052:	2300      	movs	r3, #0
 8008054:	e000      	b.n	8008058 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8008056:	2302      	movs	r3, #2
  }
}
 8008058:	4618      	mov	r0, r3
 800805a:	3730      	adds	r7, #48	; 0x30
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008064:	b09f      	sub	sp, #124	; 0x7c
 8008066:	af00      	add	r7, sp, #0
 8008068:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800806a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008074:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008076:	68d9      	ldr	r1, [r3, #12]
 8008078:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	ea40 0301 	orr.w	r3, r0, r1
 8008080:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008082:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008084:	689a      	ldr	r2, [r3, #8]
 8008086:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	431a      	orrs	r2, r3
 800808c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800808e:	695b      	ldr	r3, [r3, #20]
 8008090:	431a      	orrs	r2, r3
 8008092:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	4313      	orrs	r3, r2
 8008098:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800809a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80080a4:	f021 010c 	bic.w	r1, r1, #12
 80080a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80080ae:	430b      	orrs	r3, r1
 80080b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80080b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80080bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080be:	6999      	ldr	r1, [r3, #24]
 80080c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	ea40 0301 	orr.w	r3, r0, r1
 80080c8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80080ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080cc:	681a      	ldr	r2, [r3, #0]
 80080ce:	4bc5      	ldr	r3, [pc, #788]	; (80083e4 <UART_SetConfig+0x384>)
 80080d0:	429a      	cmp	r2, r3
 80080d2:	d004      	beq.n	80080de <UART_SetConfig+0x7e>
 80080d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	4bc3      	ldr	r3, [pc, #780]	; (80083e8 <UART_SetConfig+0x388>)
 80080da:	429a      	cmp	r2, r3
 80080dc:	d103      	bne.n	80080e6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80080de:	f7fd f86d 	bl	80051bc <HAL_RCC_GetPCLK2Freq>
 80080e2:	6778      	str	r0, [r7, #116]	; 0x74
 80080e4:	e002      	b.n	80080ec <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80080e6:	f7fd f855 	bl	8005194 <HAL_RCC_GetPCLK1Freq>
 80080ea:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	69db      	ldr	r3, [r3, #28]
 80080f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080f4:	f040 80b6 	bne.w	8008264 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80080f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080fa:	461c      	mov	r4, r3
 80080fc:	f04f 0500 	mov.w	r5, #0
 8008100:	4622      	mov	r2, r4
 8008102:	462b      	mov	r3, r5
 8008104:	1891      	adds	r1, r2, r2
 8008106:	6439      	str	r1, [r7, #64]	; 0x40
 8008108:	415b      	adcs	r3, r3
 800810a:	647b      	str	r3, [r7, #68]	; 0x44
 800810c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008110:	1912      	adds	r2, r2, r4
 8008112:	eb45 0303 	adc.w	r3, r5, r3
 8008116:	f04f 0000 	mov.w	r0, #0
 800811a:	f04f 0100 	mov.w	r1, #0
 800811e:	00d9      	lsls	r1, r3, #3
 8008120:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008124:	00d0      	lsls	r0, r2, #3
 8008126:	4602      	mov	r2, r0
 8008128:	460b      	mov	r3, r1
 800812a:	1911      	adds	r1, r2, r4
 800812c:	6639      	str	r1, [r7, #96]	; 0x60
 800812e:	416b      	adcs	r3, r5
 8008130:	667b      	str	r3, [r7, #100]	; 0x64
 8008132:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	461a      	mov	r2, r3
 8008138:	f04f 0300 	mov.w	r3, #0
 800813c:	1891      	adds	r1, r2, r2
 800813e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008140:	415b      	adcs	r3, r3
 8008142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008144:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008148:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 800814c:	f7f8 f8a0 	bl	8000290 <__aeabi_uldivmod>
 8008150:	4602      	mov	r2, r0
 8008152:	460b      	mov	r3, r1
 8008154:	4ba5      	ldr	r3, [pc, #660]	; (80083ec <UART_SetConfig+0x38c>)
 8008156:	fba3 2302 	umull	r2, r3, r3, r2
 800815a:	095b      	lsrs	r3, r3, #5
 800815c:	011e      	lsls	r6, r3, #4
 800815e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008160:	461c      	mov	r4, r3
 8008162:	f04f 0500 	mov.w	r5, #0
 8008166:	4622      	mov	r2, r4
 8008168:	462b      	mov	r3, r5
 800816a:	1891      	adds	r1, r2, r2
 800816c:	6339      	str	r1, [r7, #48]	; 0x30
 800816e:	415b      	adcs	r3, r3
 8008170:	637b      	str	r3, [r7, #52]	; 0x34
 8008172:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008176:	1912      	adds	r2, r2, r4
 8008178:	eb45 0303 	adc.w	r3, r5, r3
 800817c:	f04f 0000 	mov.w	r0, #0
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	00d9      	lsls	r1, r3, #3
 8008186:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800818a:	00d0      	lsls	r0, r2, #3
 800818c:	4602      	mov	r2, r0
 800818e:	460b      	mov	r3, r1
 8008190:	1911      	adds	r1, r2, r4
 8008192:	65b9      	str	r1, [r7, #88]	; 0x58
 8008194:	416b      	adcs	r3, r5
 8008196:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008198:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	461a      	mov	r2, r3
 800819e:	f04f 0300 	mov.w	r3, #0
 80081a2:	1891      	adds	r1, r2, r2
 80081a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80081a6:	415b      	adcs	r3, r3
 80081a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80081aa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80081ae:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80081b2:	f7f8 f86d 	bl	8000290 <__aeabi_uldivmod>
 80081b6:	4602      	mov	r2, r0
 80081b8:	460b      	mov	r3, r1
 80081ba:	4b8c      	ldr	r3, [pc, #560]	; (80083ec <UART_SetConfig+0x38c>)
 80081bc:	fba3 1302 	umull	r1, r3, r3, r2
 80081c0:	095b      	lsrs	r3, r3, #5
 80081c2:	2164      	movs	r1, #100	; 0x64
 80081c4:	fb01 f303 	mul.w	r3, r1, r3
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	3332      	adds	r3, #50	; 0x32
 80081ce:	4a87      	ldr	r2, [pc, #540]	; (80083ec <UART_SetConfig+0x38c>)
 80081d0:	fba2 2303 	umull	r2, r3, r2, r3
 80081d4:	095b      	lsrs	r3, r3, #5
 80081d6:	005b      	lsls	r3, r3, #1
 80081d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80081dc:	441e      	add	r6, r3
 80081de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081e0:	4618      	mov	r0, r3
 80081e2:	f04f 0100 	mov.w	r1, #0
 80081e6:	4602      	mov	r2, r0
 80081e8:	460b      	mov	r3, r1
 80081ea:	1894      	adds	r4, r2, r2
 80081ec:	623c      	str	r4, [r7, #32]
 80081ee:	415b      	adcs	r3, r3
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
 80081f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80081f6:	1812      	adds	r2, r2, r0
 80081f8:	eb41 0303 	adc.w	r3, r1, r3
 80081fc:	f04f 0400 	mov.w	r4, #0
 8008200:	f04f 0500 	mov.w	r5, #0
 8008204:	00dd      	lsls	r5, r3, #3
 8008206:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800820a:	00d4      	lsls	r4, r2, #3
 800820c:	4622      	mov	r2, r4
 800820e:	462b      	mov	r3, r5
 8008210:	1814      	adds	r4, r2, r0
 8008212:	653c      	str	r4, [r7, #80]	; 0x50
 8008214:	414b      	adcs	r3, r1
 8008216:	657b      	str	r3, [r7, #84]	; 0x54
 8008218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800821a:	685b      	ldr	r3, [r3, #4]
 800821c:	461a      	mov	r2, r3
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	1891      	adds	r1, r2, r2
 8008224:	61b9      	str	r1, [r7, #24]
 8008226:	415b      	adcs	r3, r3
 8008228:	61fb      	str	r3, [r7, #28]
 800822a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800822e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008232:	f7f8 f82d 	bl	8000290 <__aeabi_uldivmod>
 8008236:	4602      	mov	r2, r0
 8008238:	460b      	mov	r3, r1
 800823a:	4b6c      	ldr	r3, [pc, #432]	; (80083ec <UART_SetConfig+0x38c>)
 800823c:	fba3 1302 	umull	r1, r3, r3, r2
 8008240:	095b      	lsrs	r3, r3, #5
 8008242:	2164      	movs	r1, #100	; 0x64
 8008244:	fb01 f303 	mul.w	r3, r1, r3
 8008248:	1ad3      	subs	r3, r2, r3
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	3332      	adds	r3, #50	; 0x32
 800824e:	4a67      	ldr	r2, [pc, #412]	; (80083ec <UART_SetConfig+0x38c>)
 8008250:	fba2 2303 	umull	r2, r3, r2, r3
 8008254:	095b      	lsrs	r3, r3, #5
 8008256:	f003 0207 	and.w	r2, r3, #7
 800825a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4432      	add	r2, r6
 8008260:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008262:	e0b9      	b.n	80083d8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008264:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008266:	461c      	mov	r4, r3
 8008268:	f04f 0500 	mov.w	r5, #0
 800826c:	4622      	mov	r2, r4
 800826e:	462b      	mov	r3, r5
 8008270:	1891      	adds	r1, r2, r2
 8008272:	6139      	str	r1, [r7, #16]
 8008274:	415b      	adcs	r3, r3
 8008276:	617b      	str	r3, [r7, #20]
 8008278:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800827c:	1912      	adds	r2, r2, r4
 800827e:	eb45 0303 	adc.w	r3, r5, r3
 8008282:	f04f 0000 	mov.w	r0, #0
 8008286:	f04f 0100 	mov.w	r1, #0
 800828a:	00d9      	lsls	r1, r3, #3
 800828c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008290:	00d0      	lsls	r0, r2, #3
 8008292:	4602      	mov	r2, r0
 8008294:	460b      	mov	r3, r1
 8008296:	eb12 0804 	adds.w	r8, r2, r4
 800829a:	eb43 0905 	adc.w	r9, r3, r5
 800829e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80082a0:	685b      	ldr	r3, [r3, #4]
 80082a2:	4618      	mov	r0, r3
 80082a4:	f04f 0100 	mov.w	r1, #0
 80082a8:	f04f 0200 	mov.w	r2, #0
 80082ac:	f04f 0300 	mov.w	r3, #0
 80082b0:	008b      	lsls	r3, r1, #2
 80082b2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80082b6:	0082      	lsls	r2, r0, #2
 80082b8:	4640      	mov	r0, r8
 80082ba:	4649      	mov	r1, r9
 80082bc:	f7f7 ffe8 	bl	8000290 <__aeabi_uldivmod>
 80082c0:	4602      	mov	r2, r0
 80082c2:	460b      	mov	r3, r1
 80082c4:	4b49      	ldr	r3, [pc, #292]	; (80083ec <UART_SetConfig+0x38c>)
 80082c6:	fba3 2302 	umull	r2, r3, r3, r2
 80082ca:	095b      	lsrs	r3, r3, #5
 80082cc:	011e      	lsls	r6, r3, #4
 80082ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80082d0:	4618      	mov	r0, r3
 80082d2:	f04f 0100 	mov.w	r1, #0
 80082d6:	4602      	mov	r2, r0
 80082d8:	460b      	mov	r3, r1
 80082da:	1894      	adds	r4, r2, r2
 80082dc:	60bc      	str	r4, [r7, #8]
 80082de:	415b      	adcs	r3, r3
 80082e0:	60fb      	str	r3, [r7, #12]
 80082e2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80082e6:	1812      	adds	r2, r2, r0
 80082e8:	eb41 0303 	adc.w	r3, r1, r3
 80082ec:	f04f 0400 	mov.w	r4, #0
 80082f0:	f04f 0500 	mov.w	r5, #0
 80082f4:	00dd      	lsls	r5, r3, #3
 80082f6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80082fa:	00d4      	lsls	r4, r2, #3
 80082fc:	4622      	mov	r2, r4
 80082fe:	462b      	mov	r3, r5
 8008300:	1814      	adds	r4, r2, r0
 8008302:	64bc      	str	r4, [r7, #72]	; 0x48
 8008304:	414b      	adcs	r3, r1
 8008306:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008308:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	4618      	mov	r0, r3
 800830e:	f04f 0100 	mov.w	r1, #0
 8008312:	f04f 0200 	mov.w	r2, #0
 8008316:	f04f 0300 	mov.w	r3, #0
 800831a:	008b      	lsls	r3, r1, #2
 800831c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008320:	0082      	lsls	r2, r0, #2
 8008322:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008326:	f7f7 ffb3 	bl	8000290 <__aeabi_uldivmod>
 800832a:	4602      	mov	r2, r0
 800832c:	460b      	mov	r3, r1
 800832e:	4b2f      	ldr	r3, [pc, #188]	; (80083ec <UART_SetConfig+0x38c>)
 8008330:	fba3 1302 	umull	r1, r3, r3, r2
 8008334:	095b      	lsrs	r3, r3, #5
 8008336:	2164      	movs	r1, #100	; 0x64
 8008338:	fb01 f303 	mul.w	r3, r1, r3
 800833c:	1ad3      	subs	r3, r2, r3
 800833e:	011b      	lsls	r3, r3, #4
 8008340:	3332      	adds	r3, #50	; 0x32
 8008342:	4a2a      	ldr	r2, [pc, #168]	; (80083ec <UART_SetConfig+0x38c>)
 8008344:	fba2 2303 	umull	r2, r3, r2, r3
 8008348:	095b      	lsrs	r3, r3, #5
 800834a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800834e:	441e      	add	r6, r3
 8008350:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008352:	4618      	mov	r0, r3
 8008354:	f04f 0100 	mov.w	r1, #0
 8008358:	4602      	mov	r2, r0
 800835a:	460b      	mov	r3, r1
 800835c:	1894      	adds	r4, r2, r2
 800835e:	603c      	str	r4, [r7, #0]
 8008360:	415b      	adcs	r3, r3
 8008362:	607b      	str	r3, [r7, #4]
 8008364:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008368:	1812      	adds	r2, r2, r0
 800836a:	eb41 0303 	adc.w	r3, r1, r3
 800836e:	f04f 0400 	mov.w	r4, #0
 8008372:	f04f 0500 	mov.w	r5, #0
 8008376:	00dd      	lsls	r5, r3, #3
 8008378:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800837c:	00d4      	lsls	r4, r2, #3
 800837e:	4622      	mov	r2, r4
 8008380:	462b      	mov	r3, r5
 8008382:	eb12 0a00 	adds.w	sl, r2, r0
 8008386:	eb43 0b01 	adc.w	fp, r3, r1
 800838a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	4618      	mov	r0, r3
 8008390:	f04f 0100 	mov.w	r1, #0
 8008394:	f04f 0200 	mov.w	r2, #0
 8008398:	f04f 0300 	mov.w	r3, #0
 800839c:	008b      	lsls	r3, r1, #2
 800839e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80083a2:	0082      	lsls	r2, r0, #2
 80083a4:	4650      	mov	r0, sl
 80083a6:	4659      	mov	r1, fp
 80083a8:	f7f7 ff72 	bl	8000290 <__aeabi_uldivmod>
 80083ac:	4602      	mov	r2, r0
 80083ae:	460b      	mov	r3, r1
 80083b0:	4b0e      	ldr	r3, [pc, #56]	; (80083ec <UART_SetConfig+0x38c>)
 80083b2:	fba3 1302 	umull	r1, r3, r3, r2
 80083b6:	095b      	lsrs	r3, r3, #5
 80083b8:	2164      	movs	r1, #100	; 0x64
 80083ba:	fb01 f303 	mul.w	r3, r1, r3
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	3332      	adds	r3, #50	; 0x32
 80083c4:	4a09      	ldr	r2, [pc, #36]	; (80083ec <UART_SetConfig+0x38c>)
 80083c6:	fba2 2303 	umull	r2, r3, r2, r3
 80083ca:	095b      	lsrs	r3, r3, #5
 80083cc:	f003 020f 	and.w	r2, r3, #15
 80083d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4432      	add	r2, r6
 80083d6:	609a      	str	r2, [r3, #8]
}
 80083d8:	bf00      	nop
 80083da:	377c      	adds	r7, #124	; 0x7c
 80083dc:	46bd      	mov	sp, r7
 80083de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083e2:	bf00      	nop
 80083e4:	40011000 	.word	0x40011000
 80083e8:	40011400 	.word	0x40011400
 80083ec:	51eb851f 	.word	0x51eb851f

080083f0 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 80083f0:	b084      	sub	sp, #16
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
 80083fa:	f107 001c 	add.w	r0, r7, #28
 80083fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8008402:	2300      	movs	r3, #0
 8008404:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8008406:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8008408:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800840a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800840c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800840e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8008410:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8008412:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8008414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8008416:	431a      	orrs	r2, r3
             Init.ClockDiv
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800841a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 800842a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800842e:	68fa      	ldr	r2, [r7, #12]
 8008430:	431a      	orrs	r2, r3
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8008436:	2300      	movs	r3, #0
}
 8008438:	4618      	mov	r0, r3
 800843a:	3714      	adds	r7, #20
 800843c:	46bd      	mov	sp, r7
 800843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008442:	b004      	add	sp, #16
 8008444:	4770      	bx	lr

08008446 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8008446:	b480      	push	{r7}
 8008448:	b083      	sub	sp, #12
 800844a:	af00      	add	r7, sp, #0
 800844c:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8008454:	4618      	mov	r0, r3
 8008456:	370c      	adds	r7, #12
 8008458:	46bd      	mov	sp, r7
 800845a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845e:	4770      	bx	lr

08008460 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8008460:	b480      	push	{r7}
 8008462:	b083      	sub	sp, #12
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 800846a:	683b      	ldr	r3, [r7, #0]
 800846c:	681a      	ldr	r2, [r3, #0]
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008474:	2300      	movs	r3, #0
}
 8008476:	4618      	mov	r0, r3
 8008478:	370c      	adds	r7, #12
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr

08008482 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8008482:	b580      	push	{r7, lr}
 8008484:	b082      	sub	sp, #8
 8008486:	af00      	add	r7, sp, #0
 8008488:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2203      	movs	r2, #3
 800848e:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8008490:	2002      	movs	r0, #2
 8008492:	f7f9 fcd5 	bl	8001e40 <HAL_Delay>
  
  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80084a0:	b480      	push	{r7}
 80084a2:	b083      	sub	sp, #12
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	f003 0303 	and.w	r3, r3, #3
}
 80084b0:	4618      	mov	r0, r3
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ba:	4770      	bx	lr

080084bc <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80084bc:	b480      	push	{r7}
 80084be:	b085      	sub	sp, #20
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]
 80084c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80084c6:	2300      	movs	r3, #0
 80084c8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	681a      	ldr	r2, [r3, #0]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80084d6:	683b      	ldr	r3, [r7, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084da:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80084e0:	431a      	orrs	r2, r3
                       Command->CPSM);
 80084e2:	683b      	ldr	r3, [r7, #0]
 80084e4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80084e6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80084e8:	68fa      	ldr	r2, [r7, #12]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80084f6:	f023 030f 	bic.w	r3, r3, #15
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	431a      	orrs	r2, r3
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8008502:	2300      	movs	r3, #0
}
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8008510:	b480      	push	{r7}
 8008512:	b083      	sub	sp, #12
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	691b      	ldr	r3, [r3, #16]
 800851c:	b2db      	uxtb	r3, r3
}
 800851e:	4618      	mov	r0, r3
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 800852a:	b480      	push	{r7}
 800852c:	b085      	sub	sp, #20
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
 8008532:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	3314      	adds	r3, #20
 8008538:	461a      	mov	r2, r3
 800853a:	683b      	ldr	r3, [r7, #0]
 800853c:	4413      	add	r3, r2
 800853e:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	681b      	ldr	r3, [r3, #0]
}  
 8008544:	4618      	mov	r0, r3
 8008546:	3714      	adds	r7, #20
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
 8008558:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800855a:	2300      	movs	r3, #0
 800855c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8008566:	683b      	ldr	r3, [r7, #0]
 8008568:	685a      	ldr	r2, [r3, #4]
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008576:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8008578:	683b      	ldr	r3, [r7, #0]
 800857a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800857c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8008582:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8008584:	68fa      	ldr	r2, [r7, #12]
 8008586:	4313      	orrs	r3, r2
 8008588:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800858e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	431a      	orrs	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800859a:	2300      	movs	r3, #0

}
 800859c:	4618      	mov	r0, r3
 800859e:	3714      	adds	r7, #20
 80085a0:	46bd      	mov	sp, r7
 80085a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a6:	4770      	bx	lr

080085a8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b088      	sub	sp, #32
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
 80085b0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80085b6:	2310      	movs	r3, #16
 80085b8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085ba:	2340      	movs	r3, #64	; 0x40
 80085bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80085be:	2300      	movs	r3, #0
 80085c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80085c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80085c6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80085c8:	f107 0308 	add.w	r3, r7, #8
 80085cc:	4619      	mov	r1, r3
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	f7ff ff74 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80085d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80085d8:	2110      	movs	r1, #16
 80085da:	6878      	ldr	r0, [r7, #4]
 80085dc:	f000 fa44 	bl	8008a68 <SDMMC_GetCmdResp1>
 80085e0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80085e2:	69fb      	ldr	r3, [r7, #28]
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 80085fa:	2311      	movs	r3, #17
 80085fc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80085fe:	2340      	movs	r3, #64	; 0x40
 8008600:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008602:	2300      	movs	r3, #0
 8008604:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008606:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800860a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800860c:	f107 0308 	add.w	r3, r7, #8
 8008610:	4619      	mov	r1, r3
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f7ff ff52 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8008618:	f241 3288 	movw	r2, #5000	; 0x1388
 800861c:	2111      	movs	r1, #17
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 fa22 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008624:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008626:	69fb      	ldr	r3, [r7, #28]
}
 8008628:	4618      	mov	r0, r3
 800862a:	3720      	adds	r7, #32
 800862c:	46bd      	mov	sp, r7
 800862e:	bd80      	pop	{r7, pc}

08008630 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b088      	sub	sp, #32
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800863e:	2312      	movs	r3, #18
 8008640:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008642:	2340      	movs	r3, #64	; 0x40
 8008644:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800864a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800864e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008650:	f107 0308 	add.w	r3, r7, #8
 8008654:	4619      	mov	r1, r3
 8008656:	6878      	ldr	r0, [r7, #4]
 8008658:	f7ff ff30 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 800865c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008660:	2112      	movs	r1, #18
 8008662:	6878      	ldr	r0, [r7, #4]
 8008664:	f000 fa00 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008668:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800866a:	69fb      	ldr	r3, [r7, #28]
}
 800866c:	4618      	mov	r0, r3
 800866e:	3720      	adds	r7, #32
 8008670:	46bd      	mov	sp, r7
 8008672:	bd80      	pop	{r7, pc}

08008674 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b088      	sub	sp, #32
 8008678:	af00      	add	r7, sp, #0
 800867a:	6078      	str	r0, [r7, #4]
 800867c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8008682:	2318      	movs	r3, #24
 8008684:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008686:	2340      	movs	r3, #64	; 0x40
 8008688:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800868a:	2300      	movs	r3, #0
 800868c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800868e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008692:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008694:	f107 0308 	add.w	r3, r7, #8
 8008698:	4619      	mov	r1, r3
 800869a:	6878      	ldr	r0, [r7, #4]
 800869c:	f7ff ff0e 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80086a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80086a4:	2118      	movs	r1, #24
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f9de 	bl	8008a68 <SDMMC_GetCmdResp1>
 80086ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086ae:	69fb      	ldr	r3, [r7, #28]
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3720      	adds	r7, #32
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}

080086b8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b088      	sub	sp, #32
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
 80086c0:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80086c6:	2319      	movs	r3, #25
 80086c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80086ca:	2340      	movs	r3, #64	; 0x40
 80086cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80086ce:	2300      	movs	r3, #0
 80086d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80086d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80086d6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80086d8:	f107 0308 	add.w	r3, r7, #8
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f7ff feec 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 80086e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80086e8:	2119      	movs	r1, #25
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 f9bc 	bl	8008a68 <SDMMC_GetCmdResp1>
 80086f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80086f2:	69fb      	ldr	r3, [r7, #28]
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3720      	adds	r7, #32
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b088      	sub	sp, #32
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8008704:	2300      	movs	r3, #0
 8008706:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8008708:	230c      	movs	r3, #12
 800870a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800870c:	2340      	movs	r3, #64	; 0x40
 800870e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008710:	2300      	movs	r3, #0
 8008712:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008714:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008718:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800871a:	f107 0308 	add.w	r3, r7, #8
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f7ff fecb 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8008726:	4a05      	ldr	r2, [pc, #20]	; (800873c <SDMMC_CmdStopTransfer+0x40>)
 8008728:	210c      	movs	r1, #12
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f99c 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008730:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008732:	69fb      	ldr	r3, [r7, #28]
}
 8008734:	4618      	mov	r0, r3
 8008736:	3720      	adds	r7, #32
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}
 800873c:	05f5e100 	.word	0x05f5e100

08008740 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	; 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8008750:	2307      	movs	r3, #7
 8008752:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008754:	2340      	movs	r3, #64	; 0x40
 8008756:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008758:	2300      	movs	r3, #0
 800875a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800875c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008760:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008762:	f107 0310 	add.w	r3, r7, #16
 8008766:	4619      	mov	r1, r3
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f7ff fea7 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800876e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008772:	2107      	movs	r1, #7
 8008774:	68f8      	ldr	r0, [r7, #12]
 8008776:	f000 f977 	bl	8008a68 <SDMMC_GetCmdResp1>
 800877a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800877c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800877e:	4618      	mov	r0, r3
 8008780:	3728      	adds	r7, #40	; 0x28
 8008782:	46bd      	mov	sp, r7
 8008784:	bd80      	pop	{r7, pc}

08008786 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8008786:	b580      	push	{r7, lr}
 8008788:	b088      	sub	sp, #32
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8008792:	2300      	movs	r3, #0
 8008794:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8008796:	2300      	movs	r3, #0
 8008798:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800879a:	2300      	movs	r3, #0
 800879c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800879e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087a2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087a4:	f107 0308 	add.w	r3, r7, #8
 80087a8:	4619      	mov	r1, r3
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7ff fe86 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80087b0:	6878      	ldr	r0, [r7, #4]
 80087b2:	f000 f92d 	bl	8008a10 <SDMMC_GetCmdError>
 80087b6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087b8:	69fb      	ldr	r3, [r7, #28]
}
 80087ba:	4618      	mov	r0, r3
 80087bc:	3720      	adds	r7, #32
 80087be:	46bd      	mov	sp, r7
 80087c0:	bd80      	pop	{r7, pc}

080087c2 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80087c2:	b580      	push	{r7, lr}
 80087c4:	b088      	sub	sp, #32
 80087c6:	af00      	add	r7, sp, #0
 80087c8:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80087ca:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80087ce:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80087d0:	2308      	movs	r3, #8
 80087d2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80087d4:	2340      	movs	r3, #64	; 0x40
 80087d6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80087d8:	2300      	movs	r3, #0
 80087da:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80087dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087e0:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80087e2:	f107 0308 	add.w	r3, r7, #8
 80087e6:	4619      	mov	r1, r3
 80087e8:	6878      	ldr	r0, [r7, #4]
 80087ea:	f7ff fe67 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 80087ee:	6878      	ldr	r0, [r7, #4]
 80087f0:	f000 fb24 	bl	8008e3c <SDMMC_GetCmdResp7>
 80087f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80087f6:	69fb      	ldr	r3, [r7, #28]
}
 80087f8:	4618      	mov	r0, r3
 80087fa:	3720      	adds	r7, #32
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}

08008800 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b088      	sub	sp, #32
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
 8008808:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800880e:	2337      	movs	r3, #55	; 0x37
 8008810:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8008812:	2340      	movs	r3, #64	; 0x40
 8008814:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008816:	2300      	movs	r3, #0
 8008818:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800881a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800881e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8008820:	f107 0308 	add.w	r3, r7, #8
 8008824:	4619      	mov	r1, r3
 8008826:	6878      	ldr	r0, [r7, #4]
 8008828:	f7ff fe48 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 800882c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008830:	2137      	movs	r1, #55	; 0x37
 8008832:	6878      	ldr	r0, [r7, #4]
 8008834:	f000 f918 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008838:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}

08008844 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b088      	sub	sp, #32
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800884e:	683b      	ldr	r3, [r7, #0]
 8008850:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800885a:	2329      	movs	r3, #41	; 0x29
 800885c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800885e:	2340      	movs	r3, #64	; 0x40
 8008860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008862:	2300      	movs	r3, #0
 8008864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800886a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800886c:	f107 0308 	add.w	r3, r7, #8
 8008870:	4619      	mov	r1, r3
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f7ff fe22 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8008878:	6878      	ldr	r0, [r7, #4]
 800887a:	f000 fa2b 	bl	8008cd4 <SDMMC_GetCmdResp3>
 800887e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008880:	69fb      	ldr	r3, [r7, #28]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3720      	adds	r7, #32
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}

0800888a <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800888a:	b580      	push	{r7, lr}
 800888c:	b088      	sub	sp, #32
 800888e:	af00      	add	r7, sp, #0
 8008890:	6078      	str	r0, [r7, #4]
 8008892:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8008894:	683b      	ldr	r3, [r7, #0]
 8008896:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8008898:	2306      	movs	r3, #6
 800889a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800889c:	2340      	movs	r3, #64	; 0x40
 800889e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088a0:	2300      	movs	r3, #0
 80088a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088aa:	f107 0308 	add.w	r3, r7, #8
 80088ae:	4619      	mov	r1, r3
 80088b0:	6878      	ldr	r0, [r7, #4]
 80088b2:	f7ff fe03 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80088b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ba:	2106      	movs	r1, #6
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f000 f8d3 	bl	8008a68 <SDMMC_GetCmdResp1>
 80088c2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80088c4:	69fb      	ldr	r3, [r7, #28]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3720      	adds	r7, #32
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}

080088ce <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80088ce:	b580      	push	{r7, lr}
 80088d0:	b088      	sub	sp, #32
 80088d2:	af00      	add	r7, sp, #0
 80088d4:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80088da:	2333      	movs	r3, #51	; 0x33
 80088dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80088de:	2340      	movs	r3, #64	; 0x40
 80088e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80088e2:	2300      	movs	r3, #0
 80088e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80088e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80088ec:	f107 0308 	add.w	r3, r7, #8
 80088f0:	4619      	mov	r1, r3
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f7ff fde2 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 80088f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088fc:	2133      	movs	r1, #51	; 0x33
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f8b2 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008904:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008906:	69fb      	ldr	r3, [r7, #28]
}
 8008908:	4618      	mov	r0, r3
 800890a:	3720      	adds	r7, #32
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8008918:	2300      	movs	r3, #0
 800891a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800891c:	2302      	movs	r3, #2
 800891e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8008920:	23c0      	movs	r3, #192	; 0xc0
 8008922:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008924:	2300      	movs	r3, #0
 8008926:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008928:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800892c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800892e:	f107 0308 	add.w	r3, r7, #8
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f7ff fdc1 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 f982 	bl	8008c44 <SDMMC_GetCmdResp2>
 8008940:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008942:	69fb      	ldr	r3, [r7, #28]
}
 8008944:	4618      	mov	r0, r3
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b088      	sub	sp, #32
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800895a:	2309      	movs	r3, #9
 800895c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 800895e:	23c0      	movs	r3, #192	; 0xc0
 8008960:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8008962:	2300      	movs	r3, #0
 8008964:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8008966:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800896a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800896c:	f107 0308 	add.w	r3, r7, #8
 8008970:	4619      	mov	r1, r3
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f7ff fda2 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8008978:	6878      	ldr	r0, [r7, #4]
 800897a:	f000 f963 	bl	8008c44 <SDMMC_GetCmdResp2>
 800897e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008980:	69fb      	ldr	r3, [r7, #28]
}
 8008982:	4618      	mov	r0, r3
 8008984:	3720      	adds	r7, #32
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}

0800898a <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800898a:	b580      	push	{r7, lr}
 800898c:	b088      	sub	sp, #32
 800898e:	af00      	add	r7, sp, #0
 8008990:	6078      	str	r0, [r7, #4]
 8008992:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8008994:	2300      	movs	r3, #0
 8008996:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8008998:	2303      	movs	r3, #3
 800899a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800899c:	2340      	movs	r3, #64	; 0x40
 800899e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089a0:	2300      	movs	r3, #0
 80089a2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a8:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089aa:	f107 0308 	add.w	r3, r7, #8
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7ff fd83 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80089b6:	683a      	ldr	r2, [r7, #0]
 80089b8:	2103      	movs	r1, #3
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f000 f9c8 	bl	8008d50 <SDMMC_GetCmdResp6>
 80089c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80089c2:	69fb      	ldr	r3, [r7, #28]
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3720      	adds	r7, #32
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}

080089cc <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80089da:	230d      	movs	r3, #13
 80089dc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80089de:	2340      	movs	r3, #64	; 0x40
 80089e0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80089e2:	2300      	movs	r3, #0
 80089e4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80089e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089ea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80089ec:	f107 0308 	add.w	r3, r7, #8
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7ff fd62 	bl	80084bc <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 80089f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80089fc:	210d      	movs	r1, #13
 80089fe:	6878      	ldr	r0, [r7, #4]
 8008a00:	f000 f832 	bl	8008a68 <SDMMC_GetCmdResp1>
 8008a04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8008a06:	69fb      	ldr	r3, [r7, #28]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	3720      	adds	r7, #32
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8008a10:	b480      	push	{r7}
 8008a12:	b085      	sub	sp, #20
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <SDMMC_GetCmdError+0x50>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a11      	ldr	r2, [pc, #68]	; (8008a64 <SDMMC_GetCmdError+0x54>)
 8008a1e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a22:	0a5b      	lsrs	r3, r3, #9
 8008a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a28:	fb02 f303 	mul.w	r3, r2, r3
 8008a2c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	1e5a      	subs	r2, r3, #1
 8008a32:	60fa      	str	r2, [r7, #12]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d102      	bne.n	8008a3e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a38:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a3c:	e009      	b.n	8008a52 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f1      	beq.n	8008a2e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	22c5      	movs	r2, #197	; 0xc5
 8008a4e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8008a50:	2300      	movs	r3, #0
}
 8008a52:	4618      	mov	r0, r3
 8008a54:	3714      	adds	r7, #20
 8008a56:	46bd      	mov	sp, r7
 8008a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5c:	4770      	bx	lr
 8008a5e:	bf00      	nop
 8008a60:	20000000 	.word	0x20000000
 8008a64:	10624dd3 	.word	0x10624dd3

08008a68 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b088      	sub	sp, #32
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	60f8      	str	r0, [r7, #12]
 8008a70:	460b      	mov	r3, r1
 8008a72:	607a      	str	r2, [r7, #4]
 8008a74:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8008a76:	4b70      	ldr	r3, [pc, #448]	; (8008c38 <SDMMC_GetCmdResp1+0x1d0>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a70      	ldr	r2, [pc, #448]	; (8008c3c <SDMMC_GetCmdResp1+0x1d4>)
 8008a7c:	fba2 2303 	umull	r2, r3, r2, r3
 8008a80:	0a5a      	lsrs	r2, r3, #9
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	fb02 f303 	mul.w	r3, r2, r3
 8008a88:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	1e5a      	subs	r2, r3, #1
 8008a8e:	61fa      	str	r2, [r7, #28]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d102      	bne.n	8008a9a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008a94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008a98:	e0c9      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008a9e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d0ef      	beq.n	8008a8a <SDMMC_GetCmdResp1+0x22>
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1ea      	bne.n	8008a8a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab8:	f003 0304 	and.w	r3, r3, #4
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008ac6:	2304      	movs	r3, #4
 8008ac8:	e0b1      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ace:	f003 0301 	and.w	r3, r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d004      	beq.n	8008ae0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008adc:	2301      	movs	r3, #1
 8008ade:	e0a6      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	22c5      	movs	r2, #197	; 0xc5
 8008ae4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008ae6:	68f8      	ldr	r0, [r7, #12]
 8008ae8:	f7ff fd12 	bl	8008510 <SDIO_GetCommandResponse>
 8008aec:	4603      	mov	r3, r0
 8008aee:	461a      	mov	r2, r3
 8008af0:	7afb      	ldrb	r3, [r7, #11]
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d001      	beq.n	8008afa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e099      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008afa:	2100      	movs	r1, #0
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	f7ff fd14 	bl	800852a <SDIO_GetResponse>
 8008b02:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4b4e      	ldr	r3, [pc, #312]	; (8008c40 <SDMMC_GetCmdResp1+0x1d8>)
 8008b08:	4013      	ands	r3, r2
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d101      	bne.n	8008b12 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	e08d      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	da02      	bge.n	8008b1e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8008b18:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008b1c:	e087      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d001      	beq.n	8008b2c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8008b28:	2340      	movs	r3, #64	; 0x40
 8008b2a:	e080      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d001      	beq.n	8008b3a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8008b36:	2380      	movs	r3, #128	; 0x80
 8008b38:	e079      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d002      	beq.n	8008b4a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8008b44:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008b48:	e071      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d002      	beq.n	8008b5a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8008b54:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008b58:	e069      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8008b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b68:	e061      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d002      	beq.n	8008b7a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8008b74:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b78:	e059      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d002      	beq.n	8008b8a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008b84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b88:	e051      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008b98:	e049      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8008b9a:	697b      	ldr	r3, [r7, #20]
 8008b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d002      	beq.n	8008baa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8008ba4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008ba8:	e041      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8008baa:	697b      	ldr	r3, [r7, #20]
 8008bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d002      	beq.n	8008bba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8008bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008bb8:	e039      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d002      	beq.n	8008bca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8008bc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008bc8:	e031      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d002      	beq.n	8008bda <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8008bd4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8008bd8:	e029      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d002      	beq.n	8008bea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8008be4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8008be8:	e021      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d002      	beq.n	8008bfa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8008bf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008bf8:	e019      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d002      	beq.n	8008c0a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8008c04:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008c08:	e011      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8008c0a:	697b      	ldr	r3, [r7, #20]
 8008c0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d002      	beq.n	8008c1a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8008c14:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008c18:	e009      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d002      	beq.n	8008c2a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8008c24:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008c28:	e001      	b.n	8008c2e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008c2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008c2e:	4618      	mov	r0, r3
 8008c30:	3720      	adds	r7, #32
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20000000 	.word	0x20000000
 8008c3c:	10624dd3 	.word	0x10624dd3
 8008c40:	fdffe008 	.word	0xfdffe008

08008c44 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008c4c:	4b1f      	ldr	r3, [pc, #124]	; (8008ccc <SDMMC_GetCmdResp2+0x88>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a1f      	ldr	r2, [pc, #124]	; (8008cd0 <SDMMC_GetCmdResp2+0x8c>)
 8008c52:	fba2 2303 	umull	r2, r3, r2, r3
 8008c56:	0a5b      	lsrs	r3, r3, #9
 8008c58:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c5c:	fb02 f303 	mul.w	r3, r2, r3
 8008c60:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	1e5a      	subs	r2, r3, #1
 8008c66:	60fa      	str	r2, [r7, #12]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d102      	bne.n	8008c72 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008c6c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008c70:	e026      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c76:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c78:	68bb      	ldr	r3, [r7, #8]
 8008c7a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d0ef      	beq.n	8008c62 <SDMMC_GetCmdResp2+0x1e>
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d1ea      	bne.n	8008c62 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	f003 0304 	and.w	r3, r3, #4
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d004      	beq.n	8008ca2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008c9e:	2304      	movs	r3, #4
 8008ca0:	e00e      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d004      	beq.n	8008cb8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008cb4:	2301      	movs	r3, #1
 8008cb6:	e003      	b.n	8008cc0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	22c5      	movs	r2, #197	; 0xc5
 8008cbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8008cbe:	2300      	movs	r3, #0
}
 8008cc0:	4618      	mov	r0, r3
 8008cc2:	3714      	adds	r7, #20
 8008cc4:	46bd      	mov	sp, r7
 8008cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cca:	4770      	bx	lr
 8008ccc:	20000000 	.word	0x20000000
 8008cd0:	10624dd3 	.word	0x10624dd3

08008cd4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b085      	sub	sp, #20
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008cdc:	4b1a      	ldr	r3, [pc, #104]	; (8008d48 <SDMMC_GetCmdResp3+0x74>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a1a      	ldr	r2, [pc, #104]	; (8008d4c <SDMMC_GetCmdResp3+0x78>)
 8008ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8008ce6:	0a5b      	lsrs	r3, r3, #9
 8008ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cec:	fb02 f303 	mul.w	r3, r2, r3
 8008cf0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	1e5a      	subs	r2, r3, #1
 8008cf6:	60fa      	str	r2, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d102      	bne.n	8008d02 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008cfc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d00:	e01b      	b.n	8008d3a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d06:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d0ef      	beq.n	8008cf2 <SDMMC_GetCmdResp3+0x1e>
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d1ea      	bne.n	8008cf2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	f003 0304 	and.w	r3, r3, #4
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d004      	beq.n	8008d32 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2204      	movs	r2, #4
 8008d2c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008d2e:	2304      	movs	r3, #4
 8008d30:	e003      	b.n	8008d3a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	22c5      	movs	r2, #197	; 0xc5
 8008d36:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008d38:	2300      	movs	r3, #0
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	3714      	adds	r7, #20
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	20000000 	.word	0x20000000
 8008d4c:	10624dd3 	.word	0x10624dd3

08008d50 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b088      	sub	sp, #32
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	460b      	mov	r3, r1
 8008d5a:	607a      	str	r2, [r7, #4]
 8008d5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008d5e:	4b35      	ldr	r3, [pc, #212]	; (8008e34 <SDMMC_GetCmdResp6+0xe4>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a35      	ldr	r2, [pc, #212]	; (8008e38 <SDMMC_GetCmdResp6+0xe8>)
 8008d64:	fba2 2303 	umull	r2, r3, r2, r3
 8008d68:	0a5b      	lsrs	r3, r3, #9
 8008d6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8008d74:	69fb      	ldr	r3, [r7, #28]
 8008d76:	1e5a      	subs	r2, r3, #1
 8008d78:	61fa      	str	r2, [r7, #28]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d102      	bne.n	8008d84 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008d7e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008d82:	e052      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d88:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d8a:	69bb      	ldr	r3, [r7, #24]
 8008d8c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d0ef      	beq.n	8008d74 <SDMMC_GetCmdResp6+0x24>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1ea      	bne.n	8008d74 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008da2:	f003 0304 	and.w	r3, r3, #4
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d004      	beq.n	8008db4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	2204      	movs	r2, #4
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008db0:	2304      	movs	r3, #4
 8008db2:	e03a      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d004      	beq.n	8008dca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	2201      	movs	r2, #1
 8008dc4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e02f      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8008dca:	68f8      	ldr	r0, [r7, #12]
 8008dcc:	f7ff fba0 	bl	8008510 <SDIO_GetCommandResponse>
 8008dd0:	4603      	mov	r3, r0
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	7afb      	ldrb	r3, [r7, #11]
 8008dd6:	4293      	cmp	r3, r2
 8008dd8:	d001      	beq.n	8008dde <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	e025      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	22c5      	movs	r2, #197	; 0xc5
 8008de2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8008de4:	2100      	movs	r1, #0
 8008de6:	68f8      	ldr	r0, [r7, #12]
 8008de8:	f7ff fb9f 	bl	800852a <SDIO_GetResponse>
 8008dec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d106      	bne.n	8008e06 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8008df8:	697b      	ldr	r3, [r7, #20]
 8008dfa:	0c1b      	lsrs	r3, r3, #16
 8008dfc:	b29a      	uxth	r2, r3
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8008e02:	2300      	movs	r3, #0
 8008e04:	e011      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d002      	beq.n	8008e16 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8008e10:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008e14:	e009      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	d002      	beq.n	8008e26 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8008e20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008e24:	e001      	b.n	8008e2a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8008e26:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3720      	adds	r7, #32
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000000 	.word	0x20000000
 8008e38:	10624dd3 	.word	0x10624dd3

08008e3c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b085      	sub	sp, #20
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8008e44:	4b22      	ldr	r3, [pc, #136]	; (8008ed0 <SDMMC_GetCmdResp7+0x94>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a22      	ldr	r2, [pc, #136]	; (8008ed4 <SDMMC_GetCmdResp7+0x98>)
 8008e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8008e4e:	0a5b      	lsrs	r3, r3, #9
 8008e50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e54:	fb02 f303 	mul.w	r3, r2, r3
 8008e58:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1e5a      	subs	r2, r3, #1
 8008e5e:	60fa      	str	r2, [r7, #12]
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	d102      	bne.n	8008e6a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8008e64:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008e68:	e02c      	b.n	8008ec4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d0ef      	beq.n	8008e5a <SDMMC_GetCmdResp7+0x1e>
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d1ea      	bne.n	8008e5a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e88:	f003 0304 	and.w	r3, r3, #4
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d004      	beq.n	8008e9a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	2204      	movs	r2, #4
 8008e94:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8008e96:	2304      	movs	r3, #4
 8008e98:	e014      	b.n	8008ec4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d004      	beq.n	8008eb0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8008eac:	2301      	movs	r3, #1
 8008eae:	e009      	b.n	8008ec4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	2240      	movs	r2, #64	; 0x40
 8008ec0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8008ec2:	2300      	movs	r3, #0
  
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr
 8008ed0:	20000000 	.word	0x20000000
 8008ed4:	10624dd3 	.word	0x10624dd3

08008ed8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8008edc:	4904      	ldr	r1, [pc, #16]	; (8008ef0 <MX_FATFS_Init+0x18>)
 8008ede:	4805      	ldr	r0, [pc, #20]	; (8008ef4 <MX_FATFS_Init+0x1c>)
 8008ee0:	f000 ff54 	bl	8009d8c <FATFS_LinkDriver>
 8008ee4:	4603      	mov	r3, r0
 8008ee6:	461a      	mov	r2, r3
 8008ee8:	4b03      	ldr	r3, [pc, #12]	; (8008ef8 <MX_FATFS_Init+0x20>)
 8008eea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008eec:	bf00      	nop
 8008eee:	bd80      	pop	{r7, pc}
 8008ef0:	20000720 	.word	0x20000720
 8008ef4:	08017850 	.word	0x08017850
 8008ef8:	2000071c 	.word	0x2000071c

08008efc <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8008f02:	2300      	movs	r3, #0
 8008f04:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8008f06:	f000 f896 	bl	8009036 <BSP_SD_IsDetected>
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d001      	beq.n	8008f14 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8008f10:	2301      	movs	r3, #1
 8008f12:	e012      	b.n	8008f3a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8008f14:	480b      	ldr	r0, [pc, #44]	; (8008f44 <BSP_SD_Init+0x48>)
 8008f16:	f7fc f965 	bl	80051e4 <HAL_SD_Init>
 8008f1a:	4603      	mov	r3, r0
 8008f1c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8008f1e:	79fb      	ldrb	r3, [r7, #7]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d109      	bne.n	8008f38 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8008f24:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008f28:	4806      	ldr	r0, [pc, #24]	; (8008f44 <BSP_SD_Init+0x48>)
 8008f2a:	f7fc ff31 	bl	8005d90 <HAL_SD_ConfigWideBusOperation>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d001      	beq.n	8008f38 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8008f34:	2301      	movs	r3, #1
 8008f36:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8008f38:	79fb      	ldrb	r3, [r7, #7]
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bd80      	pop	{r7, pc}
 8008f42:	bf00      	nop
 8008f44:	20000448 	.word	0x20000448

08008f48 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8008f48:	b580      	push	{r7, lr}
 8008f4a:	b086      	sub	sp, #24
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	60f8      	str	r0, [r7, #12]
 8008f50:	60b9      	str	r1, [r7, #8]
 8008f52:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008f54:	2300      	movs	r3, #0
 8008f56:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	68ba      	ldr	r2, [r7, #8]
 8008f5c:	68f9      	ldr	r1, [r7, #12]
 8008f5e:	4806      	ldr	r0, [pc, #24]	; (8008f78 <BSP_SD_ReadBlocks_DMA+0x30>)
 8008f60:	f7fc f9ee 	bl	8005340 <HAL_SD_ReadBlocks_DMA>
 8008f64:	4603      	mov	r3, r0
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d001      	beq.n	8008f6e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008f6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3718      	adds	r7, #24
 8008f74:	46bd      	mov	sp, r7
 8008f76:	bd80      	pop	{r7, pc}
 8008f78:	20000448 	.word	0x20000448

08008f7c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b086      	sub	sp, #24
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	60f8      	str	r0, [r7, #12]
 8008f84:	60b9      	str	r1, [r7, #8]
 8008f86:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8008f88:	2300      	movs	r3, #0
 8008f8a:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	68f9      	ldr	r1, [r7, #12]
 8008f92:	4806      	ldr	r0, [pc, #24]	; (8008fac <BSP_SD_WriteBlocks_DMA+0x30>)
 8008f94:	f7fc fab6 	bl	8005504 <HAL_SD_WriteBlocks_DMA>
 8008f98:	4603      	mov	r3, r0
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d001      	beq.n	8008fa2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8008fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}
 8008fac:	20000448 	.word	0x20000448

08008fb0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8008fb4:	4805      	ldr	r0, [pc, #20]	; (8008fcc <BSP_SD_GetCardState+0x1c>)
 8008fb6:	f7fc ff85 	bl	8005ec4 <HAL_SD_GetCardState>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b04      	cmp	r3, #4
 8008fbe:	bf14      	ite	ne
 8008fc0:	2301      	movne	r3, #1
 8008fc2:	2300      	moveq	r3, #0
 8008fc4:	b2db      	uxtb	r3, r3
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	20000448 	.word	0x20000448

08008fd0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b082      	sub	sp, #8
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8008fd8:	6879      	ldr	r1, [r7, #4]
 8008fda:	4803      	ldr	r0, [pc, #12]	; (8008fe8 <BSP_SD_GetCardInfo+0x18>)
 8008fdc:	f7fc feac 	bl	8005d38 <HAL_SD_GetCardInfo>
}
 8008fe0:	bf00      	nop
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}
 8008fe8:	20000448 	.word	0x20000448

08008fec <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b082      	sub	sp, #8
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8008ff4:	f000 f818 	bl	8009028 <BSP_SD_AbortCallback>
}
 8008ff8:	bf00      	nop
 8008ffa:	3708      	adds	r7, #8
 8008ffc:	46bd      	mov	sp, r7
 8008ffe:	bd80      	pop	{r7, pc}

08009000 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b082      	sub	sp, #8
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8009008:	f000 f9a8 	bl	800935c <BSP_SD_WriteCpltCallback>
}
 800900c:	bf00      	nop
 800900e:	3708      	adds	r7, #8
 8009010:	46bd      	mov	sp, r7
 8009012:	bd80      	pop	{r7, pc}

08009014 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8009014:	b580      	push	{r7, lr}
 8009016:	b082      	sub	sp, #8
 8009018:	af00      	add	r7, sp, #0
 800901a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800901c:	f000 f9aa 	bl	8009374 <BSP_SD_ReadCpltCallback>
}
 8009020:	bf00      	nop
 8009022:	3708      	adds	r7, #8
 8009024:	46bd      	mov	sp, r7
 8009026:	bd80      	pop	{r7, pc}

08009028 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8009028:	b480      	push	{r7}
 800902a:	af00      	add	r7, sp, #0

}
 800902c:	bf00      	nop
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8009036:	b580      	push	{r7, lr}
 8009038:	b082      	sub	sp, #8
 800903a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800903c:	2301      	movs	r3, #1
 800903e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8009040:	f000 f80c 	bl	800905c <BSP_PlatformIsDetected>
 8009044:	4603      	mov	r3, r0
 8009046:	2b00      	cmp	r3, #0
 8009048:	d101      	bne.n	800904e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800904a:	2300      	movs	r3, #0
 800904c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800904e:	79fb      	ldrb	r3, [r7, #7]
 8009050:	b2db      	uxtb	r3, r3
}
 8009052:	4618      	mov	r0, r3
 8009054:	3708      	adds	r7, #8
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
	...

0800905c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800905c:	b580      	push	{r7, lr}
 800905e:	b082      	sub	sp, #8
 8009060:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8009062:	2301      	movs	r3, #1
 8009064:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8009066:	2108      	movs	r1, #8
 8009068:	4806      	ldr	r0, [pc, #24]	; (8009084 <BSP_PlatformIsDetected+0x28>)
 800906a:	f7fb f9e1 	bl	8004430 <HAL_GPIO_ReadPin>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d001      	beq.n	8009078 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8009074:	2300      	movs	r3, #0
 8009076:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8009078:	79fb      	ldrb	r3, [r7, #7]
}
 800907a:	4618      	mov	r0, r3
 800907c:	3708      	adds	r7, #8
 800907e:	46bd      	mov	sp, r7
 8009080:	bd80      	pop	{r7, pc}
 8009082:	bf00      	nop
 8009084:	40020c00 	.word	0x40020c00

08009088 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8009088:	b580      	push	{r7, lr}
 800908a:	b084      	sub	sp, #16
 800908c:	af00      	add	r7, sp, #0
 800908e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8009090:	f7f8 feca 	bl	8001e28 <HAL_GetTick>
 8009094:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8009096:	e006      	b.n	80090a6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8009098:	f7ff ff8a 	bl	8008fb0 <BSP_SD_GetCardState>
 800909c:	4603      	mov	r3, r0
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80090a2:	2300      	movs	r3, #0
 80090a4:	e009      	b.n	80090ba <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80090a6:	f7f8 febf 	bl	8001e28 <HAL_GetTick>
 80090aa:	4602      	mov	r2, r0
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	687a      	ldr	r2, [r7, #4]
 80090b2:	429a      	cmp	r2, r3
 80090b4:	d8f0      	bhi.n	8009098 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80090b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3710      	adds	r7, #16
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}
	...

080090c4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	4603      	mov	r3, r0
 80090cc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80090ce:	4b0b      	ldr	r3, [pc, #44]	; (80090fc <SD_CheckStatus+0x38>)
 80090d0:	2201      	movs	r2, #1
 80090d2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80090d4:	f7ff ff6c 	bl	8008fb0 <BSP_SD_GetCardState>
 80090d8:	4603      	mov	r3, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d107      	bne.n	80090ee <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80090de:	4b07      	ldr	r3, [pc, #28]	; (80090fc <SD_CheckStatus+0x38>)
 80090e0:	781b      	ldrb	r3, [r3, #0]
 80090e2:	b2db      	uxtb	r3, r3
 80090e4:	f023 0301 	bic.w	r3, r3, #1
 80090e8:	b2da      	uxtb	r2, r3
 80090ea:	4b04      	ldr	r3, [pc, #16]	; (80090fc <SD_CheckStatus+0x38>)
 80090ec:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80090ee:	4b03      	ldr	r3, [pc, #12]	; (80090fc <SD_CheckStatus+0x38>)
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	b2db      	uxtb	r3, r3
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3708      	adds	r7, #8
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000009 	.word	0x20000009

08009100 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8009100:	b580      	push	{r7, lr}
 8009102:	b082      	sub	sp, #8
 8009104:	af00      	add	r7, sp, #0
 8009106:	4603      	mov	r3, r0
 8009108:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800910a:	f7ff fef7 	bl	8008efc <BSP_SD_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d107      	bne.n	8009124 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8009114:	79fb      	ldrb	r3, [r7, #7]
 8009116:	4618      	mov	r0, r3
 8009118:	f7ff ffd4 	bl	80090c4 <SD_CheckStatus>
 800911c:	4603      	mov	r3, r0
 800911e:	461a      	mov	r2, r3
 8009120:	4b04      	ldr	r3, [pc, #16]	; (8009134 <SD_initialize+0x34>)
 8009122:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8009124:	4b03      	ldr	r3, [pc, #12]	; (8009134 <SD_initialize+0x34>)
 8009126:	781b      	ldrb	r3, [r3, #0]
 8009128:	b2db      	uxtb	r3, r3
}
 800912a:	4618      	mov	r0, r3
 800912c:	3708      	adds	r7, #8
 800912e:	46bd      	mov	sp, r7
 8009130:	bd80      	pop	{r7, pc}
 8009132:	bf00      	nop
 8009134:	20000009 	.word	0x20000009

08009138 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	4603      	mov	r3, r0
 8009140:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8009142:	79fb      	ldrb	r3, [r7, #7]
 8009144:	4618      	mov	r0, r3
 8009146:	f7ff ffbd 	bl	80090c4 <SD_CheckStatus>
 800914a:	4603      	mov	r3, r0
}
 800914c:	4618      	mov	r0, r3
 800914e:	3708      	adds	r7, #8
 8009150:	46bd      	mov	sp, r7
 8009152:	bd80      	pop	{r7, pc}

08009154 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	b086      	sub	sp, #24
 8009158:	af00      	add	r7, sp, #0
 800915a:	60b9      	str	r1, [r7, #8]
 800915c:	607a      	str	r2, [r7, #4]
 800915e:	603b      	str	r3, [r7, #0]
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009164:	2301      	movs	r3, #1
 8009166:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8009168:	f247 5030 	movw	r0, #30000	; 0x7530
 800916c:	f7ff ff8c 	bl	8009088 <SD_CheckStatusWithTimeout>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	da01      	bge.n	800917a <SD_read+0x26>
  {
    return res;
 8009176:	7dfb      	ldrb	r3, [r7, #23]
 8009178:	e03b      	b.n	80091f2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800917a:	683a      	ldr	r2, [r7, #0]
 800917c:	6879      	ldr	r1, [r7, #4]
 800917e:	68b8      	ldr	r0, [r7, #8]
 8009180:	f7ff fee2 	bl	8008f48 <BSP_SD_ReadBlocks_DMA>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d132      	bne.n	80091f0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800918a:	4b1c      	ldr	r3, [pc, #112]	; (80091fc <SD_read+0xa8>)
 800918c:	2200      	movs	r2, #0
 800918e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8009190:	f7f8 fe4a 	bl	8001e28 <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009196:	bf00      	nop
 8009198:	4b18      	ldr	r3, [pc, #96]	; (80091fc <SD_read+0xa8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d108      	bne.n	80091b2 <SD_read+0x5e>
 80091a0:	f7f8 fe42 	bl	8001e28 <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	f247 522f 	movw	r2, #29999	; 0x752f
 80091ae:	4293      	cmp	r3, r2
 80091b0:	d9f2      	bls.n	8009198 <SD_read+0x44>
      {
      }
      /* in case of a timeout return error */
      if (ReadStatus == 0)
 80091b2:	4b12      	ldr	r3, [pc, #72]	; (80091fc <SD_read+0xa8>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d102      	bne.n	80091c0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	75fb      	strb	r3, [r7, #23]
 80091be:	e017      	b.n	80091f0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80091c0:	4b0e      	ldr	r3, [pc, #56]	; (80091fc <SD_read+0xa8>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80091c6:	f7f8 fe2f 	bl	8001e28 <HAL_GetTick>
 80091ca:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80091cc:	e007      	b.n	80091de <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80091ce:	f7ff feef 	bl	8008fb0 <BSP_SD_GetCardState>
 80091d2:	4603      	mov	r3, r0
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d102      	bne.n	80091de <SD_read+0x8a>
          {
            res = RES_OK;
 80091d8:	2300      	movs	r3, #0
 80091da:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80091dc:	e008      	b.n	80091f0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80091de:	f7f8 fe23 	bl	8001e28 <HAL_GetTick>
 80091e2:	4602      	mov	r2, r0
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	1ad3      	subs	r3, r2, r3
 80091e8:	f247 522f 	movw	r2, #29999	; 0x752f
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d9ee      	bls.n	80091ce <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80091f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3718      	adds	r7, #24
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	2000009c 	.word	0x2000009c

08009200 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b086      	sub	sp, #24
 8009204:	af00      	add	r7, sp, #0
 8009206:	60b9      	str	r1, [r7, #8]
 8009208:	607a      	str	r2, [r7, #4]
 800920a:	603b      	str	r3, [r7, #0]
 800920c:	4603      	mov	r3, r0
 800920e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8009214:	4b24      	ldr	r3, [pc, #144]	; (80092a8 <SD_write+0xa8>)
 8009216:	2200      	movs	r2, #0
 8009218:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800921a:	f247 5030 	movw	r0, #30000	; 0x7530
 800921e:	f7ff ff33 	bl	8009088 <SD_CheckStatusWithTimeout>
 8009222:	4603      	mov	r3, r0
 8009224:	2b00      	cmp	r3, #0
 8009226:	da01      	bge.n	800922c <SD_write+0x2c>
  {
    return res;
 8009228:	7dfb      	ldrb	r3, [r7, #23]
 800922a:	e038      	b.n	800929e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	6879      	ldr	r1, [r7, #4]
 8009230:	68b8      	ldr	r0, [r7, #8]
 8009232:	f7ff fea3 	bl	8008f7c <BSP_SD_WriteBlocks_DMA>
 8009236:	4603      	mov	r3, r0
 8009238:	2b00      	cmp	r3, #0
 800923a:	d12f      	bne.n	800929c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800923c:	f7f8 fdf4 	bl	8001e28 <HAL_GetTick>
 8009240:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8009242:	bf00      	nop
 8009244:	4b18      	ldr	r3, [pc, #96]	; (80092a8 <SD_write+0xa8>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d108      	bne.n	800925e <SD_write+0x5e>
 800924c:	f7f8 fdec 	bl	8001e28 <HAL_GetTick>
 8009250:	4602      	mov	r2, r0
 8009252:	693b      	ldr	r3, [r7, #16]
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	f247 522f 	movw	r2, #29999	; 0x752f
 800925a:	4293      	cmp	r3, r2
 800925c:	d9f2      	bls.n	8009244 <SD_write+0x44>
      {
      }
      /* in case of a timeout return error */
      if (WriteStatus == 0)
 800925e:	4b12      	ldr	r3, [pc, #72]	; (80092a8 <SD_write+0xa8>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d102      	bne.n	800926c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	75fb      	strb	r3, [r7, #23]
 800926a:	e017      	b.n	800929c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800926c:	4b0e      	ldr	r3, [pc, #56]	; (80092a8 <SD_write+0xa8>)
 800926e:	2200      	movs	r2, #0
 8009270:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8009272:	f7f8 fdd9 	bl	8001e28 <HAL_GetTick>
 8009276:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8009278:	e007      	b.n	800928a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800927a:	f7ff fe99 	bl	8008fb0 <BSP_SD_GetCardState>
 800927e:	4603      	mov	r3, r0
 8009280:	2b00      	cmp	r3, #0
 8009282:	d102      	bne.n	800928a <SD_write+0x8a>
          {
            res = RES_OK;
 8009284:	2300      	movs	r3, #0
 8009286:	75fb      	strb	r3, [r7, #23]
            break;
 8009288:	e008      	b.n	800929c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800928a:	f7f8 fdcd 	bl	8001e28 <HAL_GetTick>
 800928e:	4602      	mov	r2, r0
 8009290:	693b      	ldr	r3, [r7, #16]
 8009292:	1ad3      	subs	r3, r2, r3
 8009294:	f247 522f 	movw	r2, #29999	; 0x752f
 8009298:	4293      	cmp	r3, r2
 800929a:	d9ee      	bls.n	800927a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800929c:	7dfb      	ldrb	r3, [r7, #23]
}
 800929e:	4618      	mov	r0, r3
 80092a0:	3718      	adds	r7, #24
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	20000098 	.word	0x20000098

080092ac <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b08c      	sub	sp, #48	; 0x30
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	4603      	mov	r3, r0
 80092b4:	603a      	str	r2, [r7, #0]
 80092b6:	71fb      	strb	r3, [r7, #7]
 80092b8:	460b      	mov	r3, r1
 80092ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80092bc:	2301      	movs	r3, #1
 80092be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80092c2:	4b25      	ldr	r3, [pc, #148]	; (8009358 <SD_ioctl+0xac>)
 80092c4:	781b      	ldrb	r3, [r3, #0]
 80092c6:	b2db      	uxtb	r3, r3
 80092c8:	f003 0301 	and.w	r3, r3, #1
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <SD_ioctl+0x28>
 80092d0:	2303      	movs	r3, #3
 80092d2:	e03c      	b.n	800934e <SD_ioctl+0xa2>

  switch (cmd)
 80092d4:	79bb      	ldrb	r3, [r7, #6]
 80092d6:	2b03      	cmp	r3, #3
 80092d8:	d834      	bhi.n	8009344 <SD_ioctl+0x98>
 80092da:	a201      	add	r2, pc, #4	; (adr r2, 80092e0 <SD_ioctl+0x34>)
 80092dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e0:	080092f1 	.word	0x080092f1
 80092e4:	080092f9 	.word	0x080092f9
 80092e8:	08009311 	.word	0x08009311
 80092ec:	0800932b 	.word	0x0800932b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80092f0:	2300      	movs	r3, #0
 80092f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80092f6:	e028      	b.n	800934a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80092f8:	f107 030c 	add.w	r3, r7, #12
 80092fc:	4618      	mov	r0, r3
 80092fe:	f7ff fe67 	bl	8008fd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8009302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8009308:	2300      	movs	r3, #0
 800930a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800930e:	e01c      	b.n	800934a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8009310:	f107 030c 	add.w	r3, r7, #12
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fe5b 	bl	8008fd0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800931a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800931c:	b29a      	uxth	r2, r3
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8009322:	2300      	movs	r3, #0
 8009324:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009328:	e00f      	b.n	800934a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800932a:	f107 030c 	add.w	r3, r7, #12
 800932e:	4618      	mov	r0, r3
 8009330:	f7ff fe4e 	bl	8008fd0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8009334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009336:	0a5a      	lsrs	r2, r3, #9
 8009338:	683b      	ldr	r3, [r7, #0]
 800933a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800933c:	2300      	movs	r3, #0
 800933e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8009342:	e002      	b.n	800934a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8009344:	2304      	movs	r3, #4
 8009346:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800934a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800934e:	4618      	mov	r0, r3
 8009350:	3730      	adds	r7, #48	; 0x30
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}
 8009356:	bf00      	nop
 8009358:	20000009 	.word	0x20000009

0800935c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800935c:	b480      	push	{r7}
 800935e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8009360:	4b03      	ldr	r3, [pc, #12]	; (8009370 <BSP_SD_WriteCpltCallback+0x14>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
}
 8009366:	bf00      	nop
 8009368:	46bd      	mov	sp, r7
 800936a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800936e:	4770      	bx	lr
 8009370:	20000098 	.word	0x20000098

08009374 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8009374:	b480      	push	{r7}
 8009376:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8009378:	4b03      	ldr	r3, [pc, #12]	; (8009388 <BSP_SD_ReadCpltCallback+0x14>)
 800937a:	2201      	movs	r2, #1
 800937c:	601a      	str	r2, [r3, #0]
}
 800937e:	bf00      	nop
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	2000009c 	.word	0x2000009c

0800938c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8009392:	4b8d      	ldr	r3, [pc, #564]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009394:	22c0      	movs	r2, #192	; 0xc0
 8009396:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8009398:	4b8b      	ldr	r3, [pc, #556]	; (80095c8 <MX_LWIP_Init+0x23c>)
 800939a:	22a8      	movs	r2, #168	; 0xa8
 800939c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800939e:	4b8a      	ldr	r3, [pc, #552]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 235;
 80093a4:	4b88      	ldr	r3, [pc, #544]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093a6:	22eb      	movs	r2, #235	; 0xeb
 80093a8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80093aa:	4b88      	ldr	r3, [pc, #544]	; (80095cc <MX_LWIP_Init+0x240>)
 80093ac:	22ff      	movs	r2, #255	; 0xff
 80093ae:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80093b0:	4b86      	ldr	r3, [pc, #536]	; (80095cc <MX_LWIP_Init+0x240>)
 80093b2:	22ff      	movs	r2, #255	; 0xff
 80093b4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80093b6:	4b85      	ldr	r3, [pc, #532]	; (80095cc <MX_LWIP_Init+0x240>)
 80093b8:	22ff      	movs	r2, #255	; 0xff
 80093ba:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80093bc:	4b83      	ldr	r3, [pc, #524]	; (80095cc <MX_LWIP_Init+0x240>)
 80093be:	2200      	movs	r2, #0
 80093c0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80093c2:	4b83      	ldr	r3, [pc, #524]	; (80095d0 <MX_LWIP_Init+0x244>)
 80093c4:	22c0      	movs	r2, #192	; 0xc0
 80093c6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80093c8:	4b81      	ldr	r3, [pc, #516]	; (80095d0 <MX_LWIP_Init+0x244>)
 80093ca:	22a8      	movs	r2, #168	; 0xa8
 80093cc:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 80093ce:	4b80      	ldr	r3, [pc, #512]	; (80095d0 <MX_LWIP_Init+0x244>)
 80093d0:	2200      	movs	r2, #0
 80093d2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80093d4:	4b7e      	ldr	r3, [pc, #504]	; (80095d0 <MX_LWIP_Init+0x244>)
 80093d6:	2201      	movs	r2, #1
 80093d8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 80093da:	f000 fd14 	bl	8009e06 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80093de:	4b7a      	ldr	r3, [pc, #488]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093e0:	781b      	ldrb	r3, [r3, #0]
 80093e2:	061a      	lsls	r2, r3, #24
 80093e4:	4b78      	ldr	r3, [pc, #480]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093e6:	785b      	ldrb	r3, [r3, #1]
 80093e8:	041b      	lsls	r3, r3, #16
 80093ea:	431a      	orrs	r2, r3
 80093ec:	4b76      	ldr	r3, [pc, #472]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093ee:	789b      	ldrb	r3, [r3, #2]
 80093f0:	021b      	lsls	r3, r3, #8
 80093f2:	4313      	orrs	r3, r2
 80093f4:	4a74      	ldr	r2, [pc, #464]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093f6:	78d2      	ldrb	r2, [r2, #3]
 80093f8:	4313      	orrs	r3, r2
 80093fa:	061a      	lsls	r2, r3, #24
 80093fc:	4b72      	ldr	r3, [pc, #456]	; (80095c8 <MX_LWIP_Init+0x23c>)
 80093fe:	781b      	ldrb	r3, [r3, #0]
 8009400:	0619      	lsls	r1, r3, #24
 8009402:	4b71      	ldr	r3, [pc, #452]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009404:	785b      	ldrb	r3, [r3, #1]
 8009406:	041b      	lsls	r3, r3, #16
 8009408:	4319      	orrs	r1, r3
 800940a:	4b6f      	ldr	r3, [pc, #444]	; (80095c8 <MX_LWIP_Init+0x23c>)
 800940c:	789b      	ldrb	r3, [r3, #2]
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	430b      	orrs	r3, r1
 8009412:	496d      	ldr	r1, [pc, #436]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009414:	78c9      	ldrb	r1, [r1, #3]
 8009416:	430b      	orrs	r3, r1
 8009418:	021b      	lsls	r3, r3, #8
 800941a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800941e:	431a      	orrs	r2, r3
 8009420:	4b69      	ldr	r3, [pc, #420]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	0619      	lsls	r1, r3, #24
 8009426:	4b68      	ldr	r3, [pc, #416]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009428:	785b      	ldrb	r3, [r3, #1]
 800942a:	041b      	lsls	r3, r3, #16
 800942c:	4319      	orrs	r1, r3
 800942e:	4b66      	ldr	r3, [pc, #408]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009430:	789b      	ldrb	r3, [r3, #2]
 8009432:	021b      	lsls	r3, r3, #8
 8009434:	430b      	orrs	r3, r1
 8009436:	4964      	ldr	r1, [pc, #400]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009438:	78c9      	ldrb	r1, [r1, #3]
 800943a:	430b      	orrs	r3, r1
 800943c:	0a1b      	lsrs	r3, r3, #8
 800943e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009442:	431a      	orrs	r2, r3
 8009444:	4b60      	ldr	r3, [pc, #384]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	0619      	lsls	r1, r3, #24
 800944a:	4b5f      	ldr	r3, [pc, #380]	; (80095c8 <MX_LWIP_Init+0x23c>)
 800944c:	785b      	ldrb	r3, [r3, #1]
 800944e:	041b      	lsls	r3, r3, #16
 8009450:	4319      	orrs	r1, r3
 8009452:	4b5d      	ldr	r3, [pc, #372]	; (80095c8 <MX_LWIP_Init+0x23c>)
 8009454:	789b      	ldrb	r3, [r3, #2]
 8009456:	021b      	lsls	r3, r3, #8
 8009458:	430b      	orrs	r3, r1
 800945a:	495b      	ldr	r1, [pc, #364]	; (80095c8 <MX_LWIP_Init+0x23c>)
 800945c:	78c9      	ldrb	r1, [r1, #3]
 800945e:	430b      	orrs	r3, r1
 8009460:	0e1b      	lsrs	r3, r3, #24
 8009462:	4313      	orrs	r3, r2
 8009464:	4a5b      	ldr	r2, [pc, #364]	; (80095d4 <MX_LWIP_Init+0x248>)
 8009466:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8009468:	4b58      	ldr	r3, [pc, #352]	; (80095cc <MX_LWIP_Init+0x240>)
 800946a:	781b      	ldrb	r3, [r3, #0]
 800946c:	061a      	lsls	r2, r3, #24
 800946e:	4b57      	ldr	r3, [pc, #348]	; (80095cc <MX_LWIP_Init+0x240>)
 8009470:	785b      	ldrb	r3, [r3, #1]
 8009472:	041b      	lsls	r3, r3, #16
 8009474:	431a      	orrs	r2, r3
 8009476:	4b55      	ldr	r3, [pc, #340]	; (80095cc <MX_LWIP_Init+0x240>)
 8009478:	789b      	ldrb	r3, [r3, #2]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	4313      	orrs	r3, r2
 800947e:	4a53      	ldr	r2, [pc, #332]	; (80095cc <MX_LWIP_Init+0x240>)
 8009480:	78d2      	ldrb	r2, [r2, #3]
 8009482:	4313      	orrs	r3, r2
 8009484:	061a      	lsls	r2, r3, #24
 8009486:	4b51      	ldr	r3, [pc, #324]	; (80095cc <MX_LWIP_Init+0x240>)
 8009488:	781b      	ldrb	r3, [r3, #0]
 800948a:	0619      	lsls	r1, r3, #24
 800948c:	4b4f      	ldr	r3, [pc, #316]	; (80095cc <MX_LWIP_Init+0x240>)
 800948e:	785b      	ldrb	r3, [r3, #1]
 8009490:	041b      	lsls	r3, r3, #16
 8009492:	4319      	orrs	r1, r3
 8009494:	4b4d      	ldr	r3, [pc, #308]	; (80095cc <MX_LWIP_Init+0x240>)
 8009496:	789b      	ldrb	r3, [r3, #2]
 8009498:	021b      	lsls	r3, r3, #8
 800949a:	430b      	orrs	r3, r1
 800949c:	494b      	ldr	r1, [pc, #300]	; (80095cc <MX_LWIP_Init+0x240>)
 800949e:	78c9      	ldrb	r1, [r1, #3]
 80094a0:	430b      	orrs	r3, r1
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094a8:	431a      	orrs	r2, r3
 80094aa:	4b48      	ldr	r3, [pc, #288]	; (80095cc <MX_LWIP_Init+0x240>)
 80094ac:	781b      	ldrb	r3, [r3, #0]
 80094ae:	0619      	lsls	r1, r3, #24
 80094b0:	4b46      	ldr	r3, [pc, #280]	; (80095cc <MX_LWIP_Init+0x240>)
 80094b2:	785b      	ldrb	r3, [r3, #1]
 80094b4:	041b      	lsls	r3, r3, #16
 80094b6:	4319      	orrs	r1, r3
 80094b8:	4b44      	ldr	r3, [pc, #272]	; (80095cc <MX_LWIP_Init+0x240>)
 80094ba:	789b      	ldrb	r3, [r3, #2]
 80094bc:	021b      	lsls	r3, r3, #8
 80094be:	430b      	orrs	r3, r1
 80094c0:	4942      	ldr	r1, [pc, #264]	; (80095cc <MX_LWIP_Init+0x240>)
 80094c2:	78c9      	ldrb	r1, [r1, #3]
 80094c4:	430b      	orrs	r3, r1
 80094c6:	0a1b      	lsrs	r3, r3, #8
 80094c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80094cc:	431a      	orrs	r2, r3
 80094ce:	4b3f      	ldr	r3, [pc, #252]	; (80095cc <MX_LWIP_Init+0x240>)
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	0619      	lsls	r1, r3, #24
 80094d4:	4b3d      	ldr	r3, [pc, #244]	; (80095cc <MX_LWIP_Init+0x240>)
 80094d6:	785b      	ldrb	r3, [r3, #1]
 80094d8:	041b      	lsls	r3, r3, #16
 80094da:	4319      	orrs	r1, r3
 80094dc:	4b3b      	ldr	r3, [pc, #236]	; (80095cc <MX_LWIP_Init+0x240>)
 80094de:	789b      	ldrb	r3, [r3, #2]
 80094e0:	021b      	lsls	r3, r3, #8
 80094e2:	430b      	orrs	r3, r1
 80094e4:	4939      	ldr	r1, [pc, #228]	; (80095cc <MX_LWIP_Init+0x240>)
 80094e6:	78c9      	ldrb	r1, [r1, #3]
 80094e8:	430b      	orrs	r3, r1
 80094ea:	0e1b      	lsrs	r3, r3, #24
 80094ec:	4313      	orrs	r3, r2
 80094ee:	4a3a      	ldr	r2, [pc, #232]	; (80095d8 <MX_LWIP_Init+0x24c>)
 80094f0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80094f2:	4b37      	ldr	r3, [pc, #220]	; (80095d0 <MX_LWIP_Init+0x244>)
 80094f4:	781b      	ldrb	r3, [r3, #0]
 80094f6:	061a      	lsls	r2, r3, #24
 80094f8:	4b35      	ldr	r3, [pc, #212]	; (80095d0 <MX_LWIP_Init+0x244>)
 80094fa:	785b      	ldrb	r3, [r3, #1]
 80094fc:	041b      	lsls	r3, r3, #16
 80094fe:	431a      	orrs	r2, r3
 8009500:	4b33      	ldr	r3, [pc, #204]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009502:	789b      	ldrb	r3, [r3, #2]
 8009504:	021b      	lsls	r3, r3, #8
 8009506:	4313      	orrs	r3, r2
 8009508:	4a31      	ldr	r2, [pc, #196]	; (80095d0 <MX_LWIP_Init+0x244>)
 800950a:	78d2      	ldrb	r2, [r2, #3]
 800950c:	4313      	orrs	r3, r2
 800950e:	061a      	lsls	r2, r3, #24
 8009510:	4b2f      	ldr	r3, [pc, #188]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009512:	781b      	ldrb	r3, [r3, #0]
 8009514:	0619      	lsls	r1, r3, #24
 8009516:	4b2e      	ldr	r3, [pc, #184]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009518:	785b      	ldrb	r3, [r3, #1]
 800951a:	041b      	lsls	r3, r3, #16
 800951c:	4319      	orrs	r1, r3
 800951e:	4b2c      	ldr	r3, [pc, #176]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009520:	789b      	ldrb	r3, [r3, #2]
 8009522:	021b      	lsls	r3, r3, #8
 8009524:	430b      	orrs	r3, r1
 8009526:	492a      	ldr	r1, [pc, #168]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009528:	78c9      	ldrb	r1, [r1, #3]
 800952a:	430b      	orrs	r3, r1
 800952c:	021b      	lsls	r3, r3, #8
 800952e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009532:	431a      	orrs	r2, r3
 8009534:	4b26      	ldr	r3, [pc, #152]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009536:	781b      	ldrb	r3, [r3, #0]
 8009538:	0619      	lsls	r1, r3, #24
 800953a:	4b25      	ldr	r3, [pc, #148]	; (80095d0 <MX_LWIP_Init+0x244>)
 800953c:	785b      	ldrb	r3, [r3, #1]
 800953e:	041b      	lsls	r3, r3, #16
 8009540:	4319      	orrs	r1, r3
 8009542:	4b23      	ldr	r3, [pc, #140]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009544:	789b      	ldrb	r3, [r3, #2]
 8009546:	021b      	lsls	r3, r3, #8
 8009548:	430b      	orrs	r3, r1
 800954a:	4921      	ldr	r1, [pc, #132]	; (80095d0 <MX_LWIP_Init+0x244>)
 800954c:	78c9      	ldrb	r1, [r1, #3]
 800954e:	430b      	orrs	r3, r1
 8009550:	0a1b      	lsrs	r3, r3, #8
 8009552:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009556:	431a      	orrs	r2, r3
 8009558:	4b1d      	ldr	r3, [pc, #116]	; (80095d0 <MX_LWIP_Init+0x244>)
 800955a:	781b      	ldrb	r3, [r3, #0]
 800955c:	0619      	lsls	r1, r3, #24
 800955e:	4b1c      	ldr	r3, [pc, #112]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009560:	785b      	ldrb	r3, [r3, #1]
 8009562:	041b      	lsls	r3, r3, #16
 8009564:	4319      	orrs	r1, r3
 8009566:	4b1a      	ldr	r3, [pc, #104]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009568:	789b      	ldrb	r3, [r3, #2]
 800956a:	021b      	lsls	r3, r3, #8
 800956c:	430b      	orrs	r3, r1
 800956e:	4918      	ldr	r1, [pc, #96]	; (80095d0 <MX_LWIP_Init+0x244>)
 8009570:	78c9      	ldrb	r1, [r1, #3]
 8009572:	430b      	orrs	r3, r1
 8009574:	0e1b      	lsrs	r3, r3, #24
 8009576:	4313      	orrs	r3, r2
 8009578:	4a18      	ldr	r2, [pc, #96]	; (80095dc <MX_LWIP_Init+0x250>)
 800957a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800957c:	4b18      	ldr	r3, [pc, #96]	; (80095e0 <MX_LWIP_Init+0x254>)
 800957e:	9302      	str	r3, [sp, #8]
 8009580:	4b18      	ldr	r3, [pc, #96]	; (80095e4 <MX_LWIP_Init+0x258>)
 8009582:	9301      	str	r3, [sp, #4]
 8009584:	2300      	movs	r3, #0
 8009586:	9300      	str	r3, [sp, #0]
 8009588:	4b14      	ldr	r3, [pc, #80]	; (80095dc <MX_LWIP_Init+0x250>)
 800958a:	4a13      	ldr	r2, [pc, #76]	; (80095d8 <MX_LWIP_Init+0x24c>)
 800958c:	4911      	ldr	r1, [pc, #68]	; (80095d4 <MX_LWIP_Init+0x248>)
 800958e:	4816      	ldr	r0, [pc, #88]	; (80095e8 <MX_LWIP_Init+0x25c>)
 8009590:	f001 f8de 	bl	800a750 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8009594:	4814      	ldr	r0, [pc, #80]	; (80095e8 <MX_LWIP_Init+0x25c>)
 8009596:	f001 fa8d 	bl	800aab4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800959a:	4b13      	ldr	r3, [pc, #76]	; (80095e8 <MX_LWIP_Init+0x25c>)
 800959c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80095a0:	089b      	lsrs	r3, r3, #2
 80095a2:	f003 0301 	and.w	r3, r3, #1
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d003      	beq.n	80095b4 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80095ac:	480e      	ldr	r0, [pc, #56]	; (80095e8 <MX_LWIP_Init+0x25c>)
 80095ae:	f001 fa91 	bl	800aad4 <netif_set_up>
 80095b2:	e002      	b.n	80095ba <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80095b4:	480c      	ldr	r0, [pc, #48]	; (80095e8 <MX_LWIP_Init+0x25c>)
 80095b6:	f001 faf9 	bl	800abac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernetif_update_config);
 80095ba:	490c      	ldr	r1, [pc, #48]	; (80095ec <MX_LWIP_Init+0x260>)
 80095bc:	480a      	ldr	r0, [pc, #40]	; (80095e8 <MX_LWIP_Init+0x25c>)
 80095be:	f001 fb27 	bl	800ac10 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 80095c2:	bf00      	nop
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}
 80095c8:	20000bc8 	.word	0x20000bc8
 80095cc:	20000bc4 	.word	0x20000bc4
 80095d0:	20000b88 	.word	0x20000b88
 80095d4:	20000bc0 	.word	0x20000bc0
 80095d8:	20000bcc 	.word	0x20000bcc
 80095dc:	20000bd0 	.word	0x20000bd0
 80095e0:	08013bc9 	.word	0x08013bc9
 80095e4:	08009b7d 	.word	0x08009b7d
 80095e8:	20000b8c 	.word	0x20000b8c
 80095ec:	08009be9 	.word	0x08009be9

080095f0 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b08e      	sub	sp, #56	; 0x38
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80095f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095fc:	2200      	movs	r2, #0
 80095fe:	601a      	str	r2, [r3, #0]
 8009600:	605a      	str	r2, [r3, #4]
 8009602:	609a      	str	r2, [r3, #8]
 8009604:	60da      	str	r2, [r3, #12]
 8009606:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	4a46      	ldr	r2, [pc, #280]	; (8009728 <HAL_ETH_MspInit+0x138>)
 800960e:	4293      	cmp	r3, r2
 8009610:	f040 8085 	bne.w	800971e <HAL_ETH_MspInit+0x12e>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8009614:	2300      	movs	r3, #0
 8009616:	623b      	str	r3, [r7, #32]
 8009618:	4b44      	ldr	r3, [pc, #272]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800961a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800961c:	4a43      	ldr	r2, [pc, #268]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800961e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009622:	6313      	str	r3, [r2, #48]	; 0x30
 8009624:	4b41      	ldr	r3, [pc, #260]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009626:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009628:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800962c:	623b      	str	r3, [r7, #32]
 800962e:	6a3b      	ldr	r3, [r7, #32]
 8009630:	2300      	movs	r3, #0
 8009632:	61fb      	str	r3, [r7, #28]
 8009634:	4b3d      	ldr	r3, [pc, #244]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009638:	4a3c      	ldr	r2, [pc, #240]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800963a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800963e:	6313      	str	r3, [r2, #48]	; 0x30
 8009640:	4b3a      	ldr	r3, [pc, #232]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009644:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009648:	61fb      	str	r3, [r7, #28]
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	2300      	movs	r3, #0
 800964e:	61bb      	str	r3, [r7, #24]
 8009650:	4b36      	ldr	r3, [pc, #216]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009654:	4a35      	ldr	r2, [pc, #212]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009656:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800965a:	6313      	str	r3, [r2, #48]	; 0x30
 800965c:	4b33      	ldr	r3, [pc, #204]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800965e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009660:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009664:	61bb      	str	r3, [r7, #24]
 8009666:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009668:	2300      	movs	r3, #0
 800966a:	617b      	str	r3, [r7, #20]
 800966c:	4b2f      	ldr	r3, [pc, #188]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800966e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009670:	4a2e      	ldr	r2, [pc, #184]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009672:	f043 0304 	orr.w	r3, r3, #4
 8009676:	6313      	str	r3, [r2, #48]	; 0x30
 8009678:	4b2c      	ldr	r3, [pc, #176]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800967a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800967c:	f003 0304 	and.w	r3, r3, #4
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009684:	2300      	movs	r3, #0
 8009686:	613b      	str	r3, [r7, #16]
 8009688:	4b28      	ldr	r3, [pc, #160]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800968a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800968c:	4a27      	ldr	r2, [pc, #156]	; (800972c <HAL_ETH_MspInit+0x13c>)
 800968e:	f043 0301 	orr.w	r3, r3, #1
 8009692:	6313      	str	r3, [r2, #48]	; 0x30
 8009694:	4b25      	ldr	r3, [pc, #148]	; (800972c <HAL_ETH_MspInit+0x13c>)
 8009696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009698:	f003 0301 	and.w	r3, r3, #1
 800969c:	613b      	str	r3, [r7, #16]
 800969e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80096a0:	2300      	movs	r3, #0
 80096a2:	60fb      	str	r3, [r7, #12]
 80096a4:	4b21      	ldr	r3, [pc, #132]	; (800972c <HAL_ETH_MspInit+0x13c>)
 80096a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096a8:	4a20      	ldr	r2, [pc, #128]	; (800972c <HAL_ETH_MspInit+0x13c>)
 80096aa:	f043 0302 	orr.w	r3, r3, #2
 80096ae:	6313      	str	r3, [r2, #48]	; 0x30
 80096b0:	4b1e      	ldr	r3, [pc, #120]	; (800972c <HAL_ETH_MspInit+0x13c>)
 80096b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b4:	f003 0302 	and.w	r3, r3, #2
 80096b8:	60fb      	str	r3, [r7, #12]
 80096ba:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80096bc:	2332      	movs	r3, #50	; 0x32
 80096be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096c0:	2302      	movs	r3, #2
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c4:	2300      	movs	r3, #0
 80096c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096c8:	2303      	movs	r3, #3
 80096ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096cc:	230b      	movs	r3, #11
 80096ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80096d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096d4:	4619      	mov	r1, r3
 80096d6:	4816      	ldr	r0, [pc, #88]	; (8009730 <HAL_ETH_MspInit+0x140>)
 80096d8:	f7fa fcfe 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80096dc:	2386      	movs	r3, #134	; 0x86
 80096de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096e0:	2302      	movs	r3, #2
 80096e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096e4:	2300      	movs	r3, #0
 80096e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80096e8:	2303      	movs	r3, #3
 80096ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80096ec:	230b      	movs	r3, #11
 80096ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80096f4:	4619      	mov	r1, r3
 80096f6:	480f      	ldr	r0, [pc, #60]	; (8009734 <HAL_ETH_MspInit+0x144>)
 80096f8:	f7fa fcee 	bl	80040d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80096fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8009700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009702:	2302      	movs	r3, #2
 8009704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009706:	2300      	movs	r3, #0
 8009708:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800970a:	2303      	movs	r3, #3
 800970c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800970e:	230b      	movs	r3, #11
 8009710:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009712:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009716:	4619      	mov	r1, r3
 8009718:	4807      	ldr	r0, [pc, #28]	; (8009738 <HAL_ETH_MspInit+0x148>)
 800971a:	f7fa fcdd 	bl	80040d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800971e:	bf00      	nop
 8009720:	3738      	adds	r7, #56	; 0x38
 8009722:	46bd      	mov	sp, r7
 8009724:	bd80      	pop	{r7, pc}
 8009726:	bf00      	nop
 8009728:	40028000 	.word	0x40028000
 800972c:	40023800 	.word	0x40023800
 8009730:	40020800 	.word	0x40020800
 8009734:	40020000 	.word	0x40020000
 8009738:	40020400 	.word	0x40020400

0800973c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b086      	sub	sp, #24
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8009744:	2300      	movs	r3, #0
 8009746:	613b      	str	r3, [r7, #16]
  HAL_StatusTypeDef hal_eth_init_status;

/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8009748:	4b4d      	ldr	r3, [pc, #308]	; (8009880 <low_level_init+0x144>)
 800974a:	4a4e      	ldr	r2, [pc, #312]	; (8009884 <low_level_init+0x148>)
 800974c:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 800974e:	4b4c      	ldr	r3, [pc, #304]	; (8009880 <low_level_init+0x144>)
 8009750:	2201      	movs	r2, #1
 8009752:	605a      	str	r2, [r3, #4]
  heth.Init.Speed = ETH_SPEED_100M;
 8009754:	4b4a      	ldr	r3, [pc, #296]	; (8009880 <low_level_init+0x144>)
 8009756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800975a:	609a      	str	r2, [r3, #8]
  heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 800975c:	4b48      	ldr	r3, [pc, #288]	; (8009880 <low_level_init+0x144>)
 800975e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009762:	60da      	str	r2, [r3, #12]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8009764:	4b46      	ldr	r3, [pc, #280]	; (8009880 <low_level_init+0x144>)
 8009766:	2201      	movs	r2, #1
 8009768:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 800976a:	2300      	movs	r3, #0
 800976c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800976e:	2380      	movs	r3, #128	; 0x80
 8009770:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8009772:	23e1      	movs	r3, #225	; 0xe1
 8009774:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8009776:	2300      	movs	r3, #0
 8009778:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800977a:	2300      	movs	r3, #0
 800977c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800977e:	2300      	movs	r3, #0
 8009780:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8009782:	4a3f      	ldr	r2, [pc, #252]	; (8009880 <low_level_init+0x144>)
 8009784:	f107 0308 	add.w	r3, r7, #8
 8009788:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXPOLLING_MODE;
 800978a:	4b3d      	ldr	r3, [pc, #244]	; (8009880 <low_level_init+0x144>)
 800978c:	2200      	movs	r2, #0
 800978e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8009790:	4b3b      	ldr	r3, [pc, #236]	; (8009880 <low_level_init+0x144>)
 8009792:	2200      	movs	r2, #0
 8009794:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8009796:	4b3a      	ldr	r3, [pc, #232]	; (8009880 <low_level_init+0x144>)
 8009798:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800979c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800979e:	4838      	ldr	r0, [pc, #224]	; (8009880 <low_level_init+0x144>)
 80097a0:	f7f9 fb74 	bl	8002e8c <HAL_ETH_Init>
 80097a4:	4603      	mov	r3, r0
 80097a6:	75fb      	strb	r3, [r7, #23]

  if (hal_eth_init_status == HAL_OK)
 80097a8:	7dfb      	ldrb	r3, [r7, #23]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d108      	bne.n	80097c0 <low_level_init+0x84>
  {
    /* Set netif link flag */
    netif->flags |= NETIF_FLAG_LINK_UP;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80097b4:	f043 0304 	orr.w	r3, r3, #4
 80097b8:	b2da      	uxtb	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80097c0:	2304      	movs	r3, #4
 80097c2:	4a31      	ldr	r2, [pc, #196]	; (8009888 <low_level_init+0x14c>)
 80097c4:	4931      	ldr	r1, [pc, #196]	; (800988c <low_level_init+0x150>)
 80097c6:	482e      	ldr	r0, [pc, #184]	; (8009880 <low_level_init+0x144>)
 80097c8:	f7f9 fcfc 	bl	80031c4 <HAL_ETH_DMATxDescListInit>

  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80097cc:	2304      	movs	r3, #4
 80097ce:	4a30      	ldr	r2, [pc, #192]	; (8009890 <low_level_init+0x154>)
 80097d0:	4930      	ldr	r1, [pc, #192]	; (8009894 <low_level_init+0x158>)
 80097d2:	482b      	ldr	r0, [pc, #172]	; (8009880 <low_level_init+0x144>)
 80097d4:	f7f9 fd5f 	bl	8003296 <HAL_ETH_DMARxDescListInit>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	2206      	movs	r2, #6
 80097dc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80097e0:	4b27      	ldr	r3, [pc, #156]	; (8009880 <low_level_init+0x144>)
 80097e2:	695b      	ldr	r3, [r3, #20]
 80097e4:	781a      	ldrb	r2, [r3, #0]
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80097ec:	4b24      	ldr	r3, [pc, #144]	; (8009880 <low_level_init+0x144>)
 80097ee:	695b      	ldr	r3, [r3, #20]
 80097f0:	785a      	ldrb	r2, [r3, #1]
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80097f8:	4b21      	ldr	r3, [pc, #132]	; (8009880 <low_level_init+0x144>)
 80097fa:	695b      	ldr	r3, [r3, #20]
 80097fc:	789a      	ldrb	r2, [r3, #2]
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8009804:	4b1e      	ldr	r3, [pc, #120]	; (8009880 <low_level_init+0x144>)
 8009806:	695b      	ldr	r3, [r3, #20]
 8009808:	78da      	ldrb	r2, [r3, #3]
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8009810:	4b1b      	ldr	r3, [pc, #108]	; (8009880 <low_level_init+0x144>)
 8009812:	695b      	ldr	r3, [r3, #20]
 8009814:	791a      	ldrb	r2, [r3, #4]
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800981c:	4b18      	ldr	r3, [pc, #96]	; (8009880 <low_level_init+0x144>)
 800981e:	695b      	ldr	r3, [r3, #20]
 8009820:	795a      	ldrb	r2, [r3, #5]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = 1500;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800982e:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009836:	f043 030a 	orr.w	r3, r3, #10
 800983a:	b2da      	uxtb	r2, r3
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8009842:	480f      	ldr	r0, [pc, #60]	; (8009880 <low_level_init+0x144>)
 8009844:	f7f9 ffd0 	bl	80037e8 <HAL_ETH_Start>
/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 8009848:	f107 0310 	add.w	r3, r7, #16
 800984c:	461a      	mov	r2, r3
 800984e:	211d      	movs	r1, #29
 8009850:	480b      	ldr	r0, [pc, #44]	; (8009880 <low_level_init+0x144>)
 8009852:	f7f9 fefb 	bl	800364c <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 8009856:	693b      	ldr	r3, [r7, #16]
 8009858:	f043 030b 	orr.w	r3, r3, #11
 800985c:	613b      	str	r3, [r7, #16]

  /* Enable Interrupt on change of link status */
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	461a      	mov	r2, r3
 8009862:	211d      	movs	r1, #29
 8009864:	4806      	ldr	r0, [pc, #24]	; (8009880 <low_level_init+0x144>)
 8009866:	f7f9 ff59 	bl	800371c <HAL_ETH_WritePHYRegister>

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 800986a:	f107 0310 	add.w	r3, r7, #16
 800986e:	461a      	mov	r2, r3
 8009870:	211d      	movs	r1, #29
 8009872:	4803      	ldr	r0, [pc, #12]	; (8009880 <low_level_init+0x144>)
 8009874:	f7f9 feea 	bl	800364c <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8009878:	bf00      	nop
 800987a:	3718      	adds	r7, #24
 800987c:	46bd      	mov	sp, r7
 800987e:	bd80      	pop	{r7, pc}
 8009880:	200024a4 	.word	0x200024a4
 8009884:	40028000 	.word	0x40028000
 8009888:	200024ec 	.word	0x200024ec
 800988c:	20000bd4 	.word	0x20000bd4
 8009890:	20000c54 	.word	0x20000c54
 8009894:	20002424 	.word	0x20002424

08009898 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	; 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	6078      	str	r0, [r7, #4]
 80098a0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80098a2:	4b4b      	ldr	r3, [pc, #300]	; (80099d0 <low_level_output+0x138>)
 80098a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098a6:	689b      	ldr	r3, [r3, #8]
 80098a8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80098aa:	2300      	movs	r3, #0
 80098ac:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80098ae:	2300      	movs	r3, #0
 80098b0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80098b2:	2300      	movs	r3, #0
 80098b4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80098b6:	2300      	movs	r3, #0
 80098b8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80098ba:	4b45      	ldr	r3, [pc, #276]	; (80099d0 <low_level_output+0x138>)
 80098bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098be:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 80098c0:	2300      	movs	r3, #0
 80098c2:	613b      	str	r3, [r7, #16]

  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	623b      	str	r3, [r7, #32]
 80098c8:	e05a      	b.n	8009980 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	da03      	bge.n	80098da <low_level_output+0x42>
      {
        errval = ERR_USE;
 80098d2:	23f8      	movs	r3, #248	; 0xf8
 80098d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 80098d8:	e05c      	b.n	8009994 <low_level_output+0xfc>
      }

      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 80098da:	6a3b      	ldr	r3, [r7, #32]
 80098dc:	895b      	ldrh	r3, [r3, #10]
 80098de:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	60bb      	str	r3, [r7, #8]

      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 80098e4:	e02f      	b.n	8009946 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 80098e6:	69fa      	ldr	r2, [r7, #28]
 80098e8:	693b      	ldr	r3, [r7, #16]
 80098ea:	18d0      	adds	r0, r2, r3
 80098ec:	6a3b      	ldr	r3, [r7, #32]
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	68bb      	ldr	r3, [r7, #8]
 80098f2:	18d1      	adds	r1, r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 80098fa:	3304      	adds	r3, #4
 80098fc:	461a      	mov	r2, r3
 80098fe:	f00a fa6b 	bl	8013dd8 <memcpy>

        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8009902:	69bb      	ldr	r3, [r7, #24]
 8009904:	68db      	ldr	r3, [r3, #12]
 8009906:	61bb      	str	r3, [r7, #24]

        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	2b00      	cmp	r3, #0
 800990e:	da03      	bge.n	8009918 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8009910:	23f8      	movs	r3, #248	; 0xf8
 8009912:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8009916:	e03d      	b.n	8009994 <low_level_output+0xfc>
        }

        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8009918:	69bb      	ldr	r3, [r7, #24]
 800991a:	689b      	ldr	r3, [r3, #8]
 800991c:	61fb      	str	r3, [r7, #28]

        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 800991e:	693a      	ldr	r2, [r7, #16]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	4413      	add	r3, r2
 8009924:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009928:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	693b      	ldr	r3, [r7, #16]
 800992e:	1ad3      	subs	r3, r2, r3
 8009930:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009934:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	693b      	ldr	r3, [r7, #16]
 800993a:	1ad3      	subs	r3, r2, r3
 800993c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009940:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8009942:	2300      	movs	r3, #0
 8009944:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	693b      	ldr	r3, [r7, #16]
 800994a:	4413      	add	r3, r2
 800994c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009950:	4293      	cmp	r3, r2
 8009952:	d8c8      	bhi.n	80098e6 <low_level_output+0x4e>
      }

      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8009954:	69fa      	ldr	r2, [r7, #28]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	18d0      	adds	r0, r2, r3
 800995a:	6a3b      	ldr	r3, [r7, #32]
 800995c:	685a      	ldr	r2, [r3, #4]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	4413      	add	r3, r2
 8009962:	68fa      	ldr	r2, [r7, #12]
 8009964:	4619      	mov	r1, r3
 8009966:	f00a fa37 	bl	8013dd8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	4413      	add	r3, r2
 8009970:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 8009972:	697a      	ldr	r2, [r7, #20]
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	4413      	add	r3, r2
 8009978:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 800997a:	6a3b      	ldr	r3, [r7, #32]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	623b      	str	r3, [r7, #32]
 8009980:	6a3b      	ldr	r3, [r7, #32]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d1a1      	bne.n	80098ca <low_level_output+0x32>
    }

  /* Prepare transmit descriptors to give to DMA */
  HAL_ETH_TransmitFrame(&heth, framelength);
 8009986:	6979      	ldr	r1, [r7, #20]
 8009988:	4811      	ldr	r0, [pc, #68]	; (80099d0 <low_level_output+0x138>)
 800998a:	f7f9 fcf1 	bl	8003370 <HAL_ETH_TransmitFrame>

  errval = ERR_OK;
 800998e:	2300      	movs	r3, #0
 8009990:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

error:

  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 8009994:	4b0e      	ldr	r3, [pc, #56]	; (80099d0 <low_level_output+0x138>)
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800999c:	3314      	adds	r3, #20
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	f003 0320 	and.w	r3, r3, #32
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d00d      	beq.n	80099c4 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80099a8:	4b09      	ldr	r3, [pc, #36]	; (80099d0 <low_level_output+0x138>)
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099b0:	3314      	adds	r3, #20
 80099b2:	2220      	movs	r2, #32
 80099b4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80099b6:	4b06      	ldr	r3, [pc, #24]	; (80099d0 <low_level_output+0x138>)
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80099be:	3304      	adds	r3, #4
 80099c0:	2200      	movs	r2, #0
 80099c2:	601a      	str	r2, [r3, #0]
  }
  return errval;
 80099c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80099c8:	4618      	mov	r0, r3
 80099ca:	3728      	adds	r7, #40	; 0x28
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	200024a4 	.word	0x200024a4

080099d4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b08c      	sub	sp, #48	; 0x30
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80099dc:	2300      	movs	r3, #0
 80099de:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 80099e0:	2300      	movs	r3, #0
 80099e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 80099e4:	2300      	movs	r3, #0
 80099e6:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 80099e8:	2300      	movs	r3, #0
 80099ea:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 80099ec:	2300      	movs	r3, #0
 80099ee:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 80099f0:	2300      	movs	r3, #0
 80099f2:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 80099f4:	2300      	movs	r3, #0
 80099f6:	613b      	str	r3, [r7, #16]

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame(&heth) != HAL_OK)
 80099f8:	484f      	ldr	r0, [pc, #316]	; (8009b38 <low_level_input+0x164>)
 80099fa:	f7f9 fda3 	bl	8003544 <HAL_ETH_GetReceivedFrame>
 80099fe:	4603      	mov	r3, r0
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d001      	beq.n	8009a08 <low_level_input+0x34>

    return NULL;
 8009a04:	2300      	movs	r3, #0
 8009a06:	e092      	b.n	8009b2e <low_level_input+0x15a>

  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8009a08:	4b4b      	ldr	r3, [pc, #300]	; (8009b38 <low_level_input+0x164>)
 8009a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a0c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 8009a0e:	4b4a      	ldr	r3, [pc, #296]	; (8009b38 <low_level_input+0x164>)
 8009a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a12:	627b      	str	r3, [r7, #36]	; 0x24

  if (len > 0)
 8009a14:	89fb      	ldrh	r3, [r7, #14]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d007      	beq.n	8009a2a <low_level_input+0x56>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 8009a1a:	89fb      	ldrh	r3, [r7, #14]
 8009a1c:	f44f 72c1 	mov.w	r2, #386	; 0x182
 8009a20:	4619      	mov	r1, r3
 8009a22:	2000      	movs	r0, #0
 8009a24:	f001 f990 	bl	800ad48 <pbuf_alloc>
 8009a28:	62f8      	str	r0, [r7, #44]	; 0x2c
  }

  if (p != NULL)
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d04b      	beq.n	8009ac8 <low_level_input+0xf4>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009a30:	4b41      	ldr	r3, [pc, #260]	; (8009b38 <low_level_input+0x164>)
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009a3e:	e040      	b.n	8009ac2 <low_level_input+0xee>
    {
      byteslefttocopy = q->len;
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	895b      	ldrh	r3, [r3, #10]
 8009a44:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8009a46:	2300      	movs	r3, #0
 8009a48:	61bb      	str	r3, [r7, #24]

      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009a4a:	e021      	b.n	8009a90 <low_level_input+0xbc>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 8009a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a4e:	685a      	ldr	r2, [r3, #4]
 8009a50:	69bb      	ldr	r3, [r7, #24]
 8009a52:	18d0      	adds	r0, r2, r3
 8009a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	18d1      	adds	r1, r2, r3
 8009a5a:	69fb      	ldr	r3, [r7, #28]
 8009a5c:	f5c3 63be 	rsb	r3, r3, #1520	; 0x5f0
 8009a60:	3304      	adds	r3, #4
 8009a62:	461a      	mov	r2, r3
 8009a64:	f00a f9b8 	bl	8013dd8 <memcpy>

        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009a68:	6a3b      	ldr	r3, [r7, #32]
 8009a6a:	68db      	ldr	r3, [r3, #12]
 8009a6c:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 8009a6e:	6a3b      	ldr	r3, [r7, #32]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	627b      	str	r3, [r7, #36]	; 0x24

        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 8009a74:	69fa      	ldr	r2, [r7, #28]
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	4413      	add	r3, r2
 8009a7a:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8009a7e:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 8009a80:	69ba      	ldr	r2, [r7, #24]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	1ad3      	subs	r3, r2, r3
 8009a86:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8009a8a:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 8009a8c:	2300      	movs	r3, #0
 8009a8e:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8009a90:	697a      	ldr	r2, [r7, #20]
 8009a92:	69fb      	ldr	r3, [r7, #28]
 8009a94:	4413      	add	r3, r2
 8009a96:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d8d6      	bhi.n	8009a4c <low_level_input+0x78>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 8009a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa0:	685a      	ldr	r2, [r3, #4]
 8009aa2:	69bb      	ldr	r3, [r7, #24]
 8009aa4:	18d0      	adds	r0, r2, r3
 8009aa6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	4413      	add	r3, r2
 8009aac:	697a      	ldr	r2, [r7, #20]
 8009aae:	4619      	mov	r1, r3
 8009ab0:	f00a f992 	bl	8013dd8 <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 8009ab4:	69fa      	ldr	r2, [r7, #28]
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	4413      	add	r3, r2
 8009aba:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8009abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d1bb      	bne.n	8009a40 <low_level_input+0x6c>
    }
  }

    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8009ac8:	4b1b      	ldr	r3, [pc, #108]	; (8009b38 <low_level_input+0x164>)
 8009aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009acc:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009ace:	2300      	movs	r3, #0
 8009ad0:	613b      	str	r3, [r7, #16]
 8009ad2:	e00b      	b.n	8009aec <low_level_input+0x118>
    {
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8009ad4:	6a3b      	ldr	r3, [r7, #32]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8009adc:	6a3b      	ldr	r3, [r7, #32]
 8009ade:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 8009ae0:	6a3b      	ldr	r3, [r7, #32]
 8009ae2:	68db      	ldr	r3, [r3, #12]
 8009ae4:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8009ae6:	693b      	ldr	r3, [r7, #16]
 8009ae8:	3301      	adds	r3, #1
 8009aea:	613b      	str	r3, [r7, #16]
 8009aec:	4b12      	ldr	r3, [pc, #72]	; (8009b38 <low_level_input+0x164>)
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d3ee      	bcc.n	8009ad4 <low_level_input+0x100>
    }

    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;
 8009af6:	4b10      	ldr	r3, [pc, #64]	; (8009b38 <low_level_input+0x164>)
 8009af8:	2200      	movs	r2, #0
 8009afa:	639a      	str	r2, [r3, #56]	; 0x38

  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)
 8009afc:	4b0e      	ldr	r3, [pc, #56]	; (8009b38 <low_level_input+0x164>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b04:	3314      	adds	r3, #20
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00d      	beq.n	8009b2c <low_level_input+0x158>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 8009b10:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <low_level_input+0x164>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b18:	3314      	adds	r3, #20
 8009b1a:	2280      	movs	r2, #128	; 0x80
 8009b1c:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 8009b1e:	4b06      	ldr	r3, [pc, #24]	; (8009b38 <low_level_input+0x164>)
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009b26:	3308      	adds	r3, #8
 8009b28:	2200      	movs	r2, #0
 8009b2a:	601a      	str	r2, [r3, #0]
  }
  return p;
 8009b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3730      	adds	r7, #48	; 0x30
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	200024a4 	.word	0x200024a4

08009b3c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b084      	sub	sp, #16
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;

  /* move received packet into a new pbuf */
  p = low_level_input(netif);
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f7ff ff45 	bl	80099d4 <low_level_input>
 8009b4a:	60f8      	str	r0, [r7, #12]

  /* no packet could be read, silently ignore this */
  if (p == NULL) return;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d010      	beq.n	8009b74 <ethernetif_input+0x38>

  /* entry point to the LwIP stack */
  err = netif->input(p, netif);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	691b      	ldr	r3, [r3, #16]
 8009b56:	6879      	ldr	r1, [r7, #4]
 8009b58:	68f8      	ldr	r0, [r7, #12]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	72fb      	strb	r3, [r7, #11]

  if (err != ERR_OK)
 8009b60:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d006      	beq.n	8009b76 <ethernetif_input+0x3a>
  {
    LWIP_DEBUGF(NETIF_DEBUG, ("ethernetif_input: IP input error\n"));
    pbuf_free(p);
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f001 fbd1 	bl	800b310 <pbuf_free>
    p = NULL;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	60fb      	str	r3, [r7, #12]
 8009b72:	e000      	b.n	8009b76 <ethernetif_input+0x3a>
  if (p == NULL) return;
 8009b74:	bf00      	nop
  }
}
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}

08009b7c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b082      	sub	sp, #8
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d106      	bne.n	8009b98 <ethernetif_init+0x1c>
 8009b8a:	4b0e      	ldr	r3, [pc, #56]	; (8009bc4 <ethernetif_init+0x48>)
 8009b8c:	f44f 7202 	mov.w	r2, #520	; 0x208
 8009b90:	490d      	ldr	r1, [pc, #52]	; (8009bc8 <ethernetif_init+0x4c>)
 8009b92:	480e      	ldr	r0, [pc, #56]	; (8009bcc <ethernetif_init+0x50>)
 8009b94:	f00a f936 	bl	8013e04 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2273      	movs	r2, #115	; 0x73
 8009b9c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2274      	movs	r2, #116	; 0x74
 8009ba4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a09      	ldr	r2, [pc, #36]	; (8009bd0 <ethernetif_init+0x54>)
 8009bac:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	4a08      	ldr	r2, [pc, #32]	; (8009bd4 <ethernetif_init+0x58>)
 8009bb2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f7ff fdc1 	bl	800973c <low_level_init>

  return ERR_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3708      	adds	r7, #8
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	bd80      	pop	{r7, pc}
 8009bc4:	08014e50 	.word	0x08014e50
 8009bc8:	08014e6c 	.word	0x08014e6c
 8009bcc:	08014e7c 	.word	0x08014e7c
 8009bd0:	0801208d 	.word	0x0801208d
 8009bd4:	08009899 	.word	0x08009899

08009bd8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8009bd8:	b580      	push	{r7, lr}
 8009bda:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8009bdc:	f7f8 f924 	bl	8001e28 <HAL_GetTick>
 8009be0:	4603      	mov	r3, r0
}
 8009be2:	4618      	mov	r0, r3
 8009be4:	bd80      	pop	{r7, pc}
	...

08009be8 <ethernetif_update_config>:
  *         to update low level driver configuration.
* @param  netif: The network interface
  * @retval None
  */
void ethernetif_update_config(struct netif *netif)
{
 8009be8:	b580      	push	{r7, lr}
 8009bea:	b084      	sub	sp, #16
 8009bec:	af00      	add	r7, sp, #0
 8009bee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tickstart = 0;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
  uint32_t regvalue = 0;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	60bb      	str	r3, [r7, #8]

  if(netif_is_link_up(netif))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8009bfe:	089b      	lsrs	r3, r3, #2
 8009c00:	f003 0301 	and.w	r3, r3, #1
 8009c04:	b2db      	uxtb	r3, r3
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d05d      	beq.n	8009cc6 <ethernetif_update_config+0xde>
  {
    /* Restart the auto-negotiation */
    if(heth.Init.AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8009c0a:	4b34      	ldr	r3, [pc, #208]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d03f      	beq.n	8009c92 <ethernetif_update_config+0xaa>
    {
      /* Enable Auto-Negotiation */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, PHY_AUTONEGOTIATION);
 8009c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009c16:	2100      	movs	r1, #0
 8009c18:	4830      	ldr	r0, [pc, #192]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c1a:	f7f9 fd7f 	bl	800371c <HAL_ETH_WritePHYRegister>

      /* Get tick */
      tickstart = HAL_GetTick();
 8009c1e:	f7f8 f903 	bl	8001e28 <HAL_GetTick>
 8009c22:	4603      	mov	r3, r0
 8009c24:	60fb      	str	r3, [r7, #12]

      /* Wait until the auto-negotiation will be completed */
      do
      {
        HAL_ETH_ReadPHYRegister(&heth, PHY_BSR, &regvalue);
 8009c26:	f107 0308 	add.w	r3, r7, #8
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	2101      	movs	r1, #1
 8009c2e:	482b      	ldr	r0, [pc, #172]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c30:	f7f9 fd0c 	bl	800364c <HAL_ETH_ReadPHYRegister>

        /* Check for the Timeout ( 1s ) */
        if((HAL_GetTick() - tickstart ) > 1000)
 8009c34:	f7f8 f8f8 	bl	8001e28 <HAL_GetTick>
 8009c38:	4602      	mov	r2, r0
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	1ad3      	subs	r3, r2, r3
 8009c3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009c42:	d828      	bhi.n	8009c96 <ethernetif_update_config+0xae>
        {
          /* In case of timeout */
          goto error;
        }
      } while (((regvalue & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	f003 0320 	and.w	r3, r3, #32
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d0eb      	beq.n	8009c26 <ethernetif_update_config+0x3e>

      /* Read the result of the auto-negotiation */
      HAL_ETH_ReadPHYRegister(&heth, PHY_SR, &regvalue);
 8009c4e:	f107 0308 	add.w	r3, r7, #8
 8009c52:	461a      	mov	r2, r3
 8009c54:	2110      	movs	r1, #16
 8009c56:	4821      	ldr	r0, [pc, #132]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c58:	f7f9 fcf8 	bl	800364c <HAL_ETH_ReadPHYRegister>

      /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
      if((regvalue & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d004      	beq.n	8009c70 <ethernetif_update_config+0x88>
      {
        /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_FULLDUPLEX;
 8009c66:	4b1d      	ldr	r3, [pc, #116]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c6c:	60da      	str	r2, [r3, #12]
 8009c6e:	e002      	b.n	8009c76 <ethernetif_update_config+0x8e>
      }
      else
      {
        /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
        heth.Init.DuplexMode = ETH_MODE_HALFDUPLEX;
 8009c70:	4b1a      	ldr	r3, [pc, #104]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c72:	2200      	movs	r2, #0
 8009c74:	60da      	str	r2, [r3, #12]
      }
      /* Configure the MAC with the speed fixed by the auto-negotiation process */
      if(regvalue & PHY_SPEED_STATUS)
 8009c76:	68bb      	ldr	r3, [r7, #8]
 8009c78:	f003 0302 	and.w	r3, r3, #2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <ethernetif_update_config+0xa0>
      {
        /* Set Ethernet speed to 10M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_10M;
 8009c80:	4b16      	ldr	r3, [pc, #88]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c82:	2200      	movs	r2, #0
 8009c84:	609a      	str	r2, [r3, #8]
 8009c86:	e016      	b.n	8009cb6 <ethernetif_update_config+0xce>
      }
      else
      {
        /* Set Ethernet speed to 100M following the auto-negotiation */
        heth.Init.Speed = ETH_SPEED_100M;
 8009c88:	4b14      	ldr	r3, [pc, #80]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009c8e:	609a      	str	r2, [r3, #8]
 8009c90:	e011      	b.n	8009cb6 <ethernetif_update_config+0xce>
      }
    }
    else /* AutoNegotiation Disable */
    {
    error :
 8009c92:	bf00      	nop
 8009c94:	e000      	b.n	8009c98 <ethernetif_update_config+0xb0>
          goto error;
 8009c96:	bf00      	nop
      /* Check parameters */
      assert_param(IS_ETH_SPEED(heth.Init.Speed));
      assert_param(IS_ETH_DUPLEX_MODE(heth.Init.DuplexMode));

      /* Set MAC Speed and Duplex Mode to PHY */
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009c98:	4b10      	ldr	r3, [pc, #64]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009c9a:	68db      	ldr	r3, [r3, #12]
 8009c9c:	08db      	lsrs	r3, r3, #3
 8009c9e:	b29a      	uxth	r2, r3
                                                     (uint16_t)(heth.Init.Speed >> 1)));
 8009ca0:	4b0e      	ldr	r3, [pc, #56]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	085b      	lsrs	r3, r3, #1
 8009ca6:	b29b      	uxth	r3, r3
      HAL_ETH_WritePHYRegister(&heth, PHY_BCR, ((uint16_t)(heth.Init.DuplexMode >> 3) |
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	b29b      	uxth	r3, r3
 8009cac:	461a      	mov	r2, r3
 8009cae:	2100      	movs	r1, #0
 8009cb0:	480a      	ldr	r0, [pc, #40]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009cb2:	f7f9 fd33 	bl	800371c <HAL_ETH_WritePHYRegister>
    }

    /* ETHERNET MAC Re-Configuration */
    HAL_ETH_ConfigMAC(&heth, (ETH_MACInitTypeDef *) NULL);
 8009cb6:	2100      	movs	r1, #0
 8009cb8:	4808      	ldr	r0, [pc, #32]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009cba:	f7f9 fdf3 	bl	80038a4 <HAL_ETH_ConfigMAC>

    /* Restart MAC interface */
    HAL_ETH_Start(&heth);
 8009cbe:	4807      	ldr	r0, [pc, #28]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009cc0:	f7f9 fd92 	bl	80037e8 <HAL_ETH_Start>
 8009cc4:	e002      	b.n	8009ccc <ethernetif_update_config+0xe4>
  }
  else
  {
    /* Stop MAC interface */
    HAL_ETH_Stop(&heth);
 8009cc6:	4805      	ldr	r0, [pc, #20]	; (8009cdc <ethernetif_update_config+0xf4>)
 8009cc8:	f7f9 fdbd 	bl	8003846 <HAL_ETH_Stop>
  }

  ethernetif_notify_conn_changed(netif);
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f000 f807 	bl	8009ce0 <ethernetif_notify_conn_changed>
}
 8009cd2:	bf00      	nop
 8009cd4:	3710      	adds	r7, #16
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200024a4 	.word	0x200024a4

08009ce0 <ethernetif_notify_conn_changed>:
  * @brief  This function notify user about link status changement.
  * @param  netif: the network interface
  * @retval None
  */
__weak void ethernetif_notify_conn_changed(struct netif *netif)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	b083      	sub	sp, #12
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
  /* NOTE : This is function could be implemented in user file
            when the callback is needed,
  */

}
 8009ce8:	bf00      	nop
 8009cea:	370c      	adds	r7, #12
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr

08009cf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	4613      	mov	r3, r2
 8009d00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8009d02:	2301      	movs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8009d06:	2300      	movs	r3, #0
 8009d08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8009d0a:	4b1f      	ldr	r3, [pc, #124]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d0c:	7a5b      	ldrb	r3, [r3, #9]
 8009d0e:	b2db      	uxtb	r3, r3
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d131      	bne.n	8009d78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8009d14:	4b1c      	ldr	r3, [pc, #112]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d16:	7a5b      	ldrb	r3, [r3, #9]
 8009d18:	b2db      	uxtb	r3, r3
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	4b1a      	ldr	r3, [pc, #104]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d1e:	2100      	movs	r1, #0
 8009d20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8009d22:	4b19      	ldr	r3, [pc, #100]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d24:	7a5b      	ldrb	r3, [r3, #9]
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	4a17      	ldr	r2, [pc, #92]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d2a:	009b      	lsls	r3, r3, #2
 8009d2c:	4413      	add	r3, r2
 8009d2e:	68fa      	ldr	r2, [r7, #12]
 8009d30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8009d32:	4b15      	ldr	r3, [pc, #84]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d34:	7a5b      	ldrb	r3, [r3, #9]
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	461a      	mov	r2, r3
 8009d3a:	4b13      	ldr	r3, [pc, #76]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d3c:	4413      	add	r3, r2
 8009d3e:	79fa      	ldrb	r2, [r7, #7]
 8009d40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8009d42:	4b11      	ldr	r3, [pc, #68]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d44:	7a5b      	ldrb	r3, [r3, #9]
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	1c5a      	adds	r2, r3, #1
 8009d4a:	b2d1      	uxtb	r1, r2
 8009d4c:	4a0e      	ldr	r2, [pc, #56]	; (8009d88 <FATFS_LinkDriverEx+0x94>)
 8009d4e:	7251      	strb	r1, [r2, #9]
 8009d50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8009d52:	7dbb      	ldrb	r3, [r7, #22]
 8009d54:	3330      	adds	r3, #48	; 0x30
 8009d56:	b2da      	uxtb	r2, r3
 8009d58:	68bb      	ldr	r3, [r7, #8]
 8009d5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8009d5c:	68bb      	ldr	r3, [r7, #8]
 8009d5e:	3301      	adds	r3, #1
 8009d60:	223a      	movs	r2, #58	; 0x3a
 8009d62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	3302      	adds	r3, #2
 8009d68:	222f      	movs	r2, #47	; 0x2f
 8009d6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8009d6c:	68bb      	ldr	r3, [r7, #8]
 8009d6e:	3303      	adds	r3, #3
 8009d70:	2200      	movs	r2, #0
 8009d72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8009d74:	2300      	movs	r3, #0
 8009d76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8009d78:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	371c      	adds	r7, #28
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d84:	4770      	bx	lr
 8009d86:	bf00      	nop
 8009d88:	200000a0 	.word	0x200000a0

08009d8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b082      	sub	sp, #8
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
 8009d94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8009d96:	2200      	movs	r2, #0
 8009d98:	6839      	ldr	r1, [r7, #0]
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f7ff ffaa 	bl	8009cf4 <FATFS_LinkDriverEx>
 8009da0:	4603      	mov	r3, r0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3708      	adds	r7, #8
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}

08009daa <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8009daa:	b480      	push	{r7}
 8009dac:	b083      	sub	sp, #12
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	4603      	mov	r3, r0
 8009db2:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8009db4:	88fb      	ldrh	r3, [r7, #6]
 8009db6:	021b      	lsls	r3, r3, #8
 8009db8:	b21a      	sxth	r2, r3
 8009dba:	88fb      	ldrh	r3, [r7, #6]
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	b29b      	uxth	r3, r3
 8009dc0:	b21b      	sxth	r3, r3
 8009dc2:	4313      	orrs	r3, r2
 8009dc4:	b21b      	sxth	r3, r3
 8009dc6:	b29b      	uxth	r3, r3
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	370c      	adds	r7, #12
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b083      	sub	sp, #12
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	061a      	lsls	r2, r3, #24
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	021b      	lsls	r3, r3, #8
 8009de4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009de8:	431a      	orrs	r2, r3
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	0a1b      	lsrs	r3, r3, #8
 8009dee:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	0e1b      	lsrs	r3, r3, #24
 8009df8:	4313      	orrs	r3, r2
}
 8009dfa:	4618      	mov	r0, r3
 8009dfc:	370c      	adds	r7, #12
 8009dfe:	46bd      	mov	sp, r7
 8009e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e04:	4770      	bx	lr

08009e06 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8009e06:	b580      	push	{r7, lr}
 8009e08:	b082      	sub	sp, #8
 8009e0a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009e0c:	2300      	movs	r3, #0
 8009e0e:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 8009e10:	f000 f8d4 	bl	8009fbc <mem_init>
  memp_init();
 8009e14:	f000 fbda 	bl	800a5cc <memp_init>
  pbuf_init();
  netif_init();
 8009e18:	f000 fc92 	bl	800a740 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009e1c:	f006 ffb8 	bl	8010d90 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009e20:	f001 fd14 	bl	800b84c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8009e24:	f006 ff2a 	bl	8010c7c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009e28:	bf00      	nop
 8009e2a:	3708      	adds	r7, #8
 8009e2c:	46bd      	mov	sp, r7
 8009e2e:	bd80      	pop	{r7, pc}

08009e30 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	4603      	mov	r3, r0
 8009e38:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8009e3a:	4b05      	ldr	r3, [pc, #20]	; (8009e50 <ptr_to_mem+0x20>)
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	88fb      	ldrh	r3, [r7, #6]
 8009e40:	4413      	add	r3, r2
}
 8009e42:	4618      	mov	r0, r3
 8009e44:	370c      	adds	r7, #12
 8009e46:	46bd      	mov	sp, r7
 8009e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	200000ac 	.word	0x200000ac

08009e54 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8009e5c:	4b05      	ldr	r3, [pc, #20]	; (8009e74 <mem_to_ptr+0x20>)
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	1ad3      	subs	r3, r2, r3
 8009e64:	b29b      	uxth	r3, r3
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	200000ac 	.word	0x200000ac

08009e78 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8009e78:	b590      	push	{r4, r7, lr}
 8009e7a:	b085      	sub	sp, #20
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8009e80:	4b45      	ldr	r3, [pc, #276]	; (8009f98 <plug_holes+0x120>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	687a      	ldr	r2, [r7, #4]
 8009e86:	429a      	cmp	r2, r3
 8009e88:	d206      	bcs.n	8009e98 <plug_holes+0x20>
 8009e8a:	4b44      	ldr	r3, [pc, #272]	; (8009f9c <plug_holes+0x124>)
 8009e8c:	f240 12df 	movw	r2, #479	; 0x1df
 8009e90:	4943      	ldr	r1, [pc, #268]	; (8009fa0 <plug_holes+0x128>)
 8009e92:	4844      	ldr	r0, [pc, #272]	; (8009fa4 <plug_holes+0x12c>)
 8009e94:	f009 ffb6 	bl	8013e04 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8009e98:	4b43      	ldr	r3, [pc, #268]	; (8009fa8 <plug_holes+0x130>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	687a      	ldr	r2, [r7, #4]
 8009e9e:	429a      	cmp	r2, r3
 8009ea0:	d306      	bcc.n	8009eb0 <plug_holes+0x38>
 8009ea2:	4b3e      	ldr	r3, [pc, #248]	; (8009f9c <plug_holes+0x124>)
 8009ea4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8009ea8:	4940      	ldr	r1, [pc, #256]	; (8009fac <plug_holes+0x134>)
 8009eaa:	483e      	ldr	r0, [pc, #248]	; (8009fa4 <plug_holes+0x12c>)
 8009eac:	f009 ffaa 	bl	8013e04 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	791b      	ldrb	r3, [r3, #4]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d006      	beq.n	8009ec6 <plug_holes+0x4e>
 8009eb8:	4b38      	ldr	r3, [pc, #224]	; (8009f9c <plug_holes+0x124>)
 8009eba:	f240 12e1 	movw	r2, #481	; 0x1e1
 8009ebe:	493c      	ldr	r1, [pc, #240]	; (8009fb0 <plug_holes+0x138>)
 8009ec0:	4838      	ldr	r0, [pc, #224]	; (8009fa4 <plug_holes+0x12c>)
 8009ec2:	f009 ff9f 	bl	8013e04 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	881b      	ldrh	r3, [r3, #0]
 8009eca:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009ece:	d906      	bls.n	8009ede <plug_holes+0x66>
 8009ed0:	4b32      	ldr	r3, [pc, #200]	; (8009f9c <plug_holes+0x124>)
 8009ed2:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8009ed6:	4937      	ldr	r1, [pc, #220]	; (8009fb4 <plug_holes+0x13c>)
 8009ed8:	4832      	ldr	r0, [pc, #200]	; (8009fa4 <plug_holes+0x12c>)
 8009eda:	f009 ff93 	bl	8013e04 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	881b      	ldrh	r3, [r3, #0]
 8009ee2:	4618      	mov	r0, r3
 8009ee4:	f7ff ffa4 	bl	8009e30 <ptr_to_mem>
 8009ee8:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	429a      	cmp	r2, r3
 8009ef0:	d024      	beq.n	8009f3c <plug_holes+0xc4>
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	791b      	ldrb	r3, [r3, #4]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d120      	bne.n	8009f3c <plug_holes+0xc4>
 8009efa:	4b2b      	ldr	r3, [pc, #172]	; (8009fa8 <plug_holes+0x130>)
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68fa      	ldr	r2, [r7, #12]
 8009f00:	429a      	cmp	r2, r3
 8009f02:	d01b      	beq.n	8009f3c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8009f04:	4b2c      	ldr	r3, [pc, #176]	; (8009fb8 <plug_holes+0x140>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	68fa      	ldr	r2, [r7, #12]
 8009f0a:	429a      	cmp	r2, r3
 8009f0c:	d102      	bne.n	8009f14 <plug_holes+0x9c>
      lfree = mem;
 8009f0e:	4a2a      	ldr	r2, [pc, #168]	; (8009fb8 <plug_holes+0x140>)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	881a      	ldrh	r2, [r3, #0]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	881b      	ldrh	r3, [r3, #0]
 8009f20:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f24:	d00a      	beq.n	8009f3c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	881b      	ldrh	r3, [r3, #0]
 8009f2a:	4618      	mov	r0, r3
 8009f2c:	f7ff ff80 	bl	8009e30 <ptr_to_mem>
 8009f30:	4604      	mov	r4, r0
 8009f32:	6878      	ldr	r0, [r7, #4]
 8009f34:	f7ff ff8e 	bl	8009e54 <mem_to_ptr>
 8009f38:	4603      	mov	r3, r0
 8009f3a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	885b      	ldrh	r3, [r3, #2]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f7ff ff75 	bl	8009e30 <ptr_to_mem>
 8009f46:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8009f48:	68ba      	ldr	r2, [r7, #8]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	429a      	cmp	r2, r3
 8009f4e:	d01f      	beq.n	8009f90 <plug_holes+0x118>
 8009f50:	68bb      	ldr	r3, [r7, #8]
 8009f52:	791b      	ldrb	r3, [r3, #4]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d11b      	bne.n	8009f90 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8009f58:	4b17      	ldr	r3, [pc, #92]	; (8009fb8 <plug_holes+0x140>)
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d102      	bne.n	8009f68 <plug_holes+0xf0>
      lfree = pmem;
 8009f62:	4a15      	ldr	r2, [pc, #84]	; (8009fb8 <plug_holes+0x140>)
 8009f64:	68bb      	ldr	r3, [r7, #8]
 8009f66:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	881a      	ldrh	r2, [r3, #0]
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	881b      	ldrh	r3, [r3, #0]
 8009f74:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8009f78:	d00a      	beq.n	8009f90 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	881b      	ldrh	r3, [r3, #0]
 8009f7e:	4618      	mov	r0, r3
 8009f80:	f7ff ff56 	bl	8009e30 <ptr_to_mem>
 8009f84:	4604      	mov	r4, r0
 8009f86:	68b8      	ldr	r0, [r7, #8]
 8009f88:	f7ff ff64 	bl	8009e54 <mem_to_ptr>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8009f90:	bf00      	nop
 8009f92:	3714      	adds	r7, #20
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd90      	pop	{r4, r7, pc}
 8009f98:	200000ac 	.word	0x200000ac
 8009f9c:	08014ea4 	.word	0x08014ea4
 8009fa0:	08014ed4 	.word	0x08014ed4
 8009fa4:	08014eec 	.word	0x08014eec
 8009fa8:	200000b0 	.word	0x200000b0
 8009fac:	08014f14 	.word	0x08014f14
 8009fb0:	08014f30 	.word	0x08014f30
 8009fb4:	08014f4c 	.word	0x08014f4c
 8009fb8:	200000b4 	.word	0x200000b4

08009fbc <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b082      	sub	sp, #8
 8009fc0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8009fc2:	4b18      	ldr	r3, [pc, #96]	; (800a024 <mem_init+0x68>)
 8009fc4:	3303      	adds	r3, #3
 8009fc6:	f023 0303 	bic.w	r3, r3, #3
 8009fca:	461a      	mov	r2, r3
 8009fcc:	4b16      	ldr	r3, [pc, #88]	; (800a028 <mem_init+0x6c>)
 8009fce:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8009fd0:	4b15      	ldr	r3, [pc, #84]	; (800a028 <mem_init+0x6c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8009fdc:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8009fea:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8009fee:	f7ff ff1f 	bl	8009e30 <ptr_to_mem>
 8009ff2:	4603      	mov	r3, r0
 8009ff4:	4a0d      	ldr	r2, [pc, #52]	; (800a02c <mem_init+0x70>)
 8009ff6:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <mem_init+0x70>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a000:	4b0a      	ldr	r3, [pc, #40]	; (800a02c <mem_init+0x70>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a008:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <mem_init+0x70>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800a012:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a014:	4b04      	ldr	r3, [pc, #16]	; (800a028 <mem_init+0x6c>)
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	4a05      	ldr	r2, [pc, #20]	; (800a030 <mem_init+0x74>)
 800a01a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800a01c:	bf00      	nop
 800a01e:	3708      	adds	r7, #8
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}
 800a024:	20003cd4 	.word	0x20003cd4
 800a028:	200000ac 	.word	0x200000ac
 800a02c:	200000b0 	.word	0x200000b0
 800a030:	200000b4 	.word	0x200000b4

0800a034 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a034:	b580      	push	{r7, lr}
 800a036:	b086      	sub	sp, #24
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f7ff ff09 	bl	8009e54 <mem_to_ptr>
 800a042:	4603      	mov	r3, r0
 800a044:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	881b      	ldrh	r3, [r3, #0]
 800a04a:	4618      	mov	r0, r3
 800a04c:	f7ff fef0 	bl	8009e30 <ptr_to_mem>
 800a050:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	885b      	ldrh	r3, [r3, #2]
 800a056:	4618      	mov	r0, r3
 800a058:	f7ff feea 	bl	8009e30 <ptr_to_mem>
 800a05c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	881b      	ldrh	r3, [r3, #0]
 800a062:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a066:	d818      	bhi.n	800a09a <mem_link_valid+0x66>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	885b      	ldrh	r3, [r3, #2]
 800a06c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a070:	d813      	bhi.n	800a09a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a076:	8afa      	ldrh	r2, [r7, #22]
 800a078:	429a      	cmp	r2, r3
 800a07a:	d004      	beq.n	800a086 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	881b      	ldrh	r3, [r3, #0]
 800a080:	8afa      	ldrh	r2, [r7, #22]
 800a082:	429a      	cmp	r2, r3
 800a084:	d109      	bne.n	800a09a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a086:	4b08      	ldr	r3, [pc, #32]	; (800a0a8 <mem_link_valid+0x74>)
 800a088:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	429a      	cmp	r2, r3
 800a08e:	d006      	beq.n	800a09e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a090:	693b      	ldr	r3, [r7, #16]
 800a092:	885b      	ldrh	r3, [r3, #2]
 800a094:	8afa      	ldrh	r2, [r7, #22]
 800a096:	429a      	cmp	r2, r3
 800a098:	d001      	beq.n	800a09e <mem_link_valid+0x6a>
    return 0;
 800a09a:	2300      	movs	r3, #0
 800a09c:	e000      	b.n	800a0a0 <mem_link_valid+0x6c>
  }
  return 1;
 800a09e:	2301      	movs	r3, #1
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3718      	adds	r7, #24
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}
 800a0a8:	200000b0 	.word	0x200000b0

0800a0ac <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d04c      	beq.n	800a154 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	f003 0303 	and.w	r3, r3, #3
 800a0c0:	2b00      	cmp	r3, #0
 800a0c2:	d007      	beq.n	800a0d4 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a0c4:	4b25      	ldr	r3, [pc, #148]	; (800a15c <mem_free+0xb0>)
 800a0c6:	f240 2273 	movw	r2, #627	; 0x273
 800a0ca:	4925      	ldr	r1, [pc, #148]	; (800a160 <mem_free+0xb4>)
 800a0cc:	4825      	ldr	r0, [pc, #148]	; (800a164 <mem_free+0xb8>)
 800a0ce:	f009 fe99 	bl	8013e04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a0d2:	e040      	b.n	800a156 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3b08      	subs	r3, #8
 800a0d8:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a0da:	4b23      	ldr	r3, [pc, #140]	; (800a168 <mem_free+0xbc>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	68fa      	ldr	r2, [r7, #12]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d306      	bcc.n	800a0f2 <mem_free+0x46>
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f103 020c 	add.w	r2, r3, #12
 800a0ea:	4b20      	ldr	r3, [pc, #128]	; (800a16c <mem_free+0xc0>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d907      	bls.n	800a102 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a0f2:	4b1a      	ldr	r3, [pc, #104]	; (800a15c <mem_free+0xb0>)
 800a0f4:	f240 227f 	movw	r2, #639	; 0x27f
 800a0f8:	491d      	ldr	r1, [pc, #116]	; (800a170 <mem_free+0xc4>)
 800a0fa:	481a      	ldr	r0, [pc, #104]	; (800a164 <mem_free+0xb8>)
 800a0fc:	f009 fe82 	bl	8013e04 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a100:	e029      	b.n	800a156 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	791b      	ldrb	r3, [r3, #4]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d107      	bne.n	800a11a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <mem_free+0xb0>)
 800a10c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a110:	4918      	ldr	r1, [pc, #96]	; (800a174 <mem_free+0xc8>)
 800a112:	4814      	ldr	r0, [pc, #80]	; (800a164 <mem_free+0xb8>)
 800a114:	f009 fe76 	bl	8013e04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a118:	e01d      	b.n	800a156 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f7ff ff8a 	bl	800a034 <mem_link_valid>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d107      	bne.n	800a136 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a126:	4b0d      	ldr	r3, [pc, #52]	; (800a15c <mem_free+0xb0>)
 800a128:	f240 2295 	movw	r2, #661	; 0x295
 800a12c:	4912      	ldr	r1, [pc, #72]	; (800a178 <mem_free+0xcc>)
 800a12e:	480d      	ldr	r0, [pc, #52]	; (800a164 <mem_free+0xb8>)
 800a130:	f009 fe68 	bl	8013e04 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800a134:	e00f      	b.n	800a156 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a13c:	4b0f      	ldr	r3, [pc, #60]	; (800a17c <mem_free+0xd0>)
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68fa      	ldr	r2, [r7, #12]
 800a142:	429a      	cmp	r2, r3
 800a144:	d202      	bcs.n	800a14c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a146:	4a0d      	ldr	r2, [pc, #52]	; (800a17c <mem_free+0xd0>)
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a14c:	68f8      	ldr	r0, [r7, #12]
 800a14e:	f7ff fe93 	bl	8009e78 <plug_holes>
 800a152:	e000      	b.n	800a156 <mem_free+0xaa>
    return;
 800a154:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800a156:	3710      	adds	r7, #16
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	08014ea4 	.word	0x08014ea4
 800a160:	08014f78 	.word	0x08014f78
 800a164:	08014eec 	.word	0x08014eec
 800a168:	200000ac 	.word	0x200000ac
 800a16c:	200000b0 	.word	0x200000b0
 800a170:	08014f9c 	.word	0x08014f9c
 800a174:	08014fb8 	.word	0x08014fb8
 800a178:	08014fe0 	.word	0x08014fe0
 800a17c:	200000b4 	.word	0x200000b4

0800a180 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
 800a188:	460b      	mov	r3, r1
 800a18a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a18c:	887b      	ldrh	r3, [r7, #2]
 800a18e:	3303      	adds	r3, #3
 800a190:	b29b      	uxth	r3, r3
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a198:	8bfb      	ldrh	r3, [r7, #30]
 800a19a:	2b0b      	cmp	r3, #11
 800a19c:	d801      	bhi.n	800a1a2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a19e:	230c      	movs	r3, #12
 800a1a0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a1a2:	8bfb      	ldrh	r3, [r7, #30]
 800a1a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a1a8:	d803      	bhi.n	800a1b2 <mem_trim+0x32>
 800a1aa:	8bfa      	ldrh	r2, [r7, #30]
 800a1ac:	887b      	ldrh	r3, [r7, #2]
 800a1ae:	429a      	cmp	r2, r3
 800a1b0:	d201      	bcs.n	800a1b6 <mem_trim+0x36>
    return NULL;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	e0cc      	b.n	800a350 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a1b6:	4b68      	ldr	r3, [pc, #416]	; (800a358 <mem_trim+0x1d8>)
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	687a      	ldr	r2, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d304      	bcc.n	800a1ca <mem_trim+0x4a>
 800a1c0:	4b66      	ldr	r3, [pc, #408]	; (800a35c <mem_trim+0x1dc>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	687a      	ldr	r2, [r7, #4]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d306      	bcc.n	800a1d8 <mem_trim+0x58>
 800a1ca:	4b65      	ldr	r3, [pc, #404]	; (800a360 <mem_trim+0x1e0>)
 800a1cc:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a1d0:	4964      	ldr	r1, [pc, #400]	; (800a364 <mem_trim+0x1e4>)
 800a1d2:	4865      	ldr	r0, [pc, #404]	; (800a368 <mem_trim+0x1e8>)
 800a1d4:	f009 fe16 	bl	8013e04 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a1d8:	4b5f      	ldr	r3, [pc, #380]	; (800a358 <mem_trim+0x1d8>)
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	429a      	cmp	r2, r3
 800a1e0:	d304      	bcc.n	800a1ec <mem_trim+0x6c>
 800a1e2:	4b5e      	ldr	r3, [pc, #376]	; (800a35c <mem_trim+0x1dc>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	687a      	ldr	r2, [r7, #4]
 800a1e8:	429a      	cmp	r2, r3
 800a1ea:	d301      	bcc.n	800a1f0 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	e0af      	b.n	800a350 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	3b08      	subs	r3, #8
 800a1f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a1f6:	69b8      	ldr	r0, [r7, #24]
 800a1f8:	f7ff fe2c 	bl	8009e54 <mem_to_ptr>
 800a1fc:	4603      	mov	r3, r0
 800a1fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	881a      	ldrh	r2, [r3, #0]
 800a204:	8afb      	ldrh	r3, [r7, #22]
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	b29b      	uxth	r3, r3
 800a20a:	3b08      	subs	r3, #8
 800a20c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a20e:	8bfa      	ldrh	r2, [r7, #30]
 800a210:	8abb      	ldrh	r3, [r7, #20]
 800a212:	429a      	cmp	r2, r3
 800a214:	d906      	bls.n	800a224 <mem_trim+0xa4>
 800a216:	4b52      	ldr	r3, [pc, #328]	; (800a360 <mem_trim+0x1e0>)
 800a218:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a21c:	4953      	ldr	r1, [pc, #332]	; (800a36c <mem_trim+0x1ec>)
 800a21e:	4852      	ldr	r0, [pc, #328]	; (800a368 <mem_trim+0x1e8>)
 800a220:	f009 fdf0 	bl	8013e04 <iprintf>
  if (newsize > size) {
 800a224:	8bfa      	ldrh	r2, [r7, #30]
 800a226:	8abb      	ldrh	r3, [r7, #20]
 800a228:	429a      	cmp	r2, r3
 800a22a:	d901      	bls.n	800a230 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800a22c:	2300      	movs	r3, #0
 800a22e:	e08f      	b.n	800a350 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800a230:	8bfa      	ldrh	r2, [r7, #30]
 800a232:	8abb      	ldrh	r3, [r7, #20]
 800a234:	429a      	cmp	r2, r3
 800a236:	d101      	bne.n	800a23c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	e089      	b.n	800a350 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800a23c:	69bb      	ldr	r3, [r7, #24]
 800a23e:	881b      	ldrh	r3, [r3, #0]
 800a240:	4618      	mov	r0, r3
 800a242:	f7ff fdf5 	bl	8009e30 <ptr_to_mem>
 800a246:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	791b      	ldrb	r3, [r3, #4]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d13f      	bne.n	800a2d0 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a250:	69bb      	ldr	r3, [r7, #24]
 800a252:	881b      	ldrh	r3, [r3, #0]
 800a254:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a258:	d106      	bne.n	800a268 <mem_trim+0xe8>
 800a25a:	4b41      	ldr	r3, [pc, #260]	; (800a360 <mem_trim+0x1e0>)
 800a25c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a260:	4943      	ldr	r1, [pc, #268]	; (800a370 <mem_trim+0x1f0>)
 800a262:	4841      	ldr	r0, [pc, #260]	; (800a368 <mem_trim+0x1e8>)
 800a264:	f009 fdce 	bl	8013e04 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	881b      	ldrh	r3, [r3, #0]
 800a26c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a26e:	8afa      	ldrh	r2, [r7, #22]
 800a270:	8bfb      	ldrh	r3, [r7, #30]
 800a272:	4413      	add	r3, r2
 800a274:	b29b      	uxth	r3, r3
 800a276:	3308      	adds	r3, #8
 800a278:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a27a:	4b3e      	ldr	r3, [pc, #248]	; (800a374 <mem_trim+0x1f4>)
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	693a      	ldr	r2, [r7, #16]
 800a280:	429a      	cmp	r2, r3
 800a282:	d106      	bne.n	800a292 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800a284:	89fb      	ldrh	r3, [r7, #14]
 800a286:	4618      	mov	r0, r3
 800a288:	f7ff fdd2 	bl	8009e30 <ptr_to_mem>
 800a28c:	4603      	mov	r3, r0
 800a28e:	4a39      	ldr	r2, [pc, #228]	; (800a374 <mem_trim+0x1f4>)
 800a290:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a292:	89fb      	ldrh	r3, [r7, #14]
 800a294:	4618      	mov	r0, r3
 800a296:	f7ff fdcb 	bl	8009e30 <ptr_to_mem>
 800a29a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a29c:	693b      	ldr	r3, [r7, #16]
 800a29e:	2200      	movs	r2, #0
 800a2a0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	89ba      	ldrh	r2, [r7, #12]
 800a2a6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	8afa      	ldrh	r2, [r7, #22]
 800a2ac:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a2ae:	69bb      	ldr	r3, [r7, #24]
 800a2b0:	89fa      	ldrh	r2, [r7, #14]
 800a2b2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	881b      	ldrh	r3, [r3, #0]
 800a2b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2bc:	d047      	beq.n	800a34e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a2be:	693b      	ldr	r3, [r7, #16]
 800a2c0:	881b      	ldrh	r3, [r3, #0]
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	f7ff fdb4 	bl	8009e30 <ptr_to_mem>
 800a2c8:	4602      	mov	r2, r0
 800a2ca:	89fb      	ldrh	r3, [r7, #14]
 800a2cc:	8053      	strh	r3, [r2, #2]
 800a2ce:	e03e      	b.n	800a34e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a2d0:	8bfb      	ldrh	r3, [r7, #30]
 800a2d2:	f103 0214 	add.w	r2, r3, #20
 800a2d6:	8abb      	ldrh	r3, [r7, #20]
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d838      	bhi.n	800a34e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a2dc:	8afa      	ldrh	r2, [r7, #22]
 800a2de:	8bfb      	ldrh	r3, [r7, #30]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	3308      	adds	r3, #8
 800a2e6:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a2e8:	69bb      	ldr	r3, [r7, #24]
 800a2ea:	881b      	ldrh	r3, [r3, #0]
 800a2ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a2f0:	d106      	bne.n	800a300 <mem_trim+0x180>
 800a2f2:	4b1b      	ldr	r3, [pc, #108]	; (800a360 <mem_trim+0x1e0>)
 800a2f4:	f240 3216 	movw	r2, #790	; 0x316
 800a2f8:	491d      	ldr	r1, [pc, #116]	; (800a370 <mem_trim+0x1f0>)
 800a2fa:	481b      	ldr	r0, [pc, #108]	; (800a368 <mem_trim+0x1e8>)
 800a2fc:	f009 fd82 	bl	8013e04 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a300:	89fb      	ldrh	r3, [r7, #14]
 800a302:	4618      	mov	r0, r3
 800a304:	f7ff fd94 	bl	8009e30 <ptr_to_mem>
 800a308:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a30a:	4b1a      	ldr	r3, [pc, #104]	; (800a374 <mem_trim+0x1f4>)
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	693a      	ldr	r2, [r7, #16]
 800a310:	429a      	cmp	r2, r3
 800a312:	d202      	bcs.n	800a31a <mem_trim+0x19a>
      lfree = mem2;
 800a314:	4a17      	ldr	r2, [pc, #92]	; (800a374 <mem_trim+0x1f4>)
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a31a:	693b      	ldr	r3, [r7, #16]
 800a31c:	2200      	movs	r2, #0
 800a31e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a320:	69bb      	ldr	r3, [r7, #24]
 800a322:	881a      	ldrh	r2, [r3, #0]
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	8afa      	ldrh	r2, [r7, #22]
 800a32c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a32e:	69bb      	ldr	r3, [r7, #24]
 800a330:	89fa      	ldrh	r2, [r7, #14]
 800a332:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a334:	693b      	ldr	r3, [r7, #16]
 800a336:	881b      	ldrh	r3, [r3, #0]
 800a338:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a33c:	d007      	beq.n	800a34e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	881b      	ldrh	r3, [r3, #0]
 800a342:	4618      	mov	r0, r3
 800a344:	f7ff fd74 	bl	8009e30 <ptr_to_mem>
 800a348:	4602      	mov	r2, r0
 800a34a:	89fb      	ldrh	r3, [r7, #14]
 800a34c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800a34e:	687b      	ldr	r3, [r7, #4]
}
 800a350:	4618      	mov	r0, r3
 800a352:	3720      	adds	r7, #32
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}
 800a358:	200000ac 	.word	0x200000ac
 800a35c:	200000b0 	.word	0x200000b0
 800a360:	08014ea4 	.word	0x08014ea4
 800a364:	08015014 	.word	0x08015014
 800a368:	08014eec 	.word	0x08014eec
 800a36c:	0801502c 	.word	0x0801502c
 800a370:	0801504c 	.word	0x0801504c
 800a374:	200000b4 	.word	0x200000b4

0800a378 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	b088      	sub	sp, #32
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	4603      	mov	r3, r0
 800a380:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a382:	88fb      	ldrh	r3, [r7, #6]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d101      	bne.n	800a38c <mem_malloc+0x14>
    return NULL;
 800a388:	2300      	movs	r3, #0
 800a38a:	e0d9      	b.n	800a540 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a38c:	88fb      	ldrh	r3, [r7, #6]
 800a38e:	3303      	adds	r3, #3
 800a390:	b29b      	uxth	r3, r3
 800a392:	f023 0303 	bic.w	r3, r3, #3
 800a396:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a398:	8bbb      	ldrh	r3, [r7, #28]
 800a39a:	2b0b      	cmp	r3, #11
 800a39c:	d801      	bhi.n	800a3a2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a39e:	230c      	movs	r3, #12
 800a3a0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a3a2:	8bbb      	ldrh	r3, [r7, #28]
 800a3a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a3a8:	d803      	bhi.n	800a3b2 <mem_malloc+0x3a>
 800a3aa:	8bba      	ldrh	r2, [r7, #28]
 800a3ac:	88fb      	ldrh	r3, [r7, #6]
 800a3ae:	429a      	cmp	r2, r3
 800a3b0:	d201      	bcs.n	800a3b6 <mem_malloc+0x3e>
    return NULL;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	e0c4      	b.n	800a540 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a3b6:	4b64      	ldr	r3, [pc, #400]	; (800a548 <mem_malloc+0x1d0>)
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4618      	mov	r0, r3
 800a3bc:	f7ff fd4a 	bl	8009e54 <mem_to_ptr>
 800a3c0:	4603      	mov	r3, r0
 800a3c2:	83fb      	strh	r3, [r7, #30]
 800a3c4:	e0b4      	b.n	800a530 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a3c6:	8bfb      	ldrh	r3, [r7, #30]
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f7ff fd31 	bl	8009e30 <ptr_to_mem>
 800a3ce:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	791b      	ldrb	r3, [r3, #4]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f040 80a4 	bne.w	800a522 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	881b      	ldrh	r3, [r3, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	8bfb      	ldrh	r3, [r7, #30]
 800a3e2:	1ad3      	subs	r3, r2, r3
 800a3e4:	f1a3 0208 	sub.w	r2, r3, #8
 800a3e8:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800a3ea:	429a      	cmp	r2, r3
 800a3ec:	f0c0 8099 	bcc.w	800a522 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	881b      	ldrh	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	8bfb      	ldrh	r3, [r7, #30]
 800a3f8:	1ad3      	subs	r3, r2, r3
 800a3fa:	f1a3 0208 	sub.w	r2, r3, #8
 800a3fe:	8bbb      	ldrh	r3, [r7, #28]
 800a400:	3314      	adds	r3, #20
 800a402:	429a      	cmp	r2, r3
 800a404:	d333      	bcc.n	800a46e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800a406:	8bfa      	ldrh	r2, [r7, #30]
 800a408:	8bbb      	ldrh	r3, [r7, #28]
 800a40a:	4413      	add	r3, r2
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	3308      	adds	r3, #8
 800a410:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800a412:	8a7b      	ldrh	r3, [r7, #18]
 800a414:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a418:	d106      	bne.n	800a428 <mem_malloc+0xb0>
 800a41a:	4b4c      	ldr	r3, [pc, #304]	; (800a54c <mem_malloc+0x1d4>)
 800a41c:	f240 3287 	movw	r2, #903	; 0x387
 800a420:	494b      	ldr	r1, [pc, #300]	; (800a550 <mem_malloc+0x1d8>)
 800a422:	484c      	ldr	r0, [pc, #304]	; (800a554 <mem_malloc+0x1dc>)
 800a424:	f009 fcee 	bl	8013e04 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800a428:	8a7b      	ldrh	r3, [r7, #18]
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7ff fd00 	bl	8009e30 <ptr_to_mem>
 800a430:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	2200      	movs	r2, #0
 800a436:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	881a      	ldrh	r2, [r3, #0]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8bfa      	ldrh	r2, [r7, #30]
 800a444:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800a446:	697b      	ldr	r3, [r7, #20]
 800a448:	8a7a      	ldrh	r2, [r7, #18]
 800a44a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800a44c:	697b      	ldr	r3, [r7, #20]
 800a44e:	2201      	movs	r2, #1
 800a450:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	881b      	ldrh	r3, [r3, #0]
 800a456:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800a45a:	d00b      	beq.n	800a474 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	881b      	ldrh	r3, [r3, #0]
 800a460:	4618      	mov	r0, r3
 800a462:	f7ff fce5 	bl	8009e30 <ptr_to_mem>
 800a466:	4602      	mov	r2, r0
 800a468:	8a7b      	ldrh	r3, [r7, #18]
 800a46a:	8053      	strh	r3, [r2, #2]
 800a46c:	e002      	b.n	800a474 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	2201      	movs	r2, #1
 800a472:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800a474:	4b34      	ldr	r3, [pc, #208]	; (800a548 <mem_malloc+0x1d0>)
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	697a      	ldr	r2, [r7, #20]
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d127      	bne.n	800a4ce <mem_malloc+0x156>
          struct mem *cur = lfree;
 800a47e:	4b32      	ldr	r3, [pc, #200]	; (800a548 <mem_malloc+0x1d0>)
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800a484:	e005      	b.n	800a492 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800a486:	69bb      	ldr	r3, [r7, #24]
 800a488:	881b      	ldrh	r3, [r3, #0]
 800a48a:	4618      	mov	r0, r3
 800a48c:	f7ff fcd0 	bl	8009e30 <ptr_to_mem>
 800a490:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800a492:	69bb      	ldr	r3, [r7, #24]
 800a494:	791b      	ldrb	r3, [r3, #4]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d004      	beq.n	800a4a4 <mem_malloc+0x12c>
 800a49a:	4b2f      	ldr	r3, [pc, #188]	; (800a558 <mem_malloc+0x1e0>)
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	69ba      	ldr	r2, [r7, #24]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d1f0      	bne.n	800a486 <mem_malloc+0x10e>
          }
          lfree = cur;
 800a4a4:	4a28      	ldr	r2, [pc, #160]	; (800a548 <mem_malloc+0x1d0>)
 800a4a6:	69bb      	ldr	r3, [r7, #24]
 800a4a8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800a4aa:	4b27      	ldr	r3, [pc, #156]	; (800a548 <mem_malloc+0x1d0>)
 800a4ac:	681a      	ldr	r2, [r3, #0]
 800a4ae:	4b2a      	ldr	r3, [pc, #168]	; (800a558 <mem_malloc+0x1e0>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	429a      	cmp	r2, r3
 800a4b4:	d00b      	beq.n	800a4ce <mem_malloc+0x156>
 800a4b6:	4b24      	ldr	r3, [pc, #144]	; (800a548 <mem_malloc+0x1d0>)
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	791b      	ldrb	r3, [r3, #4]
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d006      	beq.n	800a4ce <mem_malloc+0x156>
 800a4c0:	4b22      	ldr	r3, [pc, #136]	; (800a54c <mem_malloc+0x1d4>)
 800a4c2:	f240 32b5 	movw	r2, #949	; 0x3b5
 800a4c6:	4925      	ldr	r1, [pc, #148]	; (800a55c <mem_malloc+0x1e4>)
 800a4c8:	4822      	ldr	r0, [pc, #136]	; (800a554 <mem_malloc+0x1dc>)
 800a4ca:	f009 fc9b 	bl	8013e04 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800a4ce:	8bba      	ldrh	r2, [r7, #28]
 800a4d0:	697b      	ldr	r3, [r7, #20]
 800a4d2:	4413      	add	r3, r2
 800a4d4:	3308      	adds	r3, #8
 800a4d6:	4a20      	ldr	r2, [pc, #128]	; (800a558 <mem_malloc+0x1e0>)
 800a4d8:	6812      	ldr	r2, [r2, #0]
 800a4da:	4293      	cmp	r3, r2
 800a4dc:	d906      	bls.n	800a4ec <mem_malloc+0x174>
 800a4de:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <mem_malloc+0x1d4>)
 800a4e0:	f240 32b9 	movw	r2, #953	; 0x3b9
 800a4e4:	491e      	ldr	r1, [pc, #120]	; (800a560 <mem_malloc+0x1e8>)
 800a4e6:	481b      	ldr	r0, [pc, #108]	; (800a554 <mem_malloc+0x1dc>)
 800a4e8:	f009 fc8c 	bl	8013e04 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800a4ec:	697b      	ldr	r3, [r7, #20]
 800a4ee:	f003 0303 	and.w	r3, r3, #3
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d006      	beq.n	800a504 <mem_malloc+0x18c>
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <mem_malloc+0x1d4>)
 800a4f8:	f240 32bb 	movw	r2, #955	; 0x3bb
 800a4fc:	4919      	ldr	r1, [pc, #100]	; (800a564 <mem_malloc+0x1ec>)
 800a4fe:	4815      	ldr	r0, [pc, #84]	; (800a554 <mem_malloc+0x1dc>)
 800a500:	f009 fc80 	bl	8013e04 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f003 0303 	and.w	r3, r3, #3
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d006      	beq.n	800a51c <mem_malloc+0x1a4>
 800a50e:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <mem_malloc+0x1d4>)
 800a510:	f240 32bd 	movw	r2, #957	; 0x3bd
 800a514:	4914      	ldr	r1, [pc, #80]	; (800a568 <mem_malloc+0x1f0>)
 800a516:	480f      	ldr	r0, [pc, #60]	; (800a554 <mem_malloc+0x1dc>)
 800a518:	f009 fc74 	bl	8013e04 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3308      	adds	r3, #8
 800a520:	e00e      	b.n	800a540 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800a522:	8bfb      	ldrh	r3, [r7, #30]
 800a524:	4618      	mov	r0, r3
 800a526:	f7ff fc83 	bl	8009e30 <ptr_to_mem>
 800a52a:	4603      	mov	r3, r0
 800a52c:	881b      	ldrh	r3, [r3, #0]
 800a52e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a530:	8bfa      	ldrh	r2, [r7, #30]
 800a532:	8bbb      	ldrh	r3, [r7, #28]
 800a534:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800a538:	429a      	cmp	r2, r3
 800a53a:	f4ff af44 	bcc.w	800a3c6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3720      	adds	r7, #32
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}
 800a548:	200000b4 	.word	0x200000b4
 800a54c:	08014ea4 	.word	0x08014ea4
 800a550:	0801504c 	.word	0x0801504c
 800a554:	08014eec 	.word	0x08014eec
 800a558:	200000b0 	.word	0x200000b0
 800a55c:	08015060 	.word	0x08015060
 800a560:	0801507c 	.word	0x0801507c
 800a564:	080150ac 	.word	0x080150ac
 800a568:	080150dc 	.word	0x080150dc

0800a56c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800a56c:	b480      	push	{r7}
 800a56e:	b085      	sub	sp, #20
 800a570:	af00      	add	r7, sp, #0
 800a572:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	689b      	ldr	r3, [r3, #8]
 800a578:	2200      	movs	r2, #0
 800a57a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	3303      	adds	r3, #3
 800a582:	f023 0303 	bic.w	r3, r3, #3
 800a586:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800a588:	2300      	movs	r3, #0
 800a58a:	60fb      	str	r3, [r7, #12]
 800a58c:	e011      	b.n	800a5b2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	689b      	ldr	r3, [r3, #8]
 800a592:	681a      	ldr	r2, [r3, #0]
 800a594:	68bb      	ldr	r3, [r7, #8]
 800a596:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	68ba      	ldr	r2, [r7, #8]
 800a59e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	881b      	ldrh	r3, [r3, #0]
 800a5a4:	461a      	mov	r2, r3
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	60fb      	str	r3, [r7, #12]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	885b      	ldrh	r3, [r3, #2]
 800a5b6:	461a      	mov	r2, r3
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	4293      	cmp	r3, r2
 800a5bc:	dbe7      	blt.n	800a58e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800a5be:	bf00      	nop
 800a5c0:	bf00      	nop
 800a5c2:	3714      	adds	r7, #20
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b082      	sub	sp, #8
 800a5d0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	80fb      	strh	r3, [r7, #6]
 800a5d6:	e009      	b.n	800a5ec <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800a5d8:	88fb      	ldrh	r3, [r7, #6]
 800a5da:	4a08      	ldr	r2, [pc, #32]	; (800a5fc <memp_init+0x30>)
 800a5dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e0:	4618      	mov	r0, r3
 800a5e2:	f7ff ffc3 	bl	800a56c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800a5e6:	88fb      	ldrh	r3, [r7, #6]
 800a5e8:	3301      	adds	r3, #1
 800a5ea:	80fb      	strh	r3, [r7, #6]
 800a5ec:	88fb      	ldrh	r3, [r7, #6]
 800a5ee:	2b08      	cmp	r3, #8
 800a5f0:	d9f2      	bls.n	800a5d8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800a5f2:	bf00      	nop
 800a5f4:	bf00      	nop
 800a5f6:	3708      	adds	r7, #8
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	bd80      	pop	{r7, pc}
 800a5fc:	080178d0 	.word	0x080178d0

0800a600 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2b00      	cmp	r3, #0
 800a614:	d012      	beq.n	800a63c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	68fa      	ldr	r2, [r7, #12]
 800a61c:	6812      	ldr	r2, [r2, #0]
 800a61e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	f003 0303 	and.w	r3, r3, #3
 800a626:	2b00      	cmp	r3, #0
 800a628:	d006      	beq.n	800a638 <do_memp_malloc_pool+0x38>
 800a62a:	4b07      	ldr	r3, [pc, #28]	; (800a648 <do_memp_malloc_pool+0x48>)
 800a62c:	f44f 728c 	mov.w	r2, #280	; 0x118
 800a630:	4906      	ldr	r1, [pc, #24]	; (800a64c <do_memp_malloc_pool+0x4c>)
 800a632:	4807      	ldr	r0, [pc, #28]	; (800a650 <do_memp_malloc_pool+0x50>)
 800a634:	f009 fbe6 	bl	8013e04 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	e000      	b.n	800a63e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
 800a646:	bf00      	nop
 800a648:	08015100 	.word	0x08015100
 800a64c:	08015130 	.word	0x08015130
 800a650:	08015154 	.word	0x08015154

0800a654 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	4603      	mov	r3, r0
 800a65c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800a65e:	79fb      	ldrb	r3, [r7, #7]
 800a660:	2b08      	cmp	r3, #8
 800a662:	d908      	bls.n	800a676 <memp_malloc+0x22>
 800a664:	4b0a      	ldr	r3, [pc, #40]	; (800a690 <memp_malloc+0x3c>)
 800a666:	f240 1257 	movw	r2, #343	; 0x157
 800a66a:	490a      	ldr	r1, [pc, #40]	; (800a694 <memp_malloc+0x40>)
 800a66c:	480a      	ldr	r0, [pc, #40]	; (800a698 <memp_malloc+0x44>)
 800a66e:	f009 fbc9 	bl	8013e04 <iprintf>
 800a672:	2300      	movs	r3, #0
 800a674:	e008      	b.n	800a688 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800a676:	79fb      	ldrb	r3, [r7, #7]
 800a678:	4a08      	ldr	r2, [pc, #32]	; (800a69c <memp_malloc+0x48>)
 800a67a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a67e:	4618      	mov	r0, r3
 800a680:	f7ff ffbe 	bl	800a600 <do_memp_malloc_pool>
 800a684:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800a686:	68fb      	ldr	r3, [r7, #12]
}
 800a688:	4618      	mov	r0, r3
 800a68a:	3710      	adds	r7, #16
 800a68c:	46bd      	mov	sp, r7
 800a68e:	bd80      	pop	{r7, pc}
 800a690:	08015100 	.word	0x08015100
 800a694:	08015190 	.word	0x08015190
 800a698:	08015154 	.word	0x08015154
 800a69c:	080178d0 	.word	0x080178d0

0800a6a0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800a6a0:	b580      	push	{r7, lr}
 800a6a2:	b084      	sub	sp, #16
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
 800a6a8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800a6aa:	683b      	ldr	r3, [r7, #0]
 800a6ac:	f003 0303 	and.w	r3, r3, #3
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d006      	beq.n	800a6c2 <do_memp_free_pool+0x22>
 800a6b4:	4b0a      	ldr	r3, [pc, #40]	; (800a6e0 <do_memp_free_pool+0x40>)
 800a6b6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800a6ba:	490a      	ldr	r1, [pc, #40]	; (800a6e4 <do_memp_free_pool+0x44>)
 800a6bc:	480a      	ldr	r0, [pc, #40]	; (800a6e8 <do_memp_free_pool+0x48>)
 800a6be:	f009 fba1 	bl	8013e04 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800a6c2:	683b      	ldr	r3, [r7, #0]
 800a6c4:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	689b      	ldr	r3, [r3, #8]
 800a6ca:	681a      	ldr	r2, [r3, #0]
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800a6d8:	bf00      	nop
 800a6da:	3710      	adds	r7, #16
 800a6dc:	46bd      	mov	sp, r7
 800a6de:	bd80      	pop	{r7, pc}
 800a6e0:	08015100 	.word	0x08015100
 800a6e4:	080151b0 	.word	0x080151b0
 800a6e8:	08015154 	.word	0x08015154

0800a6ec <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b082      	sub	sp, #8
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	4603      	mov	r3, r0
 800a6f4:	6039      	str	r1, [r7, #0]
 800a6f6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800a6f8:	79fb      	ldrb	r3, [r7, #7]
 800a6fa:	2b08      	cmp	r3, #8
 800a6fc:	d907      	bls.n	800a70e <memp_free+0x22>
 800a6fe:	4b0c      	ldr	r3, [pc, #48]	; (800a730 <memp_free+0x44>)
 800a700:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800a704:	490b      	ldr	r1, [pc, #44]	; (800a734 <memp_free+0x48>)
 800a706:	480c      	ldr	r0, [pc, #48]	; (800a738 <memp_free+0x4c>)
 800a708:	f009 fb7c 	bl	8013e04 <iprintf>
 800a70c:	e00c      	b.n	800a728 <memp_free+0x3c>

  if (mem == NULL) {
 800a70e:	683b      	ldr	r3, [r7, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d008      	beq.n	800a726 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800a714:	79fb      	ldrb	r3, [r7, #7]
 800a716:	4a09      	ldr	r2, [pc, #36]	; (800a73c <memp_free+0x50>)
 800a718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a71c:	6839      	ldr	r1, [r7, #0]
 800a71e:	4618      	mov	r0, r3
 800a720:	f7ff ffbe 	bl	800a6a0 <do_memp_free_pool>
 800a724:	e000      	b.n	800a728 <memp_free+0x3c>
    return;
 800a726:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800a728:	3708      	adds	r7, #8
 800a72a:	46bd      	mov	sp, r7
 800a72c:	bd80      	pop	{r7, pc}
 800a72e:	bf00      	nop
 800a730:	08015100 	.word	0x08015100
 800a734:	080151d0 	.word	0x080151d0
 800a738:	08015154 	.word	0x08015154
 800a73c:	080178d0 	.word	0x080178d0

0800a740 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800a740:	b480      	push	{r7}
 800a742:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800a744:	bf00      	nop
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
	...

0800a750 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b086      	sub	sp, #24
 800a754:	af00      	add	r7, sp, #0
 800a756:	60f8      	str	r0, [r7, #12]
 800a758:	60b9      	str	r1, [r7, #8]
 800a75a:	607a      	str	r2, [r7, #4]
 800a75c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	2b00      	cmp	r3, #0
 800a762:	d108      	bne.n	800a776 <netif_add+0x26>
 800a764:	4b57      	ldr	r3, [pc, #348]	; (800a8c4 <netif_add+0x174>)
 800a766:	f240 1227 	movw	r2, #295	; 0x127
 800a76a:	4957      	ldr	r1, [pc, #348]	; (800a8c8 <netif_add+0x178>)
 800a76c:	4857      	ldr	r0, [pc, #348]	; (800a8cc <netif_add+0x17c>)
 800a76e:	f009 fb49 	bl	8013e04 <iprintf>
 800a772:	2300      	movs	r3, #0
 800a774:	e0a2      	b.n	800a8bc <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800a776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d108      	bne.n	800a78e <netif_add+0x3e>
 800a77c:	4b51      	ldr	r3, [pc, #324]	; (800a8c4 <netif_add+0x174>)
 800a77e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800a782:	4953      	ldr	r1, [pc, #332]	; (800a8d0 <netif_add+0x180>)
 800a784:	4851      	ldr	r0, [pc, #324]	; (800a8cc <netif_add+0x17c>)
 800a786:	f009 fb3d 	bl	8013e04 <iprintf>
 800a78a:	2300      	movs	r3, #0
 800a78c:	e096      	b.n	800a8bc <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d101      	bne.n	800a798 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800a794:	4b4f      	ldr	r3, [pc, #316]	; (800a8d4 <netif_add+0x184>)
 800a796:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800a79e:	4b4d      	ldr	r3, [pc, #308]	; (800a8d4 <netif_add+0x184>)
 800a7a0:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800a7a8:	4b4a      	ldr	r3, [pc, #296]	; (800a8d4 <netif_add+0x184>)
 800a7aa:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	2200      	movs	r2, #0
 800a7b0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2200      	movs	r2, #0
 800a7b6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	4a45      	ldr	r2, [pc, #276]	; (800a8d8 <netif_add+0x188>)
 800a7c2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	2200      	movs	r2, #0
 800a7c8:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	6a3a      	ldr	r2, [r7, #32]
 800a7dc:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800a7de:	4b3f      	ldr	r3, [pc, #252]	; (800a8dc <netif_add+0x18c>)
 800a7e0:	781a      	ldrb	r2, [r3, #0]
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a7ec:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800a7ee:	683b      	ldr	r3, [r7, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	68f8      	ldr	r0, [r7, #12]
 800a7f6:	f000 f913 	bl	800aa20 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800a7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7fc:	68f8      	ldr	r0, [r7, #12]
 800a7fe:	4798      	blx	r3
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <netif_add+0xba>
    return NULL;
 800a806:	2300      	movs	r3, #0
 800a808:	e058      	b.n	800a8bc <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a810:	2bff      	cmp	r3, #255	; 0xff
 800a812:	d103      	bne.n	800a81c <netif_add+0xcc>
        netif->num = 0;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2200      	movs	r2, #0
 800a818:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800a81c:	2300      	movs	r3, #0
 800a81e:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a820:	4b2f      	ldr	r3, [pc, #188]	; (800a8e0 <netif_add+0x190>)
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e02b      	b.n	800a880 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800a828:	697a      	ldr	r2, [r7, #20]
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	429a      	cmp	r2, r3
 800a82e:	d106      	bne.n	800a83e <netif_add+0xee>
 800a830:	4b24      	ldr	r3, [pc, #144]	; (800a8c4 <netif_add+0x174>)
 800a832:	f240 128b 	movw	r2, #395	; 0x18b
 800a836:	492b      	ldr	r1, [pc, #172]	; (800a8e4 <netif_add+0x194>)
 800a838:	4824      	ldr	r0, [pc, #144]	; (800a8cc <netif_add+0x17c>)
 800a83a:	f009 fae3 	bl	8013e04 <iprintf>
        num_netifs++;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	3301      	adds	r3, #1
 800a842:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	2bff      	cmp	r3, #255	; 0xff
 800a848:	dd06      	ble.n	800a858 <netif_add+0x108>
 800a84a:	4b1e      	ldr	r3, [pc, #120]	; (800a8c4 <netif_add+0x174>)
 800a84c:	f240 128d 	movw	r2, #397	; 0x18d
 800a850:	4925      	ldr	r1, [pc, #148]	; (800a8e8 <netif_add+0x198>)
 800a852:	481e      	ldr	r0, [pc, #120]	; (800a8cc <netif_add+0x17c>)
 800a854:	f009 fad6 	bl	8013e04 <iprintf>
        if (netif2->num == netif->num) {
 800a858:	697b      	ldr	r3, [r7, #20]
 800a85a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a864:	429a      	cmp	r2, r3
 800a866:	d108      	bne.n	800a87a <netif_add+0x12a>
          netif->num++;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a86e:	3301      	adds	r3, #1
 800a870:	b2da      	uxtb	r2, r3
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800a878:	e005      	b.n	800a886 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800a87a:	697b      	ldr	r3, [r7, #20]
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	617b      	str	r3, [r7, #20]
 800a880:	697b      	ldr	r3, [r7, #20]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d1d0      	bne.n	800a828 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d1be      	bne.n	800a80a <netif_add+0xba>
  }
  if (netif->num == 254) {
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a892:	2bfe      	cmp	r3, #254	; 0xfe
 800a894:	d103      	bne.n	800a89e <netif_add+0x14e>
    netif_num = 0;
 800a896:	4b11      	ldr	r3, [pc, #68]	; (800a8dc <netif_add+0x18c>)
 800a898:	2200      	movs	r2, #0
 800a89a:	701a      	strb	r2, [r3, #0]
 800a89c:	e006      	b.n	800a8ac <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a8a4:	3301      	adds	r3, #1
 800a8a6:	b2da      	uxtb	r2, r3
 800a8a8:	4b0c      	ldr	r3, [pc, #48]	; (800a8dc <netif_add+0x18c>)
 800a8aa:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800a8ac:	4b0c      	ldr	r3, [pc, #48]	; (800a8e0 <netif_add+0x190>)
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800a8b4:	4a0a      	ldr	r2, [pc, #40]	; (800a8e0 <netif_add+0x190>)
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800a8ba:	68fb      	ldr	r3, [r7, #12]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3718      	adds	r7, #24
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}
 800a8c4:	080151ec 	.word	0x080151ec
 800a8c8:	08015280 	.word	0x08015280
 800a8cc:	0801523c 	.word	0x0801523c
 800a8d0:	0801529c 	.word	0x0801529c
 800a8d4:	08017934 	.word	0x08017934
 800a8d8:	0800ac33 	.word	0x0800ac33
 800a8dc:	200000dc 	.word	0x200000dc
 800a8e0:	200071f0 	.word	0x200071f0
 800a8e4:	080152c0 	.word	0x080152c0
 800a8e8:	080152d4 	.word	0x080152d4

0800a8ec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b082      	sub	sp, #8
 800a8f0:	af00      	add	r7, sp, #0
 800a8f2:	6078      	str	r0, [r7, #4]
 800a8f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800a8f6:	6839      	ldr	r1, [r7, #0]
 800a8f8:	6878      	ldr	r0, [r7, #4]
 800a8fa:	f002 faef 	bl	800cedc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800a8fe:	6839      	ldr	r1, [r7, #0]
 800a900:	6878      	ldr	r0, [r7, #4]
 800a902:	f006 ff47 	bl	8011794 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800a906:	bf00      	nop
 800a908:	3708      	adds	r7, #8
 800a90a:	46bd      	mov	sp, r7
 800a90c:	bd80      	pop	{r7, pc}
	...

0800a910 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b086      	sub	sp, #24
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	2b00      	cmp	r3, #0
 800a920:	d106      	bne.n	800a930 <netif_do_set_ipaddr+0x20>
 800a922:	4b1d      	ldr	r3, [pc, #116]	; (800a998 <netif_do_set_ipaddr+0x88>)
 800a924:	f240 12cb 	movw	r2, #459	; 0x1cb
 800a928:	491c      	ldr	r1, [pc, #112]	; (800a99c <netif_do_set_ipaddr+0x8c>)
 800a92a:	481d      	ldr	r0, [pc, #116]	; (800a9a0 <netif_do_set_ipaddr+0x90>)
 800a92c:	f009 fa6a 	bl	8013e04 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <netif_do_set_ipaddr+0x34>
 800a936:	4b18      	ldr	r3, [pc, #96]	; (800a998 <netif_do_set_ipaddr+0x88>)
 800a938:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800a93c:	4917      	ldr	r1, [pc, #92]	; (800a99c <netif_do_set_ipaddr+0x8c>)
 800a93e:	4818      	ldr	r0, [pc, #96]	; (800a9a0 <netif_do_set_ipaddr+0x90>)
 800a940:	f009 fa60 	bl	8013e04 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	681a      	ldr	r2, [r3, #0]
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	3304      	adds	r3, #4
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	429a      	cmp	r2, r3
 800a950:	d01c      	beq.n	800a98c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	3304      	adds	r3, #4
 800a95c:	681a      	ldr	r2, [r3, #0]
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800a962:	f107 0314 	add.w	r3, r7, #20
 800a966:	4619      	mov	r1, r3
 800a968:	6878      	ldr	r0, [r7, #4]
 800a96a:	f7ff ffbf 	bl	800a8ec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800a96e:	68bb      	ldr	r3, [r7, #8]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d002      	beq.n	800a97a <netif_do_set_ipaddr+0x6a>
 800a974:	68bb      	ldr	r3, [r7, #8]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	e000      	b.n	800a97c <netif_do_set_ipaddr+0x6c>
 800a97a:	2300      	movs	r3, #0
 800a97c:	68fa      	ldr	r2, [r7, #12]
 800a97e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800a980:	2101      	movs	r1, #1
 800a982:	68f8      	ldr	r0, [r7, #12]
 800a984:	f000 f8d2 	bl	800ab2c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800a988:	2301      	movs	r3, #1
 800a98a:	e000      	b.n	800a98e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800a98c:	2300      	movs	r3, #0
}
 800a98e:	4618      	mov	r0, r3
 800a990:	3718      	adds	r7, #24
 800a992:	46bd      	mov	sp, r7
 800a994:	bd80      	pop	{r7, pc}
 800a996:	bf00      	nop
 800a998:	080151ec 	.word	0x080151ec
 800a99c:	08015304 	.word	0x08015304
 800a9a0:	0801523c 	.word	0x0801523c

0800a9a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b085      	sub	sp, #20
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	60f8      	str	r0, [r7, #12]
 800a9ac:	60b9      	str	r1, [r7, #8]
 800a9ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	681a      	ldr	r2, [r3, #0]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	3308      	adds	r3, #8
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d00a      	beq.n	800a9d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800a9be:	68bb      	ldr	r3, [r7, #8]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <netif_do_set_netmask+0x26>
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	e000      	b.n	800a9cc <netif_do_set_netmask+0x28>
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	68fa      	ldr	r2, [r7, #12]
 800a9ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800a9d0:	2301      	movs	r3, #1
 800a9d2:	e000      	b.n	800a9d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800a9d4:	2300      	movs	r3, #0
}
 800a9d6:	4618      	mov	r0, r3
 800a9d8:	3714      	adds	r7, #20
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e0:	4770      	bx	lr

0800a9e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800a9e2:	b480      	push	{r7}
 800a9e4:	b085      	sub	sp, #20
 800a9e6:	af00      	add	r7, sp, #0
 800a9e8:	60f8      	str	r0, [r7, #12]
 800a9ea:	60b9      	str	r1, [r7, #8]
 800a9ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800a9ee:	68bb      	ldr	r3, [r7, #8]
 800a9f0:	681a      	ldr	r2, [r3, #0]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	330c      	adds	r3, #12
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	429a      	cmp	r2, r3
 800a9fa:	d00a      	beq.n	800aa12 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800a9fc:	68bb      	ldr	r3, [r7, #8]
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d002      	beq.n	800aa08 <netif_do_set_gw+0x26>
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	e000      	b.n	800aa0a <netif_do_set_gw+0x28>
 800aa08:	2300      	movs	r3, #0
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800aa0e:	2301      	movs	r3, #1
 800aa10:	e000      	b.n	800aa14 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800aa12:	2300      	movs	r3, #0
}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3714      	adds	r7, #20
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1e:	4770      	bx	lr

0800aa20 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	607a      	str	r2, [r7, #4]
 800aa2c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800aa32:	2300      	movs	r3, #0
 800aa34:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800aa36:	68bb      	ldr	r3, [r7, #8]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d101      	bne.n	800aa40 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800aa3c:	4b1c      	ldr	r3, [pc, #112]	; (800aab0 <netif_set_addr+0x90>)
 800aa3e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800aa46:	4b1a      	ldr	r3, [pc, #104]	; (800aab0 <netif_set_addr+0x90>)
 800aa48:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d101      	bne.n	800aa54 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800aa50:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <netif_set_addr+0x90>)
 800aa52:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800aa54:	68bb      	ldr	r3, [r7, #8]
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d003      	beq.n	800aa62 <netif_set_addr+0x42>
 800aa5a:	68bb      	ldr	r3, [r7, #8]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b00      	cmp	r3, #0
 800aa60:	d101      	bne.n	800aa66 <netif_set_addr+0x46>
 800aa62:	2301      	movs	r3, #1
 800aa64:	e000      	b.n	800aa68 <netif_set_addr+0x48>
 800aa66:	2300      	movs	r3, #0
 800aa68:	617b      	str	r3, [r7, #20]
  if (remove) {
 800aa6a:	697b      	ldr	r3, [r7, #20]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d006      	beq.n	800aa7e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa70:	f107 0310 	add.w	r3, r7, #16
 800aa74:	461a      	mov	r2, r3
 800aa76:	68b9      	ldr	r1, [r7, #8]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f7ff ff49 	bl	800a910 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800aa7e:	69fa      	ldr	r2, [r7, #28]
 800aa80:	6879      	ldr	r1, [r7, #4]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f7ff ff8e 	bl	800a9a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800aa88:	69ba      	ldr	r2, [r7, #24]
 800aa8a:	6839      	ldr	r1, [r7, #0]
 800aa8c:	68f8      	ldr	r0, [r7, #12]
 800aa8e:	f7ff ffa8 	bl	800a9e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	2b00      	cmp	r3, #0
 800aa96:	d106      	bne.n	800aaa6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800aa98:	f107 0310 	add.w	r3, r7, #16
 800aa9c:	461a      	mov	r2, r3
 800aa9e:	68b9      	ldr	r1, [r7, #8]
 800aaa0:	68f8      	ldr	r0, [r7, #12]
 800aaa2:	f7ff ff35 	bl	800a910 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800aaa6:	bf00      	nop
 800aaa8:	3720      	adds	r7, #32
 800aaaa:	46bd      	mov	sp, r7
 800aaac:	bd80      	pop	{r7, pc}
 800aaae:	bf00      	nop
 800aab0:	08017934 	.word	0x08017934

0800aab4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800aab4:	b480      	push	{r7}
 800aab6:	b083      	sub	sp, #12
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800aabc:	4a04      	ldr	r2, [pc, #16]	; (800aad0 <netif_set_default+0x1c>)
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800aac2:	bf00      	nop
 800aac4:	370c      	adds	r7, #12
 800aac6:	46bd      	mov	sp, r7
 800aac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aacc:	4770      	bx	lr
 800aace:	bf00      	nop
 800aad0:	200071f4 	.word	0x200071f4

0800aad4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b082      	sub	sp, #8
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d107      	bne.n	800aaf2 <netif_set_up+0x1e>
 800aae2:	4b0f      	ldr	r3, [pc, #60]	; (800ab20 <netif_set_up+0x4c>)
 800aae4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800aae8:	490e      	ldr	r1, [pc, #56]	; (800ab24 <netif_set_up+0x50>)
 800aaea:	480f      	ldr	r0, [pc, #60]	; (800ab28 <netif_set_up+0x54>)
 800aaec:	f009 f98a 	bl	8013e04 <iprintf>
 800aaf0:	e013      	b.n	800ab1a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800aaf8:	f003 0301 	and.w	r3, r3, #1
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d10c      	bne.n	800ab1a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab06:	f043 0301 	orr.w	r3, r3, #1
 800ab0a:	b2da      	uxtb	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ab12:	2103      	movs	r1, #3
 800ab14:	6878      	ldr	r0, [r7, #4]
 800ab16:	f000 f809 	bl	800ab2c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800ab1a:	3708      	adds	r7, #8
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}
 800ab20:	080151ec 	.word	0x080151ec
 800ab24:	08015374 	.word	0x08015374
 800ab28:	0801523c 	.word	0x0801523c

0800ab2c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800ab2c:	b580      	push	{r7, lr}
 800ab2e:	b082      	sub	sp, #8
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
 800ab34:	460b      	mov	r3, r1
 800ab36:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d106      	bne.n	800ab4c <netif_issue_reports+0x20>
 800ab3e:	4b18      	ldr	r3, [pc, #96]	; (800aba0 <netif_issue_reports+0x74>)
 800ab40:	f240 326d 	movw	r2, #877	; 0x36d
 800ab44:	4917      	ldr	r1, [pc, #92]	; (800aba4 <netif_issue_reports+0x78>)
 800ab46:	4818      	ldr	r0, [pc, #96]	; (800aba8 <netif_issue_reports+0x7c>)
 800ab48:	f009 f95c 	bl	8013e04 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab52:	f003 0304 	and.w	r3, r3, #4
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d01e      	beq.n	800ab98 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab60:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d017      	beq.n	800ab98 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab68:	78fb      	ldrb	r3, [r7, #3]
 800ab6a:	f003 0301 	and.w	r3, r3, #1
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d013      	beq.n	800ab9a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	3304      	adds	r3, #4
 800ab76:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00e      	beq.n	800ab9a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ab82:	f003 0308 	and.w	r3, r3, #8
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d007      	beq.n	800ab9a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	3304      	adds	r3, #4
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f007 fd69 	bl	8012668 <etharp_request>
 800ab96:	e000      	b.n	800ab9a <netif_issue_reports+0x6e>
    return;
 800ab98:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800ab9a:	3708      	adds	r7, #8
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	bd80      	pop	{r7, pc}
 800aba0:	080151ec 	.word	0x080151ec
 800aba4:	08015390 	.word	0x08015390
 800aba8:	0801523c 	.word	0x0801523c

0800abac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d107      	bne.n	800abca <netif_set_down+0x1e>
 800abba:	4b12      	ldr	r3, [pc, #72]	; (800ac04 <netif_set_down+0x58>)
 800abbc:	f240 329b 	movw	r2, #923	; 0x39b
 800abc0:	4911      	ldr	r1, [pc, #68]	; (800ac08 <netif_set_down+0x5c>)
 800abc2:	4812      	ldr	r0, [pc, #72]	; (800ac0c <netif_set_down+0x60>)
 800abc4:	f009 f91e 	bl	8013e04 <iprintf>
 800abc8:	e019      	b.n	800abfe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abd0:	f003 0301 	and.w	r3, r3, #1
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d012      	beq.n	800abfe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abde:	f023 0301 	bic.w	r3, r3, #1
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800abf0:	f003 0308 	and.w	r3, r3, #8
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d002      	beq.n	800abfe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f007 f8f3 	bl	8011de4 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800abfe:	3708      	adds	r7, #8
 800ac00:	46bd      	mov	sp, r7
 800ac02:	bd80      	pop	{r7, pc}
 800ac04:	080151ec 	.word	0x080151ec
 800ac08:	080153b4 	.word	0x080153b4
 800ac0c:	0801523c 	.word	0x0801523c

0800ac10 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800ac10:	b480      	push	{r7}
 800ac12:	b083      	sub	sp, #12
 800ac14:	af00      	add	r7, sp, #0
 800ac16:	6078      	str	r0, [r7, #4]
 800ac18:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	683a      	ldr	r2, [r7, #0]
 800ac24:	61da      	str	r2, [r3, #28]
  }
}
 800ac26:	bf00      	nop
 800ac28:	370c      	adds	r7, #12
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac30:	4770      	bx	lr

0800ac32 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800ac32:	b480      	push	{r7}
 800ac34:	b085      	sub	sp, #20
 800ac36:	af00      	add	r7, sp, #0
 800ac38:	60f8      	str	r0, [r7, #12]
 800ac3a:	60b9      	str	r1, [r7, #8]
 800ac3c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800ac3e:	f06f 030b 	mvn.w	r3, #11
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3714      	adds	r7, #20
 800ac46:	46bd      	mov	sp, r7
 800ac48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4c:	4770      	bx	lr
	...

0800ac50 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800ac50:	b480      	push	{r7}
 800ac52:	b085      	sub	sp, #20
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	4603      	mov	r3, r0
 800ac58:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800ac5a:	79fb      	ldrb	r3, [r7, #7]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d013      	beq.n	800ac88 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800ac60:	4b0d      	ldr	r3, [pc, #52]	; (800ac98 <netif_get_by_index+0x48>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	60fb      	str	r3, [r7, #12]
 800ac66:	e00c      	b.n	800ac82 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800ac6e:	3301      	adds	r3, #1
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	79fa      	ldrb	r2, [r7, #7]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d101      	bne.n	800ac7c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	e006      	b.n	800ac8a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	68fb      	ldr	r3, [r7, #12]
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1ef      	bne.n	800ac68 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800ac88:	2300      	movs	r3, #0
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	200071f0 	.word	0x200071f0

0800ac9c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800aca2:	4b0c      	ldr	r3, [pc, #48]	; (800acd4 <pbuf_free_ooseq+0x38>)
 800aca4:	2200      	movs	r2, #0
 800aca6:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800aca8:	4b0b      	ldr	r3, [pc, #44]	; (800acd8 <pbuf_free_ooseq+0x3c>)
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	607b      	str	r3, [r7, #4]
 800acae:	e00a      	b.n	800acc6 <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d003      	beq.n	800acc0 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f002 f94d 	bl	800cf58 <tcp_free_ooseq>
      return;
 800acbe:	e005      	b.n	800accc <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	68db      	ldr	r3, [r3, #12]
 800acc4:	607b      	str	r3, [r7, #4]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d1f1      	bne.n	800acb0 <pbuf_free_ooseq+0x14>
    }
  }
}
 800accc:	3708      	adds	r7, #8
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	200071f8 	.word	0x200071f8
 800acd8:	20007200 	.word	0x20007200

0800acdc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800acdc:	b480      	push	{r7}
 800acde:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800ace0:	4b03      	ldr	r3, [pc, #12]	; (800acf0 <pbuf_pool_is_empty+0x14>)
 800ace2:	2201      	movs	r2, #1
 800ace4:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800ace6:	bf00      	nop
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr
 800acf0:	200071f8 	.word	0x200071f8

0800acf4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	4611      	mov	r1, r2
 800ad00:	461a      	mov	r2, r3
 800ad02:	460b      	mov	r3, r1
 800ad04:	80fb      	strh	r3, [r7, #6]
 800ad06:	4613      	mov	r3, r2
 800ad08:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	2200      	movs	r2, #0
 800ad0e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	68ba      	ldr	r2, [r7, #8]
 800ad14:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	88fa      	ldrh	r2, [r7, #6]
 800ad1a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	88ba      	ldrh	r2, [r7, #4]
 800ad20:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800ad22:	8b3b      	ldrh	r3, [r7, #24]
 800ad24:	b2da      	uxtb	r2, r3
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	7f3a      	ldrb	r2, [r7, #28]
 800ad2e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	2201      	movs	r2, #1
 800ad34:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	2200      	movs	r2, #0
 800ad3a:	73da      	strb	r2, [r3, #15]
}
 800ad3c:	bf00      	nop
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b08c      	sub	sp, #48	; 0x30
 800ad4c:	af02      	add	r7, sp, #8
 800ad4e:	4603      	mov	r3, r0
 800ad50:	71fb      	strb	r3, [r7, #7]
 800ad52:	460b      	mov	r3, r1
 800ad54:	80bb      	strh	r3, [r7, #4]
 800ad56:	4613      	mov	r3, r2
 800ad58:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ad5a:	79fb      	ldrb	r3, [r7, #7]
 800ad5c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ad5e:	887b      	ldrh	r3, [r7, #2]
 800ad60:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ad64:	d07f      	beq.n	800ae66 <pbuf_alloc+0x11e>
 800ad66:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ad6a:	f300 80c8 	bgt.w	800aefe <pbuf_alloc+0x1b6>
 800ad6e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ad72:	d010      	beq.n	800ad96 <pbuf_alloc+0x4e>
 800ad74:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ad78:	f300 80c1 	bgt.w	800aefe <pbuf_alloc+0x1b6>
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d002      	beq.n	800ad86 <pbuf_alloc+0x3e>
 800ad80:	2b41      	cmp	r3, #65	; 0x41
 800ad82:	f040 80bc 	bne.w	800aefe <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800ad86:	887a      	ldrh	r2, [r7, #2]
 800ad88:	88bb      	ldrh	r3, [r7, #4]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	2000      	movs	r0, #0
 800ad8e:	f000 f8d1 	bl	800af34 <pbuf_alloc_reference>
 800ad92:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ad94:	e0bd      	b.n	800af12 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ad96:	2300      	movs	r3, #0
 800ad98:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ad9e:	88bb      	ldrh	r3, [r7, #4]
 800ada0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800ada2:	2008      	movs	r0, #8
 800ada4:	f7ff fc56 	bl	800a654 <memp_malloc>
 800ada8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d109      	bne.n	800adc4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800adb0:	f7ff ff94 	bl	800acdc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800adb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d002      	beq.n	800adc0 <pbuf_alloc+0x78>
            pbuf_free(p);
 800adba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800adbc:	f000 faa8 	bl	800b310 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800adc0:	2300      	movs	r3, #0
 800adc2:	e0a7      	b.n	800af14 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800adc4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adc6:	3303      	adds	r3, #3
 800adc8:	b29b      	uxth	r3, r3
 800adca:	f023 0303 	bic.w	r3, r3, #3
 800adce:	b29b      	uxth	r3, r3
 800add0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800add4:	b29b      	uxth	r3, r3
 800add6:	8b7a      	ldrh	r2, [r7, #26]
 800add8:	4293      	cmp	r3, r2
 800adda:	bf28      	it	cs
 800addc:	4613      	movcs	r3, r2
 800adde:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800ade0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ade2:	3310      	adds	r3, #16
 800ade4:	693a      	ldr	r2, [r7, #16]
 800ade6:	4413      	add	r3, r2
 800ade8:	3303      	adds	r3, #3
 800adea:	f023 0303 	bic.w	r3, r3, #3
 800adee:	4618      	mov	r0, r3
 800adf0:	89f9      	ldrh	r1, [r7, #14]
 800adf2:	8b7a      	ldrh	r2, [r7, #26]
 800adf4:	2300      	movs	r3, #0
 800adf6:	9301      	str	r3, [sp, #4]
 800adf8:	887b      	ldrh	r3, [r7, #2]
 800adfa:	9300      	str	r3, [sp, #0]
 800adfc:	460b      	mov	r3, r1
 800adfe:	4601      	mov	r1, r0
 800ae00:	6938      	ldr	r0, [r7, #16]
 800ae02:	f7ff ff77 	bl	800acf4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800ae06:	693b      	ldr	r3, [r7, #16]
 800ae08:	685b      	ldr	r3, [r3, #4]
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d006      	beq.n	800ae20 <pbuf_alloc+0xd8>
 800ae12:	4b42      	ldr	r3, [pc, #264]	; (800af1c <pbuf_alloc+0x1d4>)
 800ae14:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ae18:	4941      	ldr	r1, [pc, #260]	; (800af20 <pbuf_alloc+0x1d8>)
 800ae1a:	4842      	ldr	r0, [pc, #264]	; (800af24 <pbuf_alloc+0x1dc>)
 800ae1c:	f008 fff2 	bl	8013e04 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800ae20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae22:	3303      	adds	r3, #3
 800ae24:	f023 0303 	bic.w	r3, r3, #3
 800ae28:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800ae2c:	d106      	bne.n	800ae3c <pbuf_alloc+0xf4>
 800ae2e:	4b3b      	ldr	r3, [pc, #236]	; (800af1c <pbuf_alloc+0x1d4>)
 800ae30:	f44f 7281 	mov.w	r2, #258	; 0x102
 800ae34:	493c      	ldr	r1, [pc, #240]	; (800af28 <pbuf_alloc+0x1e0>)
 800ae36:	483b      	ldr	r0, [pc, #236]	; (800af24 <pbuf_alloc+0x1dc>)
 800ae38:	f008 ffe4 	bl	8013e04 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800ae3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d102      	bne.n	800ae48 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800ae42:	693b      	ldr	r3, [r7, #16]
 800ae44:	627b      	str	r3, [r7, #36]	; 0x24
 800ae46:	e002      	b.n	800ae4e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	693a      	ldr	r2, [r7, #16]
 800ae4c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800ae52:	8b7a      	ldrh	r2, [r7, #26]
 800ae54:	89fb      	ldrh	r3, [r7, #14]
 800ae56:	1ad3      	subs	r3, r2, r3
 800ae58:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800ae5e:	8b7b      	ldrh	r3, [r7, #26]
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d19e      	bne.n	800ada2 <pbuf_alloc+0x5a>
      break;
 800ae64:	e055      	b.n	800af12 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800ae66:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae68:	3303      	adds	r3, #3
 800ae6a:	b29b      	uxth	r3, r3
 800ae6c:	f023 0303 	bic.w	r3, r3, #3
 800ae70:	b29a      	uxth	r2, r3
 800ae72:	88bb      	ldrh	r3, [r7, #4]
 800ae74:	3303      	adds	r3, #3
 800ae76:	b29b      	uxth	r3, r3
 800ae78:	f023 0303 	bic.w	r3, r3, #3
 800ae7c:	b29b      	uxth	r3, r3
 800ae7e:	4413      	add	r3, r2
 800ae80:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800ae82:	8b3b      	ldrh	r3, [r7, #24]
 800ae84:	3310      	adds	r3, #16
 800ae86:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ae88:	8b3a      	ldrh	r2, [r7, #24]
 800ae8a:	88bb      	ldrh	r3, [r7, #4]
 800ae8c:	3303      	adds	r3, #3
 800ae8e:	f023 0303 	bic.w	r3, r3, #3
 800ae92:	429a      	cmp	r2, r3
 800ae94:	d306      	bcc.n	800aea4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800ae96:	8afa      	ldrh	r2, [r7, #22]
 800ae98:	88bb      	ldrh	r3, [r7, #4]
 800ae9a:	3303      	adds	r3, #3
 800ae9c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800aea0:	429a      	cmp	r2, r3
 800aea2:	d201      	bcs.n	800aea8 <pbuf_alloc+0x160>
        return NULL;
 800aea4:	2300      	movs	r3, #0
 800aea6:	e035      	b.n	800af14 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800aea8:	8afb      	ldrh	r3, [r7, #22]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f7ff fa64 	bl	800a378 <mem_malloc>
 800aeb0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800aeb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d101      	bne.n	800aebc <pbuf_alloc+0x174>
        return NULL;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	e02b      	b.n	800af14 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800aebc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aebe:	3310      	adds	r3, #16
 800aec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aec2:	4413      	add	r3, r2
 800aec4:	3303      	adds	r3, #3
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	4618      	mov	r0, r3
 800aecc:	88b9      	ldrh	r1, [r7, #4]
 800aece:	88ba      	ldrh	r2, [r7, #4]
 800aed0:	2300      	movs	r3, #0
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	887b      	ldrh	r3, [r7, #2]
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	460b      	mov	r3, r1
 800aeda:	4601      	mov	r1, r0
 800aedc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aede:	f7ff ff09 	bl	800acf4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800aee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f003 0303 	and.w	r3, r3, #3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	d010      	beq.n	800af10 <pbuf_alloc+0x1c8>
 800aeee:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <pbuf_alloc+0x1d4>)
 800aef0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800aef4:	490d      	ldr	r1, [pc, #52]	; (800af2c <pbuf_alloc+0x1e4>)
 800aef6:	480b      	ldr	r0, [pc, #44]	; (800af24 <pbuf_alloc+0x1dc>)
 800aef8:	f008 ff84 	bl	8013e04 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800aefc:	e008      	b.n	800af10 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800aefe:	4b07      	ldr	r3, [pc, #28]	; (800af1c <pbuf_alloc+0x1d4>)
 800af00:	f240 1227 	movw	r2, #295	; 0x127
 800af04:	490a      	ldr	r1, [pc, #40]	; (800af30 <pbuf_alloc+0x1e8>)
 800af06:	4807      	ldr	r0, [pc, #28]	; (800af24 <pbuf_alloc+0x1dc>)
 800af08:	f008 ff7c 	bl	8013e04 <iprintf>
      return NULL;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e001      	b.n	800af14 <pbuf_alloc+0x1cc>
      break;
 800af10:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800af12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af14:	4618      	mov	r0, r3
 800af16:	3728      	adds	r7, #40	; 0x28
 800af18:	46bd      	mov	sp, r7
 800af1a:	bd80      	pop	{r7, pc}
 800af1c:	0801541c 	.word	0x0801541c
 800af20:	0801544c 	.word	0x0801544c
 800af24:	0801547c 	.word	0x0801547c
 800af28:	080154a4 	.word	0x080154a4
 800af2c:	080154d8 	.word	0x080154d8
 800af30:	08015504 	.word	0x08015504

0800af34 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af02      	add	r7, sp, #8
 800af3a:	6078      	str	r0, [r7, #4]
 800af3c:	460b      	mov	r3, r1
 800af3e:	807b      	strh	r3, [r7, #2]
 800af40:	4613      	mov	r3, r2
 800af42:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800af44:	883b      	ldrh	r3, [r7, #0]
 800af46:	2b41      	cmp	r3, #65	; 0x41
 800af48:	d009      	beq.n	800af5e <pbuf_alloc_reference+0x2a>
 800af4a:	883b      	ldrh	r3, [r7, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d006      	beq.n	800af5e <pbuf_alloc_reference+0x2a>
 800af50:	4b0f      	ldr	r3, [pc, #60]	; (800af90 <pbuf_alloc_reference+0x5c>)
 800af52:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800af56:	490f      	ldr	r1, [pc, #60]	; (800af94 <pbuf_alloc_reference+0x60>)
 800af58:	480f      	ldr	r0, [pc, #60]	; (800af98 <pbuf_alloc_reference+0x64>)
 800af5a:	f008 ff53 	bl	8013e04 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800af5e:	2007      	movs	r0, #7
 800af60:	f7ff fb78 	bl	800a654 <memp_malloc>
 800af64:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800af6c:	2300      	movs	r3, #0
 800af6e:	e00b      	b.n	800af88 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800af70:	8879      	ldrh	r1, [r7, #2]
 800af72:	887a      	ldrh	r2, [r7, #2]
 800af74:	2300      	movs	r3, #0
 800af76:	9301      	str	r3, [sp, #4]
 800af78:	883b      	ldrh	r3, [r7, #0]
 800af7a:	9300      	str	r3, [sp, #0]
 800af7c:	460b      	mov	r3, r1
 800af7e:	6879      	ldr	r1, [r7, #4]
 800af80:	68f8      	ldr	r0, [r7, #12]
 800af82:	f7ff feb7 	bl	800acf4 <pbuf_init_alloced_pbuf>
  return p;
 800af86:	68fb      	ldr	r3, [r7, #12]
}
 800af88:	4618      	mov	r0, r3
 800af8a:	3710      	adds	r7, #16
 800af8c:	46bd      	mov	sp, r7
 800af8e:	bd80      	pop	{r7, pc}
 800af90:	0801541c 	.word	0x0801541c
 800af94:	08015520 	.word	0x08015520
 800af98:	0801547c 	.word	0x0801547c

0800af9c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800af9c:	b580      	push	{r7, lr}
 800af9e:	b088      	sub	sp, #32
 800afa0:	af02      	add	r7, sp, #8
 800afa2:	607b      	str	r3, [r7, #4]
 800afa4:	4603      	mov	r3, r0
 800afa6:	73fb      	strb	r3, [r7, #15]
 800afa8:	460b      	mov	r3, r1
 800afaa:	81bb      	strh	r3, [r7, #12]
 800afac:	4613      	mov	r3, r2
 800afae:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800afb0:	7bfb      	ldrb	r3, [r7, #15]
 800afb2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800afb4:	8a7b      	ldrh	r3, [r7, #18]
 800afb6:	3303      	adds	r3, #3
 800afb8:	f023 0203 	bic.w	r2, r3, #3
 800afbc:	89bb      	ldrh	r3, [r7, #12]
 800afbe:	441a      	add	r2, r3
 800afc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d901      	bls.n	800afca <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800afc6:	2300      	movs	r3, #0
 800afc8:	e018      	b.n	800affc <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800afca:	6a3b      	ldr	r3, [r7, #32]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d007      	beq.n	800afe0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800afd0:	8a7b      	ldrh	r3, [r7, #18]
 800afd2:	3303      	adds	r3, #3
 800afd4:	f023 0303 	bic.w	r3, r3, #3
 800afd8:	6a3a      	ldr	r2, [r7, #32]
 800afda:	4413      	add	r3, r2
 800afdc:	617b      	str	r3, [r7, #20]
 800afde:	e001      	b.n	800afe4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	89b9      	ldrh	r1, [r7, #12]
 800afe8:	89ba      	ldrh	r2, [r7, #12]
 800afea:	2302      	movs	r3, #2
 800afec:	9301      	str	r3, [sp, #4]
 800afee:	897b      	ldrh	r3, [r7, #10]
 800aff0:	9300      	str	r3, [sp, #0]
 800aff2:	460b      	mov	r3, r1
 800aff4:	6979      	ldr	r1, [r7, #20]
 800aff6:	f7ff fe7d 	bl	800acf4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800affa:	687b      	ldr	r3, [r7, #4]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	460b      	mov	r3, r1
 800b00e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	2b00      	cmp	r3, #0
 800b014:	d106      	bne.n	800b024 <pbuf_realloc+0x20>
 800b016:	4b3a      	ldr	r3, [pc, #232]	; (800b100 <pbuf_realloc+0xfc>)
 800b018:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b01c:	4939      	ldr	r1, [pc, #228]	; (800b104 <pbuf_realloc+0x100>)
 800b01e:	483a      	ldr	r0, [pc, #232]	; (800b108 <pbuf_realloc+0x104>)
 800b020:	f008 fef0 	bl	8013e04 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	891b      	ldrh	r3, [r3, #8]
 800b028:	887a      	ldrh	r2, [r7, #2]
 800b02a:	429a      	cmp	r2, r3
 800b02c:	d263      	bcs.n	800b0f6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	891a      	ldrh	r2, [r3, #8]
 800b032:	887b      	ldrh	r3, [r7, #2]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b038:	887b      	ldrh	r3, [r7, #2]
 800b03a:	817b      	strh	r3, [r7, #10]
  q = p;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b040:	e018      	b.n	800b074 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	895b      	ldrh	r3, [r3, #10]
 800b046:	897a      	ldrh	r2, [r7, #10]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	891a      	ldrh	r2, [r3, #8]
 800b050:	893b      	ldrh	r3, [r7, #8]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	b29a      	uxth	r2, r3
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d106      	bne.n	800b074 <pbuf_realloc+0x70>
 800b066:	4b26      	ldr	r3, [pc, #152]	; (800b100 <pbuf_realloc+0xfc>)
 800b068:	f240 12af 	movw	r2, #431	; 0x1af
 800b06c:	4927      	ldr	r1, [pc, #156]	; (800b10c <pbuf_realloc+0x108>)
 800b06e:	4826      	ldr	r0, [pc, #152]	; (800b108 <pbuf_realloc+0x104>)
 800b070:	f008 fec8 	bl	8013e04 <iprintf>
  while (rem_len > q->len) {
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	895b      	ldrh	r3, [r3, #10]
 800b078:	897a      	ldrh	r2, [r7, #10]
 800b07a:	429a      	cmp	r2, r3
 800b07c:	d8e1      	bhi.n	800b042 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	7b1b      	ldrb	r3, [r3, #12]
 800b082:	f003 030f 	and.w	r3, r3, #15
 800b086:	2b00      	cmp	r3, #0
 800b088:	d121      	bne.n	800b0ce <pbuf_realloc+0xca>
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	895b      	ldrh	r3, [r3, #10]
 800b08e:	897a      	ldrh	r2, [r7, #10]
 800b090:	429a      	cmp	r2, r3
 800b092:	d01c      	beq.n	800b0ce <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	7b5b      	ldrb	r3, [r3, #13]
 800b098:	f003 0302 	and.w	r3, r3, #2
 800b09c:	2b00      	cmp	r3, #0
 800b09e:	d116      	bne.n	800b0ce <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	685a      	ldr	r2, [r3, #4]
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	1ad3      	subs	r3, r2, r3
 800b0a8:	b29a      	uxth	r2, r3
 800b0aa:	897b      	ldrh	r3, [r7, #10]
 800b0ac:	4413      	add	r3, r2
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	68f8      	ldr	r0, [r7, #12]
 800b0b4:	f7ff f864 	bl	800a180 <mem_trim>
 800b0b8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d106      	bne.n	800b0ce <pbuf_realloc+0xca>
 800b0c0:	4b0f      	ldr	r3, [pc, #60]	; (800b100 <pbuf_realloc+0xfc>)
 800b0c2:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b0c6:	4912      	ldr	r1, [pc, #72]	; (800b110 <pbuf_realloc+0x10c>)
 800b0c8:	480f      	ldr	r0, [pc, #60]	; (800b108 <pbuf_realloc+0x104>)
 800b0ca:	f008 fe9b 	bl	8013e04 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	897a      	ldrh	r2, [r7, #10]
 800b0d2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	895a      	ldrh	r2, [r3, #10]
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d004      	beq.n	800b0ee <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	f000 f911 	bl	800b310 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	e000      	b.n	800b0f8 <pbuf_realloc+0xf4>
    return;
 800b0f6:	bf00      	nop

}
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	0801541c 	.word	0x0801541c
 800b104:	08015534 	.word	0x08015534
 800b108:	0801547c 	.word	0x0801547c
 800b10c:	0801554c 	.word	0x0801554c
 800b110:	08015564 	.word	0x08015564

0800b114 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b114:	b580      	push	{r7, lr}
 800b116:	b086      	sub	sp, #24
 800b118:	af00      	add	r7, sp, #0
 800b11a:	60f8      	str	r0, [r7, #12]
 800b11c:	60b9      	str	r1, [r7, #8]
 800b11e:	4613      	mov	r3, r2
 800b120:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d106      	bne.n	800b136 <pbuf_add_header_impl+0x22>
 800b128:	4b2b      	ldr	r3, [pc, #172]	; (800b1d8 <pbuf_add_header_impl+0xc4>)
 800b12a:	f240 12df 	movw	r2, #479	; 0x1df
 800b12e:	492b      	ldr	r1, [pc, #172]	; (800b1dc <pbuf_add_header_impl+0xc8>)
 800b130:	482b      	ldr	r0, [pc, #172]	; (800b1e0 <pbuf_add_header_impl+0xcc>)
 800b132:	f008 fe67 	bl	8013e04 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <pbuf_add_header_impl+0x30>
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b142:	d301      	bcc.n	800b148 <pbuf_add_header_impl+0x34>
    return 1;
 800b144:	2301      	movs	r3, #1
 800b146:	e043      	b.n	800b1d0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <pbuf_add_header_impl+0x3e>
    return 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	e03e      	b.n	800b1d0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b152:	68bb      	ldr	r3, [r7, #8]
 800b154:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	891a      	ldrh	r2, [r3, #8]
 800b15a:	8a7b      	ldrh	r3, [r7, #18]
 800b15c:	4413      	add	r3, r2
 800b15e:	b29b      	uxth	r3, r3
 800b160:	8a7a      	ldrh	r2, [r7, #18]
 800b162:	429a      	cmp	r2, r3
 800b164:	d901      	bls.n	800b16a <pbuf_add_header_impl+0x56>
    return 1;
 800b166:	2301      	movs	r3, #1
 800b168:	e032      	b.n	800b1d0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	7b1b      	ldrb	r3, [r3, #12]
 800b16e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b170:	8a3b      	ldrh	r3, [r7, #16]
 800b172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b176:	2b00      	cmp	r3, #0
 800b178:	d00c      	beq.n	800b194 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	685a      	ldr	r2, [r3, #4]
 800b17e:	68bb      	ldr	r3, [r7, #8]
 800b180:	425b      	negs	r3, r3
 800b182:	4413      	add	r3, r2
 800b184:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	3310      	adds	r3, #16
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d20d      	bcs.n	800b1ac <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b190:	2301      	movs	r3, #1
 800b192:	e01d      	b.n	800b1d0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b194:	79fb      	ldrb	r3, [r7, #7]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d006      	beq.n	800b1a8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	685a      	ldr	r2, [r3, #4]
 800b19e:	68bb      	ldr	r3, [r7, #8]
 800b1a0:	425b      	negs	r3, r3
 800b1a2:	4413      	add	r3, r2
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	e001      	b.n	800b1ac <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e011      	b.n	800b1d0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	697a      	ldr	r2, [r7, #20]
 800b1b0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	895a      	ldrh	r2, [r3, #10]
 800b1b6:	8a7b      	ldrh	r3, [r7, #18]
 800b1b8:	4413      	add	r3, r2
 800b1ba:	b29a      	uxth	r2, r3
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	891a      	ldrh	r2, [r3, #8]
 800b1c4:	8a7b      	ldrh	r3, [r7, #18]
 800b1c6:	4413      	add	r3, r2
 800b1c8:	b29a      	uxth	r2, r3
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	811a      	strh	r2, [r3, #8]


  return 0;
 800b1ce:	2300      	movs	r3, #0
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}
 800b1d8:	0801541c 	.word	0x0801541c
 800b1dc:	08015580 	.word	0x08015580
 800b1e0:	0801547c 	.word	0x0801547c

0800b1e4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b082      	sub	sp, #8
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	6078      	str	r0, [r7, #4]
 800b1ec:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	6839      	ldr	r1, [r7, #0]
 800b1f2:	6878      	ldr	r0, [r7, #4]
 800b1f4:	f7ff ff8e 	bl	800b114 <pbuf_add_header_impl>
 800b1f8:	4603      	mov	r3, r0
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3708      	adds	r7, #8
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
	...

0800b204 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b084      	sub	sp, #16
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
 800b20c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d106      	bne.n	800b222 <pbuf_remove_header+0x1e>
 800b214:	4b20      	ldr	r3, [pc, #128]	; (800b298 <pbuf_remove_header+0x94>)
 800b216:	f240 224b 	movw	r2, #587	; 0x24b
 800b21a:	4920      	ldr	r1, [pc, #128]	; (800b29c <pbuf_remove_header+0x98>)
 800b21c:	4820      	ldr	r0, [pc, #128]	; (800b2a0 <pbuf_remove_header+0x9c>)
 800b21e:	f008 fdf1 	bl	8013e04 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d003      	beq.n	800b230 <pbuf_remove_header+0x2c>
 800b228:	683b      	ldr	r3, [r7, #0]
 800b22a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22e:	d301      	bcc.n	800b234 <pbuf_remove_header+0x30>
    return 1;
 800b230:	2301      	movs	r3, #1
 800b232:	e02c      	b.n	800b28e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800b234:	683b      	ldr	r3, [r7, #0]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <pbuf_remove_header+0x3a>
    return 0;
 800b23a:	2300      	movs	r3, #0
 800b23c:	e027      	b.n	800b28e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800b23e:	683b      	ldr	r3, [r7, #0]
 800b240:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	895b      	ldrh	r3, [r3, #10]
 800b246:	89fa      	ldrh	r2, [r7, #14]
 800b248:	429a      	cmp	r2, r3
 800b24a:	d908      	bls.n	800b25e <pbuf_remove_header+0x5a>
 800b24c:	4b12      	ldr	r3, [pc, #72]	; (800b298 <pbuf_remove_header+0x94>)
 800b24e:	f240 2255 	movw	r2, #597	; 0x255
 800b252:	4914      	ldr	r1, [pc, #80]	; (800b2a4 <pbuf_remove_header+0xa0>)
 800b254:	4812      	ldr	r0, [pc, #72]	; (800b2a0 <pbuf_remove_header+0x9c>)
 800b256:	f008 fdd5 	bl	8013e04 <iprintf>
 800b25a:	2301      	movs	r3, #1
 800b25c:	e017      	b.n	800b28e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	685b      	ldr	r3, [r3, #4]
 800b262:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	685a      	ldr	r2, [r3, #4]
 800b268:	683b      	ldr	r3, [r7, #0]
 800b26a:	441a      	add	r2, r3
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	895a      	ldrh	r2, [r3, #10]
 800b274:	89fb      	ldrh	r3, [r7, #14]
 800b276:	1ad3      	subs	r3, r2, r3
 800b278:	b29a      	uxth	r2, r3
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	891a      	ldrh	r2, [r3, #8]
 800b282:	89fb      	ldrh	r3, [r7, #14]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800b28c:	2300      	movs	r3, #0
}
 800b28e:	4618      	mov	r0, r3
 800b290:	3710      	adds	r7, #16
 800b292:	46bd      	mov	sp, r7
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	0801541c 	.word	0x0801541c
 800b29c:	08015580 	.word	0x08015580
 800b2a0:	0801547c 	.word	0x0801547c
 800b2a4:	0801558c 	.word	0x0801558c

0800b2a8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800b2a8:	b580      	push	{r7, lr}
 800b2aa:	b082      	sub	sp, #8
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	6078      	str	r0, [r7, #4]
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	807b      	strh	r3, [r7, #2]
 800b2b4:	4613      	mov	r3, r2
 800b2b6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800b2b8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	da08      	bge.n	800b2d2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800b2c0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2c4:	425b      	negs	r3, r3
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f7ff ff9b 	bl	800b204 <pbuf_remove_header>
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	e007      	b.n	800b2e2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800b2d2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2d6:	787a      	ldrb	r2, [r7, #1]
 800b2d8:	4619      	mov	r1, r3
 800b2da:	6878      	ldr	r0, [r7, #4]
 800b2dc:	f7ff ff1a 	bl	800b114 <pbuf_add_header_impl>
 800b2e0:	4603      	mov	r3, r0
  }
}
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	3708      	adds	r7, #8
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}

0800b2ea <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800b2ea:	b580      	push	{r7, lr}
 800b2ec:	b082      	sub	sp, #8
 800b2ee:	af00      	add	r7, sp, #0
 800b2f0:	6078      	str	r0, [r7, #4]
 800b2f2:	460b      	mov	r3, r1
 800b2f4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800b2f6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	6878      	ldr	r0, [r7, #4]
 800b300:	f7ff ffd2 	bl	800b2a8 <pbuf_header_impl>
 800b304:	4603      	mov	r3, r0
}
 800b306:	4618      	mov	r0, r3
 800b308:	3708      	adds	r7, #8
 800b30a:	46bd      	mov	sp, r7
 800b30c:	bd80      	pop	{r7, pc}
	...

0800b310 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b086      	sub	sp, #24
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d10b      	bne.n	800b336 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2b00      	cmp	r3, #0
 800b322:	d106      	bne.n	800b332 <pbuf_free+0x22>
 800b324:	4b38      	ldr	r3, [pc, #224]	; (800b408 <pbuf_free+0xf8>)
 800b326:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800b32a:	4938      	ldr	r1, [pc, #224]	; (800b40c <pbuf_free+0xfc>)
 800b32c:	4838      	ldr	r0, [pc, #224]	; (800b410 <pbuf_free+0x100>)
 800b32e:	f008 fd69 	bl	8013e04 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800b332:	2300      	movs	r3, #0
 800b334:	e063      	b.n	800b3fe <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800b336:	2300      	movs	r3, #0
 800b338:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800b33a:	e05c      	b.n	800b3f6 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	7b9b      	ldrb	r3, [r3, #14]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d106      	bne.n	800b352 <pbuf_free+0x42>
 800b344:	4b30      	ldr	r3, [pc, #192]	; (800b408 <pbuf_free+0xf8>)
 800b346:	f240 22f1 	movw	r2, #753	; 0x2f1
 800b34a:	4932      	ldr	r1, [pc, #200]	; (800b414 <pbuf_free+0x104>)
 800b34c:	4830      	ldr	r0, [pc, #192]	; (800b410 <pbuf_free+0x100>)
 800b34e:	f008 fd59 	bl	8013e04 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	7b9b      	ldrb	r3, [r3, #14]
 800b356:	3b01      	subs	r3, #1
 800b358:	b2da      	uxtb	r2, r3
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	739a      	strb	r2, [r3, #14]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	7b9b      	ldrb	r3, [r3, #14]
 800b362:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800b364:	7dbb      	ldrb	r3, [r7, #22]
 800b366:	2b00      	cmp	r3, #0
 800b368:	d143      	bne.n	800b3f2 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	7b1b      	ldrb	r3, [r3, #12]
 800b374:	f003 030f 	and.w	r3, r3, #15
 800b378:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	7b5b      	ldrb	r3, [r3, #13]
 800b37e:	f003 0302 	and.w	r3, r3, #2
 800b382:	2b00      	cmp	r3, #0
 800b384:	d011      	beq.n	800b3aa <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	691b      	ldr	r3, [r3, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d106      	bne.n	800b3a0 <pbuf_free+0x90>
 800b392:	4b1d      	ldr	r3, [pc, #116]	; (800b408 <pbuf_free+0xf8>)
 800b394:	f240 22ff 	movw	r2, #767	; 0x2ff
 800b398:	491f      	ldr	r1, [pc, #124]	; (800b418 <pbuf_free+0x108>)
 800b39a:	481d      	ldr	r0, [pc, #116]	; (800b410 <pbuf_free+0x100>)
 800b39c:	f008 fd32 	bl	8013e04 <iprintf>
        pc->custom_free_function(p);
 800b3a0:	68bb      	ldr	r3, [r7, #8]
 800b3a2:	691b      	ldr	r3, [r3, #16]
 800b3a4:	6878      	ldr	r0, [r7, #4]
 800b3a6:	4798      	blx	r3
 800b3a8:	e01d      	b.n	800b3e6 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800b3aa:	7bfb      	ldrb	r3, [r7, #15]
 800b3ac:	2b02      	cmp	r3, #2
 800b3ae:	d104      	bne.n	800b3ba <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800b3b0:	6879      	ldr	r1, [r7, #4]
 800b3b2:	2008      	movs	r0, #8
 800b3b4:	f7ff f99a 	bl	800a6ec <memp_free>
 800b3b8:	e015      	b.n	800b3e6 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800b3ba:	7bfb      	ldrb	r3, [r7, #15]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d104      	bne.n	800b3ca <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800b3c0:	6879      	ldr	r1, [r7, #4]
 800b3c2:	2007      	movs	r0, #7
 800b3c4:	f7ff f992 	bl	800a6ec <memp_free>
 800b3c8:	e00d      	b.n	800b3e6 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800b3ca:	7bfb      	ldrb	r3, [r7, #15]
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d103      	bne.n	800b3d8 <pbuf_free+0xc8>
          mem_free(p);
 800b3d0:	6878      	ldr	r0, [r7, #4]
 800b3d2:	f7fe fe6b 	bl	800a0ac <mem_free>
 800b3d6:	e006      	b.n	800b3e6 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800b3d8:	4b0b      	ldr	r3, [pc, #44]	; (800b408 <pbuf_free+0xf8>)
 800b3da:	f240 320f 	movw	r2, #783	; 0x30f
 800b3de:	490f      	ldr	r1, [pc, #60]	; (800b41c <pbuf_free+0x10c>)
 800b3e0:	480b      	ldr	r0, [pc, #44]	; (800b410 <pbuf_free+0x100>)
 800b3e2:	f008 fd0f 	bl	8013e04 <iprintf>
        }
      }
      count++;
 800b3e6:	7dfb      	ldrb	r3, [r7, #23]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800b3ec:	693b      	ldr	r3, [r7, #16]
 800b3ee:	607b      	str	r3, [r7, #4]
 800b3f0:	e001      	b.n	800b3f6 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d19f      	bne.n	800b33c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800b3fc:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3718      	adds	r7, #24
 800b402:	46bd      	mov	sp, r7
 800b404:	bd80      	pop	{r7, pc}
 800b406:	bf00      	nop
 800b408:	0801541c 	.word	0x0801541c
 800b40c:	08015580 	.word	0x08015580
 800b410:	0801547c 	.word	0x0801547c
 800b414:	080155ac 	.word	0x080155ac
 800b418:	080155c4 	.word	0x080155c4
 800b41c:	080155e8 	.word	0x080155e8

0800b420 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800b428:	2300      	movs	r3, #0
 800b42a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800b42c:	e005      	b.n	800b43a <pbuf_clen+0x1a>
    ++len;
 800b42e:	89fb      	ldrh	r3, [r7, #14]
 800b430:	3301      	adds	r3, #1
 800b432:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	681b      	ldr	r3, [r3, #0]
 800b438:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d1f6      	bne.n	800b42e <pbuf_clen+0xe>
  }
  return len;
 800b440:	89fb      	ldrh	r3, [r7, #14]
}
 800b442:	4618      	mov	r0, r3
 800b444:	3714      	adds	r7, #20
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr
	...

0800b450 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b082      	sub	sp, #8
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d010      	beq.n	800b480 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	7b9b      	ldrb	r3, [r3, #14]
 800b462:	3301      	adds	r3, #1
 800b464:	b2da      	uxtb	r2, r3
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	7b9b      	ldrb	r3, [r3, #14]
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d106      	bne.n	800b480 <pbuf_ref+0x30>
 800b472:	4b05      	ldr	r3, [pc, #20]	; (800b488 <pbuf_ref+0x38>)
 800b474:	f240 3242 	movw	r2, #834	; 0x342
 800b478:	4904      	ldr	r1, [pc, #16]	; (800b48c <pbuf_ref+0x3c>)
 800b47a:	4805      	ldr	r0, [pc, #20]	; (800b490 <pbuf_ref+0x40>)
 800b47c:	f008 fcc2 	bl	8013e04 <iprintf>
  }
}
 800b480:	bf00      	nop
 800b482:	3708      	adds	r7, #8
 800b484:	46bd      	mov	sp, r7
 800b486:	bd80      	pop	{r7, pc}
 800b488:	0801541c 	.word	0x0801541c
 800b48c:	080155fc 	.word	0x080155fc
 800b490:	0801547c 	.word	0x0801547c

0800b494 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b084      	sub	sp, #16
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
 800b49c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d002      	beq.n	800b4aa <pbuf_cat+0x16>
 800b4a4:	683b      	ldr	r3, [r7, #0]
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d107      	bne.n	800b4ba <pbuf_cat+0x26>
 800b4aa:	4b20      	ldr	r3, [pc, #128]	; (800b52c <pbuf_cat+0x98>)
 800b4ac:	f240 3259 	movw	r2, #857	; 0x359
 800b4b0:	491f      	ldr	r1, [pc, #124]	; (800b530 <pbuf_cat+0x9c>)
 800b4b2:	4820      	ldr	r0, [pc, #128]	; (800b534 <pbuf_cat+0xa0>)
 800b4b4:	f008 fca6 	bl	8013e04 <iprintf>
 800b4b8:	e034      	b.n	800b524 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	60fb      	str	r3, [r7, #12]
 800b4be:	e00a      	b.n	800b4d6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	891a      	ldrh	r2, [r3, #8]
 800b4c4:	683b      	ldr	r3, [r7, #0]
 800b4c6:	891b      	ldrh	r3, [r3, #8]
 800b4c8:	4413      	add	r3, r2
 800b4ca:	b29a      	uxth	r2, r3
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d1f0      	bne.n	800b4c0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	891a      	ldrh	r2, [r3, #8]
 800b4e2:	68fb      	ldr	r3, [r7, #12]
 800b4e4:	895b      	ldrh	r3, [r3, #10]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d006      	beq.n	800b4f8 <pbuf_cat+0x64>
 800b4ea:	4b10      	ldr	r3, [pc, #64]	; (800b52c <pbuf_cat+0x98>)
 800b4ec:	f240 3262 	movw	r2, #866	; 0x362
 800b4f0:	4911      	ldr	r1, [pc, #68]	; (800b538 <pbuf_cat+0xa4>)
 800b4f2:	4810      	ldr	r0, [pc, #64]	; (800b534 <pbuf_cat+0xa0>)
 800b4f4:	f008 fc86 	bl	8013e04 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d006      	beq.n	800b50e <pbuf_cat+0x7a>
 800b500:	4b0a      	ldr	r3, [pc, #40]	; (800b52c <pbuf_cat+0x98>)
 800b502:	f240 3263 	movw	r2, #867	; 0x363
 800b506:	490d      	ldr	r1, [pc, #52]	; (800b53c <pbuf_cat+0xa8>)
 800b508:	480a      	ldr	r0, [pc, #40]	; (800b534 <pbuf_cat+0xa0>)
 800b50a:	f008 fc7b 	bl	8013e04 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	891a      	ldrh	r2, [r3, #8]
 800b512:	683b      	ldr	r3, [r7, #0]
 800b514:	891b      	ldrh	r3, [r3, #8]
 800b516:	4413      	add	r3, r2
 800b518:	b29a      	uxth	r2, r3
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800b524:	3710      	adds	r7, #16
 800b526:	46bd      	mov	sp, r7
 800b528:	bd80      	pop	{r7, pc}
 800b52a:	bf00      	nop
 800b52c:	0801541c 	.word	0x0801541c
 800b530:	08015610 	.word	0x08015610
 800b534:	0801547c 	.word	0x0801547c
 800b538:	08015648 	.word	0x08015648
 800b53c:	08015678 	.word	0x08015678

0800b540 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b082      	sub	sp, #8
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
 800b548:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800b54a:	6839      	ldr	r1, [r7, #0]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ffa1 	bl	800b494 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800b552:	6838      	ldr	r0, [r7, #0]
 800b554:	f7ff ff7c 	bl	800b450 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800b558:	bf00      	nop
 800b55a:	3708      	adds	r7, #8
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}

0800b560 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b086      	sub	sp, #24
 800b564:	af00      	add	r7, sp, #0
 800b566:	6078      	str	r0, [r7, #4]
 800b568:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800b56a:	2300      	movs	r3, #0
 800b56c:	617b      	str	r3, [r7, #20]
 800b56e:	2300      	movs	r3, #0
 800b570:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	2b00      	cmp	r3, #0
 800b576:	d008      	beq.n	800b58a <pbuf_copy+0x2a>
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d005      	beq.n	800b58a <pbuf_copy+0x2a>
 800b57e:	687b      	ldr	r3, [r7, #4]
 800b580:	891a      	ldrh	r2, [r3, #8]
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	891b      	ldrh	r3, [r3, #8]
 800b586:	429a      	cmp	r2, r3
 800b588:	d209      	bcs.n	800b59e <pbuf_copy+0x3e>
 800b58a:	4b57      	ldr	r3, [pc, #348]	; (800b6e8 <pbuf_copy+0x188>)
 800b58c:	f240 32c9 	movw	r2, #969	; 0x3c9
 800b590:	4956      	ldr	r1, [pc, #344]	; (800b6ec <pbuf_copy+0x18c>)
 800b592:	4857      	ldr	r0, [pc, #348]	; (800b6f0 <pbuf_copy+0x190>)
 800b594:	f008 fc36 	bl	8013e04 <iprintf>
 800b598:	f06f 030f 	mvn.w	r3, #15
 800b59c:	e09f      	b.n	800b6de <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	895b      	ldrh	r3, [r3, #10]
 800b5a2:	461a      	mov	r2, r3
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	1ad2      	subs	r2, r2, r3
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	895b      	ldrh	r3, [r3, #10]
 800b5ac:	4619      	mov	r1, r3
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	1acb      	subs	r3, r1, r3
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d306      	bcc.n	800b5c4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800b5b6:	683b      	ldr	r3, [r7, #0]
 800b5b8:	895b      	ldrh	r3, [r3, #10]
 800b5ba:	461a      	mov	r2, r3
 800b5bc:	693b      	ldr	r3, [r7, #16]
 800b5be:	1ad3      	subs	r3, r2, r3
 800b5c0:	60fb      	str	r3, [r7, #12]
 800b5c2:	e005      	b.n	800b5d0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	895b      	ldrh	r3, [r3, #10]
 800b5c8:	461a      	mov	r2, r3
 800b5ca:	697b      	ldr	r3, [r7, #20]
 800b5cc:	1ad3      	subs	r3, r2, r3
 800b5ce:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685a      	ldr	r2, [r3, #4]
 800b5d4:	697b      	ldr	r3, [r7, #20]
 800b5d6:	18d0      	adds	r0, r2, r3
 800b5d8:	683b      	ldr	r3, [r7, #0]
 800b5da:	685a      	ldr	r2, [r3, #4]
 800b5dc:	693b      	ldr	r3, [r7, #16]
 800b5de:	4413      	add	r3, r2
 800b5e0:	68fa      	ldr	r2, [r7, #12]
 800b5e2:	4619      	mov	r1, r3
 800b5e4:	f008 fbf8 	bl	8013dd8 <memcpy>
    offset_to += len;
 800b5e8:	697a      	ldr	r2, [r7, #20]
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800b5f0:	693a      	ldr	r2, [r7, #16]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	895b      	ldrh	r3, [r3, #10]
 800b5fc:	461a      	mov	r2, r3
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	4293      	cmp	r3, r2
 800b602:	d906      	bls.n	800b612 <pbuf_copy+0xb2>
 800b604:	4b38      	ldr	r3, [pc, #224]	; (800b6e8 <pbuf_copy+0x188>)
 800b606:	f240 32d9 	movw	r2, #985	; 0x3d9
 800b60a:	493a      	ldr	r1, [pc, #232]	; (800b6f4 <pbuf_copy+0x194>)
 800b60c:	4838      	ldr	r0, [pc, #224]	; (800b6f0 <pbuf_copy+0x190>)
 800b60e:	f008 fbf9 	bl	8013e04 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	895b      	ldrh	r3, [r3, #10]
 800b616:	461a      	mov	r2, r3
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d906      	bls.n	800b62c <pbuf_copy+0xcc>
 800b61e:	4b32      	ldr	r3, [pc, #200]	; (800b6e8 <pbuf_copy+0x188>)
 800b620:	f240 32da 	movw	r2, #986	; 0x3da
 800b624:	4934      	ldr	r1, [pc, #208]	; (800b6f8 <pbuf_copy+0x198>)
 800b626:	4832      	ldr	r0, [pc, #200]	; (800b6f0 <pbuf_copy+0x190>)
 800b628:	f008 fbec 	bl	8013e04 <iprintf>
    if (offset_from >= p_from->len) {
 800b62c:	683b      	ldr	r3, [r7, #0]
 800b62e:	895b      	ldrh	r3, [r3, #10]
 800b630:	461a      	mov	r2, r3
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	4293      	cmp	r3, r2
 800b636:	d304      	bcc.n	800b642 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	895b      	ldrh	r3, [r3, #10]
 800b646:	461a      	mov	r2, r3
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	4293      	cmp	r3, r2
 800b64c:	d114      	bne.n	800b678 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d10c      	bne.n	800b678 <pbuf_copy+0x118>
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	2b00      	cmp	r3, #0
 800b662:	d009      	beq.n	800b678 <pbuf_copy+0x118>
 800b664:	4b20      	ldr	r3, [pc, #128]	; (800b6e8 <pbuf_copy+0x188>)
 800b666:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800b66a:	4924      	ldr	r1, [pc, #144]	; (800b6fc <pbuf_copy+0x19c>)
 800b66c:	4820      	ldr	r0, [pc, #128]	; (800b6f0 <pbuf_copy+0x190>)
 800b66e:	f008 fbc9 	bl	8013e04 <iprintf>
 800b672:	f06f 030f 	mvn.w	r3, #15
 800b676:	e032      	b.n	800b6de <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d013      	beq.n	800b6a6 <pbuf_copy+0x146>
 800b67e:	683b      	ldr	r3, [r7, #0]
 800b680:	895a      	ldrh	r2, [r3, #10]
 800b682:	683b      	ldr	r3, [r7, #0]
 800b684:	891b      	ldrh	r3, [r3, #8]
 800b686:	429a      	cmp	r2, r3
 800b688:	d10d      	bne.n	800b6a6 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d009      	beq.n	800b6a6 <pbuf_copy+0x146>
 800b692:	4b15      	ldr	r3, [pc, #84]	; (800b6e8 <pbuf_copy+0x188>)
 800b694:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800b698:	4919      	ldr	r1, [pc, #100]	; (800b700 <pbuf_copy+0x1a0>)
 800b69a:	4815      	ldr	r0, [pc, #84]	; (800b6f0 <pbuf_copy+0x190>)
 800b69c:	f008 fbb2 	bl	8013e04 <iprintf>
 800b6a0:	f06f 0305 	mvn.w	r3, #5
 800b6a4:	e01b      	b.n	800b6de <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	2b00      	cmp	r3, #0
 800b6aa:	d013      	beq.n	800b6d4 <pbuf_copy+0x174>
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	895a      	ldrh	r2, [r3, #10]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	891b      	ldrh	r3, [r3, #8]
 800b6b4:	429a      	cmp	r2, r3
 800b6b6:	d10d      	bne.n	800b6d4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d009      	beq.n	800b6d4 <pbuf_copy+0x174>
 800b6c0:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <pbuf_copy+0x188>)
 800b6c2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800b6c6:	490e      	ldr	r1, [pc, #56]	; (800b700 <pbuf_copy+0x1a0>)
 800b6c8:	4809      	ldr	r0, [pc, #36]	; (800b6f0 <pbuf_copy+0x190>)
 800b6ca:	f008 fb9b 	bl	8013e04 <iprintf>
 800b6ce:	f06f 0305 	mvn.w	r3, #5
 800b6d2:	e004      	b.n	800b6de <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	2b00      	cmp	r3, #0
 800b6d8:	f47f af61 	bne.w	800b59e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800b6dc:	2300      	movs	r3, #0
}
 800b6de:	4618      	mov	r0, r3
 800b6e0:	3718      	adds	r7, #24
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	0801541c 	.word	0x0801541c
 800b6ec:	080156c4 	.word	0x080156c4
 800b6f0:	0801547c 	.word	0x0801547c
 800b6f4:	080156f4 	.word	0x080156f4
 800b6f8:	0801570c 	.word	0x0801570c
 800b6fc:	08015728 	.word	0x08015728
 800b700:	08015738 	.word	0x08015738

0800b704 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af00      	add	r7, sp, #0
 800b70a:	60f8      	str	r0, [r7, #12]
 800b70c:	60b9      	str	r1, [r7, #8]
 800b70e:	4611      	mov	r1, r2
 800b710:	461a      	mov	r2, r3
 800b712:	460b      	mov	r3, r1
 800b714:	80fb      	strh	r3, [r7, #6]
 800b716:	4613      	mov	r3, r2
 800b718:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800b71a:	2300      	movs	r3, #0
 800b71c:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800b71e:	2300      	movs	r3, #0
 800b720:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	2b00      	cmp	r3, #0
 800b726:	d108      	bne.n	800b73a <pbuf_copy_partial+0x36>
 800b728:	4b2b      	ldr	r3, [pc, #172]	; (800b7d8 <pbuf_copy_partial+0xd4>)
 800b72a:	f240 420a 	movw	r2, #1034	; 0x40a
 800b72e:	492b      	ldr	r1, [pc, #172]	; (800b7dc <pbuf_copy_partial+0xd8>)
 800b730:	482b      	ldr	r0, [pc, #172]	; (800b7e0 <pbuf_copy_partial+0xdc>)
 800b732:	f008 fb67 	bl	8013e04 <iprintf>
 800b736:	2300      	movs	r3, #0
 800b738:	e04a      	b.n	800b7d0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d108      	bne.n	800b752 <pbuf_copy_partial+0x4e>
 800b740:	4b25      	ldr	r3, [pc, #148]	; (800b7d8 <pbuf_copy_partial+0xd4>)
 800b742:	f240 420b 	movw	r2, #1035	; 0x40b
 800b746:	4927      	ldr	r1, [pc, #156]	; (800b7e4 <pbuf_copy_partial+0xe0>)
 800b748:	4825      	ldr	r0, [pc, #148]	; (800b7e0 <pbuf_copy_partial+0xdc>)
 800b74a:	f008 fb5b 	bl	8013e04 <iprintf>
 800b74e:	2300      	movs	r3, #0
 800b750:	e03e      	b.n	800b7d0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	61fb      	str	r3, [r7, #28]
 800b756:	e034      	b.n	800b7c2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800b758:	88bb      	ldrh	r3, [r7, #4]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d00a      	beq.n	800b774 <pbuf_copy_partial+0x70>
 800b75e:	69fb      	ldr	r3, [r7, #28]
 800b760:	895b      	ldrh	r3, [r3, #10]
 800b762:	88ba      	ldrh	r2, [r7, #4]
 800b764:	429a      	cmp	r2, r3
 800b766:	d305      	bcc.n	800b774 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800b768:	69fb      	ldr	r3, [r7, #28]
 800b76a:	895b      	ldrh	r3, [r3, #10]
 800b76c:	88ba      	ldrh	r2, [r7, #4]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	80bb      	strh	r3, [r7, #4]
 800b772:	e023      	b.n	800b7bc <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800b774:	69fb      	ldr	r3, [r7, #28]
 800b776:	895a      	ldrh	r2, [r3, #10]
 800b778:	88bb      	ldrh	r3, [r7, #4]
 800b77a:	1ad3      	subs	r3, r2, r3
 800b77c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800b77e:	8b3a      	ldrh	r2, [r7, #24]
 800b780:	88fb      	ldrh	r3, [r7, #6]
 800b782:	429a      	cmp	r2, r3
 800b784:	d901      	bls.n	800b78a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800b786:	88fb      	ldrh	r3, [r7, #6]
 800b788:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800b78a:	8b7b      	ldrh	r3, [r7, #26]
 800b78c:	68ba      	ldr	r2, [r7, #8]
 800b78e:	18d0      	adds	r0, r2, r3
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	685a      	ldr	r2, [r3, #4]
 800b794:	88bb      	ldrh	r3, [r7, #4]
 800b796:	4413      	add	r3, r2
 800b798:	8b3a      	ldrh	r2, [r7, #24]
 800b79a:	4619      	mov	r1, r3
 800b79c:	f008 fb1c 	bl	8013dd8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800b7a0:	8afa      	ldrh	r2, [r7, #22]
 800b7a2:	8b3b      	ldrh	r3, [r7, #24]
 800b7a4:	4413      	add	r3, r2
 800b7a6:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800b7a8:	8b7a      	ldrh	r2, [r7, #26]
 800b7aa:	8b3b      	ldrh	r3, [r7, #24]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800b7b0:	88fa      	ldrh	r2, [r7, #6]
 800b7b2:	8b3b      	ldrh	r3, [r7, #24]
 800b7b4:	1ad3      	subs	r3, r2, r3
 800b7b6:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	61fb      	str	r3, [r7, #28]
 800b7c2:	88fb      	ldrh	r3, [r7, #6]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d002      	beq.n	800b7ce <pbuf_copy_partial+0xca>
 800b7c8:	69fb      	ldr	r3, [r7, #28]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d1c4      	bne.n	800b758 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800b7ce:	8afb      	ldrh	r3, [r7, #22]
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3720      	adds	r7, #32
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	0801541c 	.word	0x0801541c
 800b7dc:	08015764 	.word	0x08015764
 800b7e0:	0801547c 	.word	0x0801547c
 800b7e4:	08015784 	.word	0x08015784

0800b7e8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800b7e8:	b580      	push	{r7, lr}
 800b7ea:	b084      	sub	sp, #16
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	603a      	str	r2, [r7, #0]
 800b7f2:	71fb      	strb	r3, [r7, #7]
 800b7f4:	460b      	mov	r3, r1
 800b7f6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	8919      	ldrh	r1, [r3, #8]
 800b7fc:	88ba      	ldrh	r2, [r7, #4]
 800b7fe:	79fb      	ldrb	r3, [r7, #7]
 800b800:	4618      	mov	r0, r3
 800b802:	f7ff faa1 	bl	800ad48 <pbuf_alloc>
 800b806:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d101      	bne.n	800b812 <pbuf_clone+0x2a>
    return NULL;
 800b80e:	2300      	movs	r3, #0
 800b810:	e011      	b.n	800b836 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800b812:	6839      	ldr	r1, [r7, #0]
 800b814:	68f8      	ldr	r0, [r7, #12]
 800b816:	f7ff fea3 	bl	800b560 <pbuf_copy>
 800b81a:	4603      	mov	r3, r0
 800b81c:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800b81e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d006      	beq.n	800b834 <pbuf_clone+0x4c>
 800b826:	4b06      	ldr	r3, [pc, #24]	; (800b840 <pbuf_clone+0x58>)
 800b828:	f240 5224 	movw	r2, #1316	; 0x524
 800b82c:	4905      	ldr	r1, [pc, #20]	; (800b844 <pbuf_clone+0x5c>)
 800b82e:	4806      	ldr	r0, [pc, #24]	; (800b848 <pbuf_clone+0x60>)
 800b830:	f008 fae8 	bl	8013e04 <iprintf>
  return q;
 800b834:	68fb      	ldr	r3, [r7, #12]
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	0801541c 	.word	0x0801541c
 800b844:	08015890 	.word	0x08015890
 800b848:	0801547c 	.word	0x0801547c

0800b84c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800b850:	f008 faf0 	bl	8013e34 <rand>
 800b854:	4603      	mov	r3, r0
 800b856:	b29b      	uxth	r3, r3
 800b858:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800b85c:	b29b      	uxth	r3, r3
 800b85e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800b862:	b29a      	uxth	r2, r3
 800b864:	4b01      	ldr	r3, [pc, #4]	; (800b86c <tcp_init+0x20>)
 800b866:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800b868:	bf00      	nop
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	2000000a 	.word	0x2000000a

0800b870 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	7d1b      	ldrb	r3, [r3, #20]
 800b87c:	2b01      	cmp	r3, #1
 800b87e:	d105      	bne.n	800b88c <tcp_free+0x1c>
 800b880:	4b06      	ldr	r3, [pc, #24]	; (800b89c <tcp_free+0x2c>)
 800b882:	22d4      	movs	r2, #212	; 0xd4
 800b884:	4906      	ldr	r1, [pc, #24]	; (800b8a0 <tcp_free+0x30>)
 800b886:	4807      	ldr	r0, [pc, #28]	; (800b8a4 <tcp_free+0x34>)
 800b888:	f008 fabc 	bl	8013e04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800b88c:	6879      	ldr	r1, [r7, #4]
 800b88e:	2001      	movs	r0, #1
 800b890:	f7fe ff2c 	bl	800a6ec <memp_free>
}
 800b894:	bf00      	nop
 800b896:	3708      	adds	r7, #8
 800b898:	46bd      	mov	sp, r7
 800b89a:	bd80      	pop	{r7, pc}
 800b89c:	0801591c 	.word	0x0801591c
 800b8a0:	0801594c 	.word	0x0801594c
 800b8a4:	08015960 	.word	0x08015960

0800b8a8 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	7d1b      	ldrb	r3, [r3, #20]
 800b8b4:	2b01      	cmp	r3, #1
 800b8b6:	d105      	bne.n	800b8c4 <tcp_free_listen+0x1c>
 800b8b8:	4b06      	ldr	r3, [pc, #24]	; (800b8d4 <tcp_free_listen+0x2c>)
 800b8ba:	22df      	movs	r2, #223	; 0xdf
 800b8bc:	4906      	ldr	r1, [pc, #24]	; (800b8d8 <tcp_free_listen+0x30>)
 800b8be:	4807      	ldr	r0, [pc, #28]	; (800b8dc <tcp_free_listen+0x34>)
 800b8c0:	f008 faa0 	bl	8013e04 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800b8c4:	6879      	ldr	r1, [r7, #4]
 800b8c6:	2002      	movs	r0, #2
 800b8c8:	f7fe ff10 	bl	800a6ec <memp_free>
}
 800b8cc:	bf00      	nop
 800b8ce:	3708      	adds	r7, #8
 800b8d0:	46bd      	mov	sp, r7
 800b8d2:	bd80      	pop	{r7, pc}
 800b8d4:	0801591c 	.word	0x0801591c
 800b8d8:	08015988 	.word	0x08015988
 800b8dc:	08015960 	.word	0x08015960

0800b8e0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800b8e4:	f000 fea2 	bl	800c62c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800b8e8:	4b07      	ldr	r3, [pc, #28]	; (800b908 <tcp_tmr+0x28>)
 800b8ea:	781b      	ldrb	r3, [r3, #0]
 800b8ec:	3301      	adds	r3, #1
 800b8ee:	b2da      	uxtb	r2, r3
 800b8f0:	4b05      	ldr	r3, [pc, #20]	; (800b908 <tcp_tmr+0x28>)
 800b8f2:	701a      	strb	r2, [r3, #0]
 800b8f4:	4b04      	ldr	r3, [pc, #16]	; (800b908 <tcp_tmr+0x28>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	f003 0301 	and.w	r3, r3, #1
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d001      	beq.n	800b904 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800b900:	f000 fb54 	bl	800bfac <tcp_slowtmr>
  }
}
 800b904:	bf00      	nop
 800b906:	bd80      	pop	{r7, pc}
 800b908:	200000dd 	.word	0x200000dd

0800b90c <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b084      	sub	sp, #16
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
 800b914:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800b916:	683b      	ldr	r3, [r7, #0]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d105      	bne.n	800b928 <tcp_remove_listener+0x1c>
 800b91c:	4b0d      	ldr	r3, [pc, #52]	; (800b954 <tcp_remove_listener+0x48>)
 800b91e:	22ff      	movs	r2, #255	; 0xff
 800b920:	490d      	ldr	r1, [pc, #52]	; (800b958 <tcp_remove_listener+0x4c>)
 800b922:	480e      	ldr	r0, [pc, #56]	; (800b95c <tcp_remove_listener+0x50>)
 800b924:	f008 fa6e 	bl	8013e04 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	60fb      	str	r3, [r7, #12]
 800b92c:	e00a      	b.n	800b944 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	429a      	cmp	r2, r3
 800b936:	d102      	bne.n	800b93e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	2200      	movs	r2, #0
 800b93c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	68db      	ldr	r3, [r3, #12]
 800b942:	60fb      	str	r3, [r7, #12]
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d1f1      	bne.n	800b92e <tcp_remove_listener+0x22>
    }
  }
}
 800b94a:	bf00      	nop
 800b94c:	bf00      	nop
 800b94e:	3710      	adds	r7, #16
 800b950:	46bd      	mov	sp, r7
 800b952:	bd80      	pop	{r7, pc}
 800b954:	0801591c 	.word	0x0801591c
 800b958:	080159a4 	.word	0x080159a4
 800b95c:	08015960 	.word	0x08015960

0800b960 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b084      	sub	sp, #16
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d106      	bne.n	800b97c <tcp_listen_closed+0x1c>
 800b96e:	4b14      	ldr	r3, [pc, #80]	; (800b9c0 <tcp_listen_closed+0x60>)
 800b970:	f240 1211 	movw	r2, #273	; 0x111
 800b974:	4913      	ldr	r1, [pc, #76]	; (800b9c4 <tcp_listen_closed+0x64>)
 800b976:	4814      	ldr	r0, [pc, #80]	; (800b9c8 <tcp_listen_closed+0x68>)
 800b978:	f008 fa44 	bl	8013e04 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	7d1b      	ldrb	r3, [r3, #20]
 800b980:	2b01      	cmp	r3, #1
 800b982:	d006      	beq.n	800b992 <tcp_listen_closed+0x32>
 800b984:	4b0e      	ldr	r3, [pc, #56]	; (800b9c0 <tcp_listen_closed+0x60>)
 800b986:	f44f 7289 	mov.w	r2, #274	; 0x112
 800b98a:	4910      	ldr	r1, [pc, #64]	; (800b9cc <tcp_listen_closed+0x6c>)
 800b98c:	480e      	ldr	r0, [pc, #56]	; (800b9c8 <tcp_listen_closed+0x68>)
 800b98e:	f008 fa39 	bl	8013e04 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b992:	2301      	movs	r3, #1
 800b994:	60fb      	str	r3, [r7, #12]
 800b996:	e00b      	b.n	800b9b0 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800b998:	4a0d      	ldr	r2, [pc, #52]	; (800b9d0 <tcp_listen_closed+0x70>)
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	6879      	ldr	r1, [r7, #4]
 800b9a4:	4618      	mov	r0, r3
 800b9a6:	f7ff ffb1 	bl	800b90c <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	3301      	adds	r3, #1
 800b9ae:	60fb      	str	r3, [r7, #12]
 800b9b0:	68fb      	ldr	r3, [r7, #12]
 800b9b2:	2b03      	cmp	r3, #3
 800b9b4:	d9f0      	bls.n	800b998 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800b9b6:	bf00      	nop
 800b9b8:	bf00      	nop
 800b9ba:	3710      	adds	r7, #16
 800b9bc:	46bd      	mov	sp, r7
 800b9be:	bd80      	pop	{r7, pc}
 800b9c0:	0801591c 	.word	0x0801591c
 800b9c4:	080159cc 	.word	0x080159cc
 800b9c8:	08015960 	.word	0x08015960
 800b9cc:	080159d8 	.word	0x080159d8
 800b9d0:	0801790c 	.word	0x0801790c

0800b9d4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800b9d4:	b5b0      	push	{r4, r5, r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af04      	add	r7, sp, #16
 800b9da:	6078      	str	r0, [r7, #4]
 800b9dc:	460b      	mov	r3, r1
 800b9de:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d106      	bne.n	800b9f4 <tcp_close_shutdown+0x20>
 800b9e6:	4b63      	ldr	r3, [pc, #396]	; (800bb74 <tcp_close_shutdown+0x1a0>)
 800b9e8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b9ec:	4962      	ldr	r1, [pc, #392]	; (800bb78 <tcp_close_shutdown+0x1a4>)
 800b9ee:	4863      	ldr	r0, [pc, #396]	; (800bb7c <tcp_close_shutdown+0x1a8>)
 800b9f0:	f008 fa08 	bl	8013e04 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800b9f4:	78fb      	ldrb	r3, [r7, #3]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d066      	beq.n	800bac8 <tcp_close_shutdown+0xf4>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	7d1b      	ldrb	r3, [r3, #20]
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d003      	beq.n	800ba0a <tcp_close_shutdown+0x36>
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	7d1b      	ldrb	r3, [r3, #20]
 800ba06:	2b07      	cmp	r3, #7
 800ba08:	d15e      	bne.n	800bac8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d104      	bne.n	800ba1c <tcp_close_shutdown+0x48>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ba16:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800ba1a:	d055      	beq.n	800bac8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	8b5b      	ldrh	r3, [r3, #26]
 800ba20:	f003 0310 	and.w	r3, r3, #16
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d106      	bne.n	800ba36 <tcp_close_shutdown+0x62>
 800ba28:	4b52      	ldr	r3, [pc, #328]	; (800bb74 <tcp_close_shutdown+0x1a0>)
 800ba2a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800ba2e:	4954      	ldr	r1, [pc, #336]	; (800bb80 <tcp_close_shutdown+0x1ac>)
 800ba30:	4852      	ldr	r0, [pc, #328]	; (800bb7c <tcp_close_shutdown+0x1a8>)
 800ba32:	f008 f9e7 	bl	8013e04 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ba3e:	687d      	ldr	r5, [r7, #4]
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	3304      	adds	r3, #4
 800ba44:	687a      	ldr	r2, [r7, #4]
 800ba46:	8ad2      	ldrh	r2, [r2, #22]
 800ba48:	6879      	ldr	r1, [r7, #4]
 800ba4a:	8b09      	ldrh	r1, [r1, #24]
 800ba4c:	9102      	str	r1, [sp, #8]
 800ba4e:	9201      	str	r2, [sp, #4]
 800ba50:	9300      	str	r3, [sp, #0]
 800ba52:	462b      	mov	r3, r5
 800ba54:	4622      	mov	r2, r4
 800ba56:	4601      	mov	r1, r0
 800ba58:	6878      	ldr	r0, [r7, #4]
 800ba5a:	f004 fe8d 	bl	8010778 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 f8c6 	bl	800cbf0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800ba64:	4b47      	ldr	r3, [pc, #284]	; (800bb84 <tcp_close_shutdown+0x1b0>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	687a      	ldr	r2, [r7, #4]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d105      	bne.n	800ba7a <tcp_close_shutdown+0xa6>
 800ba6e:	4b45      	ldr	r3, [pc, #276]	; (800bb84 <tcp_close_shutdown+0x1b0>)
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	68db      	ldr	r3, [r3, #12]
 800ba74:	4a43      	ldr	r2, [pc, #268]	; (800bb84 <tcp_close_shutdown+0x1b0>)
 800ba76:	6013      	str	r3, [r2, #0]
 800ba78:	e013      	b.n	800baa2 <tcp_close_shutdown+0xce>
 800ba7a:	4b42      	ldr	r3, [pc, #264]	; (800bb84 <tcp_close_shutdown+0x1b0>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	60fb      	str	r3, [r7, #12]
 800ba80:	e00c      	b.n	800ba9c <tcp_close_shutdown+0xc8>
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	68db      	ldr	r3, [r3, #12]
 800ba86:	687a      	ldr	r2, [r7, #4]
 800ba88:	429a      	cmp	r2, r3
 800ba8a:	d104      	bne.n	800ba96 <tcp_close_shutdown+0xc2>
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	68da      	ldr	r2, [r3, #12]
 800ba90:	68fb      	ldr	r3, [r7, #12]
 800ba92:	60da      	str	r2, [r3, #12]
 800ba94:	e005      	b.n	800baa2 <tcp_close_shutdown+0xce>
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	68db      	ldr	r3, [r3, #12]
 800ba9a:	60fb      	str	r3, [r7, #12]
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d1ef      	bne.n	800ba82 <tcp_close_shutdown+0xae>
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	2200      	movs	r2, #0
 800baa6:	60da      	str	r2, [r3, #12]
 800baa8:	4b37      	ldr	r3, [pc, #220]	; (800bb88 <tcp_close_shutdown+0x1b4>)
 800baaa:	2201      	movs	r2, #1
 800baac:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800baae:	4b37      	ldr	r3, [pc, #220]	; (800bb8c <tcp_close_shutdown+0x1b8>)
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	687a      	ldr	r2, [r7, #4]
 800bab4:	429a      	cmp	r2, r3
 800bab6:	d102      	bne.n	800babe <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800bab8:	f003 fd5a 	bl	800f570 <tcp_trigger_input_pcb_close>
 800babc:	e002      	b.n	800bac4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800babe:	6878      	ldr	r0, [r7, #4]
 800bac0:	f7ff fed6 	bl	800b870 <tcp_free>
      }
      return ERR_OK;
 800bac4:	2300      	movs	r3, #0
 800bac6:	e050      	b.n	800bb6a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	7d1b      	ldrb	r3, [r3, #20]
 800bacc:	2b02      	cmp	r3, #2
 800bace:	d03b      	beq.n	800bb48 <tcp_close_shutdown+0x174>
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	dc44      	bgt.n	800bb5e <tcp_close_shutdown+0x18a>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d002      	beq.n	800bade <tcp_close_shutdown+0x10a>
 800bad8:	2b01      	cmp	r3, #1
 800bada:	d02a      	beq.n	800bb32 <tcp_close_shutdown+0x15e>
 800badc:	e03f      	b.n	800bb5e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	8adb      	ldrh	r3, [r3, #22]
 800bae2:	2b00      	cmp	r3, #0
 800bae4:	d021      	beq.n	800bb2a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bae6:	4b2a      	ldr	r3, [pc, #168]	; (800bb90 <tcp_close_shutdown+0x1bc>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	429a      	cmp	r2, r3
 800baee:	d105      	bne.n	800bafc <tcp_close_shutdown+0x128>
 800baf0:	4b27      	ldr	r3, [pc, #156]	; (800bb90 <tcp_close_shutdown+0x1bc>)
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	4a26      	ldr	r2, [pc, #152]	; (800bb90 <tcp_close_shutdown+0x1bc>)
 800baf8:	6013      	str	r3, [r2, #0]
 800bafa:	e013      	b.n	800bb24 <tcp_close_shutdown+0x150>
 800bafc:	4b24      	ldr	r3, [pc, #144]	; (800bb90 <tcp_close_shutdown+0x1bc>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	60bb      	str	r3, [r7, #8]
 800bb02:	e00c      	b.n	800bb1e <tcp_close_shutdown+0x14a>
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	687a      	ldr	r2, [r7, #4]
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	d104      	bne.n	800bb18 <tcp_close_shutdown+0x144>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	68da      	ldr	r2, [r3, #12]
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	60da      	str	r2, [r3, #12]
 800bb16:	e005      	b.n	800bb24 <tcp_close_shutdown+0x150>
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	68db      	ldr	r3, [r3, #12]
 800bb1c:	60bb      	str	r3, [r7, #8]
 800bb1e:	68bb      	ldr	r3, [r7, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d1ef      	bne.n	800bb04 <tcp_close_shutdown+0x130>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	2200      	movs	r2, #0
 800bb28:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff fea0 	bl	800b870 <tcp_free>
      break;
 800bb30:	e01a      	b.n	800bb68 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f7ff ff14 	bl	800b960 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800bb38:	6879      	ldr	r1, [r7, #4]
 800bb3a:	4816      	ldr	r0, [pc, #88]	; (800bb94 <tcp_close_shutdown+0x1c0>)
 800bb3c:	f001 f8a8 	bl	800cc90 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f7ff feb1 	bl	800b8a8 <tcp_free_listen>
      break;
 800bb46:	e00f      	b.n	800bb68 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bb48:	6879      	ldr	r1, [r7, #4]
 800bb4a:	480e      	ldr	r0, [pc, #56]	; (800bb84 <tcp_close_shutdown+0x1b0>)
 800bb4c:	f001 f8a0 	bl	800cc90 <tcp_pcb_remove>
 800bb50:	4b0d      	ldr	r3, [pc, #52]	; (800bb88 <tcp_close_shutdown+0x1b4>)
 800bb52:	2201      	movs	r2, #1
 800bb54:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f7ff fe8a 	bl	800b870 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800bb5c:	e004      	b.n	800bb68 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f81a 	bl	800bb98 <tcp_close_shutdown_fin>
 800bb64:	4603      	mov	r3, r0
 800bb66:	e000      	b.n	800bb6a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800bb68:	2300      	movs	r3, #0
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3710      	adds	r7, #16
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	bdb0      	pop	{r4, r5, r7, pc}
 800bb72:	bf00      	nop
 800bb74:	0801591c 	.word	0x0801591c
 800bb78:	080159f0 	.word	0x080159f0
 800bb7c:	08015960 	.word	0x08015960
 800bb80:	08015a10 	.word	0x08015a10
 800bb84:	20007200 	.word	0x20007200
 800bb88:	200071fc 	.word	0x200071fc
 800bb8c:	20007214 	.word	0x20007214
 800bb90:	2000720c 	.word	0x2000720c
 800bb94:	20007208 	.word	0x20007208

0800bb98 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	b084      	sub	sp, #16
 800bb9c:	af00      	add	r7, sp, #0
 800bb9e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d106      	bne.n	800bbb4 <tcp_close_shutdown_fin+0x1c>
 800bba6:	4b2e      	ldr	r3, [pc, #184]	; (800bc60 <tcp_close_shutdown_fin+0xc8>)
 800bba8:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800bbac:	492d      	ldr	r1, [pc, #180]	; (800bc64 <tcp_close_shutdown_fin+0xcc>)
 800bbae:	482e      	ldr	r0, [pc, #184]	; (800bc68 <tcp_close_shutdown_fin+0xd0>)
 800bbb0:	f008 f928 	bl	8013e04 <iprintf>

  switch (pcb->state) {
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	7d1b      	ldrb	r3, [r3, #20]
 800bbb8:	2b07      	cmp	r3, #7
 800bbba:	d020      	beq.n	800bbfe <tcp_close_shutdown_fin+0x66>
 800bbbc:	2b07      	cmp	r3, #7
 800bbbe:	dc2b      	bgt.n	800bc18 <tcp_close_shutdown_fin+0x80>
 800bbc0:	2b03      	cmp	r3, #3
 800bbc2:	d002      	beq.n	800bbca <tcp_close_shutdown_fin+0x32>
 800bbc4:	2b04      	cmp	r3, #4
 800bbc6:	d00d      	beq.n	800bbe4 <tcp_close_shutdown_fin+0x4c>
 800bbc8:	e026      	b.n	800bc18 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f003 fee2 	bl	800f994 <tcp_send_fin>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bbd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d11f      	bne.n	800bc1c <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	2205      	movs	r2, #5
 800bbe0:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bbe2:	e01b      	b.n	800bc1c <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800bbe4:	6878      	ldr	r0, [r7, #4]
 800bbe6:	f003 fed5 	bl	800f994 <tcp_send_fin>
 800bbea:	4603      	mov	r3, r0
 800bbec:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bbee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d114      	bne.n	800bc20 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2205      	movs	r2, #5
 800bbfa:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bbfc:	e010      	b.n	800bc20 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800bbfe:	6878      	ldr	r0, [r7, #4]
 800bc00:	f003 fec8 	bl	800f994 <tcp_send_fin>
 800bc04:	4603      	mov	r3, r0
 800bc06:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800bc08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d109      	bne.n	800bc24 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	2209      	movs	r2, #9
 800bc14:	751a      	strb	r2, [r3, #20]
      }
      break;
 800bc16:	e005      	b.n	800bc24 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e01c      	b.n	800bc56 <tcp_close_shutdown_fin+0xbe>
      break;
 800bc1c:	bf00      	nop
 800bc1e:	e002      	b.n	800bc26 <tcp_close_shutdown_fin+0x8e>
      break;
 800bc20:	bf00      	nop
 800bc22:	e000      	b.n	800bc26 <tcp_close_shutdown_fin+0x8e>
      break;
 800bc24:	bf00      	nop
  }

  if (err == ERR_OK) {
 800bc26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d103      	bne.n	800bc36 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800bc2e:	6878      	ldr	r0, [r7, #4]
 800bc30:	f003 ffee 	bl	800fc10 <tcp_output>
 800bc34:	e00d      	b.n	800bc52 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800bc36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800bc3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc3e:	d108      	bne.n	800bc52 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	8b5b      	ldrh	r3, [r3, #26]
 800bc44:	f043 0308 	orr.w	r3, r3, #8
 800bc48:	b29a      	uxth	r2, r3
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800bc4e:	2300      	movs	r3, #0
 800bc50:	e001      	b.n	800bc56 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800bc52:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800bc56:	4618      	mov	r0, r3
 800bc58:	3710      	adds	r7, #16
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	bd80      	pop	{r7, pc}
 800bc5e:	bf00      	nop
 800bc60:	0801591c 	.word	0x0801591c
 800bc64:	080159cc 	.word	0x080159cc
 800bc68:	08015960 	.word	0x08015960

0800bc6c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b082      	sub	sp, #8
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d109      	bne.n	800bc8e <tcp_close+0x22>
 800bc7a:	4b0f      	ldr	r3, [pc, #60]	; (800bcb8 <tcp_close+0x4c>)
 800bc7c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800bc80:	490e      	ldr	r1, [pc, #56]	; (800bcbc <tcp_close+0x50>)
 800bc82:	480f      	ldr	r0, [pc, #60]	; (800bcc0 <tcp_close+0x54>)
 800bc84:	f008 f8be 	bl	8013e04 <iprintf>
 800bc88:	f06f 030f 	mvn.w	r3, #15
 800bc8c:	e00f      	b.n	800bcae <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	7d1b      	ldrb	r3, [r3, #20]
 800bc92:	2b01      	cmp	r3, #1
 800bc94:	d006      	beq.n	800bca4 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	8b5b      	ldrh	r3, [r3, #26]
 800bc9a:	f043 0310 	orr.w	r3, r3, #16
 800bc9e:	b29a      	uxth	r2, r3
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800bca4:	2101      	movs	r1, #1
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f7ff fe94 	bl	800b9d4 <tcp_close_shutdown>
 800bcac:	4603      	mov	r3, r0
}
 800bcae:	4618      	mov	r0, r3
 800bcb0:	3708      	adds	r7, #8
 800bcb2:	46bd      	mov	sp, r7
 800bcb4:	bd80      	pop	{r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0801591c 	.word	0x0801591c
 800bcbc:	08015a2c 	.word	0x08015a2c
 800bcc0:	08015960 	.word	0x08015960

0800bcc4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08e      	sub	sp, #56	; 0x38
 800bcc8:	af04      	add	r7, sp, #16
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d107      	bne.n	800bce4 <tcp_abandon+0x20>
 800bcd4:	4b52      	ldr	r3, [pc, #328]	; (800be20 <tcp_abandon+0x15c>)
 800bcd6:	f240 223d 	movw	r2, #573	; 0x23d
 800bcda:	4952      	ldr	r1, [pc, #328]	; (800be24 <tcp_abandon+0x160>)
 800bcdc:	4852      	ldr	r0, [pc, #328]	; (800be28 <tcp_abandon+0x164>)
 800bcde:	f008 f891 	bl	8013e04 <iprintf>
 800bce2:	e099      	b.n	800be18 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	7d1b      	ldrb	r3, [r3, #20]
 800bce8:	2b01      	cmp	r3, #1
 800bcea:	d106      	bne.n	800bcfa <tcp_abandon+0x36>
 800bcec:	4b4c      	ldr	r3, [pc, #304]	; (800be20 <tcp_abandon+0x15c>)
 800bcee:	f44f 7210 	mov.w	r2, #576	; 0x240
 800bcf2:	494e      	ldr	r1, [pc, #312]	; (800be2c <tcp_abandon+0x168>)
 800bcf4:	484c      	ldr	r0, [pc, #304]	; (800be28 <tcp_abandon+0x164>)
 800bcf6:	f008 f885 	bl	8013e04 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	7d1b      	ldrb	r3, [r3, #20]
 800bcfe:	2b0a      	cmp	r3, #10
 800bd00:	d107      	bne.n	800bd12 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800bd02:	6879      	ldr	r1, [r7, #4]
 800bd04:	484a      	ldr	r0, [pc, #296]	; (800be30 <tcp_abandon+0x16c>)
 800bd06:	f000 ffc3 	bl	800cc90 <tcp_pcb_remove>
    tcp_free(pcb);
 800bd0a:	6878      	ldr	r0, [r7, #4]
 800bd0c:	f7ff fdb0 	bl	800b870 <tcp_free>
 800bd10:	e082      	b.n	800be18 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800bd12:	2300      	movs	r3, #0
 800bd14:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800bd16:	2300      	movs	r3, #0
 800bd18:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd1e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd24:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd2c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	691b      	ldr	r3, [r3, #16]
 800bd32:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	7d1b      	ldrb	r3, [r3, #20]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d126      	bne.n	800bd8a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	8adb      	ldrh	r3, [r3, #22]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d02e      	beq.n	800bda2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800bd44:	4b3b      	ldr	r3, [pc, #236]	; (800be34 <tcp_abandon+0x170>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	687a      	ldr	r2, [r7, #4]
 800bd4a:	429a      	cmp	r2, r3
 800bd4c:	d105      	bne.n	800bd5a <tcp_abandon+0x96>
 800bd4e:	4b39      	ldr	r3, [pc, #228]	; (800be34 <tcp_abandon+0x170>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4a37      	ldr	r2, [pc, #220]	; (800be34 <tcp_abandon+0x170>)
 800bd56:	6013      	str	r3, [r2, #0]
 800bd58:	e013      	b.n	800bd82 <tcp_abandon+0xbe>
 800bd5a:	4b36      	ldr	r3, [pc, #216]	; (800be34 <tcp_abandon+0x170>)
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	61fb      	str	r3, [r7, #28]
 800bd60:	e00c      	b.n	800bd7c <tcp_abandon+0xb8>
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	68db      	ldr	r3, [r3, #12]
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	429a      	cmp	r2, r3
 800bd6a:	d104      	bne.n	800bd76 <tcp_abandon+0xb2>
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	68da      	ldr	r2, [r3, #12]
 800bd70:	69fb      	ldr	r3, [r7, #28]
 800bd72:	60da      	str	r2, [r3, #12]
 800bd74:	e005      	b.n	800bd82 <tcp_abandon+0xbe>
 800bd76:	69fb      	ldr	r3, [r7, #28]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	61fb      	str	r3, [r7, #28]
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1ef      	bne.n	800bd62 <tcp_abandon+0x9e>
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	2200      	movs	r2, #0
 800bd86:	60da      	str	r2, [r3, #12]
 800bd88:	e00b      	b.n	800bda2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	8adb      	ldrh	r3, [r3, #22]
 800bd92:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800bd94:	6879      	ldr	r1, [r7, #4]
 800bd96:	4828      	ldr	r0, [pc, #160]	; (800be38 <tcp_abandon+0x174>)
 800bd98:	f000 ff7a 	bl	800cc90 <tcp_pcb_remove>
 800bd9c:	4b27      	ldr	r3, [pc, #156]	; (800be3c <tcp_abandon+0x178>)
 800bd9e:	2201      	movs	r2, #1
 800bda0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d004      	beq.n	800bdb4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdae:	4618      	mov	r0, r3
 800bdb0:	f000 fd1c 	bl	800c7ec <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d004      	beq.n	800bdc6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bdc0:	4618      	mov	r0, r3
 800bdc2:	f000 fd13 	bl	800c7ec <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d004      	beq.n	800bdd8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	f000 fd0a 	bl	800c7ec <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800bdd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d00e      	beq.n	800bdfc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800bdde:	6879      	ldr	r1, [r7, #4]
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	3304      	adds	r3, #4
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	8b12      	ldrh	r2, [r2, #24]
 800bde8:	9202      	str	r2, [sp, #8]
 800bdea:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800bdec:	9201      	str	r2, [sp, #4]
 800bdee:	9300      	str	r3, [sp, #0]
 800bdf0:	460b      	mov	r3, r1
 800bdf2:	697a      	ldr	r2, [r7, #20]
 800bdf4:	69b9      	ldr	r1, [r7, #24]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f004 fcbe 	bl	8010778 <tcp_rst>
    }
    last_state = pcb->state;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	7d1b      	ldrb	r3, [r3, #20]
 800be00:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f7ff fd34 	bl	800b870 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800be08:	693b      	ldr	r3, [r7, #16]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d004      	beq.n	800be18 <tcp_abandon+0x154>
 800be0e:	693b      	ldr	r3, [r7, #16]
 800be10:	f06f 010c 	mvn.w	r1, #12
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	4798      	blx	r3
  }
}
 800be18:	3728      	adds	r7, #40	; 0x28
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	bf00      	nop
 800be20:	0801591c 	.word	0x0801591c
 800be24:	08015a60 	.word	0x08015a60
 800be28:	08015960 	.word	0x08015960
 800be2c:	08015a7c 	.word	0x08015a7c
 800be30:	20007210 	.word	0x20007210
 800be34:	2000720c 	.word	0x2000720c
 800be38:	20007200 	.word	0x20007200
 800be3c:	200071fc 	.word	0x200071fc

0800be40 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800be40:	b580      	push	{r7, lr}
 800be42:	b082      	sub	sp, #8
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800be48:	2101      	movs	r1, #1
 800be4a:	6878      	ldr	r0, [r7, #4]
 800be4c:	f7ff ff3a 	bl	800bcc4 <tcp_abandon>
}
 800be50:	bf00      	nop
 800be52:	3708      	adds	r7, #8
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}

0800be58 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800be58:	b580      	push	{r7, lr}
 800be5a:	b084      	sub	sp, #16
 800be5c:	af00      	add	r7, sp, #0
 800be5e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d106      	bne.n	800be74 <tcp_update_rcv_ann_wnd+0x1c>
 800be66:	4b25      	ldr	r3, [pc, #148]	; (800befc <tcp_update_rcv_ann_wnd+0xa4>)
 800be68:	f240 32a6 	movw	r2, #934	; 0x3a6
 800be6c:	4924      	ldr	r1, [pc, #144]	; (800bf00 <tcp_update_rcv_ann_wnd+0xa8>)
 800be6e:	4825      	ldr	r0, [pc, #148]	; (800bf04 <tcp_update_rcv_ann_wnd+0xac>)
 800be70:	f007 ffc8 	bl	8013e04 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800be7c:	4413      	add	r3, r2
 800be7e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800be88:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800be8c:	bf28      	it	cs
 800be8e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800be92:	b292      	uxth	r2, r2
 800be94:	4413      	add	r3, r2
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	db08      	blt.n	800beb0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beaa:	68fa      	ldr	r2, [r7, #12]
 800beac:	1ad3      	subs	r3, r2, r3
 800beae:	e020      	b.n	800bef2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800beb8:	1ad3      	subs	r3, r2, r3
 800beba:	2b00      	cmp	r3, #0
 800bebc:	dd03      	ble.n	800bec6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2200      	movs	r2, #0
 800bec2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800bec4:	e014      	b.n	800bef0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bece:	1ad3      	subs	r3, r2, r3
 800bed0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800bed2:	68bb      	ldr	r3, [r7, #8]
 800bed4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bed8:	d306      	bcc.n	800bee8 <tcp_update_rcv_ann_wnd+0x90>
 800beda:	4b08      	ldr	r3, [pc, #32]	; (800befc <tcp_update_rcv_ann_wnd+0xa4>)
 800bedc:	f240 32b6 	movw	r2, #950	; 0x3b6
 800bee0:	4909      	ldr	r1, [pc, #36]	; (800bf08 <tcp_update_rcv_ann_wnd+0xb0>)
 800bee2:	4808      	ldr	r0, [pc, #32]	; (800bf04 <tcp_update_rcv_ann_wnd+0xac>)
 800bee4:	f007 ff8e 	bl	8013e04 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	b29a      	uxth	r2, r3
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800bef0:	2300      	movs	r3, #0
  }
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3710      	adds	r7, #16
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}
 800befa:	bf00      	nop
 800befc:	0801591c 	.word	0x0801591c
 800bf00:	08015b78 	.word	0x08015b78
 800bf04:	08015960 	.word	0x08015960
 800bf08:	08015b9c 	.word	0x08015b9c

0800bf0c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800bf0c:	b580      	push	{r7, lr}
 800bf0e:	b084      	sub	sp, #16
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	460b      	mov	r3, r1
 800bf16:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	d107      	bne.n	800bf2e <tcp_recved+0x22>
 800bf1e:	4b1f      	ldr	r3, [pc, #124]	; (800bf9c <tcp_recved+0x90>)
 800bf20:	f240 32cf 	movw	r2, #975	; 0x3cf
 800bf24:	491e      	ldr	r1, [pc, #120]	; (800bfa0 <tcp_recved+0x94>)
 800bf26:	481f      	ldr	r0, [pc, #124]	; (800bfa4 <tcp_recved+0x98>)
 800bf28:	f007 ff6c 	bl	8013e04 <iprintf>
 800bf2c:	e032      	b.n	800bf94 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	7d1b      	ldrb	r3, [r3, #20]
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d106      	bne.n	800bf44 <tcp_recved+0x38>
 800bf36:	4b19      	ldr	r3, [pc, #100]	; (800bf9c <tcp_recved+0x90>)
 800bf38:	f240 32d2 	movw	r2, #978	; 0x3d2
 800bf3c:	491a      	ldr	r1, [pc, #104]	; (800bfa8 <tcp_recved+0x9c>)
 800bf3e:	4819      	ldr	r0, [pc, #100]	; (800bfa4 <tcp_recved+0x98>)
 800bf40:	f007 ff60 	bl	8013e04 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800bf48:	887b      	ldrh	r3, [r7, #2]
 800bf4a:	4413      	add	r3, r2
 800bf4c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800bf4e:	89fb      	ldrh	r3, [r7, #14]
 800bf50:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800bf54:	d804      	bhi.n	800bf60 <tcp_recved+0x54>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800bf5a:	89fa      	ldrh	r2, [r7, #14]
 800bf5c:	429a      	cmp	r2, r3
 800bf5e:	d204      	bcs.n	800bf6a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800bf66:	851a      	strh	r2, [r3, #40]	; 0x28
 800bf68:	e002      	b.n	800bf70 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	89fa      	ldrh	r2, [r7, #14]
 800bf6e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f7ff ff71 	bl	800be58 <tcp_update_rcv_ann_wnd>
 800bf76:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800bf78:	68bb      	ldr	r3, [r7, #8]
 800bf7a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800bf7e:	d309      	bcc.n	800bf94 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	8b5b      	ldrh	r3, [r3, #26]
 800bf84:	f043 0302 	orr.w	r3, r3, #2
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f003 fe3e 	bl	800fc10 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800bf94:	3710      	adds	r7, #16
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bd80      	pop	{r7, pc}
 800bf9a:	bf00      	nop
 800bf9c:	0801591c 	.word	0x0801591c
 800bfa0:	08015bb8 	.word	0x08015bb8
 800bfa4:	08015960 	.word	0x08015960
 800bfa8:	08015bd0 	.word	0x08015bd0

0800bfac <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800bfac:	b5b0      	push	{r4, r5, r7, lr}
 800bfae:	b090      	sub	sp, #64	; 0x40
 800bfb0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800bfb2:	2300      	movs	r3, #0
 800bfb4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800bfb8:	4b94      	ldr	r3, [pc, #592]	; (800c20c <tcp_slowtmr+0x260>)
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	4a93      	ldr	r2, [pc, #588]	; (800c20c <tcp_slowtmr+0x260>)
 800bfc0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800bfc2:	4b93      	ldr	r3, [pc, #588]	; (800c210 <tcp_slowtmr+0x264>)
 800bfc4:	781b      	ldrb	r3, [r3, #0]
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	b2da      	uxtb	r2, r3
 800bfca:	4b91      	ldr	r3, [pc, #580]	; (800c210 <tcp_slowtmr+0x264>)
 800bfcc:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800bfd2:	4b90      	ldr	r3, [pc, #576]	; (800c214 <tcp_slowtmr+0x268>)
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800bfd8:	e29f      	b.n	800c51a <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfdc:	7d1b      	ldrb	r3, [r3, #20]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d106      	bne.n	800bff0 <tcp_slowtmr+0x44>
 800bfe2:	4b8d      	ldr	r3, [pc, #564]	; (800c218 <tcp_slowtmr+0x26c>)
 800bfe4:	f240 42be 	movw	r2, #1214	; 0x4be
 800bfe8:	498c      	ldr	r1, [pc, #560]	; (800c21c <tcp_slowtmr+0x270>)
 800bfea:	488d      	ldr	r0, [pc, #564]	; (800c220 <tcp_slowtmr+0x274>)
 800bfec:	f007 ff0a 	bl	8013e04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800bff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bff2:	7d1b      	ldrb	r3, [r3, #20]
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d106      	bne.n	800c006 <tcp_slowtmr+0x5a>
 800bff8:	4b87      	ldr	r3, [pc, #540]	; (800c218 <tcp_slowtmr+0x26c>)
 800bffa:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800bffe:	4989      	ldr	r1, [pc, #548]	; (800c224 <tcp_slowtmr+0x278>)
 800c000:	4887      	ldr	r0, [pc, #540]	; (800c220 <tcp_slowtmr+0x274>)
 800c002:	f007 feff 	bl	8013e04 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c008:	7d1b      	ldrb	r3, [r3, #20]
 800c00a:	2b0a      	cmp	r3, #10
 800c00c:	d106      	bne.n	800c01c <tcp_slowtmr+0x70>
 800c00e:	4b82      	ldr	r3, [pc, #520]	; (800c218 <tcp_slowtmr+0x26c>)
 800c010:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c014:	4984      	ldr	r1, [pc, #528]	; (800c228 <tcp_slowtmr+0x27c>)
 800c016:	4882      	ldr	r0, [pc, #520]	; (800c220 <tcp_slowtmr+0x274>)
 800c018:	f007 fef4 	bl	8013e04 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c01c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c01e:	7f9a      	ldrb	r2, [r3, #30]
 800c020:	4b7b      	ldr	r3, [pc, #492]	; (800c210 <tcp_slowtmr+0x264>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d105      	bne.n	800c034 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c02c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02e:	68db      	ldr	r3, [r3, #12]
 800c030:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c032:	e272      	b.n	800c51a <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c034:	4b76      	ldr	r3, [pc, #472]	; (800c210 <tcp_slowtmr+0x264>)
 800c036:	781a      	ldrb	r2, [r3, #0]
 800c038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c03a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c03c:	2300      	movs	r3, #0
 800c03e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c042:	2300      	movs	r3, #0
 800c044:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c04a:	7d1b      	ldrb	r3, [r3, #20]
 800c04c:	2b02      	cmp	r3, #2
 800c04e:	d10a      	bne.n	800c066 <tcp_slowtmr+0xba>
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c056:	2b05      	cmp	r3, #5
 800c058:	d905      	bls.n	800c066 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c05a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c05e:	3301      	adds	r3, #1
 800c060:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c064:	e11e      	b.n	800c2a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c068:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c06c:	2b0b      	cmp	r3, #11
 800c06e:	d905      	bls.n	800c07c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c070:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c074:	3301      	adds	r3, #1
 800c076:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c07a:	e113      	b.n	800c2a4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c07e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c082:	2b00      	cmp	r3, #0
 800c084:	d075      	beq.n	800c172 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d006      	beq.n	800c09c <tcp_slowtmr+0xf0>
 800c08e:	4b62      	ldr	r3, [pc, #392]	; (800c218 <tcp_slowtmr+0x26c>)
 800c090:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c094:	4965      	ldr	r1, [pc, #404]	; (800c22c <tcp_slowtmr+0x280>)
 800c096:	4862      	ldr	r0, [pc, #392]	; (800c220 <tcp_slowtmr+0x274>)
 800c098:	f007 feb4 	bl	8013e04 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c09c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d106      	bne.n	800c0b2 <tcp_slowtmr+0x106>
 800c0a4:	4b5c      	ldr	r3, [pc, #368]	; (800c218 <tcp_slowtmr+0x26c>)
 800c0a6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c0aa:	4961      	ldr	r1, [pc, #388]	; (800c230 <tcp_slowtmr+0x284>)
 800c0ac:	485c      	ldr	r0, [pc, #368]	; (800c220 <tcp_slowtmr+0x274>)
 800c0ae:	f007 fea9 	bl	8013e04 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c0b8:	2b0b      	cmp	r3, #11
 800c0ba:	d905      	bls.n	800c0c8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c0bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c0c0:	3301      	adds	r3, #1
 800c0c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c0c6:	e0ed      	b.n	800c2a4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c0c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c0ce:	3b01      	subs	r3, #1
 800c0d0:	4a58      	ldr	r2, [pc, #352]	; (800c234 <tcp_slowtmr+0x288>)
 800c0d2:	5cd3      	ldrb	r3, [r2, r3]
 800c0d4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c0d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c0dc:	7c7a      	ldrb	r2, [r7, #17]
 800c0de:	429a      	cmp	r2, r3
 800c0e0:	d907      	bls.n	800c0f2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c0e8:	3301      	adds	r3, #1
 800c0ea:	b2da      	uxtb	r2, r3
 800c0ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0ee:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c0f8:	7c7a      	ldrb	r2, [r7, #17]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	f200 80d2 	bhi.w	800c2a4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c100:	2301      	movs	r3, #1
 800c102:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c106:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d108      	bne.n	800c120 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c10e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c110:	f004 fc26 	bl	8010960 <tcp_zero_window_probe>
 800c114:	4603      	mov	r3, r0
 800c116:	2b00      	cmp	r3, #0
 800c118:	d014      	beq.n	800c144 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c11a:	2300      	movs	r3, #0
 800c11c:	623b      	str	r3, [r7, #32]
 800c11e:	e011      	b.n	800c144 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c126:	4619      	mov	r1, r3
 800c128:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c12a:	f003 faeb 	bl	800f704 <tcp_split_unsent_seg>
 800c12e:	4603      	mov	r3, r0
 800c130:	2b00      	cmp	r3, #0
 800c132:	d107      	bne.n	800c144 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c134:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c136:	f003 fd6b 	bl	800fc10 <tcp_output>
 800c13a:	4603      	mov	r3, r0
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d101      	bne.n	800c144 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c140:	2300      	movs	r3, #0
 800c142:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c144:	6a3b      	ldr	r3, [r7, #32]
 800c146:	2b00      	cmp	r3, #0
 800c148:	f000 80ac 	beq.w	800c2a4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c14c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c14e:	2200      	movs	r2, #0
 800c150:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c156:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c15a:	2b06      	cmp	r3, #6
 800c15c:	f200 80a2 	bhi.w	800c2a4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c162:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c166:	3301      	adds	r3, #1
 800c168:	b2da      	uxtb	r2, r3
 800c16a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c16c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c170:	e098      	b.n	800c2a4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c174:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c178:	2b00      	cmp	r3, #0
 800c17a:	db0f      	blt.n	800c19c <tcp_slowtmr+0x1f0>
 800c17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c17e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c182:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c186:	4293      	cmp	r3, r2
 800c188:	d008      	beq.n	800c19c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c190:	b29b      	uxth	r3, r3
 800c192:	3301      	adds	r3, #1
 800c194:	b29b      	uxth	r3, r3
 800c196:	b21a      	sxth	r2, r3
 800c198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c19c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	db7b      	blt.n	800c2a4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c1ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c1ae:	f004 f821 	bl	80101f4 <tcp_rexmit_rto_prepare>
 800c1b2:	4603      	mov	r3, r0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d007      	beq.n	800c1c8 <tcp_slowtmr+0x21c>
 800c1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d171      	bne.n	800c2a4 <tcp_slowtmr+0x2f8>
 800c1c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d06d      	beq.n	800c2a4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	7d1b      	ldrb	r3, [r3, #20]
 800c1cc:	2b02      	cmp	r3, #2
 800c1ce:	d03a      	beq.n	800c246 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c1d6:	2b0c      	cmp	r3, #12
 800c1d8:	bf28      	it	cs
 800c1da:	230c      	movcs	r3, #12
 800c1dc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800c1de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800c1e4:	10db      	asrs	r3, r3, #3
 800c1e6:	b21b      	sxth	r3, r3
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ec:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800c1f0:	4413      	add	r3, r2
 800c1f2:	7efa      	ldrb	r2, [r7, #27]
 800c1f4:	4910      	ldr	r1, [pc, #64]	; (800c238 <tcp_slowtmr+0x28c>)
 800c1f6:	5c8a      	ldrb	r2, [r1, r2]
 800c1f8:	4093      	lsls	r3, r2
 800c1fa:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800c1fc:	697b      	ldr	r3, [r7, #20]
 800c1fe:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800c202:	4293      	cmp	r3, r2
 800c204:	dc1a      	bgt.n	800c23c <tcp_slowtmr+0x290>
 800c206:	697b      	ldr	r3, [r7, #20]
 800c208:	b21a      	sxth	r2, r3
 800c20a:	e019      	b.n	800c240 <tcp_slowtmr+0x294>
 800c20c:	20007204 	.word	0x20007204
 800c210:	200000de 	.word	0x200000de
 800c214:	20007200 	.word	0x20007200
 800c218:	0801591c 	.word	0x0801591c
 800c21c:	08015c60 	.word	0x08015c60
 800c220:	08015960 	.word	0x08015960
 800c224:	08015c8c 	.word	0x08015c8c
 800c228:	08015cb8 	.word	0x08015cb8
 800c22c:	08015ce8 	.word	0x08015ce8
 800c230:	08015d1c 	.word	0x08015d1c
 800c234:	08017904 	.word	0x08017904
 800c238:	080178f4 	.word	0x080178f4
 800c23c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c240:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c242:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800c246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c248:	2200      	movs	r2, #0
 800c24a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800c24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800c252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c254:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800c258:	4293      	cmp	r3, r2
 800c25a:	bf28      	it	cs
 800c25c:	4613      	movcs	r3, r2
 800c25e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800c260:	8a7b      	ldrh	r3, [r7, #18]
 800c262:	085b      	lsrs	r3, r3, #1
 800c264:	b29a      	uxth	r2, r3
 800c266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c268:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800c26c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800c272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c276:	005b      	lsls	r3, r3, #1
 800c278:	b29b      	uxth	r3, r3
 800c27a:	429a      	cmp	r2, r3
 800c27c:	d206      	bcs.n	800c28c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800c27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c280:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800c282:	005b      	lsls	r3, r3, #1
 800c284:	b29a      	uxth	r2, r3
 800c286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c288:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800c28c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800c290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800c296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c298:	2200      	movs	r2, #0
 800c29a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800c29e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c2a0:	f004 f818 	bl	80102d4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800c2a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a6:	7d1b      	ldrb	r3, [r3, #20]
 800c2a8:	2b06      	cmp	r3, #6
 800c2aa:	d111      	bne.n	800c2d0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	8b5b      	ldrh	r3, [r3, #26]
 800c2b0:	f003 0310 	and.w	r3, r3, #16
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2b8:	4b9d      	ldr	r3, [pc, #628]	; (800c530 <tcp_slowtmr+0x584>)
 800c2ba:	681a      	ldr	r2, [r3, #0]
 800c2bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	1ad3      	subs	r3, r2, r3
 800c2c2:	2b28      	cmp	r3, #40	; 0x28
 800c2c4:	d904      	bls.n	800c2d0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800c2c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c2ca:	3301      	adds	r3, #1
 800c2cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2d2:	7a5b      	ldrb	r3, [r3, #9]
 800c2d4:	f003 0308 	and.w	r3, r3, #8
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d04c      	beq.n	800c376 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800c2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2de:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800c2e0:	2b04      	cmp	r3, #4
 800c2e2:	d003      	beq.n	800c2ec <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800c2e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800c2e8:	2b07      	cmp	r3, #7
 800c2ea:	d144      	bne.n	800c376 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c2ec:	4b90      	ldr	r3, [pc, #576]	; (800c530 <tcp_slowtmr+0x584>)
 800c2ee:	681a      	ldr	r2, [r3, #0]
 800c2f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f2:	6a1b      	ldr	r3, [r3, #32]
 800c2f4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800c2f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c2fc:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800c300:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800c304:	498b      	ldr	r1, [pc, #556]	; (800c534 <tcp_slowtmr+0x588>)
 800c306:	fba1 1303 	umull	r1, r3, r1, r3
 800c30a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c30c:	429a      	cmp	r2, r3
 800c30e:	d90a      	bls.n	800c326 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800c310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c314:	3301      	adds	r3, #1
 800c316:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800c31a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c31e:	3301      	adds	r3, #1
 800c320:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800c324:	e027      	b.n	800c376 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c326:	4b82      	ldr	r3, [pc, #520]	; (800c530 <tcp_slowtmr+0x584>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	6a1b      	ldr	r3, [r3, #32]
 800c32e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800c330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c332:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800c336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c338:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c33c:	4618      	mov	r0, r3
 800c33e:	4b7e      	ldr	r3, [pc, #504]	; (800c538 <tcp_slowtmr+0x58c>)
 800c340:	fb03 f300 	mul.w	r3, r3, r0
 800c344:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800c346:	497b      	ldr	r1, [pc, #492]	; (800c534 <tcp_slowtmr+0x588>)
 800c348:	fba1 1303 	umull	r1, r3, r1, r3
 800c34c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c34e:	429a      	cmp	r2, r3
 800c350:	d911      	bls.n	800c376 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800c352:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c354:	f004 fac4 	bl	80108e0 <tcp_keepalive>
 800c358:	4603      	mov	r3, r0
 800c35a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800c35e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c362:	2b00      	cmp	r3, #0
 800c364:	d107      	bne.n	800c376 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800c366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c368:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800c36c:	3301      	adds	r3, #1
 800c36e:	b2da      	uxtb	r2, r3
 800c370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c372:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800c376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d011      	beq.n	800c3a2 <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800c37e:	4b6c      	ldr	r3, [pc, #432]	; (800c530 <tcp_slowtmr+0x584>)
 800c380:	681a      	ldr	r2, [r3, #0]
 800c382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c384:	6a1b      	ldr	r3, [r3, #32]
 800c386:	1ad2      	subs	r2, r2, r3
 800c388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c38a:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c38e:	4619      	mov	r1, r3
 800c390:	460b      	mov	r3, r1
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	440b      	add	r3, r1
 800c396:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800c398:	429a      	cmp	r2, r3
 800c39a:	d302      	bcc.n	800c3a2 <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800c39c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c39e:	f000 fddb 	bl	800cf58 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800c3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3a4:	7d1b      	ldrb	r3, [r3, #20]
 800c3a6:	2b03      	cmp	r3, #3
 800c3a8:	d10b      	bne.n	800c3c2 <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800c3aa:	4b61      	ldr	r3, [pc, #388]	; (800c530 <tcp_slowtmr+0x584>)
 800c3ac:	681a      	ldr	r2, [r3, #0]
 800c3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b0:	6a1b      	ldr	r3, [r3, #32]
 800c3b2:	1ad3      	subs	r3, r2, r3
 800c3b4:	2b28      	cmp	r3, #40	; 0x28
 800c3b6:	d904      	bls.n	800c3c2 <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800c3b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3bc:	3301      	adds	r3, #1
 800c3be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800c3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c4:	7d1b      	ldrb	r3, [r3, #20]
 800c3c6:	2b09      	cmp	r3, #9
 800c3c8:	d10b      	bne.n	800c3e2 <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c3ca:	4b59      	ldr	r3, [pc, #356]	; (800c530 <tcp_slowtmr+0x584>)
 800c3cc:	681a      	ldr	r2, [r3, #0]
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	6a1b      	ldr	r3, [r3, #32]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2bf0      	cmp	r3, #240	; 0xf0
 800c3d6:	d904      	bls.n	800c3e2 <tcp_slowtmr+0x436>
        ++pcb_remove;
 800c3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c3e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d060      	beq.n	800c4ac <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800c3ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c3f0:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800c3f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3f4:	f000 fbfc 	bl	800cbf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800c3f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d010      	beq.n	800c420 <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800c3fe:	4b4f      	ldr	r3, [pc, #316]	; (800c53c <tcp_slowtmr+0x590>)
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c404:	429a      	cmp	r2, r3
 800c406:	d106      	bne.n	800c416 <tcp_slowtmr+0x46a>
 800c408:	4b4d      	ldr	r3, [pc, #308]	; (800c540 <tcp_slowtmr+0x594>)
 800c40a:	f240 526d 	movw	r2, #1389	; 0x56d
 800c40e:	494d      	ldr	r1, [pc, #308]	; (800c544 <tcp_slowtmr+0x598>)
 800c410:	484d      	ldr	r0, [pc, #308]	; (800c548 <tcp_slowtmr+0x59c>)
 800c412:	f007 fcf7 	bl	8013e04 <iprintf>
        prev->next = pcb->next;
 800c416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c41c:	60da      	str	r2, [r3, #12]
 800c41e:	e00f      	b.n	800c440 <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800c420:	4b46      	ldr	r3, [pc, #280]	; (800c53c <tcp_slowtmr+0x590>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c426:	429a      	cmp	r2, r3
 800c428:	d006      	beq.n	800c438 <tcp_slowtmr+0x48c>
 800c42a:	4b45      	ldr	r3, [pc, #276]	; (800c540 <tcp_slowtmr+0x594>)
 800c42c:	f240 5271 	movw	r2, #1393	; 0x571
 800c430:	4946      	ldr	r1, [pc, #280]	; (800c54c <tcp_slowtmr+0x5a0>)
 800c432:	4845      	ldr	r0, [pc, #276]	; (800c548 <tcp_slowtmr+0x59c>)
 800c434:	f007 fce6 	bl	8013e04 <iprintf>
        tcp_active_pcbs = pcb->next;
 800c438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c43a:	68db      	ldr	r3, [r3, #12]
 800c43c:	4a3f      	ldr	r2, [pc, #252]	; (800c53c <tcp_slowtmr+0x590>)
 800c43e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800c440:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800c444:	2b00      	cmp	r3, #0
 800c446:	d013      	beq.n	800c470 <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c44e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c450:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800c452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c454:	3304      	adds	r3, #4
 800c456:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c458:	8ad2      	ldrh	r2, [r2, #22]
 800c45a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c45c:	8b09      	ldrh	r1, [r1, #24]
 800c45e:	9102      	str	r1, [sp, #8]
 800c460:	9201      	str	r2, [sp, #4]
 800c462:	9300      	str	r3, [sp, #0]
 800c464:	462b      	mov	r3, r5
 800c466:	4622      	mov	r2, r4
 800c468:	4601      	mov	r1, r0
 800c46a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46c:	f004 f984 	bl	8010778 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c472:	691b      	ldr	r3, [r3, #16]
 800c474:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800c476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c478:	7d1b      	ldrb	r3, [r3, #20]
 800c47a:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800c47c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47e:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800c480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c482:	68db      	ldr	r3, [r3, #12]
 800c484:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c486:	6838      	ldr	r0, [r7, #0]
 800c488:	f7ff f9f2 	bl	800b870 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800c48c:	4b30      	ldr	r3, [pc, #192]	; (800c550 <tcp_slowtmr+0x5a4>)
 800c48e:	2200      	movs	r2, #0
 800c490:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d004      	beq.n	800c4a2 <tcp_slowtmr+0x4f6>
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	f06f 010c 	mvn.w	r1, #12
 800c49e:	68b8      	ldr	r0, [r7, #8]
 800c4a0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800c4a2:	4b2b      	ldr	r3, [pc, #172]	; (800c550 <tcp_slowtmr+0x5a4>)
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d037      	beq.n	800c51a <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800c4aa:	e590      	b.n	800bfce <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c4b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b2:	68db      	ldr	r3, [r3, #12]
 800c4b4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800c4b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4b8:	7f1b      	ldrb	r3, [r3, #28]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	b2da      	uxtb	r2, r3
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800c4c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c4:	7f1a      	ldrb	r2, [r3, #28]
 800c4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c8:	7f5b      	ldrb	r3, [r3, #29]
 800c4ca:	429a      	cmp	r2, r3
 800c4cc:	d325      	bcc.n	800c51a <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800c4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800c4d4:	4b1e      	ldr	r3, [pc, #120]	; (800c550 <tcp_slowtmr+0x5a4>)
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800c4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d00b      	beq.n	800c4fc <tcp_slowtmr+0x550>
 800c4e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c4ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c4ec:	6912      	ldr	r2, [r2, #16]
 800c4ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4798      	blx	r3
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800c4fa:	e002      	b.n	800c502 <tcp_slowtmr+0x556>
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800c502:	4b13      	ldr	r3, [pc, #76]	; (800c550 <tcp_slowtmr+0x5a4>)
 800c504:	781b      	ldrb	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d000      	beq.n	800c50c <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800c50a:	e560      	b.n	800bfce <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800c50c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800c510:	2b00      	cmp	r3, #0
 800c512:	d102      	bne.n	800c51a <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800c514:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c516:	f003 fb7b 	bl	800fc10 <tcp_output>
  while (pcb != NULL) {
 800c51a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c51c:	2b00      	cmp	r3, #0
 800c51e:	f47f ad5c 	bne.w	800bfda <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800c522:	2300      	movs	r3, #0
 800c524:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800c526:	4b0b      	ldr	r3, [pc, #44]	; (800c554 <tcp_slowtmr+0x5a8>)
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c52c:	e067      	b.n	800c5fe <tcp_slowtmr+0x652>
 800c52e:	bf00      	nop
 800c530:	20007204 	.word	0x20007204
 800c534:	10624dd3 	.word	0x10624dd3
 800c538:	000124f8 	.word	0x000124f8
 800c53c:	20007200 	.word	0x20007200
 800c540:	0801591c 	.word	0x0801591c
 800c544:	08015d54 	.word	0x08015d54
 800c548:	08015960 	.word	0x08015960
 800c54c:	08015d80 	.word	0x08015d80
 800c550:	200071fc 	.word	0x200071fc
 800c554:	20007210 	.word	0x20007210
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800c558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c55a:	7d1b      	ldrb	r3, [r3, #20]
 800c55c:	2b0a      	cmp	r3, #10
 800c55e:	d006      	beq.n	800c56e <tcp_slowtmr+0x5c2>
 800c560:	4b2b      	ldr	r3, [pc, #172]	; (800c610 <tcp_slowtmr+0x664>)
 800c562:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800c566:	492b      	ldr	r1, [pc, #172]	; (800c614 <tcp_slowtmr+0x668>)
 800c568:	482b      	ldr	r0, [pc, #172]	; (800c618 <tcp_slowtmr+0x66c>)
 800c56a:	f007 fc4b 	bl	8013e04 <iprintf>
    pcb_remove = 0;
 800c56e:	2300      	movs	r3, #0
 800c570:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800c574:	4b29      	ldr	r3, [pc, #164]	; (800c61c <tcp_slowtmr+0x670>)
 800c576:	681a      	ldr	r2, [r3, #0]
 800c578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c57a:	6a1b      	ldr	r3, [r3, #32]
 800c57c:	1ad3      	subs	r3, r2, r3
 800c57e:	2bf0      	cmp	r3, #240	; 0xf0
 800c580:	d904      	bls.n	800c58c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800c582:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c586:	3301      	adds	r3, #1
 800c588:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800c58c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c590:	2b00      	cmp	r3, #0
 800c592:	d02f      	beq.n	800c5f4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800c594:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c596:	f000 fb2b 	bl	800cbf0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800c59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d010      	beq.n	800c5c2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800c5a0:	4b1f      	ldr	r3, [pc, #124]	; (800c620 <tcp_slowtmr+0x674>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a6:	429a      	cmp	r2, r3
 800c5a8:	d106      	bne.n	800c5b8 <tcp_slowtmr+0x60c>
 800c5aa:	4b19      	ldr	r3, [pc, #100]	; (800c610 <tcp_slowtmr+0x664>)
 800c5ac:	f240 52af 	movw	r2, #1455	; 0x5af
 800c5b0:	491c      	ldr	r1, [pc, #112]	; (800c624 <tcp_slowtmr+0x678>)
 800c5b2:	4819      	ldr	r0, [pc, #100]	; (800c618 <tcp_slowtmr+0x66c>)
 800c5b4:	f007 fc26 	bl	8013e04 <iprintf>
        prev->next = pcb->next;
 800c5b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5ba:	68da      	ldr	r2, [r3, #12]
 800c5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5be:	60da      	str	r2, [r3, #12]
 800c5c0:	e00f      	b.n	800c5e2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800c5c2:	4b17      	ldr	r3, [pc, #92]	; (800c620 <tcp_slowtmr+0x674>)
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d006      	beq.n	800c5da <tcp_slowtmr+0x62e>
 800c5cc:	4b10      	ldr	r3, [pc, #64]	; (800c610 <tcp_slowtmr+0x664>)
 800c5ce:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800c5d2:	4915      	ldr	r1, [pc, #84]	; (800c628 <tcp_slowtmr+0x67c>)
 800c5d4:	4810      	ldr	r0, [pc, #64]	; (800c618 <tcp_slowtmr+0x66c>)
 800c5d6:	f007 fc15 	bl	8013e04 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800c5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5dc:	68db      	ldr	r3, [r3, #12]
 800c5de:	4a10      	ldr	r2, [pc, #64]	; (800c620 <tcp_slowtmr+0x674>)
 800c5e0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800c5e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800c5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5e8:	68db      	ldr	r3, [r3, #12]
 800c5ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800c5ec:	69f8      	ldr	r0, [r7, #28]
 800c5ee:	f7ff f93f 	bl	800b870 <tcp_free>
 800c5f2:	e004      	b.n	800c5fe <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800c5f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5f6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c5fa:	68db      	ldr	r3, [r3, #12]
 800c5fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800c5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1a9      	bne.n	800c558 <tcp_slowtmr+0x5ac>
    }
  }
}
 800c604:	bf00      	nop
 800c606:	bf00      	nop
 800c608:	3730      	adds	r7, #48	; 0x30
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bdb0      	pop	{r4, r5, r7, pc}
 800c60e:	bf00      	nop
 800c610:	0801591c 	.word	0x0801591c
 800c614:	08015dac 	.word	0x08015dac
 800c618:	08015960 	.word	0x08015960
 800c61c:	20007204 	.word	0x20007204
 800c620:	20007210 	.word	0x20007210
 800c624:	08015ddc 	.word	0x08015ddc
 800c628:	08015e04 	.word	0x08015e04

0800c62c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b082      	sub	sp, #8
 800c630:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800c632:	4b2d      	ldr	r3, [pc, #180]	; (800c6e8 <tcp_fasttmr+0xbc>)
 800c634:	781b      	ldrb	r3, [r3, #0]
 800c636:	3301      	adds	r3, #1
 800c638:	b2da      	uxtb	r2, r3
 800c63a:	4b2b      	ldr	r3, [pc, #172]	; (800c6e8 <tcp_fasttmr+0xbc>)
 800c63c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800c63e:	4b2b      	ldr	r3, [pc, #172]	; (800c6ec <tcp_fasttmr+0xc0>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800c644:	e048      	b.n	800c6d8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	7f9a      	ldrb	r2, [r3, #30]
 800c64a:	4b27      	ldr	r3, [pc, #156]	; (800c6e8 <tcp_fasttmr+0xbc>)
 800c64c:	781b      	ldrb	r3, [r3, #0]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d03f      	beq.n	800c6d2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800c652:	4b25      	ldr	r3, [pc, #148]	; (800c6e8 <tcp_fasttmr+0xbc>)
 800c654:	781a      	ldrb	r2, [r3, #0]
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	8b5b      	ldrh	r3, [r3, #26]
 800c65e:	f003 0301 	and.w	r3, r3, #1
 800c662:	2b00      	cmp	r3, #0
 800c664:	d010      	beq.n	800c688 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	8b5b      	ldrh	r3, [r3, #26]
 800c66a:	f043 0302 	orr.w	r3, r3, #2
 800c66e:	b29a      	uxth	r2, r3
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800c674:	6878      	ldr	r0, [r7, #4]
 800c676:	f003 facb 	bl	800fc10 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	8b5b      	ldrh	r3, [r3, #26]
 800c67e:	f023 0303 	bic.w	r3, r3, #3
 800c682:	b29a      	uxth	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	8b5b      	ldrh	r3, [r3, #26]
 800c68c:	f003 0308 	and.w	r3, r3, #8
 800c690:	2b00      	cmp	r3, #0
 800c692:	d009      	beq.n	800c6a8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	8b5b      	ldrh	r3, [r3, #26]
 800c698:	f023 0308 	bic.w	r3, r3, #8
 800c69c:	b29a      	uxth	r2, r3
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f7ff fa78 	bl	800bb98 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	68db      	ldr	r3, [r3, #12]
 800c6ac:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d00a      	beq.n	800c6cc <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800c6b6:	4b0e      	ldr	r3, [pc, #56]	; (800c6f0 <tcp_fasttmr+0xc4>)
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f819 	bl	800c6f4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800c6c2:	4b0b      	ldr	r3, [pc, #44]	; (800c6f0 <tcp_fasttmr+0xc4>)
 800c6c4:	781b      	ldrb	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d000      	beq.n	800c6cc <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800c6ca:	e7b8      	b.n	800c63e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	607b      	str	r3, [r7, #4]
 800c6d0:	e002      	b.n	800c6d8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	68db      	ldr	r3, [r3, #12]
 800c6d6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d1b3      	bne.n	800c646 <tcp_fasttmr+0x1a>
    }
  }
}
 800c6de:	bf00      	nop
 800c6e0:	bf00      	nop
 800c6e2:	3708      	adds	r7, #8
 800c6e4:	46bd      	mov	sp, r7
 800c6e6:	bd80      	pop	{r7, pc}
 800c6e8:	200000de 	.word	0x200000de
 800c6ec:	20007200 	.word	0x20007200
 800c6f0:	200071fc 	.word	0x200071fc

0800c6f4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800c6f4:	b590      	push	{r4, r7, lr}
 800c6f6:	b085      	sub	sp, #20
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d109      	bne.n	800c716 <tcp_process_refused_data+0x22>
 800c702:	4b37      	ldr	r3, [pc, #220]	; (800c7e0 <tcp_process_refused_data+0xec>)
 800c704:	f240 6209 	movw	r2, #1545	; 0x609
 800c708:	4936      	ldr	r1, [pc, #216]	; (800c7e4 <tcp_process_refused_data+0xf0>)
 800c70a:	4837      	ldr	r0, [pc, #220]	; (800c7e8 <tcp_process_refused_data+0xf4>)
 800c70c:	f007 fb7a 	bl	8013e04 <iprintf>
 800c710:	f06f 030f 	mvn.w	r3, #15
 800c714:	e060      	b.n	800c7d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c71a:	7b5b      	ldrb	r3, [r3, #13]
 800c71c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c722:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c730:	2b00      	cmp	r3, #0
 800c732:	d00b      	beq.n	800c74c <tcp_process_refused_data+0x58>
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6918      	ldr	r0, [r3, #16]
 800c73e:	2300      	movs	r3, #0
 800c740:	68ba      	ldr	r2, [r7, #8]
 800c742:	6879      	ldr	r1, [r7, #4]
 800c744:	47a0      	blx	r4
 800c746:	4603      	mov	r3, r0
 800c748:	73fb      	strb	r3, [r7, #15]
 800c74a:	e007      	b.n	800c75c <tcp_process_refused_data+0x68>
 800c74c:	2300      	movs	r3, #0
 800c74e:	68ba      	ldr	r2, [r7, #8]
 800c750:	6879      	ldr	r1, [r7, #4]
 800c752:	2000      	movs	r0, #0
 800c754:	f000 f8a4 	bl	800c8a0 <tcp_recv_null>
 800c758:	4603      	mov	r3, r0
 800c75a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800c75c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c760:	2b00      	cmp	r3, #0
 800c762:	d12a      	bne.n	800c7ba <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800c764:	7bbb      	ldrb	r3, [r7, #14]
 800c766:	f003 0320 	and.w	r3, r3, #32
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d033      	beq.n	800c7d6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c772:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c776:	d005      	beq.n	800c784 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c77c:	3301      	adds	r3, #1
 800c77e:	b29a      	uxth	r2, r3
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d00b      	beq.n	800c7a6 <tcp_process_refused_data+0xb2>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6918      	ldr	r0, [r3, #16]
 800c798:	2300      	movs	r3, #0
 800c79a:	2200      	movs	r2, #0
 800c79c:	6879      	ldr	r1, [r7, #4]
 800c79e:	47a0      	blx	r4
 800c7a0:	4603      	mov	r3, r0
 800c7a2:	73fb      	strb	r3, [r7, #15]
 800c7a4:	e001      	b.n	800c7aa <tcp_process_refused_data+0xb6>
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800c7aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7ae:	f113 0f0d 	cmn.w	r3, #13
 800c7b2:	d110      	bne.n	800c7d6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800c7b4:	f06f 030c 	mvn.w	r3, #12
 800c7b8:	e00e      	b.n	800c7d8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800c7ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c7be:	f113 0f0d 	cmn.w	r3, #13
 800c7c2:	d102      	bne.n	800c7ca <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800c7c4:	f06f 030c 	mvn.w	r3, #12
 800c7c8:	e006      	b.n	800c7d8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800c7d0:	f06f 0304 	mvn.w	r3, #4
 800c7d4:	e000      	b.n	800c7d8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800c7d6:	2300      	movs	r3, #0
}
 800c7d8:	4618      	mov	r0, r3
 800c7da:	3714      	adds	r7, #20
 800c7dc:	46bd      	mov	sp, r7
 800c7de:	bd90      	pop	{r4, r7, pc}
 800c7e0:	0801591c 	.word	0x0801591c
 800c7e4:	08015e2c 	.word	0x08015e2c
 800c7e8:	08015960 	.word	0x08015960

0800c7ec <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b084      	sub	sp, #16
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800c7f4:	e007      	b.n	800c806 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800c7fc:	6878      	ldr	r0, [r7, #4]
 800c7fe:	f000 f80a 	bl	800c816 <tcp_seg_free>
    seg = next;
 800c802:	68fb      	ldr	r3, [r7, #12]
 800c804:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1f4      	bne.n	800c7f6 <tcp_segs_free+0xa>
  }
}
 800c80c:	bf00      	nop
 800c80e:	bf00      	nop
 800c810:	3710      	adds	r7, #16
 800c812:	46bd      	mov	sp, r7
 800c814:	bd80      	pop	{r7, pc}

0800c816 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800c816:	b580      	push	{r7, lr}
 800c818:	b082      	sub	sp, #8
 800c81a:	af00      	add	r7, sp, #0
 800c81c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d00c      	beq.n	800c83e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	685b      	ldr	r3, [r3, #4]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d004      	beq.n	800c836 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	685b      	ldr	r3, [r3, #4]
 800c830:	4618      	mov	r0, r3
 800c832:	f7fe fd6d 	bl	800b310 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800c836:	6879      	ldr	r1, [r7, #4]
 800c838:	2003      	movs	r0, #3
 800c83a:	f7fd ff57 	bl	800a6ec <memp_free>
  }
}
 800c83e:	bf00      	nop
 800c840:	3708      	adds	r7, #8
 800c842:	46bd      	mov	sp, r7
 800c844:	bd80      	pop	{r7, pc}
	...

0800c848 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d106      	bne.n	800c864 <tcp_seg_copy+0x1c>
 800c856:	4b0f      	ldr	r3, [pc, #60]	; (800c894 <tcp_seg_copy+0x4c>)
 800c858:	f240 6282 	movw	r2, #1666	; 0x682
 800c85c:	490e      	ldr	r1, [pc, #56]	; (800c898 <tcp_seg_copy+0x50>)
 800c85e:	480f      	ldr	r0, [pc, #60]	; (800c89c <tcp_seg_copy+0x54>)
 800c860:	f007 fad0 	bl	8013e04 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800c864:	2003      	movs	r0, #3
 800c866:	f7fd fef5 	bl	800a654 <memp_malloc>
 800c86a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800c86c:	68fb      	ldr	r3, [r7, #12]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d101      	bne.n	800c876 <tcp_seg_copy+0x2e>
    return NULL;
 800c872:	2300      	movs	r3, #0
 800c874:	e00a      	b.n	800c88c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800c876:	2210      	movs	r2, #16
 800c878:	6879      	ldr	r1, [r7, #4]
 800c87a:	68f8      	ldr	r0, [r7, #12]
 800c87c:	f007 faac 	bl	8013dd8 <memcpy>
  pbuf_ref(cseg->p);
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	685b      	ldr	r3, [r3, #4]
 800c884:	4618      	mov	r0, r3
 800c886:	f7fe fde3 	bl	800b450 <pbuf_ref>
  return cseg;
 800c88a:	68fb      	ldr	r3, [r7, #12]
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}
 800c894:	0801591c 	.word	0x0801591c
 800c898:	08015e70 	.word	0x08015e70
 800c89c:	08015960 	.word	0x08015960

0800c8a0 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800c8a0:	b580      	push	{r7, lr}
 800c8a2:	b084      	sub	sp, #16
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	60f8      	str	r0, [r7, #12]
 800c8a8:	60b9      	str	r1, [r7, #8]
 800c8aa:	607a      	str	r2, [r7, #4]
 800c8ac:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d109      	bne.n	800c8c8 <tcp_recv_null+0x28>
 800c8b4:	4b12      	ldr	r3, [pc, #72]	; (800c900 <tcp_recv_null+0x60>)
 800c8b6:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800c8ba:	4912      	ldr	r1, [pc, #72]	; (800c904 <tcp_recv_null+0x64>)
 800c8bc:	4812      	ldr	r0, [pc, #72]	; (800c908 <tcp_recv_null+0x68>)
 800c8be:	f007 faa1 	bl	8013e04 <iprintf>
 800c8c2:	f06f 030f 	mvn.w	r3, #15
 800c8c6:	e016      	b.n	800c8f6 <tcp_recv_null+0x56>

  if (p != NULL) {
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d009      	beq.n	800c8e2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	891b      	ldrh	r3, [r3, #8]
 800c8d2:	4619      	mov	r1, r3
 800c8d4:	68b8      	ldr	r0, [r7, #8]
 800c8d6:	f7ff fb19 	bl	800bf0c <tcp_recved>
    pbuf_free(p);
 800c8da:	6878      	ldr	r0, [r7, #4]
 800c8dc:	f7fe fd18 	bl	800b310 <pbuf_free>
 800c8e0:	e008      	b.n	800c8f4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800c8e2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d104      	bne.n	800c8f4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800c8ea:	68b8      	ldr	r0, [r7, #8]
 800c8ec:	f7ff f9be 	bl	800bc6c <tcp_close>
 800c8f0:	4603      	mov	r3, r0
 800c8f2:	e000      	b.n	800c8f6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800c8f4:	2300      	movs	r3, #0
}
 800c8f6:	4618      	mov	r0, r3
 800c8f8:	3710      	adds	r7, #16
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bd80      	pop	{r7, pc}
 800c8fe:	bf00      	nop
 800c900:	0801591c 	.word	0x0801591c
 800c904:	08015e8c 	.word	0x08015e8c
 800c908:	08015960 	.word	0x08015960

0800c90c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800c90c:	b580      	push	{r7, lr}
 800c90e:	b086      	sub	sp, #24
 800c910:	af00      	add	r7, sp, #0
 800c912:	4603      	mov	r3, r0
 800c914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800c916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	db01      	blt.n	800c922 <tcp_kill_prio+0x16>
 800c91e:	79fb      	ldrb	r3, [r7, #7]
 800c920:	e000      	b.n	800c924 <tcp_kill_prio+0x18>
 800c922:	237f      	movs	r3, #127	; 0x7f
 800c924:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800c926:	7afb      	ldrb	r3, [r7, #11]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d034      	beq.n	800c996 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800c92c:	7afb      	ldrb	r3, [r7, #11]
 800c92e:	3b01      	subs	r3, #1
 800c930:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c936:	2300      	movs	r3, #0
 800c938:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c93a:	4b19      	ldr	r3, [pc, #100]	; (800c9a0 <tcp_kill_prio+0x94>)
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	617b      	str	r3, [r7, #20]
 800c940:	e01f      	b.n	800c982 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	7d5b      	ldrb	r3, [r3, #21]
 800c946:	7afa      	ldrb	r2, [r7, #11]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d80c      	bhi.n	800c966 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c94c:	697b      	ldr	r3, [r7, #20]
 800c94e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800c950:	7afa      	ldrb	r2, [r7, #11]
 800c952:	429a      	cmp	r2, r3
 800c954:	d112      	bne.n	800c97c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800c956:	4b13      	ldr	r3, [pc, #76]	; (800c9a4 <tcp_kill_prio+0x98>)
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	697b      	ldr	r3, [r7, #20]
 800c95c:	6a1b      	ldr	r3, [r3, #32]
 800c95e:	1ad3      	subs	r3, r2, r3
 800c960:	68fa      	ldr	r2, [r7, #12]
 800c962:	429a      	cmp	r2, r3
 800c964:	d80a      	bhi.n	800c97c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800c966:	4b0f      	ldr	r3, [pc, #60]	; (800c9a4 <tcp_kill_prio+0x98>)
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	6a1b      	ldr	r3, [r3, #32]
 800c96e:	1ad3      	subs	r3, r2, r3
 800c970:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800c976:	697b      	ldr	r3, [r7, #20]
 800c978:	7d5b      	ldrb	r3, [r3, #21]
 800c97a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	617b      	str	r3, [r7, #20]
 800c982:	697b      	ldr	r3, [r7, #20]
 800c984:	2b00      	cmp	r3, #0
 800c986:	d1dc      	bne.n	800c942 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800c988:	693b      	ldr	r3, [r7, #16]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d004      	beq.n	800c998 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800c98e:	6938      	ldr	r0, [r7, #16]
 800c990:	f7ff fa56 	bl	800be40 <tcp_abort>
 800c994:	e000      	b.n	800c998 <tcp_kill_prio+0x8c>
    return;
 800c996:	bf00      	nop
  }
}
 800c998:	3718      	adds	r7, #24
 800c99a:	46bd      	mov	sp, r7
 800c99c:	bd80      	pop	{r7, pc}
 800c99e:	bf00      	nop
 800c9a0:	20007200 	.word	0x20007200
 800c9a4:	20007204 	.word	0x20007204

0800c9a8 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b086      	sub	sp, #24
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800c9b2:	79fb      	ldrb	r3, [r7, #7]
 800c9b4:	2b08      	cmp	r3, #8
 800c9b6:	d009      	beq.n	800c9cc <tcp_kill_state+0x24>
 800c9b8:	79fb      	ldrb	r3, [r7, #7]
 800c9ba:	2b09      	cmp	r3, #9
 800c9bc:	d006      	beq.n	800c9cc <tcp_kill_state+0x24>
 800c9be:	4b1a      	ldr	r3, [pc, #104]	; (800ca28 <tcp_kill_state+0x80>)
 800c9c0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800c9c4:	4919      	ldr	r1, [pc, #100]	; (800ca2c <tcp_kill_state+0x84>)
 800c9c6:	481a      	ldr	r0, [pc, #104]	; (800ca30 <tcp_kill_state+0x88>)
 800c9c8:	f007 fa1c 	bl	8013e04 <iprintf>

  inactivity = 0;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800c9d4:	4b17      	ldr	r3, [pc, #92]	; (800ca34 <tcp_kill_state+0x8c>)
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	617b      	str	r3, [r7, #20]
 800c9da:	e017      	b.n	800ca0c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800c9dc:	697b      	ldr	r3, [r7, #20]
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	79fa      	ldrb	r2, [r7, #7]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	d10f      	bne.n	800ca06 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800c9e6:	4b14      	ldr	r3, [pc, #80]	; (800ca38 <tcp_kill_state+0x90>)
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	6a1b      	ldr	r3, [r3, #32]
 800c9ee:	1ad3      	subs	r3, r2, r3
 800c9f0:	68fa      	ldr	r2, [r7, #12]
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d807      	bhi.n	800ca06 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800c9f6:	4b10      	ldr	r3, [pc, #64]	; (800ca38 <tcp_kill_state+0x90>)
 800c9f8:	681a      	ldr	r2, [r3, #0]
 800c9fa:	697b      	ldr	r3, [r7, #20]
 800c9fc:	6a1b      	ldr	r3, [r3, #32]
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ca02:	697b      	ldr	r3, [r7, #20]
 800ca04:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca06:	697b      	ldr	r3, [r7, #20]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	617b      	str	r3, [r7, #20]
 800ca0c:	697b      	ldr	r3, [r7, #20]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1e4      	bne.n	800c9dc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d003      	beq.n	800ca20 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ca18:	2100      	movs	r1, #0
 800ca1a:	6938      	ldr	r0, [r7, #16]
 800ca1c:	f7ff f952 	bl	800bcc4 <tcp_abandon>
  }
}
 800ca20:	bf00      	nop
 800ca22:	3718      	adds	r7, #24
 800ca24:	46bd      	mov	sp, r7
 800ca26:	bd80      	pop	{r7, pc}
 800ca28:	0801591c 	.word	0x0801591c
 800ca2c:	08015ea8 	.word	0x08015ea8
 800ca30:	08015960 	.word	0x08015960
 800ca34:	20007200 	.word	0x20007200
 800ca38:	20007204 	.word	0x20007204

0800ca3c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b084      	sub	sp, #16
 800ca40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ca42:	2300      	movs	r3, #0
 800ca44:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ca46:	2300      	movs	r3, #0
 800ca48:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca4a:	4b12      	ldr	r3, [pc, #72]	; (800ca94 <tcp_kill_timewait+0x58>)
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	60fb      	str	r3, [r7, #12]
 800ca50:	e012      	b.n	800ca78 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ca52:	4b11      	ldr	r3, [pc, #68]	; (800ca98 <tcp_kill_timewait+0x5c>)
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	6a1b      	ldr	r3, [r3, #32]
 800ca5a:	1ad3      	subs	r3, r2, r3
 800ca5c:	687a      	ldr	r2, [r7, #4]
 800ca5e:	429a      	cmp	r2, r3
 800ca60:	d807      	bhi.n	800ca72 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ca62:	4b0d      	ldr	r3, [pc, #52]	; (800ca98 <tcp_kill_timewait+0x5c>)
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	6a1b      	ldr	r3, [r3, #32]
 800ca6a:	1ad3      	subs	r3, r2, r3
 800ca6c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	68db      	ldr	r3, [r3, #12]
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d1e9      	bne.n	800ca52 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ca7e:	68bb      	ldr	r3, [r7, #8]
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d002      	beq.n	800ca8a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ca84:	68b8      	ldr	r0, [r7, #8]
 800ca86:	f7ff f9db 	bl	800be40 <tcp_abort>
  }
}
 800ca8a:	bf00      	nop
 800ca8c:	3710      	adds	r7, #16
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	20007210 	.word	0x20007210
 800ca98:	20007204 	.word	0x20007204

0800ca9c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ca9c:	b580      	push	{r7, lr}
 800ca9e:	b082      	sub	sp, #8
 800caa0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800caa2:	4b10      	ldr	r3, [pc, #64]	; (800cae4 <tcp_handle_closepend+0x48>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800caa8:	e014      	b.n	800cad4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	68db      	ldr	r3, [r3, #12]
 800caae:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	8b5b      	ldrh	r3, [r3, #26]
 800cab4:	f003 0308 	and.w	r3, r3, #8
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d009      	beq.n	800cad0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	8b5b      	ldrh	r3, [r3, #26]
 800cac0:	f023 0308 	bic.w	r3, r3, #8
 800cac4:	b29a      	uxth	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f7ff f864 	bl	800bb98 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d1e7      	bne.n	800caaa <tcp_handle_closepend+0xe>
  }
}
 800cada:	bf00      	nop
 800cadc:	bf00      	nop
 800cade:	3708      	adds	r7, #8
 800cae0:	46bd      	mov	sp, r7
 800cae2:	bd80      	pop	{r7, pc}
 800cae4:	20007200 	.word	0x20007200

0800cae8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800cae8:	b580      	push	{r7, lr}
 800caea:	b084      	sub	sp, #16
 800caec:	af00      	add	r7, sp, #0
 800caee:	4603      	mov	r3, r0
 800caf0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800caf2:	2001      	movs	r0, #1
 800caf4:	f7fd fdae 	bl	800a654 <memp_malloc>
 800caf8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d126      	bne.n	800cb4e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800cb00:	f7ff ffcc 	bl	800ca9c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800cb04:	f7ff ff9a 	bl	800ca3c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb08:	2001      	movs	r0, #1
 800cb0a:	f7fd fda3 	bl	800a654 <memp_malloc>
 800cb0e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d11b      	bne.n	800cb4e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800cb16:	2009      	movs	r0, #9
 800cb18:	f7ff ff46 	bl	800c9a8 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb1c:	2001      	movs	r0, #1
 800cb1e:	f7fd fd99 	bl	800a654 <memp_malloc>
 800cb22:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d111      	bne.n	800cb4e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800cb2a:	2008      	movs	r0, #8
 800cb2c:	f7ff ff3c 	bl	800c9a8 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb30:	2001      	movs	r0, #1
 800cb32:	f7fd fd8f 	bl	800a654 <memp_malloc>
 800cb36:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d107      	bne.n	800cb4e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800cb3e:	79fb      	ldrb	r3, [r7, #7]
 800cb40:	4618      	mov	r0, r3
 800cb42:	f7ff fee3 	bl	800c90c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800cb46:	2001      	movs	r0, #1
 800cb48:	f7fd fd84 	bl	800a654 <memp_malloc>
 800cb4c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d03f      	beq.n	800cbd4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800cb54:	229c      	movs	r2, #156	; 0x9c
 800cb56:	2100      	movs	r1, #0
 800cb58:	68f8      	ldr	r0, [r7, #12]
 800cb5a:	f007 f94b 	bl	8013df4 <memset>
    pcb->prio = prio;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	79fa      	ldrb	r2, [r7, #7]
 800cb62:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cb6a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800cb74:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	22ff      	movs	r2, #255	; 0xff
 800cb82:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800cb84:	68fb      	ldr	r3, [r7, #12]
 800cb86:	f44f 7206 	mov.w	r2, #536	; 0x218
 800cb8a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	2206      	movs	r2, #6
 800cb90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	2206      	movs	r2, #6
 800cb98:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cba0:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	2201      	movs	r2, #1
 800cba6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800cbaa:	4b0d      	ldr	r3, [pc, #52]	; (800cbe0 <tcp_alloc+0xf8>)
 800cbac:	681a      	ldr	r2, [r3, #0]
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800cbb2:	4b0c      	ldr	r3, [pc, #48]	; (800cbe4 <tcp_alloc+0xfc>)
 800cbb4:	781a      	ldrb	r2, [r3, #0]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800cbc0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	4a08      	ldr	r2, [pc, #32]	; (800cbe8 <tcp_alloc+0x100>)
 800cbc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	4a07      	ldr	r2, [pc, #28]	; (800cbec <tcp_alloc+0x104>)
 800cbd0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
}
 800cbd6:	4618      	mov	r0, r3
 800cbd8:	3710      	adds	r7, #16
 800cbda:	46bd      	mov	sp, r7
 800cbdc:	bd80      	pop	{r7, pc}
 800cbde:	bf00      	nop
 800cbe0:	20007204 	.word	0x20007204
 800cbe4:	200000de 	.word	0x200000de
 800cbe8:	0800c8a1 	.word	0x0800c8a1
 800cbec:	006ddd00 	.word	0x006ddd00

0800cbf0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b082      	sub	sp, #8
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d107      	bne.n	800cc0e <tcp_pcb_purge+0x1e>
 800cbfe:	4b21      	ldr	r3, [pc, #132]	; (800cc84 <tcp_pcb_purge+0x94>)
 800cc00:	f640 0251 	movw	r2, #2129	; 0x851
 800cc04:	4920      	ldr	r1, [pc, #128]	; (800cc88 <tcp_pcb_purge+0x98>)
 800cc06:	4821      	ldr	r0, [pc, #132]	; (800cc8c <tcp_pcb_purge+0x9c>)
 800cc08:	f007 f8fc 	bl	8013e04 <iprintf>
 800cc0c:	e037      	b.n	800cc7e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	7d1b      	ldrb	r3, [r3, #20]
 800cc12:	2b00      	cmp	r3, #0
 800cc14:	d033      	beq.n	800cc7e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800cc1a:	2b0a      	cmp	r3, #10
 800cc1c:	d02f      	beq.n	800cc7e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800cc22:	2b01      	cmp	r3, #1
 800cc24:	d02b      	beq.n	800cc7e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d007      	beq.n	800cc3e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc32:	4618      	mov	r0, r3
 800cc34:	f7fe fb6c 	bl	800b310 <pbuf_free>
      pcb->refused_data = NULL;
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d002      	beq.n	800cc4c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800cc46:	6878      	ldr	r0, [r7, #4]
 800cc48:	f000 f986 	bl	800cf58 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800cc52:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7ff fdc7 	bl	800c7ec <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cc62:	4618      	mov	r0, r3
 800cc64:	f7ff fdc2 	bl	800c7ec <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	66da      	str	r2, [r3, #108]	; 0x6c
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2200      	movs	r2, #0
 800cc7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800cc7e:	3708      	adds	r7, #8
 800cc80:	46bd      	mov	sp, r7
 800cc82:	bd80      	pop	{r7, pc}
 800cc84:	0801591c 	.word	0x0801591c
 800cc88:	08015f68 	.word	0x08015f68
 800cc8c:	08015960 	.word	0x08015960

0800cc90 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d106      	bne.n	800ccae <tcp_pcb_remove+0x1e>
 800cca0:	4b3e      	ldr	r3, [pc, #248]	; (800cd9c <tcp_pcb_remove+0x10c>)
 800cca2:	f640 0283 	movw	r2, #2179	; 0x883
 800cca6:	493e      	ldr	r1, [pc, #248]	; (800cda0 <tcp_pcb_remove+0x110>)
 800cca8:	483e      	ldr	r0, [pc, #248]	; (800cda4 <tcp_pcb_remove+0x114>)
 800ccaa:	f007 f8ab 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d106      	bne.n	800ccc2 <tcp_pcb_remove+0x32>
 800ccb4:	4b39      	ldr	r3, [pc, #228]	; (800cd9c <tcp_pcb_remove+0x10c>)
 800ccb6:	f640 0284 	movw	r2, #2180	; 0x884
 800ccba:	493b      	ldr	r1, [pc, #236]	; (800cda8 <tcp_pcb_remove+0x118>)
 800ccbc:	4839      	ldr	r0, [pc, #228]	; (800cda4 <tcp_pcb_remove+0x114>)
 800ccbe:	f007 f8a1 	bl	8013e04 <iprintf>

  TCP_RMV(pcblist, pcb);
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	683a      	ldr	r2, [r7, #0]
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d105      	bne.n	800ccd8 <tcp_pcb_remove+0x48>
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	68da      	ldr	r2, [r3, #12]
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	e013      	b.n	800cd00 <tcp_pcb_remove+0x70>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	60fb      	str	r3, [r7, #12]
 800ccde:	e00c      	b.n	800ccfa <tcp_pcb_remove+0x6a>
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	68db      	ldr	r3, [r3, #12]
 800cce4:	683a      	ldr	r2, [r7, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d104      	bne.n	800ccf4 <tcp_pcb_remove+0x64>
 800ccea:	683b      	ldr	r3, [r7, #0]
 800ccec:	68da      	ldr	r2, [r3, #12]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	60da      	str	r2, [r3, #12]
 800ccf2:	e005      	b.n	800cd00 <tcp_pcb_remove+0x70>
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	68db      	ldr	r3, [r3, #12]
 800ccf8:	60fb      	str	r3, [r7, #12]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	2b00      	cmp	r3, #0
 800ccfe:	d1ef      	bne.n	800cce0 <tcp_pcb_remove+0x50>
 800cd00:	683b      	ldr	r3, [r7, #0]
 800cd02:	2200      	movs	r2, #0
 800cd04:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800cd06:	6838      	ldr	r0, [r7, #0]
 800cd08:	f7ff ff72 	bl	800cbf0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	7d1b      	ldrb	r3, [r3, #20]
 800cd10:	2b0a      	cmp	r3, #10
 800cd12:	d013      	beq.n	800cd3c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d00f      	beq.n	800cd3c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800cd1c:	683b      	ldr	r3, [r7, #0]
 800cd1e:	8b5b      	ldrh	r3, [r3, #26]
 800cd20:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d009      	beq.n	800cd3c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800cd28:	683b      	ldr	r3, [r7, #0]
 800cd2a:	8b5b      	ldrh	r3, [r3, #26]
 800cd2c:	f043 0302 	orr.w	r3, r3, #2
 800cd30:	b29a      	uxth	r2, r3
 800cd32:	683b      	ldr	r3, [r7, #0]
 800cd34:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800cd36:	6838      	ldr	r0, [r7, #0]
 800cd38:	f002 ff6a 	bl	800fc10 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	7d1b      	ldrb	r3, [r3, #20]
 800cd40:	2b01      	cmp	r3, #1
 800cd42:	d020      	beq.n	800cd86 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d006      	beq.n	800cd5a <tcp_pcb_remove+0xca>
 800cd4c:	4b13      	ldr	r3, [pc, #76]	; (800cd9c <tcp_pcb_remove+0x10c>)
 800cd4e:	f640 0293 	movw	r2, #2195	; 0x893
 800cd52:	4916      	ldr	r1, [pc, #88]	; (800cdac <tcp_pcb_remove+0x11c>)
 800cd54:	4813      	ldr	r0, [pc, #76]	; (800cda4 <tcp_pcb_remove+0x114>)
 800cd56:	f007 f855 	bl	8013e04 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800cd5a:	683b      	ldr	r3, [r7, #0]
 800cd5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d006      	beq.n	800cd70 <tcp_pcb_remove+0xe0>
 800cd62:	4b0e      	ldr	r3, [pc, #56]	; (800cd9c <tcp_pcb_remove+0x10c>)
 800cd64:	f640 0294 	movw	r2, #2196	; 0x894
 800cd68:	4911      	ldr	r1, [pc, #68]	; (800cdb0 <tcp_pcb_remove+0x120>)
 800cd6a:	480e      	ldr	r0, [pc, #56]	; (800cda4 <tcp_pcb_remove+0x114>)
 800cd6c:	f007 f84a 	bl	8013e04 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800cd70:	683b      	ldr	r3, [r7, #0]
 800cd72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d006      	beq.n	800cd86 <tcp_pcb_remove+0xf6>
 800cd78:	4b08      	ldr	r3, [pc, #32]	; (800cd9c <tcp_pcb_remove+0x10c>)
 800cd7a:	f640 0296 	movw	r2, #2198	; 0x896
 800cd7e:	490d      	ldr	r1, [pc, #52]	; (800cdb4 <tcp_pcb_remove+0x124>)
 800cd80:	4808      	ldr	r0, [pc, #32]	; (800cda4 <tcp_pcb_remove+0x114>)
 800cd82:	f007 f83f 	bl	8013e04 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2200      	movs	r2, #0
 800cd8a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800cd8c:	683b      	ldr	r3, [r7, #0]
 800cd8e:	2200      	movs	r2, #0
 800cd90:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800cd92:	bf00      	nop
 800cd94:	3710      	adds	r7, #16
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0801591c 	.word	0x0801591c
 800cda0:	08015f84 	.word	0x08015f84
 800cda4:	08015960 	.word	0x08015960
 800cda8:	08015fa0 	.word	0x08015fa0
 800cdac:	08015fc0 	.word	0x08015fc0
 800cdb0:	08015fd8 	.word	0x08015fd8
 800cdb4:	08015ff4 	.word	0x08015ff4

0800cdb8 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800cdb8:	b580      	push	{r7, lr}
 800cdba:	b082      	sub	sp, #8
 800cdbc:	af00      	add	r7, sp, #0
 800cdbe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	d106      	bne.n	800cdd4 <tcp_next_iss+0x1c>
 800cdc6:	4b0a      	ldr	r3, [pc, #40]	; (800cdf0 <tcp_next_iss+0x38>)
 800cdc8:	f640 02af 	movw	r2, #2223	; 0x8af
 800cdcc:	4909      	ldr	r1, [pc, #36]	; (800cdf4 <tcp_next_iss+0x3c>)
 800cdce:	480a      	ldr	r0, [pc, #40]	; (800cdf8 <tcp_next_iss+0x40>)
 800cdd0:	f007 f818 	bl	8013e04 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800cdd4:	4b09      	ldr	r3, [pc, #36]	; (800cdfc <tcp_next_iss+0x44>)
 800cdd6:	681a      	ldr	r2, [r3, #0]
 800cdd8:	4b09      	ldr	r3, [pc, #36]	; (800ce00 <tcp_next_iss+0x48>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	4413      	add	r3, r2
 800cdde:	4a07      	ldr	r2, [pc, #28]	; (800cdfc <tcp_next_iss+0x44>)
 800cde0:	6013      	str	r3, [r2, #0]
  return iss;
 800cde2:	4b06      	ldr	r3, [pc, #24]	; (800cdfc <tcp_next_iss+0x44>)
 800cde4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800cde6:	4618      	mov	r0, r3
 800cde8:	3708      	adds	r7, #8
 800cdea:	46bd      	mov	sp, r7
 800cdec:	bd80      	pop	{r7, pc}
 800cdee:	bf00      	nop
 800cdf0:	0801591c 	.word	0x0801591c
 800cdf4:	0801600c 	.word	0x0801600c
 800cdf8:	08015960 	.word	0x08015960
 800cdfc:	2000000c 	.word	0x2000000c
 800ce00:	20007204 	.word	0x20007204

0800ce04 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b086      	sub	sp, #24
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	4603      	mov	r3, r0
 800ce0c:	60b9      	str	r1, [r7, #8]
 800ce0e:	607a      	str	r2, [r7, #4]
 800ce10:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d106      	bne.n	800ce26 <tcp_eff_send_mss_netif+0x22>
 800ce18:	4b14      	ldr	r3, [pc, #80]	; (800ce6c <tcp_eff_send_mss_netif+0x68>)
 800ce1a:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800ce1e:	4914      	ldr	r1, [pc, #80]	; (800ce70 <tcp_eff_send_mss_netif+0x6c>)
 800ce20:	4814      	ldr	r0, [pc, #80]	; (800ce74 <tcp_eff_send_mss_netif+0x70>)
 800ce22:	f006 ffef 	bl	8013e04 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800ce2c:	89fb      	ldrh	r3, [r7, #14]
 800ce2e:	e019      	b.n	800ce64 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800ce30:	68bb      	ldr	r3, [r7, #8]
 800ce32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800ce34:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800ce36:	8afb      	ldrh	r3, [r7, #22]
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d012      	beq.n	800ce62 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800ce3c:	2328      	movs	r3, #40	; 0x28
 800ce3e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800ce40:	8afa      	ldrh	r2, [r7, #22]
 800ce42:	8abb      	ldrh	r3, [r7, #20]
 800ce44:	429a      	cmp	r2, r3
 800ce46:	d904      	bls.n	800ce52 <tcp_eff_send_mss_netif+0x4e>
 800ce48:	8afa      	ldrh	r2, [r7, #22]
 800ce4a:	8abb      	ldrh	r3, [r7, #20]
 800ce4c:	1ad3      	subs	r3, r2, r3
 800ce4e:	b29b      	uxth	r3, r3
 800ce50:	e000      	b.n	800ce54 <tcp_eff_send_mss_netif+0x50>
 800ce52:	2300      	movs	r3, #0
 800ce54:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800ce56:	8a7a      	ldrh	r2, [r7, #18]
 800ce58:	89fb      	ldrh	r3, [r7, #14]
 800ce5a:	4293      	cmp	r3, r2
 800ce5c:	bf28      	it	cs
 800ce5e:	4613      	movcs	r3, r2
 800ce60:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800ce62:	89fb      	ldrh	r3, [r7, #14]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3718      	adds	r7, #24
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}
 800ce6c:	0801591c 	.word	0x0801591c
 800ce70:	08016028 	.word	0x08016028
 800ce74:	08015960 	.word	0x08015960

0800ce78 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800ce78:	b580      	push	{r7, lr}
 800ce7a:	b084      	sub	sp, #16
 800ce7c:	af00      	add	r7, sp, #0
 800ce7e:	6078      	str	r0, [r7, #4]
 800ce80:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800ce82:	683b      	ldr	r3, [r7, #0]
 800ce84:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d119      	bne.n	800cec0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800ce8c:	4b10      	ldr	r3, [pc, #64]	; (800ced0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800ce8e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800ce92:	4910      	ldr	r1, [pc, #64]	; (800ced4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800ce94:	4810      	ldr	r0, [pc, #64]	; (800ced8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800ce96:	f006 ffb5 	bl	8013e04 <iprintf>

  while (pcb != NULL) {
 800ce9a:	e011      	b.n	800cec0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	681a      	ldr	r2, [r3, #0]
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	681b      	ldr	r3, [r3, #0]
 800cea4:	429a      	cmp	r2, r3
 800cea6:	d108      	bne.n	800ceba <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800ceae:	68f8      	ldr	r0, [r7, #12]
 800ceb0:	f7fe ffc6 	bl	800be40 <tcp_abort>
      pcb = next;
 800ceb4:	68bb      	ldr	r3, [r7, #8]
 800ceb6:	60fb      	str	r3, [r7, #12]
 800ceb8:	e002      	b.n	800cec0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	68db      	ldr	r3, [r3, #12]
 800cebe:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800cec0:	68fb      	ldr	r3, [r7, #12]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1ea      	bne.n	800ce9c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800cec6:	bf00      	nop
 800cec8:	bf00      	nop
 800ceca:	3710      	adds	r7, #16
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	0801591c 	.word	0x0801591c
 800ced4:	08016050 	.word	0x08016050
 800ced8:	08015960 	.word	0x08015960

0800cedc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800cedc:	b580      	push	{r7, lr}
 800cede:	b084      	sub	sp, #16
 800cee0:	af00      	add	r7, sp, #0
 800cee2:	6078      	str	r0, [r7, #4]
 800cee4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800cee6:	687b      	ldr	r3, [r7, #4]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d02a      	beq.n	800cf42 <tcp_netif_ip_addr_changed+0x66>
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d026      	beq.n	800cf42 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800cef4:	4b15      	ldr	r3, [pc, #84]	; (800cf4c <tcp_netif_ip_addr_changed+0x70>)
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f7ff ffbc 	bl	800ce78 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800cf00:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <tcp_netif_ip_addr_changed+0x74>)
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	4619      	mov	r1, r3
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f7ff ffb6 	bl	800ce78 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d017      	beq.n	800cf42 <tcp_netif_ip_addr_changed+0x66>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d013      	beq.n	800cf42 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf1a:	4b0e      	ldr	r3, [pc, #56]	; (800cf54 <tcp_netif_ip_addr_changed+0x78>)
 800cf1c:	681b      	ldr	r3, [r3, #0]
 800cf1e:	60fb      	str	r3, [r7, #12]
 800cf20:	e00c      	b.n	800cf3c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800cf22:	68fb      	ldr	r3, [r7, #12]
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	681b      	ldr	r3, [r3, #0]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d103      	bne.n	800cf36 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800cf2e:	683b      	ldr	r3, [r7, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	68db      	ldr	r3, [r3, #12]
 800cf3a:	60fb      	str	r3, [r7, #12]
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d1ef      	bne.n	800cf22 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800cf42:	bf00      	nop
 800cf44:	3710      	adds	r7, #16
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bd80      	pop	{r7, pc}
 800cf4a:	bf00      	nop
 800cf4c:	20007200 	.word	0x20007200
 800cf50:	2000720c 	.word	0x2000720c
 800cf54:	20007208 	.word	0x20007208

0800cf58 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b082      	sub	sp, #8
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d007      	beq.n	800cf78 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f7ff fc3d 	bl	800c7ec <tcp_segs_free>
    pcb->ooseq = NULL;
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	2200      	movs	r2, #0
 800cf76:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800cf78:	bf00      	nop
 800cf7a:	3708      	adds	r7, #8
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}

0800cf80 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800cf80:	b590      	push	{r4, r7, lr}
 800cf82:	b08d      	sub	sp, #52	; 0x34
 800cf84:	af04      	add	r7, sp, #16
 800cf86:	6078      	str	r0, [r7, #4]
 800cf88:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d105      	bne.n	800cf9c <tcp_input+0x1c>
 800cf90:	4b9b      	ldr	r3, [pc, #620]	; (800d200 <tcp_input+0x280>)
 800cf92:	2283      	movs	r2, #131	; 0x83
 800cf94:	499b      	ldr	r1, [pc, #620]	; (800d204 <tcp_input+0x284>)
 800cf96:	489c      	ldr	r0, [pc, #624]	; (800d208 <tcp_input+0x288>)
 800cf98:	f006 ff34 	bl	8013e04 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	4a9a      	ldr	r2, [pc, #616]	; (800d20c <tcp_input+0x28c>)
 800cfa2:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	895b      	ldrh	r3, [r3, #10]
 800cfa8:	2b13      	cmp	r3, #19
 800cfaa:	f240 83c4 	bls.w	800d736 <tcp_input+0x7b6>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cfae:	4b98      	ldr	r3, [pc, #608]	; (800d210 <tcp_input+0x290>)
 800cfb0:	695b      	ldr	r3, [r3, #20]
 800cfb2:	4a97      	ldr	r2, [pc, #604]	; (800d210 <tcp_input+0x290>)
 800cfb4:	6812      	ldr	r2, [r2, #0]
 800cfb6:	4611      	mov	r1, r2
 800cfb8:	4618      	mov	r0, r3
 800cfba:	f005 ff8b 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 800cfbe:	4603      	mov	r3, r0
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	f040 83ba 	bne.w	800d73a <tcp_input+0x7ba>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800cfc6:	4b92      	ldr	r3, [pc, #584]	; (800d210 <tcp_input+0x290>)
 800cfc8:	695b      	ldr	r3, [r3, #20]
 800cfca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800cfce:	2be0      	cmp	r3, #224	; 0xe0
 800cfd0:	f000 83b3 	beq.w	800d73a <tcp_input+0x7ba>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800cfd4:	4b8d      	ldr	r3, [pc, #564]	; (800d20c <tcp_input+0x28c>)
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	899b      	ldrh	r3, [r3, #12]
 800cfda:	b29b      	uxth	r3, r3
 800cfdc:	4618      	mov	r0, r3
 800cfde:	f7fc fee4 	bl	8009daa <lwip_htons>
 800cfe2:	4603      	mov	r3, r0
 800cfe4:	0b1b      	lsrs	r3, r3, #12
 800cfe6:	b29b      	uxth	r3, r3
 800cfe8:	b2db      	uxtb	r3, r3
 800cfea:	009b      	lsls	r3, r3, #2
 800cfec:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800cfee:	7cbb      	ldrb	r3, [r7, #18]
 800cff0:	2b13      	cmp	r3, #19
 800cff2:	f240 83a4 	bls.w	800d73e <tcp_input+0x7be>
 800cff6:	7cbb      	ldrb	r3, [r7, #18]
 800cff8:	b29a      	uxth	r2, r3
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	891b      	ldrh	r3, [r3, #8]
 800cffe:	429a      	cmp	r2, r3
 800d000:	f200 839d 	bhi.w	800d73e <tcp_input+0x7be>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d004:	7cbb      	ldrb	r3, [r7, #18]
 800d006:	b29b      	uxth	r3, r3
 800d008:	3b14      	subs	r3, #20
 800d00a:	b29a      	uxth	r2, r3
 800d00c:	4b81      	ldr	r3, [pc, #516]	; (800d214 <tcp_input+0x294>)
 800d00e:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d010:	4b81      	ldr	r3, [pc, #516]	; (800d218 <tcp_input+0x298>)
 800d012:	2200      	movs	r2, #0
 800d014:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	895a      	ldrh	r2, [r3, #10]
 800d01a:	7cbb      	ldrb	r3, [r7, #18]
 800d01c:	b29b      	uxth	r3, r3
 800d01e:	429a      	cmp	r2, r3
 800d020:	d309      	bcc.n	800d036 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d022:	4b7c      	ldr	r3, [pc, #496]	; (800d214 <tcp_input+0x294>)
 800d024:	881a      	ldrh	r2, [r3, #0]
 800d026:	4b7d      	ldr	r3, [pc, #500]	; (800d21c <tcp_input+0x29c>)
 800d028:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d02a:	7cbb      	ldrb	r3, [r7, #18]
 800d02c:	4619      	mov	r1, r3
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7fe f8e8 	bl	800b204 <pbuf_remove_header>
 800d034:	e04e      	b.n	800d0d4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d105      	bne.n	800d04a <tcp_input+0xca>
 800d03e:	4b70      	ldr	r3, [pc, #448]	; (800d200 <tcp_input+0x280>)
 800d040:	22c2      	movs	r2, #194	; 0xc2
 800d042:	4977      	ldr	r1, [pc, #476]	; (800d220 <tcp_input+0x2a0>)
 800d044:	4870      	ldr	r0, [pc, #448]	; (800d208 <tcp_input+0x288>)
 800d046:	f006 fedd 	bl	8013e04 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d04a:	2114      	movs	r1, #20
 800d04c:	6878      	ldr	r0, [r7, #4]
 800d04e:	f7fe f8d9 	bl	800b204 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	895a      	ldrh	r2, [r3, #10]
 800d056:	4b71      	ldr	r3, [pc, #452]	; (800d21c <tcp_input+0x29c>)
 800d058:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d05a:	4b6e      	ldr	r3, [pc, #440]	; (800d214 <tcp_input+0x294>)
 800d05c:	881a      	ldrh	r2, [r3, #0]
 800d05e:	4b6f      	ldr	r3, [pc, #444]	; (800d21c <tcp_input+0x29c>)
 800d060:	881b      	ldrh	r3, [r3, #0]
 800d062:	1ad3      	subs	r3, r2, r3
 800d064:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d066:	4b6d      	ldr	r3, [pc, #436]	; (800d21c <tcp_input+0x29c>)
 800d068:	881b      	ldrh	r3, [r3, #0]
 800d06a:	4619      	mov	r1, r3
 800d06c:	6878      	ldr	r0, [r7, #4]
 800d06e:	f7fe f8c9 	bl	800b204 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d072:	687b      	ldr	r3, [r7, #4]
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	895b      	ldrh	r3, [r3, #10]
 800d078:	8a3a      	ldrh	r2, [r7, #16]
 800d07a:	429a      	cmp	r2, r3
 800d07c:	f200 8361 	bhi.w	800d742 <tcp_input+0x7c2>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	685b      	ldr	r3, [r3, #4]
 800d086:	4a64      	ldr	r2, [pc, #400]	; (800d218 <tcp_input+0x298>)
 800d088:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	681b      	ldr	r3, [r3, #0]
 800d08e:	8a3a      	ldrh	r2, [r7, #16]
 800d090:	4611      	mov	r1, r2
 800d092:	4618      	mov	r0, r3
 800d094:	f7fe f8b6 	bl	800b204 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	891a      	ldrh	r2, [r3, #8]
 800d09c:	8a3b      	ldrh	r3, [r7, #16]
 800d09e:	1ad3      	subs	r3, r2, r3
 800d0a0:	b29a      	uxth	r2, r3
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	895b      	ldrh	r3, [r3, #10]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d005      	beq.n	800d0ba <tcp_input+0x13a>
 800d0ae:	4b54      	ldr	r3, [pc, #336]	; (800d200 <tcp_input+0x280>)
 800d0b0:	22df      	movs	r2, #223	; 0xdf
 800d0b2:	495c      	ldr	r1, [pc, #368]	; (800d224 <tcp_input+0x2a4>)
 800d0b4:	4854      	ldr	r0, [pc, #336]	; (800d208 <tcp_input+0x288>)
 800d0b6:	f006 fea5 	bl	8013e04 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	891a      	ldrh	r2, [r3, #8]
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	891b      	ldrh	r3, [r3, #8]
 800d0c4:	429a      	cmp	r2, r3
 800d0c6:	d005      	beq.n	800d0d4 <tcp_input+0x154>
 800d0c8:	4b4d      	ldr	r3, [pc, #308]	; (800d200 <tcp_input+0x280>)
 800d0ca:	22e0      	movs	r2, #224	; 0xe0
 800d0cc:	4956      	ldr	r1, [pc, #344]	; (800d228 <tcp_input+0x2a8>)
 800d0ce:	484e      	ldr	r0, [pc, #312]	; (800d208 <tcp_input+0x288>)
 800d0d0:	f006 fe98 	bl	8013e04 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d0d4:	4b4d      	ldr	r3, [pc, #308]	; (800d20c <tcp_input+0x28c>)
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	881b      	ldrh	r3, [r3, #0]
 800d0da:	b29b      	uxth	r3, r3
 800d0dc:	4a4b      	ldr	r2, [pc, #300]	; (800d20c <tcp_input+0x28c>)
 800d0de:	6814      	ldr	r4, [r2, #0]
 800d0e0:	4618      	mov	r0, r3
 800d0e2:	f7fc fe62 	bl	8009daa <lwip_htons>
 800d0e6:	4603      	mov	r3, r0
 800d0e8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d0ea:	4b48      	ldr	r3, [pc, #288]	; (800d20c <tcp_input+0x28c>)
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	885b      	ldrh	r3, [r3, #2]
 800d0f0:	b29b      	uxth	r3, r3
 800d0f2:	4a46      	ldr	r2, [pc, #280]	; (800d20c <tcp_input+0x28c>)
 800d0f4:	6814      	ldr	r4, [r2, #0]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7fc fe57 	bl	8009daa <lwip_htons>
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d100:	4b42      	ldr	r3, [pc, #264]	; (800d20c <tcp_input+0x28c>)
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	685b      	ldr	r3, [r3, #4]
 800d106:	4a41      	ldr	r2, [pc, #260]	; (800d20c <tcp_input+0x28c>)
 800d108:	6814      	ldr	r4, [r2, #0]
 800d10a:	4618      	mov	r0, r3
 800d10c:	f7fc fe62 	bl	8009dd4 <lwip_htonl>
 800d110:	4603      	mov	r3, r0
 800d112:	6063      	str	r3, [r4, #4]
 800d114:	6863      	ldr	r3, [r4, #4]
 800d116:	4a45      	ldr	r2, [pc, #276]	; (800d22c <tcp_input+0x2ac>)
 800d118:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d11a:	4b3c      	ldr	r3, [pc, #240]	; (800d20c <tcp_input+0x28c>)
 800d11c:	681b      	ldr	r3, [r3, #0]
 800d11e:	689b      	ldr	r3, [r3, #8]
 800d120:	4a3a      	ldr	r2, [pc, #232]	; (800d20c <tcp_input+0x28c>)
 800d122:	6814      	ldr	r4, [r2, #0]
 800d124:	4618      	mov	r0, r3
 800d126:	f7fc fe55 	bl	8009dd4 <lwip_htonl>
 800d12a:	4603      	mov	r3, r0
 800d12c:	60a3      	str	r3, [r4, #8]
 800d12e:	68a3      	ldr	r3, [r4, #8]
 800d130:	4a3f      	ldr	r2, [pc, #252]	; (800d230 <tcp_input+0x2b0>)
 800d132:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d134:	4b35      	ldr	r3, [pc, #212]	; (800d20c <tcp_input+0x28c>)
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	89db      	ldrh	r3, [r3, #14]
 800d13a:	b29b      	uxth	r3, r3
 800d13c:	4a33      	ldr	r2, [pc, #204]	; (800d20c <tcp_input+0x28c>)
 800d13e:	6814      	ldr	r4, [r2, #0]
 800d140:	4618      	mov	r0, r3
 800d142:	f7fc fe32 	bl	8009daa <lwip_htons>
 800d146:	4603      	mov	r3, r0
 800d148:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d14a:	4b30      	ldr	r3, [pc, #192]	; (800d20c <tcp_input+0x28c>)
 800d14c:	681b      	ldr	r3, [r3, #0]
 800d14e:	899b      	ldrh	r3, [r3, #12]
 800d150:	b29b      	uxth	r3, r3
 800d152:	4618      	mov	r0, r3
 800d154:	f7fc fe29 	bl	8009daa <lwip_htons>
 800d158:	4603      	mov	r3, r0
 800d15a:	b2db      	uxtb	r3, r3
 800d15c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d160:	b2da      	uxtb	r2, r3
 800d162:	4b34      	ldr	r3, [pc, #208]	; (800d234 <tcp_input+0x2b4>)
 800d164:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	891a      	ldrh	r2, [r3, #8]
 800d16a:	4b33      	ldr	r3, [pc, #204]	; (800d238 <tcp_input+0x2b8>)
 800d16c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d16e:	4b31      	ldr	r3, [pc, #196]	; (800d234 <tcp_input+0x2b4>)
 800d170:	781b      	ldrb	r3, [r3, #0]
 800d172:	f003 0303 	and.w	r3, r3, #3
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00c      	beq.n	800d194 <tcp_input+0x214>
    tcplen++;
 800d17a:	4b2f      	ldr	r3, [pc, #188]	; (800d238 <tcp_input+0x2b8>)
 800d17c:	881b      	ldrh	r3, [r3, #0]
 800d17e:	3301      	adds	r3, #1
 800d180:	b29a      	uxth	r2, r3
 800d182:	4b2d      	ldr	r3, [pc, #180]	; (800d238 <tcp_input+0x2b8>)
 800d184:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	891a      	ldrh	r2, [r3, #8]
 800d18a:	4b2b      	ldr	r3, [pc, #172]	; (800d238 <tcp_input+0x2b8>)
 800d18c:	881b      	ldrh	r3, [r3, #0]
 800d18e:	429a      	cmp	r2, r3
 800d190:	f200 82d9 	bhi.w	800d746 <tcp_input+0x7c6>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d194:	2300      	movs	r3, #0
 800d196:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d198:	4b28      	ldr	r3, [pc, #160]	; (800d23c <tcp_input+0x2bc>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	61fb      	str	r3, [r7, #28]
 800d19e:	e09d      	b.n	800d2dc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d1a0:	69fb      	ldr	r3, [r7, #28]
 800d1a2:	7d1b      	ldrb	r3, [r3, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d105      	bne.n	800d1b4 <tcp_input+0x234>
 800d1a8:	4b15      	ldr	r3, [pc, #84]	; (800d200 <tcp_input+0x280>)
 800d1aa:	22fb      	movs	r2, #251	; 0xfb
 800d1ac:	4924      	ldr	r1, [pc, #144]	; (800d240 <tcp_input+0x2c0>)
 800d1ae:	4816      	ldr	r0, [pc, #88]	; (800d208 <tcp_input+0x288>)
 800d1b0:	f006 fe28 	bl	8013e04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d1b4:	69fb      	ldr	r3, [r7, #28]
 800d1b6:	7d1b      	ldrb	r3, [r3, #20]
 800d1b8:	2b0a      	cmp	r3, #10
 800d1ba:	d105      	bne.n	800d1c8 <tcp_input+0x248>
 800d1bc:	4b10      	ldr	r3, [pc, #64]	; (800d200 <tcp_input+0x280>)
 800d1be:	22fc      	movs	r2, #252	; 0xfc
 800d1c0:	4920      	ldr	r1, [pc, #128]	; (800d244 <tcp_input+0x2c4>)
 800d1c2:	4811      	ldr	r0, [pc, #68]	; (800d208 <tcp_input+0x288>)
 800d1c4:	f006 fe1e 	bl	8013e04 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800d1c8:	69fb      	ldr	r3, [r7, #28]
 800d1ca:	7d1b      	ldrb	r3, [r3, #20]
 800d1cc:	2b01      	cmp	r3, #1
 800d1ce:	d105      	bne.n	800d1dc <tcp_input+0x25c>
 800d1d0:	4b0b      	ldr	r3, [pc, #44]	; (800d200 <tcp_input+0x280>)
 800d1d2:	22fd      	movs	r2, #253	; 0xfd
 800d1d4:	491c      	ldr	r1, [pc, #112]	; (800d248 <tcp_input+0x2c8>)
 800d1d6:	480c      	ldr	r0, [pc, #48]	; (800d208 <tcp_input+0x288>)
 800d1d8:	f006 fe14 	bl	8013e04 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	7a1b      	ldrb	r3, [r3, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d033      	beq.n	800d24c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d1e4:	69fb      	ldr	r3, [r7, #28]
 800d1e6:	7a1a      	ldrb	r2, [r3, #8]
 800d1e8:	4b09      	ldr	r3, [pc, #36]	; (800d210 <tcp_input+0x290>)
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d1f0:	3301      	adds	r3, #1
 800d1f2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d1f4:	429a      	cmp	r2, r3
 800d1f6:	d029      	beq.n	800d24c <tcp_input+0x2cc>
      prev = pcb;
 800d1f8:	69fb      	ldr	r3, [r7, #28]
 800d1fa:	61bb      	str	r3, [r7, #24]
      continue;
 800d1fc:	e06b      	b.n	800d2d6 <tcp_input+0x356>
 800d1fe:	bf00      	nop
 800d200:	08016084 	.word	0x08016084
 800d204:	080160b8 	.word	0x080160b8
 800d208:	080160d0 	.word	0x080160d0
 800d20c:	200000f0 	.word	0x200000f0
 800d210:	20003cbc 	.word	0x20003cbc
 800d214:	200000f4 	.word	0x200000f4
 800d218:	200000f8 	.word	0x200000f8
 800d21c:	200000f6 	.word	0x200000f6
 800d220:	080160f8 	.word	0x080160f8
 800d224:	08016108 	.word	0x08016108
 800d228:	08016114 	.word	0x08016114
 800d22c:	20000100 	.word	0x20000100
 800d230:	20000104 	.word	0x20000104
 800d234:	2000010c 	.word	0x2000010c
 800d238:	2000010a 	.word	0x2000010a
 800d23c:	20007200 	.word	0x20007200
 800d240:	08016134 	.word	0x08016134
 800d244:	0801615c 	.word	0x0801615c
 800d248:	08016188 	.word	0x08016188
    }

    if (pcb->remote_port == tcphdr->src &&
 800d24c:	69fb      	ldr	r3, [r7, #28]
 800d24e:	8b1a      	ldrh	r2, [r3, #24]
 800d250:	4b94      	ldr	r3, [pc, #592]	; (800d4a4 <tcp_input+0x524>)
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	881b      	ldrh	r3, [r3, #0]
 800d256:	b29b      	uxth	r3, r3
 800d258:	429a      	cmp	r2, r3
 800d25a:	d13a      	bne.n	800d2d2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800d25c:	69fb      	ldr	r3, [r7, #28]
 800d25e:	8ada      	ldrh	r2, [r3, #22]
 800d260:	4b90      	ldr	r3, [pc, #576]	; (800d4a4 <tcp_input+0x524>)
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	885b      	ldrh	r3, [r3, #2]
 800d266:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800d268:	429a      	cmp	r2, r3
 800d26a:	d132      	bne.n	800d2d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d26c:	69fb      	ldr	r3, [r7, #28]
 800d26e:	685a      	ldr	r2, [r3, #4]
 800d270:	4b8d      	ldr	r3, [pc, #564]	; (800d4a8 <tcp_input+0x528>)
 800d272:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800d274:	429a      	cmp	r2, r3
 800d276:	d12c      	bne.n	800d2d2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d278:	69fb      	ldr	r3, [r7, #28]
 800d27a:	681a      	ldr	r2, [r3, #0]
 800d27c:	4b8a      	ldr	r3, [pc, #552]	; (800d4a8 <tcp_input+0x528>)
 800d27e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d280:	429a      	cmp	r2, r3
 800d282:	d126      	bne.n	800d2d2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800d284:	69fb      	ldr	r3, [r7, #28]
 800d286:	68db      	ldr	r3, [r3, #12]
 800d288:	69fa      	ldr	r2, [r7, #28]
 800d28a:	429a      	cmp	r2, r3
 800d28c:	d106      	bne.n	800d29c <tcp_input+0x31c>
 800d28e:	4b87      	ldr	r3, [pc, #540]	; (800d4ac <tcp_input+0x52c>)
 800d290:	f240 120d 	movw	r2, #269	; 0x10d
 800d294:	4986      	ldr	r1, [pc, #536]	; (800d4b0 <tcp_input+0x530>)
 800d296:	4887      	ldr	r0, [pc, #540]	; (800d4b4 <tcp_input+0x534>)
 800d298:	f006 fdb4 	bl	8013e04 <iprintf>
      if (prev != NULL) {
 800d29c:	69bb      	ldr	r3, [r7, #24]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00a      	beq.n	800d2b8 <tcp_input+0x338>
        prev->next = pcb->next;
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	68da      	ldr	r2, [r3, #12]
 800d2a6:	69bb      	ldr	r3, [r7, #24]
 800d2a8:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800d2aa:	4b83      	ldr	r3, [pc, #524]	; (800d4b8 <tcp_input+0x538>)
 800d2ac:	681a      	ldr	r2, [r3, #0]
 800d2ae:	69fb      	ldr	r3, [r7, #28]
 800d2b0:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800d2b2:	4a81      	ldr	r2, [pc, #516]	; (800d4b8 <tcp_input+0x538>)
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800d2b8:	69fb      	ldr	r3, [r7, #28]
 800d2ba:	68db      	ldr	r3, [r3, #12]
 800d2bc:	69fa      	ldr	r2, [r7, #28]
 800d2be:	429a      	cmp	r2, r3
 800d2c0:	d111      	bne.n	800d2e6 <tcp_input+0x366>
 800d2c2:	4b7a      	ldr	r3, [pc, #488]	; (800d4ac <tcp_input+0x52c>)
 800d2c4:	f240 1215 	movw	r2, #277	; 0x115
 800d2c8:	497c      	ldr	r1, [pc, #496]	; (800d4bc <tcp_input+0x53c>)
 800d2ca:	487a      	ldr	r0, [pc, #488]	; (800d4b4 <tcp_input+0x534>)
 800d2cc:	f006 fd9a 	bl	8013e04 <iprintf>
      break;
 800d2d0:	e009      	b.n	800d2e6 <tcp_input+0x366>
    }
    prev = pcb;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2d6:	69fb      	ldr	r3, [r7, #28]
 800d2d8:	68db      	ldr	r3, [r3, #12]
 800d2da:	61fb      	str	r3, [r7, #28]
 800d2dc:	69fb      	ldr	r3, [r7, #28]
 800d2de:	2b00      	cmp	r3, #0
 800d2e0:	f47f af5e 	bne.w	800d1a0 <tcp_input+0x220>
 800d2e4:	e000      	b.n	800d2e8 <tcp_input+0x368>
      break;
 800d2e6:	bf00      	nop
  }

  if (pcb == NULL) {
 800d2e8:	69fb      	ldr	r3, [r7, #28]
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	f040 8095 	bne.w	800d41a <tcp_input+0x49a>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2f0:	4b73      	ldr	r3, [pc, #460]	; (800d4c0 <tcp_input+0x540>)
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	61fb      	str	r3, [r7, #28]
 800d2f6:	e03f      	b.n	800d378 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d2f8:	69fb      	ldr	r3, [r7, #28]
 800d2fa:	7d1b      	ldrb	r3, [r3, #20]
 800d2fc:	2b0a      	cmp	r3, #10
 800d2fe:	d006      	beq.n	800d30e <tcp_input+0x38e>
 800d300:	4b6a      	ldr	r3, [pc, #424]	; (800d4ac <tcp_input+0x52c>)
 800d302:	f240 121f 	movw	r2, #287	; 0x11f
 800d306:	496f      	ldr	r1, [pc, #444]	; (800d4c4 <tcp_input+0x544>)
 800d308:	486a      	ldr	r0, [pc, #424]	; (800d4b4 <tcp_input+0x534>)
 800d30a:	f006 fd7b 	bl	8013e04 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	7a1b      	ldrb	r3, [r3, #8]
 800d312:	2b00      	cmp	r3, #0
 800d314:	d009      	beq.n	800d32a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d316:	69fb      	ldr	r3, [r7, #28]
 800d318:	7a1a      	ldrb	r2, [r3, #8]
 800d31a:	4b63      	ldr	r3, [pc, #396]	; (800d4a8 <tcp_input+0x528>)
 800d31c:	685b      	ldr	r3, [r3, #4]
 800d31e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d322:	3301      	adds	r3, #1
 800d324:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800d326:	429a      	cmp	r2, r3
 800d328:	d122      	bne.n	800d370 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800d32a:	69fb      	ldr	r3, [r7, #28]
 800d32c:	8b1a      	ldrh	r2, [r3, #24]
 800d32e:	4b5d      	ldr	r3, [pc, #372]	; (800d4a4 <tcp_input+0x524>)
 800d330:	681b      	ldr	r3, [r3, #0]
 800d332:	881b      	ldrh	r3, [r3, #0]
 800d334:	b29b      	uxth	r3, r3
 800d336:	429a      	cmp	r2, r3
 800d338:	d11b      	bne.n	800d372 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800d33a:	69fb      	ldr	r3, [r7, #28]
 800d33c:	8ada      	ldrh	r2, [r3, #22]
 800d33e:	4b59      	ldr	r3, [pc, #356]	; (800d4a4 <tcp_input+0x524>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	885b      	ldrh	r3, [r3, #2]
 800d344:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800d346:	429a      	cmp	r2, r3
 800d348:	d113      	bne.n	800d372 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d34a:	69fb      	ldr	r3, [r7, #28]
 800d34c:	685a      	ldr	r2, [r3, #4]
 800d34e:	4b56      	ldr	r3, [pc, #344]	; (800d4a8 <tcp_input+0x528>)
 800d350:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800d352:	429a      	cmp	r2, r3
 800d354:	d10d      	bne.n	800d372 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800d356:	69fb      	ldr	r3, [r7, #28]
 800d358:	681a      	ldr	r2, [r3, #0]
 800d35a:	4b53      	ldr	r3, [pc, #332]	; (800d4a8 <tcp_input+0x528>)
 800d35c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800d35e:	429a      	cmp	r2, r3
 800d360:	d107      	bne.n	800d372 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800d362:	69f8      	ldr	r0, [r7, #28]
 800d364:	f000 fb54 	bl	800da10 <tcp_timewait_input>
        }
        pbuf_free(p);
 800d368:	6878      	ldr	r0, [r7, #4]
 800d36a:	f7fd ffd1 	bl	800b310 <pbuf_free>
        return;
 800d36e:	e1f0      	b.n	800d752 <tcp_input+0x7d2>
        continue;
 800d370:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d372:	69fb      	ldr	r3, [r7, #28]
 800d374:	68db      	ldr	r3, [r3, #12]
 800d376:	61fb      	str	r3, [r7, #28]
 800d378:	69fb      	ldr	r3, [r7, #28]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d1bc      	bne.n	800d2f8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800d37e:	2300      	movs	r3, #0
 800d380:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d382:	4b51      	ldr	r3, [pc, #324]	; (800d4c8 <tcp_input+0x548>)
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	617b      	str	r3, [r7, #20]
 800d388:	e02a      	b.n	800d3e0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	7a1b      	ldrb	r3, [r3, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d00c      	beq.n	800d3ac <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800d392:	697b      	ldr	r3, [r7, #20]
 800d394:	7a1a      	ldrb	r2, [r3, #8]
 800d396:	4b44      	ldr	r3, [pc, #272]	; (800d4a8 <tcp_input+0x528>)
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800d39e:	3301      	adds	r3, #1
 800d3a0:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d002      	beq.n	800d3ac <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800d3a6:	697b      	ldr	r3, [r7, #20]
 800d3a8:	61bb      	str	r3, [r7, #24]
        continue;
 800d3aa:	e016      	b.n	800d3da <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	8ada      	ldrh	r2, [r3, #22]
 800d3b0:	4b3c      	ldr	r3, [pc, #240]	; (800d4a4 <tcp_input+0x524>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	885b      	ldrh	r3, [r3, #2]
 800d3b6:	b29b      	uxth	r3, r3
 800d3b8:	429a      	cmp	r2, r3
 800d3ba:	d10c      	bne.n	800d3d6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	681a      	ldr	r2, [r3, #0]
 800d3c0:	4b39      	ldr	r3, [pc, #228]	; (800d4a8 <tcp_input+0x528>)
 800d3c2:	695b      	ldr	r3, [r3, #20]
 800d3c4:	429a      	cmp	r2, r3
 800d3c6:	d00f      	beq.n	800d3e8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	2b00      	cmp	r3, #0
 800d3cc:	d00d      	beq.n	800d3ea <tcp_input+0x46a>
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d009      	beq.n	800d3ea <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	617b      	str	r3, [r7, #20]
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	2b00      	cmp	r3, #0
 800d3e4:	d1d1      	bne.n	800d38a <tcp_input+0x40a>
 800d3e6:	e000      	b.n	800d3ea <tcp_input+0x46a>
            break;
 800d3e8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800d3ea:	697b      	ldr	r3, [r7, #20]
 800d3ec:	2b00      	cmp	r3, #0
 800d3ee:	d014      	beq.n	800d41a <tcp_input+0x49a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800d3f0:	69bb      	ldr	r3, [r7, #24]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d00a      	beq.n	800d40c <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	68da      	ldr	r2, [r3, #12]
 800d3fa:	69bb      	ldr	r3, [r7, #24]
 800d3fc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800d3fe:	4b32      	ldr	r3, [pc, #200]	; (800d4c8 <tcp_input+0x548>)
 800d400:	681a      	ldr	r2, [r3, #0]
 800d402:	697b      	ldr	r3, [r7, #20]
 800d404:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800d406:	4a30      	ldr	r2, [pc, #192]	; (800d4c8 <tcp_input+0x548>)
 800d408:	697b      	ldr	r3, [r7, #20]
 800d40a:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800d40c:	6978      	ldr	r0, [r7, #20]
 800d40e:	f000 fa01 	bl	800d814 <tcp_listen_input>
      }
      pbuf_free(p);
 800d412:	6878      	ldr	r0, [r7, #4]
 800d414:	f7fd ff7c 	bl	800b310 <pbuf_free>
      return;
 800d418:	e19b      	b.n	800d752 <tcp_input+0x7d2>
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800d41a:	69fb      	ldr	r3, [r7, #28]
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	f000 8160 	beq.w	800d6e2 <tcp_input+0x762>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800d422:	4b2a      	ldr	r3, [pc, #168]	; (800d4cc <tcp_input+0x54c>)
 800d424:	2200      	movs	r2, #0
 800d426:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	891a      	ldrh	r2, [r3, #8]
 800d42c:	4b27      	ldr	r3, [pc, #156]	; (800d4cc <tcp_input+0x54c>)
 800d42e:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800d430:	4a26      	ldr	r2, [pc, #152]	; (800d4cc <tcp_input+0x54c>)
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800d436:	4b1b      	ldr	r3, [pc, #108]	; (800d4a4 <tcp_input+0x524>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4a24      	ldr	r2, [pc, #144]	; (800d4cc <tcp_input+0x54c>)
 800d43c:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800d43e:	4b24      	ldr	r3, [pc, #144]	; (800d4d0 <tcp_input+0x550>)
 800d440:	2200      	movs	r2, #0
 800d442:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800d444:	4b23      	ldr	r3, [pc, #140]	; (800d4d4 <tcp_input+0x554>)
 800d446:	2200      	movs	r2, #0
 800d448:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800d44a:	4b23      	ldr	r3, [pc, #140]	; (800d4d8 <tcp_input+0x558>)
 800d44c:	2200      	movs	r2, #0
 800d44e:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800d450:	4b22      	ldr	r3, [pc, #136]	; (800d4dc <tcp_input+0x55c>)
 800d452:	781b      	ldrb	r3, [r3, #0]
 800d454:	f003 0308 	and.w	r3, r3, #8
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d006      	beq.n	800d46a <tcp_input+0x4ea>
      p->flags |= PBUF_FLAG_PUSH;
 800d45c:	687b      	ldr	r3, [r7, #4]
 800d45e:	7b5b      	ldrb	r3, [r3, #13]
 800d460:	f043 0301 	orr.w	r3, r3, #1
 800d464:	b2da      	uxtb	r2, r3
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800d46a:	69fb      	ldr	r3, [r7, #28]
 800d46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d038      	beq.n	800d4e4 <tcp_input+0x564>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d472:	69f8      	ldr	r0, [r7, #28]
 800d474:	f7ff f93e 	bl	800c6f4 <tcp_process_refused_data>
 800d478:	4603      	mov	r3, r0
 800d47a:	f113 0f0d 	cmn.w	r3, #13
 800d47e:	d007      	beq.n	800d490 <tcp_input+0x510>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d480:	69fb      	ldr	r3, [r7, #28]
 800d482:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800d484:	2b00      	cmp	r3, #0
 800d486:	d02d      	beq.n	800d4e4 <tcp_input+0x564>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800d488:	4b15      	ldr	r3, [pc, #84]	; (800d4e0 <tcp_input+0x560>)
 800d48a:	881b      	ldrh	r3, [r3, #0]
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d029      	beq.n	800d4e4 <tcp_input+0x564>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800d490:	69fb      	ldr	r3, [r7, #28]
 800d492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800d494:	2b00      	cmp	r3, #0
 800d496:	f040 8104 	bne.w	800d6a2 <tcp_input+0x722>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800d49a:	69f8      	ldr	r0, [r7, #28]
 800d49c:	f003 f9be 	bl	801081c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800d4a0:	e0ff      	b.n	800d6a2 <tcp_input+0x722>
 800d4a2:	bf00      	nop
 800d4a4:	200000f0 	.word	0x200000f0
 800d4a8:	20003cbc 	.word	0x20003cbc
 800d4ac:	08016084 	.word	0x08016084
 800d4b0:	080161b0 	.word	0x080161b0
 800d4b4:	080160d0 	.word	0x080160d0
 800d4b8:	20007200 	.word	0x20007200
 800d4bc:	080161dc 	.word	0x080161dc
 800d4c0:	20007210 	.word	0x20007210
 800d4c4:	08016208 	.word	0x08016208
 800d4c8:	20007208 	.word	0x20007208
 800d4cc:	200000e0 	.word	0x200000e0
 800d4d0:	20000110 	.word	0x20000110
 800d4d4:	2000010d 	.word	0x2000010d
 800d4d8:	20000108 	.word	0x20000108
 800d4dc:	2000010c 	.word	0x2000010c
 800d4e0:	2000010a 	.word	0x2000010a
      }
    }
    tcp_input_pcb = pcb;
 800d4e4:	4a9c      	ldr	r2, [pc, #624]	; (800d758 <tcp_input+0x7d8>)
 800d4e6:	69fb      	ldr	r3, [r7, #28]
 800d4e8:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800d4ea:	69f8      	ldr	r0, [r7, #28]
 800d4ec:	f000 fb0a 	bl	800db04 <tcp_process>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800d4f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d4f8:	f113 0f0d 	cmn.w	r3, #13
 800d4fc:	f000 80d3 	beq.w	800d6a6 <tcp_input+0x726>
      if (recv_flags & TF_RESET) {
 800d500:	4b96      	ldr	r3, [pc, #600]	; (800d75c <tcp_input+0x7dc>)
 800d502:	781b      	ldrb	r3, [r3, #0]
 800d504:	f003 0308 	and.w	r3, r3, #8
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d015      	beq.n	800d538 <tcp_input+0x5b8>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800d50c:	69fb      	ldr	r3, [r7, #28]
 800d50e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d512:	2b00      	cmp	r3, #0
 800d514:	d008      	beq.n	800d528 <tcp_input+0x5a8>
 800d516:	69fb      	ldr	r3, [r7, #28]
 800d518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d51c:	69fa      	ldr	r2, [r7, #28]
 800d51e:	6912      	ldr	r2, [r2, #16]
 800d520:	f06f 010d 	mvn.w	r1, #13
 800d524:	4610      	mov	r0, r2
 800d526:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d528:	69f9      	ldr	r1, [r7, #28]
 800d52a:	488d      	ldr	r0, [pc, #564]	; (800d760 <tcp_input+0x7e0>)
 800d52c:	f7ff fbb0 	bl	800cc90 <tcp_pcb_remove>
        tcp_free(pcb);
 800d530:	69f8      	ldr	r0, [r7, #28]
 800d532:	f7fe f99d 	bl	800b870 <tcp_free>
 800d536:	e0c1      	b.n	800d6bc <tcp_input+0x73c>
      } else {
        err = ERR_OK;
 800d538:	2300      	movs	r3, #0
 800d53a:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800d53c:	4b89      	ldr	r3, [pc, #548]	; (800d764 <tcp_input+0x7e4>)
 800d53e:	881b      	ldrh	r3, [r3, #0]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d01d      	beq.n	800d580 <tcp_input+0x600>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800d544:	4b87      	ldr	r3, [pc, #540]	; (800d764 <tcp_input+0x7e4>)
 800d546:	881b      	ldrh	r3, [r3, #0]
 800d548:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800d54a:	69fb      	ldr	r3, [r7, #28]
 800d54c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d550:	2b00      	cmp	r3, #0
 800d552:	d00a      	beq.n	800d56a <tcp_input+0x5ea>
 800d554:	69fb      	ldr	r3, [r7, #28]
 800d556:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d55a:	69fa      	ldr	r2, [r7, #28]
 800d55c:	6910      	ldr	r0, [r2, #16]
 800d55e:	89fa      	ldrh	r2, [r7, #14]
 800d560:	69f9      	ldr	r1, [r7, #28]
 800d562:	4798      	blx	r3
 800d564:	4603      	mov	r3, r0
 800d566:	74fb      	strb	r3, [r7, #19]
 800d568:	e001      	b.n	800d56e <tcp_input+0x5ee>
 800d56a:	2300      	movs	r3, #0
 800d56c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d56e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d572:	f113 0f0d 	cmn.w	r3, #13
 800d576:	f000 8098 	beq.w	800d6aa <tcp_input+0x72a>
              goto aborted;
            }
          }
          recv_acked = 0;
 800d57a:	4b7a      	ldr	r3, [pc, #488]	; (800d764 <tcp_input+0x7e4>)
 800d57c:	2200      	movs	r2, #0
 800d57e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800d580:	69f8      	ldr	r0, [r7, #28]
 800d582:	f000 f907 	bl	800d794 <tcp_input_delayed_close>
 800d586:	4603      	mov	r3, r0
 800d588:	2b00      	cmp	r3, #0
 800d58a:	f040 8090 	bne.w	800d6ae <tcp_input+0x72e>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800d58e:	4b76      	ldr	r3, [pc, #472]	; (800d768 <tcp_input+0x7e8>)
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d041      	beq.n	800d61a <tcp_input+0x69a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800d596:	69fb      	ldr	r3, [r7, #28]
 800d598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d006      	beq.n	800d5ac <tcp_input+0x62c>
 800d59e:	4b73      	ldr	r3, [pc, #460]	; (800d76c <tcp_input+0x7ec>)
 800d5a0:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800d5a4:	4972      	ldr	r1, [pc, #456]	; (800d770 <tcp_input+0x7f0>)
 800d5a6:	4873      	ldr	r0, [pc, #460]	; (800d774 <tcp_input+0x7f4>)
 800d5a8:	f006 fc2c 	bl	8013e04 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800d5ac:	69fb      	ldr	r3, [r7, #28]
 800d5ae:	8b5b      	ldrh	r3, [r3, #26]
 800d5b0:	f003 0310 	and.w	r3, r3, #16
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d008      	beq.n	800d5ca <tcp_input+0x64a>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800d5b8:	4b6b      	ldr	r3, [pc, #428]	; (800d768 <tcp_input+0x7e8>)
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7fd fea7 	bl	800b310 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800d5c2:	69f8      	ldr	r0, [r7, #28]
 800d5c4:	f7fe fc3c 	bl	800be40 <tcp_abort>
            goto aborted;
 800d5c8:	e078      	b.n	800d6bc <tcp_input+0x73c>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800d5ca:	69fb      	ldr	r3, [r7, #28]
 800d5cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5d0:	2b00      	cmp	r3, #0
 800d5d2:	d00c      	beq.n	800d5ee <tcp_input+0x66e>
 800d5d4:	69fb      	ldr	r3, [r7, #28]
 800d5d6:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d5da:	69fb      	ldr	r3, [r7, #28]
 800d5dc:	6918      	ldr	r0, [r3, #16]
 800d5de:	4b62      	ldr	r3, [pc, #392]	; (800d768 <tcp_input+0x7e8>)
 800d5e0:	681a      	ldr	r2, [r3, #0]
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	69f9      	ldr	r1, [r7, #28]
 800d5e6:	47a0      	blx	r4
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	74fb      	strb	r3, [r7, #19]
 800d5ec:	e008      	b.n	800d600 <tcp_input+0x680>
 800d5ee:	4b5e      	ldr	r3, [pc, #376]	; (800d768 <tcp_input+0x7e8>)
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	2300      	movs	r3, #0
 800d5f4:	69f9      	ldr	r1, [r7, #28]
 800d5f6:	2000      	movs	r0, #0
 800d5f8:	f7ff f952 	bl	800c8a0 <tcp_recv_null>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800d600:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d604:	f113 0f0d 	cmn.w	r3, #13
 800d608:	d053      	beq.n	800d6b2 <tcp_input+0x732>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800d60a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d003      	beq.n	800d61a <tcp_input+0x69a>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800d612:	4b55      	ldr	r3, [pc, #340]	; (800d768 <tcp_input+0x7e8>)
 800d614:	681a      	ldr	r2, [r3, #0]
 800d616:	69fb      	ldr	r3, [r7, #28]
 800d618:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800d61a:	4b50      	ldr	r3, [pc, #320]	; (800d75c <tcp_input+0x7dc>)
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	f003 0320 	and.w	r3, r3, #32
 800d622:	2b00      	cmp	r3, #0
 800d624:	d030      	beq.n	800d688 <tcp_input+0x708>
          if (pcb->refused_data != NULL) {
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d009      	beq.n	800d642 <tcp_input+0x6c2>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800d62e:	69fb      	ldr	r3, [r7, #28]
 800d630:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d632:	7b5a      	ldrb	r2, [r3, #13]
 800d634:	69fb      	ldr	r3, [r7, #28]
 800d636:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d638:	f042 0220 	orr.w	r2, r2, #32
 800d63c:	b2d2      	uxtb	r2, r2
 800d63e:	735a      	strb	r2, [r3, #13]
 800d640:	e022      	b.n	800d688 <tcp_input+0x708>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d642:	69fb      	ldr	r3, [r7, #28]
 800d644:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d646:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d64a:	d005      	beq.n	800d658 <tcp_input+0x6d8>
              pcb->rcv_wnd++;
 800d64c:	69fb      	ldr	r3, [r7, #28]
 800d64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d650:	3301      	adds	r3, #1
 800d652:	b29a      	uxth	r2, r3
 800d654:	69fb      	ldr	r3, [r7, #28]
 800d656:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800d658:	69fb      	ldr	r3, [r7, #28]
 800d65a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d00b      	beq.n	800d67a <tcp_input+0x6fa>
 800d662:	69fb      	ldr	r3, [r7, #28]
 800d664:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d668:	69fb      	ldr	r3, [r7, #28]
 800d66a:	6918      	ldr	r0, [r3, #16]
 800d66c:	2300      	movs	r3, #0
 800d66e:	2200      	movs	r2, #0
 800d670:	69f9      	ldr	r1, [r7, #28]
 800d672:	47a0      	blx	r4
 800d674:	4603      	mov	r3, r0
 800d676:	74fb      	strb	r3, [r7, #19]
 800d678:	e001      	b.n	800d67e <tcp_input+0x6fe>
 800d67a:	2300      	movs	r3, #0
 800d67c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800d67e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d682:	f113 0f0d 	cmn.w	r3, #13
 800d686:	d016      	beq.n	800d6b6 <tcp_input+0x736>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800d688:	4b33      	ldr	r3, [pc, #204]	; (800d758 <tcp_input+0x7d8>)
 800d68a:	2200      	movs	r2, #0
 800d68c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800d68e:	69f8      	ldr	r0, [r7, #28]
 800d690:	f000 f880 	bl	800d794 <tcp_input_delayed_close>
 800d694:	4603      	mov	r3, r0
 800d696:	2b00      	cmp	r3, #0
 800d698:	d10f      	bne.n	800d6ba <tcp_input+0x73a>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800d69a:	69f8      	ldr	r0, [r7, #28]
 800d69c:	f002 fab8 	bl	800fc10 <tcp_output>
 800d6a0:	e00c      	b.n	800d6bc <tcp_input+0x73c>
        goto aborted;
 800d6a2:	bf00      	nop
 800d6a4:	e00a      	b.n	800d6bc <tcp_input+0x73c>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800d6a6:	bf00      	nop
 800d6a8:	e008      	b.n	800d6bc <tcp_input+0x73c>
              goto aborted;
 800d6aa:	bf00      	nop
 800d6ac:	e006      	b.n	800d6bc <tcp_input+0x73c>
          goto aborted;
 800d6ae:	bf00      	nop
 800d6b0:	e004      	b.n	800d6bc <tcp_input+0x73c>
            goto aborted;
 800d6b2:	bf00      	nop
 800d6b4:	e002      	b.n	800d6bc <tcp_input+0x73c>
              goto aborted;
 800d6b6:	bf00      	nop
 800d6b8:	e000      	b.n	800d6bc <tcp_input+0x73c>
          goto aborted;
 800d6ba:	bf00      	nop
    tcp_input_pcb = NULL;
 800d6bc:	4b26      	ldr	r3, [pc, #152]	; (800d758 <tcp_input+0x7d8>)
 800d6be:	2200      	movs	r2, #0
 800d6c0:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800d6c2:	4b29      	ldr	r3, [pc, #164]	; (800d768 <tcp_input+0x7e8>)
 800d6c4:	2200      	movs	r2, #0
 800d6c6:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800d6c8:	4b2b      	ldr	r3, [pc, #172]	; (800d778 <tcp_input+0x7f8>)
 800d6ca:	685b      	ldr	r3, [r3, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d03f      	beq.n	800d750 <tcp_input+0x7d0>
      pbuf_free(inseg.p);
 800d6d0:	4b29      	ldr	r3, [pc, #164]	; (800d778 <tcp_input+0x7f8>)
 800d6d2:	685b      	ldr	r3, [r3, #4]
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7fd fe1b 	bl	800b310 <pbuf_free>
      inseg.p = NULL;
 800d6da:	4b27      	ldr	r3, [pc, #156]	; (800d778 <tcp_input+0x7f8>)
 800d6dc:	2200      	movs	r2, #0
 800d6de:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800d6e0:	e036      	b.n	800d750 <tcp_input+0x7d0>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800d6e2:	4b26      	ldr	r3, [pc, #152]	; (800d77c <tcp_input+0x7fc>)
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	899b      	ldrh	r3, [r3, #12]
 800d6e8:	b29b      	uxth	r3, r3
 800d6ea:	4618      	mov	r0, r3
 800d6ec:	f7fc fb5d 	bl	8009daa <lwip_htons>
 800d6f0:	4603      	mov	r3, r0
 800d6f2:	b2db      	uxtb	r3, r3
 800d6f4:	f003 0304 	and.w	r3, r3, #4
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d118      	bne.n	800d72e <tcp_input+0x7ae>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d6fc:	4b20      	ldr	r3, [pc, #128]	; (800d780 <tcp_input+0x800>)
 800d6fe:	6819      	ldr	r1, [r3, #0]
 800d700:	4b20      	ldr	r3, [pc, #128]	; (800d784 <tcp_input+0x804>)
 800d702:	881b      	ldrh	r3, [r3, #0]
 800d704:	461a      	mov	r2, r3
 800d706:	4b20      	ldr	r3, [pc, #128]	; (800d788 <tcp_input+0x808>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d70c:	4b1b      	ldr	r3, [pc, #108]	; (800d77c <tcp_input+0x7fc>)
 800d70e:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d710:	885b      	ldrh	r3, [r3, #2]
 800d712:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d714:	4a19      	ldr	r2, [pc, #100]	; (800d77c <tcp_input+0x7fc>)
 800d716:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d718:	8812      	ldrh	r2, [r2, #0]
 800d71a:	b292      	uxth	r2, r2
 800d71c:	9202      	str	r2, [sp, #8]
 800d71e:	9301      	str	r3, [sp, #4]
 800d720:	4b1a      	ldr	r3, [pc, #104]	; (800d78c <tcp_input+0x80c>)
 800d722:	9300      	str	r3, [sp, #0]
 800d724:	4b1a      	ldr	r3, [pc, #104]	; (800d790 <tcp_input+0x810>)
 800d726:	4602      	mov	r2, r0
 800d728:	2000      	movs	r0, #0
 800d72a:	f003 f825 	bl	8010778 <tcp_rst>
    pbuf_free(p);
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f7fd fdee 	bl	800b310 <pbuf_free>
  return;
 800d734:	e00c      	b.n	800d750 <tcp_input+0x7d0>
    goto dropped;
 800d736:	bf00      	nop
 800d738:	e006      	b.n	800d748 <tcp_input+0x7c8>
    goto dropped;
 800d73a:	bf00      	nop
 800d73c:	e004      	b.n	800d748 <tcp_input+0x7c8>
    goto dropped;
 800d73e:	bf00      	nop
 800d740:	e002      	b.n	800d748 <tcp_input+0x7c8>
      goto dropped;
 800d742:	bf00      	nop
 800d744:	e000      	b.n	800d748 <tcp_input+0x7c8>
      goto dropped;
 800d746:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f7fd fde1 	bl	800b310 <pbuf_free>
 800d74e:	e000      	b.n	800d752 <tcp_input+0x7d2>
  return;
 800d750:	bf00      	nop
}
 800d752:	3724      	adds	r7, #36	; 0x24
 800d754:	46bd      	mov	sp, r7
 800d756:	bd90      	pop	{r4, r7, pc}
 800d758:	20007214 	.word	0x20007214
 800d75c:	2000010d 	.word	0x2000010d
 800d760:	20007200 	.word	0x20007200
 800d764:	20000108 	.word	0x20000108
 800d768:	20000110 	.word	0x20000110
 800d76c:	08016084 	.word	0x08016084
 800d770:	08016238 	.word	0x08016238
 800d774:	080160d0 	.word	0x080160d0
 800d778:	200000e0 	.word	0x200000e0
 800d77c:	200000f0 	.word	0x200000f0
 800d780:	20000104 	.word	0x20000104
 800d784:	2000010a 	.word	0x2000010a
 800d788:	20000100 	.word	0x20000100
 800d78c:	20003ccc 	.word	0x20003ccc
 800d790:	20003cd0 	.word	0x20003cd0

0800d794 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b082      	sub	sp, #8
 800d798:	af00      	add	r7, sp, #0
 800d79a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <tcp_input_delayed_close+0x1c>
 800d7a2:	4b17      	ldr	r3, [pc, #92]	; (800d800 <tcp_input_delayed_close+0x6c>)
 800d7a4:	f240 225a 	movw	r2, #602	; 0x25a
 800d7a8:	4916      	ldr	r1, [pc, #88]	; (800d804 <tcp_input_delayed_close+0x70>)
 800d7aa:	4817      	ldr	r0, [pc, #92]	; (800d808 <tcp_input_delayed_close+0x74>)
 800d7ac:	f006 fb2a 	bl	8013e04 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800d7b0:	4b16      	ldr	r3, [pc, #88]	; (800d80c <tcp_input_delayed_close+0x78>)
 800d7b2:	781b      	ldrb	r3, [r3, #0]
 800d7b4:	f003 0310 	and.w	r3, r3, #16
 800d7b8:	2b00      	cmp	r3, #0
 800d7ba:	d01c      	beq.n	800d7f6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	8b5b      	ldrh	r3, [r3, #26]
 800d7c0:	f003 0310 	and.w	r3, r3, #16
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d10d      	bne.n	800d7e4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d008      	beq.n	800d7e4 <tcp_input_delayed_close+0x50>
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d7d8:	687a      	ldr	r2, [r7, #4]
 800d7da:	6912      	ldr	r2, [r2, #16]
 800d7dc:	f06f 010e 	mvn.w	r1, #14
 800d7e0:	4610      	mov	r0, r2
 800d7e2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	480a      	ldr	r0, [pc, #40]	; (800d810 <tcp_input_delayed_close+0x7c>)
 800d7e8:	f7ff fa52 	bl	800cc90 <tcp_pcb_remove>
    tcp_free(pcb);
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f7fe f83f 	bl	800b870 <tcp_free>
    return 1;
 800d7f2:	2301      	movs	r3, #1
 800d7f4:	e000      	b.n	800d7f8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800d7f6:	2300      	movs	r3, #0
}
 800d7f8:	4618      	mov	r0, r3
 800d7fa:	3708      	adds	r7, #8
 800d7fc:	46bd      	mov	sp, r7
 800d7fe:	bd80      	pop	{r7, pc}
 800d800:	08016084 	.word	0x08016084
 800d804:	08016254 	.word	0x08016254
 800d808:	080160d0 	.word	0x080160d0
 800d80c:	2000010d 	.word	0x2000010d
 800d810:	20007200 	.word	0x20007200

0800d814 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800d814:	b590      	push	{r4, r7, lr}
 800d816:	b08b      	sub	sp, #44	; 0x2c
 800d818:	af04      	add	r7, sp, #16
 800d81a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800d81c:	4b6f      	ldr	r3, [pc, #444]	; (800d9dc <tcp_listen_input+0x1c8>)
 800d81e:	781b      	ldrb	r3, [r3, #0]
 800d820:	f003 0304 	and.w	r3, r3, #4
 800d824:	2b00      	cmp	r3, #0
 800d826:	f040 80d2 	bne.w	800d9ce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d106      	bne.n	800d83e <tcp_listen_input+0x2a>
 800d830:	4b6b      	ldr	r3, [pc, #428]	; (800d9e0 <tcp_listen_input+0x1cc>)
 800d832:	f240 2281 	movw	r2, #641	; 0x281
 800d836:	496b      	ldr	r1, [pc, #428]	; (800d9e4 <tcp_listen_input+0x1d0>)
 800d838:	486b      	ldr	r0, [pc, #428]	; (800d9e8 <tcp_listen_input+0x1d4>)
 800d83a:	f006 fae3 	bl	8013e04 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800d83e:	4b67      	ldr	r3, [pc, #412]	; (800d9dc <tcp_listen_input+0x1c8>)
 800d840:	781b      	ldrb	r3, [r3, #0]
 800d842:	f003 0310 	and.w	r3, r3, #16
 800d846:	2b00      	cmp	r3, #0
 800d848:	d019      	beq.n	800d87e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d84a:	4b68      	ldr	r3, [pc, #416]	; (800d9ec <tcp_listen_input+0x1d8>)
 800d84c:	6819      	ldr	r1, [r3, #0]
 800d84e:	4b68      	ldr	r3, [pc, #416]	; (800d9f0 <tcp_listen_input+0x1dc>)
 800d850:	881b      	ldrh	r3, [r3, #0]
 800d852:	461a      	mov	r2, r3
 800d854:	4b67      	ldr	r3, [pc, #412]	; (800d9f4 <tcp_listen_input+0x1e0>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d85a:	4b67      	ldr	r3, [pc, #412]	; (800d9f8 <tcp_listen_input+0x1e4>)
 800d85c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d85e:	885b      	ldrh	r3, [r3, #2]
 800d860:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800d862:	4a65      	ldr	r2, [pc, #404]	; (800d9f8 <tcp_listen_input+0x1e4>)
 800d864:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800d866:	8812      	ldrh	r2, [r2, #0]
 800d868:	b292      	uxth	r2, r2
 800d86a:	9202      	str	r2, [sp, #8]
 800d86c:	9301      	str	r3, [sp, #4]
 800d86e:	4b63      	ldr	r3, [pc, #396]	; (800d9fc <tcp_listen_input+0x1e8>)
 800d870:	9300      	str	r3, [sp, #0]
 800d872:	4b63      	ldr	r3, [pc, #396]	; (800da00 <tcp_listen_input+0x1ec>)
 800d874:	4602      	mov	r2, r0
 800d876:	6878      	ldr	r0, [r7, #4]
 800d878:	f002 ff7e 	bl	8010778 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800d87c:	e0a9      	b.n	800d9d2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800d87e:	4b57      	ldr	r3, [pc, #348]	; (800d9dc <tcp_listen_input+0x1c8>)
 800d880:	781b      	ldrb	r3, [r3, #0]
 800d882:	f003 0302 	and.w	r3, r3, #2
 800d886:	2b00      	cmp	r3, #0
 800d888:	f000 80a3 	beq.w	800d9d2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	7d5b      	ldrb	r3, [r3, #21]
 800d890:	4618      	mov	r0, r3
 800d892:	f7ff f929 	bl	800cae8 <tcp_alloc>
 800d896:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	2b00      	cmp	r3, #0
 800d89c:	d111      	bne.n	800d8c2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	699b      	ldr	r3, [r3, #24]
 800d8a2:	2b00      	cmp	r3, #0
 800d8a4:	d00a      	beq.n	800d8bc <tcp_listen_input+0xa8>
 800d8a6:	687b      	ldr	r3, [r7, #4]
 800d8a8:	699b      	ldr	r3, [r3, #24]
 800d8aa:	687a      	ldr	r2, [r7, #4]
 800d8ac:	6910      	ldr	r0, [r2, #16]
 800d8ae:	f04f 32ff 	mov.w	r2, #4294967295
 800d8b2:	2100      	movs	r1, #0
 800d8b4:	4798      	blx	r3
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	73bb      	strb	r3, [r7, #14]
      return;
 800d8ba:	e08b      	b.n	800d9d4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800d8bc:	23f0      	movs	r3, #240	; 0xf0
 800d8be:	73bb      	strb	r3, [r7, #14]
      return;
 800d8c0:	e088      	b.n	800d9d4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800d8c2:	4b50      	ldr	r3, [pc, #320]	; (800da04 <tcp_listen_input+0x1f0>)
 800d8c4:	695a      	ldr	r2, [r3, #20]
 800d8c6:	697b      	ldr	r3, [r7, #20]
 800d8c8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800d8ca:	4b4e      	ldr	r3, [pc, #312]	; (800da04 <tcp_listen_input+0x1f0>)
 800d8cc:	691a      	ldr	r2, [r3, #16]
 800d8ce:	697b      	ldr	r3, [r7, #20]
 800d8d0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	8ada      	ldrh	r2, [r3, #22]
 800d8d6:	697b      	ldr	r3, [r7, #20]
 800d8d8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800d8da:	4b47      	ldr	r3, [pc, #284]	; (800d9f8 <tcp_listen_input+0x1e4>)
 800d8dc:	681b      	ldr	r3, [r3, #0]
 800d8de:	881b      	ldrh	r3, [r3, #0]
 800d8e0:	b29a      	uxth	r2, r3
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	2203      	movs	r2, #3
 800d8ea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800d8ec:	4b41      	ldr	r3, [pc, #260]	; (800d9f4 <tcp_listen_input+0x1e0>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	1c5a      	adds	r2, r3, #1
 800d8f2:	697b      	ldr	r3, [r7, #20]
 800d8f4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800d8f6:	697b      	ldr	r3, [r7, #20]
 800d8f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800d8fe:	6978      	ldr	r0, [r7, #20]
 800d900:	f7ff fa5a 	bl	800cdb8 <tcp_next_iss>
 800d904:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800d906:	697b      	ldr	r3, [r7, #20]
 800d908:	693a      	ldr	r2, [r7, #16]
 800d90a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800d90c:	697b      	ldr	r3, [r7, #20]
 800d90e:	693a      	ldr	r2, [r7, #16]
 800d910:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800d912:	697b      	ldr	r3, [r7, #20]
 800d914:	693a      	ldr	r2, [r7, #16]
 800d916:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800d918:	697b      	ldr	r3, [r7, #20]
 800d91a:	693a      	ldr	r2, [r7, #16]
 800d91c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800d91e:	4b35      	ldr	r3, [pc, #212]	; (800d9f4 <tcp_listen_input+0x1e0>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	1e5a      	subs	r2, r3, #1
 800d924:	697b      	ldr	r3, [r7, #20]
 800d926:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	691a      	ldr	r2, [r3, #16]
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800d930:	697b      	ldr	r3, [r7, #20]
 800d932:	687a      	ldr	r2, [r7, #4]
 800d934:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	7a5b      	ldrb	r3, [r3, #9]
 800d93a:	f003 030c 	and.w	r3, r3, #12
 800d93e:	b2da      	uxtb	r2, r3
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800d944:	687b      	ldr	r3, [r7, #4]
 800d946:	7a1a      	ldrb	r2, [r3, #8]
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800d94c:	4b2e      	ldr	r3, [pc, #184]	; (800da08 <tcp_listen_input+0x1f4>)
 800d94e:	681a      	ldr	r2, [r3, #0]
 800d950:	697b      	ldr	r3, [r7, #20]
 800d952:	60da      	str	r2, [r3, #12]
 800d954:	4a2c      	ldr	r2, [pc, #176]	; (800da08 <tcp_listen_input+0x1f4>)
 800d956:	697b      	ldr	r3, [r7, #20]
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	f003 f8cf 	bl	8010afc <tcp_timer_needed>
 800d95e:	4b2b      	ldr	r3, [pc, #172]	; (800da0c <tcp_listen_input+0x1f8>)
 800d960:	2201      	movs	r2, #1
 800d962:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800d964:	6978      	ldr	r0, [r7, #20]
 800d966:	f001 fd8d 	bl	800f484 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800d96a:	4b23      	ldr	r3, [pc, #140]	; (800d9f8 <tcp_listen_input+0x1e4>)
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	89db      	ldrh	r3, [r3, #14]
 800d970:	b29a      	uxth	r2, r3
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800d978:	697b      	ldr	r3, [r7, #20]
 800d97a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d97e:	697b      	ldr	r3, [r7, #20]
 800d980:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	3304      	adds	r3, #4
 800d98c:	4618      	mov	r0, r3
 800d98e:	f005 f80b 	bl	80129a8 <ip4_route>
 800d992:	4601      	mov	r1, r0
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	3304      	adds	r3, #4
 800d998:	461a      	mov	r2, r3
 800d99a:	4620      	mov	r0, r4
 800d99c:	f7ff fa32 	bl	800ce04 <tcp_eff_send_mss_netif>
 800d9a0:	4603      	mov	r3, r0
 800d9a2:	461a      	mov	r2, r3
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800d9a8:	2112      	movs	r1, #18
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f002 f842 	bl	800fa34 <tcp_enqueue_flags>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800d9b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d004      	beq.n	800d9c6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800d9bc:	2100      	movs	r1, #0
 800d9be:	6978      	ldr	r0, [r7, #20]
 800d9c0:	f7fe f980 	bl	800bcc4 <tcp_abandon>
      return;
 800d9c4:	e006      	b.n	800d9d4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800d9c6:	6978      	ldr	r0, [r7, #20]
 800d9c8:	f002 f922 	bl	800fc10 <tcp_output>
  return;
 800d9cc:	e001      	b.n	800d9d2 <tcp_listen_input+0x1be>
    return;
 800d9ce:	bf00      	nop
 800d9d0:	e000      	b.n	800d9d4 <tcp_listen_input+0x1c0>
  return;
 800d9d2:	bf00      	nop
}
 800d9d4:	371c      	adds	r7, #28
 800d9d6:	46bd      	mov	sp, r7
 800d9d8:	bd90      	pop	{r4, r7, pc}
 800d9da:	bf00      	nop
 800d9dc:	2000010c 	.word	0x2000010c
 800d9e0:	08016084 	.word	0x08016084
 800d9e4:	0801627c 	.word	0x0801627c
 800d9e8:	080160d0 	.word	0x080160d0
 800d9ec:	20000104 	.word	0x20000104
 800d9f0:	2000010a 	.word	0x2000010a
 800d9f4:	20000100 	.word	0x20000100
 800d9f8:	200000f0 	.word	0x200000f0
 800d9fc:	20003ccc 	.word	0x20003ccc
 800da00:	20003cd0 	.word	0x20003cd0
 800da04:	20003cbc 	.word	0x20003cbc
 800da08:	20007200 	.word	0x20007200
 800da0c:	200071fc 	.word	0x200071fc

0800da10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800da10:	b580      	push	{r7, lr}
 800da12:	b086      	sub	sp, #24
 800da14:	af04      	add	r7, sp, #16
 800da16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800da18:	4b2f      	ldr	r3, [pc, #188]	; (800dad8 <tcp_timewait_input+0xc8>)
 800da1a:	781b      	ldrb	r3, [r3, #0]
 800da1c:	f003 0304 	and.w	r3, r3, #4
 800da20:	2b00      	cmp	r3, #0
 800da22:	d153      	bne.n	800dacc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d106      	bne.n	800da38 <tcp_timewait_input+0x28>
 800da2a:	4b2c      	ldr	r3, [pc, #176]	; (800dadc <tcp_timewait_input+0xcc>)
 800da2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800da30:	492b      	ldr	r1, [pc, #172]	; (800dae0 <tcp_timewait_input+0xd0>)
 800da32:	482c      	ldr	r0, [pc, #176]	; (800dae4 <tcp_timewait_input+0xd4>)
 800da34:	f006 f9e6 	bl	8013e04 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800da38:	4b27      	ldr	r3, [pc, #156]	; (800dad8 <tcp_timewait_input+0xc8>)
 800da3a:	781b      	ldrb	r3, [r3, #0]
 800da3c:	f003 0302 	and.w	r3, r3, #2
 800da40:	2b00      	cmp	r3, #0
 800da42:	d02a      	beq.n	800da9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800da44:	4b28      	ldr	r3, [pc, #160]	; (800dae8 <tcp_timewait_input+0xd8>)
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da4c:	1ad3      	subs	r3, r2, r3
 800da4e:	2b00      	cmp	r3, #0
 800da50:	db2d      	blt.n	800daae <tcp_timewait_input+0x9e>
 800da52:	4b25      	ldr	r3, [pc, #148]	; (800dae8 <tcp_timewait_input+0xd8>)
 800da54:	681a      	ldr	r2, [r3, #0]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da5a:	6879      	ldr	r1, [r7, #4]
 800da5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800da5e:	440b      	add	r3, r1
 800da60:	1ad3      	subs	r3, r2, r3
 800da62:	2b00      	cmp	r3, #0
 800da64:	dc23      	bgt.n	800daae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da66:	4b21      	ldr	r3, [pc, #132]	; (800daec <tcp_timewait_input+0xdc>)
 800da68:	6819      	ldr	r1, [r3, #0]
 800da6a:	4b21      	ldr	r3, [pc, #132]	; (800daf0 <tcp_timewait_input+0xe0>)
 800da6c:	881b      	ldrh	r3, [r3, #0]
 800da6e:	461a      	mov	r2, r3
 800da70:	4b1d      	ldr	r3, [pc, #116]	; (800dae8 <tcp_timewait_input+0xd8>)
 800da72:	681b      	ldr	r3, [r3, #0]
 800da74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da76:	4b1f      	ldr	r3, [pc, #124]	; (800daf4 <tcp_timewait_input+0xe4>)
 800da78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da7a:	885b      	ldrh	r3, [r3, #2]
 800da7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800da7e:	4a1d      	ldr	r2, [pc, #116]	; (800daf4 <tcp_timewait_input+0xe4>)
 800da80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800da82:	8812      	ldrh	r2, [r2, #0]
 800da84:	b292      	uxth	r2, r2
 800da86:	9202      	str	r2, [sp, #8]
 800da88:	9301      	str	r3, [sp, #4]
 800da8a:	4b1b      	ldr	r3, [pc, #108]	; (800daf8 <tcp_timewait_input+0xe8>)
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	4b1b      	ldr	r3, [pc, #108]	; (800dafc <tcp_timewait_input+0xec>)
 800da90:	4602      	mov	r2, r0
 800da92:	6878      	ldr	r0, [r7, #4]
 800da94:	f002 fe70 	bl	8010778 <tcp_rst>
      return;
 800da98:	e01b      	b.n	800dad2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800da9a:	4b0f      	ldr	r3, [pc, #60]	; (800dad8 <tcp_timewait_input+0xc8>)
 800da9c:	781b      	ldrb	r3, [r3, #0]
 800da9e:	f003 0301 	and.w	r3, r3, #1
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d003      	beq.n	800daae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800daa6:	4b16      	ldr	r3, [pc, #88]	; (800db00 <tcp_timewait_input+0xf0>)
 800daa8:	681a      	ldr	r2, [r3, #0]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800daae:	4b10      	ldr	r3, [pc, #64]	; (800daf0 <tcp_timewait_input+0xe0>)
 800dab0:	881b      	ldrh	r3, [r3, #0]
 800dab2:	2b00      	cmp	r3, #0
 800dab4:	d00c      	beq.n	800dad0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	8b5b      	ldrh	r3, [r3, #26]
 800daba:	f043 0302 	orr.w	r3, r3, #2
 800dabe:	b29a      	uxth	r2, r3
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800dac4:	6878      	ldr	r0, [r7, #4]
 800dac6:	f002 f8a3 	bl	800fc10 <tcp_output>
  }
  return;
 800daca:	e001      	b.n	800dad0 <tcp_timewait_input+0xc0>
    return;
 800dacc:	bf00      	nop
 800dace:	e000      	b.n	800dad2 <tcp_timewait_input+0xc2>
  return;
 800dad0:	bf00      	nop
}
 800dad2:	3708      	adds	r7, #8
 800dad4:	46bd      	mov	sp, r7
 800dad6:	bd80      	pop	{r7, pc}
 800dad8:	2000010c 	.word	0x2000010c
 800dadc:	08016084 	.word	0x08016084
 800dae0:	0801629c 	.word	0x0801629c
 800dae4:	080160d0 	.word	0x080160d0
 800dae8:	20000100 	.word	0x20000100
 800daec:	20000104 	.word	0x20000104
 800daf0:	2000010a 	.word	0x2000010a
 800daf4:	200000f0 	.word	0x200000f0
 800daf8:	20003ccc 	.word	0x20003ccc
 800dafc:	20003cd0 	.word	0x20003cd0
 800db00:	20007204 	.word	0x20007204

0800db04 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800db04:	b590      	push	{r4, r7, lr}
 800db06:	b08d      	sub	sp, #52	; 0x34
 800db08:	af04      	add	r7, sp, #16
 800db0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800db0c:	2300      	movs	r3, #0
 800db0e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2b00      	cmp	r3, #0
 800db18:	d106      	bne.n	800db28 <tcp_process+0x24>
 800db1a:	4ba5      	ldr	r3, [pc, #660]	; (800ddb0 <tcp_process+0x2ac>)
 800db1c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800db20:	49a4      	ldr	r1, [pc, #656]	; (800ddb4 <tcp_process+0x2b0>)
 800db22:	48a5      	ldr	r0, [pc, #660]	; (800ddb8 <tcp_process+0x2b4>)
 800db24:	f006 f96e 	bl	8013e04 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800db28:	4ba4      	ldr	r3, [pc, #656]	; (800ddbc <tcp_process+0x2b8>)
 800db2a:	781b      	ldrb	r3, [r3, #0]
 800db2c:	f003 0304 	and.w	r3, r3, #4
 800db30:	2b00      	cmp	r3, #0
 800db32:	d04e      	beq.n	800dbd2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	7d1b      	ldrb	r3, [r3, #20]
 800db38:	2b02      	cmp	r3, #2
 800db3a:	d108      	bne.n	800db4e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800db40:	4b9f      	ldr	r3, [pc, #636]	; (800ddc0 <tcp_process+0x2bc>)
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	429a      	cmp	r2, r3
 800db46:	d123      	bne.n	800db90 <tcp_process+0x8c>
        acceptable = 1;
 800db48:	2301      	movs	r3, #1
 800db4a:	76fb      	strb	r3, [r7, #27]
 800db4c:	e020      	b.n	800db90 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800db52:	4b9c      	ldr	r3, [pc, #624]	; (800ddc4 <tcp_process+0x2c0>)
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	429a      	cmp	r2, r3
 800db58:	d102      	bne.n	800db60 <tcp_process+0x5c>
        acceptable = 1;
 800db5a:	2301      	movs	r3, #1
 800db5c:	76fb      	strb	r3, [r7, #27]
 800db5e:	e017      	b.n	800db90 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800db60:	4b98      	ldr	r3, [pc, #608]	; (800ddc4 <tcp_process+0x2c0>)
 800db62:	681a      	ldr	r2, [r3, #0]
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	db10      	blt.n	800db90 <tcp_process+0x8c>
 800db6e:	4b95      	ldr	r3, [pc, #596]	; (800ddc4 <tcp_process+0x2c0>)
 800db70:	681a      	ldr	r2, [r3, #0]
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db76:	6879      	ldr	r1, [r7, #4]
 800db78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800db7a:	440b      	add	r3, r1
 800db7c:	1ad3      	subs	r3, r2, r3
 800db7e:	2b00      	cmp	r3, #0
 800db80:	dc06      	bgt.n	800db90 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	8b5b      	ldrh	r3, [r3, #26]
 800db86:	f043 0302 	orr.w	r3, r3, #2
 800db8a:	b29a      	uxth	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800db90:	7efb      	ldrb	r3, [r7, #27]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d01b      	beq.n	800dbce <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	7d1b      	ldrb	r3, [r3, #20]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d106      	bne.n	800dbac <tcp_process+0xa8>
 800db9e:	4b84      	ldr	r3, [pc, #528]	; (800ddb0 <tcp_process+0x2ac>)
 800dba0:	f44f 724e 	mov.w	r2, #824	; 0x338
 800dba4:	4988      	ldr	r1, [pc, #544]	; (800ddc8 <tcp_process+0x2c4>)
 800dba6:	4884      	ldr	r0, [pc, #528]	; (800ddb8 <tcp_process+0x2b4>)
 800dba8:	f006 f92c 	bl	8013e04 <iprintf>
      recv_flags |= TF_RESET;
 800dbac:	4b87      	ldr	r3, [pc, #540]	; (800ddcc <tcp_process+0x2c8>)
 800dbae:	781b      	ldrb	r3, [r3, #0]
 800dbb0:	f043 0308 	orr.w	r3, r3, #8
 800dbb4:	b2da      	uxtb	r2, r3
 800dbb6:	4b85      	ldr	r3, [pc, #532]	; (800ddcc <tcp_process+0x2c8>)
 800dbb8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	8b5b      	ldrh	r3, [r3, #26]
 800dbbe:	f023 0301 	bic.w	r3, r3, #1
 800dbc2:	b29a      	uxth	r2, r3
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800dbc8:	f06f 030d 	mvn.w	r3, #13
 800dbcc:	e37a      	b.n	800e2c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e378      	b.n	800e2c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800dbd2:	4b7a      	ldr	r3, [pc, #488]	; (800ddbc <tcp_process+0x2b8>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	f003 0302 	and.w	r3, r3, #2
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d010      	beq.n	800dc00 <tcp_process+0xfc>
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	7d1b      	ldrb	r3, [r3, #20]
 800dbe2:	2b02      	cmp	r3, #2
 800dbe4:	d00c      	beq.n	800dc00 <tcp_process+0xfc>
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7d1b      	ldrb	r3, [r3, #20]
 800dbea:	2b03      	cmp	r3, #3
 800dbec:	d008      	beq.n	800dc00 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	8b5b      	ldrh	r3, [r3, #26]
 800dbf2:	f043 0302 	orr.w	r3, r3, #2
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	e361      	b.n	800e2c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	8b5b      	ldrh	r3, [r3, #26]
 800dc04:	f003 0310 	and.w	r3, r3, #16
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d103      	bne.n	800dc14 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800dc0c:	4b70      	ldr	r3, [pc, #448]	; (800ddd0 <tcp_process+0x2cc>)
 800dc0e:	681a      	ldr	r2, [r3, #0]
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	2200      	movs	r2, #0
 800dc18:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800dc1c:	687b      	ldr	r3, [r7, #4]
 800dc1e:	2200      	movs	r2, #0
 800dc20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800dc24:	6878      	ldr	r0, [r7, #4]
 800dc26:	f001 fc2d 	bl	800f484 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	7d1b      	ldrb	r3, [r3, #20]
 800dc2e:	3b02      	subs	r3, #2
 800dc30:	2b07      	cmp	r3, #7
 800dc32:	f200 8337 	bhi.w	800e2a4 <tcp_process+0x7a0>
 800dc36:	a201      	add	r2, pc, #4	; (adr r2, 800dc3c <tcp_process+0x138>)
 800dc38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dc3c:	0800dc5d 	.word	0x0800dc5d
 800dc40:	0800de8d 	.word	0x0800de8d
 800dc44:	0800e005 	.word	0x0800e005
 800dc48:	0800e02f 	.word	0x0800e02f
 800dc4c:	0800e153 	.word	0x0800e153
 800dc50:	0800e005 	.word	0x0800e005
 800dc54:	0800e1df 	.word	0x0800e1df
 800dc58:	0800e26f 	.word	0x0800e26f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800dc5c:	4b57      	ldr	r3, [pc, #348]	; (800ddbc <tcp_process+0x2b8>)
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	f003 0310 	and.w	r3, r3, #16
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	f000 80e4 	beq.w	800de32 <tcp_process+0x32e>
 800dc6a:	4b54      	ldr	r3, [pc, #336]	; (800ddbc <tcp_process+0x2b8>)
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	f003 0302 	and.w	r3, r3, #2
 800dc72:	2b00      	cmp	r3, #0
 800dc74:	f000 80dd 	beq.w	800de32 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dc7c:	1c5a      	adds	r2, r3, #1
 800dc7e:	4b50      	ldr	r3, [pc, #320]	; (800ddc0 <tcp_process+0x2bc>)
 800dc80:	681b      	ldr	r3, [r3, #0]
 800dc82:	429a      	cmp	r2, r3
 800dc84:	f040 80d5 	bne.w	800de32 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800dc88:	4b4e      	ldr	r3, [pc, #312]	; (800ddc4 <tcp_process+0x2c0>)
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	1c5a      	adds	r2, r3, #1
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800dc9a:	4b49      	ldr	r3, [pc, #292]	; (800ddc0 <tcp_process+0x2bc>)
 800dc9c:	681a      	ldr	r2, [r3, #0]
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800dca2:	4b4c      	ldr	r3, [pc, #304]	; (800ddd4 <tcp_process+0x2d0>)
 800dca4:	681b      	ldr	r3, [r3, #0]
 800dca6:	89db      	ldrh	r3, [r3, #14]
 800dca8:	b29a      	uxth	r2, r3
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800dcbc:	4b41      	ldr	r3, [pc, #260]	; (800ddc4 <tcp_process+0x2c0>)
 800dcbe:	681b      	ldr	r3, [r3, #0]
 800dcc0:	1e5a      	subs	r2, r3, #1
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2204      	movs	r2, #4
 800dcca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	4618      	mov	r0, r3
 800dcd6:	f004 fe67 	bl	80129a8 <ip4_route>
 800dcda:	4601      	mov	r1, r0
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	3304      	adds	r3, #4
 800dce0:	461a      	mov	r2, r3
 800dce2:	4620      	mov	r0, r4
 800dce4:	f7ff f88e 	bl	800ce04 <tcp_eff_send_mss_netif>
 800dce8:	4603      	mov	r3, r0
 800dcea:	461a      	mov	r2, r3
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcf4:	009a      	lsls	r2, r3, #2
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dcfa:	005b      	lsls	r3, r3, #1
 800dcfc:	f241 111c 	movw	r1, #4380	; 0x111c
 800dd00:	428b      	cmp	r3, r1
 800dd02:	bf38      	it	cc
 800dd04:	460b      	movcc	r3, r1
 800dd06:	429a      	cmp	r2, r3
 800dd08:	d204      	bcs.n	800dd14 <tcp_process+0x210>
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd0e:	009b      	lsls	r3, r3, #2
 800dd10:	b29b      	uxth	r3, r3
 800dd12:	e00d      	b.n	800dd30 <tcp_process+0x22c>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd18:	005b      	lsls	r3, r3, #1
 800dd1a:	f241 121c 	movw	r2, #4380	; 0x111c
 800dd1e:	4293      	cmp	r3, r2
 800dd20:	d904      	bls.n	800dd2c <tcp_process+0x228>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800dd26:	005b      	lsls	r3, r3, #1
 800dd28:	b29b      	uxth	r3, r3
 800dd2a:	e001      	b.n	800dd30 <tcp_process+0x22c>
 800dd2c:	f241 131c 	movw	r3, #4380	; 0x111c
 800dd30:	687a      	ldr	r2, [r7, #4]
 800dd32:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d106      	bne.n	800dd4e <tcp_process+0x24a>
 800dd40:	4b1b      	ldr	r3, [pc, #108]	; (800ddb0 <tcp_process+0x2ac>)
 800dd42:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800dd46:	4924      	ldr	r1, [pc, #144]	; (800ddd8 <tcp_process+0x2d4>)
 800dd48:	481b      	ldr	r0, [pc, #108]	; (800ddb8 <tcp_process+0x2b4>)
 800dd4a:	f006 f85b 	bl	8013e04 <iprintf>
        --pcb->snd_queuelen;
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800dd54:	3b01      	subs	r3, #1
 800dd56:	b29a      	uxth	r2, r3
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd62:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d111      	bne.n	800dd8e <tcp_process+0x28a>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd6e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800dd70:	69fb      	ldr	r3, [r7, #28]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d106      	bne.n	800dd84 <tcp_process+0x280>
 800dd76:	4b0e      	ldr	r3, [pc, #56]	; (800ddb0 <tcp_process+0x2ac>)
 800dd78:	f44f 725d 	mov.w	r2, #884	; 0x374
 800dd7c:	4917      	ldr	r1, [pc, #92]	; (800dddc <tcp_process+0x2d8>)
 800dd7e:	480e      	ldr	r0, [pc, #56]	; (800ddb8 <tcp_process+0x2b4>)
 800dd80:	f006 f840 	bl	8013e04 <iprintf>
          pcb->unsent = rseg->next;
 800dd84:	69fb      	ldr	r3, [r7, #28]
 800dd86:	681a      	ldr	r2, [r3, #0]
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd8c:	e003      	b.n	800dd96 <tcp_process+0x292>
        } else {
          pcb->unacked = rseg->next;
 800dd8e:	69fb      	ldr	r3, [r7, #28]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800dd96:	69f8      	ldr	r0, [r7, #28]
 800dd98:	f7fe fd3d 	bl	800c816 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	d11d      	bne.n	800dde0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ddaa:	861a      	strh	r2, [r3, #48]	; 0x30
 800ddac:	e01f      	b.n	800ddee <tcp_process+0x2ea>
 800ddae:	bf00      	nop
 800ddb0:	08016084 	.word	0x08016084
 800ddb4:	080162bc 	.word	0x080162bc
 800ddb8:	080160d0 	.word	0x080160d0
 800ddbc:	2000010c 	.word	0x2000010c
 800ddc0:	20000104 	.word	0x20000104
 800ddc4:	20000100 	.word	0x20000100
 800ddc8:	080162d8 	.word	0x080162d8
 800ddcc:	2000010d 	.word	0x2000010d
 800ddd0:	20007204 	.word	0x20007204
 800ddd4:	200000f0 	.word	0x200000f0
 800ddd8:	080162f8 	.word	0x080162f8
 800dddc:	08016310 	.word	0x08016310
        } else {
          pcb->rtime = 0;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2200      	movs	r2, #0
 800dde4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2200      	movs	r2, #0
 800ddea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d00a      	beq.n	800de0e <tcp_process+0x30a>
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddfe:	687a      	ldr	r2, [r7, #4]
 800de00:	6910      	ldr	r0, [r2, #16]
 800de02:	2200      	movs	r2, #0
 800de04:	6879      	ldr	r1, [r7, #4]
 800de06:	4798      	blx	r3
 800de08:	4603      	mov	r3, r0
 800de0a:	76bb      	strb	r3, [r7, #26]
 800de0c:	e001      	b.n	800de12 <tcp_process+0x30e>
 800de0e:	2300      	movs	r3, #0
 800de10:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800de12:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800de16:	f113 0f0d 	cmn.w	r3, #13
 800de1a:	d102      	bne.n	800de22 <tcp_process+0x31e>
          return ERR_ABRT;
 800de1c:	f06f 030c 	mvn.w	r3, #12
 800de20:	e250      	b.n	800e2c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	8b5b      	ldrh	r3, [r3, #26]
 800de26:	f043 0302 	orr.w	r3, r3, #2
 800de2a:	b29a      	uxth	r2, r3
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800de30:	e23a      	b.n	800e2a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800de32:	4b9d      	ldr	r3, [pc, #628]	; (800e0a8 <tcp_process+0x5a4>)
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	f003 0310 	and.w	r3, r3, #16
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	f000 8234 	beq.w	800e2a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de40:	4b9a      	ldr	r3, [pc, #616]	; (800e0ac <tcp_process+0x5a8>)
 800de42:	6819      	ldr	r1, [r3, #0]
 800de44:	4b9a      	ldr	r3, [pc, #616]	; (800e0b0 <tcp_process+0x5ac>)
 800de46:	881b      	ldrh	r3, [r3, #0]
 800de48:	461a      	mov	r2, r3
 800de4a:	4b9a      	ldr	r3, [pc, #616]	; (800e0b4 <tcp_process+0x5b0>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de50:	4b99      	ldr	r3, [pc, #612]	; (800e0b8 <tcp_process+0x5b4>)
 800de52:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de54:	885b      	ldrh	r3, [r3, #2]
 800de56:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800de58:	4a97      	ldr	r2, [pc, #604]	; (800e0b8 <tcp_process+0x5b4>)
 800de5a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800de5c:	8812      	ldrh	r2, [r2, #0]
 800de5e:	b292      	uxth	r2, r2
 800de60:	9202      	str	r2, [sp, #8]
 800de62:	9301      	str	r3, [sp, #4]
 800de64:	4b95      	ldr	r3, [pc, #596]	; (800e0bc <tcp_process+0x5b8>)
 800de66:	9300      	str	r3, [sp, #0]
 800de68:	4b95      	ldr	r3, [pc, #596]	; (800e0c0 <tcp_process+0x5bc>)
 800de6a:	4602      	mov	r2, r0
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f002 fc83 	bl	8010778 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800de78:	2b05      	cmp	r3, #5
 800de7a:	f200 8215 	bhi.w	800e2a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	2200      	movs	r2, #0
 800de82:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800de84:	6878      	ldr	r0, [r7, #4]
 800de86:	f002 fa4d 	bl	8010324 <tcp_rexmit_rto>
      break;
 800de8a:	e20d      	b.n	800e2a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800de8c:	4b86      	ldr	r3, [pc, #536]	; (800e0a8 <tcp_process+0x5a4>)
 800de8e:	781b      	ldrb	r3, [r3, #0]
 800de90:	f003 0310 	and.w	r3, r3, #16
 800de94:	2b00      	cmp	r3, #0
 800de96:	f000 80a1 	beq.w	800dfdc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800de9a:	4b84      	ldr	r3, [pc, #528]	; (800e0ac <tcp_process+0x5a8>)
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dea2:	1ad3      	subs	r3, r2, r3
 800dea4:	3b01      	subs	r3, #1
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	db7e      	blt.n	800dfa8 <tcp_process+0x4a4>
 800deaa:	4b80      	ldr	r3, [pc, #512]	; (800e0ac <tcp_process+0x5a8>)
 800deac:	681a      	ldr	r2, [r3, #0]
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800deb2:	1ad3      	subs	r3, r2, r3
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	dc77      	bgt.n	800dfa8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2204      	movs	r2, #4
 800debc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d102      	bne.n	800decc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800dec6:	23fa      	movs	r3, #250	; 0xfa
 800dec8:	76bb      	strb	r3, [r7, #26]
 800deca:	e01d      	b.n	800df08 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ded0:	699b      	ldr	r3, [r3, #24]
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d106      	bne.n	800dee4 <tcp_process+0x3e0>
 800ded6:	4b7b      	ldr	r3, [pc, #492]	; (800e0c4 <tcp_process+0x5c0>)
 800ded8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800dedc:	497a      	ldr	r1, [pc, #488]	; (800e0c8 <tcp_process+0x5c4>)
 800dede:	487b      	ldr	r0, [pc, #492]	; (800e0cc <tcp_process+0x5c8>)
 800dee0:	f005 ff90 	bl	8013e04 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dee8:	699b      	ldr	r3, [r3, #24]
 800deea:	2b00      	cmp	r3, #0
 800deec:	d00a      	beq.n	800df04 <tcp_process+0x400>
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800def2:	699b      	ldr	r3, [r3, #24]
 800def4:	687a      	ldr	r2, [r7, #4]
 800def6:	6910      	ldr	r0, [r2, #16]
 800def8:	2200      	movs	r2, #0
 800defa:	6879      	ldr	r1, [r7, #4]
 800defc:	4798      	blx	r3
 800defe:	4603      	mov	r3, r0
 800df00:	76bb      	strb	r3, [r7, #26]
 800df02:	e001      	b.n	800df08 <tcp_process+0x404>
 800df04:	23f0      	movs	r3, #240	; 0xf0
 800df06:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800df08:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d00a      	beq.n	800df26 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800df10:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800df14:	f113 0f0d 	cmn.w	r3, #13
 800df18:	d002      	beq.n	800df20 <tcp_process+0x41c>
              tcp_abort(pcb);
 800df1a:	6878      	ldr	r0, [r7, #4]
 800df1c:	f7fd ff90 	bl	800be40 <tcp_abort>
            }
            return ERR_ABRT;
 800df20:	f06f 030c 	mvn.w	r3, #12
 800df24:	e1ce      	b.n	800e2c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800df26:	6878      	ldr	r0, [r7, #4]
 800df28:	f000 fae0 	bl	800e4ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800df2c:	4b68      	ldr	r3, [pc, #416]	; (800e0d0 <tcp_process+0x5cc>)
 800df2e:	881b      	ldrh	r3, [r3, #0]
 800df30:	2b00      	cmp	r3, #0
 800df32:	d005      	beq.n	800df40 <tcp_process+0x43c>
            recv_acked--;
 800df34:	4b66      	ldr	r3, [pc, #408]	; (800e0d0 <tcp_process+0x5cc>)
 800df36:	881b      	ldrh	r3, [r3, #0]
 800df38:	3b01      	subs	r3, #1
 800df3a:	b29a      	uxth	r2, r3
 800df3c:	4b64      	ldr	r3, [pc, #400]	; (800e0d0 <tcp_process+0x5cc>)
 800df3e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df44:	009a      	lsls	r2, r3, #2
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df4a:	005b      	lsls	r3, r3, #1
 800df4c:	f241 111c 	movw	r1, #4380	; 0x111c
 800df50:	428b      	cmp	r3, r1
 800df52:	bf38      	it	cc
 800df54:	460b      	movcc	r3, r1
 800df56:	429a      	cmp	r2, r3
 800df58:	d204      	bcs.n	800df64 <tcp_process+0x460>
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df5e:	009b      	lsls	r3, r3, #2
 800df60:	b29b      	uxth	r3, r3
 800df62:	e00d      	b.n	800df80 <tcp_process+0x47c>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df68:	005b      	lsls	r3, r3, #1
 800df6a:	f241 121c 	movw	r2, #4380	; 0x111c
 800df6e:	4293      	cmp	r3, r2
 800df70:	d904      	bls.n	800df7c <tcp_process+0x478>
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800df76:	005b      	lsls	r3, r3, #1
 800df78:	b29b      	uxth	r3, r3
 800df7a:	e001      	b.n	800df80 <tcp_process+0x47c>
 800df7c:	f241 131c 	movw	r3, #4380	; 0x111c
 800df80:	687a      	ldr	r2, [r7, #4]
 800df82:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800df86:	4b53      	ldr	r3, [pc, #332]	; (800e0d4 <tcp_process+0x5d0>)
 800df88:	781b      	ldrb	r3, [r3, #0]
 800df8a:	f003 0320 	and.w	r3, r3, #32
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d037      	beq.n	800e002 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	8b5b      	ldrh	r3, [r3, #26]
 800df96:	f043 0302 	orr.w	r3, r3, #2
 800df9a:	b29a      	uxth	r2, r3
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2207      	movs	r2, #7
 800dfa4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800dfa6:	e02c      	b.n	800e002 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfa8:	4b40      	ldr	r3, [pc, #256]	; (800e0ac <tcp_process+0x5a8>)
 800dfaa:	6819      	ldr	r1, [r3, #0]
 800dfac:	4b40      	ldr	r3, [pc, #256]	; (800e0b0 <tcp_process+0x5ac>)
 800dfae:	881b      	ldrh	r3, [r3, #0]
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	4b40      	ldr	r3, [pc, #256]	; (800e0b4 <tcp_process+0x5b0>)
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfb8:	4b3f      	ldr	r3, [pc, #252]	; (800e0b8 <tcp_process+0x5b4>)
 800dfba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfbc:	885b      	ldrh	r3, [r3, #2]
 800dfbe:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800dfc0:	4a3d      	ldr	r2, [pc, #244]	; (800e0b8 <tcp_process+0x5b4>)
 800dfc2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800dfc4:	8812      	ldrh	r2, [r2, #0]
 800dfc6:	b292      	uxth	r2, r2
 800dfc8:	9202      	str	r2, [sp, #8]
 800dfca:	9301      	str	r3, [sp, #4]
 800dfcc:	4b3b      	ldr	r3, [pc, #236]	; (800e0bc <tcp_process+0x5b8>)
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	4b3b      	ldr	r3, [pc, #236]	; (800e0c0 <tcp_process+0x5bc>)
 800dfd2:	4602      	mov	r2, r0
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f002 fbcf 	bl	8010778 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800dfda:	e167      	b.n	800e2ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800dfdc:	4b32      	ldr	r3, [pc, #200]	; (800e0a8 <tcp_process+0x5a4>)
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f003 0302 	and.w	r3, r3, #2
 800dfe4:	2b00      	cmp	r3, #0
 800dfe6:	f000 8161 	beq.w	800e2ac <tcp_process+0x7a8>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfee:	1e5a      	subs	r2, r3, #1
 800dff0:	4b30      	ldr	r3, [pc, #192]	; (800e0b4 <tcp_process+0x5b0>)
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	f040 8159 	bne.w	800e2ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800dffa:	6878      	ldr	r0, [r7, #4]
 800dffc:	f002 f9b4 	bl	8010368 <tcp_rexmit>
      break;
 800e000:	e154      	b.n	800e2ac <tcp_process+0x7a8>
 800e002:	e153      	b.n	800e2ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f000 fa71 	bl	800e4ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e00a:	4b32      	ldr	r3, [pc, #200]	; (800e0d4 <tcp_process+0x5d0>)
 800e00c:	781b      	ldrb	r3, [r3, #0]
 800e00e:	f003 0320 	and.w	r3, r3, #32
 800e012:	2b00      	cmp	r3, #0
 800e014:	f000 814c 	beq.w	800e2b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	8b5b      	ldrh	r3, [r3, #26]
 800e01c:	f043 0302 	orr.w	r3, r3, #2
 800e020:	b29a      	uxth	r2, r3
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2207      	movs	r2, #7
 800e02a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e02c:	e140      	b.n	800e2b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f000 fa5c 	bl	800e4ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e034:	4b27      	ldr	r3, [pc, #156]	; (800e0d4 <tcp_process+0x5d0>)
 800e036:	781b      	ldrb	r3, [r3, #0]
 800e038:	f003 0320 	and.w	r3, r3, #32
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d071      	beq.n	800e124 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e040:	4b19      	ldr	r3, [pc, #100]	; (800e0a8 <tcp_process+0x5a4>)
 800e042:	781b      	ldrb	r3, [r3, #0]
 800e044:	f003 0310 	and.w	r3, r3, #16
 800e048:	2b00      	cmp	r3, #0
 800e04a:	d060      	beq.n	800e10e <tcp_process+0x60a>
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e050:	4b16      	ldr	r3, [pc, #88]	; (800e0ac <tcp_process+0x5a8>)
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	429a      	cmp	r2, r3
 800e056:	d15a      	bne.n	800e10e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d156      	bne.n	800e10e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	8b5b      	ldrh	r3, [r3, #26]
 800e064:	f043 0302 	orr.w	r3, r3, #2
 800e068:	b29a      	uxth	r2, r3
 800e06a:	687b      	ldr	r3, [r7, #4]
 800e06c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f7fe fdbe 	bl	800cbf0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e074:	4b18      	ldr	r3, [pc, #96]	; (800e0d8 <tcp_process+0x5d4>)
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	687a      	ldr	r2, [r7, #4]
 800e07a:	429a      	cmp	r2, r3
 800e07c:	d105      	bne.n	800e08a <tcp_process+0x586>
 800e07e:	4b16      	ldr	r3, [pc, #88]	; (800e0d8 <tcp_process+0x5d4>)
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	68db      	ldr	r3, [r3, #12]
 800e084:	4a14      	ldr	r2, [pc, #80]	; (800e0d8 <tcp_process+0x5d4>)
 800e086:	6013      	str	r3, [r2, #0]
 800e088:	e02e      	b.n	800e0e8 <tcp_process+0x5e4>
 800e08a:	4b13      	ldr	r3, [pc, #76]	; (800e0d8 <tcp_process+0x5d4>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	617b      	str	r3, [r7, #20]
 800e090:	e027      	b.n	800e0e2 <tcp_process+0x5de>
 800e092:	697b      	ldr	r3, [r7, #20]
 800e094:	68db      	ldr	r3, [r3, #12]
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d11f      	bne.n	800e0dc <tcp_process+0x5d8>
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68da      	ldr	r2, [r3, #12]
 800e0a0:	697b      	ldr	r3, [r7, #20]
 800e0a2:	60da      	str	r2, [r3, #12]
 800e0a4:	e020      	b.n	800e0e8 <tcp_process+0x5e4>
 800e0a6:	bf00      	nop
 800e0a8:	2000010c 	.word	0x2000010c
 800e0ac:	20000104 	.word	0x20000104
 800e0b0:	2000010a 	.word	0x2000010a
 800e0b4:	20000100 	.word	0x20000100
 800e0b8:	200000f0 	.word	0x200000f0
 800e0bc:	20003ccc 	.word	0x20003ccc
 800e0c0:	20003cd0 	.word	0x20003cd0
 800e0c4:	08016084 	.word	0x08016084
 800e0c8:	08016324 	.word	0x08016324
 800e0cc:	080160d0 	.word	0x080160d0
 800e0d0:	20000108 	.word	0x20000108
 800e0d4:	2000010d 	.word	0x2000010d
 800e0d8:	20007200 	.word	0x20007200
 800e0dc:	697b      	ldr	r3, [r7, #20]
 800e0de:	68db      	ldr	r3, [r3, #12]
 800e0e0:	617b      	str	r3, [r7, #20]
 800e0e2:	697b      	ldr	r3, [r7, #20]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d1d4      	bne.n	800e092 <tcp_process+0x58e>
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	2200      	movs	r2, #0
 800e0ec:	60da      	str	r2, [r3, #12]
 800e0ee:	4b77      	ldr	r3, [pc, #476]	; (800e2cc <tcp_process+0x7c8>)
 800e0f0:	2201      	movs	r2, #1
 800e0f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	220a      	movs	r2, #10
 800e0f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e0fa:	4b75      	ldr	r3, [pc, #468]	; (800e2d0 <tcp_process+0x7cc>)
 800e0fc:	681a      	ldr	r2, [r3, #0]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	60da      	str	r2, [r3, #12]
 800e102:	4a73      	ldr	r2, [pc, #460]	; (800e2d0 <tcp_process+0x7cc>)
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6013      	str	r3, [r2, #0]
 800e108:	f002 fcf8 	bl	8010afc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e10c:	e0d2      	b.n	800e2b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	8b5b      	ldrh	r3, [r3, #26]
 800e112:	f043 0302 	orr.w	r3, r3, #2
 800e116:	b29a      	uxth	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2208      	movs	r2, #8
 800e120:	751a      	strb	r2, [r3, #20]
      break;
 800e122:	e0c7      	b.n	800e2b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e124:	4b6b      	ldr	r3, [pc, #428]	; (800e2d4 <tcp_process+0x7d0>)
 800e126:	781b      	ldrb	r3, [r3, #0]
 800e128:	f003 0310 	and.w	r3, r3, #16
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	f000 80c1 	beq.w	800e2b4 <tcp_process+0x7b0>
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e136:	4b68      	ldr	r3, [pc, #416]	; (800e2d8 <tcp_process+0x7d4>)
 800e138:	681b      	ldr	r3, [r3, #0]
 800e13a:	429a      	cmp	r2, r3
 800e13c:	f040 80ba 	bne.w	800e2b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e144:	2b00      	cmp	r3, #0
 800e146:	f040 80b5 	bne.w	800e2b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e14a:	687b      	ldr	r3, [r7, #4]
 800e14c:	2206      	movs	r2, #6
 800e14e:	751a      	strb	r2, [r3, #20]
      break;
 800e150:	e0b0      	b.n	800e2b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e152:	6878      	ldr	r0, [r7, #4]
 800e154:	f000 f9ca 	bl	800e4ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e158:	4b60      	ldr	r3, [pc, #384]	; (800e2dc <tcp_process+0x7d8>)
 800e15a:	781b      	ldrb	r3, [r3, #0]
 800e15c:	f003 0320 	and.w	r3, r3, #32
 800e160:	2b00      	cmp	r3, #0
 800e162:	f000 80a9 	beq.w	800e2b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	8b5b      	ldrh	r3, [r3, #26]
 800e16a:	f043 0302 	orr.w	r3, r3, #2
 800e16e:	b29a      	uxth	r2, r3
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f7fe fd3b 	bl	800cbf0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e17a:	4b59      	ldr	r3, [pc, #356]	; (800e2e0 <tcp_process+0x7dc>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	687a      	ldr	r2, [r7, #4]
 800e180:	429a      	cmp	r2, r3
 800e182:	d105      	bne.n	800e190 <tcp_process+0x68c>
 800e184:	4b56      	ldr	r3, [pc, #344]	; (800e2e0 <tcp_process+0x7dc>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	68db      	ldr	r3, [r3, #12]
 800e18a:	4a55      	ldr	r2, [pc, #340]	; (800e2e0 <tcp_process+0x7dc>)
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	e013      	b.n	800e1b8 <tcp_process+0x6b4>
 800e190:	4b53      	ldr	r3, [pc, #332]	; (800e2e0 <tcp_process+0x7dc>)
 800e192:	681b      	ldr	r3, [r3, #0]
 800e194:	613b      	str	r3, [r7, #16]
 800e196:	e00c      	b.n	800e1b2 <tcp_process+0x6ae>
 800e198:	693b      	ldr	r3, [r7, #16]
 800e19a:	68db      	ldr	r3, [r3, #12]
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	429a      	cmp	r2, r3
 800e1a0:	d104      	bne.n	800e1ac <tcp_process+0x6a8>
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	68da      	ldr	r2, [r3, #12]
 800e1a6:	693b      	ldr	r3, [r7, #16]
 800e1a8:	60da      	str	r2, [r3, #12]
 800e1aa:	e005      	b.n	800e1b8 <tcp_process+0x6b4>
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	68db      	ldr	r3, [r3, #12]
 800e1b0:	613b      	str	r3, [r7, #16]
 800e1b2:	693b      	ldr	r3, [r7, #16]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d1ef      	bne.n	800e198 <tcp_process+0x694>
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	2200      	movs	r2, #0
 800e1bc:	60da      	str	r2, [r3, #12]
 800e1be:	4b43      	ldr	r3, [pc, #268]	; (800e2cc <tcp_process+0x7c8>)
 800e1c0:	2201      	movs	r2, #1
 800e1c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	220a      	movs	r2, #10
 800e1c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e1ca:	4b41      	ldr	r3, [pc, #260]	; (800e2d0 <tcp_process+0x7cc>)
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	687b      	ldr	r3, [r7, #4]
 800e1d0:	60da      	str	r2, [r3, #12]
 800e1d2:	4a3f      	ldr	r2, [pc, #252]	; (800e2d0 <tcp_process+0x7cc>)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6013      	str	r3, [r2, #0]
 800e1d8:	f002 fc90 	bl	8010afc <tcp_timer_needed>
      }
      break;
 800e1dc:	e06c      	b.n	800e2b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800e1de:	6878      	ldr	r0, [r7, #4]
 800e1e0:	f000 f984 	bl	800e4ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e1e4:	4b3b      	ldr	r3, [pc, #236]	; (800e2d4 <tcp_process+0x7d0>)
 800e1e6:	781b      	ldrb	r3, [r3, #0]
 800e1e8:	f003 0310 	and.w	r3, r3, #16
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d065      	beq.n	800e2bc <tcp_process+0x7b8>
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e1f4:	4b38      	ldr	r3, [pc, #224]	; (800e2d8 <tcp_process+0x7d4>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	429a      	cmp	r2, r3
 800e1fa:	d15f      	bne.n	800e2bc <tcp_process+0x7b8>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e200:	2b00      	cmp	r3, #0
 800e202:	d15b      	bne.n	800e2bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800e204:	6878      	ldr	r0, [r7, #4]
 800e206:	f7fe fcf3 	bl	800cbf0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e20a:	4b35      	ldr	r3, [pc, #212]	; (800e2e0 <tcp_process+0x7dc>)
 800e20c:	681b      	ldr	r3, [r3, #0]
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	429a      	cmp	r2, r3
 800e212:	d105      	bne.n	800e220 <tcp_process+0x71c>
 800e214:	4b32      	ldr	r3, [pc, #200]	; (800e2e0 <tcp_process+0x7dc>)
 800e216:	681b      	ldr	r3, [r3, #0]
 800e218:	68db      	ldr	r3, [r3, #12]
 800e21a:	4a31      	ldr	r2, [pc, #196]	; (800e2e0 <tcp_process+0x7dc>)
 800e21c:	6013      	str	r3, [r2, #0]
 800e21e:	e013      	b.n	800e248 <tcp_process+0x744>
 800e220:	4b2f      	ldr	r3, [pc, #188]	; (800e2e0 <tcp_process+0x7dc>)
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	60fb      	str	r3, [r7, #12]
 800e226:	e00c      	b.n	800e242 <tcp_process+0x73e>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	68db      	ldr	r3, [r3, #12]
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	429a      	cmp	r2, r3
 800e230:	d104      	bne.n	800e23c <tcp_process+0x738>
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	68da      	ldr	r2, [r3, #12]
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	60da      	str	r2, [r3, #12]
 800e23a:	e005      	b.n	800e248 <tcp_process+0x744>
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	60fb      	str	r3, [r7, #12]
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2b00      	cmp	r3, #0
 800e246:	d1ef      	bne.n	800e228 <tcp_process+0x724>
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	2200      	movs	r2, #0
 800e24c:	60da      	str	r2, [r3, #12]
 800e24e:	4b1f      	ldr	r3, [pc, #124]	; (800e2cc <tcp_process+0x7c8>)
 800e250:	2201      	movs	r2, #1
 800e252:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	220a      	movs	r2, #10
 800e258:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800e25a:	4b1d      	ldr	r3, [pc, #116]	; (800e2d0 <tcp_process+0x7cc>)
 800e25c:	681a      	ldr	r2, [r3, #0]
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	60da      	str	r2, [r3, #12]
 800e262:	4a1b      	ldr	r2, [pc, #108]	; (800e2d0 <tcp_process+0x7cc>)
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	6013      	str	r3, [r2, #0]
 800e268:	f002 fc48 	bl	8010afc <tcp_timer_needed>
      }
      break;
 800e26c:	e026      	b.n	800e2bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 f93c 	bl	800e4ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800e274:	4b17      	ldr	r3, [pc, #92]	; (800e2d4 <tcp_process+0x7d0>)
 800e276:	781b      	ldrb	r3, [r3, #0]
 800e278:	f003 0310 	and.w	r3, r3, #16
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d01f      	beq.n	800e2c0 <tcp_process+0x7bc>
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e284:	4b14      	ldr	r3, [pc, #80]	; (800e2d8 <tcp_process+0x7d4>)
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	429a      	cmp	r2, r3
 800e28a:	d119      	bne.n	800e2c0 <tcp_process+0x7bc>
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e290:	2b00      	cmp	r3, #0
 800e292:	d115      	bne.n	800e2c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800e294:	4b11      	ldr	r3, [pc, #68]	; (800e2dc <tcp_process+0x7d8>)
 800e296:	781b      	ldrb	r3, [r3, #0]
 800e298:	f043 0310 	orr.w	r3, r3, #16
 800e29c:	b2da      	uxtb	r2, r3
 800e29e:	4b0f      	ldr	r3, [pc, #60]	; (800e2dc <tcp_process+0x7d8>)
 800e2a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 800e2a2:	e00d      	b.n	800e2c0 <tcp_process+0x7bc>
    default:
      break;
 800e2a4:	bf00      	nop
 800e2a6:	e00c      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2a8:	bf00      	nop
 800e2aa:	e00a      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2ac:	bf00      	nop
 800e2ae:	e008      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2b0:	bf00      	nop
 800e2b2:	e006      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2b4:	bf00      	nop
 800e2b6:	e004      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2b8:	bf00      	nop
 800e2ba:	e002      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2bc:	bf00      	nop
 800e2be:	e000      	b.n	800e2c2 <tcp_process+0x7be>
      break;
 800e2c0:	bf00      	nop
  }
  return ERR_OK;
 800e2c2:	2300      	movs	r3, #0
}
 800e2c4:	4618      	mov	r0, r3
 800e2c6:	3724      	adds	r7, #36	; 0x24
 800e2c8:	46bd      	mov	sp, r7
 800e2ca:	bd90      	pop	{r4, r7, pc}
 800e2cc:	200071fc 	.word	0x200071fc
 800e2d0:	20007210 	.word	0x20007210
 800e2d4:	2000010c 	.word	0x2000010c
 800e2d8:	20000104 	.word	0x20000104
 800e2dc:	2000010d 	.word	0x2000010d
 800e2e0:	20007200 	.word	0x20007200

0800e2e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800e2e4:	b590      	push	{r4, r7, lr}
 800e2e6:	b085      	sub	sp, #20
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	6078      	str	r0, [r7, #4]
 800e2ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	2b00      	cmp	r3, #0
 800e2f2:	d106      	bne.n	800e302 <tcp_oos_insert_segment+0x1e>
 800e2f4:	4b3b      	ldr	r3, [pc, #236]	; (800e3e4 <tcp_oos_insert_segment+0x100>)
 800e2f6:	f240 421f 	movw	r2, #1055	; 0x41f
 800e2fa:	493b      	ldr	r1, [pc, #236]	; (800e3e8 <tcp_oos_insert_segment+0x104>)
 800e2fc:	483b      	ldr	r0, [pc, #236]	; (800e3ec <tcp_oos_insert_segment+0x108>)
 800e2fe:	f005 fd81 	bl	8013e04 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	68db      	ldr	r3, [r3, #12]
 800e306:	899b      	ldrh	r3, [r3, #12]
 800e308:	b29b      	uxth	r3, r3
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fb fd4d 	bl	8009daa <lwip_htons>
 800e310:	4603      	mov	r3, r0
 800e312:	b2db      	uxtb	r3, r3
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	2b00      	cmp	r3, #0
 800e31a:	d028      	beq.n	800e36e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800e31c:	6838      	ldr	r0, [r7, #0]
 800e31e:	f7fe fa65 	bl	800c7ec <tcp_segs_free>
    next = NULL;
 800e322:	2300      	movs	r3, #0
 800e324:	603b      	str	r3, [r7, #0]
 800e326:	e056      	b.n	800e3d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800e328:	683b      	ldr	r3, [r7, #0]
 800e32a:	68db      	ldr	r3, [r3, #12]
 800e32c:	899b      	ldrh	r3, [r3, #12]
 800e32e:	b29b      	uxth	r3, r3
 800e330:	4618      	mov	r0, r3
 800e332:	f7fb fd3a 	bl	8009daa <lwip_htons>
 800e336:	4603      	mov	r3, r0
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	f003 0301 	and.w	r3, r3, #1
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00d      	beq.n	800e35e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	68db      	ldr	r3, [r3, #12]
 800e346:	899b      	ldrh	r3, [r3, #12]
 800e348:	b29c      	uxth	r4, r3
 800e34a:	2001      	movs	r0, #1
 800e34c:	f7fb fd2d 	bl	8009daa <lwip_htons>
 800e350:	4603      	mov	r3, r0
 800e352:	461a      	mov	r2, r3
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	4322      	orrs	r2, r4
 800e35a:	b292      	uxth	r2, r2
 800e35c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800e362:	683b      	ldr	r3, [r7, #0]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800e368:	68f8      	ldr	r0, [r7, #12]
 800e36a:	f7fe fa54 	bl	800c816 <tcp_seg_free>
    while (next &&
 800e36e:	683b      	ldr	r3, [r7, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	d00e      	beq.n	800e392 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	891b      	ldrh	r3, [r3, #8]
 800e378:	461a      	mov	r2, r3
 800e37a:	4b1d      	ldr	r3, [pc, #116]	; (800e3f0 <tcp_oos_insert_segment+0x10c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	441a      	add	r2, r3
 800e380:	683b      	ldr	r3, [r7, #0]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	685b      	ldr	r3, [r3, #4]
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	8909      	ldrh	r1, [r1, #8]
 800e38a:	440b      	add	r3, r1
 800e38c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800e38e:	2b00      	cmp	r3, #0
 800e390:	daca      	bge.n	800e328 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d01e      	beq.n	800e3d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	891b      	ldrh	r3, [r3, #8]
 800e39c:	461a      	mov	r2, r3
 800e39e:	4b14      	ldr	r3, [pc, #80]	; (800e3f0 <tcp_oos_insert_segment+0x10c>)
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	441a      	add	r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	68db      	ldr	r3, [r3, #12]
 800e3a8:	685b      	ldr	r3, [r3, #4]
 800e3aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	dd12      	ble.n	800e3d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800e3b0:	683b      	ldr	r3, [r7, #0]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	685b      	ldr	r3, [r3, #4]
 800e3b6:	b29a      	uxth	r2, r3
 800e3b8:	4b0d      	ldr	r3, [pc, #52]	; (800e3f0 <tcp_oos_insert_segment+0x10c>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	b29b      	uxth	r3, r3
 800e3be:	1ad3      	subs	r3, r2, r3
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	685a      	ldr	r2, [r3, #4]
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	891b      	ldrh	r3, [r3, #8]
 800e3ce:	4619      	mov	r1, r3
 800e3d0:	4610      	mov	r0, r2
 800e3d2:	f7fc fe17 	bl	800b004 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800e3d6:	687b      	ldr	r3, [r7, #4]
 800e3d8:	683a      	ldr	r2, [r7, #0]
 800e3da:	601a      	str	r2, [r3, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	3714      	adds	r7, #20
 800e3e0:	46bd      	mov	sp, r7
 800e3e2:	bd90      	pop	{r4, r7, pc}
 800e3e4:	08016084 	.word	0x08016084
 800e3e8:	08016344 	.word	0x08016344
 800e3ec:	080160d0 	.word	0x080160d0
 800e3f0:	20000100 	.word	0x20000100

0800e3f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800e3f4:	b5b0      	push	{r4, r5, r7, lr}
 800e3f6:	b086      	sub	sp, #24
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	60f8      	str	r0, [r7, #12]
 800e3fc:	60b9      	str	r1, [r7, #8]
 800e3fe:	607a      	str	r2, [r7, #4]
 800e400:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800e402:	e03e      	b.n	800e482 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800e404:	68bb      	ldr	r3, [r7, #8]
 800e406:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800e408:	68bb      	ldr	r3, [r7, #8]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800e40e:	697b      	ldr	r3, [r7, #20]
 800e410:	685b      	ldr	r3, [r3, #4]
 800e412:	4618      	mov	r0, r3
 800e414:	f7fd f804 	bl	800b420 <pbuf_clen>
 800e418:	4603      	mov	r3, r0
 800e41a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e422:	8a7a      	ldrh	r2, [r7, #18]
 800e424:	429a      	cmp	r2, r3
 800e426:	d906      	bls.n	800e436 <tcp_free_acked_segments+0x42>
 800e428:	4b2a      	ldr	r3, [pc, #168]	; (800e4d4 <tcp_free_acked_segments+0xe0>)
 800e42a:	f240 4257 	movw	r2, #1111	; 0x457
 800e42e:	492a      	ldr	r1, [pc, #168]	; (800e4d8 <tcp_free_acked_segments+0xe4>)
 800e430:	482a      	ldr	r0, [pc, #168]	; (800e4dc <tcp_free_acked_segments+0xe8>)
 800e432:	f005 fce7 	bl	8013e04 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800e436:	68fb      	ldr	r3, [r7, #12]
 800e438:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800e43c:	8a7b      	ldrh	r3, [r7, #18]
 800e43e:	1ad3      	subs	r3, r2, r3
 800e440:	b29a      	uxth	r2, r3
 800e442:	68fb      	ldr	r3, [r7, #12]
 800e444:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800e448:	697b      	ldr	r3, [r7, #20]
 800e44a:	891a      	ldrh	r2, [r3, #8]
 800e44c:	4b24      	ldr	r3, [pc, #144]	; (800e4e0 <tcp_free_acked_segments+0xec>)
 800e44e:	881b      	ldrh	r3, [r3, #0]
 800e450:	4413      	add	r3, r2
 800e452:	b29a      	uxth	r2, r3
 800e454:	4b22      	ldr	r3, [pc, #136]	; (800e4e0 <tcp_free_acked_segments+0xec>)
 800e456:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800e458:	6978      	ldr	r0, [r7, #20]
 800e45a:	f7fe f9dc 	bl	800c816 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e464:	2b00      	cmp	r3, #0
 800e466:	d00c      	beq.n	800e482 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800e468:	68bb      	ldr	r3, [r7, #8]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d109      	bne.n	800e482 <tcp_free_acked_segments+0x8e>
 800e46e:	683b      	ldr	r3, [r7, #0]
 800e470:	2b00      	cmp	r3, #0
 800e472:	d106      	bne.n	800e482 <tcp_free_acked_segments+0x8e>
 800e474:	4b17      	ldr	r3, [pc, #92]	; (800e4d4 <tcp_free_acked_segments+0xe0>)
 800e476:	f240 4261 	movw	r2, #1121	; 0x461
 800e47a:	491a      	ldr	r1, [pc, #104]	; (800e4e4 <tcp_free_acked_segments+0xf0>)
 800e47c:	4817      	ldr	r0, [pc, #92]	; (800e4dc <tcp_free_acked_segments+0xe8>)
 800e47e:	f005 fcc1 	bl	8013e04 <iprintf>
  while (seg_list != NULL &&
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d020      	beq.n	800e4ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800e488:	68bb      	ldr	r3, [r7, #8]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	685b      	ldr	r3, [r3, #4]
 800e48e:	4618      	mov	r0, r3
 800e490:	f7fb fca0 	bl	8009dd4 <lwip_htonl>
 800e494:	4604      	mov	r4, r0
 800e496:	68bb      	ldr	r3, [r7, #8]
 800e498:	891b      	ldrh	r3, [r3, #8]
 800e49a:	461d      	mov	r5, r3
 800e49c:	68bb      	ldr	r3, [r7, #8]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	899b      	ldrh	r3, [r3, #12]
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	f7fb fc80 	bl	8009daa <lwip_htons>
 800e4aa:	4603      	mov	r3, r0
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	f003 0303 	and.w	r3, r3, #3
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <tcp_free_acked_segments+0xc6>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e000      	b.n	800e4bc <tcp_free_acked_segments+0xc8>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	442b      	add	r3, r5
 800e4be:	18e2      	adds	r2, r4, r3
 800e4c0:	4b09      	ldr	r3, [pc, #36]	; (800e4e8 <tcp_free_acked_segments+0xf4>)
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	dd9c      	ble.n	800e404 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800e4ca:	68bb      	ldr	r3, [r7, #8]
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3718      	adds	r7, #24
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4d4:	08016084 	.word	0x08016084
 800e4d8:	0801636c 	.word	0x0801636c
 800e4dc:	080160d0 	.word	0x080160d0
 800e4e0:	20000108 	.word	0x20000108
 800e4e4:	08016394 	.word	0x08016394
 800e4e8:	20000104 	.word	0x20000104

0800e4ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800e4ec:	b5b0      	push	{r4, r5, r7, lr}
 800e4ee:	b094      	sub	sp, #80	; 0x50
 800e4f0:	af00      	add	r7, sp, #0
 800e4f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800e4f4:	2300      	movs	r3, #0
 800e4f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d106      	bne.n	800e50c <tcp_receive+0x20>
 800e4fe:	4ba6      	ldr	r3, [pc, #664]	; (800e798 <tcp_receive+0x2ac>)
 800e500:	f240 427b 	movw	r2, #1147	; 0x47b
 800e504:	49a5      	ldr	r1, [pc, #660]	; (800e79c <tcp_receive+0x2b0>)
 800e506:	48a6      	ldr	r0, [pc, #664]	; (800e7a0 <tcp_receive+0x2b4>)
 800e508:	f005 fc7c 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	7d1b      	ldrb	r3, [r3, #20]
 800e510:	2b03      	cmp	r3, #3
 800e512:	d806      	bhi.n	800e522 <tcp_receive+0x36>
 800e514:	4ba0      	ldr	r3, [pc, #640]	; (800e798 <tcp_receive+0x2ac>)
 800e516:	f240 427c 	movw	r2, #1148	; 0x47c
 800e51a:	49a2      	ldr	r1, [pc, #648]	; (800e7a4 <tcp_receive+0x2b8>)
 800e51c:	48a0      	ldr	r0, [pc, #640]	; (800e7a0 <tcp_receive+0x2b4>)
 800e51e:	f005 fc71 	bl	8013e04 <iprintf>

  if (flags & TCP_ACK) {
 800e522:	4ba1      	ldr	r3, [pc, #644]	; (800e7a8 <tcp_receive+0x2bc>)
 800e524:	781b      	ldrb	r3, [r3, #0]
 800e526:	f003 0310 	and.w	r3, r3, #16
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	f000 8263 	beq.w	800e9f6 <tcp_receive+0x50a>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e536:	461a      	mov	r2, r3
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e53c:	4413      	add	r3, r2
 800e53e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e544:	4b99      	ldr	r3, [pc, #612]	; (800e7ac <tcp_receive+0x2c0>)
 800e546:	681b      	ldr	r3, [r3, #0]
 800e548:	1ad3      	subs	r3, r2, r3
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	db1b      	blt.n	800e586 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e552:	4b96      	ldr	r3, [pc, #600]	; (800e7ac <tcp_receive+0x2c0>)
 800e554:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800e556:	429a      	cmp	r2, r3
 800e558:	d106      	bne.n	800e568 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e55e:	4b94      	ldr	r3, [pc, #592]	; (800e7b0 <tcp_receive+0x2c4>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	1ad3      	subs	r3, r2, r3
 800e564:	2b00      	cmp	r3, #0
 800e566:	db0e      	blt.n	800e586 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e56c:	4b90      	ldr	r3, [pc, #576]	; (800e7b0 <tcp_receive+0x2c4>)
 800e56e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800e570:	429a      	cmp	r2, r3
 800e572:	d125      	bne.n	800e5c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800e574:	4b8f      	ldr	r3, [pc, #572]	; (800e7b4 <tcp_receive+0x2c8>)
 800e576:	681b      	ldr	r3, [r3, #0]
 800e578:	89db      	ldrh	r3, [r3, #14]
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e582:	429a      	cmp	r2, r3
 800e584:	d91c      	bls.n	800e5c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800e586:	4b8b      	ldr	r3, [pc, #556]	; (800e7b4 <tcp_receive+0x2c8>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	89db      	ldrh	r3, [r3, #14]
 800e58c:	b29a      	uxth	r2, r3
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e5a0:	429a      	cmp	r2, r3
 800e5a2:	d205      	bcs.n	800e5b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800e5b0:	4b7e      	ldr	r3, [pc, #504]	; (800e7ac <tcp_receive+0x2c0>)
 800e5b2:	681a      	ldr	r2, [r3, #0]
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800e5b8:	4b7d      	ldr	r3, [pc, #500]	; (800e7b0 <tcp_receive+0x2c4>)
 800e5ba:	681a      	ldr	r2, [r3, #0]
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800e5c0:	4b7b      	ldr	r3, [pc, #492]	; (800e7b0 <tcp_receive+0x2c4>)
 800e5c2:	681a      	ldr	r2, [r3, #0]
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e5c8:	1ad3      	subs	r3, r2, r3
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	dc58      	bgt.n	800e680 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800e5ce:	4b7a      	ldr	r3, [pc, #488]	; (800e7b8 <tcp_receive+0x2cc>)
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d14b      	bne.n	800e66e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e5da:	687a      	ldr	r2, [r7, #4]
 800e5dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800e5e0:	4413      	add	r3, r2
 800e5e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e5e4:	429a      	cmp	r2, r3
 800e5e6:	d142      	bne.n	800e66e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	db3d      	blt.n	800e66e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e5f6:	4b6e      	ldr	r3, [pc, #440]	; (800e7b0 <tcp_receive+0x2c4>)
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	429a      	cmp	r2, r3
 800e5fc:	d137      	bne.n	800e66e <tcp_receive+0x182>
              found_dupack = 1;
 800e5fe:	2301      	movs	r3, #1
 800e600:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e608:	2bff      	cmp	r3, #255	; 0xff
 800e60a:	d007      	beq.n	800e61c <tcp_receive+0x130>
                ++pcb->dupacks;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e612:	3301      	adds	r3, #1
 800e614:	b2da      	uxtb	r2, r3
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800e61c:	687b      	ldr	r3, [r7, #4]
 800e61e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e622:	2b03      	cmp	r3, #3
 800e624:	d91b      	bls.n	800e65e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e630:	4413      	add	r3, r2
 800e632:	b29a      	uxth	r2, r3
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e63a:	429a      	cmp	r2, r3
 800e63c:	d30a      	bcc.n	800e654 <tcp_receive+0x168>
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e648:	4413      	add	r3, r2
 800e64a:	b29a      	uxth	r2, r3
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e652:	e004      	b.n	800e65e <tcp_receive+0x172>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e65a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800e65e:	687b      	ldr	r3, [r7, #4]
 800e660:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800e664:	2b02      	cmp	r3, #2
 800e666:	d902      	bls.n	800e66e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f001 fee9 	bl	8010440 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800e66e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e670:	2b00      	cmp	r3, #0
 800e672:	f040 8160 	bne.w	800e936 <tcp_receive+0x44a>
        pcb->dupacks = 0;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	2200      	movs	r2, #0
 800e67a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800e67e:	e15a      	b.n	800e936 <tcp_receive+0x44a>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e680:	4b4b      	ldr	r3, [pc, #300]	; (800e7b0 <tcp_receive+0x2c4>)
 800e682:	681a      	ldr	r2, [r3, #0]
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e688:	1ad3      	subs	r3, r2, r3
 800e68a:	3b01      	subs	r3, #1
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	f2c0 814d 	blt.w	800e92c <tcp_receive+0x440>
 800e692:	4b47      	ldr	r3, [pc, #284]	; (800e7b0 <tcp_receive+0x2c4>)
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e69a:	1ad3      	subs	r3, r2, r3
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	f300 8145 	bgt.w	800e92c <tcp_receive+0x440>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	8b5b      	ldrh	r3, [r3, #26]
 800e6a6:	f003 0304 	and.w	r3, r3, #4
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d010      	beq.n	800e6d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	8b5b      	ldrh	r3, [r3, #26]
 800e6b2:	f023 0304 	bic.w	r3, r3, #4
 800e6b6:	b29a      	uxth	r2, r3
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e6de:	10db      	asrs	r3, r3, #3
 800e6e0:	b21b      	sxth	r3, r3
 800e6e2:	b29a      	uxth	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	4413      	add	r3, r2
 800e6ee:	b29b      	uxth	r3, r3
 800e6f0:	b21a      	sxth	r2, r3
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800e6f8:	4b2d      	ldr	r3, [pc, #180]	; (800e7b0 <tcp_receive+0x2c4>)
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	b29a      	uxth	r2, r3
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e702:	b29b      	uxth	r3, r3
 800e704:	1ad3      	subs	r3, r2, r3
 800e706:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	2200      	movs	r2, #0
 800e70c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800e710:	4b27      	ldr	r3, [pc, #156]	; (800e7b0 <tcp_receive+0x2c4>)
 800e712:	681a      	ldr	r2, [r3, #0]
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	7d1b      	ldrb	r3, [r3, #20]
 800e71c:	2b03      	cmp	r3, #3
 800e71e:	f240 8096 	bls.w	800e84e <tcp_receive+0x362>
        if (pcb->cwnd < pcb->ssthresh) {
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800e72e:	429a      	cmp	r2, r3
 800e730:	d244      	bcs.n	800e7bc <tcp_receive+0x2d0>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	8b5b      	ldrh	r3, [r3, #26]
 800e736:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <tcp_receive+0x256>
 800e73e:	2301      	movs	r3, #1
 800e740:	e000      	b.n	800e744 <tcp_receive+0x258>
 800e742:	2302      	movs	r3, #2
 800e744:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800e748:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800e74c:	b29a      	uxth	r2, r3
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e752:	fb12 f303 	smulbb	r3, r2, r3
 800e756:	b29b      	uxth	r3, r3
 800e758:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800e75a:	4293      	cmp	r3, r2
 800e75c:	bf28      	it	cs
 800e75e:	4613      	movcs	r3, r2
 800e760:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e768:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e76a:	4413      	add	r3, r2
 800e76c:	b29a      	uxth	r2, r3
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e774:	429a      	cmp	r2, r3
 800e776:	d309      	bcc.n	800e78c <tcp_receive+0x2a0>
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e77e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800e780:	4413      	add	r3, r2
 800e782:	b29a      	uxth	r2, r3
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e78a:	e060      	b.n	800e84e <tcp_receive+0x362>
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e792:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e796:	e05a      	b.n	800e84e <tcp_receive+0x362>
 800e798:	08016084 	.word	0x08016084
 800e79c:	080163b4 	.word	0x080163b4
 800e7a0:	080160d0 	.word	0x080160d0
 800e7a4:	080163d0 	.word	0x080163d0
 800e7a8:	2000010c 	.word	0x2000010c
 800e7ac:	20000100 	.word	0x20000100
 800e7b0:	20000104 	.word	0x20000104
 800e7b4:	200000f0 	.word	0x200000f0
 800e7b8:	2000010a 	.word	0x2000010a
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e7c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7c4:	4413      	add	r3, r2
 800e7c6:	b29a      	uxth	r2, r3
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800e7ce:	429a      	cmp	r2, r3
 800e7d0:	d309      	bcc.n	800e7e6 <tcp_receive+0x2fa>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e7d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800e7da:	4413      	add	r3, r2
 800e7dc:	b29a      	uxth	r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800e7e4:	e004      	b.n	800e7f0 <tcp_receive+0x304>
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d326      	bcc.n	800e84e <tcp_receive+0x362>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e80c:	1ad3      	subs	r3, r2, r3
 800e80e:	b29a      	uxth	r2, r3
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e820:	4413      	add	r3, r2
 800e822:	b29a      	uxth	r2, r3
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e82a:	429a      	cmp	r2, r3
 800e82c:	d30a      	bcc.n	800e844 <tcp_receive+0x358>
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e838:	4413      	add	r3, r2
 800e83a:	b29a      	uxth	r2, r3
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800e842:	e004      	b.n	800e84e <tcp_receive+0x362>
 800e844:	687b      	ldr	r3, [r7, #4]
 800e846:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e84a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e856:	4a98      	ldr	r2, [pc, #608]	; (800eab8 <tcp_receive+0x5cc>)
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f7ff fdcb 	bl	800e3f4 <tcp_free_acked_segments>
 800e85e:	4602      	mov	r2, r0
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e86c:	4a93      	ldr	r2, [pc, #588]	; (800eabc <tcp_receive+0x5d0>)
 800e86e:	6878      	ldr	r0, [r7, #4]
 800e870:	f7ff fdc0 	bl	800e3f4 <tcp_free_acked_segments>
 800e874:	4602      	mov	r2, r0
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800e87a:	687b      	ldr	r3, [r7, #4]
 800e87c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e87e:	2b00      	cmp	r3, #0
 800e880:	d104      	bne.n	800e88c <tcp_receive+0x3a0>
        pcb->rtime = -1;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e888:	861a      	strh	r2, [r3, #48]	; 0x30
 800e88a:	e002      	b.n	800e892 <tcp_receive+0x3a6>
      } else {
        pcb->rtime = 0;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2200      	movs	r2, #0
 800e890:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800e892:	687b      	ldr	r3, [r7, #4]
 800e894:	2200      	movs	r2, #0
 800e896:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d103      	bne.n	800e8a8 <tcp_receive+0x3bc>
        pcb->unsent_oversize = 0;
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800e8ae:	4b84      	ldr	r3, [pc, #528]	; (800eac0 <tcp_receive+0x5d4>)
 800e8b0:	881b      	ldrh	r3, [r3, #0]
 800e8b2:	4413      	add	r3, r2
 800e8b4:	b29a      	uxth	r2, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	8b5b      	ldrh	r3, [r3, #26]
 800e8c0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d035      	beq.n	800e934 <tcp_receive+0x448>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d118      	bne.n	800e902 <tcp_receive+0x416>
          if ((pcb->unsent == NULL) ||
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8d4:	2b00      	cmp	r3, #0
 800e8d6:	d00c      	beq.n	800e8f2 <tcp_receive+0x406>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e8e0:	68db      	ldr	r3, [r3, #12]
 800e8e2:	685b      	ldr	r3, [r3, #4]
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	f7fb fa75 	bl	8009dd4 <lwip_htonl>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800e8ee:	2b00      	cmp	r3, #0
 800e8f0:	dc20      	bgt.n	800e934 <tcp_receive+0x448>
            tcp_clear_flags(pcb, TF_RTO);
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	8b5b      	ldrh	r3, [r3, #26]
 800e8f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e900:	e018      	b.n	800e934 <tcp_receive+0x448>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800e902:	687b      	ldr	r3, [r7, #4]
 800e904:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e90a:	68db      	ldr	r3, [r3, #12]
 800e90c:	685b      	ldr	r3, [r3, #4]
 800e90e:	4618      	mov	r0, r3
 800e910:	f7fb fa60 	bl	8009dd4 <lwip_htonl>
 800e914:	4603      	mov	r3, r0
 800e916:	1ae3      	subs	r3, r4, r3
 800e918:	2b00      	cmp	r3, #0
 800e91a:	dc0b      	bgt.n	800e934 <tcp_receive+0x448>
          tcp_clear_flags(pcb, TF_RTO);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	8b5b      	ldrh	r3, [r3, #26]
 800e920:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800e924:	b29a      	uxth	r2, r3
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e92a:	e003      	b.n	800e934 <tcp_receive+0x448>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800e92c:	6878      	ldr	r0, [r7, #4]
 800e92e:	f001 ff75 	bl	801081c <tcp_send_empty_ack>
 800e932:	e000      	b.n	800e936 <tcp_receive+0x44a>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e934:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d05b      	beq.n	800e9f6 <tcp_receive+0x50a>
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e942:	4b60      	ldr	r3, [pc, #384]	; (800eac4 <tcp_receive+0x5d8>)
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	2b00      	cmp	r3, #0
 800e94a:	da54      	bge.n	800e9f6 <tcp_receive+0x50a>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800e94c:	4b5e      	ldr	r3, [pc, #376]	; (800eac8 <tcp_receive+0x5dc>)
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	b29a      	uxth	r2, r3
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e956:	b29b      	uxth	r3, r3
 800e958:	1ad3      	subs	r3, r2, r3
 800e95a:	b29b      	uxth	r3, r3
 800e95c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800e960:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e96a:	10db      	asrs	r3, r3, #3
 800e96c:	b21b      	sxth	r3, r3
 800e96e:	b29b      	uxth	r3, r3
 800e970:	1ad3      	subs	r3, r2, r3
 800e972:	b29b      	uxth	r3, r3
 800e974:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e97e:	b29a      	uxth	r2, r3
 800e980:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e984:	4413      	add	r3, r2
 800e986:	b29b      	uxth	r3, r3
 800e988:	b21a      	sxth	r2, r3
 800e98a:	687b      	ldr	r3, [r7, #4]
 800e98c:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800e98e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800e992:	2b00      	cmp	r3, #0
 800e994:	da05      	bge.n	800e9a2 <tcp_receive+0x4b6>
        m = (s16_t) - m;
 800e996:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e99a:	425b      	negs	r3, r3
 800e99c:	b29b      	uxth	r3, r3
 800e99e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800e9a2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9ac:	109b      	asrs	r3, r3, #2
 800e9ae:	b21b      	sxth	r3, r3
 800e9b0:	b29b      	uxth	r3, r3
 800e9b2:	1ad3      	subs	r3, r2, r3
 800e9b4:	b29b      	uxth	r3, r3
 800e9b6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9c0:	b29a      	uxth	r2, r3
 800e9c2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800e9c6:	4413      	add	r3, r2
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	b21a      	sxth	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e9d6:	10db      	asrs	r3, r3, #3
 800e9d8:	b21b      	sxth	r3, r3
 800e9da:	b29a      	uxth	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4413      	add	r3, r2
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	b21a      	sxth	r2, r3
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800e9f6:	4b35      	ldr	r3, [pc, #212]	; (800eacc <tcp_receive+0x5e0>)
 800e9f8:	881b      	ldrh	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	f000 84e1 	beq.w	800f3c2 <tcp_receive+0xed6>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	7d1b      	ldrb	r3, [r3, #20]
 800ea04:	2b06      	cmp	r3, #6
 800ea06:	f200 84dc 	bhi.w	800f3c2 <tcp_receive+0xed6>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea0e:	4b30      	ldr	r3, [pc, #192]	; (800ead0 <tcp_receive+0x5e4>)
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	1ad3      	subs	r3, r2, r3
 800ea14:	3b01      	subs	r3, #1
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	f2c0 808e 	blt.w	800eb38 <tcp_receive+0x64c>
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea20:	4b2a      	ldr	r3, [pc, #168]	; (800eacc <tcp_receive+0x5e0>)
 800ea22:	881b      	ldrh	r3, [r3, #0]
 800ea24:	4619      	mov	r1, r3
 800ea26:	4b2a      	ldr	r3, [pc, #168]	; (800ead0 <tcp_receive+0x5e4>)
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	440b      	add	r3, r1
 800ea2c:	1ad3      	subs	r3, r2, r3
 800ea2e:	3301      	adds	r3, #1
 800ea30:	2b00      	cmp	r3, #0
 800ea32:	f300 8081 	bgt.w	800eb38 <tcp_receive+0x64c>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800ea36:	4b27      	ldr	r3, [pc, #156]	; (800ead4 <tcp_receive+0x5e8>)
 800ea38:	685b      	ldr	r3, [r3, #4]
 800ea3a:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea40:	4b23      	ldr	r3, [pc, #140]	; (800ead0 <tcp_receive+0x5e4>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	1ad3      	subs	r3, r2, r3
 800ea46:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800ea48:	4b22      	ldr	r3, [pc, #136]	; (800ead4 <tcp_receive+0x5e8>)
 800ea4a:	685b      	ldr	r3, [r3, #4]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d106      	bne.n	800ea5e <tcp_receive+0x572>
 800ea50:	4b21      	ldr	r3, [pc, #132]	; (800ead8 <tcp_receive+0x5ec>)
 800ea52:	f240 5294 	movw	r2, #1428	; 0x594
 800ea56:	4921      	ldr	r1, [pc, #132]	; (800eadc <tcp_receive+0x5f0>)
 800ea58:	4821      	ldr	r0, [pc, #132]	; (800eae0 <tcp_receive+0x5f4>)
 800ea5a:	f005 f9d3 	bl	8013e04 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800ea5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea60:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea64:	4293      	cmp	r3, r2
 800ea66:	d906      	bls.n	800ea76 <tcp_receive+0x58a>
 800ea68:	4b1b      	ldr	r3, [pc, #108]	; (800ead8 <tcp_receive+0x5ec>)
 800ea6a:	f240 5295 	movw	r2, #1429	; 0x595
 800ea6e:	491d      	ldr	r1, [pc, #116]	; (800eae4 <tcp_receive+0x5f8>)
 800ea70:	481b      	ldr	r0, [pc, #108]	; (800eae0 <tcp_receive+0x5f4>)
 800ea72:	f005 f9c7 	bl	8013e04 <iprintf>
      off = (u16_t)off32;
 800ea76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea78:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800ea7c:	4b15      	ldr	r3, [pc, #84]	; (800ead4 <tcp_receive+0x5e8>)
 800ea7e:	685b      	ldr	r3, [r3, #4]
 800ea80:	891b      	ldrh	r3, [r3, #8]
 800ea82:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800ea86:	429a      	cmp	r2, r3
 800ea88:	d906      	bls.n	800ea98 <tcp_receive+0x5ac>
 800ea8a:	4b13      	ldr	r3, [pc, #76]	; (800ead8 <tcp_receive+0x5ec>)
 800ea8c:	f240 5297 	movw	r2, #1431	; 0x597
 800ea90:	4915      	ldr	r1, [pc, #84]	; (800eae8 <tcp_receive+0x5fc>)
 800ea92:	4813      	ldr	r0, [pc, #76]	; (800eae0 <tcp_receive+0x5f4>)
 800ea94:	f005 f9b6 	bl	8013e04 <iprintf>
      inseg.len -= off;
 800ea98:	4b0e      	ldr	r3, [pc, #56]	; (800ead4 <tcp_receive+0x5e8>)
 800ea9a:	891a      	ldrh	r2, [r3, #8]
 800ea9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eaa0:	1ad3      	subs	r3, r2, r3
 800eaa2:	b29a      	uxth	r2, r3
 800eaa4:	4b0b      	ldr	r3, [pc, #44]	; (800ead4 <tcp_receive+0x5e8>)
 800eaa6:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800eaa8:	4b0a      	ldr	r3, [pc, #40]	; (800ead4 <tcp_receive+0x5e8>)
 800eaaa:	685b      	ldr	r3, [r3, #4]
 800eaac:	891a      	ldrh	r2, [r3, #8]
 800eaae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eab2:	1ad3      	subs	r3, r2, r3
 800eab4:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800eab6:	e029      	b.n	800eb0c <tcp_receive+0x620>
 800eab8:	080163ec 	.word	0x080163ec
 800eabc:	080163f4 	.word	0x080163f4
 800eac0:	20000108 	.word	0x20000108
 800eac4:	20000104 	.word	0x20000104
 800eac8:	20007204 	.word	0x20007204
 800eacc:	2000010a 	.word	0x2000010a
 800ead0:	20000100 	.word	0x20000100
 800ead4:	200000e0 	.word	0x200000e0
 800ead8:	08016084 	.word	0x08016084
 800eadc:	080163fc 	.word	0x080163fc
 800eae0:	080160d0 	.word	0x080160d0
 800eae4:	0801640c 	.word	0x0801640c
 800eae8:	0801641c 	.word	0x0801641c
        off -= p->len;
 800eaec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaee:	895b      	ldrh	r3, [r3, #10]
 800eaf0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eaf4:	1ad3      	subs	r3, r2, r3
 800eaf6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800eafa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eafc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800eafe:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800eb00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb02:	2200      	movs	r2, #0
 800eb04:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800eb06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb08:	681b      	ldr	r3, [r3, #0]
 800eb0a:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800eb0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eb0e:	895b      	ldrh	r3, [r3, #10]
 800eb10:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800eb14:	429a      	cmp	r2, r3
 800eb16:	d8e9      	bhi.n	800eaec <tcp_receive+0x600>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800eb18:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800eb1c:	4619      	mov	r1, r3
 800eb1e:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800eb20:	f7fc fb70 	bl	800b204 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb28:	4a91      	ldr	r2, [pc, #580]	; (800ed70 <tcp_receive+0x884>)
 800eb2a:	6013      	str	r3, [r2, #0]
 800eb2c:	4b91      	ldr	r3, [pc, #580]	; (800ed74 <tcp_receive+0x888>)
 800eb2e:	68db      	ldr	r3, [r3, #12]
 800eb30:	4a8f      	ldr	r2, [pc, #572]	; (800ed70 <tcp_receive+0x884>)
 800eb32:	6812      	ldr	r2, [r2, #0]
 800eb34:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800eb36:	e00d      	b.n	800eb54 <tcp_receive+0x668>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800eb38:	4b8d      	ldr	r3, [pc, #564]	; (800ed70 <tcp_receive+0x884>)
 800eb3a:	681a      	ldr	r2, [r3, #0]
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb40:	1ad3      	subs	r3, r2, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	da06      	bge.n	800eb54 <tcp_receive+0x668>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	8b5b      	ldrh	r3, [r3, #26]
 800eb4a:	f043 0302 	orr.w	r3, r3, #2
 800eb4e:	b29a      	uxth	r2, r3
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800eb54:	4b86      	ldr	r3, [pc, #536]	; (800ed70 <tcp_receive+0x884>)
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb5c:	1ad3      	subs	r3, r2, r3
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f2c0 842a 	blt.w	800f3b8 <tcp_receive+0xecc>
 800eb64:	4b82      	ldr	r3, [pc, #520]	; (800ed70 <tcp_receive+0x884>)
 800eb66:	681a      	ldr	r2, [r3, #0]
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb70:	440b      	add	r3, r1
 800eb72:	1ad3      	subs	r3, r2, r3
 800eb74:	3301      	adds	r3, #1
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	f300 841e 	bgt.w	800f3b8 <tcp_receive+0xecc>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb80:	4b7b      	ldr	r3, [pc, #492]	; (800ed70 <tcp_receive+0x884>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	429a      	cmp	r2, r3
 800eb86:	f040 829a 	bne.w	800f0be <tcp_receive+0xbd2>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800eb8a:	4b7a      	ldr	r3, [pc, #488]	; (800ed74 <tcp_receive+0x888>)
 800eb8c:	891c      	ldrh	r4, [r3, #8]
 800eb8e:	4b79      	ldr	r3, [pc, #484]	; (800ed74 <tcp_receive+0x888>)
 800eb90:	68db      	ldr	r3, [r3, #12]
 800eb92:	899b      	ldrh	r3, [r3, #12]
 800eb94:	b29b      	uxth	r3, r3
 800eb96:	4618      	mov	r0, r3
 800eb98:	f7fb f907 	bl	8009daa <lwip_htons>
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	b2db      	uxtb	r3, r3
 800eba0:	f003 0303 	and.w	r3, r3, #3
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d001      	beq.n	800ebac <tcp_receive+0x6c0>
 800eba8:	2301      	movs	r3, #1
 800ebaa:	e000      	b.n	800ebae <tcp_receive+0x6c2>
 800ebac:	2300      	movs	r3, #0
 800ebae:	4423      	add	r3, r4
 800ebb0:	b29a      	uxth	r2, r3
 800ebb2:	4b71      	ldr	r3, [pc, #452]	; (800ed78 <tcp_receive+0x88c>)
 800ebb4:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ebba:	4b6f      	ldr	r3, [pc, #444]	; (800ed78 <tcp_receive+0x88c>)
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	429a      	cmp	r2, r3
 800ebc0:	d275      	bcs.n	800ecae <tcp_receive+0x7c2>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ebc2:	4b6c      	ldr	r3, [pc, #432]	; (800ed74 <tcp_receive+0x888>)
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	899b      	ldrh	r3, [r3, #12]
 800ebc8:	b29b      	uxth	r3, r3
 800ebca:	4618      	mov	r0, r3
 800ebcc:	f7fb f8ed 	bl	8009daa <lwip_htons>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	b2db      	uxtb	r3, r3
 800ebd4:	f003 0301 	and.w	r3, r3, #1
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d01f      	beq.n	800ec1c <tcp_receive+0x730>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800ebdc:	4b65      	ldr	r3, [pc, #404]	; (800ed74 <tcp_receive+0x888>)
 800ebde:	68db      	ldr	r3, [r3, #12]
 800ebe0:	899b      	ldrh	r3, [r3, #12]
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	b21b      	sxth	r3, r3
 800ebe6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ebea:	b21c      	sxth	r4, r3
 800ebec:	4b61      	ldr	r3, [pc, #388]	; (800ed74 <tcp_receive+0x888>)
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	899b      	ldrh	r3, [r3, #12]
 800ebf2:	b29b      	uxth	r3, r3
 800ebf4:	4618      	mov	r0, r3
 800ebf6:	f7fb f8d8 	bl	8009daa <lwip_htons>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	b2db      	uxtb	r3, r3
 800ebfe:	b29b      	uxth	r3, r3
 800ec00:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	4618      	mov	r0, r3
 800ec08:	f7fb f8cf 	bl	8009daa <lwip_htons>
 800ec0c:	4603      	mov	r3, r0
 800ec0e:	b21b      	sxth	r3, r3
 800ec10:	4323      	orrs	r3, r4
 800ec12:	b21a      	sxth	r2, r3
 800ec14:	4b57      	ldr	r3, [pc, #348]	; (800ed74 <tcp_receive+0x888>)
 800ec16:	68db      	ldr	r3, [r3, #12]
 800ec18:	b292      	uxth	r2, r2
 800ec1a:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ec20:	4b54      	ldr	r3, [pc, #336]	; (800ed74 <tcp_receive+0x888>)
 800ec22:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800ec24:	4b53      	ldr	r3, [pc, #332]	; (800ed74 <tcp_receive+0x888>)
 800ec26:	68db      	ldr	r3, [r3, #12]
 800ec28:	899b      	ldrh	r3, [r3, #12]
 800ec2a:	b29b      	uxth	r3, r3
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fb f8bc 	bl	8009daa <lwip_htons>
 800ec32:	4603      	mov	r3, r0
 800ec34:	b2db      	uxtb	r3, r3
 800ec36:	f003 0302 	and.w	r3, r3, #2
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d005      	beq.n	800ec4a <tcp_receive+0x75e>
            inseg.len -= 1;
 800ec3e:	4b4d      	ldr	r3, [pc, #308]	; (800ed74 <tcp_receive+0x888>)
 800ec40:	891b      	ldrh	r3, [r3, #8]
 800ec42:	3b01      	subs	r3, #1
 800ec44:	b29a      	uxth	r2, r3
 800ec46:	4b4b      	ldr	r3, [pc, #300]	; (800ed74 <tcp_receive+0x888>)
 800ec48:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800ec4a:	4b4a      	ldr	r3, [pc, #296]	; (800ed74 <tcp_receive+0x888>)
 800ec4c:	685b      	ldr	r3, [r3, #4]
 800ec4e:	4a49      	ldr	r2, [pc, #292]	; (800ed74 <tcp_receive+0x888>)
 800ec50:	8912      	ldrh	r2, [r2, #8]
 800ec52:	4611      	mov	r1, r2
 800ec54:	4618      	mov	r0, r3
 800ec56:	f7fc f9d5 	bl	800b004 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800ec5a:	4b46      	ldr	r3, [pc, #280]	; (800ed74 <tcp_receive+0x888>)
 800ec5c:	891c      	ldrh	r4, [r3, #8]
 800ec5e:	4b45      	ldr	r3, [pc, #276]	; (800ed74 <tcp_receive+0x888>)
 800ec60:	68db      	ldr	r3, [r3, #12]
 800ec62:	899b      	ldrh	r3, [r3, #12]
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	4618      	mov	r0, r3
 800ec68:	f7fb f89f 	bl	8009daa <lwip_htons>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	b2db      	uxtb	r3, r3
 800ec70:	f003 0303 	and.w	r3, r3, #3
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d001      	beq.n	800ec7c <tcp_receive+0x790>
 800ec78:	2301      	movs	r3, #1
 800ec7a:	e000      	b.n	800ec7e <tcp_receive+0x792>
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	4423      	add	r3, r4
 800ec80:	b29a      	uxth	r2, r3
 800ec82:	4b3d      	ldr	r3, [pc, #244]	; (800ed78 <tcp_receive+0x88c>)
 800ec84:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ec86:	4b3c      	ldr	r3, [pc, #240]	; (800ed78 <tcp_receive+0x88c>)
 800ec88:	881b      	ldrh	r3, [r3, #0]
 800ec8a:	461a      	mov	r2, r3
 800ec8c:	4b38      	ldr	r3, [pc, #224]	; (800ed70 <tcp_receive+0x884>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	441a      	add	r2, r3
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec96:	6879      	ldr	r1, [r7, #4]
 800ec98:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec9a:	440b      	add	r3, r1
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d006      	beq.n	800ecae <tcp_receive+0x7c2>
 800eca0:	4b36      	ldr	r3, [pc, #216]	; (800ed7c <tcp_receive+0x890>)
 800eca2:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800eca6:	4936      	ldr	r1, [pc, #216]	; (800ed80 <tcp_receive+0x894>)
 800eca8:	4836      	ldr	r0, [pc, #216]	; (800ed84 <tcp_receive+0x898>)
 800ecaa:	f005 f8ab 	bl	8013e04 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ecae:	687b      	ldr	r3, [r7, #4]
 800ecb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	f000 80e7 	beq.w	800ee86 <tcp_receive+0x99a>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ecb8:	4b2e      	ldr	r3, [pc, #184]	; (800ed74 <tcp_receive+0x888>)
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	899b      	ldrh	r3, [r3, #12]
 800ecbe:	b29b      	uxth	r3, r3
 800ecc0:	4618      	mov	r0, r3
 800ecc2:	f7fb f872 	bl	8009daa <lwip_htons>
 800ecc6:	4603      	mov	r3, r0
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	f003 0301 	and.w	r3, r3, #1
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d010      	beq.n	800ecf4 <tcp_receive+0x808>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ecd2:	e00a      	b.n	800ecea <tcp_receive+0x7fe>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecd8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecde:	681a      	ldr	r2, [r3, #0]
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800ece4:	68f8      	ldr	r0, [r7, #12]
 800ece6:	f7fd fd96 	bl	800c816 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ecea:	687b      	ldr	r3, [r7, #4]
 800ecec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d1f0      	bne.n	800ecd4 <tcp_receive+0x7e8>
 800ecf2:	e0c8      	b.n	800ee86 <tcp_receive+0x99a>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800ecf4:	687b      	ldr	r3, [r7, #4]
 800ecf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ecf8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ecfa:	e052      	b.n	800eda2 <tcp_receive+0x8b6>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ecfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ecfe:	68db      	ldr	r3, [r3, #12]
 800ed00:	899b      	ldrh	r3, [r3, #12]
 800ed02:	b29b      	uxth	r3, r3
 800ed04:	4618      	mov	r0, r3
 800ed06:	f7fb f850 	bl	8009daa <lwip_htons>
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	b2db      	uxtb	r3, r3
 800ed0e:	f003 0301 	and.w	r3, r3, #1
 800ed12:	2b00      	cmp	r3, #0
 800ed14:	d03d      	beq.n	800ed92 <tcp_receive+0x8a6>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ed16:	4b17      	ldr	r3, [pc, #92]	; (800ed74 <tcp_receive+0x888>)
 800ed18:	68db      	ldr	r3, [r3, #12]
 800ed1a:	899b      	ldrh	r3, [r3, #12]
 800ed1c:	b29b      	uxth	r3, r3
 800ed1e:	4618      	mov	r0, r3
 800ed20:	f7fb f843 	bl	8009daa <lwip_htons>
 800ed24:	4603      	mov	r3, r0
 800ed26:	b2db      	uxtb	r3, r3
 800ed28:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d130      	bne.n	800ed92 <tcp_receive+0x8a6>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ed30:	4b10      	ldr	r3, [pc, #64]	; (800ed74 <tcp_receive+0x888>)
 800ed32:	68db      	ldr	r3, [r3, #12]
 800ed34:	899b      	ldrh	r3, [r3, #12]
 800ed36:	b29c      	uxth	r4, r3
 800ed38:	2001      	movs	r0, #1
 800ed3a:	f7fb f836 	bl	8009daa <lwip_htons>
 800ed3e:	4603      	mov	r3, r0
 800ed40:	461a      	mov	r2, r3
 800ed42:	4b0c      	ldr	r3, [pc, #48]	; (800ed74 <tcp_receive+0x888>)
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	4322      	orrs	r2, r4
 800ed48:	b292      	uxth	r2, r2
 800ed4a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ed4c:	4b09      	ldr	r3, [pc, #36]	; (800ed74 <tcp_receive+0x888>)
 800ed4e:	891c      	ldrh	r4, [r3, #8]
 800ed50:	4b08      	ldr	r3, [pc, #32]	; (800ed74 <tcp_receive+0x888>)
 800ed52:	68db      	ldr	r3, [r3, #12]
 800ed54:	899b      	ldrh	r3, [r3, #12]
 800ed56:	b29b      	uxth	r3, r3
 800ed58:	4618      	mov	r0, r3
 800ed5a:	f7fb f826 	bl	8009daa <lwip_htons>
 800ed5e:	4603      	mov	r3, r0
 800ed60:	b2db      	uxtb	r3, r3
 800ed62:	f003 0303 	and.w	r3, r3, #3
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d00e      	beq.n	800ed88 <tcp_receive+0x89c>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e00d      	b.n	800ed8a <tcp_receive+0x89e>
 800ed6e:	bf00      	nop
 800ed70:	20000100 	.word	0x20000100
 800ed74:	200000e0 	.word	0x200000e0
 800ed78:	2000010a 	.word	0x2000010a
 800ed7c:	08016084 	.word	0x08016084
 800ed80:	0801642c 	.word	0x0801642c
 800ed84:	080160d0 	.word	0x080160d0
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4423      	add	r3, r4
 800ed8c:	b29a      	uxth	r2, r3
 800ed8e:	4b98      	ldr	r3, [pc, #608]	; (800eff0 <tcp_receive+0xb04>)
 800ed90:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800ed92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed94:	613b      	str	r3, [r7, #16]
              next = next->next;
 800ed96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800ed9c:	6938      	ldr	r0, [r7, #16]
 800ed9e:	f7fd fd3a 	bl	800c816 <tcp_seg_free>
            while (next &&
 800eda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eda4:	2b00      	cmp	r3, #0
 800eda6:	d00e      	beq.n	800edc6 <tcp_receive+0x8da>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800eda8:	4b91      	ldr	r3, [pc, #580]	; (800eff0 <tcp_receive+0xb04>)
 800edaa:	881b      	ldrh	r3, [r3, #0]
 800edac:	461a      	mov	r2, r3
 800edae:	4b91      	ldr	r3, [pc, #580]	; (800eff4 <tcp_receive+0xb08>)
 800edb0:	681b      	ldr	r3, [r3, #0]
 800edb2:	441a      	add	r2, r3
 800edb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edb6:	68db      	ldr	r3, [r3, #12]
 800edb8:	685b      	ldr	r3, [r3, #4]
 800edba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edbc:	8909      	ldrh	r1, [r1, #8]
 800edbe:	440b      	add	r3, r1
 800edc0:	1ad3      	subs	r3, r2, r3
            while (next &&
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	da9a      	bge.n	800ecfc <tcp_receive+0x810>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800edc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d059      	beq.n	800ee80 <tcp_receive+0x994>
                TCP_SEQ_GT(seqno + tcplen,
 800edcc:	4b88      	ldr	r3, [pc, #544]	; (800eff0 <tcp_receive+0xb04>)
 800edce:	881b      	ldrh	r3, [r3, #0]
 800edd0:	461a      	mov	r2, r3
 800edd2:	4b88      	ldr	r3, [pc, #544]	; (800eff4 <tcp_receive+0xb08>)
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	441a      	add	r2, r3
 800edd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edda:	68db      	ldr	r3, [r3, #12]
 800eddc:	685b      	ldr	r3, [r3, #4]
 800edde:	1ad3      	subs	r3, r2, r3
            if (next &&
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	dd4d      	ble.n	800ee80 <tcp_receive+0x994>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800ede4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ede6:	68db      	ldr	r3, [r3, #12]
 800ede8:	685b      	ldr	r3, [r3, #4]
 800edea:	b29a      	uxth	r2, r3
 800edec:	4b81      	ldr	r3, [pc, #516]	; (800eff4 <tcp_receive+0xb08>)
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	1ad3      	subs	r3, r2, r3
 800edf4:	b29a      	uxth	r2, r3
 800edf6:	4b80      	ldr	r3, [pc, #512]	; (800eff8 <tcp_receive+0xb0c>)
 800edf8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800edfa:	4b7f      	ldr	r3, [pc, #508]	; (800eff8 <tcp_receive+0xb0c>)
 800edfc:	68db      	ldr	r3, [r3, #12]
 800edfe:	899b      	ldrh	r3, [r3, #12]
 800ee00:	b29b      	uxth	r3, r3
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fa ffd1 	bl	8009daa <lwip_htons>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	b2db      	uxtb	r3, r3
 800ee0c:	f003 0302 	and.w	r3, r3, #2
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d005      	beq.n	800ee20 <tcp_receive+0x934>
                inseg.len -= 1;
 800ee14:	4b78      	ldr	r3, [pc, #480]	; (800eff8 <tcp_receive+0xb0c>)
 800ee16:	891b      	ldrh	r3, [r3, #8]
 800ee18:	3b01      	subs	r3, #1
 800ee1a:	b29a      	uxth	r2, r3
 800ee1c:	4b76      	ldr	r3, [pc, #472]	; (800eff8 <tcp_receive+0xb0c>)
 800ee1e:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800ee20:	4b75      	ldr	r3, [pc, #468]	; (800eff8 <tcp_receive+0xb0c>)
 800ee22:	685b      	ldr	r3, [r3, #4]
 800ee24:	4a74      	ldr	r2, [pc, #464]	; (800eff8 <tcp_receive+0xb0c>)
 800ee26:	8912      	ldrh	r2, [r2, #8]
 800ee28:	4611      	mov	r1, r2
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f7fc f8ea 	bl	800b004 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ee30:	4b71      	ldr	r3, [pc, #452]	; (800eff8 <tcp_receive+0xb0c>)
 800ee32:	891c      	ldrh	r4, [r3, #8]
 800ee34:	4b70      	ldr	r3, [pc, #448]	; (800eff8 <tcp_receive+0xb0c>)
 800ee36:	68db      	ldr	r3, [r3, #12]
 800ee38:	899b      	ldrh	r3, [r3, #12]
 800ee3a:	b29b      	uxth	r3, r3
 800ee3c:	4618      	mov	r0, r3
 800ee3e:	f7fa ffb4 	bl	8009daa <lwip_htons>
 800ee42:	4603      	mov	r3, r0
 800ee44:	b2db      	uxtb	r3, r3
 800ee46:	f003 0303 	and.w	r3, r3, #3
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d001      	beq.n	800ee52 <tcp_receive+0x966>
 800ee4e:	2301      	movs	r3, #1
 800ee50:	e000      	b.n	800ee54 <tcp_receive+0x968>
 800ee52:	2300      	movs	r3, #0
 800ee54:	4423      	add	r3, r4
 800ee56:	b29a      	uxth	r2, r3
 800ee58:	4b65      	ldr	r3, [pc, #404]	; (800eff0 <tcp_receive+0xb04>)
 800ee5a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ee5c:	4b64      	ldr	r3, [pc, #400]	; (800eff0 <tcp_receive+0xb04>)
 800ee5e:	881b      	ldrh	r3, [r3, #0]
 800ee60:	461a      	mov	r2, r3
 800ee62:	4b64      	ldr	r3, [pc, #400]	; (800eff4 <tcp_receive+0xb08>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	441a      	add	r2, r3
 800ee68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6a:	68db      	ldr	r3, [r3, #12]
 800ee6c:	685b      	ldr	r3, [r3, #4]
 800ee6e:	429a      	cmp	r2, r3
 800ee70:	d006      	beq.n	800ee80 <tcp_receive+0x994>
 800ee72:	4b62      	ldr	r3, [pc, #392]	; (800effc <tcp_receive+0xb10>)
 800ee74:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ee78:	4961      	ldr	r1, [pc, #388]	; (800f000 <tcp_receive+0xb14>)
 800ee7a:	4862      	ldr	r0, [pc, #392]	; (800f004 <tcp_receive+0xb18>)
 800ee7c:	f004 ffc2 	bl	8013e04 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ee84:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ee86:	4b5a      	ldr	r3, [pc, #360]	; (800eff0 <tcp_receive+0xb04>)
 800ee88:	881b      	ldrh	r3, [r3, #0]
 800ee8a:	461a      	mov	r2, r3
 800ee8c:	4b59      	ldr	r3, [pc, #356]	; (800eff4 <tcp_receive+0xb08>)
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	441a      	add	r2, r3
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ee9a:	4b55      	ldr	r3, [pc, #340]	; (800eff0 <tcp_receive+0xb04>)
 800ee9c:	881b      	ldrh	r3, [r3, #0]
 800ee9e:	429a      	cmp	r2, r3
 800eea0:	d206      	bcs.n	800eeb0 <tcp_receive+0x9c4>
 800eea2:	4b56      	ldr	r3, [pc, #344]	; (800effc <tcp_receive+0xb10>)
 800eea4:	f240 6207 	movw	r2, #1543	; 0x607
 800eea8:	4957      	ldr	r1, [pc, #348]	; (800f008 <tcp_receive+0xb1c>)
 800eeaa:	4856      	ldr	r0, [pc, #344]	; (800f004 <tcp_receive+0xb18>)
 800eeac:	f004 ffaa 	bl	8013e04 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800eeb4:	4b4e      	ldr	r3, [pc, #312]	; (800eff0 <tcp_receive+0xb04>)
 800eeb6:	881b      	ldrh	r3, [r3, #0]
 800eeb8:	1ad3      	subs	r3, r2, r3
 800eeba:	b29a      	uxth	r2, r3
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800eec0:	6878      	ldr	r0, [r7, #4]
 800eec2:	f7fc ffc9 	bl	800be58 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800eec6:	4b4c      	ldr	r3, [pc, #304]	; (800eff8 <tcp_receive+0xb0c>)
 800eec8:	685b      	ldr	r3, [r3, #4]
 800eeca:	891b      	ldrh	r3, [r3, #8]
 800eecc:	2b00      	cmp	r3, #0
 800eece:	d006      	beq.n	800eede <tcp_receive+0x9f2>
          recv_data = inseg.p;
 800eed0:	4b49      	ldr	r3, [pc, #292]	; (800eff8 <tcp_receive+0xb0c>)
 800eed2:	685b      	ldr	r3, [r3, #4]
 800eed4:	4a4d      	ldr	r2, [pc, #308]	; (800f00c <tcp_receive+0xb20>)
 800eed6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800eed8:	4b47      	ldr	r3, [pc, #284]	; (800eff8 <tcp_receive+0xb0c>)
 800eeda:	2200      	movs	r2, #0
 800eedc:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800eede:	4b46      	ldr	r3, [pc, #280]	; (800eff8 <tcp_receive+0xb0c>)
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	899b      	ldrh	r3, [r3, #12]
 800eee4:	b29b      	uxth	r3, r3
 800eee6:	4618      	mov	r0, r3
 800eee8:	f7fa ff5f 	bl	8009daa <lwip_htons>
 800eeec:	4603      	mov	r3, r0
 800eeee:	b2db      	uxtb	r3, r3
 800eef0:	f003 0301 	and.w	r3, r3, #1
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	f000 80b8 	beq.w	800f06a <tcp_receive+0xb7e>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800eefa:	4b45      	ldr	r3, [pc, #276]	; (800f010 <tcp_receive+0xb24>)
 800eefc:	781b      	ldrb	r3, [r3, #0]
 800eefe:	f043 0320 	orr.w	r3, r3, #32
 800ef02:	b2da      	uxtb	r2, r3
 800ef04:	4b42      	ldr	r3, [pc, #264]	; (800f010 <tcp_receive+0xb24>)
 800ef06:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ef08:	e0af      	b.n	800f06a <tcp_receive+0xb7e>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef0e:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ef14:	68db      	ldr	r3, [r3, #12]
 800ef16:	685b      	ldr	r3, [r3, #4]
 800ef18:	4a36      	ldr	r2, [pc, #216]	; (800eff4 <tcp_receive+0xb08>)
 800ef1a:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ef1c:	68bb      	ldr	r3, [r7, #8]
 800ef1e:	891b      	ldrh	r3, [r3, #8]
 800ef20:	461c      	mov	r4, r3
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	68db      	ldr	r3, [r3, #12]
 800ef26:	899b      	ldrh	r3, [r3, #12]
 800ef28:	b29b      	uxth	r3, r3
 800ef2a:	4618      	mov	r0, r3
 800ef2c:	f7fa ff3d 	bl	8009daa <lwip_htons>
 800ef30:	4603      	mov	r3, r0
 800ef32:	b2db      	uxtb	r3, r3
 800ef34:	f003 0303 	and.w	r3, r3, #3
 800ef38:	2b00      	cmp	r3, #0
 800ef3a:	d001      	beq.n	800ef40 <tcp_receive+0xa54>
 800ef3c:	2301      	movs	r3, #1
 800ef3e:	e000      	b.n	800ef42 <tcp_receive+0xa56>
 800ef40:	2300      	movs	r3, #0
 800ef42:	191a      	adds	r2, r3, r4
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef48:	441a      	add	r2, r3
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ef52:	461c      	mov	r4, r3
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	891b      	ldrh	r3, [r3, #8]
 800ef58:	461d      	mov	r5, r3
 800ef5a:	68bb      	ldr	r3, [r7, #8]
 800ef5c:	68db      	ldr	r3, [r3, #12]
 800ef5e:	899b      	ldrh	r3, [r3, #12]
 800ef60:	b29b      	uxth	r3, r3
 800ef62:	4618      	mov	r0, r3
 800ef64:	f7fa ff21 	bl	8009daa <lwip_htons>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	b2db      	uxtb	r3, r3
 800ef6c:	f003 0303 	and.w	r3, r3, #3
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d001      	beq.n	800ef78 <tcp_receive+0xa8c>
 800ef74:	2301      	movs	r3, #1
 800ef76:	e000      	b.n	800ef7a <tcp_receive+0xa8e>
 800ef78:	2300      	movs	r3, #0
 800ef7a:	442b      	add	r3, r5
 800ef7c:	429c      	cmp	r4, r3
 800ef7e:	d206      	bcs.n	800ef8e <tcp_receive+0xaa2>
 800ef80:	4b1e      	ldr	r3, [pc, #120]	; (800effc <tcp_receive+0xb10>)
 800ef82:	f240 622b 	movw	r2, #1579	; 0x62b
 800ef86:	4923      	ldr	r1, [pc, #140]	; (800f014 <tcp_receive+0xb28>)
 800ef88:	481e      	ldr	r0, [pc, #120]	; (800f004 <tcp_receive+0xb18>)
 800ef8a:	f004 ff3b 	bl	8013e04 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	891b      	ldrh	r3, [r3, #8]
 800ef92:	461c      	mov	r4, r3
 800ef94:	68bb      	ldr	r3, [r7, #8]
 800ef96:	68db      	ldr	r3, [r3, #12]
 800ef98:	899b      	ldrh	r3, [r3, #12]
 800ef9a:	b29b      	uxth	r3, r3
 800ef9c:	4618      	mov	r0, r3
 800ef9e:	f7fa ff04 	bl	8009daa <lwip_htons>
 800efa2:	4603      	mov	r3, r0
 800efa4:	b2db      	uxtb	r3, r3
 800efa6:	f003 0303 	and.w	r3, r3, #3
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d001      	beq.n	800efb2 <tcp_receive+0xac6>
 800efae:	2301      	movs	r3, #1
 800efb0:	e000      	b.n	800efb4 <tcp_receive+0xac8>
 800efb2:	2300      	movs	r3, #0
 800efb4:	1919      	adds	r1, r3, r4
 800efb6:	687b      	ldr	r3, [r7, #4]
 800efb8:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800efba:	b28b      	uxth	r3, r1
 800efbc:	1ad3      	subs	r3, r2, r3
 800efbe:	b29a      	uxth	r2, r3
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	f7fc ff47 	bl	800be58 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800efca:	68bb      	ldr	r3, [r7, #8]
 800efcc:	685b      	ldr	r3, [r3, #4]
 800efce:	891b      	ldrh	r3, [r3, #8]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d028      	beq.n	800f026 <tcp_receive+0xb3a>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800efd4:	4b0d      	ldr	r3, [pc, #52]	; (800f00c <tcp_receive+0xb20>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d01d      	beq.n	800f018 <tcp_receive+0xb2c>
              pbuf_cat(recv_data, cseg->p);
 800efdc:	4b0b      	ldr	r3, [pc, #44]	; (800f00c <tcp_receive+0xb20>)
 800efde:	681a      	ldr	r2, [r3, #0]
 800efe0:	68bb      	ldr	r3, [r7, #8]
 800efe2:	685b      	ldr	r3, [r3, #4]
 800efe4:	4619      	mov	r1, r3
 800efe6:	4610      	mov	r0, r2
 800efe8:	f7fc fa54 	bl	800b494 <pbuf_cat>
 800efec:	e018      	b.n	800f020 <tcp_receive+0xb34>
 800efee:	bf00      	nop
 800eff0:	2000010a 	.word	0x2000010a
 800eff4:	20000100 	.word	0x20000100
 800eff8:	200000e0 	.word	0x200000e0
 800effc:	08016084 	.word	0x08016084
 800f000:	08016464 	.word	0x08016464
 800f004:	080160d0 	.word	0x080160d0
 800f008:	080164a0 	.word	0x080164a0
 800f00c:	20000110 	.word	0x20000110
 800f010:	2000010d 	.word	0x2000010d
 800f014:	080164c0 	.word	0x080164c0
            } else {
              recv_data = cseg->p;
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	685b      	ldr	r3, [r3, #4]
 800f01c:	4a70      	ldr	r2, [pc, #448]	; (800f1e0 <tcp_receive+0xcf4>)
 800f01e:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f020:	68bb      	ldr	r3, [r7, #8]
 800f022:	2200      	movs	r2, #0
 800f024:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f026:	68bb      	ldr	r3, [r7, #8]
 800f028:	68db      	ldr	r3, [r3, #12]
 800f02a:	899b      	ldrh	r3, [r3, #12]
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	4618      	mov	r0, r3
 800f030:	f7fa febb 	bl	8009daa <lwip_htons>
 800f034:	4603      	mov	r3, r0
 800f036:	b2db      	uxtb	r3, r3
 800f038:	f003 0301 	and.w	r3, r3, #1
 800f03c:	2b00      	cmp	r3, #0
 800f03e:	d00d      	beq.n	800f05c <tcp_receive+0xb70>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f040:	4b68      	ldr	r3, [pc, #416]	; (800f1e4 <tcp_receive+0xcf8>)
 800f042:	781b      	ldrb	r3, [r3, #0]
 800f044:	f043 0320 	orr.w	r3, r3, #32
 800f048:	b2da      	uxtb	r2, r3
 800f04a:	4b66      	ldr	r3, [pc, #408]	; (800f1e4 <tcp_receive+0xcf8>)
 800f04c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	7d1b      	ldrb	r3, [r3, #20]
 800f052:	2b04      	cmp	r3, #4
 800f054:	d102      	bne.n	800f05c <tcp_receive+0xb70>
              pcb->state = CLOSE_WAIT;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2207      	movs	r2, #7
 800f05a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	681a      	ldr	r2, [r3, #0]
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f064:	68b8      	ldr	r0, [r7, #8]
 800f066:	f7fd fbd6 	bl	800c816 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d008      	beq.n	800f084 <tcp_receive+0xb98>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f076:	68db      	ldr	r3, [r3, #12]
 800f078:	685a      	ldr	r2, [r3, #4]
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f07e:	429a      	cmp	r2, r3
 800f080:	f43f af43 	beq.w	800ef0a <tcp_receive+0xa1e>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	8b5b      	ldrh	r3, [r3, #26]
 800f088:	f003 0301 	and.w	r3, r3, #1
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d00e      	beq.n	800f0ae <tcp_receive+0xbc2>
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	8b5b      	ldrh	r3, [r3, #26]
 800f094:	f023 0301 	bic.w	r3, r3, #1
 800f098:	b29a      	uxth	r2, r3
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	835a      	strh	r2, [r3, #26]
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	8b5b      	ldrh	r3, [r3, #26]
 800f0a2:	f043 0302 	orr.w	r3, r3, #2
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f0ac:	e188      	b.n	800f3c0 <tcp_receive+0xed4>
        tcp_ack(pcb);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	8b5b      	ldrh	r3, [r3, #26]
 800f0b2:	f043 0301 	orr.w	r3, r3, #1
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f0bc:	e180      	b.n	800f3c0 <tcp_receive+0xed4>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d106      	bne.n	800f0d4 <tcp_receive+0xbe8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f0c6:	4848      	ldr	r0, [pc, #288]	; (800f1e8 <tcp_receive+0xcfc>)
 800f0c8:	f7fd fbbe 	bl	800c848 <tcp_seg_copy>
 800f0cc:	4602      	mov	r2, r0
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	675a      	str	r2, [r3, #116]	; 0x74
 800f0d2:	e16d      	b.n	800f3b0 <tcp_receive+0xec4>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f0dc:	63bb      	str	r3, [r7, #56]	; 0x38
 800f0de:	e157      	b.n	800f390 <tcp_receive+0xea4>
            if (seqno == next->tcphdr->seqno) {
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	68db      	ldr	r3, [r3, #12]
 800f0e4:	685a      	ldr	r2, [r3, #4]
 800f0e6:	4b41      	ldr	r3, [pc, #260]	; (800f1ec <tcp_receive+0xd00>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	429a      	cmp	r2, r3
 800f0ec:	d11d      	bne.n	800f12a <tcp_receive+0xc3e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f0ee:	4b3e      	ldr	r3, [pc, #248]	; (800f1e8 <tcp_receive+0xcfc>)
 800f0f0:	891a      	ldrh	r2, [r3, #8]
 800f0f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0f4:	891b      	ldrh	r3, [r3, #8]
 800f0f6:	429a      	cmp	r2, r3
 800f0f8:	f240 814f 	bls.w	800f39a <tcp_receive+0xeae>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f0fc:	483a      	ldr	r0, [pc, #232]	; (800f1e8 <tcp_receive+0xcfc>)
 800f0fe:	f7fd fba3 	bl	800c848 <tcp_seg_copy>
 800f102:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	2b00      	cmp	r3, #0
 800f108:	f000 8149 	beq.w	800f39e <tcp_receive+0xeb2>
                  if (prev != NULL) {
 800f10c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d003      	beq.n	800f11a <tcp_receive+0xc2e>
                    prev->next = cseg;
 800f112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f114:	697a      	ldr	r2, [r7, #20]
 800f116:	601a      	str	r2, [r3, #0]
 800f118:	e002      	b.n	800f120 <tcp_receive+0xc34>
                  } else {
                    pcb->ooseq = cseg;
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	697a      	ldr	r2, [r7, #20]
 800f11e:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f120:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f122:	6978      	ldr	r0, [r7, #20]
 800f124:	f7ff f8de 	bl	800e2e4 <tcp_oos_insert_segment>
                }
                break;
 800f128:	e139      	b.n	800f39e <tcp_receive+0xeb2>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f12c:	2b00      	cmp	r3, #0
 800f12e:	d117      	bne.n	800f160 <tcp_receive+0xc74>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f130:	4b2e      	ldr	r3, [pc, #184]	; (800f1ec <tcp_receive+0xd00>)
 800f132:	681a      	ldr	r2, [r3, #0]
 800f134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f136:	68db      	ldr	r3, [r3, #12]
 800f138:	685b      	ldr	r3, [r3, #4]
 800f13a:	1ad3      	subs	r3, r2, r3
 800f13c:	2b00      	cmp	r3, #0
 800f13e:	da57      	bge.n	800f1f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f140:	4829      	ldr	r0, [pc, #164]	; (800f1e8 <tcp_receive+0xcfc>)
 800f142:	f7fd fb81 	bl	800c848 <tcp_seg_copy>
 800f146:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f148:	69bb      	ldr	r3, [r7, #24]
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	f000 8129 	beq.w	800f3a2 <tcp_receive+0xeb6>
                    pcb->ooseq = cseg;
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	69ba      	ldr	r2, [r7, #24]
 800f154:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f156:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f158:	69b8      	ldr	r0, [r7, #24]
 800f15a:	f7ff f8c3 	bl	800e2e4 <tcp_oos_insert_segment>
                  }
                  break;
 800f15e:	e120      	b.n	800f3a2 <tcp_receive+0xeb6>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f160:	4b22      	ldr	r3, [pc, #136]	; (800f1ec <tcp_receive+0xd00>)
 800f162:	681a      	ldr	r2, [r3, #0]
 800f164:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f166:	68db      	ldr	r3, [r3, #12]
 800f168:	685b      	ldr	r3, [r3, #4]
 800f16a:	1ad3      	subs	r3, r2, r3
 800f16c:	3b01      	subs	r3, #1
 800f16e:	2b00      	cmp	r3, #0
 800f170:	db3e      	blt.n	800f1f0 <tcp_receive+0xd04>
 800f172:	4b1e      	ldr	r3, [pc, #120]	; (800f1ec <tcp_receive+0xd00>)
 800f174:	681a      	ldr	r2, [r3, #0]
 800f176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f178:	68db      	ldr	r3, [r3, #12]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	1ad3      	subs	r3, r2, r3
 800f17e:	3301      	adds	r3, #1
 800f180:	2b00      	cmp	r3, #0
 800f182:	dc35      	bgt.n	800f1f0 <tcp_receive+0xd04>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f184:	4818      	ldr	r0, [pc, #96]	; (800f1e8 <tcp_receive+0xcfc>)
 800f186:	f7fd fb5f 	bl	800c848 <tcp_seg_copy>
 800f18a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f18c:	69fb      	ldr	r3, [r7, #28]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	f000 8109 	beq.w	800f3a6 <tcp_receive+0xeba>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	685b      	ldr	r3, [r3, #4]
 800f19a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f19c:	8912      	ldrh	r2, [r2, #8]
 800f19e:	441a      	add	r2, r3
 800f1a0:	4b12      	ldr	r3, [pc, #72]	; (800f1ec <tcp_receive+0xd00>)
 800f1a2:	681b      	ldr	r3, [r3, #0]
 800f1a4:	1ad3      	subs	r3, r2, r3
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	dd12      	ble.n	800f1d0 <tcp_receive+0xce4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f1aa:	4b10      	ldr	r3, [pc, #64]	; (800f1ec <tcp_receive+0xd00>)
 800f1ac:	681b      	ldr	r3, [r3, #0]
 800f1ae:	b29a      	uxth	r2, r3
 800f1b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1b2:	68db      	ldr	r3, [r3, #12]
 800f1b4:	685b      	ldr	r3, [r3, #4]
 800f1b6:	b29b      	uxth	r3, r3
 800f1b8:	1ad3      	subs	r3, r2, r3
 800f1ba:	b29a      	uxth	r2, r3
 800f1bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1be:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800f1c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c2:	685a      	ldr	r2, [r3, #4]
 800f1c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1c6:	891b      	ldrh	r3, [r3, #8]
 800f1c8:	4619      	mov	r1, r3
 800f1ca:	4610      	mov	r0, r2
 800f1cc:	f7fb ff1a 	bl	800b004 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800f1d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1d2:	69fa      	ldr	r2, [r7, #28]
 800f1d4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800f1d6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f1d8:	69f8      	ldr	r0, [r7, #28]
 800f1da:	f7ff f883 	bl	800e2e4 <tcp_oos_insert_segment>
                  }
                  break;
 800f1de:	e0e2      	b.n	800f3a6 <tcp_receive+0xeba>
 800f1e0:	20000110 	.word	0x20000110
 800f1e4:	2000010d 	.word	0x2000010d
 800f1e8:	200000e0 	.word	0x200000e0
 800f1ec:	20000100 	.word	0x20000100
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800f1f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f040 80c6 	bne.w	800f38a <tcp_receive+0xe9e>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800f1fe:	4b80      	ldr	r3, [pc, #512]	; (800f400 <tcp_receive+0xf14>)
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f204:	68db      	ldr	r3, [r3, #12]
 800f206:	685b      	ldr	r3, [r3, #4]
 800f208:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	f340 80bd 	ble.w	800f38a <tcp_receive+0xe9e>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f212:	68db      	ldr	r3, [r3, #12]
 800f214:	899b      	ldrh	r3, [r3, #12]
 800f216:	b29b      	uxth	r3, r3
 800f218:	4618      	mov	r0, r3
 800f21a:	f7fa fdc6 	bl	8009daa <lwip_htons>
 800f21e:	4603      	mov	r3, r0
 800f220:	b2db      	uxtb	r3, r3
 800f222:	f003 0301 	and.w	r3, r3, #1
 800f226:	2b00      	cmp	r3, #0
 800f228:	f040 80bf 	bne.w	800f3aa <tcp_receive+0xebe>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800f22c:	4875      	ldr	r0, [pc, #468]	; (800f404 <tcp_receive+0xf18>)
 800f22e:	f7fd fb0b 	bl	800c848 <tcp_seg_copy>
 800f232:	4602      	mov	r2, r0
 800f234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f236:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800f238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f23a:	681b      	ldr	r3, [r3, #0]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	f000 80b6 	beq.w	800f3ae <tcp_receive+0xec2>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800f242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f244:	68db      	ldr	r3, [r3, #12]
 800f246:	685b      	ldr	r3, [r3, #4]
 800f248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f24a:	8912      	ldrh	r2, [r2, #8]
 800f24c:	441a      	add	r2, r3
 800f24e:	4b6c      	ldr	r3, [pc, #432]	; (800f400 <tcp_receive+0xf14>)
 800f250:	681b      	ldr	r3, [r3, #0]
 800f252:	1ad3      	subs	r3, r2, r3
 800f254:	2b00      	cmp	r3, #0
 800f256:	dd12      	ble.n	800f27e <tcp_receive+0xd92>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800f258:	4b69      	ldr	r3, [pc, #420]	; (800f400 <tcp_receive+0xf14>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	b29a      	uxth	r2, r3
 800f25e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f260:	68db      	ldr	r3, [r3, #12]
 800f262:	685b      	ldr	r3, [r3, #4]
 800f264:	b29b      	uxth	r3, r3
 800f266:	1ad3      	subs	r3, r2, r3
 800f268:	b29a      	uxth	r2, r3
 800f26a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f26c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800f26e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f270:	685a      	ldr	r2, [r3, #4]
 800f272:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f274:	891b      	ldrh	r3, [r3, #8]
 800f276:	4619      	mov	r1, r3
 800f278:	4610      	mov	r0, r2
 800f27a:	f7fb fec3 	bl	800b004 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800f27e:	4b62      	ldr	r3, [pc, #392]	; (800f408 <tcp_receive+0xf1c>)
 800f280:	881b      	ldrh	r3, [r3, #0]
 800f282:	461a      	mov	r2, r3
 800f284:	4b5e      	ldr	r3, [pc, #376]	; (800f400 <tcp_receive+0xf14>)
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	441a      	add	r2, r3
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f28e:	6879      	ldr	r1, [r7, #4]
 800f290:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f292:	440b      	add	r3, r1
 800f294:	1ad3      	subs	r3, r2, r3
 800f296:	2b00      	cmp	r3, #0
 800f298:	f340 8089 	ble.w	800f3ae <tcp_receive+0xec2>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	68db      	ldr	r3, [r3, #12]
 800f2a2:	899b      	ldrh	r3, [r3, #12]
 800f2a4:	b29b      	uxth	r3, r3
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	f7fa fd7f 	bl	8009daa <lwip_htons>
 800f2ac:	4603      	mov	r3, r0
 800f2ae:	b2db      	uxtb	r3, r3
 800f2b0:	f003 0301 	and.w	r3, r3, #1
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	d022      	beq.n	800f2fe <tcp_receive+0xe12>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800f2b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ba:	681b      	ldr	r3, [r3, #0]
 800f2bc:	68db      	ldr	r3, [r3, #12]
 800f2be:	899b      	ldrh	r3, [r3, #12]
 800f2c0:	b29b      	uxth	r3, r3
 800f2c2:	b21b      	sxth	r3, r3
 800f2c4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f2c8:	b21c      	sxth	r4, r3
 800f2ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2cc:	681b      	ldr	r3, [r3, #0]
 800f2ce:	68db      	ldr	r3, [r3, #12]
 800f2d0:	899b      	ldrh	r3, [r3, #12]
 800f2d2:	b29b      	uxth	r3, r3
 800f2d4:	4618      	mov	r0, r3
 800f2d6:	f7fa fd68 	bl	8009daa <lwip_htons>
 800f2da:	4603      	mov	r3, r0
 800f2dc:	b2db      	uxtb	r3, r3
 800f2de:	b29b      	uxth	r3, r3
 800f2e0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	f7fa fd5f 	bl	8009daa <lwip_htons>
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	b21b      	sxth	r3, r3
 800f2f0:	4323      	orrs	r3, r4
 800f2f2:	b21a      	sxth	r2, r3
 800f2f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2f6:	681b      	ldr	r3, [r3, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	b292      	uxth	r2, r2
 800f2fc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f302:	b29a      	uxth	r2, r3
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f308:	4413      	add	r3, r2
 800f30a:	b299      	uxth	r1, r3
 800f30c:	4b3c      	ldr	r3, [pc, #240]	; (800f400 <tcp_receive+0xf14>)
 800f30e:	681b      	ldr	r3, [r3, #0]
 800f310:	b29a      	uxth	r2, r3
 800f312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	1a8a      	subs	r2, r1, r2
 800f318:	b292      	uxth	r2, r2
 800f31a:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800f31c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	685a      	ldr	r2, [r3, #4]
 800f322:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f324:	681b      	ldr	r3, [r3, #0]
 800f326:	891b      	ldrh	r3, [r3, #8]
 800f328:	4619      	mov	r1, r3
 800f32a:	4610      	mov	r0, r2
 800f32c:	f7fb fe6a 	bl	800b004 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800f330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	891c      	ldrh	r4, [r3, #8]
 800f336:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f338:	681b      	ldr	r3, [r3, #0]
 800f33a:	68db      	ldr	r3, [r3, #12]
 800f33c:	899b      	ldrh	r3, [r3, #12]
 800f33e:	b29b      	uxth	r3, r3
 800f340:	4618      	mov	r0, r3
 800f342:	f7fa fd32 	bl	8009daa <lwip_htons>
 800f346:	4603      	mov	r3, r0
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	f003 0303 	and.w	r3, r3, #3
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d001      	beq.n	800f356 <tcp_receive+0xe6a>
 800f352:	2301      	movs	r3, #1
 800f354:	e000      	b.n	800f358 <tcp_receive+0xe6c>
 800f356:	2300      	movs	r3, #0
 800f358:	4423      	add	r3, r4
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	4b2a      	ldr	r3, [pc, #168]	; (800f408 <tcp_receive+0xf1c>)
 800f35e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f360:	4b29      	ldr	r3, [pc, #164]	; (800f408 <tcp_receive+0xf1c>)
 800f362:	881b      	ldrh	r3, [r3, #0]
 800f364:	461a      	mov	r2, r3
 800f366:	4b26      	ldr	r3, [pc, #152]	; (800f400 <tcp_receive+0xf14>)
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	441a      	add	r2, r3
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f370:	6879      	ldr	r1, [r7, #4]
 800f372:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f374:	440b      	add	r3, r1
 800f376:	429a      	cmp	r2, r3
 800f378:	d019      	beq.n	800f3ae <tcp_receive+0xec2>
 800f37a:	4b24      	ldr	r3, [pc, #144]	; (800f40c <tcp_receive+0xf20>)
 800f37c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800f380:	4923      	ldr	r1, [pc, #140]	; (800f410 <tcp_receive+0xf24>)
 800f382:	4824      	ldr	r0, [pc, #144]	; (800f414 <tcp_receive+0xf28>)
 800f384:	f004 fd3e 	bl	8013e04 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800f388:	e011      	b.n	800f3ae <tcp_receive+0xec2>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f38a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f38c:	681b      	ldr	r3, [r3, #0]
 800f38e:	63bb      	str	r3, [r7, #56]	; 0x38
 800f390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f392:	2b00      	cmp	r3, #0
 800f394:	f47f aea4 	bne.w	800f0e0 <tcp_receive+0xbf4>
 800f398:	e00a      	b.n	800f3b0 <tcp_receive+0xec4>
                break;
 800f39a:	bf00      	nop
 800f39c:	e008      	b.n	800f3b0 <tcp_receive+0xec4>
                break;
 800f39e:	bf00      	nop
 800f3a0:	e006      	b.n	800f3b0 <tcp_receive+0xec4>
                  break;
 800f3a2:	bf00      	nop
 800f3a4:	e004      	b.n	800f3b0 <tcp_receive+0xec4>
                  break;
 800f3a6:	bf00      	nop
 800f3a8:	e002      	b.n	800f3b0 <tcp_receive+0xec4>
                  break;
 800f3aa:	bf00      	nop
 800f3ac:	e000      	b.n	800f3b0 <tcp_receive+0xec4>
                break;
 800f3ae:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800f3b0:	6878      	ldr	r0, [r7, #4]
 800f3b2:	f001 fa33 	bl	801081c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800f3b6:	e003      	b.n	800f3c0 <tcp_receive+0xed4>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800f3b8:	6878      	ldr	r0, [r7, #4]
 800f3ba:	f001 fa2f 	bl	801081c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f3be:	e01a      	b.n	800f3f6 <tcp_receive+0xf0a>
 800f3c0:	e019      	b.n	800f3f6 <tcp_receive+0xf0a>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800f3c2:	4b0f      	ldr	r3, [pc, #60]	; (800f400 <tcp_receive+0xf14>)
 800f3c4:	681a      	ldr	r2, [r3, #0]
 800f3c6:	687b      	ldr	r3, [r7, #4]
 800f3c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3ca:	1ad3      	subs	r3, r2, r3
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	db0a      	blt.n	800f3e6 <tcp_receive+0xefa>
 800f3d0:	4b0b      	ldr	r3, [pc, #44]	; (800f400 <tcp_receive+0xf14>)
 800f3d2:	681a      	ldr	r2, [r3, #0]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3d8:	6879      	ldr	r1, [r7, #4]
 800f3da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3dc:	440b      	add	r3, r1
 800f3de:	1ad3      	subs	r3, r2, r3
 800f3e0:	3301      	adds	r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	dd07      	ble.n	800f3f6 <tcp_receive+0xf0a>
      tcp_ack_now(pcb);
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	8b5b      	ldrh	r3, [r3, #26]
 800f3ea:	f043 0302 	orr.w	r3, r3, #2
 800f3ee:	b29a      	uxth	r2, r3
 800f3f0:	687b      	ldr	r3, [r7, #4]
 800f3f2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800f3f4:	e7ff      	b.n	800f3f6 <tcp_receive+0xf0a>
 800f3f6:	bf00      	nop
 800f3f8:	3750      	adds	r7, #80	; 0x50
 800f3fa:	46bd      	mov	sp, r7
 800f3fc:	bdb0      	pop	{r4, r5, r7, pc}
 800f3fe:	bf00      	nop
 800f400:	20000100 	.word	0x20000100
 800f404:	200000e0 	.word	0x200000e0
 800f408:	2000010a 	.word	0x2000010a
 800f40c:	08016084 	.word	0x08016084
 800f410:	0801642c 	.word	0x0801642c
 800f414:	080160d0 	.word	0x080160d0

0800f418 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800f41e:	4b15      	ldr	r3, [pc, #84]	; (800f474 <tcp_get_next_optbyte+0x5c>)
 800f420:	881b      	ldrh	r3, [r3, #0]
 800f422:	1c5a      	adds	r2, r3, #1
 800f424:	b291      	uxth	r1, r2
 800f426:	4a13      	ldr	r2, [pc, #76]	; (800f474 <tcp_get_next_optbyte+0x5c>)
 800f428:	8011      	strh	r1, [r2, #0]
 800f42a:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800f42c:	4b12      	ldr	r3, [pc, #72]	; (800f478 <tcp_get_next_optbyte+0x60>)
 800f42e:	681b      	ldr	r3, [r3, #0]
 800f430:	2b00      	cmp	r3, #0
 800f432:	d004      	beq.n	800f43e <tcp_get_next_optbyte+0x26>
 800f434:	4b11      	ldr	r3, [pc, #68]	; (800f47c <tcp_get_next_optbyte+0x64>)
 800f436:	881b      	ldrh	r3, [r3, #0]
 800f438:	88fa      	ldrh	r2, [r7, #6]
 800f43a:	429a      	cmp	r2, r3
 800f43c:	d208      	bcs.n	800f450 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800f43e:	4b10      	ldr	r3, [pc, #64]	; (800f480 <tcp_get_next_optbyte+0x68>)
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	3314      	adds	r3, #20
 800f444:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800f446:	88fb      	ldrh	r3, [r7, #6]
 800f448:	683a      	ldr	r2, [r7, #0]
 800f44a:	4413      	add	r3, r2
 800f44c:	781b      	ldrb	r3, [r3, #0]
 800f44e:	e00b      	b.n	800f468 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800f450:	88fb      	ldrh	r3, [r7, #6]
 800f452:	b2da      	uxtb	r2, r3
 800f454:	4b09      	ldr	r3, [pc, #36]	; (800f47c <tcp_get_next_optbyte+0x64>)
 800f456:	881b      	ldrh	r3, [r3, #0]
 800f458:	b2db      	uxtb	r3, r3
 800f45a:	1ad3      	subs	r3, r2, r3
 800f45c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800f45e:	4b06      	ldr	r3, [pc, #24]	; (800f478 <tcp_get_next_optbyte+0x60>)
 800f460:	681a      	ldr	r2, [r3, #0]
 800f462:	797b      	ldrb	r3, [r7, #5]
 800f464:	4413      	add	r3, r2
 800f466:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f468:	4618      	mov	r0, r3
 800f46a:	370c      	adds	r7, #12
 800f46c:	46bd      	mov	sp, r7
 800f46e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f472:	4770      	bx	lr
 800f474:	200000fc 	.word	0x200000fc
 800f478:	200000f8 	.word	0x200000f8
 800f47c:	200000f6 	.word	0x200000f6
 800f480:	200000f0 	.word	0x200000f0

0800f484 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d106      	bne.n	800f4a0 <tcp_parseopt+0x1c>
 800f492:	4b32      	ldr	r3, [pc, #200]	; (800f55c <tcp_parseopt+0xd8>)
 800f494:	f240 727d 	movw	r2, #1917	; 0x77d
 800f498:	4931      	ldr	r1, [pc, #196]	; (800f560 <tcp_parseopt+0xdc>)
 800f49a:	4832      	ldr	r0, [pc, #200]	; (800f564 <tcp_parseopt+0xe0>)
 800f49c:	f004 fcb2 	bl	8013e04 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800f4a0:	4b31      	ldr	r3, [pc, #196]	; (800f568 <tcp_parseopt+0xe4>)
 800f4a2:	881b      	ldrh	r3, [r3, #0]
 800f4a4:	2b00      	cmp	r3, #0
 800f4a6:	d055      	beq.n	800f554 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f4a8:	4b30      	ldr	r3, [pc, #192]	; (800f56c <tcp_parseopt+0xe8>)
 800f4aa:	2200      	movs	r2, #0
 800f4ac:	801a      	strh	r2, [r3, #0]
 800f4ae:	e045      	b.n	800f53c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800f4b0:	f7ff ffb2 	bl	800f418 <tcp_get_next_optbyte>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800f4b8:	7bfb      	ldrb	r3, [r7, #15]
 800f4ba:	2b02      	cmp	r3, #2
 800f4bc:	d006      	beq.n	800f4cc <tcp_parseopt+0x48>
 800f4be:	2b02      	cmp	r3, #2
 800f4c0:	dc2b      	bgt.n	800f51a <tcp_parseopt+0x96>
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d041      	beq.n	800f54a <tcp_parseopt+0xc6>
 800f4c6:	2b01      	cmp	r3, #1
 800f4c8:	d127      	bne.n	800f51a <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800f4ca:	e037      	b.n	800f53c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800f4cc:	f7ff ffa4 	bl	800f418 <tcp_get_next_optbyte>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	2b04      	cmp	r3, #4
 800f4d4:	d13b      	bne.n	800f54e <tcp_parseopt+0xca>
 800f4d6:	4b25      	ldr	r3, [pc, #148]	; (800f56c <tcp_parseopt+0xe8>)
 800f4d8:	881b      	ldrh	r3, [r3, #0]
 800f4da:	3301      	adds	r3, #1
 800f4dc:	4a22      	ldr	r2, [pc, #136]	; (800f568 <tcp_parseopt+0xe4>)
 800f4de:	8812      	ldrh	r2, [r2, #0]
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	da34      	bge.n	800f54e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800f4e4:	f7ff ff98 	bl	800f418 <tcp_get_next_optbyte>
 800f4e8:	4603      	mov	r3, r0
 800f4ea:	b29b      	uxth	r3, r3
 800f4ec:	021b      	lsls	r3, r3, #8
 800f4ee:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800f4f0:	f7ff ff92 	bl	800f418 <tcp_get_next_optbyte>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	b29a      	uxth	r2, r3
 800f4f8:	89bb      	ldrh	r3, [r7, #12]
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800f4fe:	89bb      	ldrh	r3, [r7, #12]
 800f500:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800f504:	d804      	bhi.n	800f510 <tcp_parseopt+0x8c>
 800f506:	89bb      	ldrh	r3, [r7, #12]
 800f508:	2b00      	cmp	r3, #0
 800f50a:	d001      	beq.n	800f510 <tcp_parseopt+0x8c>
 800f50c:	89ba      	ldrh	r2, [r7, #12]
 800f50e:	e001      	b.n	800f514 <tcp_parseopt+0x90>
 800f510:	f44f 7206 	mov.w	r2, #536	; 0x218
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800f518:	e010      	b.n	800f53c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800f51a:	f7ff ff7d 	bl	800f418 <tcp_get_next_optbyte>
 800f51e:	4603      	mov	r3, r0
 800f520:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800f522:	7afb      	ldrb	r3, [r7, #11]
 800f524:	2b01      	cmp	r3, #1
 800f526:	d914      	bls.n	800f552 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800f528:	7afb      	ldrb	r3, [r7, #11]
 800f52a:	b29a      	uxth	r2, r3
 800f52c:	4b0f      	ldr	r3, [pc, #60]	; (800f56c <tcp_parseopt+0xe8>)
 800f52e:	881b      	ldrh	r3, [r3, #0]
 800f530:	4413      	add	r3, r2
 800f532:	b29b      	uxth	r3, r3
 800f534:	3b02      	subs	r3, #2
 800f536:	b29a      	uxth	r2, r3
 800f538:	4b0c      	ldr	r3, [pc, #48]	; (800f56c <tcp_parseopt+0xe8>)
 800f53a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800f53c:	4b0b      	ldr	r3, [pc, #44]	; (800f56c <tcp_parseopt+0xe8>)
 800f53e:	881a      	ldrh	r2, [r3, #0]
 800f540:	4b09      	ldr	r3, [pc, #36]	; (800f568 <tcp_parseopt+0xe4>)
 800f542:	881b      	ldrh	r3, [r3, #0]
 800f544:	429a      	cmp	r2, r3
 800f546:	d3b3      	bcc.n	800f4b0 <tcp_parseopt+0x2c>
 800f548:	e004      	b.n	800f554 <tcp_parseopt+0xd0>
          return;
 800f54a:	bf00      	nop
 800f54c:	e002      	b.n	800f554 <tcp_parseopt+0xd0>
            return;
 800f54e:	bf00      	nop
 800f550:	e000      	b.n	800f554 <tcp_parseopt+0xd0>
            return;
 800f552:	bf00      	nop
      }
    }
  }
}
 800f554:	3710      	adds	r7, #16
 800f556:	46bd      	mov	sp, r7
 800f558:	bd80      	pop	{r7, pc}
 800f55a:	bf00      	nop
 800f55c:	08016084 	.word	0x08016084
 800f560:	080164e8 	.word	0x080164e8
 800f564:	080160d0 	.word	0x080160d0
 800f568:	200000f4 	.word	0x200000f4
 800f56c:	200000fc 	.word	0x200000fc

0800f570 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800f570:	b480      	push	{r7}
 800f572:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800f574:	4b05      	ldr	r3, [pc, #20]	; (800f58c <tcp_trigger_input_pcb_close+0x1c>)
 800f576:	781b      	ldrb	r3, [r3, #0]
 800f578:	f043 0310 	orr.w	r3, r3, #16
 800f57c:	b2da      	uxtb	r2, r3
 800f57e:	4b03      	ldr	r3, [pc, #12]	; (800f58c <tcp_trigger_input_pcb_close+0x1c>)
 800f580:	701a      	strb	r2, [r3, #0]
}
 800f582:	bf00      	nop
 800f584:	46bd      	mov	sp, r7
 800f586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58a:	4770      	bx	lr
 800f58c:	2000010d 	.word	0x2000010d

0800f590 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	60f8      	str	r0, [r7, #12]
 800f598:	60b9      	str	r1, [r7, #8]
 800f59a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d00a      	beq.n	800f5b8 <tcp_route+0x28>
 800f5a2:	68fb      	ldr	r3, [r7, #12]
 800f5a4:	7a1b      	ldrb	r3, [r3, #8]
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d006      	beq.n	800f5b8 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	7a1b      	ldrb	r3, [r3, #8]
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fb fb4e 	bl	800ac50 <netif_get_by_index>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	e003      	b.n	800f5c0 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f003 f9f5 	bl	80129a8 <ip4_route>
 800f5be:	4603      	mov	r3, r0
  }
}
 800f5c0:	4618      	mov	r0, r3
 800f5c2:	3710      	adds	r7, #16
 800f5c4:	46bd      	mov	sp, r7
 800f5c6:	bd80      	pop	{r7, pc}

0800f5c8 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800f5c8:	b590      	push	{r4, r7, lr}
 800f5ca:	b087      	sub	sp, #28
 800f5cc:	af00      	add	r7, sp, #0
 800f5ce:	60f8      	str	r0, [r7, #12]
 800f5d0:	60b9      	str	r1, [r7, #8]
 800f5d2:	603b      	str	r3, [r7, #0]
 800f5d4:	4613      	mov	r3, r2
 800f5d6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	d105      	bne.n	800f5ea <tcp_create_segment+0x22>
 800f5de:	4b44      	ldr	r3, [pc, #272]	; (800f6f0 <tcp_create_segment+0x128>)
 800f5e0:	22a3      	movs	r2, #163	; 0xa3
 800f5e2:	4944      	ldr	r1, [pc, #272]	; (800f6f4 <tcp_create_segment+0x12c>)
 800f5e4:	4844      	ldr	r0, [pc, #272]	; (800f6f8 <tcp_create_segment+0x130>)
 800f5e6:	f004 fc0d 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800f5ea:	68bb      	ldr	r3, [r7, #8]
 800f5ec:	2b00      	cmp	r3, #0
 800f5ee:	d105      	bne.n	800f5fc <tcp_create_segment+0x34>
 800f5f0:	4b3f      	ldr	r3, [pc, #252]	; (800f6f0 <tcp_create_segment+0x128>)
 800f5f2:	22a4      	movs	r2, #164	; 0xa4
 800f5f4:	4941      	ldr	r1, [pc, #260]	; (800f6fc <tcp_create_segment+0x134>)
 800f5f6:	4840      	ldr	r0, [pc, #256]	; (800f6f8 <tcp_create_segment+0x130>)
 800f5f8:	f004 fc04 	bl	8013e04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800f5fc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800f600:	009b      	lsls	r3, r3, #2
 800f602:	b2db      	uxtb	r3, r3
 800f604:	f003 0304 	and.w	r3, r3, #4
 800f608:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800f60a:	2003      	movs	r0, #3
 800f60c:	f7fb f822 	bl	800a654 <memp_malloc>
 800f610:	6138      	str	r0, [r7, #16]
 800f612:	693b      	ldr	r3, [r7, #16]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d104      	bne.n	800f622 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800f618:	68b8      	ldr	r0, [r7, #8]
 800f61a:	f7fb fe79 	bl	800b310 <pbuf_free>
    return NULL;
 800f61e:	2300      	movs	r3, #0
 800f620:	e061      	b.n	800f6e6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800f622:	693b      	ldr	r3, [r7, #16]
 800f624:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800f628:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	2200      	movs	r2, #0
 800f62e:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800f630:	693b      	ldr	r3, [r7, #16]
 800f632:	68ba      	ldr	r2, [r7, #8]
 800f634:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800f636:	68bb      	ldr	r3, [r7, #8]
 800f638:	891a      	ldrh	r2, [r3, #8]
 800f63a:	7dfb      	ldrb	r3, [r7, #23]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	429a      	cmp	r2, r3
 800f640:	d205      	bcs.n	800f64e <tcp_create_segment+0x86>
 800f642:	4b2b      	ldr	r3, [pc, #172]	; (800f6f0 <tcp_create_segment+0x128>)
 800f644:	22b0      	movs	r2, #176	; 0xb0
 800f646:	492e      	ldr	r1, [pc, #184]	; (800f700 <tcp_create_segment+0x138>)
 800f648:	482b      	ldr	r0, [pc, #172]	; (800f6f8 <tcp_create_segment+0x130>)
 800f64a:	f004 fbdb 	bl	8013e04 <iprintf>
  seg->len = p->tot_len - optlen;
 800f64e:	68bb      	ldr	r3, [r7, #8]
 800f650:	891a      	ldrh	r2, [r3, #8]
 800f652:	7dfb      	ldrb	r3, [r7, #23]
 800f654:	b29b      	uxth	r3, r3
 800f656:	1ad3      	subs	r3, r2, r3
 800f658:	b29a      	uxth	r2, r3
 800f65a:	693b      	ldr	r3, [r7, #16]
 800f65c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800f65e:	2114      	movs	r1, #20
 800f660:	68b8      	ldr	r0, [r7, #8]
 800f662:	f7fb fdbf 	bl	800b1e4 <pbuf_add_header>
 800f666:	4603      	mov	r3, r0
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d004      	beq.n	800f676 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800f66c:	6938      	ldr	r0, [r7, #16]
 800f66e:	f7fd f8d2 	bl	800c816 <tcp_seg_free>
    return NULL;
 800f672:	2300      	movs	r3, #0
 800f674:	e037      	b.n	800f6e6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800f676:	693b      	ldr	r3, [r7, #16]
 800f678:	685b      	ldr	r3, [r3, #4]
 800f67a:	685a      	ldr	r2, [r3, #4]
 800f67c:	693b      	ldr	r3, [r7, #16]
 800f67e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800f680:	68fb      	ldr	r3, [r7, #12]
 800f682:	8ada      	ldrh	r2, [r3, #22]
 800f684:	693b      	ldr	r3, [r7, #16]
 800f686:	68dc      	ldr	r4, [r3, #12]
 800f688:	4610      	mov	r0, r2
 800f68a:	f7fa fb8e 	bl	8009daa <lwip_htons>
 800f68e:	4603      	mov	r3, r0
 800f690:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	8b1a      	ldrh	r2, [r3, #24]
 800f696:	693b      	ldr	r3, [r7, #16]
 800f698:	68dc      	ldr	r4, [r3, #12]
 800f69a:	4610      	mov	r0, r2
 800f69c:	f7fa fb85 	bl	8009daa <lwip_htons>
 800f6a0:	4603      	mov	r3, r0
 800f6a2:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800f6a4:	693b      	ldr	r3, [r7, #16]
 800f6a6:	68dc      	ldr	r4, [r3, #12]
 800f6a8:	6838      	ldr	r0, [r7, #0]
 800f6aa:	f7fa fb93 	bl	8009dd4 <lwip_htonl>
 800f6ae:	4603      	mov	r3, r0
 800f6b0:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800f6b2:	7dfb      	ldrb	r3, [r7, #23]
 800f6b4:	089b      	lsrs	r3, r3, #2
 800f6b6:	b2db      	uxtb	r3, r3
 800f6b8:	b29b      	uxth	r3, r3
 800f6ba:	3305      	adds	r3, #5
 800f6bc:	b29b      	uxth	r3, r3
 800f6be:	031b      	lsls	r3, r3, #12
 800f6c0:	b29a      	uxth	r2, r3
 800f6c2:	79fb      	ldrb	r3, [r7, #7]
 800f6c4:	b29b      	uxth	r3, r3
 800f6c6:	4313      	orrs	r3, r2
 800f6c8:	b29a      	uxth	r2, r3
 800f6ca:	693b      	ldr	r3, [r7, #16]
 800f6cc:	68dc      	ldr	r4, [r3, #12]
 800f6ce:	4610      	mov	r0, r2
 800f6d0:	f7fa fb6b 	bl	8009daa <lwip_htons>
 800f6d4:	4603      	mov	r3, r0
 800f6d6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800f6d8:	693b      	ldr	r3, [r7, #16]
 800f6da:	68db      	ldr	r3, [r3, #12]
 800f6dc:	2200      	movs	r2, #0
 800f6de:	749a      	strb	r2, [r3, #18]
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	74da      	strb	r2, [r3, #19]
  return seg;
 800f6e4:	693b      	ldr	r3, [r7, #16]
}
 800f6e6:	4618      	mov	r0, r3
 800f6e8:	371c      	adds	r7, #28
 800f6ea:	46bd      	mov	sp, r7
 800f6ec:	bd90      	pop	{r4, r7, pc}
 800f6ee:	bf00      	nop
 800f6f0:	08016504 	.word	0x08016504
 800f6f4:	08016538 	.word	0x08016538
 800f6f8:	08016558 	.word	0x08016558
 800f6fc:	08016580 	.word	0x08016580
 800f700:	080165a4 	.word	0x080165a4

0800f704 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800f704:	b590      	push	{r4, r7, lr}
 800f706:	b08b      	sub	sp, #44	; 0x2c
 800f708:	af02      	add	r7, sp, #8
 800f70a:	6078      	str	r0, [r7, #4]
 800f70c:	460b      	mov	r3, r1
 800f70e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800f710:	2300      	movs	r3, #0
 800f712:	61fb      	str	r3, [r7, #28]
 800f714:	2300      	movs	r3, #0
 800f716:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f718:	2300      	movs	r3, #0
 800f71a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d106      	bne.n	800f730 <tcp_split_unsent_seg+0x2c>
 800f722:	4b95      	ldr	r3, [pc, #596]	; (800f978 <tcp_split_unsent_seg+0x274>)
 800f724:	f240 324b 	movw	r2, #843	; 0x34b
 800f728:	4994      	ldr	r1, [pc, #592]	; (800f97c <tcp_split_unsent_seg+0x278>)
 800f72a:	4895      	ldr	r0, [pc, #596]	; (800f980 <tcp_split_unsent_seg+0x27c>)
 800f72c:	f004 fb6a 	bl	8013e04 <iprintf>

  useg = pcb->unsent;
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f734:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800f736:	697b      	ldr	r3, [r7, #20]
 800f738:	2b00      	cmp	r3, #0
 800f73a:	d102      	bne.n	800f742 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800f73c:	f04f 33ff 	mov.w	r3, #4294967295
 800f740:	e116      	b.n	800f970 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800f742:	887b      	ldrh	r3, [r7, #2]
 800f744:	2b00      	cmp	r3, #0
 800f746:	d109      	bne.n	800f75c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800f748:	4b8b      	ldr	r3, [pc, #556]	; (800f978 <tcp_split_unsent_seg+0x274>)
 800f74a:	f240 3253 	movw	r2, #851	; 0x353
 800f74e:	498d      	ldr	r1, [pc, #564]	; (800f984 <tcp_split_unsent_seg+0x280>)
 800f750:	488b      	ldr	r0, [pc, #556]	; (800f980 <tcp_split_unsent_seg+0x27c>)
 800f752:	f004 fb57 	bl	8013e04 <iprintf>
    return ERR_VAL;
 800f756:	f06f 0305 	mvn.w	r3, #5
 800f75a:	e109      	b.n	800f970 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800f75c:	697b      	ldr	r3, [r7, #20]
 800f75e:	891b      	ldrh	r3, [r3, #8]
 800f760:	887a      	ldrh	r2, [r7, #2]
 800f762:	429a      	cmp	r2, r3
 800f764:	d301      	bcc.n	800f76a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800f766:	2300      	movs	r3, #0
 800f768:	e102      	b.n	800f970 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f76e:	887a      	ldrh	r2, [r7, #2]
 800f770:	429a      	cmp	r2, r3
 800f772:	d906      	bls.n	800f782 <tcp_split_unsent_seg+0x7e>
 800f774:	4b80      	ldr	r3, [pc, #512]	; (800f978 <tcp_split_unsent_seg+0x274>)
 800f776:	f240 325b 	movw	r2, #859	; 0x35b
 800f77a:	4983      	ldr	r1, [pc, #524]	; (800f988 <tcp_split_unsent_seg+0x284>)
 800f77c:	4880      	ldr	r0, [pc, #512]	; (800f980 <tcp_split_unsent_seg+0x27c>)
 800f77e:	f004 fb41 	bl	8013e04 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800f782:	697b      	ldr	r3, [r7, #20]
 800f784:	891b      	ldrh	r3, [r3, #8]
 800f786:	2b00      	cmp	r3, #0
 800f788:	d106      	bne.n	800f798 <tcp_split_unsent_seg+0x94>
 800f78a:	4b7b      	ldr	r3, [pc, #492]	; (800f978 <tcp_split_unsent_seg+0x274>)
 800f78c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800f790:	497e      	ldr	r1, [pc, #504]	; (800f98c <tcp_split_unsent_seg+0x288>)
 800f792:	487b      	ldr	r0, [pc, #492]	; (800f980 <tcp_split_unsent_seg+0x27c>)
 800f794:	f004 fb36 	bl	8013e04 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	7a9b      	ldrb	r3, [r3, #10]
 800f79c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800f79e:	7bfb      	ldrb	r3, [r7, #15]
 800f7a0:	009b      	lsls	r3, r3, #2
 800f7a2:	b2db      	uxtb	r3, r3
 800f7a4:	f003 0304 	and.w	r3, r3, #4
 800f7a8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	891a      	ldrh	r2, [r3, #8]
 800f7ae:	887b      	ldrh	r3, [r7, #2]
 800f7b0:	1ad3      	subs	r3, r2, r3
 800f7b2:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 800f7b4:	7bbb      	ldrb	r3, [r7, #14]
 800f7b6:	b29a      	uxth	r2, r3
 800f7b8:	89bb      	ldrh	r3, [r7, #12]
 800f7ba:	4413      	add	r3, r2
 800f7bc:	b29b      	uxth	r3, r3
 800f7be:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f7c2:	4619      	mov	r1, r3
 800f7c4:	2036      	movs	r0, #54	; 0x36
 800f7c6:	f7fb fabf 	bl	800ad48 <pbuf_alloc>
 800f7ca:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 800f7cc:	693b      	ldr	r3, [r7, #16]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f000 80b7 	beq.w	800f942 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 800f7d4:	697b      	ldr	r3, [r7, #20]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	891a      	ldrh	r2, [r3, #8]
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	891b      	ldrh	r3, [r3, #8]
 800f7de:	1ad3      	subs	r3, r2, r3
 800f7e0:	b29a      	uxth	r2, r3
 800f7e2:	887b      	ldrh	r3, [r7, #2]
 800f7e4:	4413      	add	r3, r2
 800f7e6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 800f7e8:	697b      	ldr	r3, [r7, #20]
 800f7ea:	6858      	ldr	r0, [r3, #4]
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	7bbb      	ldrb	r3, [r7, #14]
 800f7f2:	18d1      	adds	r1, r2, r3
 800f7f4:	897b      	ldrh	r3, [r7, #10]
 800f7f6:	89ba      	ldrh	r2, [r7, #12]
 800f7f8:	f7fb ff84 	bl	800b704 <pbuf_copy_partial>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	461a      	mov	r2, r3
 800f800:	89bb      	ldrh	r3, [r7, #12]
 800f802:	4293      	cmp	r3, r2
 800f804:	f040 809f 	bne.w	800f946 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 800f808:	697b      	ldr	r3, [r7, #20]
 800f80a:	68db      	ldr	r3, [r3, #12]
 800f80c:	899b      	ldrh	r3, [r3, #12]
 800f80e:	b29b      	uxth	r3, r3
 800f810:	4618      	mov	r0, r3
 800f812:	f7fa faca 	bl	8009daa <lwip_htons>
 800f816:	4603      	mov	r3, r0
 800f818:	b2db      	uxtb	r3, r3
 800f81a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f81e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 800f820:	2300      	movs	r3, #0
 800f822:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 800f824:	7efb      	ldrb	r3, [r7, #27]
 800f826:	f003 0308 	and.w	r3, r3, #8
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d007      	beq.n	800f83e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 800f82e:	7efb      	ldrb	r3, [r7, #27]
 800f830:	f023 0308 	bic.w	r3, r3, #8
 800f834:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 800f836:	7ebb      	ldrb	r3, [r7, #26]
 800f838:	f043 0308 	orr.w	r3, r3, #8
 800f83c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 800f83e:	7efb      	ldrb	r3, [r7, #27]
 800f840:	f003 0301 	and.w	r3, r3, #1
 800f844:	2b00      	cmp	r3, #0
 800f846:	d007      	beq.n	800f858 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 800f848:	7efb      	ldrb	r3, [r7, #27]
 800f84a:	f023 0301 	bic.w	r3, r3, #1
 800f84e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 800f850:	7ebb      	ldrb	r3, [r7, #26]
 800f852:	f043 0301 	orr.w	r3, r3, #1
 800f856:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 800f858:	697b      	ldr	r3, [r7, #20]
 800f85a:	68db      	ldr	r3, [r3, #12]
 800f85c:	685b      	ldr	r3, [r3, #4]
 800f85e:	4618      	mov	r0, r3
 800f860:	f7fa fab8 	bl	8009dd4 <lwip_htonl>
 800f864:	4602      	mov	r2, r0
 800f866:	887b      	ldrh	r3, [r7, #2]
 800f868:	18d1      	adds	r1, r2, r3
 800f86a:	7eba      	ldrb	r2, [r7, #26]
 800f86c:	7bfb      	ldrb	r3, [r7, #15]
 800f86e:	9300      	str	r3, [sp, #0]
 800f870:	460b      	mov	r3, r1
 800f872:	6939      	ldr	r1, [r7, #16]
 800f874:	6878      	ldr	r0, [r7, #4]
 800f876:	f7ff fea7 	bl	800f5c8 <tcp_create_segment>
 800f87a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 800f87c:	69fb      	ldr	r3, [r7, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d063      	beq.n	800f94a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 800f882:	697b      	ldr	r3, [r7, #20]
 800f884:	685b      	ldr	r3, [r3, #4]
 800f886:	4618      	mov	r0, r3
 800f888:	f7fb fdca 	bl	800b420 <pbuf_clen>
 800f88c:	4603      	mov	r3, r0
 800f88e:	461a      	mov	r2, r3
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f896:	1a9b      	subs	r3, r3, r2
 800f898:	b29a      	uxth	r2, r3
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	6858      	ldr	r0, [r3, #4]
 800f8a4:	697b      	ldr	r3, [r7, #20]
 800f8a6:	685b      	ldr	r3, [r3, #4]
 800f8a8:	891a      	ldrh	r2, [r3, #8]
 800f8aa:	89bb      	ldrh	r3, [r7, #12]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	b29b      	uxth	r3, r3
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	f7fb fba7 	bl	800b004 <pbuf_realloc>
  useg->len -= remainder;
 800f8b6:	697b      	ldr	r3, [r7, #20]
 800f8b8:	891a      	ldrh	r2, [r3, #8]
 800f8ba:	89bb      	ldrh	r3, [r7, #12]
 800f8bc:	1ad3      	subs	r3, r2, r3
 800f8be:	b29a      	uxth	r2, r3
 800f8c0:	697b      	ldr	r3, [r7, #20]
 800f8c2:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 800f8c4:	697b      	ldr	r3, [r7, #20]
 800f8c6:	68db      	ldr	r3, [r3, #12]
 800f8c8:	899b      	ldrh	r3, [r3, #12]
 800f8ca:	b29c      	uxth	r4, r3
 800f8cc:	7efb      	ldrb	r3, [r7, #27]
 800f8ce:	b29b      	uxth	r3, r3
 800f8d0:	4618      	mov	r0, r3
 800f8d2:	f7fa fa6a 	bl	8009daa <lwip_htons>
 800f8d6:	4603      	mov	r3, r0
 800f8d8:	461a      	mov	r2, r3
 800f8da:	697b      	ldr	r3, [r7, #20]
 800f8dc:	68db      	ldr	r3, [r3, #12]
 800f8de:	4322      	orrs	r2, r4
 800f8e0:	b292      	uxth	r2, r2
 800f8e2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	685b      	ldr	r3, [r3, #4]
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f7fb fd99 	bl	800b420 <pbuf_clen>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f8f8:	4413      	add	r3, r2
 800f8fa:	b29a      	uxth	r2, r3
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800f902:	69fb      	ldr	r3, [r7, #28]
 800f904:	685b      	ldr	r3, [r3, #4]
 800f906:	4618      	mov	r0, r3
 800f908:	f7fb fd8a 	bl	800b420 <pbuf_clen>
 800f90c:	4603      	mov	r3, r0
 800f90e:	461a      	mov	r2, r3
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f916:	4413      	add	r3, r2
 800f918:	b29a      	uxth	r2, r3
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 800f920:	697b      	ldr	r3, [r7, #20]
 800f922:	681a      	ldr	r2, [r3, #0]
 800f924:	69fb      	ldr	r3, [r7, #28]
 800f926:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 800f928:	697b      	ldr	r3, [r7, #20]
 800f92a:	69fa      	ldr	r2, [r7, #28]
 800f92c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 800f92e:	69fb      	ldr	r3, [r7, #28]
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	2b00      	cmp	r3, #0
 800f934:	d103      	bne.n	800f93e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	2200      	movs	r2, #0
 800f93a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 800f93e:	2300      	movs	r3, #0
 800f940:	e016      	b.n	800f970 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 800f942:	bf00      	nop
 800f944:	e002      	b.n	800f94c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f946:	bf00      	nop
 800f948:	e000      	b.n	800f94c <tcp_split_unsent_seg+0x248>
    goto memerr;
 800f94a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 800f94c:	69fb      	ldr	r3, [r7, #28]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d006      	beq.n	800f960 <tcp_split_unsent_seg+0x25c>
 800f952:	4b09      	ldr	r3, [pc, #36]	; (800f978 <tcp_split_unsent_seg+0x274>)
 800f954:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800f958:	490d      	ldr	r1, [pc, #52]	; (800f990 <tcp_split_unsent_seg+0x28c>)
 800f95a:	4809      	ldr	r0, [pc, #36]	; (800f980 <tcp_split_unsent_seg+0x27c>)
 800f95c:	f004 fa52 	bl	8013e04 <iprintf>
  if (p != NULL) {
 800f960:	693b      	ldr	r3, [r7, #16]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d002      	beq.n	800f96c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 800f966:	6938      	ldr	r0, [r7, #16]
 800f968:	f7fb fcd2 	bl	800b310 <pbuf_free>
  }

  return ERR_MEM;
 800f96c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800f970:	4618      	mov	r0, r3
 800f972:	3724      	adds	r7, #36	; 0x24
 800f974:	46bd      	mov	sp, r7
 800f976:	bd90      	pop	{r4, r7, pc}
 800f978:	08016504 	.word	0x08016504
 800f97c:	08016898 	.word	0x08016898
 800f980:	08016558 	.word	0x08016558
 800f984:	080168bc 	.word	0x080168bc
 800f988:	080168e0 	.word	0x080168e0
 800f98c:	080168f0 	.word	0x080168f0
 800f990:	08016900 	.word	0x08016900

0800f994 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 800f994:	b590      	push	{r4, r7, lr}
 800f996:	b085      	sub	sp, #20
 800f998:	af00      	add	r7, sp, #0
 800f99a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d106      	bne.n	800f9b0 <tcp_send_fin+0x1c>
 800f9a2:	4b21      	ldr	r3, [pc, #132]	; (800fa28 <tcp_send_fin+0x94>)
 800f9a4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 800f9a8:	4920      	ldr	r1, [pc, #128]	; (800fa2c <tcp_send_fin+0x98>)
 800f9aa:	4821      	ldr	r0, [pc, #132]	; (800fa30 <tcp_send_fin+0x9c>)
 800f9ac:	f004 fa2a 	bl	8013e04 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d02e      	beq.n	800fa16 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9bc:	60fb      	str	r3, [r7, #12]
 800f9be:	e002      	b.n	800f9c6 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	681b      	ldr	r3, [r3, #0]
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	d1f8      	bne.n	800f9c0 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	68db      	ldr	r3, [r3, #12]
 800f9d2:	899b      	ldrh	r3, [r3, #12]
 800f9d4:	b29b      	uxth	r3, r3
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fa f9e7 	bl	8009daa <lwip_htons>
 800f9dc:	4603      	mov	r3, r0
 800f9de:	b2db      	uxtb	r3, r3
 800f9e0:	f003 0307 	and.w	r3, r3, #7
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d116      	bne.n	800fa16 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	68db      	ldr	r3, [r3, #12]
 800f9ec:	899b      	ldrh	r3, [r3, #12]
 800f9ee:	b29c      	uxth	r4, r3
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	f7fa f9da 	bl	8009daa <lwip_htons>
 800f9f6:	4603      	mov	r3, r0
 800f9f8:	461a      	mov	r2, r3
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	68db      	ldr	r3, [r3, #12]
 800f9fe:	4322      	orrs	r2, r4
 800fa00:	b292      	uxth	r2, r2
 800fa02:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	8b5b      	ldrh	r3, [r3, #26]
 800fa08:	f043 0320 	orr.w	r3, r3, #32
 800fa0c:	b29a      	uxth	r2, r3
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 800fa12:	2300      	movs	r3, #0
 800fa14:	e004      	b.n	800fa20 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 800fa16:	2101      	movs	r1, #1
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f000 f80b 	bl	800fa34 <tcp_enqueue_flags>
 800fa1e:	4603      	mov	r3, r0
}
 800fa20:	4618      	mov	r0, r3
 800fa22:	3714      	adds	r7, #20
 800fa24:	46bd      	mov	sp, r7
 800fa26:	bd90      	pop	{r4, r7, pc}
 800fa28:	08016504 	.word	0x08016504
 800fa2c:	0801690c 	.word	0x0801690c
 800fa30:	08016558 	.word	0x08016558

0800fa34 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 800fa34:	b580      	push	{r7, lr}
 800fa36:	b08a      	sub	sp, #40	; 0x28
 800fa38:	af02      	add	r7, sp, #8
 800fa3a:	6078      	str	r0, [r7, #4]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 800fa40:	2300      	movs	r3, #0
 800fa42:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 800fa44:	2300      	movs	r3, #0
 800fa46:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 800fa48:	78fb      	ldrb	r3, [r7, #3]
 800fa4a:	f003 0303 	and.w	r3, r3, #3
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d106      	bne.n	800fa60 <tcp_enqueue_flags+0x2c>
 800fa52:	4b67      	ldr	r3, [pc, #412]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fa54:	f240 4211 	movw	r2, #1041	; 0x411
 800fa58:	4966      	ldr	r1, [pc, #408]	; (800fbf4 <tcp_enqueue_flags+0x1c0>)
 800fa5a:	4867      	ldr	r0, [pc, #412]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fa5c:	f004 f9d2 	bl	8013e04 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d106      	bne.n	800fa74 <tcp_enqueue_flags+0x40>
 800fa66:	4b62      	ldr	r3, [pc, #392]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fa68:	f240 4213 	movw	r2, #1043	; 0x413
 800fa6c:	4963      	ldr	r1, [pc, #396]	; (800fbfc <tcp_enqueue_flags+0x1c8>)
 800fa6e:	4862      	ldr	r0, [pc, #392]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fa70:	f004 f9c8 	bl	8013e04 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 800fa74:	78fb      	ldrb	r3, [r7, #3]
 800fa76:	f003 0302 	and.w	r3, r3, #2
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d001      	beq.n	800fa82 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 800fa7e:	2301      	movs	r3, #1
 800fa80:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fa82:	7ffb      	ldrb	r3, [r7, #31]
 800fa84:	009b      	lsls	r3, r3, #2
 800fa86:	b2db      	uxtb	r3, r3
 800fa88:	f003 0304 	and.w	r3, r3, #4
 800fa8c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 800fa8e:	7dfb      	ldrb	r3, [r7, #23]
 800fa90:	b29b      	uxth	r3, r3
 800fa92:	f44f 7220 	mov.w	r2, #640	; 0x280
 800fa96:	4619      	mov	r1, r3
 800fa98:	2036      	movs	r0, #54	; 0x36
 800fa9a:	f7fb f955 	bl	800ad48 <pbuf_alloc>
 800fa9e:	6138      	str	r0, [r7, #16]
 800faa0:	693b      	ldr	r3, [r7, #16]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d109      	bne.n	800faba <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	8b5b      	ldrh	r3, [r3, #26]
 800faaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faae:	b29a      	uxth	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fab4:	f04f 33ff 	mov.w	r3, #4294967295
 800fab8:	e095      	b.n	800fbe6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 800faba:	693b      	ldr	r3, [r7, #16]
 800fabc:	895a      	ldrh	r2, [r3, #10]
 800fabe:	7dfb      	ldrb	r3, [r7, #23]
 800fac0:	b29b      	uxth	r3, r3
 800fac2:	429a      	cmp	r2, r3
 800fac4:	d206      	bcs.n	800fad4 <tcp_enqueue_flags+0xa0>
 800fac6:	4b4a      	ldr	r3, [pc, #296]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fac8:	f240 4239 	movw	r2, #1081	; 0x439
 800facc:	494c      	ldr	r1, [pc, #304]	; (800fc00 <tcp_enqueue_flags+0x1cc>)
 800face:	484a      	ldr	r0, [pc, #296]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fad0:	f004 f998 	bl	8013e04 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 800fad8:	78fa      	ldrb	r2, [r7, #3]
 800fada:	7ffb      	ldrb	r3, [r7, #31]
 800fadc:	9300      	str	r3, [sp, #0]
 800fade:	460b      	mov	r3, r1
 800fae0:	6939      	ldr	r1, [r7, #16]
 800fae2:	6878      	ldr	r0, [r7, #4]
 800fae4:	f7ff fd70 	bl	800f5c8 <tcp_create_segment>
 800fae8:	60f8      	str	r0, [r7, #12]
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	2b00      	cmp	r3, #0
 800faee:	d109      	bne.n	800fb04 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	8b5b      	ldrh	r3, [r3, #26]
 800faf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800faf8:	b29a      	uxth	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 800fafe:	f04f 33ff 	mov.w	r3, #4294967295
 800fb02:	e070      	b.n	800fbe6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 800fb04:	68fb      	ldr	r3, [r7, #12]
 800fb06:	68db      	ldr	r3, [r3, #12]
 800fb08:	f003 0303 	and.w	r3, r3, #3
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d006      	beq.n	800fb1e <tcp_enqueue_flags+0xea>
 800fb10:	4b37      	ldr	r3, [pc, #220]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fb12:	f240 4242 	movw	r2, #1090	; 0x442
 800fb16:	493b      	ldr	r1, [pc, #236]	; (800fc04 <tcp_enqueue_flags+0x1d0>)
 800fb18:	4837      	ldr	r0, [pc, #220]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fb1a:	f004 f973 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	891b      	ldrh	r3, [r3, #8]
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d006      	beq.n	800fb34 <tcp_enqueue_flags+0x100>
 800fb26:	4b32      	ldr	r3, [pc, #200]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fb28:	f240 4243 	movw	r2, #1091	; 0x443
 800fb2c:	4936      	ldr	r1, [pc, #216]	; (800fc08 <tcp_enqueue_flags+0x1d4>)
 800fb2e:	4832      	ldr	r0, [pc, #200]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fb30:	f004 f968 	bl	8013e04 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d103      	bne.n	800fb44 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	68fa      	ldr	r2, [r7, #12]
 800fb40:	66da      	str	r2, [r3, #108]	; 0x6c
 800fb42:	e00d      	b.n	800fb60 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fb48:	61bb      	str	r3, [r7, #24]
 800fb4a:	e002      	b.n	800fb52 <tcp_enqueue_flags+0x11e>
 800fb4c:	69bb      	ldr	r3, [r7, #24]
 800fb4e:	681b      	ldr	r3, [r3, #0]
 800fb50:	61bb      	str	r3, [r7, #24]
 800fb52:	69bb      	ldr	r3, [r7, #24]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d1f8      	bne.n	800fb4c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 800fb5a:	69bb      	ldr	r3, [r7, #24]
 800fb5c:	68fa      	ldr	r2, [r7, #12]
 800fb5e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	2200      	movs	r2, #0
 800fb64:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 800fb68:	78fb      	ldrb	r3, [r7, #3]
 800fb6a:	f003 0302 	and.w	r3, r3, #2
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d104      	bne.n	800fb7c <tcp_enqueue_flags+0x148>
 800fb72:	78fb      	ldrb	r3, [r7, #3]
 800fb74:	f003 0301 	and.w	r3, r3, #1
 800fb78:	2b00      	cmp	r3, #0
 800fb7a:	d004      	beq.n	800fb86 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 800fb7c:	687b      	ldr	r3, [r7, #4]
 800fb7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fb80:	1c5a      	adds	r2, r3, #1
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 800fb86:	78fb      	ldrb	r3, [r7, #3]
 800fb88:	f003 0301 	and.w	r3, r3, #1
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	d006      	beq.n	800fb9e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	8b5b      	ldrh	r3, [r3, #26]
 800fb94:	f043 0320 	orr.w	r3, r3, #32
 800fb98:	b29a      	uxth	r2, r3
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	685b      	ldr	r3, [r3, #4]
 800fba2:	4618      	mov	r0, r3
 800fba4:	f7fb fc3c 	bl	800b420 <pbuf_clen>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	461a      	mov	r2, r3
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbb2:	4413      	add	r3, r2
 800fbb4:	b29a      	uxth	r2, r3
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbc2:	2b00      	cmp	r3, #0
 800fbc4:	d00e      	beq.n	800fbe4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d10a      	bne.n	800fbe4 <tcp_enqueue_flags+0x1b0>
 800fbce:	687b      	ldr	r3, [r7, #4]
 800fbd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fbd2:	2b00      	cmp	r3, #0
 800fbd4:	d106      	bne.n	800fbe4 <tcp_enqueue_flags+0x1b0>
 800fbd6:	4b06      	ldr	r3, [pc, #24]	; (800fbf0 <tcp_enqueue_flags+0x1bc>)
 800fbd8:	f240 4265 	movw	r2, #1125	; 0x465
 800fbdc:	490b      	ldr	r1, [pc, #44]	; (800fc0c <tcp_enqueue_flags+0x1d8>)
 800fbde:	4806      	ldr	r0, [pc, #24]	; (800fbf8 <tcp_enqueue_flags+0x1c4>)
 800fbe0:	f004 f910 	bl	8013e04 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 800fbe4:	2300      	movs	r3, #0
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3720      	adds	r7, #32
 800fbea:	46bd      	mov	sp, r7
 800fbec:	bd80      	pop	{r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	08016504 	.word	0x08016504
 800fbf4:	08016928 	.word	0x08016928
 800fbf8:	08016558 	.word	0x08016558
 800fbfc:	08016980 	.word	0x08016980
 800fc00:	080169a0 	.word	0x080169a0
 800fc04:	080169dc 	.word	0x080169dc
 800fc08:	080169f4 	.word	0x080169f4
 800fc0c:	08016a20 	.word	0x08016a20

0800fc10 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 800fc10:	b5b0      	push	{r4, r5, r7, lr}
 800fc12:	b08a      	sub	sp, #40	; 0x28
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	d106      	bne.n	800fc2c <tcp_output+0x1c>
 800fc1e:	4b9e      	ldr	r3, [pc, #632]	; (800fe98 <tcp_output+0x288>)
 800fc20:	f240 42e1 	movw	r2, #1249	; 0x4e1
 800fc24:	499d      	ldr	r1, [pc, #628]	; (800fe9c <tcp_output+0x28c>)
 800fc26:	489e      	ldr	r0, [pc, #632]	; (800fea0 <tcp_output+0x290>)
 800fc28:	f004 f8ec 	bl	8013e04 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	7d1b      	ldrb	r3, [r3, #20]
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d106      	bne.n	800fc42 <tcp_output+0x32>
 800fc34:	4b98      	ldr	r3, [pc, #608]	; (800fe98 <tcp_output+0x288>)
 800fc36:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800fc3a:	499a      	ldr	r1, [pc, #616]	; (800fea4 <tcp_output+0x294>)
 800fc3c:	4898      	ldr	r0, [pc, #608]	; (800fea0 <tcp_output+0x290>)
 800fc3e:	f004 f8e1 	bl	8013e04 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 800fc42:	4b99      	ldr	r3, [pc, #612]	; (800fea8 <tcp_output+0x298>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	429a      	cmp	r2, r3
 800fc4a:	d101      	bne.n	800fc50 <tcp_output+0x40>
    return ERR_OK;
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	e1ce      	b.n	800ffee <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fc5c:	4293      	cmp	r3, r2
 800fc5e:	bf28      	it	cs
 800fc60:	4613      	movcs	r3, r2
 800fc62:	b29b      	uxth	r3, r3
 800fc64:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fc6a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 800fc6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	d10b      	bne.n	800fc8a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	8b5b      	ldrh	r3, [r3, #26]
 800fc76:	f003 0302 	and.w	r3, r3, #2
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	f000 81aa 	beq.w	800ffd4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 800fc80:	6878      	ldr	r0, [r7, #4]
 800fc82:	f000 fdcb 	bl	801081c <tcp_send_empty_ack>
 800fc86:	4603      	mov	r3, r0
 800fc88:	e1b1      	b.n	800ffee <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 800fc8a:	6879      	ldr	r1, [r7, #4]
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	3304      	adds	r3, #4
 800fc90:	461a      	mov	r2, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff fc7c 	bl	800f590 <tcp_route>
 800fc98:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 800fc9a:	697b      	ldr	r3, [r7, #20]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d102      	bne.n	800fca6 <tcp_output+0x96>
    return ERR_RTE;
 800fca0:	f06f 0303 	mvn.w	r3, #3
 800fca4:	e1a3      	b.n	800ffee <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d003      	beq.n	800fcb4 <tcp_output+0xa4>
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	2b00      	cmp	r3, #0
 800fcb2:	d111      	bne.n	800fcd8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 800fcb4:	697b      	ldr	r3, [r7, #20]
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	d002      	beq.n	800fcc0 <tcp_output+0xb0>
 800fcba:	697b      	ldr	r3, [r7, #20]
 800fcbc:	3304      	adds	r3, #4
 800fcbe:	e000      	b.n	800fcc2 <tcp_output+0xb2>
 800fcc0:	2300      	movs	r3, #0
 800fcc2:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 800fcc4:	693b      	ldr	r3, [r7, #16]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d102      	bne.n	800fcd0 <tcp_output+0xc0>
      return ERR_RTE;
 800fcca:	f06f 0303 	mvn.w	r3, #3
 800fcce:	e18e      	b.n	800ffee <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800fcd0:	693b      	ldr	r3, [r7, #16]
 800fcd2:	681a      	ldr	r2, [r3, #0]
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	68db      	ldr	r3, [r3, #12]
 800fcdc:	685b      	ldr	r3, [r3, #4]
 800fcde:	4618      	mov	r0, r3
 800fce0:	f7fa f878 	bl	8009dd4 <lwip_htonl>
 800fce4:	4602      	mov	r2, r0
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fcea:	1ad3      	subs	r3, r2, r3
 800fcec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fcee:	8912      	ldrh	r2, [r2, #8]
 800fcf0:	4413      	add	r3, r2
 800fcf2:	69ba      	ldr	r2, [r7, #24]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d227      	bcs.n	800fd48 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcfe:	461a      	mov	r2, r3
 800fd00:	69bb      	ldr	r3, [r7, #24]
 800fd02:	4293      	cmp	r3, r2
 800fd04:	d114      	bne.n	800fd30 <tcp_output+0x120>
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d110      	bne.n	800fd30 <tcp_output+0x120>
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d10b      	bne.n	800fd30 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	2200      	movs	r2, #0
 800fd1c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	2201      	movs	r2, #1
 800fd24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 800fd28:	687b      	ldr	r3, [r7, #4]
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	8b5b      	ldrh	r3, [r3, #26]
 800fd34:	f003 0302 	and.w	r3, r3, #2
 800fd38:	2b00      	cmp	r3, #0
 800fd3a:	f000 814d 	beq.w	800ffd8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 800fd3e:	6878      	ldr	r0, [r7, #4]
 800fd40:	f000 fd6c 	bl	801081c <tcp_send_empty_ack>
 800fd44:	4603      	mov	r3, r0
 800fd46:	e152      	b.n	800ffee <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	2200      	movs	r2, #0
 800fd4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd54:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 800fd56:	6a3b      	ldr	r3, [r7, #32]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	f000 811c 	beq.w	800ff96 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 800fd5e:	e002      	b.n	800fd66 <tcp_output+0x156>
 800fd60:	6a3b      	ldr	r3, [r7, #32]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	623b      	str	r3, [r7, #32]
 800fd66:	6a3b      	ldr	r3, [r7, #32]
 800fd68:	681b      	ldr	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d1f8      	bne.n	800fd60 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 800fd6e:	e112      	b.n	800ff96 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 800fd70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd72:	68db      	ldr	r3, [r3, #12]
 800fd74:	899b      	ldrh	r3, [r3, #12]
 800fd76:	b29b      	uxth	r3, r3
 800fd78:	4618      	mov	r0, r3
 800fd7a:	f7fa f816 	bl	8009daa <lwip_htons>
 800fd7e:	4603      	mov	r3, r0
 800fd80:	b2db      	uxtb	r3, r3
 800fd82:	f003 0304 	and.w	r3, r3, #4
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d006      	beq.n	800fd98 <tcp_output+0x188>
 800fd8a:	4b43      	ldr	r3, [pc, #268]	; (800fe98 <tcp_output+0x288>)
 800fd8c:	f240 5236 	movw	r2, #1334	; 0x536
 800fd90:	4946      	ldr	r1, [pc, #280]	; (800feac <tcp_output+0x29c>)
 800fd92:	4843      	ldr	r0, [pc, #268]	; (800fea0 <tcp_output+0x290>)
 800fd94:	f004 f836 	bl	8013e04 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800fd9c:	2b00      	cmp	r3, #0
 800fd9e:	d01f      	beq.n	800fde0 <tcp_output+0x1d0>
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	8b5b      	ldrh	r3, [r3, #26]
 800fda4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d119      	bne.n	800fde0 <tcp_output+0x1d0>
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb0:	2b00      	cmp	r3, #0
 800fdb2:	d00b      	beq.n	800fdcc <tcp_output+0x1bc>
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	d110      	bne.n	800fde0 <tcp_output+0x1d0>
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fdc2:	891a      	ldrh	r2, [r3, #8]
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdc8:	429a      	cmp	r2, r3
 800fdca:	d209      	bcs.n	800fde0 <tcp_output+0x1d0>
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d004      	beq.n	800fde0 <tcp_output+0x1d0>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fddc:	2b08      	cmp	r3, #8
 800fdde:	d901      	bls.n	800fde4 <tcp_output+0x1d4>
 800fde0:	2301      	movs	r3, #1
 800fde2:	e000      	b.n	800fde6 <tcp_output+0x1d6>
 800fde4:	2300      	movs	r3, #0
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	d106      	bne.n	800fdf8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	8b5b      	ldrh	r3, [r3, #26]
 800fdee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	f000 80e4 	beq.w	800ffc0 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	7d1b      	ldrb	r3, [r3, #20]
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d00d      	beq.n	800fe1c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 800fe00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	899b      	ldrh	r3, [r3, #12]
 800fe06:	b29c      	uxth	r4, r3
 800fe08:	2010      	movs	r0, #16
 800fe0a:	f7f9 ffce 	bl	8009daa <lwip_htons>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	461a      	mov	r2, r3
 800fe12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	4322      	orrs	r2, r4
 800fe18:	b292      	uxth	r2, r2
 800fe1a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 800fe1c:	697a      	ldr	r2, [r7, #20]
 800fe1e:	6879      	ldr	r1, [r7, #4]
 800fe20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fe22:	f000 f909 	bl	8010038 <tcp_output_segment>
 800fe26:	4603      	mov	r3, r0
 800fe28:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 800fe2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d009      	beq.n	800fe46 <tcp_output+0x236>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	8b5b      	ldrh	r3, [r3, #26]
 800fe36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fe3a:	b29a      	uxth	r2, r3
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	835a      	strh	r2, [r3, #26]
      return err;
 800fe40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe44:	e0d3      	b.n	800ffee <tcp_output+0x3de>
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 800fe46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe48:	681a      	ldr	r2, [r3, #0]
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	7d1b      	ldrb	r3, [r3, #20]
 800fe52:	2b02      	cmp	r3, #2
 800fe54:	d006      	beq.n	800fe64 <tcp_output+0x254>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	8b5b      	ldrh	r3, [r3, #26]
 800fe5a:	f023 0303 	bic.w	r3, r3, #3
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 800fe64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe66:	68db      	ldr	r3, [r3, #12]
 800fe68:	685b      	ldr	r3, [r3, #4]
 800fe6a:	4618      	mov	r0, r3
 800fe6c:	f7f9 ffb2 	bl	8009dd4 <lwip_htonl>
 800fe70:	4604      	mov	r4, r0
 800fe72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe74:	891b      	ldrh	r3, [r3, #8]
 800fe76:	461d      	mov	r5, r3
 800fe78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe7a:	68db      	ldr	r3, [r3, #12]
 800fe7c:	899b      	ldrh	r3, [r3, #12]
 800fe7e:	b29b      	uxth	r3, r3
 800fe80:	4618      	mov	r0, r3
 800fe82:	f7f9 ff92 	bl	8009daa <lwip_htons>
 800fe86:	4603      	mov	r3, r0
 800fe88:	b2db      	uxtb	r3, r3
 800fe8a:	f003 0303 	and.w	r3, r3, #3
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00e      	beq.n	800feb0 <tcp_output+0x2a0>
 800fe92:	2301      	movs	r3, #1
 800fe94:	e00d      	b.n	800feb2 <tcp_output+0x2a2>
 800fe96:	bf00      	nop
 800fe98:	08016504 	.word	0x08016504
 800fe9c:	08016a48 	.word	0x08016a48
 800fea0:	08016558 	.word	0x08016558
 800fea4:	08016a60 	.word	0x08016a60
 800fea8:	20007214 	.word	0x20007214
 800feac:	08016a88 	.word	0x08016a88
 800feb0:	2300      	movs	r3, #0
 800feb2:	442b      	add	r3, r5
 800feb4:	4423      	add	r3, r4
 800feb6:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800febc:	68bb      	ldr	r3, [r7, #8]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	da02      	bge.n	800feca <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	68ba      	ldr	r2, [r7, #8]
 800fec8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 800feca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fecc:	891b      	ldrh	r3, [r3, #8]
 800fece:	461c      	mov	r4, r3
 800fed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fed2:	68db      	ldr	r3, [r3, #12]
 800fed4:	899b      	ldrh	r3, [r3, #12]
 800fed6:	b29b      	uxth	r3, r3
 800fed8:	4618      	mov	r0, r3
 800feda:	f7f9 ff66 	bl	8009daa <lwip_htons>
 800fede:	4603      	mov	r3, r0
 800fee0:	b2db      	uxtb	r3, r3
 800fee2:	f003 0303 	and.w	r3, r3, #3
 800fee6:	2b00      	cmp	r3, #0
 800fee8:	d001      	beq.n	800feee <tcp_output+0x2de>
 800feea:	2301      	movs	r3, #1
 800feec:	e000      	b.n	800fef0 <tcp_output+0x2e0>
 800feee:	2300      	movs	r3, #0
 800fef0:	4423      	add	r3, r4
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d049      	beq.n	800ff8a <tcp_output+0x37a>
      seg->next = NULL;
 800fef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fef8:	2200      	movs	r2, #0
 800fefa:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d105      	bne.n	800ff10 <tcp_output+0x300>
        pcb->unacked = seg;
 800ff04:	687b      	ldr	r3, [r7, #4]
 800ff06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff08:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 800ff0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff0c:	623b      	str	r3, [r7, #32]
 800ff0e:	e03f      	b.n	800ff90 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 800ff10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff12:	68db      	ldr	r3, [r3, #12]
 800ff14:	685b      	ldr	r3, [r3, #4]
 800ff16:	4618      	mov	r0, r3
 800ff18:	f7f9 ff5c 	bl	8009dd4 <lwip_htonl>
 800ff1c:	4604      	mov	r4, r0
 800ff1e:	6a3b      	ldr	r3, [r7, #32]
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	685b      	ldr	r3, [r3, #4]
 800ff24:	4618      	mov	r0, r3
 800ff26:	f7f9 ff55 	bl	8009dd4 <lwip_htonl>
 800ff2a:	4603      	mov	r3, r0
 800ff2c:	1ae3      	subs	r3, r4, r3
 800ff2e:	2b00      	cmp	r3, #0
 800ff30:	da24      	bge.n	800ff7c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	3370      	adds	r3, #112	; 0x70
 800ff36:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ff38:	e002      	b.n	800ff40 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 800ff3a:	69fb      	ldr	r3, [r7, #28]
 800ff3c:	681b      	ldr	r3, [r3, #0]
 800ff3e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 800ff40:	69fb      	ldr	r3, [r7, #28]
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d011      	beq.n	800ff6c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 800ff48:	69fb      	ldr	r3, [r7, #28]
 800ff4a:	681b      	ldr	r3, [r3, #0]
 800ff4c:	68db      	ldr	r3, [r3, #12]
 800ff4e:	685b      	ldr	r3, [r3, #4]
 800ff50:	4618      	mov	r0, r3
 800ff52:	f7f9 ff3f 	bl	8009dd4 <lwip_htonl>
 800ff56:	4604      	mov	r4, r0
 800ff58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff5a:	68db      	ldr	r3, [r3, #12]
 800ff5c:	685b      	ldr	r3, [r3, #4]
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7f9 ff38 	bl	8009dd4 <lwip_htonl>
 800ff64:	4603      	mov	r3, r0
 800ff66:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	dbe6      	blt.n	800ff3a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 800ff6c:	69fb      	ldr	r3, [r7, #28]
 800ff6e:	681a      	ldr	r2, [r3, #0]
 800ff70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff72:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 800ff74:	69fb      	ldr	r3, [r7, #28]
 800ff76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff78:	601a      	str	r2, [r3, #0]
 800ff7a:	e009      	b.n	800ff90 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff80:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 800ff82:	6a3b      	ldr	r3, [r7, #32]
 800ff84:	681b      	ldr	r3, [r3, #0]
 800ff86:	623b      	str	r3, [r7, #32]
 800ff88:	e002      	b.n	800ff90 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 800ff8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ff8c:	f7fc fc43 	bl	800c816 <tcp_seg_free>
    }
    seg = pcb->unsent;
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff94:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 800ff96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff98:	2b00      	cmp	r3, #0
 800ff9a:	d012      	beq.n	800ffc2 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 800ff9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff9e:	68db      	ldr	r3, [r3, #12]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7f9 ff16 	bl	8009dd4 <lwip_htonl>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ffae:	1ad3      	subs	r3, r2, r3
 800ffb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ffb2:	8912      	ldrh	r2, [r2, #8]
 800ffb4:	4413      	add	r3, r2
  while (seg != NULL &&
 800ffb6:	69ba      	ldr	r2, [r7, #24]
 800ffb8:	429a      	cmp	r2, r3
 800ffba:	f4bf aed9 	bcs.w	800fd70 <tcp_output+0x160>
 800ffbe:	e000      	b.n	800ffc2 <tcp_output+0x3b2>
      break;
 800ffc0:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d108      	bne.n	800ffdc <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 800ffca:	687b      	ldr	r3, [r7, #4]
 800ffcc:	2200      	movs	r2, #0
 800ffce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 800ffd2:	e004      	b.n	800ffde <tcp_output+0x3ce>
    goto output_done;
 800ffd4:	bf00      	nop
 800ffd6:	e002      	b.n	800ffde <tcp_output+0x3ce>
    goto output_done;
 800ffd8:	bf00      	nop
 800ffda:	e000      	b.n	800ffde <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 800ffdc:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	8b5b      	ldrh	r3, [r3, #26]
 800ffe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ffe6:	b29a      	uxth	r2, r3
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 800ffec:	2300      	movs	r3, #0
}
 800ffee:	4618      	mov	r0, r3
 800fff0:	3728      	adds	r7, #40	; 0x28
 800fff2:	46bd      	mov	sp, r7
 800fff4:	bdb0      	pop	{r4, r5, r7, pc}
 800fff6:	bf00      	nop

0800fff8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b082      	sub	sp, #8
 800fffc:	af00      	add	r7, sp, #0
 800fffe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d106      	bne.n	8010014 <tcp_output_segment_busy+0x1c>
 8010006:	4b09      	ldr	r3, [pc, #36]	; (801002c <tcp_output_segment_busy+0x34>)
 8010008:	f240 529a 	movw	r2, #1434	; 0x59a
 801000c:	4908      	ldr	r1, [pc, #32]	; (8010030 <tcp_output_segment_busy+0x38>)
 801000e:	4809      	ldr	r0, [pc, #36]	; (8010034 <tcp_output_segment_busy+0x3c>)
 8010010:	f003 fef8 	bl	8013e04 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	7b9b      	ldrb	r3, [r3, #14]
 801001a:	2b01      	cmp	r3, #1
 801001c:	d001      	beq.n	8010022 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801001e:	2301      	movs	r3, #1
 8010020:	e000      	b.n	8010024 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010022:	2300      	movs	r3, #0
}
 8010024:	4618      	mov	r0, r3
 8010026:	3708      	adds	r7, #8
 8010028:	46bd      	mov	sp, r7
 801002a:	bd80      	pop	{r7, pc}
 801002c:	08016504 	.word	0x08016504
 8010030:	08016aa0 	.word	0x08016aa0
 8010034:	08016558 	.word	0x08016558

08010038 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010038:	b5b0      	push	{r4, r5, r7, lr}
 801003a:	b08c      	sub	sp, #48	; 0x30
 801003c:	af04      	add	r7, sp, #16
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010044:	68fb      	ldr	r3, [r7, #12]
 8010046:	2b00      	cmp	r3, #0
 8010048:	d106      	bne.n	8010058 <tcp_output_segment+0x20>
 801004a:	4b63      	ldr	r3, [pc, #396]	; (80101d8 <tcp_output_segment+0x1a0>)
 801004c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010050:	4962      	ldr	r1, [pc, #392]	; (80101dc <tcp_output_segment+0x1a4>)
 8010052:	4863      	ldr	r0, [pc, #396]	; (80101e0 <tcp_output_segment+0x1a8>)
 8010054:	f003 fed6 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010058:	68bb      	ldr	r3, [r7, #8]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d106      	bne.n	801006c <tcp_output_segment+0x34>
 801005e:	4b5e      	ldr	r3, [pc, #376]	; (80101d8 <tcp_output_segment+0x1a0>)
 8010060:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010064:	495f      	ldr	r1, [pc, #380]	; (80101e4 <tcp_output_segment+0x1ac>)
 8010066:	485e      	ldr	r0, [pc, #376]	; (80101e0 <tcp_output_segment+0x1a8>)
 8010068:	f003 fecc 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2b00      	cmp	r3, #0
 8010070:	d106      	bne.n	8010080 <tcp_output_segment+0x48>
 8010072:	4b59      	ldr	r3, [pc, #356]	; (80101d8 <tcp_output_segment+0x1a0>)
 8010074:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010078:	495b      	ldr	r1, [pc, #364]	; (80101e8 <tcp_output_segment+0x1b0>)
 801007a:	4859      	ldr	r0, [pc, #356]	; (80101e0 <tcp_output_segment+0x1a8>)
 801007c:	f003 fec2 	bl	8013e04 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010080:	68f8      	ldr	r0, [r7, #12]
 8010082:	f7ff ffb9 	bl	800fff8 <tcp_output_segment_busy>
 8010086:	4603      	mov	r3, r0
 8010088:	2b00      	cmp	r3, #0
 801008a:	d001      	beq.n	8010090 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	e09f      	b.n	80101d0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010090:	68bb      	ldr	r3, [r7, #8]
 8010092:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	68dc      	ldr	r4, [r3, #12]
 8010098:	4610      	mov	r0, r2
 801009a:	f7f9 fe9b 	bl	8009dd4 <lwip_htonl>
 801009e:	4603      	mov	r3, r0
 80100a0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80100a6:	68fb      	ldr	r3, [r7, #12]
 80100a8:	68dc      	ldr	r4, [r3, #12]
 80100aa:	4610      	mov	r0, r2
 80100ac:	f7f9 fe7d 	bl	8009daa <lwip_htons>
 80100b0:	4603      	mov	r3, r0
 80100b2:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80100b4:	68bb      	ldr	r3, [r7, #8]
 80100b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80100b8:	68ba      	ldr	r2, [r7, #8]
 80100ba:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80100bc:	441a      	add	r2, r3
 80100be:	68bb      	ldr	r3, [r7, #8]
 80100c0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 80100c2:	68fb      	ldr	r3, [r7, #12]
 80100c4:	68db      	ldr	r3, [r3, #12]
 80100c6:	3314      	adds	r3, #20
 80100c8:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	7a9b      	ldrb	r3, [r3, #10]
 80100ce:	f003 0301 	and.w	r3, r3, #1
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d015      	beq.n	8010102 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80100d6:	68bb      	ldr	r3, [r7, #8]
 80100d8:	3304      	adds	r3, #4
 80100da:	461a      	mov	r2, r3
 80100dc:	6879      	ldr	r1, [r7, #4]
 80100de:	f44f 7006 	mov.w	r0, #536	; 0x218
 80100e2:	f7fc fe8f 	bl	800ce04 <tcp_eff_send_mss_netif>
 80100e6:	4603      	mov	r3, r0
 80100e8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80100ea:	8b7b      	ldrh	r3, [r7, #26]
 80100ec:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7f9 fe6f 	bl	8009dd4 <lwip_htonl>
 80100f6:	4602      	mov	r2, r0
 80100f8:	69fb      	ldr	r3, [r7, #28]
 80100fa:	601a      	str	r2, [r3, #0]
    opts += 1;
 80100fc:	69fb      	ldr	r3, [r7, #28]
 80100fe:	3304      	adds	r3, #4
 8010100:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010108:	2b00      	cmp	r3, #0
 801010a:	da02      	bge.n	8010112 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801010c:	68bb      	ldr	r3, [r7, #8]
 801010e:	2200      	movs	r2, #0
 8010110:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010112:	68bb      	ldr	r3, [r7, #8]
 8010114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010116:	2b00      	cmp	r3, #0
 8010118:	d10c      	bne.n	8010134 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801011a:	4b34      	ldr	r3, [pc, #208]	; (80101ec <tcp_output_segment+0x1b4>)
 801011c:	681a      	ldr	r2, [r3, #0]
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	68db      	ldr	r3, [r3, #12]
 8010126:	685b      	ldr	r3, [r3, #4]
 8010128:	4618      	mov	r0, r3
 801012a:	f7f9 fe53 	bl	8009dd4 <lwip_htonl>
 801012e:	4602      	mov	r2, r0
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010134:	68fb      	ldr	r3, [r7, #12]
 8010136:	68da      	ldr	r2, [r3, #12]
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	685b      	ldr	r3, [r3, #4]
 801013c:	685b      	ldr	r3, [r3, #4]
 801013e:	1ad3      	subs	r3, r2, r3
 8010140:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010142:	68fb      	ldr	r3, [r7, #12]
 8010144:	685b      	ldr	r3, [r3, #4]
 8010146:	8959      	ldrh	r1, [r3, #10]
 8010148:	68fb      	ldr	r3, [r7, #12]
 801014a:	685b      	ldr	r3, [r3, #4]
 801014c:	8b3a      	ldrh	r2, [r7, #24]
 801014e:	1a8a      	subs	r2, r1, r2
 8010150:	b292      	uxth	r2, r2
 8010152:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	685b      	ldr	r3, [r3, #4]
 8010158:	8919      	ldrh	r1, [r3, #8]
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	685b      	ldr	r3, [r3, #4]
 801015e:	8b3a      	ldrh	r2, [r7, #24]
 8010160:	1a8a      	subs	r2, r1, r2
 8010162:	b292      	uxth	r2, r2
 8010164:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010166:	68fb      	ldr	r3, [r7, #12]
 8010168:	685b      	ldr	r3, [r3, #4]
 801016a:	68fa      	ldr	r2, [r7, #12]
 801016c:	68d2      	ldr	r2, [r2, #12]
 801016e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	68db      	ldr	r3, [r3, #12]
 8010174:	2200      	movs	r2, #0
 8010176:	741a      	strb	r2, [r3, #16]
 8010178:	2200      	movs	r2, #0
 801017a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	68db      	ldr	r3, [r3, #12]
 8010180:	f103 0214 	add.w	r2, r3, #20
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	7a9b      	ldrb	r3, [r3, #10]
 8010188:	009b      	lsls	r3, r3, #2
 801018a:	f003 0304 	and.w	r3, r3, #4
 801018e:	4413      	add	r3, r2
 8010190:	69fa      	ldr	r2, [r7, #28]
 8010192:	429a      	cmp	r2, r3
 8010194:	d006      	beq.n	80101a4 <tcp_output_segment+0x16c>
 8010196:	4b10      	ldr	r3, [pc, #64]	; (80101d8 <tcp_output_segment+0x1a0>)
 8010198:	f240 621c 	movw	r2, #1564	; 0x61c
 801019c:	4914      	ldr	r1, [pc, #80]	; (80101f0 <tcp_output_segment+0x1b8>)
 801019e:	4810      	ldr	r0, [pc, #64]	; (80101e0 <tcp_output_segment+0x1a8>)
 80101a0:	f003 fe30 	bl	8013e04 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80101a4:	68fb      	ldr	r3, [r7, #12]
 80101a6:	6858      	ldr	r0, [r3, #4]
 80101a8:	68b9      	ldr	r1, [r7, #8]
 80101aa:	68bb      	ldr	r3, [r7, #8]
 80101ac:	1d1c      	adds	r4, r3, #4
 80101ae:	68bb      	ldr	r3, [r7, #8]
 80101b0:	7add      	ldrb	r5, [r3, #11]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	7a9b      	ldrb	r3, [r3, #10]
 80101b6:	687a      	ldr	r2, [r7, #4]
 80101b8:	9202      	str	r2, [sp, #8]
 80101ba:	2206      	movs	r2, #6
 80101bc:	9201      	str	r2, [sp, #4]
 80101be:	9300      	str	r3, [sp, #0]
 80101c0:	462b      	mov	r3, r5
 80101c2:	4622      	mov	r2, r4
 80101c4:	f002 fdae 	bl	8012d24 <ip4_output_if>
 80101c8:	4603      	mov	r3, r0
 80101ca:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80101cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80101d0:	4618      	mov	r0, r3
 80101d2:	3720      	adds	r7, #32
 80101d4:	46bd      	mov	sp, r7
 80101d6:	bdb0      	pop	{r4, r5, r7, pc}
 80101d8:	08016504 	.word	0x08016504
 80101dc:	08016ac8 	.word	0x08016ac8
 80101e0:	08016558 	.word	0x08016558
 80101e4:	08016ae8 	.word	0x08016ae8
 80101e8:	08016b08 	.word	0x08016b08
 80101ec:	20007204 	.word	0x20007204
 80101f0:	08016b2c 	.word	0x08016b2c

080101f4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80101f4:	b5b0      	push	{r4, r5, r7, lr}
 80101f6:	b084      	sub	sp, #16
 80101f8:	af00      	add	r7, sp, #0
 80101fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d106      	bne.n	8010210 <tcp_rexmit_rto_prepare+0x1c>
 8010202:	4b31      	ldr	r3, [pc, #196]	; (80102c8 <tcp_rexmit_rto_prepare+0xd4>)
 8010204:	f240 6263 	movw	r2, #1635	; 0x663
 8010208:	4930      	ldr	r1, [pc, #192]	; (80102cc <tcp_rexmit_rto_prepare+0xd8>)
 801020a:	4831      	ldr	r0, [pc, #196]	; (80102d0 <tcp_rexmit_rto_prepare+0xdc>)
 801020c:	f003 fdfa 	bl	8013e04 <iprintf>

  if (pcb->unacked == NULL) {
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010214:	2b00      	cmp	r3, #0
 8010216:	d102      	bne.n	801021e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010218:	f06f 0305 	mvn.w	r3, #5
 801021c:	e050      	b.n	80102c0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010222:	60fb      	str	r3, [r7, #12]
 8010224:	e00b      	b.n	801023e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010226:	68f8      	ldr	r0, [r7, #12]
 8010228:	f7ff fee6 	bl	800fff8 <tcp_output_segment_busy>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d002      	beq.n	8010238 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010232:	f06f 0305 	mvn.w	r3, #5
 8010236:	e043      	b.n	80102c0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010238:	68fb      	ldr	r3, [r7, #12]
 801023a:	681b      	ldr	r3, [r3, #0]
 801023c:	60fb      	str	r3, [r7, #12]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2b00      	cmp	r3, #0
 8010244:	d1ef      	bne.n	8010226 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010246:	68f8      	ldr	r0, [r7, #12]
 8010248:	f7ff fed6 	bl	800fff8 <tcp_output_segment_busy>
 801024c:	4603      	mov	r3, r0
 801024e:	2b00      	cmp	r3, #0
 8010250:	d002      	beq.n	8010258 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010252:	f06f 0305 	mvn.w	r3, #5
 8010256:	e033      	b.n	80102c0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	2200      	movs	r2, #0
 801026c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	8b5b      	ldrh	r3, [r3, #26]
 8010272:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010276:	b29a      	uxth	r2, r3
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	68db      	ldr	r3, [r3, #12]
 8010280:	685b      	ldr	r3, [r3, #4]
 8010282:	4618      	mov	r0, r3
 8010284:	f7f9 fda6 	bl	8009dd4 <lwip_htonl>
 8010288:	4604      	mov	r4, r0
 801028a:	68fb      	ldr	r3, [r7, #12]
 801028c:	891b      	ldrh	r3, [r3, #8]
 801028e:	461d      	mov	r5, r3
 8010290:	68fb      	ldr	r3, [r7, #12]
 8010292:	68db      	ldr	r3, [r3, #12]
 8010294:	899b      	ldrh	r3, [r3, #12]
 8010296:	b29b      	uxth	r3, r3
 8010298:	4618      	mov	r0, r3
 801029a:	f7f9 fd86 	bl	8009daa <lwip_htons>
 801029e:	4603      	mov	r3, r0
 80102a0:	b2db      	uxtb	r3, r3
 80102a2:	f003 0303 	and.w	r3, r3, #3
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d001      	beq.n	80102ae <tcp_rexmit_rto_prepare+0xba>
 80102aa:	2301      	movs	r3, #1
 80102ac:	e000      	b.n	80102b0 <tcp_rexmit_rto_prepare+0xbc>
 80102ae:	2300      	movs	r3, #0
 80102b0:	442b      	add	r3, r5
 80102b2:	18e2      	adds	r2, r4, r3
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	2200      	movs	r2, #0
 80102bc:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80102be:	2300      	movs	r3, #0
}
 80102c0:	4618      	mov	r0, r3
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bdb0      	pop	{r4, r5, r7, pc}
 80102c8:	08016504 	.word	0x08016504
 80102cc:	08016b40 	.word	0x08016b40
 80102d0:	08016558 	.word	0x08016558

080102d4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b082      	sub	sp, #8
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <tcp_rexmit_rto_commit+0x1c>
 80102e2:	4b0d      	ldr	r3, [pc, #52]	; (8010318 <tcp_rexmit_rto_commit+0x44>)
 80102e4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80102e8:	490c      	ldr	r1, [pc, #48]	; (801031c <tcp_rexmit_rto_commit+0x48>)
 80102ea:	480d      	ldr	r0, [pc, #52]	; (8010320 <tcp_rexmit_rto_commit+0x4c>)
 80102ec:	f003 fd8a 	bl	8013e04 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80102f6:	2bff      	cmp	r3, #255	; 0xff
 80102f8:	d007      	beq.n	801030a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010300:	3301      	adds	r3, #1
 8010302:	b2da      	uxtb	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801030a:	6878      	ldr	r0, [r7, #4]
 801030c:	f7ff fc80 	bl	800fc10 <tcp_output>
}
 8010310:	bf00      	nop
 8010312:	3708      	adds	r7, #8
 8010314:	46bd      	mov	sp, r7
 8010316:	bd80      	pop	{r7, pc}
 8010318:	08016504 	.word	0x08016504
 801031c:	08016b64 	.word	0x08016b64
 8010320:	08016558 	.word	0x08016558

08010324 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010324:	b580      	push	{r7, lr}
 8010326:	b082      	sub	sp, #8
 8010328:	af00      	add	r7, sp, #0
 801032a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d106      	bne.n	8010340 <tcp_rexmit_rto+0x1c>
 8010332:	4b0a      	ldr	r3, [pc, #40]	; (801035c <tcp_rexmit_rto+0x38>)
 8010334:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010338:	4909      	ldr	r1, [pc, #36]	; (8010360 <tcp_rexmit_rto+0x3c>)
 801033a:	480a      	ldr	r0, [pc, #40]	; (8010364 <tcp_rexmit_rto+0x40>)
 801033c:	f003 fd62 	bl	8013e04 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010340:	6878      	ldr	r0, [r7, #4]
 8010342:	f7ff ff57 	bl	80101f4 <tcp_rexmit_rto_prepare>
 8010346:	4603      	mov	r3, r0
 8010348:	2b00      	cmp	r3, #0
 801034a:	d102      	bne.n	8010352 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801034c:	6878      	ldr	r0, [r7, #4]
 801034e:	f7ff ffc1 	bl	80102d4 <tcp_rexmit_rto_commit>
  }
}
 8010352:	bf00      	nop
 8010354:	3708      	adds	r7, #8
 8010356:	46bd      	mov	sp, r7
 8010358:	bd80      	pop	{r7, pc}
 801035a:	bf00      	nop
 801035c:	08016504 	.word	0x08016504
 8010360:	08016b88 	.word	0x08016b88
 8010364:	08016558 	.word	0x08016558

08010368 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010368:	b590      	push	{r4, r7, lr}
 801036a:	b085      	sub	sp, #20
 801036c:	af00      	add	r7, sp, #0
 801036e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2b00      	cmp	r3, #0
 8010374:	d106      	bne.n	8010384 <tcp_rexmit+0x1c>
 8010376:	4b2f      	ldr	r3, [pc, #188]	; (8010434 <tcp_rexmit+0xcc>)
 8010378:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801037c:	492e      	ldr	r1, [pc, #184]	; (8010438 <tcp_rexmit+0xd0>)
 801037e:	482f      	ldr	r0, [pc, #188]	; (801043c <tcp_rexmit+0xd4>)
 8010380:	f003 fd40 	bl	8013e04 <iprintf>

  if (pcb->unacked == NULL) {
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010388:	2b00      	cmp	r3, #0
 801038a:	d102      	bne.n	8010392 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801038c:	f06f 0305 	mvn.w	r3, #5
 8010390:	e04c      	b.n	801042c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010396:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010398:	68b8      	ldr	r0, [r7, #8]
 801039a:	f7ff fe2d 	bl	800fff8 <tcp_output_segment_busy>
 801039e:	4603      	mov	r3, r0
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d002      	beq.n	80103aa <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80103a4:	f06f 0305 	mvn.w	r3, #5
 80103a8:	e040      	b.n	801042c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	681a      	ldr	r2, [r3, #0]
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	336c      	adds	r3, #108	; 0x6c
 80103b6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80103b8:	e002      	b.n	80103c0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80103c0:	68fb      	ldr	r3, [r7, #12]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d011      	beq.n	80103ec <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80103c8:	68fb      	ldr	r3, [r7, #12]
 80103ca:	681b      	ldr	r3, [r3, #0]
 80103cc:	68db      	ldr	r3, [r3, #12]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	4618      	mov	r0, r3
 80103d2:	f7f9 fcff 	bl	8009dd4 <lwip_htonl>
 80103d6:	4604      	mov	r4, r0
 80103d8:	68bb      	ldr	r3, [r7, #8]
 80103da:	68db      	ldr	r3, [r3, #12]
 80103dc:	685b      	ldr	r3, [r3, #4]
 80103de:	4618      	mov	r0, r3
 80103e0:	f7f9 fcf8 	bl	8009dd4 <lwip_htonl>
 80103e4:	4603      	mov	r3, r0
 80103e6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80103e8:	2b00      	cmp	r3, #0
 80103ea:	dbe6      	blt.n	80103ba <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	681a      	ldr	r2, [r3, #0]
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	68ba      	ldr	r2, [r7, #8]
 80103f8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80103fa:	68bb      	ldr	r3, [r7, #8]
 80103fc:	681b      	ldr	r3, [r3, #0]
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d103      	bne.n	801040a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	2200      	movs	r2, #0
 8010406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010410:	2bff      	cmp	r3, #255	; 0xff
 8010412:	d007      	beq.n	8010424 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801041a:	3301      	adds	r3, #1
 801041c:	b2da      	uxtb	r2, r3
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	2200      	movs	r2, #0
 8010428:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801042a:	2300      	movs	r3, #0
}
 801042c:	4618      	mov	r0, r3
 801042e:	3714      	adds	r7, #20
 8010430:	46bd      	mov	sp, r7
 8010432:	bd90      	pop	{r4, r7, pc}
 8010434:	08016504 	.word	0x08016504
 8010438:	08016ba4 	.word	0x08016ba4
 801043c:	08016558 	.word	0x08016558

08010440 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010440:	b580      	push	{r7, lr}
 8010442:	b082      	sub	sp, #8
 8010444:	af00      	add	r7, sp, #0
 8010446:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	2b00      	cmp	r3, #0
 801044c:	d106      	bne.n	801045c <tcp_rexmit_fast+0x1c>
 801044e:	4b2a      	ldr	r3, [pc, #168]	; (80104f8 <tcp_rexmit_fast+0xb8>)
 8010450:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010454:	4929      	ldr	r1, [pc, #164]	; (80104fc <tcp_rexmit_fast+0xbc>)
 8010456:	482a      	ldr	r0, [pc, #168]	; (8010500 <tcp_rexmit_fast+0xc0>)
 8010458:	f003 fcd4 	bl	8013e04 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801045c:	687b      	ldr	r3, [r7, #4]
 801045e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010460:	2b00      	cmp	r3, #0
 8010462:	d044      	beq.n	80104ee <tcp_rexmit_fast+0xae>
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	8b5b      	ldrh	r3, [r3, #26]
 8010468:	f003 0304 	and.w	r3, r3, #4
 801046c:	2b00      	cmp	r3, #0
 801046e:	d13e      	bne.n	80104ee <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010470:	6878      	ldr	r0, [r7, #4]
 8010472:	f7ff ff79 	bl	8010368 <tcp_rexmit>
 8010476:	4603      	mov	r3, r0
 8010478:	2b00      	cmp	r3, #0
 801047a:	d138      	bne.n	80104ee <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010488:	4293      	cmp	r3, r2
 801048a:	bf28      	it	cs
 801048c:	4613      	movcs	r3, r2
 801048e:	b29b      	uxth	r3, r3
 8010490:	0fda      	lsrs	r2, r3, #31
 8010492:	4413      	add	r3, r2
 8010494:	105b      	asrs	r3, r3, #1
 8010496:	b29a      	uxth	r2, r3
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80104a4:	461a      	mov	r2, r3
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104aa:	005b      	lsls	r3, r3, #1
 80104ac:	429a      	cmp	r2, r3
 80104ae:	d206      	bcs.n	80104be <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80104b0:	687b      	ldr	r3, [r7, #4]
 80104b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104b4:	005b      	lsls	r3, r3, #1
 80104b6:	b29a      	uxth	r2, r3
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104c8:	4619      	mov	r1, r3
 80104ca:	0049      	lsls	r1, r1, #1
 80104cc:	440b      	add	r3, r1
 80104ce:	b29b      	uxth	r3, r3
 80104d0:	4413      	add	r3, r2
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	8b5b      	ldrh	r3, [r3, #26]
 80104de:	f043 0304 	orr.w	r3, r3, #4
 80104e2:	b29a      	uxth	r2, r3
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80104e8:	687b      	ldr	r3, [r7, #4]
 80104ea:	2200      	movs	r2, #0
 80104ec:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80104ee:	bf00      	nop
 80104f0:	3708      	adds	r7, #8
 80104f2:	46bd      	mov	sp, r7
 80104f4:	bd80      	pop	{r7, pc}
 80104f6:	bf00      	nop
 80104f8:	08016504 	.word	0x08016504
 80104fc:	08016bbc 	.word	0x08016bbc
 8010500:	08016558 	.word	0x08016558

08010504 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	607b      	str	r3, [r7, #4]
 801050e:	460b      	mov	r3, r1
 8010510:	817b      	strh	r3, [r7, #10]
 8010512:	4613      	mov	r3, r2
 8010514:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010516:	897a      	ldrh	r2, [r7, #10]
 8010518:	893b      	ldrh	r3, [r7, #8]
 801051a:	4413      	add	r3, r2
 801051c:	b29b      	uxth	r3, r3
 801051e:	3314      	adds	r3, #20
 8010520:	b29b      	uxth	r3, r3
 8010522:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010526:	4619      	mov	r1, r3
 8010528:	2022      	movs	r0, #34	; 0x22
 801052a:	f7fa fc0d 	bl	800ad48 <pbuf_alloc>
 801052e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010530:	697b      	ldr	r3, [r7, #20]
 8010532:	2b00      	cmp	r3, #0
 8010534:	d04d      	beq.n	80105d2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010536:	897b      	ldrh	r3, [r7, #10]
 8010538:	3313      	adds	r3, #19
 801053a:	697a      	ldr	r2, [r7, #20]
 801053c:	8952      	ldrh	r2, [r2, #10]
 801053e:	4293      	cmp	r3, r2
 8010540:	db06      	blt.n	8010550 <tcp_output_alloc_header_common+0x4c>
 8010542:	4b26      	ldr	r3, [pc, #152]	; (80105dc <tcp_output_alloc_header_common+0xd8>)
 8010544:	f240 7223 	movw	r2, #1827	; 0x723
 8010548:	4925      	ldr	r1, [pc, #148]	; (80105e0 <tcp_output_alloc_header_common+0xdc>)
 801054a:	4826      	ldr	r0, [pc, #152]	; (80105e4 <tcp_output_alloc_header_common+0xe0>)
 801054c:	f003 fc5a 	bl	8013e04 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010550:	697b      	ldr	r3, [r7, #20]
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010556:	8c3b      	ldrh	r3, [r7, #32]
 8010558:	4618      	mov	r0, r3
 801055a:	f7f9 fc26 	bl	8009daa <lwip_htons>
 801055e:	4603      	mov	r3, r0
 8010560:	461a      	mov	r2, r3
 8010562:	693b      	ldr	r3, [r7, #16]
 8010564:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010566:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010568:	4618      	mov	r0, r3
 801056a:	f7f9 fc1e 	bl	8009daa <lwip_htons>
 801056e:	4603      	mov	r3, r0
 8010570:	461a      	mov	r2, r3
 8010572:	693b      	ldr	r3, [r7, #16]
 8010574:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010576:	693b      	ldr	r3, [r7, #16]
 8010578:	687a      	ldr	r2, [r7, #4]
 801057a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801057c:	68f8      	ldr	r0, [r7, #12]
 801057e:	f7f9 fc29 	bl	8009dd4 <lwip_htonl>
 8010582:	4602      	mov	r2, r0
 8010584:	693b      	ldr	r3, [r7, #16]
 8010586:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010588:	897b      	ldrh	r3, [r7, #10]
 801058a:	089b      	lsrs	r3, r3, #2
 801058c:	b29b      	uxth	r3, r3
 801058e:	3305      	adds	r3, #5
 8010590:	b29b      	uxth	r3, r3
 8010592:	031b      	lsls	r3, r3, #12
 8010594:	b29a      	uxth	r2, r3
 8010596:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801059a:	b29b      	uxth	r3, r3
 801059c:	4313      	orrs	r3, r2
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4618      	mov	r0, r3
 80105a2:	f7f9 fc02 	bl	8009daa <lwip_htons>
 80105a6:	4603      	mov	r3, r0
 80105a8:	461a      	mov	r2, r3
 80105aa:	693b      	ldr	r3, [r7, #16]
 80105ac:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80105ae:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80105b0:	4618      	mov	r0, r3
 80105b2:	f7f9 fbfa 	bl	8009daa <lwip_htons>
 80105b6:	4603      	mov	r3, r0
 80105b8:	461a      	mov	r2, r3
 80105ba:	693b      	ldr	r3, [r7, #16]
 80105bc:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2200      	movs	r2, #0
 80105c2:	741a      	strb	r2, [r3, #16]
 80105c4:	2200      	movs	r2, #0
 80105c6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80105c8:	693b      	ldr	r3, [r7, #16]
 80105ca:	2200      	movs	r2, #0
 80105cc:	749a      	strb	r2, [r3, #18]
 80105ce:	2200      	movs	r2, #0
 80105d0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80105d2:	697b      	ldr	r3, [r7, #20]
}
 80105d4:	4618      	mov	r0, r3
 80105d6:	3718      	adds	r7, #24
 80105d8:	46bd      	mov	sp, r7
 80105da:	bd80      	pop	{r7, pc}
 80105dc:	08016504 	.word	0x08016504
 80105e0:	08016bdc 	.word	0x08016bdc
 80105e4:	08016558 	.word	0x08016558

080105e8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80105e8:	b5b0      	push	{r4, r5, r7, lr}
 80105ea:	b08a      	sub	sp, #40	; 0x28
 80105ec:	af04      	add	r7, sp, #16
 80105ee:	60f8      	str	r0, [r7, #12]
 80105f0:	607b      	str	r3, [r7, #4]
 80105f2:	460b      	mov	r3, r1
 80105f4:	817b      	strh	r3, [r7, #10]
 80105f6:	4613      	mov	r3, r2
 80105f8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d106      	bne.n	801060e <tcp_output_alloc_header+0x26>
 8010600:	4b15      	ldr	r3, [pc, #84]	; (8010658 <tcp_output_alloc_header+0x70>)
 8010602:	f240 7242 	movw	r2, #1858	; 0x742
 8010606:	4915      	ldr	r1, [pc, #84]	; (801065c <tcp_output_alloc_header+0x74>)
 8010608:	4815      	ldr	r0, [pc, #84]	; (8010660 <tcp_output_alloc_header+0x78>)
 801060a:	f003 fbfb 	bl	8013e04 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	8adb      	ldrh	r3, [r3, #22]
 8010616:	68fa      	ldr	r2, [r7, #12]
 8010618:	8b12      	ldrh	r2, [r2, #24]
 801061a:	68f9      	ldr	r1, [r7, #12]
 801061c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801061e:	893d      	ldrh	r5, [r7, #8]
 8010620:	897c      	ldrh	r4, [r7, #10]
 8010622:	9103      	str	r1, [sp, #12]
 8010624:	2110      	movs	r1, #16
 8010626:	9102      	str	r1, [sp, #8]
 8010628:	9201      	str	r2, [sp, #4]
 801062a:	9300      	str	r3, [sp, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	462a      	mov	r2, r5
 8010630:	4621      	mov	r1, r4
 8010632:	f7ff ff67 	bl	8010504 <tcp_output_alloc_header_common>
 8010636:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010638:	697b      	ldr	r3, [r7, #20]
 801063a:	2b00      	cmp	r3, #0
 801063c:	d006      	beq.n	801064c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801063e:	68fb      	ldr	r3, [r7, #12]
 8010640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010642:	68fa      	ldr	r2, [r7, #12]
 8010644:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010646:	441a      	add	r2, r3
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801064c:	697b      	ldr	r3, [r7, #20]
}
 801064e:	4618      	mov	r0, r3
 8010650:	3718      	adds	r7, #24
 8010652:	46bd      	mov	sp, r7
 8010654:	bdb0      	pop	{r4, r5, r7, pc}
 8010656:	bf00      	nop
 8010658:	08016504 	.word	0x08016504
 801065c:	08016c0c 	.word	0x08016c0c
 8010660:	08016558 	.word	0x08016558

08010664 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010664:	b580      	push	{r7, lr}
 8010666:	b088      	sub	sp, #32
 8010668:	af00      	add	r7, sp, #0
 801066a:	60f8      	str	r0, [r7, #12]
 801066c:	60b9      	str	r1, [r7, #8]
 801066e:	4611      	mov	r1, r2
 8010670:	461a      	mov	r2, r3
 8010672:	460b      	mov	r3, r1
 8010674:	71fb      	strb	r3, [r7, #7]
 8010676:	4613      	mov	r3, r2
 8010678:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801067a:	2300      	movs	r3, #0
 801067c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801067e:	68bb      	ldr	r3, [r7, #8]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d106      	bne.n	8010692 <tcp_output_fill_options+0x2e>
 8010684:	4b13      	ldr	r3, [pc, #76]	; (80106d4 <tcp_output_fill_options+0x70>)
 8010686:	f240 7256 	movw	r2, #1878	; 0x756
 801068a:	4913      	ldr	r1, [pc, #76]	; (80106d8 <tcp_output_fill_options+0x74>)
 801068c:	4813      	ldr	r0, [pc, #76]	; (80106dc <tcp_output_fill_options+0x78>)
 801068e:	f003 fbb9 	bl	8013e04 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010692:	68bb      	ldr	r3, [r7, #8]
 8010694:	685b      	ldr	r3, [r3, #4]
 8010696:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010698:	69bb      	ldr	r3, [r7, #24]
 801069a:	3314      	adds	r3, #20
 801069c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801069e:	69bb      	ldr	r3, [r7, #24]
 80106a0:	f103 0214 	add.w	r2, r3, #20
 80106a4:	8bfb      	ldrh	r3, [r7, #30]
 80106a6:	009b      	lsls	r3, r3, #2
 80106a8:	4619      	mov	r1, r3
 80106aa:	79fb      	ldrb	r3, [r7, #7]
 80106ac:	009b      	lsls	r3, r3, #2
 80106ae:	f003 0304 	and.w	r3, r3, #4
 80106b2:	440b      	add	r3, r1
 80106b4:	4413      	add	r3, r2
 80106b6:	697a      	ldr	r2, [r7, #20]
 80106b8:	429a      	cmp	r2, r3
 80106ba:	d006      	beq.n	80106ca <tcp_output_fill_options+0x66>
 80106bc:	4b05      	ldr	r3, [pc, #20]	; (80106d4 <tcp_output_fill_options+0x70>)
 80106be:	f240 7275 	movw	r2, #1909	; 0x775
 80106c2:	4907      	ldr	r1, [pc, #28]	; (80106e0 <tcp_output_fill_options+0x7c>)
 80106c4:	4805      	ldr	r0, [pc, #20]	; (80106dc <tcp_output_fill_options+0x78>)
 80106c6:	f003 fb9d 	bl	8013e04 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80106ca:	bf00      	nop
 80106cc:	3720      	adds	r7, #32
 80106ce:	46bd      	mov	sp, r7
 80106d0:	bd80      	pop	{r7, pc}
 80106d2:	bf00      	nop
 80106d4:	08016504 	.word	0x08016504
 80106d8:	08016c34 	.word	0x08016c34
 80106dc:	08016558 	.word	0x08016558
 80106e0:	08016b2c 	.word	0x08016b2c

080106e4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80106e4:	b580      	push	{r7, lr}
 80106e6:	b08a      	sub	sp, #40	; 0x28
 80106e8:	af04      	add	r7, sp, #16
 80106ea:	60f8      	str	r0, [r7, #12]
 80106ec:	60b9      	str	r1, [r7, #8]
 80106ee:	607a      	str	r2, [r7, #4]
 80106f0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80106f2:	68bb      	ldr	r3, [r7, #8]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d106      	bne.n	8010706 <tcp_output_control_segment+0x22>
 80106f8:	4b1c      	ldr	r3, [pc, #112]	; (801076c <tcp_output_control_segment+0x88>)
 80106fa:	f240 7287 	movw	r2, #1927	; 0x787
 80106fe:	491c      	ldr	r1, [pc, #112]	; (8010770 <tcp_output_control_segment+0x8c>)
 8010700:	481c      	ldr	r0, [pc, #112]	; (8010774 <tcp_output_control_segment+0x90>)
 8010702:	f003 fb7f 	bl	8013e04 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010706:	683a      	ldr	r2, [r7, #0]
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	68f8      	ldr	r0, [r7, #12]
 801070c:	f7fe ff40 	bl	800f590 <tcp_route>
 8010710:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010712:	693b      	ldr	r3, [r7, #16]
 8010714:	2b00      	cmp	r3, #0
 8010716:	d102      	bne.n	801071e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010718:	23fc      	movs	r3, #252	; 0xfc
 801071a:	75fb      	strb	r3, [r7, #23]
 801071c:	e01c      	b.n	8010758 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801071e:	68fb      	ldr	r3, [r7, #12]
 8010720:	2b00      	cmp	r3, #0
 8010722:	d006      	beq.n	8010732 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010724:	68fb      	ldr	r3, [r7, #12]
 8010726:	7adb      	ldrb	r3, [r3, #11]
 8010728:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801072a:	68fb      	ldr	r3, [r7, #12]
 801072c:	7a9b      	ldrb	r3, [r3, #10]
 801072e:	757b      	strb	r3, [r7, #21]
 8010730:	e003      	b.n	801073a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010732:	23ff      	movs	r3, #255	; 0xff
 8010734:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010736:	2300      	movs	r3, #0
 8010738:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801073a:	7dba      	ldrb	r2, [r7, #22]
 801073c:	693b      	ldr	r3, [r7, #16]
 801073e:	9302      	str	r3, [sp, #8]
 8010740:	2306      	movs	r3, #6
 8010742:	9301      	str	r3, [sp, #4]
 8010744:	7d7b      	ldrb	r3, [r7, #21]
 8010746:	9300      	str	r3, [sp, #0]
 8010748:	4613      	mov	r3, r2
 801074a:	683a      	ldr	r2, [r7, #0]
 801074c:	6879      	ldr	r1, [r7, #4]
 801074e:	68b8      	ldr	r0, [r7, #8]
 8010750:	f002 fae8 	bl	8012d24 <ip4_output_if>
 8010754:	4603      	mov	r3, r0
 8010756:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010758:	68b8      	ldr	r0, [r7, #8]
 801075a:	f7fa fdd9 	bl	800b310 <pbuf_free>
  return err;
 801075e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010762:	4618      	mov	r0, r3
 8010764:	3718      	adds	r7, #24
 8010766:	46bd      	mov	sp, r7
 8010768:	bd80      	pop	{r7, pc}
 801076a:	bf00      	nop
 801076c:	08016504 	.word	0x08016504
 8010770:	08016c5c 	.word	0x08016c5c
 8010774:	08016558 	.word	0x08016558

08010778 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010778:	b590      	push	{r4, r7, lr}
 801077a:	b08b      	sub	sp, #44	; 0x2c
 801077c:	af04      	add	r7, sp, #16
 801077e:	60f8      	str	r0, [r7, #12]
 8010780:	60b9      	str	r1, [r7, #8]
 8010782:	607a      	str	r2, [r7, #4]
 8010784:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010786:	683b      	ldr	r3, [r7, #0]
 8010788:	2b00      	cmp	r3, #0
 801078a:	d106      	bne.n	801079a <tcp_rst+0x22>
 801078c:	4b1f      	ldr	r3, [pc, #124]	; (801080c <tcp_rst+0x94>)
 801078e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010792:	491f      	ldr	r1, [pc, #124]	; (8010810 <tcp_rst+0x98>)
 8010794:	481f      	ldr	r0, [pc, #124]	; (8010814 <tcp_rst+0x9c>)
 8010796:	f003 fb35 	bl	8013e04 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801079a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801079c:	2b00      	cmp	r3, #0
 801079e:	d106      	bne.n	80107ae <tcp_rst+0x36>
 80107a0:	4b1a      	ldr	r3, [pc, #104]	; (801080c <tcp_rst+0x94>)
 80107a2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80107a6:	491c      	ldr	r1, [pc, #112]	; (8010818 <tcp_rst+0xa0>)
 80107a8:	481a      	ldr	r0, [pc, #104]	; (8010814 <tcp_rst+0x9c>)
 80107aa:	f003 fb2b 	bl	8013e04 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80107ae:	2300      	movs	r3, #0
 80107b0:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80107b2:	f246 0308 	movw	r3, #24584	; 0x6008
 80107b6:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80107b8:	7dfb      	ldrb	r3, [r7, #23]
 80107ba:	b29c      	uxth	r4, r3
 80107bc:	68b8      	ldr	r0, [r7, #8]
 80107be:	f7f9 fb09 	bl	8009dd4 <lwip_htonl>
 80107c2:	4602      	mov	r2, r0
 80107c4:	8abb      	ldrh	r3, [r7, #20]
 80107c6:	9303      	str	r3, [sp, #12]
 80107c8:	2314      	movs	r3, #20
 80107ca:	9302      	str	r3, [sp, #8]
 80107cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80107ce:	9301      	str	r3, [sp, #4]
 80107d0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80107d2:	9300      	str	r3, [sp, #0]
 80107d4:	4613      	mov	r3, r2
 80107d6:	2200      	movs	r2, #0
 80107d8:	4621      	mov	r1, r4
 80107da:	6878      	ldr	r0, [r7, #4]
 80107dc:	f7ff fe92 	bl	8010504 <tcp_output_alloc_header_common>
 80107e0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80107e2:	693b      	ldr	r3, [r7, #16]
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d00c      	beq.n	8010802 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80107e8:	7dfb      	ldrb	r3, [r7, #23]
 80107ea:	2200      	movs	r2, #0
 80107ec:	6939      	ldr	r1, [r7, #16]
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff ff38 	bl	8010664 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80107f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f6:	683a      	ldr	r2, [r7, #0]
 80107f8:	6939      	ldr	r1, [r7, #16]
 80107fa:	68f8      	ldr	r0, [r7, #12]
 80107fc:	f7ff ff72 	bl	80106e4 <tcp_output_control_segment>
 8010800:	e000      	b.n	8010804 <tcp_rst+0x8c>
    return;
 8010802:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8010804:	371c      	adds	r7, #28
 8010806:	46bd      	mov	sp, r7
 8010808:	bd90      	pop	{r4, r7, pc}
 801080a:	bf00      	nop
 801080c:	08016504 	.word	0x08016504
 8010810:	08016c88 	.word	0x08016c88
 8010814:	08016558 	.word	0x08016558
 8010818:	08016ca4 	.word	0x08016ca4

0801081c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801081c:	b590      	push	{r4, r7, lr}
 801081e:	b087      	sub	sp, #28
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8010824:	2300      	movs	r3, #0
 8010826:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8010828:	2300      	movs	r3, #0
 801082a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d106      	bne.n	8010840 <tcp_send_empty_ack+0x24>
 8010832:	4b28      	ldr	r3, [pc, #160]	; (80108d4 <tcp_send_empty_ack+0xb8>)
 8010834:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8010838:	4927      	ldr	r1, [pc, #156]	; (80108d8 <tcp_send_empty_ack+0xbc>)
 801083a:	4828      	ldr	r0, [pc, #160]	; (80108dc <tcp_send_empty_ack+0xc0>)
 801083c:	f003 fae2 	bl	8013e04 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010840:	7dfb      	ldrb	r3, [r7, #23]
 8010842:	009b      	lsls	r3, r3, #2
 8010844:	b2db      	uxtb	r3, r3
 8010846:	f003 0304 	and.w	r3, r3, #4
 801084a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801084c:	7d7b      	ldrb	r3, [r7, #21]
 801084e:	b29c      	uxth	r4, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010854:	4618      	mov	r0, r3
 8010856:	f7f9 fabd 	bl	8009dd4 <lwip_htonl>
 801085a:	4603      	mov	r3, r0
 801085c:	2200      	movs	r2, #0
 801085e:	4621      	mov	r1, r4
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f7ff fec1 	bl	80105e8 <tcp_output_alloc_header>
 8010866:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010868:	693b      	ldr	r3, [r7, #16]
 801086a:	2b00      	cmp	r3, #0
 801086c:	d109      	bne.n	8010882 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	8b5b      	ldrh	r3, [r3, #26]
 8010872:	f043 0303 	orr.w	r3, r3, #3
 8010876:	b29a      	uxth	r2, r3
 8010878:	687b      	ldr	r3, [r7, #4]
 801087a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801087c:	f06f 0301 	mvn.w	r3, #1
 8010880:	e023      	b.n	80108ca <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8010882:	7dbb      	ldrb	r3, [r7, #22]
 8010884:	7dfa      	ldrb	r2, [r7, #23]
 8010886:	6939      	ldr	r1, [r7, #16]
 8010888:	6878      	ldr	r0, [r7, #4]
 801088a:	f7ff feeb 	bl	8010664 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801088e:	687a      	ldr	r2, [r7, #4]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	3304      	adds	r3, #4
 8010894:	6939      	ldr	r1, [r7, #16]
 8010896:	6878      	ldr	r0, [r7, #4]
 8010898:	f7ff ff24 	bl	80106e4 <tcp_output_control_segment>
 801089c:	4603      	mov	r3, r0
 801089e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80108a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d007      	beq.n	80108b8 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	8b5b      	ldrh	r3, [r3, #26]
 80108ac:	f043 0303 	orr.w	r3, r3, #3
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	835a      	strh	r2, [r3, #26]
 80108b6:	e006      	b.n	80108c6 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8b5b      	ldrh	r3, [r3, #26]
 80108bc:	f023 0303 	bic.w	r3, r3, #3
 80108c0:	b29a      	uxth	r2, r3
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80108c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80108ca:	4618      	mov	r0, r3
 80108cc:	371c      	adds	r7, #28
 80108ce:	46bd      	mov	sp, r7
 80108d0:	bd90      	pop	{r4, r7, pc}
 80108d2:	bf00      	nop
 80108d4:	08016504 	.word	0x08016504
 80108d8:	08016cc0 	.word	0x08016cc0
 80108dc:	08016558 	.word	0x08016558

080108e0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80108e0:	b590      	push	{r4, r7, lr}
 80108e2:	b087      	sub	sp, #28
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80108e8:	2300      	movs	r3, #0
 80108ea:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d106      	bne.n	8010900 <tcp_keepalive+0x20>
 80108f2:	4b18      	ldr	r3, [pc, #96]	; (8010954 <tcp_keepalive+0x74>)
 80108f4:	f640 0224 	movw	r2, #2084	; 0x824
 80108f8:	4917      	ldr	r1, [pc, #92]	; (8010958 <tcp_keepalive+0x78>)
 80108fa:	4818      	ldr	r0, [pc, #96]	; (801095c <tcp_keepalive+0x7c>)
 80108fc:	f003 fa82 	bl	8013e04 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8010900:	7dfb      	ldrb	r3, [r7, #23]
 8010902:	b29c      	uxth	r4, r3
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010908:	3b01      	subs	r3, #1
 801090a:	4618      	mov	r0, r3
 801090c:	f7f9 fa62 	bl	8009dd4 <lwip_htonl>
 8010910:	4603      	mov	r3, r0
 8010912:	2200      	movs	r2, #0
 8010914:	4621      	mov	r1, r4
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f7ff fe66 	bl	80105e8 <tcp_output_alloc_header>
 801091c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801091e:	693b      	ldr	r3, [r7, #16]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d102      	bne.n	801092a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8010924:	f04f 33ff 	mov.w	r3, #4294967295
 8010928:	e010      	b.n	801094c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801092a:	7dfb      	ldrb	r3, [r7, #23]
 801092c:	2200      	movs	r2, #0
 801092e:	6939      	ldr	r1, [r7, #16]
 8010930:	6878      	ldr	r0, [r7, #4]
 8010932:	f7ff fe97 	bl	8010664 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010936:	687a      	ldr	r2, [r7, #4]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	3304      	adds	r3, #4
 801093c:	6939      	ldr	r1, [r7, #16]
 801093e:	6878      	ldr	r0, [r7, #4]
 8010940:	f7ff fed0 	bl	80106e4 <tcp_output_control_segment>
 8010944:	4603      	mov	r3, r0
 8010946:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010948:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801094c:	4618      	mov	r0, r3
 801094e:	371c      	adds	r7, #28
 8010950:	46bd      	mov	sp, r7
 8010952:	bd90      	pop	{r4, r7, pc}
 8010954:	08016504 	.word	0x08016504
 8010958:	08016ce0 	.word	0x08016ce0
 801095c:	08016558 	.word	0x08016558

08010960 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8010960:	b590      	push	{r4, r7, lr}
 8010962:	b08b      	sub	sp, #44	; 0x2c
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010968:	2300      	movs	r3, #0
 801096a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801096e:	687b      	ldr	r3, [r7, #4]
 8010970:	2b00      	cmp	r3, #0
 8010972:	d106      	bne.n	8010982 <tcp_zero_window_probe+0x22>
 8010974:	4b4c      	ldr	r3, [pc, #304]	; (8010aa8 <tcp_zero_window_probe+0x148>)
 8010976:	f640 024f 	movw	r2, #2127	; 0x84f
 801097a:	494c      	ldr	r1, [pc, #304]	; (8010aac <tcp_zero_window_probe+0x14c>)
 801097c:	484c      	ldr	r0, [pc, #304]	; (8010ab0 <tcp_zero_window_probe+0x150>)
 801097e:	f003 fa41 	bl	8013e04 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8010982:	687b      	ldr	r3, [r7, #4]
 8010984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010986:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8010988:	6a3b      	ldr	r3, [r7, #32]
 801098a:	2b00      	cmp	r3, #0
 801098c:	d101      	bne.n	8010992 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801098e:	2300      	movs	r3, #0
 8010990:	e086      	b.n	8010aa0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8010992:	687b      	ldr	r3, [r7, #4]
 8010994:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010998:	2bff      	cmp	r3, #255	; 0xff
 801099a:	d007      	beq.n	80109ac <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80109a2:	3301      	adds	r3, #1
 80109a4:	b2da      	uxtb	r2, r3
 80109a6:	687b      	ldr	r3, [r7, #4]
 80109a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80109ac:	6a3b      	ldr	r3, [r7, #32]
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	899b      	ldrh	r3, [r3, #12]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f9 f9f8 	bl	8009daa <lwip_htons>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d005      	beq.n	80109d2 <tcp_zero_window_probe+0x72>
 80109c6:	6a3b      	ldr	r3, [r7, #32]
 80109c8:	891b      	ldrh	r3, [r3, #8]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d101      	bne.n	80109d2 <tcp_zero_window_probe+0x72>
 80109ce:	2301      	movs	r3, #1
 80109d0:	e000      	b.n	80109d4 <tcp_zero_window_probe+0x74>
 80109d2:	2300      	movs	r3, #0
 80109d4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80109d6:	7ffb      	ldrb	r3, [r7, #31]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	bf0c      	ite	eq
 80109dc:	2301      	moveq	r3, #1
 80109de:	2300      	movne	r3, #0
 80109e0:	b2db      	uxtb	r3, r3
 80109e2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80109e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109e8:	b299      	uxth	r1, r3
 80109ea:	6a3b      	ldr	r3, [r7, #32]
 80109ec:	68db      	ldr	r3, [r3, #12]
 80109ee:	685b      	ldr	r3, [r3, #4]
 80109f0:	8bba      	ldrh	r2, [r7, #28]
 80109f2:	6878      	ldr	r0, [r7, #4]
 80109f4:	f7ff fdf8 	bl	80105e8 <tcp_output_alloc_header>
 80109f8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80109fa:	69bb      	ldr	r3, [r7, #24]
 80109fc:	2b00      	cmp	r3, #0
 80109fe:	d102      	bne.n	8010a06 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8010a00:	f04f 33ff 	mov.w	r3, #4294967295
 8010a04:	e04c      	b.n	8010aa0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8010a06:	69bb      	ldr	r3, [r7, #24]
 8010a08:	685b      	ldr	r3, [r3, #4]
 8010a0a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8010a0c:	7ffb      	ldrb	r3, [r7, #31]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d011      	beq.n	8010a36 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8010a12:	697b      	ldr	r3, [r7, #20]
 8010a14:	899b      	ldrh	r3, [r3, #12]
 8010a16:	b29b      	uxth	r3, r3
 8010a18:	b21b      	sxth	r3, r3
 8010a1a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a1e:	b21c      	sxth	r4, r3
 8010a20:	2011      	movs	r0, #17
 8010a22:	f7f9 f9c2 	bl	8009daa <lwip_htons>
 8010a26:	4603      	mov	r3, r0
 8010a28:	b21b      	sxth	r3, r3
 8010a2a:	4323      	orrs	r3, r4
 8010a2c:	b21b      	sxth	r3, r3
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	697b      	ldr	r3, [r7, #20]
 8010a32:	819a      	strh	r2, [r3, #12]
 8010a34:	e010      	b.n	8010a58 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	685b      	ldr	r3, [r3, #4]
 8010a3a:	3314      	adds	r3, #20
 8010a3c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8010a3e:	6a3b      	ldr	r3, [r7, #32]
 8010a40:	6858      	ldr	r0, [r3, #4]
 8010a42:	6a3b      	ldr	r3, [r7, #32]
 8010a44:	685b      	ldr	r3, [r3, #4]
 8010a46:	891a      	ldrh	r2, [r3, #8]
 8010a48:	6a3b      	ldr	r3, [r7, #32]
 8010a4a:	891b      	ldrh	r3, [r3, #8]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	2201      	movs	r2, #1
 8010a52:	6939      	ldr	r1, [r7, #16]
 8010a54:	f7fa fe56 	bl	800b704 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8010a58:	6a3b      	ldr	r3, [r7, #32]
 8010a5a:	68db      	ldr	r3, [r3, #12]
 8010a5c:	685b      	ldr	r3, [r3, #4]
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7f9 f9b8 	bl	8009dd4 <lwip_htonl>
 8010a64:	4603      	mov	r3, r0
 8010a66:	3301      	adds	r3, #1
 8010a68:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010a6e:	68fb      	ldr	r3, [r7, #12]
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	da02      	bge.n	8010a7c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	68fa      	ldr	r2, [r7, #12]
 8010a7a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8010a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a80:	2200      	movs	r2, #0
 8010a82:	69b9      	ldr	r1, [r7, #24]
 8010a84:	6878      	ldr	r0, [r7, #4]
 8010a86:	f7ff fded 	bl	8010664 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8010a8a:	687a      	ldr	r2, [r7, #4]
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	3304      	adds	r3, #4
 8010a90:	69b9      	ldr	r1, [r7, #24]
 8010a92:	6878      	ldr	r0, [r7, #4]
 8010a94:	f7ff fe26 	bl	80106e4 <tcp_output_control_segment>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8010a9c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	372c      	adds	r7, #44	; 0x2c
 8010aa4:	46bd      	mov	sp, r7
 8010aa6:	bd90      	pop	{r4, r7, pc}
 8010aa8:	08016504 	.word	0x08016504
 8010aac:	08016cfc 	.word	0x08016cfc
 8010ab0:	08016558 	.word	0x08016558

08010ab4 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8010ab4:	b580      	push	{r7, lr}
 8010ab6:	b082      	sub	sp, #8
 8010ab8:	af00      	add	r7, sp, #0
 8010aba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8010abc:	f7fa ff10 	bl	800b8e0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8010ac0:	4b0a      	ldr	r3, [pc, #40]	; (8010aec <tcpip_tcp_timer+0x38>)
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	2b00      	cmp	r3, #0
 8010ac6:	d103      	bne.n	8010ad0 <tcpip_tcp_timer+0x1c>
 8010ac8:	4b09      	ldr	r3, [pc, #36]	; (8010af0 <tcpip_tcp_timer+0x3c>)
 8010aca:	681b      	ldr	r3, [r3, #0]
 8010acc:	2b00      	cmp	r3, #0
 8010ace:	d005      	beq.n	8010adc <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010ad0:	2200      	movs	r2, #0
 8010ad2:	4908      	ldr	r1, [pc, #32]	; (8010af4 <tcpip_tcp_timer+0x40>)
 8010ad4:	20fa      	movs	r0, #250	; 0xfa
 8010ad6:	f000 f8f3 	bl	8010cc0 <sys_timeout>
 8010ada:	e003      	b.n	8010ae4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8010adc:	4b06      	ldr	r3, [pc, #24]	; (8010af8 <tcpip_tcp_timer+0x44>)
 8010ade:	2200      	movs	r2, #0
 8010ae0:	601a      	str	r2, [r3, #0]
  }
}
 8010ae2:	bf00      	nop
 8010ae4:	bf00      	nop
 8010ae6:	3708      	adds	r7, #8
 8010ae8:	46bd      	mov	sp, r7
 8010aea:	bd80      	pop	{r7, pc}
 8010aec:	20007200 	.word	0x20007200
 8010af0:	20007210 	.word	0x20007210
 8010af4:	08010ab5 	.word	0x08010ab5
 8010af8:	2000011c 	.word	0x2000011c

08010afc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8010afc:	b580      	push	{r7, lr}
 8010afe:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8010b00:	4b0a      	ldr	r3, [pc, #40]	; (8010b2c <tcp_timer_needed+0x30>)
 8010b02:	681b      	ldr	r3, [r3, #0]
 8010b04:	2b00      	cmp	r3, #0
 8010b06:	d10f      	bne.n	8010b28 <tcp_timer_needed+0x2c>
 8010b08:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <tcp_timer_needed+0x34>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d103      	bne.n	8010b18 <tcp_timer_needed+0x1c>
 8010b10:	4b08      	ldr	r3, [pc, #32]	; (8010b34 <tcp_timer_needed+0x38>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d007      	beq.n	8010b28 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8010b18:	4b04      	ldr	r3, [pc, #16]	; (8010b2c <tcp_timer_needed+0x30>)
 8010b1a:	2201      	movs	r2, #1
 8010b1c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8010b1e:	2200      	movs	r2, #0
 8010b20:	4905      	ldr	r1, [pc, #20]	; (8010b38 <tcp_timer_needed+0x3c>)
 8010b22:	20fa      	movs	r0, #250	; 0xfa
 8010b24:	f000 f8cc 	bl	8010cc0 <sys_timeout>
  }
}
 8010b28:	bf00      	nop
 8010b2a:	bd80      	pop	{r7, pc}
 8010b2c:	2000011c 	.word	0x2000011c
 8010b30:	20007200 	.word	0x20007200
 8010b34:	20007210 	.word	0x20007210
 8010b38:	08010ab5 	.word	0x08010ab5

08010b3c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8010b3c:	b580      	push	{r7, lr}
 8010b3e:	b086      	sub	sp, #24
 8010b40:	af00      	add	r7, sp, #0
 8010b42:	60f8      	str	r0, [r7, #12]
 8010b44:	60b9      	str	r1, [r7, #8]
 8010b46:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8010b48:	2006      	movs	r0, #6
 8010b4a:	f7f9 fd83 	bl	800a654 <memp_malloc>
 8010b4e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8010b50:	693b      	ldr	r3, [r7, #16]
 8010b52:	2b00      	cmp	r3, #0
 8010b54:	d109      	bne.n	8010b6a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8010b56:	693b      	ldr	r3, [r7, #16]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d151      	bne.n	8010c00 <sys_timeout_abs+0xc4>
 8010b5c:	4b2a      	ldr	r3, [pc, #168]	; (8010c08 <sys_timeout_abs+0xcc>)
 8010b5e:	22be      	movs	r2, #190	; 0xbe
 8010b60:	492a      	ldr	r1, [pc, #168]	; (8010c0c <sys_timeout_abs+0xd0>)
 8010b62:	482b      	ldr	r0, [pc, #172]	; (8010c10 <sys_timeout_abs+0xd4>)
 8010b64:	f003 f94e 	bl	8013e04 <iprintf>
    return;
 8010b68:	e04a      	b.n	8010c00 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8010b6a:	693b      	ldr	r3, [r7, #16]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	68ba      	ldr	r2, [r7, #8]
 8010b74:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8010b76:	693b      	ldr	r3, [r7, #16]
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8010b7c:	693b      	ldr	r3, [r7, #16]
 8010b7e:	68fa      	ldr	r2, [r7, #12]
 8010b80:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8010b82:	4b24      	ldr	r3, [pc, #144]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010b84:	681b      	ldr	r3, [r3, #0]
 8010b86:	2b00      	cmp	r3, #0
 8010b88:	d103      	bne.n	8010b92 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8010b8a:	4a22      	ldr	r2, [pc, #136]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010b8c:	693b      	ldr	r3, [r7, #16]
 8010b8e:	6013      	str	r3, [r2, #0]
    return;
 8010b90:	e037      	b.n	8010c02 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8010b92:	693b      	ldr	r3, [r7, #16]
 8010b94:	685a      	ldr	r2, [r3, #4]
 8010b96:	4b1f      	ldr	r3, [pc, #124]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	685b      	ldr	r3, [r3, #4]
 8010b9c:	1ad3      	subs	r3, r2, r3
 8010b9e:	0fdb      	lsrs	r3, r3, #31
 8010ba0:	f003 0301 	and.w	r3, r3, #1
 8010ba4:	b2db      	uxtb	r3, r3
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d007      	beq.n	8010bba <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8010baa:	4b1a      	ldr	r3, [pc, #104]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010bac:	681a      	ldr	r2, [r3, #0]
 8010bae:	693b      	ldr	r3, [r7, #16]
 8010bb0:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8010bb2:	4a18      	ldr	r2, [pc, #96]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010bb4:	693b      	ldr	r3, [r7, #16]
 8010bb6:	6013      	str	r3, [r2, #0]
 8010bb8:	e023      	b.n	8010c02 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8010bba:	4b16      	ldr	r3, [pc, #88]	; (8010c14 <sys_timeout_abs+0xd8>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	617b      	str	r3, [r7, #20]
 8010bc0:	e01a      	b.n	8010bf8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8010bc2:	697b      	ldr	r3, [r7, #20]
 8010bc4:	681b      	ldr	r3, [r3, #0]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d00b      	beq.n	8010be2 <sys_timeout_abs+0xa6>
 8010bca:	693b      	ldr	r3, [r7, #16]
 8010bcc:	685a      	ldr	r2, [r3, #4]
 8010bce:	697b      	ldr	r3, [r7, #20]
 8010bd0:	681b      	ldr	r3, [r3, #0]
 8010bd2:	685b      	ldr	r3, [r3, #4]
 8010bd4:	1ad3      	subs	r3, r2, r3
 8010bd6:	0fdb      	lsrs	r3, r3, #31
 8010bd8:	f003 0301 	and.w	r3, r3, #1
 8010bdc:	b2db      	uxtb	r3, r3
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d007      	beq.n	8010bf2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8010be2:	697b      	ldr	r3, [r7, #20]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	693b      	ldr	r3, [r7, #16]
 8010be8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8010bea:	697b      	ldr	r3, [r7, #20]
 8010bec:	693a      	ldr	r2, [r7, #16]
 8010bee:	601a      	str	r2, [r3, #0]
        break;
 8010bf0:	e007      	b.n	8010c02 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8010bf2:	697b      	ldr	r3, [r7, #20]
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	617b      	str	r3, [r7, #20]
 8010bf8:	697b      	ldr	r3, [r7, #20]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d1e1      	bne.n	8010bc2 <sys_timeout_abs+0x86>
 8010bfe:	e000      	b.n	8010c02 <sys_timeout_abs+0xc6>
    return;
 8010c00:	bf00      	nop
      }
    }
  }
}
 8010c02:	3718      	adds	r7, #24
 8010c04:	46bd      	mov	sp, r7
 8010c06:	bd80      	pop	{r7, pc}
 8010c08:	08016d20 	.word	0x08016d20
 8010c0c:	08016d54 	.word	0x08016d54
 8010c10:	08016d94 	.word	0x08016d94
 8010c14:	20000114 	.word	0x20000114

08010c18 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8010c18:	b580      	push	{r7, lr}
 8010c1a:	b086      	sub	sp, #24
 8010c1c:	af00      	add	r7, sp, #0
 8010c1e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8010c24:	697b      	ldr	r3, [r7, #20]
 8010c26:	685b      	ldr	r3, [r3, #4]
 8010c28:	4798      	blx	r3

  now = sys_now();
 8010c2a:	f7f8 ffd5 	bl	8009bd8 <sys_now>
 8010c2e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8010c30:	697b      	ldr	r3, [r7, #20]
 8010c32:	681a      	ldr	r2, [r3, #0]
 8010c34:	4b0f      	ldr	r3, [pc, #60]	; (8010c74 <lwip_cyclic_timer+0x5c>)
 8010c36:	681b      	ldr	r3, [r3, #0]
 8010c38:	4413      	add	r3, r2
 8010c3a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8010c3c:	68fa      	ldr	r2, [r7, #12]
 8010c3e:	693b      	ldr	r3, [r7, #16]
 8010c40:	1ad3      	subs	r3, r2, r3
 8010c42:	0fdb      	lsrs	r3, r3, #31
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	b2db      	uxtb	r3, r3
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d009      	beq.n	8010c62 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8010c4e:	697b      	ldr	r3, [r7, #20]
 8010c50:	681a      	ldr	r2, [r3, #0]
 8010c52:	693b      	ldr	r3, [r7, #16]
 8010c54:	4413      	add	r3, r2
 8010c56:	687a      	ldr	r2, [r7, #4]
 8010c58:	4907      	ldr	r1, [pc, #28]	; (8010c78 <lwip_cyclic_timer+0x60>)
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7ff ff6e 	bl	8010b3c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8010c60:	e004      	b.n	8010c6c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8010c62:	687a      	ldr	r2, [r7, #4]
 8010c64:	4904      	ldr	r1, [pc, #16]	; (8010c78 <lwip_cyclic_timer+0x60>)
 8010c66:	68f8      	ldr	r0, [r7, #12]
 8010c68:	f7ff ff68 	bl	8010b3c <sys_timeout_abs>
}
 8010c6c:	bf00      	nop
 8010c6e:	3718      	adds	r7, #24
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd80      	pop	{r7, pc}
 8010c74:	20000118 	.word	0x20000118
 8010c78:	08010c19 	.word	0x08010c19

08010c7c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8010c7c:	b580      	push	{r7, lr}
 8010c7e:	b082      	sub	sp, #8
 8010c80:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010c82:	2301      	movs	r3, #1
 8010c84:	607b      	str	r3, [r7, #4]
 8010c86:	e00e      	b.n	8010ca6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8010c88:	4a0b      	ldr	r2, [pc, #44]	; (8010cb8 <sys_timeouts_init+0x3c>)
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8010c90:	687b      	ldr	r3, [r7, #4]
 8010c92:	00db      	lsls	r3, r3, #3
 8010c94:	4a08      	ldr	r2, [pc, #32]	; (8010cb8 <sys_timeouts_init+0x3c>)
 8010c96:	4413      	add	r3, r2
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4908      	ldr	r1, [pc, #32]	; (8010cbc <sys_timeouts_init+0x40>)
 8010c9c:	f000 f810 	bl	8010cc0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	3301      	adds	r3, #1
 8010ca4:	607b      	str	r3, [r7, #4]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	2b02      	cmp	r3, #2
 8010caa:	d9ed      	bls.n	8010c88 <sys_timeouts_init+0xc>
  }
}
 8010cac:	bf00      	nop
 8010cae:	bf00      	nop
 8010cb0:	3708      	adds	r7, #8
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}
 8010cb6:	bf00      	nop
 8010cb8:	0801791c 	.word	0x0801791c
 8010cbc:	08010c19 	.word	0x08010c19

08010cc0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8010cc0:	b580      	push	{r7, lr}
 8010cc2:	b086      	sub	sp, #24
 8010cc4:	af00      	add	r7, sp, #0
 8010cc6:	60f8      	str	r0, [r7, #12]
 8010cc8:	60b9      	str	r1, [r7, #8]
 8010cca:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8010ccc:	68fb      	ldr	r3, [r7, #12]
 8010cce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8010cd2:	d306      	bcc.n	8010ce2 <sys_timeout+0x22>
 8010cd4:	4b0a      	ldr	r3, [pc, #40]	; (8010d00 <sys_timeout+0x40>)
 8010cd6:	f240 1229 	movw	r2, #297	; 0x129
 8010cda:	490a      	ldr	r1, [pc, #40]	; (8010d04 <sys_timeout+0x44>)
 8010cdc:	480a      	ldr	r0, [pc, #40]	; (8010d08 <sys_timeout+0x48>)
 8010cde:	f003 f891 	bl	8013e04 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8010ce2:	f7f8 ff79 	bl	8009bd8 <sys_now>
 8010ce6:	4602      	mov	r2, r0
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	4413      	add	r3, r2
 8010cec:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8010cee:	687a      	ldr	r2, [r7, #4]
 8010cf0:	68b9      	ldr	r1, [r7, #8]
 8010cf2:	6978      	ldr	r0, [r7, #20]
 8010cf4:	f7ff ff22 	bl	8010b3c <sys_timeout_abs>
#endif
}
 8010cf8:	bf00      	nop
 8010cfa:	3718      	adds	r7, #24
 8010cfc:	46bd      	mov	sp, r7
 8010cfe:	bd80      	pop	{r7, pc}
 8010d00:	08016d20 	.word	0x08016d20
 8010d04:	08016dbc 	.word	0x08016dbc
 8010d08:	08016d94 	.word	0x08016d94

08010d0c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b084      	sub	sp, #16
 8010d10:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8010d12:	f7f8 ff61 	bl	8009bd8 <sys_now>
 8010d16:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8010d18:	4b1a      	ldr	r3, [pc, #104]	; (8010d84 <sys_check_timeouts+0x78>)
 8010d1a:	781b      	ldrb	r3, [r3, #0]
 8010d1c:	b2db      	uxtb	r3, r3
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d001      	beq.n	8010d26 <sys_check_timeouts+0x1a>
 8010d22:	f7f9 ffbb 	bl	800ac9c <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8010d26:	4b18      	ldr	r3, [pc, #96]	; (8010d88 <sys_check_timeouts+0x7c>)
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8010d2c:	68bb      	ldr	r3, [r7, #8]
 8010d2e:	2b00      	cmp	r3, #0
 8010d30:	d022      	beq.n	8010d78 <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	685b      	ldr	r3, [r3, #4]
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	1ad3      	subs	r3, r2, r3
 8010d3a:	0fdb      	lsrs	r3, r3, #31
 8010d3c:	f003 0301 	and.w	r3, r3, #1
 8010d40:	b2db      	uxtb	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d11a      	bne.n	8010d7c <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8010d46:	68bb      	ldr	r3, [r7, #8]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	4a0f      	ldr	r2, [pc, #60]	; (8010d88 <sys_check_timeouts+0x7c>)
 8010d4c:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8010d4e:	68bb      	ldr	r3, [r7, #8]
 8010d50:	689b      	ldr	r3, [r3, #8]
 8010d52:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8010d54:	68bb      	ldr	r3, [r7, #8]
 8010d56:	68db      	ldr	r3, [r3, #12]
 8010d58:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	4a0b      	ldr	r2, [pc, #44]	; (8010d8c <sys_check_timeouts+0x80>)
 8010d60:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8010d62:	68b9      	ldr	r1, [r7, #8]
 8010d64:	2006      	movs	r0, #6
 8010d66:	f7f9 fcc1 	bl	800a6ec <memp_free>
    if (handler != NULL) {
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d0d3      	beq.n	8010d18 <sys_check_timeouts+0xc>
      handler(arg);
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	6838      	ldr	r0, [r7, #0]
 8010d74:	4798      	blx	r3
  do {
 8010d76:	e7cf      	b.n	8010d18 <sys_check_timeouts+0xc>
      return;
 8010d78:	bf00      	nop
 8010d7a:	e000      	b.n	8010d7e <sys_check_timeouts+0x72>
      return;
 8010d7c:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8010d7e:	3710      	adds	r7, #16
 8010d80:	46bd      	mov	sp, r7
 8010d82:	bd80      	pop	{r7, pc}
 8010d84:	200071f8 	.word	0x200071f8
 8010d88:	20000114 	.word	0x20000114
 8010d8c:	20000118 	.word	0x20000118

08010d90 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8010d90:	b580      	push	{r7, lr}
 8010d92:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8010d94:	f003 f84e 	bl	8013e34 <rand>
 8010d98:	4603      	mov	r3, r0
 8010d9a:	b29b      	uxth	r3, r3
 8010d9c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8010da0:	b29b      	uxth	r3, r3
 8010da2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8010da6:	b29a      	uxth	r2, r3
 8010da8:	4b01      	ldr	r3, [pc, #4]	; (8010db0 <udp_init+0x20>)
 8010daa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8010dac:	bf00      	nop
 8010dae:	bd80      	pop	{r7, pc}
 8010db0:	20000010 	.word	0x20000010

08010db4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8010db4:	b480      	push	{r7}
 8010db6:	b083      	sub	sp, #12
 8010db8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8010dbe:	4b17      	ldr	r3, [pc, #92]	; (8010e1c <udp_new_port+0x68>)
 8010dc0:	881b      	ldrh	r3, [r3, #0]
 8010dc2:	1c5a      	adds	r2, r3, #1
 8010dc4:	b291      	uxth	r1, r2
 8010dc6:	4a15      	ldr	r2, [pc, #84]	; (8010e1c <udp_new_port+0x68>)
 8010dc8:	8011      	strh	r1, [r2, #0]
 8010dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010dce:	4293      	cmp	r3, r2
 8010dd0:	d103      	bne.n	8010dda <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8010dd2:	4b12      	ldr	r3, [pc, #72]	; (8010e1c <udp_new_port+0x68>)
 8010dd4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8010dd8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010dda:	4b11      	ldr	r3, [pc, #68]	; (8010e20 <udp_new_port+0x6c>)
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	603b      	str	r3, [r7, #0]
 8010de0:	e011      	b.n	8010e06 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8010de2:	683b      	ldr	r3, [r7, #0]
 8010de4:	8a5a      	ldrh	r2, [r3, #18]
 8010de6:	4b0d      	ldr	r3, [pc, #52]	; (8010e1c <udp_new_port+0x68>)
 8010de8:	881b      	ldrh	r3, [r3, #0]
 8010dea:	429a      	cmp	r2, r3
 8010dec:	d108      	bne.n	8010e00 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8010dee:	88fb      	ldrh	r3, [r7, #6]
 8010df0:	3301      	adds	r3, #1
 8010df2:	80fb      	strh	r3, [r7, #6]
 8010df4:	88fb      	ldrh	r3, [r7, #6]
 8010df6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010dfa:	d3e0      	bcc.n	8010dbe <udp_new_port+0xa>
        return 0;
 8010dfc:	2300      	movs	r3, #0
 8010dfe:	e007      	b.n	8010e10 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010e00:	683b      	ldr	r3, [r7, #0]
 8010e02:	68db      	ldr	r3, [r3, #12]
 8010e04:	603b      	str	r3, [r7, #0]
 8010e06:	683b      	ldr	r3, [r7, #0]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d1ea      	bne.n	8010de2 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8010e0c:	4b03      	ldr	r3, [pc, #12]	; (8010e1c <udp_new_port+0x68>)
 8010e0e:	881b      	ldrh	r3, [r3, #0]
}
 8010e10:	4618      	mov	r0, r3
 8010e12:	370c      	adds	r7, #12
 8010e14:	46bd      	mov	sp, r7
 8010e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e1a:	4770      	bx	lr
 8010e1c:	20000010 	.word	0x20000010
 8010e20:	20007218 	.word	0x20007218

08010e24 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8010e24:	b580      	push	{r7, lr}
 8010e26:	b084      	sub	sp, #16
 8010e28:	af00      	add	r7, sp, #0
 8010e2a:	60f8      	str	r0, [r7, #12]
 8010e2c:	60b9      	str	r1, [r7, #8]
 8010e2e:	4613      	mov	r3, r2
 8010e30:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8010e32:	68fb      	ldr	r3, [r7, #12]
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d105      	bne.n	8010e44 <udp_input_local_match+0x20>
 8010e38:	4b27      	ldr	r3, [pc, #156]	; (8010ed8 <udp_input_local_match+0xb4>)
 8010e3a:	2287      	movs	r2, #135	; 0x87
 8010e3c:	4927      	ldr	r1, [pc, #156]	; (8010edc <udp_input_local_match+0xb8>)
 8010e3e:	4828      	ldr	r0, [pc, #160]	; (8010ee0 <udp_input_local_match+0xbc>)
 8010e40:	f002 ffe0 	bl	8013e04 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8010e44:	68bb      	ldr	r3, [r7, #8]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d105      	bne.n	8010e56 <udp_input_local_match+0x32>
 8010e4a:	4b23      	ldr	r3, [pc, #140]	; (8010ed8 <udp_input_local_match+0xb4>)
 8010e4c:	2288      	movs	r2, #136	; 0x88
 8010e4e:	4925      	ldr	r1, [pc, #148]	; (8010ee4 <udp_input_local_match+0xc0>)
 8010e50:	4823      	ldr	r0, [pc, #140]	; (8010ee0 <udp_input_local_match+0xbc>)
 8010e52:	f002 ffd7 	bl	8013e04 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e56:	68fb      	ldr	r3, [r7, #12]
 8010e58:	7a1b      	ldrb	r3, [r3, #8]
 8010e5a:	2b00      	cmp	r3, #0
 8010e5c:	d00b      	beq.n	8010e76 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	7a1a      	ldrb	r2, [r3, #8]
 8010e62:	4b21      	ldr	r3, [pc, #132]	; (8010ee8 <udp_input_local_match+0xc4>)
 8010e64:	685b      	ldr	r3, [r3, #4]
 8010e66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010e6a:	3301      	adds	r3, #1
 8010e6c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8010e6e:	429a      	cmp	r2, r3
 8010e70:	d001      	beq.n	8010e76 <udp_input_local_match+0x52>
    return 0;
 8010e72:	2300      	movs	r3, #0
 8010e74:	e02b      	b.n	8010ece <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8010e76:	79fb      	ldrb	r3, [r7, #7]
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d018      	beq.n	8010eae <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e7c:	68fb      	ldr	r3, [r7, #12]
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d013      	beq.n	8010eaa <udp_input_local_match+0x86>
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d00f      	beq.n	8010eaa <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010e8a:	4b17      	ldr	r3, [pc, #92]	; (8010ee8 <udp_input_local_match+0xc4>)
 8010e8c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8010e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010e92:	d00a      	beq.n	8010eaa <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	681a      	ldr	r2, [r3, #0]
 8010e98:	4b13      	ldr	r3, [pc, #76]	; (8010ee8 <udp_input_local_match+0xc4>)
 8010e9a:	695b      	ldr	r3, [r3, #20]
 8010e9c:	405a      	eors	r2, r3
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	3308      	adds	r3, #8
 8010ea2:	681b      	ldr	r3, [r3, #0]
 8010ea4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8010ea6:	2b00      	cmp	r3, #0
 8010ea8:	d110      	bne.n	8010ecc <udp_input_local_match+0xa8>
          return 1;
 8010eaa:	2301      	movs	r3, #1
 8010eac:	e00f      	b.n	8010ece <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	2b00      	cmp	r3, #0
 8010eb2:	d009      	beq.n	8010ec8 <udp_input_local_match+0xa4>
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	2b00      	cmp	r3, #0
 8010eba:	d005      	beq.n	8010ec8 <udp_input_local_match+0xa4>
 8010ebc:	68fb      	ldr	r3, [r7, #12]
 8010ebe:	681a      	ldr	r2, [r3, #0]
 8010ec0:	4b09      	ldr	r3, [pc, #36]	; (8010ee8 <udp_input_local_match+0xc4>)
 8010ec2:	695b      	ldr	r3, [r3, #20]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	d101      	bne.n	8010ecc <udp_input_local_match+0xa8>
        return 1;
 8010ec8:	2301      	movs	r3, #1
 8010eca:	e000      	b.n	8010ece <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8010ecc:	2300      	movs	r3, #0
}
 8010ece:	4618      	mov	r0, r3
 8010ed0:	3710      	adds	r7, #16
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	bd80      	pop	{r7, pc}
 8010ed6:	bf00      	nop
 8010ed8:	08016e08 	.word	0x08016e08
 8010edc:	08016e38 	.word	0x08016e38
 8010ee0:	08016e5c 	.word	0x08016e5c
 8010ee4:	08016e84 	.word	0x08016e84
 8010ee8:	20003cbc 	.word	0x20003cbc

08010eec <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8010eec:	b590      	push	{r4, r7, lr}
 8010eee:	b08d      	sub	sp, #52	; 0x34
 8010ef0:	af02      	add	r7, sp, #8
 8010ef2:	6078      	str	r0, [r7, #4]
 8010ef4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8010ef6:	2300      	movs	r3, #0
 8010ef8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8010efa:	687b      	ldr	r3, [r7, #4]
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d105      	bne.n	8010f0c <udp_input+0x20>
 8010f00:	4b7c      	ldr	r3, [pc, #496]	; (80110f4 <udp_input+0x208>)
 8010f02:	22cf      	movs	r2, #207	; 0xcf
 8010f04:	497c      	ldr	r1, [pc, #496]	; (80110f8 <udp_input+0x20c>)
 8010f06:	487d      	ldr	r0, [pc, #500]	; (80110fc <udp_input+0x210>)
 8010f08:	f002 ff7c 	bl	8013e04 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8010f0c:	683b      	ldr	r3, [r7, #0]
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d105      	bne.n	8010f1e <udp_input+0x32>
 8010f12:	4b78      	ldr	r3, [pc, #480]	; (80110f4 <udp_input+0x208>)
 8010f14:	22d0      	movs	r2, #208	; 0xd0
 8010f16:	497a      	ldr	r1, [pc, #488]	; (8011100 <udp_input+0x214>)
 8010f18:	4878      	ldr	r0, [pc, #480]	; (80110fc <udp_input+0x210>)
 8010f1a:	f002 ff73 	bl	8013e04 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	895b      	ldrh	r3, [r3, #10]
 8010f22:	2b07      	cmp	r3, #7
 8010f24:	d803      	bhi.n	8010f2e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8010f26:	6878      	ldr	r0, [r7, #4]
 8010f28:	f7fa f9f2 	bl	800b310 <pbuf_free>
    goto end;
 8010f2c:	e0de      	b.n	80110ec <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	685b      	ldr	r3, [r3, #4]
 8010f32:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8010f34:	4b73      	ldr	r3, [pc, #460]	; (8011104 <udp_input+0x218>)
 8010f36:	695b      	ldr	r3, [r3, #20]
 8010f38:	4a72      	ldr	r2, [pc, #456]	; (8011104 <udp_input+0x218>)
 8010f3a:	6812      	ldr	r2, [r2, #0]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	4618      	mov	r0, r3
 8010f40:	f001 ffc8 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 8010f44:	4603      	mov	r3, r0
 8010f46:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8010f48:	697b      	ldr	r3, [r7, #20]
 8010f4a:	881b      	ldrh	r3, [r3, #0]
 8010f4c:	b29b      	uxth	r3, r3
 8010f4e:	4618      	mov	r0, r3
 8010f50:	f7f8 ff2b 	bl	8009daa <lwip_htons>
 8010f54:	4603      	mov	r3, r0
 8010f56:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8010f58:	697b      	ldr	r3, [r7, #20]
 8010f5a:	885b      	ldrh	r3, [r3, #2]
 8010f5c:	b29b      	uxth	r3, r3
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f7f8 ff23 	bl	8009daa <lwip_htons>
 8010f64:	4603      	mov	r3, r0
 8010f66:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8010f68:	2300      	movs	r3, #0
 8010f6a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8010f6c:	2300      	movs	r3, #0
 8010f6e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8010f70:	2300      	movs	r3, #0
 8010f72:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8010f74:	4b64      	ldr	r3, [pc, #400]	; (8011108 <udp_input+0x21c>)
 8010f76:	681b      	ldr	r3, [r3, #0]
 8010f78:	627b      	str	r3, [r7, #36]	; 0x24
 8010f7a:	e054      	b.n	8011026 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8010f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f7e:	8a5b      	ldrh	r3, [r3, #18]
 8010f80:	89fa      	ldrh	r2, [r7, #14]
 8010f82:	429a      	cmp	r2, r3
 8010f84:	d14a      	bne.n	801101c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8010f86:	7cfb      	ldrb	r3, [r7, #19]
 8010f88:	461a      	mov	r2, r3
 8010f8a:	6839      	ldr	r1, [r7, #0]
 8010f8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010f8e:	f7ff ff49 	bl	8010e24 <udp_input_local_match>
 8010f92:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d041      	beq.n	801101c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8010f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9a:	7c1b      	ldrb	r3, [r3, #16]
 8010f9c:	f003 0304 	and.w	r3, r3, #4
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d11d      	bne.n	8010fe0 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8010fa4:	69fb      	ldr	r3, [r7, #28]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	d102      	bne.n	8010fb0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8010faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fac:	61fb      	str	r3, [r7, #28]
 8010fae:	e017      	b.n	8010fe0 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8010fb0:	7cfb      	ldrb	r3, [r7, #19]
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d014      	beq.n	8010fe0 <udp_input+0xf4>
 8010fb6:	4b53      	ldr	r3, [pc, #332]	; (8011104 <udp_input+0x218>)
 8010fb8:	695b      	ldr	r3, [r3, #20]
 8010fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fbe:	d10f      	bne.n	8010fe0 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8010fc0:	69fb      	ldr	r3, [r7, #28]
 8010fc2:	681a      	ldr	r2, [r3, #0]
 8010fc4:	683b      	ldr	r3, [r7, #0]
 8010fc6:	3304      	adds	r3, #4
 8010fc8:	681b      	ldr	r3, [r3, #0]
 8010fca:	429a      	cmp	r2, r3
 8010fcc:	d008      	beq.n	8010fe0 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8010fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fd0:	681a      	ldr	r2, [r3, #0]
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	3304      	adds	r3, #4
 8010fd6:	681b      	ldr	r3, [r3, #0]
 8010fd8:	429a      	cmp	r2, r3
 8010fda:	d101      	bne.n	8010fe0 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8010fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fde:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe2:	8a9b      	ldrh	r3, [r3, #20]
 8010fe4:	8a3a      	ldrh	r2, [r7, #16]
 8010fe6:	429a      	cmp	r2, r3
 8010fe8:	d118      	bne.n	801101c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fec:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d005      	beq.n	8010ffe <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8010ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ff4:	685a      	ldr	r2, [r3, #4]
 8010ff6:	4b43      	ldr	r3, [pc, #268]	; (8011104 <udp_input+0x218>)
 8010ff8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d10e      	bne.n	801101c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8010ffe:	6a3b      	ldr	r3, [r7, #32]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d014      	beq.n	801102e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8011004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011006:	68da      	ldr	r2, [r3, #12]
 8011008:	6a3b      	ldr	r3, [r7, #32]
 801100a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801100c:	4b3e      	ldr	r3, [pc, #248]	; (8011108 <udp_input+0x21c>)
 801100e:	681a      	ldr	r2, [r3, #0]
 8011010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011012:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8011014:	4a3c      	ldr	r2, [pc, #240]	; (8011108 <udp_input+0x21c>)
 8011016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011018:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801101a:	e008      	b.n	801102e <udp_input+0x142>
      }
    }

    prev = pcb;
 801101c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011022:	68db      	ldr	r3, [r3, #12]
 8011024:	627b      	str	r3, [r7, #36]	; 0x24
 8011026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011028:	2b00      	cmp	r3, #0
 801102a:	d1a7      	bne.n	8010f7c <udp_input+0x90>
 801102c:	e000      	b.n	8011030 <udp_input+0x144>
        break;
 801102e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011032:	2b00      	cmp	r3, #0
 8011034:	d101      	bne.n	801103a <udp_input+0x14e>
    pcb = uncon_pcb;
 8011036:	69fb      	ldr	r3, [r7, #28]
 8011038:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801103a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801103c:	2b00      	cmp	r3, #0
 801103e:	d002      	beq.n	8011046 <udp_input+0x15a>
    for_us = 1;
 8011040:	2301      	movs	r3, #1
 8011042:	76fb      	strb	r3, [r7, #27]
 8011044:	e00a      	b.n	801105c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011046:	683b      	ldr	r3, [r7, #0]
 8011048:	3304      	adds	r3, #4
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	4b2d      	ldr	r3, [pc, #180]	; (8011104 <udp_input+0x218>)
 801104e:	695b      	ldr	r3, [r3, #20]
 8011050:	429a      	cmp	r2, r3
 8011052:	bf0c      	ite	eq
 8011054:	2301      	moveq	r3, #1
 8011056:	2300      	movne	r3, #0
 8011058:	b2db      	uxtb	r3, r3
 801105a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801105c:	7efb      	ldrb	r3, [r7, #27]
 801105e:	2b00      	cmp	r3, #0
 8011060:	d041      	beq.n	80110e6 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011062:	2108      	movs	r1, #8
 8011064:	6878      	ldr	r0, [r7, #4]
 8011066:	f7fa f8cd 	bl	800b204 <pbuf_remove_header>
 801106a:	4603      	mov	r3, r0
 801106c:	2b00      	cmp	r3, #0
 801106e:	d00a      	beq.n	8011086 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011070:	4b20      	ldr	r3, [pc, #128]	; (80110f4 <udp_input+0x208>)
 8011072:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011076:	4925      	ldr	r1, [pc, #148]	; (801110c <udp_input+0x220>)
 8011078:	4820      	ldr	r0, [pc, #128]	; (80110fc <udp_input+0x210>)
 801107a:	f002 fec3 	bl	8013e04 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801107e:	6878      	ldr	r0, [r7, #4]
 8011080:	f7fa f946 	bl	800b310 <pbuf_free>
      goto end;
 8011084:	e032      	b.n	80110ec <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011088:	2b00      	cmp	r3, #0
 801108a:	d012      	beq.n	80110b2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801108c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801108e:	699b      	ldr	r3, [r3, #24]
 8011090:	2b00      	cmp	r3, #0
 8011092:	d00a      	beq.n	80110aa <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011094:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011096:	699c      	ldr	r4, [r3, #24]
 8011098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801109a:	69d8      	ldr	r0, [r3, #28]
 801109c:	8a3b      	ldrh	r3, [r7, #16]
 801109e:	9300      	str	r3, [sp, #0]
 80110a0:	4b1b      	ldr	r3, [pc, #108]	; (8011110 <udp_input+0x224>)
 80110a2:	687a      	ldr	r2, [r7, #4]
 80110a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80110a6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80110a8:	e021      	b.n	80110ee <udp_input+0x202>
        pbuf_free(p);
 80110aa:	6878      	ldr	r0, [r7, #4]
 80110ac:	f7fa f930 	bl	800b310 <pbuf_free>
        goto end;
 80110b0:	e01c      	b.n	80110ec <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80110b2:	7cfb      	ldrb	r3, [r7, #19]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d112      	bne.n	80110de <udp_input+0x1f2>
 80110b8:	4b12      	ldr	r3, [pc, #72]	; (8011104 <udp_input+0x218>)
 80110ba:	695b      	ldr	r3, [r3, #20]
 80110bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80110c0:	2be0      	cmp	r3, #224	; 0xe0
 80110c2:	d00c      	beq.n	80110de <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80110c4:	4b0f      	ldr	r3, [pc, #60]	; (8011104 <udp_input+0x218>)
 80110c6:	899b      	ldrh	r3, [r3, #12]
 80110c8:	3308      	adds	r3, #8
 80110ca:	b29b      	uxth	r3, r3
 80110cc:	b21b      	sxth	r3, r3
 80110ce:	4619      	mov	r1, r3
 80110d0:	6878      	ldr	r0, [r7, #4]
 80110d2:	f7fa f90a 	bl	800b2ea <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80110d6:	2103      	movs	r1, #3
 80110d8:	6878      	ldr	r0, [r7, #4]
 80110da:	f001 fbdb 	bl	8012894 <icmp_dest_unreach>
      pbuf_free(p);
 80110de:	6878      	ldr	r0, [r7, #4]
 80110e0:	f7fa f916 	bl	800b310 <pbuf_free>
  return;
 80110e4:	e003      	b.n	80110ee <udp_input+0x202>
    pbuf_free(p);
 80110e6:	6878      	ldr	r0, [r7, #4]
 80110e8:	f7fa f912 	bl	800b310 <pbuf_free>
  return;
 80110ec:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80110ee:	372c      	adds	r7, #44	; 0x2c
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd90      	pop	{r4, r7, pc}
 80110f4:	08016e08 	.word	0x08016e08
 80110f8:	08016eac 	.word	0x08016eac
 80110fc:	08016e5c 	.word	0x08016e5c
 8011100:	08016ec4 	.word	0x08016ec4
 8011104:	20003cbc 	.word	0x20003cbc
 8011108:	20007218 	.word	0x20007218
 801110c:	08016ee0 	.word	0x08016ee0
 8011110:	20003ccc 	.word	0x20003ccc

08011114 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 8011114:	b580      	push	{r7, lr}
 8011116:	b082      	sub	sp, #8
 8011118:	af00      	add	r7, sp, #0
 801111a:	6078      	str	r0, [r7, #4]
 801111c:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801111e:	687b      	ldr	r3, [r7, #4]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d109      	bne.n	8011138 <udp_send+0x24>
 8011124:	4b11      	ldr	r3, [pc, #68]	; (801116c <udp_send+0x58>)
 8011126:	f240 12d5 	movw	r2, #469	; 0x1d5
 801112a:	4911      	ldr	r1, [pc, #68]	; (8011170 <udp_send+0x5c>)
 801112c:	4811      	ldr	r0, [pc, #68]	; (8011174 <udp_send+0x60>)
 801112e:	f002 fe69 	bl	8013e04 <iprintf>
 8011132:	f06f 030f 	mvn.w	r3, #15
 8011136:	e015      	b.n	8011164 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 8011138:	683b      	ldr	r3, [r7, #0]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d109      	bne.n	8011152 <udp_send+0x3e>
 801113e:	4b0b      	ldr	r3, [pc, #44]	; (801116c <udp_send+0x58>)
 8011140:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 8011144:	490c      	ldr	r1, [pc, #48]	; (8011178 <udp_send+0x64>)
 8011146:	480b      	ldr	r0, [pc, #44]	; (8011174 <udp_send+0x60>)
 8011148:	f002 fe5c 	bl	8013e04 <iprintf>
 801114c:	f06f 030f 	mvn.w	r3, #15
 8011150:	e008      	b.n	8011164 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 8011152:	687b      	ldr	r3, [r7, #4]
 8011154:	1d1a      	adds	r2, r3, #4
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8a9b      	ldrh	r3, [r3, #20]
 801115a:	6839      	ldr	r1, [r7, #0]
 801115c:	6878      	ldr	r0, [r7, #4]
 801115e:	f000 f80d 	bl	801117c <udp_sendto>
 8011162:	4603      	mov	r3, r0
}
 8011164:	4618      	mov	r0, r3
 8011166:	3708      	adds	r7, #8
 8011168:	46bd      	mov	sp, r7
 801116a:	bd80      	pop	{r7, pc}
 801116c:	08016e08 	.word	0x08016e08
 8011170:	08016efc 	.word	0x08016efc
 8011174:	08016e5c 	.word	0x08016e5c
 8011178:	08016f14 	.word	0x08016f14

0801117c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801117c:	b580      	push	{r7, lr}
 801117e:	b088      	sub	sp, #32
 8011180:	af02      	add	r7, sp, #8
 8011182:	60f8      	str	r0, [r7, #12]
 8011184:	60b9      	str	r1, [r7, #8]
 8011186:	607a      	str	r2, [r7, #4]
 8011188:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801118a:	68fb      	ldr	r3, [r7, #12]
 801118c:	2b00      	cmp	r3, #0
 801118e:	d109      	bne.n	80111a4 <udp_sendto+0x28>
 8011190:	4b23      	ldr	r3, [pc, #140]	; (8011220 <udp_sendto+0xa4>)
 8011192:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011196:	4923      	ldr	r1, [pc, #140]	; (8011224 <udp_sendto+0xa8>)
 8011198:	4823      	ldr	r0, [pc, #140]	; (8011228 <udp_sendto+0xac>)
 801119a:	f002 fe33 	bl	8013e04 <iprintf>
 801119e:	f06f 030f 	mvn.w	r3, #15
 80111a2:	e038      	b.n	8011216 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 80111a4:	68bb      	ldr	r3, [r7, #8]
 80111a6:	2b00      	cmp	r3, #0
 80111a8:	d109      	bne.n	80111be <udp_sendto+0x42>
 80111aa:	4b1d      	ldr	r3, [pc, #116]	; (8011220 <udp_sendto+0xa4>)
 80111ac:	f240 2219 	movw	r2, #537	; 0x219
 80111b0:	491e      	ldr	r1, [pc, #120]	; (801122c <udp_sendto+0xb0>)
 80111b2:	481d      	ldr	r0, [pc, #116]	; (8011228 <udp_sendto+0xac>)
 80111b4:	f002 fe26 	bl	8013e04 <iprintf>
 80111b8:	f06f 030f 	mvn.w	r3, #15
 80111bc:	e02b      	b.n	8011216 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d109      	bne.n	80111d8 <udp_sendto+0x5c>
 80111c4:	4b16      	ldr	r3, [pc, #88]	; (8011220 <udp_sendto+0xa4>)
 80111c6:	f240 221a 	movw	r2, #538	; 0x21a
 80111ca:	4919      	ldr	r1, [pc, #100]	; (8011230 <udp_sendto+0xb4>)
 80111cc:	4816      	ldr	r0, [pc, #88]	; (8011228 <udp_sendto+0xac>)
 80111ce:	f002 fe19 	bl	8013e04 <iprintf>
 80111d2:	f06f 030f 	mvn.w	r3, #15
 80111d6:	e01e      	b.n	8011216 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	7a1b      	ldrb	r3, [r3, #8]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d006      	beq.n	80111ee <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	7a1b      	ldrb	r3, [r3, #8]
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7f9 fd33 	bl	800ac50 <netif_get_by_index>
 80111ea:	6178      	str	r0, [r7, #20]
 80111ec:	e003      	b.n	80111f6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80111ee:	6878      	ldr	r0, [r7, #4]
 80111f0:	f001 fbda 	bl	80129a8 <ip4_route>
 80111f4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80111f6:	697b      	ldr	r3, [r7, #20]
 80111f8:	2b00      	cmp	r3, #0
 80111fa:	d102      	bne.n	8011202 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80111fc:	f06f 0303 	mvn.w	r3, #3
 8011200:	e009      	b.n	8011216 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8011202:	887a      	ldrh	r2, [r7, #2]
 8011204:	697b      	ldr	r3, [r7, #20]
 8011206:	9300      	str	r3, [sp, #0]
 8011208:	4613      	mov	r3, r2
 801120a:	687a      	ldr	r2, [r7, #4]
 801120c:	68b9      	ldr	r1, [r7, #8]
 801120e:	68f8      	ldr	r0, [r7, #12]
 8011210:	f000 f810 	bl	8011234 <udp_sendto_if>
 8011214:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011216:	4618      	mov	r0, r3
 8011218:	3718      	adds	r7, #24
 801121a:	46bd      	mov	sp, r7
 801121c:	bd80      	pop	{r7, pc}
 801121e:	bf00      	nop
 8011220:	08016e08 	.word	0x08016e08
 8011224:	08016f2c 	.word	0x08016f2c
 8011228:	08016e5c 	.word	0x08016e5c
 801122c:	08016f44 	.word	0x08016f44
 8011230:	08016f60 	.word	0x08016f60

08011234 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b088      	sub	sp, #32
 8011238:	af02      	add	r7, sp, #8
 801123a:	60f8      	str	r0, [r7, #12]
 801123c:	60b9      	str	r1, [r7, #8]
 801123e:	607a      	str	r2, [r7, #4]
 8011240:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	2b00      	cmp	r3, #0
 8011246:	d109      	bne.n	801125c <udp_sendto_if+0x28>
 8011248:	4b2e      	ldr	r3, [pc, #184]	; (8011304 <udp_sendto_if+0xd0>)
 801124a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801124e:	492e      	ldr	r1, [pc, #184]	; (8011308 <udp_sendto_if+0xd4>)
 8011250:	482e      	ldr	r0, [pc, #184]	; (801130c <udp_sendto_if+0xd8>)
 8011252:	f002 fdd7 	bl	8013e04 <iprintf>
 8011256:	f06f 030f 	mvn.w	r3, #15
 801125a:	e04f      	b.n	80112fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801125c:	68bb      	ldr	r3, [r7, #8]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <udp_sendto_if+0x42>
 8011262:	4b28      	ldr	r3, [pc, #160]	; (8011304 <udp_sendto_if+0xd0>)
 8011264:	f240 2281 	movw	r2, #641	; 0x281
 8011268:	4929      	ldr	r1, [pc, #164]	; (8011310 <udp_sendto_if+0xdc>)
 801126a:	4828      	ldr	r0, [pc, #160]	; (801130c <udp_sendto_if+0xd8>)
 801126c:	f002 fdca 	bl	8013e04 <iprintf>
 8011270:	f06f 030f 	mvn.w	r3, #15
 8011274:	e042      	b.n	80112fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d109      	bne.n	8011290 <udp_sendto_if+0x5c>
 801127c:	4b21      	ldr	r3, [pc, #132]	; (8011304 <udp_sendto_if+0xd0>)
 801127e:	f240 2282 	movw	r2, #642	; 0x282
 8011282:	4924      	ldr	r1, [pc, #144]	; (8011314 <udp_sendto_if+0xe0>)
 8011284:	4821      	ldr	r0, [pc, #132]	; (801130c <udp_sendto_if+0xd8>)
 8011286:	f002 fdbd 	bl	8013e04 <iprintf>
 801128a:	f06f 030f 	mvn.w	r3, #15
 801128e:	e035      	b.n	80112fc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011290:	6a3b      	ldr	r3, [r7, #32]
 8011292:	2b00      	cmp	r3, #0
 8011294:	d109      	bne.n	80112aa <udp_sendto_if+0x76>
 8011296:	4b1b      	ldr	r3, [pc, #108]	; (8011304 <udp_sendto_if+0xd0>)
 8011298:	f240 2283 	movw	r2, #643	; 0x283
 801129c:	491e      	ldr	r1, [pc, #120]	; (8011318 <udp_sendto_if+0xe4>)
 801129e:	481b      	ldr	r0, [pc, #108]	; (801130c <udp_sendto_if+0xd8>)
 80112a0:	f002 fdb0 	bl	8013e04 <iprintf>
 80112a4:	f06f 030f 	mvn.w	r3, #15
 80112a8:	e028      	b.n	80112fc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	2b00      	cmp	r3, #0
 80112ae:	d009      	beq.n	80112c4 <udp_sendto_if+0x90>
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	681b      	ldr	r3, [r3, #0]
 80112b4:	2b00      	cmp	r3, #0
 80112b6:	d005      	beq.n	80112c4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80112b8:	68fb      	ldr	r3, [r7, #12]
 80112ba:	681b      	ldr	r3, [r3, #0]
 80112bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80112c0:	2be0      	cmp	r3, #224	; 0xe0
 80112c2:	d103      	bne.n	80112cc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80112c4:	6a3b      	ldr	r3, [r7, #32]
 80112c6:	3304      	adds	r3, #4
 80112c8:	617b      	str	r3, [r7, #20]
 80112ca:	e00b      	b.n	80112e4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681a      	ldr	r2, [r3, #0]
 80112d0:	6a3b      	ldr	r3, [r7, #32]
 80112d2:	3304      	adds	r3, #4
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d002      	beq.n	80112e0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80112da:	f06f 0303 	mvn.w	r3, #3
 80112de:	e00d      	b.n	80112fc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80112e0:	68fb      	ldr	r3, [r7, #12]
 80112e2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80112e4:	887a      	ldrh	r2, [r7, #2]
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	9301      	str	r3, [sp, #4]
 80112ea:	6a3b      	ldr	r3, [r7, #32]
 80112ec:	9300      	str	r3, [sp, #0]
 80112ee:	4613      	mov	r3, r2
 80112f0:	687a      	ldr	r2, [r7, #4]
 80112f2:	68b9      	ldr	r1, [r7, #8]
 80112f4:	68f8      	ldr	r0, [r7, #12]
 80112f6:	f000 f811 	bl	801131c <udp_sendto_if_src>
 80112fa:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80112fc:	4618      	mov	r0, r3
 80112fe:	3718      	adds	r7, #24
 8011300:	46bd      	mov	sp, r7
 8011302:	bd80      	pop	{r7, pc}
 8011304:	08016e08 	.word	0x08016e08
 8011308:	08016f7c 	.word	0x08016f7c
 801130c:	08016e5c 	.word	0x08016e5c
 8011310:	08016f98 	.word	0x08016f98
 8011314:	08016fb4 	.word	0x08016fb4
 8011318:	08016fd4 	.word	0x08016fd4

0801131c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b08c      	sub	sp, #48	; 0x30
 8011320:	af04      	add	r7, sp, #16
 8011322:	60f8      	str	r0, [r7, #12]
 8011324:	60b9      	str	r1, [r7, #8]
 8011326:	607a      	str	r2, [r7, #4]
 8011328:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d109      	bne.n	8011344 <udp_sendto_if_src+0x28>
 8011330:	4b65      	ldr	r3, [pc, #404]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 8011332:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011336:	4965      	ldr	r1, [pc, #404]	; (80114cc <udp_sendto_if_src+0x1b0>)
 8011338:	4865      	ldr	r0, [pc, #404]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 801133a:	f002 fd63 	bl	8013e04 <iprintf>
 801133e:	f06f 030f 	mvn.w	r3, #15
 8011342:	e0bc      	b.n	80114be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	2b00      	cmp	r3, #0
 8011348:	d109      	bne.n	801135e <udp_sendto_if_src+0x42>
 801134a:	4b5f      	ldr	r3, [pc, #380]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 801134c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011350:	4960      	ldr	r1, [pc, #384]	; (80114d4 <udp_sendto_if_src+0x1b8>)
 8011352:	485f      	ldr	r0, [pc, #380]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 8011354:	f002 fd56 	bl	8013e04 <iprintf>
 8011358:	f06f 030f 	mvn.w	r3, #15
 801135c:	e0af      	b.n	80114be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801135e:	687b      	ldr	r3, [r7, #4]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <udp_sendto_if_src+0x5c>
 8011364:	4b58      	ldr	r3, [pc, #352]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 8011366:	f240 22d3 	movw	r2, #723	; 0x2d3
 801136a:	495b      	ldr	r1, [pc, #364]	; (80114d8 <udp_sendto_if_src+0x1bc>)
 801136c:	4858      	ldr	r0, [pc, #352]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 801136e:	f002 fd49 	bl	8013e04 <iprintf>
 8011372:	f06f 030f 	mvn.w	r3, #15
 8011376:	e0a2      	b.n	80114be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801137a:	2b00      	cmp	r3, #0
 801137c:	d109      	bne.n	8011392 <udp_sendto_if_src+0x76>
 801137e:	4b52      	ldr	r3, [pc, #328]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 8011380:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011384:	4955      	ldr	r1, [pc, #340]	; (80114dc <udp_sendto_if_src+0x1c0>)
 8011386:	4852      	ldr	r0, [pc, #328]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 8011388:	f002 fd3c 	bl	8013e04 <iprintf>
 801138c:	f06f 030f 	mvn.w	r3, #15
 8011390:	e095      	b.n	80114be <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011394:	2b00      	cmp	r3, #0
 8011396:	d109      	bne.n	80113ac <udp_sendto_if_src+0x90>
 8011398:	4b4b      	ldr	r3, [pc, #300]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 801139a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801139e:	4950      	ldr	r1, [pc, #320]	; (80114e0 <udp_sendto_if_src+0x1c4>)
 80113a0:	484b      	ldr	r0, [pc, #300]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 80113a2:	f002 fd2f 	bl	8013e04 <iprintf>
 80113a6:	f06f 030f 	mvn.w	r3, #15
 80113aa:	e088      	b.n	80114be <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	8a5b      	ldrh	r3, [r3, #18]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d10f      	bne.n	80113d4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80113b4:	68f9      	ldr	r1, [r7, #12]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	8a5b      	ldrh	r3, [r3, #18]
 80113ba:	461a      	mov	r2, r3
 80113bc:	68f8      	ldr	r0, [r7, #12]
 80113be:	f000 f893 	bl	80114e8 <udp_bind>
 80113c2:	4603      	mov	r3, r0
 80113c4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80113c6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d002      	beq.n	80113d4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80113ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80113d2:	e074      	b.n	80114be <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	891b      	ldrh	r3, [r3, #8]
 80113d8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80113dc:	4293      	cmp	r3, r2
 80113de:	d902      	bls.n	80113e6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80113e0:	f04f 33ff 	mov.w	r3, #4294967295
 80113e4:	e06b      	b.n	80114be <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80113e6:	2108      	movs	r1, #8
 80113e8:	68b8      	ldr	r0, [r7, #8]
 80113ea:	f7f9 fefb 	bl	800b1e4 <pbuf_add_header>
 80113ee:	4603      	mov	r3, r0
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d015      	beq.n	8011420 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80113f4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80113f8:	2108      	movs	r1, #8
 80113fa:	2022      	movs	r0, #34	; 0x22
 80113fc:	f7f9 fca4 	bl	800ad48 <pbuf_alloc>
 8011400:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011402:	69fb      	ldr	r3, [r7, #28]
 8011404:	2b00      	cmp	r3, #0
 8011406:	d102      	bne.n	801140e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011408:	f04f 33ff 	mov.w	r3, #4294967295
 801140c:	e057      	b.n	80114be <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801140e:	68bb      	ldr	r3, [r7, #8]
 8011410:	891b      	ldrh	r3, [r3, #8]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d006      	beq.n	8011424 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011416:	68b9      	ldr	r1, [r7, #8]
 8011418:	69f8      	ldr	r0, [r7, #28]
 801141a:	f7fa f891 	bl	800b540 <pbuf_chain>
 801141e:	e001      	b.n	8011424 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011420:	68bb      	ldr	r3, [r7, #8]
 8011422:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011424:	69fb      	ldr	r3, [r7, #28]
 8011426:	895b      	ldrh	r3, [r3, #10]
 8011428:	2b07      	cmp	r3, #7
 801142a:	d806      	bhi.n	801143a <udp_sendto_if_src+0x11e>
 801142c:	4b26      	ldr	r3, [pc, #152]	; (80114c8 <udp_sendto_if_src+0x1ac>)
 801142e:	f240 320d 	movw	r2, #781	; 0x30d
 8011432:	492c      	ldr	r1, [pc, #176]	; (80114e4 <udp_sendto_if_src+0x1c8>)
 8011434:	4826      	ldr	r0, [pc, #152]	; (80114d0 <udp_sendto_if_src+0x1b4>)
 8011436:	f002 fce5 	bl	8013e04 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801143a:	69fb      	ldr	r3, [r7, #28]
 801143c:	685b      	ldr	r3, [r3, #4]
 801143e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011440:	68fb      	ldr	r3, [r7, #12]
 8011442:	8a5b      	ldrh	r3, [r3, #18]
 8011444:	4618      	mov	r0, r3
 8011446:	f7f8 fcb0 	bl	8009daa <lwip_htons>
 801144a:	4603      	mov	r3, r0
 801144c:	461a      	mov	r2, r3
 801144e:	697b      	ldr	r3, [r7, #20]
 8011450:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011452:	887b      	ldrh	r3, [r7, #2]
 8011454:	4618      	mov	r0, r3
 8011456:	f7f8 fca8 	bl	8009daa <lwip_htons>
 801145a:	4603      	mov	r3, r0
 801145c:	461a      	mov	r2, r3
 801145e:	697b      	ldr	r3, [r7, #20]
 8011460:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2200      	movs	r2, #0
 8011466:	719a      	strb	r2, [r3, #6]
 8011468:	2200      	movs	r2, #0
 801146a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801146c:	69fb      	ldr	r3, [r7, #28]
 801146e:	891b      	ldrh	r3, [r3, #8]
 8011470:	4618      	mov	r0, r3
 8011472:	f7f8 fc9a 	bl	8009daa <lwip_htons>
 8011476:	4603      	mov	r3, r0
 8011478:	461a      	mov	r2, r3
 801147a:	697b      	ldr	r3, [r7, #20]
 801147c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801147e:	2311      	movs	r3, #17
 8011480:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	7adb      	ldrb	r3, [r3, #11]
 8011486:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	7a9b      	ldrb	r3, [r3, #10]
 801148c:	7cb9      	ldrb	r1, [r7, #18]
 801148e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011490:	9202      	str	r2, [sp, #8]
 8011492:	7cfa      	ldrb	r2, [r7, #19]
 8011494:	9201      	str	r2, [sp, #4]
 8011496:	9300      	str	r3, [sp, #0]
 8011498:	460b      	mov	r3, r1
 801149a:	687a      	ldr	r2, [r7, #4]
 801149c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801149e:	69f8      	ldr	r0, [r7, #28]
 80114a0:	f001 fc6a 	bl	8012d78 <ip4_output_if_src>
 80114a4:	4603      	mov	r3, r0
 80114a6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80114a8:	69fa      	ldr	r2, [r7, #28]
 80114aa:	68bb      	ldr	r3, [r7, #8]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d004      	beq.n	80114ba <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80114b0:	69f8      	ldr	r0, [r7, #28]
 80114b2:	f7f9 ff2d 	bl	800b310 <pbuf_free>
    q = NULL;
 80114b6:	2300      	movs	r3, #0
 80114b8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80114ba:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80114be:	4618      	mov	r0, r3
 80114c0:	3720      	adds	r7, #32
 80114c2:	46bd      	mov	sp, r7
 80114c4:	bd80      	pop	{r7, pc}
 80114c6:	bf00      	nop
 80114c8:	08016e08 	.word	0x08016e08
 80114cc:	08016ff4 	.word	0x08016ff4
 80114d0:	08016e5c 	.word	0x08016e5c
 80114d4:	08017014 	.word	0x08017014
 80114d8:	08017034 	.word	0x08017034
 80114dc:	08017058 	.word	0x08017058
 80114e0:	0801707c 	.word	0x0801707c
 80114e4:	080170a0 	.word	0x080170a0

080114e8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80114e8:	b580      	push	{r7, lr}
 80114ea:	b086      	sub	sp, #24
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	4613      	mov	r3, r2
 80114f4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80114f6:	68bb      	ldr	r3, [r7, #8]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d101      	bne.n	8011500 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80114fc:	4b39      	ldr	r3, [pc, #228]	; (80115e4 <udp_bind+0xfc>)
 80114fe:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2b00      	cmp	r3, #0
 8011504:	d109      	bne.n	801151a <udp_bind+0x32>
 8011506:	4b38      	ldr	r3, [pc, #224]	; (80115e8 <udp_bind+0x100>)
 8011508:	f240 32b7 	movw	r2, #951	; 0x3b7
 801150c:	4937      	ldr	r1, [pc, #220]	; (80115ec <udp_bind+0x104>)
 801150e:	4838      	ldr	r0, [pc, #224]	; (80115f0 <udp_bind+0x108>)
 8011510:	f002 fc78 	bl	8013e04 <iprintf>
 8011514:	f06f 030f 	mvn.w	r3, #15
 8011518:	e060      	b.n	80115dc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801151a:	2300      	movs	r3, #0
 801151c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801151e:	4b35      	ldr	r3, [pc, #212]	; (80115f4 <udp_bind+0x10c>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	617b      	str	r3, [r7, #20]
 8011524:	e009      	b.n	801153a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011526:	68fa      	ldr	r2, [r7, #12]
 8011528:	697b      	ldr	r3, [r7, #20]
 801152a:	429a      	cmp	r2, r3
 801152c:	d102      	bne.n	8011534 <udp_bind+0x4c>
      rebind = 1;
 801152e:	2301      	movs	r3, #1
 8011530:	74fb      	strb	r3, [r7, #19]
      break;
 8011532:	e005      	b.n	8011540 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	617b      	str	r3, [r7, #20]
 801153a:	697b      	ldr	r3, [r7, #20]
 801153c:	2b00      	cmp	r3, #0
 801153e:	d1f2      	bne.n	8011526 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011540:	88fb      	ldrh	r3, [r7, #6]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d109      	bne.n	801155a <udp_bind+0x72>
    port = udp_new_port();
 8011546:	f7ff fc35 	bl	8010db4 <udp_new_port>
 801154a:	4603      	mov	r3, r0
 801154c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801154e:	88fb      	ldrh	r3, [r7, #6]
 8011550:	2b00      	cmp	r3, #0
 8011552:	d12c      	bne.n	80115ae <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011554:	f06f 0307 	mvn.w	r3, #7
 8011558:	e040      	b.n	80115dc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801155a:	4b26      	ldr	r3, [pc, #152]	; (80115f4 <udp_bind+0x10c>)
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	617b      	str	r3, [r7, #20]
 8011560:	e022      	b.n	80115a8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011562:	68fa      	ldr	r2, [r7, #12]
 8011564:	697b      	ldr	r3, [r7, #20]
 8011566:	429a      	cmp	r2, r3
 8011568:	d01b      	beq.n	80115a2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801156a:	697b      	ldr	r3, [r7, #20]
 801156c:	8a5b      	ldrh	r3, [r3, #18]
 801156e:	88fa      	ldrh	r2, [r7, #6]
 8011570:	429a      	cmp	r2, r3
 8011572:	d116      	bne.n	80115a2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	681a      	ldr	r2, [r3, #0]
 8011578:	68bb      	ldr	r3, [r7, #8]
 801157a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801157c:	429a      	cmp	r2, r3
 801157e:	d00d      	beq.n	801159c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	2b00      	cmp	r3, #0
 8011584:	d00a      	beq.n	801159c <udp_bind+0xb4>
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	681b      	ldr	r3, [r3, #0]
 801158a:	2b00      	cmp	r3, #0
 801158c:	d006      	beq.n	801159c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801158e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011590:	2b00      	cmp	r3, #0
 8011592:	d003      	beq.n	801159c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	681b      	ldr	r3, [r3, #0]
 8011598:	2b00      	cmp	r3, #0
 801159a:	d102      	bne.n	80115a2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801159c:	f06f 0307 	mvn.w	r3, #7
 80115a0:	e01c      	b.n	80115dc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80115a2:	697b      	ldr	r3, [r7, #20]
 80115a4:	68db      	ldr	r3, [r3, #12]
 80115a6:	617b      	str	r3, [r7, #20]
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d1d9      	bne.n	8011562 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80115ae:	68bb      	ldr	r3, [r7, #8]
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d002      	beq.n	80115ba <udp_bind+0xd2>
 80115b4:	68bb      	ldr	r3, [r7, #8]
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	e000      	b.n	80115bc <udp_bind+0xd4>
 80115ba:	2300      	movs	r3, #0
 80115bc:	68fa      	ldr	r2, [r7, #12]
 80115be:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80115c0:	68fb      	ldr	r3, [r7, #12]
 80115c2:	88fa      	ldrh	r2, [r7, #6]
 80115c4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80115c6:	7cfb      	ldrb	r3, [r7, #19]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d106      	bne.n	80115da <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80115cc:	4b09      	ldr	r3, [pc, #36]	; (80115f4 <udp_bind+0x10c>)
 80115ce:	681a      	ldr	r2, [r3, #0]
 80115d0:	68fb      	ldr	r3, [r7, #12]
 80115d2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80115d4:	4a07      	ldr	r2, [pc, #28]	; (80115f4 <udp_bind+0x10c>)
 80115d6:	68fb      	ldr	r3, [r7, #12]
 80115d8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80115da:	2300      	movs	r3, #0
}
 80115dc:	4618      	mov	r0, r3
 80115de:	3718      	adds	r7, #24
 80115e0:	46bd      	mov	sp, r7
 80115e2:	bd80      	pop	{r7, pc}
 80115e4:	08017934 	.word	0x08017934
 80115e8:	08016e08 	.word	0x08016e08
 80115ec:	080170d0 	.word	0x080170d0
 80115f0:	08016e5c 	.word	0x08016e5c
 80115f4:	20007218 	.word	0x20007218

080115f8 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80115f8:	b580      	push	{r7, lr}
 80115fa:	b086      	sub	sp, #24
 80115fc:	af00      	add	r7, sp, #0
 80115fe:	60f8      	str	r0, [r7, #12]
 8011600:	60b9      	str	r1, [r7, #8]
 8011602:	4613      	mov	r3, r2
 8011604:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d109      	bne.n	8011620 <udp_connect+0x28>
 801160c:	4b2c      	ldr	r3, [pc, #176]	; (80116c0 <udp_connect+0xc8>)
 801160e:	f240 4235 	movw	r2, #1077	; 0x435
 8011612:	492c      	ldr	r1, [pc, #176]	; (80116c4 <udp_connect+0xcc>)
 8011614:	482c      	ldr	r0, [pc, #176]	; (80116c8 <udp_connect+0xd0>)
 8011616:	f002 fbf5 	bl	8013e04 <iprintf>
 801161a:	f06f 030f 	mvn.w	r3, #15
 801161e:	e04b      	b.n	80116b8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	2b00      	cmp	r3, #0
 8011624:	d109      	bne.n	801163a <udp_connect+0x42>
 8011626:	4b26      	ldr	r3, [pc, #152]	; (80116c0 <udp_connect+0xc8>)
 8011628:	f240 4236 	movw	r2, #1078	; 0x436
 801162c:	4927      	ldr	r1, [pc, #156]	; (80116cc <udp_connect+0xd4>)
 801162e:	4826      	ldr	r0, [pc, #152]	; (80116c8 <udp_connect+0xd0>)
 8011630:	f002 fbe8 	bl	8013e04 <iprintf>
 8011634:	f06f 030f 	mvn.w	r3, #15
 8011638:	e03e      	b.n	80116b8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	8a5b      	ldrh	r3, [r3, #18]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d10f      	bne.n	8011662 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011642:	68f9      	ldr	r1, [r7, #12]
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	8a5b      	ldrh	r3, [r3, #18]
 8011648:	461a      	mov	r2, r3
 801164a:	68f8      	ldr	r0, [r7, #12]
 801164c:	f7ff ff4c 	bl	80114e8 <udp_bind>
 8011650:	4603      	mov	r3, r0
 8011652:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011654:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d002      	beq.n	8011662 <udp_connect+0x6a>
      return err;
 801165c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011660:	e02a      	b.n	80116b8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011662:	68bb      	ldr	r3, [r7, #8]
 8011664:	2b00      	cmp	r3, #0
 8011666:	d002      	beq.n	801166e <udp_connect+0x76>
 8011668:	68bb      	ldr	r3, [r7, #8]
 801166a:	681b      	ldr	r3, [r3, #0]
 801166c:	e000      	b.n	8011670 <udp_connect+0x78>
 801166e:	2300      	movs	r3, #0
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011674:	68fb      	ldr	r3, [r7, #12]
 8011676:	88fa      	ldrh	r2, [r7, #6]
 8011678:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	7c1b      	ldrb	r3, [r3, #16]
 801167e:	f043 0304 	orr.w	r3, r3, #4
 8011682:	b2da      	uxtb	r2, r3
 8011684:	68fb      	ldr	r3, [r7, #12]
 8011686:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011688:	4b11      	ldr	r3, [pc, #68]	; (80116d0 <udp_connect+0xd8>)
 801168a:	681b      	ldr	r3, [r3, #0]
 801168c:	617b      	str	r3, [r7, #20]
 801168e:	e008      	b.n	80116a2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011690:	68fa      	ldr	r2, [r7, #12]
 8011692:	697b      	ldr	r3, [r7, #20]
 8011694:	429a      	cmp	r2, r3
 8011696:	d101      	bne.n	801169c <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011698:	2300      	movs	r3, #0
 801169a:	e00d      	b.n	80116b8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801169c:	697b      	ldr	r3, [r7, #20]
 801169e:	68db      	ldr	r3, [r3, #12]
 80116a0:	617b      	str	r3, [r7, #20]
 80116a2:	697b      	ldr	r3, [r7, #20]
 80116a4:	2b00      	cmp	r3, #0
 80116a6:	d1f3      	bne.n	8011690 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80116a8:	4b09      	ldr	r3, [pc, #36]	; (80116d0 <udp_connect+0xd8>)
 80116aa:	681a      	ldr	r2, [r3, #0]
 80116ac:	68fb      	ldr	r3, [r7, #12]
 80116ae:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80116b0:	4a07      	ldr	r2, [pc, #28]	; (80116d0 <udp_connect+0xd8>)
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3718      	adds	r7, #24
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}
 80116c0:	08016e08 	.word	0x08016e08
 80116c4:	080170e8 	.word	0x080170e8
 80116c8:	08016e5c 	.word	0x08016e5c
 80116cc:	08017104 	.word	0x08017104
 80116d0:	20007218 	.word	0x20007218

080116d4 <udp_disconnect>:
 *
 * @param pcb the udp pcb to disconnect.
 */
void
udp_disconnect(struct udp_pcb *pcb)
{
 80116d4:	b580      	push	{r7, lr}
 80116d6:	b082      	sub	sp, #8
 80116d8:	af00      	add	r7, sp, #0
 80116da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_disconnect: invalid pcb", pcb != NULL, return);
 80116dc:	687b      	ldr	r3, [r7, #4]
 80116de:	2b00      	cmp	r3, #0
 80116e0:	d107      	bne.n	80116f2 <udp_disconnect+0x1e>
 80116e2:	4b0d      	ldr	r3, [pc, #52]	; (8011718 <udp_disconnect+0x44>)
 80116e4:	f240 426a 	movw	r2, #1130	; 0x46a
 80116e8:	490c      	ldr	r1, [pc, #48]	; (801171c <udp_disconnect+0x48>)
 80116ea:	480d      	ldr	r0, [pc, #52]	; (8011720 <udp_disconnect+0x4c>)
 80116ec:	f002 fb8a 	bl	8013e04 <iprintf>
 80116f0:	e00f      	b.n	8011712 <udp_disconnect+0x3e>
#if LWIP_IPV4 && LWIP_IPV6
  if (IP_IS_ANY_TYPE_VAL(pcb->local_ip)) {
    ip_addr_copy(pcb->remote_ip, *IP_ANY_TYPE);
  } else {
#endif
    ip_addr_set_any(IP_IS_V6_VAL(pcb->remote_ip), &pcb->remote_ip);
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	2200      	movs	r2, #0
 80116f6:	605a      	str	r2, [r3, #4]
#if LWIP_IPV4 && LWIP_IPV6
  }
#endif
  pcb->remote_port = 0;
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	2200      	movs	r2, #0
 80116fc:	829a      	strh	r2, [r3, #20]
  pcb->netif_idx = NETIF_NO_INDEX;
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	2200      	movs	r2, #0
 8011702:	721a      	strb	r2, [r3, #8]
  /* mark PCB as unconnected */
  udp_clear_flags(pcb, UDP_FLAGS_CONNECTED);
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	7c1b      	ldrb	r3, [r3, #16]
 8011708:	f023 0304 	bic.w	r3, r3, #4
 801170c:	b2da      	uxtb	r2, r3
 801170e:	687b      	ldr	r3, [r7, #4]
 8011710:	741a      	strb	r2, [r3, #16]
}
 8011712:	3708      	adds	r7, #8
 8011714:	46bd      	mov	sp, r7
 8011716:	bd80      	pop	{r7, pc}
 8011718:	08016e08 	.word	0x08016e08
 801171c:	08017120 	.word	0x08017120
 8011720:	08016e5c 	.word	0x08016e5c

08011724 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011724:	b580      	push	{r7, lr}
 8011726:	b084      	sub	sp, #16
 8011728:	af00      	add	r7, sp, #0
 801172a:	60f8      	str	r0, [r7, #12]
 801172c:	60b9      	str	r1, [r7, #8]
 801172e:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d107      	bne.n	8011746 <udp_recv+0x22>
 8011736:	4b08      	ldr	r3, [pc, #32]	; (8011758 <udp_recv+0x34>)
 8011738:	f240 428a 	movw	r2, #1162	; 0x48a
 801173c:	4907      	ldr	r1, [pc, #28]	; (801175c <udp_recv+0x38>)
 801173e:	4808      	ldr	r0, [pc, #32]	; (8011760 <udp_recv+0x3c>)
 8011740:	f002 fb60 	bl	8013e04 <iprintf>
 8011744:	e005      	b.n	8011752 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	68ba      	ldr	r2, [r7, #8]
 801174a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801174c:	68fb      	ldr	r3, [r7, #12]
 801174e:	687a      	ldr	r2, [r7, #4]
 8011750:	61da      	str	r2, [r3, #28]
}
 8011752:	3710      	adds	r7, #16
 8011754:	46bd      	mov	sp, r7
 8011756:	bd80      	pop	{r7, pc}
 8011758:	08016e08 	.word	0x08016e08
 801175c:	0801713c 	.word	0x0801713c
 8011760:	08016e5c 	.word	0x08016e5c

08011764 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011764:	b580      	push	{r7, lr}
 8011766:	b082      	sub	sp, #8
 8011768:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801176a:	2000      	movs	r0, #0
 801176c:	f7f8 ff72 	bl	800a654 <memp_malloc>
 8011770:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	2b00      	cmp	r3, #0
 8011776:	d007      	beq.n	8011788 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011778:	2220      	movs	r2, #32
 801177a:	2100      	movs	r1, #0
 801177c:	6878      	ldr	r0, [r7, #4]
 801177e:	f002 fb39 	bl	8013df4 <memset>
    pcb->ttl = UDP_TTL;
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	22ff      	movs	r2, #255	; 0xff
 8011786:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011788:	687b      	ldr	r3, [r7, #4]
}
 801178a:	4618      	mov	r0, r3
 801178c:	3708      	adds	r7, #8
 801178e:	46bd      	mov	sp, r7
 8011790:	bd80      	pop	{r7, pc}
	...

08011794 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011794:	b480      	push	{r7}
 8011796:	b085      	sub	sp, #20
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
 801179c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801179e:	687b      	ldr	r3, [r7, #4]
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d01e      	beq.n	80117e2 <udp_netif_ip_addr_changed+0x4e>
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d01a      	beq.n	80117e2 <udp_netif_ip_addr_changed+0x4e>
 80117ac:	683b      	ldr	r3, [r7, #0]
 80117ae:	2b00      	cmp	r3, #0
 80117b0:	d017      	beq.n	80117e2 <udp_netif_ip_addr_changed+0x4e>
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	681b      	ldr	r3, [r3, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	d013      	beq.n	80117e2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117ba:	4b0d      	ldr	r3, [pc, #52]	; (80117f0 <udp_netif_ip_addr_changed+0x5c>)
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	60fb      	str	r3, [r7, #12]
 80117c0:	e00c      	b.n	80117dc <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80117c2:	68fb      	ldr	r3, [r7, #12]
 80117c4:	681a      	ldr	r2, [r3, #0]
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	681b      	ldr	r3, [r3, #0]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d103      	bne.n	80117d6 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80117ce:	683b      	ldr	r3, [r7, #0]
 80117d0:	681a      	ldr	r2, [r3, #0]
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80117d6:	68fb      	ldr	r3, [r7, #12]
 80117d8:	68db      	ldr	r3, [r3, #12]
 80117da:	60fb      	str	r3, [r7, #12]
 80117dc:	68fb      	ldr	r3, [r7, #12]
 80117de:	2b00      	cmp	r3, #0
 80117e0:	d1ef      	bne.n	80117c2 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80117e2:	bf00      	nop
 80117e4:	3714      	adds	r7, #20
 80117e6:	46bd      	mov	sp, r7
 80117e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ec:	4770      	bx	lr
 80117ee:	bf00      	nop
 80117f0:	20007218 	.word	0x20007218

080117f4 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80117f4:	b580      	push	{r7, lr}
 80117f6:	b082      	sub	sp, #8
 80117f8:	af00      	add	r7, sp, #0
 80117fa:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 80117fc:	4915      	ldr	r1, [pc, #84]	; (8011854 <etharp_free_entry+0x60>)
 80117fe:	687a      	ldr	r2, [r7, #4]
 8011800:	4613      	mov	r3, r2
 8011802:	005b      	lsls	r3, r3, #1
 8011804:	4413      	add	r3, r2
 8011806:	00db      	lsls	r3, r3, #3
 8011808:	440b      	add	r3, r1
 801180a:	681b      	ldr	r3, [r3, #0]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d013      	beq.n	8011838 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011810:	4910      	ldr	r1, [pc, #64]	; (8011854 <etharp_free_entry+0x60>)
 8011812:	687a      	ldr	r2, [r7, #4]
 8011814:	4613      	mov	r3, r2
 8011816:	005b      	lsls	r3, r3, #1
 8011818:	4413      	add	r3, r2
 801181a:	00db      	lsls	r3, r3, #3
 801181c:	440b      	add	r3, r1
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	4618      	mov	r0, r3
 8011822:	f7f9 fd75 	bl	800b310 <pbuf_free>
    arp_table[i].q = NULL;
 8011826:	490b      	ldr	r1, [pc, #44]	; (8011854 <etharp_free_entry+0x60>)
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	4613      	mov	r3, r2
 801182c:	005b      	lsls	r3, r3, #1
 801182e:	4413      	add	r3, r2
 8011830:	00db      	lsls	r3, r3, #3
 8011832:	440b      	add	r3, r1
 8011834:	2200      	movs	r2, #0
 8011836:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011838:	4906      	ldr	r1, [pc, #24]	; (8011854 <etharp_free_entry+0x60>)
 801183a:	687a      	ldr	r2, [r7, #4]
 801183c:	4613      	mov	r3, r2
 801183e:	005b      	lsls	r3, r3, #1
 8011840:	4413      	add	r3, r2
 8011842:	00db      	lsls	r3, r3, #3
 8011844:	440b      	add	r3, r1
 8011846:	3314      	adds	r3, #20
 8011848:	2200      	movs	r2, #0
 801184a:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801184c:	bf00      	nop
 801184e:	3708      	adds	r7, #8
 8011850:	46bd      	mov	sp, r7
 8011852:	bd80      	pop	{r7, pc}
 8011854:	20000120 	.word	0x20000120

08011858 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b082      	sub	sp, #8
 801185c:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801185e:	2300      	movs	r3, #0
 8011860:	607b      	str	r3, [r7, #4]
 8011862:	e096      	b.n	8011992 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011864:	494f      	ldr	r1, [pc, #316]	; (80119a4 <etharp_tmr+0x14c>)
 8011866:	687a      	ldr	r2, [r7, #4]
 8011868:	4613      	mov	r3, r2
 801186a:	005b      	lsls	r3, r3, #1
 801186c:	4413      	add	r3, r2
 801186e:	00db      	lsls	r3, r3, #3
 8011870:	440b      	add	r3, r1
 8011872:	3314      	adds	r3, #20
 8011874:	781b      	ldrb	r3, [r3, #0]
 8011876:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011878:	78fb      	ldrb	r3, [r7, #3]
 801187a:	2b00      	cmp	r3, #0
 801187c:	f000 8086 	beq.w	801198c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011880:	4948      	ldr	r1, [pc, #288]	; (80119a4 <etharp_tmr+0x14c>)
 8011882:	687a      	ldr	r2, [r7, #4]
 8011884:	4613      	mov	r3, r2
 8011886:	005b      	lsls	r3, r3, #1
 8011888:	4413      	add	r3, r2
 801188a:	00db      	lsls	r3, r3, #3
 801188c:	440b      	add	r3, r1
 801188e:	3312      	adds	r3, #18
 8011890:	881b      	ldrh	r3, [r3, #0]
 8011892:	3301      	adds	r3, #1
 8011894:	b298      	uxth	r0, r3
 8011896:	4943      	ldr	r1, [pc, #268]	; (80119a4 <etharp_tmr+0x14c>)
 8011898:	687a      	ldr	r2, [r7, #4]
 801189a:	4613      	mov	r3, r2
 801189c:	005b      	lsls	r3, r3, #1
 801189e:	4413      	add	r3, r2
 80118a0:	00db      	lsls	r3, r3, #3
 80118a2:	440b      	add	r3, r1
 80118a4:	3312      	adds	r3, #18
 80118a6:	4602      	mov	r2, r0
 80118a8:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118aa:	493e      	ldr	r1, [pc, #248]	; (80119a4 <etharp_tmr+0x14c>)
 80118ac:	687a      	ldr	r2, [r7, #4]
 80118ae:	4613      	mov	r3, r2
 80118b0:	005b      	lsls	r3, r3, #1
 80118b2:	4413      	add	r3, r2
 80118b4:	00db      	lsls	r3, r3, #3
 80118b6:	440b      	add	r3, r1
 80118b8:	3312      	adds	r3, #18
 80118ba:	881b      	ldrh	r3, [r3, #0]
 80118bc:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80118c0:	d215      	bcs.n	80118ee <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118c2:	4938      	ldr	r1, [pc, #224]	; (80119a4 <etharp_tmr+0x14c>)
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	4613      	mov	r3, r2
 80118c8:	005b      	lsls	r3, r3, #1
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	440b      	add	r3, r1
 80118d0:	3314      	adds	r3, #20
 80118d2:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80118d4:	2b01      	cmp	r3, #1
 80118d6:	d10e      	bne.n	80118f6 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 80118d8:	4932      	ldr	r1, [pc, #200]	; (80119a4 <etharp_tmr+0x14c>)
 80118da:	687a      	ldr	r2, [r7, #4]
 80118dc:	4613      	mov	r3, r2
 80118de:	005b      	lsls	r3, r3, #1
 80118e0:	4413      	add	r3, r2
 80118e2:	00db      	lsls	r3, r3, #3
 80118e4:	440b      	add	r3, r1
 80118e6:	3312      	adds	r3, #18
 80118e8:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80118ea:	2b04      	cmp	r3, #4
 80118ec:	d903      	bls.n	80118f6 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 80118ee:	6878      	ldr	r0, [r7, #4]
 80118f0:	f7ff ff80 	bl	80117f4 <etharp_free_entry>
 80118f4:	e04a      	b.n	801198c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 80118f6:	492b      	ldr	r1, [pc, #172]	; (80119a4 <etharp_tmr+0x14c>)
 80118f8:	687a      	ldr	r2, [r7, #4]
 80118fa:	4613      	mov	r3, r2
 80118fc:	005b      	lsls	r3, r3, #1
 80118fe:	4413      	add	r3, r2
 8011900:	00db      	lsls	r3, r3, #3
 8011902:	440b      	add	r3, r1
 8011904:	3314      	adds	r3, #20
 8011906:	781b      	ldrb	r3, [r3, #0]
 8011908:	2b03      	cmp	r3, #3
 801190a:	d10a      	bne.n	8011922 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801190c:	4925      	ldr	r1, [pc, #148]	; (80119a4 <etharp_tmr+0x14c>)
 801190e:	687a      	ldr	r2, [r7, #4]
 8011910:	4613      	mov	r3, r2
 8011912:	005b      	lsls	r3, r3, #1
 8011914:	4413      	add	r3, r2
 8011916:	00db      	lsls	r3, r3, #3
 8011918:	440b      	add	r3, r1
 801191a:	3314      	adds	r3, #20
 801191c:	2204      	movs	r2, #4
 801191e:	701a      	strb	r2, [r3, #0]
 8011920:	e034      	b.n	801198c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011922:	4920      	ldr	r1, [pc, #128]	; (80119a4 <etharp_tmr+0x14c>)
 8011924:	687a      	ldr	r2, [r7, #4]
 8011926:	4613      	mov	r3, r2
 8011928:	005b      	lsls	r3, r3, #1
 801192a:	4413      	add	r3, r2
 801192c:	00db      	lsls	r3, r3, #3
 801192e:	440b      	add	r3, r1
 8011930:	3314      	adds	r3, #20
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b04      	cmp	r3, #4
 8011936:	d10a      	bne.n	801194e <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011938:	491a      	ldr	r1, [pc, #104]	; (80119a4 <etharp_tmr+0x14c>)
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	4613      	mov	r3, r2
 801193e:	005b      	lsls	r3, r3, #1
 8011940:	4413      	add	r3, r2
 8011942:	00db      	lsls	r3, r3, #3
 8011944:	440b      	add	r3, r1
 8011946:	3314      	adds	r3, #20
 8011948:	2202      	movs	r2, #2
 801194a:	701a      	strb	r2, [r3, #0]
 801194c:	e01e      	b.n	801198c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801194e:	4915      	ldr	r1, [pc, #84]	; (80119a4 <etharp_tmr+0x14c>)
 8011950:	687a      	ldr	r2, [r7, #4]
 8011952:	4613      	mov	r3, r2
 8011954:	005b      	lsls	r3, r3, #1
 8011956:	4413      	add	r3, r2
 8011958:	00db      	lsls	r3, r3, #3
 801195a:	440b      	add	r3, r1
 801195c:	3314      	adds	r3, #20
 801195e:	781b      	ldrb	r3, [r3, #0]
 8011960:	2b01      	cmp	r3, #1
 8011962:	d113      	bne.n	801198c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011964:	490f      	ldr	r1, [pc, #60]	; (80119a4 <etharp_tmr+0x14c>)
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	4613      	mov	r3, r2
 801196a:	005b      	lsls	r3, r3, #1
 801196c:	4413      	add	r3, r2
 801196e:	00db      	lsls	r3, r3, #3
 8011970:	440b      	add	r3, r1
 8011972:	3308      	adds	r3, #8
 8011974:	6818      	ldr	r0, [r3, #0]
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	4613      	mov	r3, r2
 801197a:	005b      	lsls	r3, r3, #1
 801197c:	4413      	add	r3, r2
 801197e:	00db      	lsls	r3, r3, #3
 8011980:	4a08      	ldr	r2, [pc, #32]	; (80119a4 <etharp_tmr+0x14c>)
 8011982:	4413      	add	r3, r2
 8011984:	3304      	adds	r3, #4
 8011986:	4619      	mov	r1, r3
 8011988:	f000 fe6e 	bl	8012668 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801198c:	687b      	ldr	r3, [r7, #4]
 801198e:	3301      	adds	r3, #1
 8011990:	607b      	str	r3, [r7, #4]
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	2b09      	cmp	r3, #9
 8011996:	f77f af65 	ble.w	8011864 <etharp_tmr+0xc>
      }
    }
  }
}
 801199a:	bf00      	nop
 801199c:	bf00      	nop
 801199e:	3708      	adds	r7, #8
 80119a0:	46bd      	mov	sp, r7
 80119a2:	bd80      	pop	{r7, pc}
 80119a4:	20000120 	.word	0x20000120

080119a8 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80119a8:	b580      	push	{r7, lr}
 80119aa:	b08a      	sub	sp, #40	; 0x28
 80119ac:	af00      	add	r7, sp, #0
 80119ae:	60f8      	str	r0, [r7, #12]
 80119b0:	460b      	mov	r3, r1
 80119b2:	607a      	str	r2, [r7, #4]
 80119b4:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80119b6:	230a      	movs	r3, #10
 80119b8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80119ba:	230a      	movs	r3, #10
 80119bc:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80119be:	230a      	movs	r3, #10
 80119c0:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80119c2:	2300      	movs	r3, #0
 80119c4:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80119c6:	230a      	movs	r3, #10
 80119c8:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80119ca:	2300      	movs	r3, #0
 80119cc:	83bb      	strh	r3, [r7, #28]
 80119ce:	2300      	movs	r3, #0
 80119d0:	837b      	strh	r3, [r7, #26]
 80119d2:	2300      	movs	r3, #0
 80119d4:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80119d6:	2300      	movs	r3, #0
 80119d8:	843b      	strh	r3, [r7, #32]
 80119da:	e0ae      	b.n	8011b3a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80119dc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80119e0:	49a6      	ldr	r1, [pc, #664]	; (8011c7c <etharp_find_entry+0x2d4>)
 80119e2:	4613      	mov	r3, r2
 80119e4:	005b      	lsls	r3, r3, #1
 80119e6:	4413      	add	r3, r2
 80119e8:	00db      	lsls	r3, r3, #3
 80119ea:	440b      	add	r3, r1
 80119ec:	3314      	adds	r3, #20
 80119ee:	781b      	ldrb	r3, [r3, #0]
 80119f0:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80119f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80119f6:	2b0a      	cmp	r3, #10
 80119f8:	d105      	bne.n	8011a06 <etharp_find_entry+0x5e>
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d102      	bne.n	8011a06 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011a00:	8c3b      	ldrh	r3, [r7, #32]
 8011a02:	847b      	strh	r3, [r7, #34]	; 0x22
 8011a04:	e095      	b.n	8011b32 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011a06:	7dfb      	ldrb	r3, [r7, #23]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	f000 8092 	beq.w	8011b32 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011a0e:	7dfb      	ldrb	r3, [r7, #23]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d009      	beq.n	8011a28 <etharp_find_entry+0x80>
 8011a14:	7dfb      	ldrb	r3, [r7, #23]
 8011a16:	2b01      	cmp	r3, #1
 8011a18:	d806      	bhi.n	8011a28 <etharp_find_entry+0x80>
 8011a1a:	4b99      	ldr	r3, [pc, #612]	; (8011c80 <etharp_find_entry+0x2d8>)
 8011a1c:	f240 1223 	movw	r2, #291	; 0x123
 8011a20:	4998      	ldr	r1, [pc, #608]	; (8011c84 <etharp_find_entry+0x2dc>)
 8011a22:	4899      	ldr	r0, [pc, #612]	; (8011c88 <etharp_find_entry+0x2e0>)
 8011a24:	f002 f9ee 	bl	8013e04 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011a28:	68fb      	ldr	r3, [r7, #12]
 8011a2a:	2b00      	cmp	r3, #0
 8011a2c:	d020      	beq.n	8011a70 <etharp_find_entry+0xc8>
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	6819      	ldr	r1, [r3, #0]
 8011a32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a36:	4891      	ldr	r0, [pc, #580]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011a38:	4613      	mov	r3, r2
 8011a3a:	005b      	lsls	r3, r3, #1
 8011a3c:	4413      	add	r3, r2
 8011a3e:	00db      	lsls	r3, r3, #3
 8011a40:	4403      	add	r3, r0
 8011a42:	3304      	adds	r3, #4
 8011a44:	681b      	ldr	r3, [r3, #0]
 8011a46:	4299      	cmp	r1, r3
 8011a48:	d112      	bne.n	8011a70 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00c      	beq.n	8011a6a <etharp_find_entry+0xc2>
 8011a50:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a54:	4989      	ldr	r1, [pc, #548]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011a56:	4613      	mov	r3, r2
 8011a58:	005b      	lsls	r3, r3, #1
 8011a5a:	4413      	add	r3, r2
 8011a5c:	00db      	lsls	r3, r3, #3
 8011a5e:	440b      	add	r3, r1
 8011a60:	3308      	adds	r3, #8
 8011a62:	681b      	ldr	r3, [r3, #0]
 8011a64:	687a      	ldr	r2, [r7, #4]
 8011a66:	429a      	cmp	r2, r3
 8011a68:	d102      	bne.n	8011a70 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011a6a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011a6e:	e100      	b.n	8011c72 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011a70:	7dfb      	ldrb	r3, [r7, #23]
 8011a72:	2b01      	cmp	r3, #1
 8011a74:	d140      	bne.n	8011af8 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011a76:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a7a:	4980      	ldr	r1, [pc, #512]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	005b      	lsls	r3, r3, #1
 8011a80:	4413      	add	r3, r2
 8011a82:	00db      	lsls	r3, r3, #3
 8011a84:	440b      	add	r3, r1
 8011a86:	681b      	ldr	r3, [r3, #0]
 8011a88:	2b00      	cmp	r3, #0
 8011a8a:	d01a      	beq.n	8011ac2 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011a8c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011a90:	497a      	ldr	r1, [pc, #488]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011a92:	4613      	mov	r3, r2
 8011a94:	005b      	lsls	r3, r3, #1
 8011a96:	4413      	add	r3, r2
 8011a98:	00db      	lsls	r3, r3, #3
 8011a9a:	440b      	add	r3, r1
 8011a9c:	3312      	adds	r3, #18
 8011a9e:	881b      	ldrh	r3, [r3, #0]
 8011aa0:	8bba      	ldrh	r2, [r7, #28]
 8011aa2:	429a      	cmp	r2, r3
 8011aa4:	d845      	bhi.n	8011b32 <etharp_find_entry+0x18a>
            old_queue = i;
 8011aa6:	8c3b      	ldrh	r3, [r7, #32]
 8011aa8:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011aaa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011aae:	4973      	ldr	r1, [pc, #460]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011ab0:	4613      	mov	r3, r2
 8011ab2:	005b      	lsls	r3, r3, #1
 8011ab4:	4413      	add	r3, r2
 8011ab6:	00db      	lsls	r3, r3, #3
 8011ab8:	440b      	add	r3, r1
 8011aba:	3312      	adds	r3, #18
 8011abc:	881b      	ldrh	r3, [r3, #0]
 8011abe:	83bb      	strh	r3, [r7, #28]
 8011ac0:	e037      	b.n	8011b32 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011ac2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ac6:	496d      	ldr	r1, [pc, #436]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011ac8:	4613      	mov	r3, r2
 8011aca:	005b      	lsls	r3, r3, #1
 8011acc:	4413      	add	r3, r2
 8011ace:	00db      	lsls	r3, r3, #3
 8011ad0:	440b      	add	r3, r1
 8011ad2:	3312      	adds	r3, #18
 8011ad4:	881b      	ldrh	r3, [r3, #0]
 8011ad6:	8b7a      	ldrh	r2, [r7, #26]
 8011ad8:	429a      	cmp	r2, r3
 8011ada:	d82a      	bhi.n	8011b32 <etharp_find_entry+0x18a>
            old_pending = i;
 8011adc:	8c3b      	ldrh	r3, [r7, #32]
 8011ade:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011ae0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ae4:	4965      	ldr	r1, [pc, #404]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011ae6:	4613      	mov	r3, r2
 8011ae8:	005b      	lsls	r3, r3, #1
 8011aea:	4413      	add	r3, r2
 8011aec:	00db      	lsls	r3, r3, #3
 8011aee:	440b      	add	r3, r1
 8011af0:	3312      	adds	r3, #18
 8011af2:	881b      	ldrh	r3, [r3, #0]
 8011af4:	837b      	strh	r3, [r7, #26]
 8011af6:	e01c      	b.n	8011b32 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011af8:	7dfb      	ldrb	r3, [r7, #23]
 8011afa:	2b01      	cmp	r3, #1
 8011afc:	d919      	bls.n	8011b32 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011afe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b02:	495e      	ldr	r1, [pc, #376]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011b04:	4613      	mov	r3, r2
 8011b06:	005b      	lsls	r3, r3, #1
 8011b08:	4413      	add	r3, r2
 8011b0a:	00db      	lsls	r3, r3, #3
 8011b0c:	440b      	add	r3, r1
 8011b0e:	3312      	adds	r3, #18
 8011b10:	881b      	ldrh	r3, [r3, #0]
 8011b12:	8b3a      	ldrh	r2, [r7, #24]
 8011b14:	429a      	cmp	r2, r3
 8011b16:	d80c      	bhi.n	8011b32 <etharp_find_entry+0x18a>
            old_stable = i;
 8011b18:	8c3b      	ldrh	r3, [r7, #32]
 8011b1a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011b1c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b20:	4956      	ldr	r1, [pc, #344]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011b22:	4613      	mov	r3, r2
 8011b24:	005b      	lsls	r3, r3, #1
 8011b26:	4413      	add	r3, r2
 8011b28:	00db      	lsls	r3, r3, #3
 8011b2a:	440b      	add	r3, r1
 8011b2c:	3312      	adds	r3, #18
 8011b2e:	881b      	ldrh	r3, [r3, #0]
 8011b30:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011b32:	8c3b      	ldrh	r3, [r7, #32]
 8011b34:	3301      	adds	r3, #1
 8011b36:	b29b      	uxth	r3, r3
 8011b38:	843b      	strh	r3, [r7, #32]
 8011b3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011b3e:	2b09      	cmp	r3, #9
 8011b40:	f77f af4c 	ble.w	80119dc <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011b44:	7afb      	ldrb	r3, [r7, #11]
 8011b46:	f003 0302 	and.w	r3, r3, #2
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d108      	bne.n	8011b60 <etharp_find_entry+0x1b8>
 8011b4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b52:	2b0a      	cmp	r3, #10
 8011b54:	d107      	bne.n	8011b66 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011b56:	7afb      	ldrb	r3, [r7, #11]
 8011b58:	f003 0301 	and.w	r3, r3, #1
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d102      	bne.n	8011b66 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011b60:	f04f 33ff 	mov.w	r3, #4294967295
 8011b64:	e085      	b.n	8011c72 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011b66:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011b6a:	2b09      	cmp	r3, #9
 8011b6c:	dc02      	bgt.n	8011b74 <etharp_find_entry+0x1cc>
    i = empty;
 8011b6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011b70:	843b      	strh	r3, [r7, #32]
 8011b72:	e039      	b.n	8011be8 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011b74:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011b78:	2b09      	cmp	r3, #9
 8011b7a:	dc14      	bgt.n	8011ba6 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011b7c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011b7e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011b80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011b84:	493d      	ldr	r1, [pc, #244]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011b86:	4613      	mov	r3, r2
 8011b88:	005b      	lsls	r3, r3, #1
 8011b8a:	4413      	add	r3, r2
 8011b8c:	00db      	lsls	r3, r3, #3
 8011b8e:	440b      	add	r3, r1
 8011b90:	681b      	ldr	r3, [r3, #0]
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d018      	beq.n	8011bc8 <etharp_find_entry+0x220>
 8011b96:	4b3a      	ldr	r3, [pc, #232]	; (8011c80 <etharp_find_entry+0x2d8>)
 8011b98:	f240 126d 	movw	r2, #365	; 0x16d
 8011b9c:	493b      	ldr	r1, [pc, #236]	; (8011c8c <etharp_find_entry+0x2e4>)
 8011b9e:	483a      	ldr	r0, [pc, #232]	; (8011c88 <etharp_find_entry+0x2e0>)
 8011ba0:	f002 f930 	bl	8013e04 <iprintf>
 8011ba4:	e010      	b.n	8011bc8 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011ba6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011baa:	2b09      	cmp	r3, #9
 8011bac:	dc02      	bgt.n	8011bb4 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011bae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011bb0:	843b      	strh	r3, [r7, #32]
 8011bb2:	e009      	b.n	8011bc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011bb4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011bb8:	2b09      	cmp	r3, #9
 8011bba:	dc02      	bgt.n	8011bc2 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011bbc:	8bfb      	ldrh	r3, [r7, #30]
 8011bbe:	843b      	strh	r3, [r7, #32]
 8011bc0:	e002      	b.n	8011bc8 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc6:	e054      	b.n	8011c72 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011bc8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bcc:	2b09      	cmp	r3, #9
 8011bce:	dd06      	ble.n	8011bde <etharp_find_entry+0x236>
 8011bd0:	4b2b      	ldr	r3, [pc, #172]	; (8011c80 <etharp_find_entry+0x2d8>)
 8011bd2:	f240 127f 	movw	r2, #383	; 0x17f
 8011bd6:	492e      	ldr	r1, [pc, #184]	; (8011c90 <etharp_find_entry+0x2e8>)
 8011bd8:	482b      	ldr	r0, [pc, #172]	; (8011c88 <etharp_find_entry+0x2e0>)
 8011bda:	f002 f913 	bl	8013e04 <iprintf>
    etharp_free_entry(i);
 8011bde:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011be2:	4618      	mov	r0, r3
 8011be4:	f7ff fe06 	bl	80117f4 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011be8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011bec:	2b09      	cmp	r3, #9
 8011bee:	dd06      	ble.n	8011bfe <etharp_find_entry+0x256>
 8011bf0:	4b23      	ldr	r3, [pc, #140]	; (8011c80 <etharp_find_entry+0x2d8>)
 8011bf2:	f240 1283 	movw	r2, #387	; 0x183
 8011bf6:	4926      	ldr	r1, [pc, #152]	; (8011c90 <etharp_find_entry+0x2e8>)
 8011bf8:	4823      	ldr	r0, [pc, #140]	; (8011c88 <etharp_find_entry+0x2e0>)
 8011bfa:	f002 f903 	bl	8013e04 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011bfe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c02:	491e      	ldr	r1, [pc, #120]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011c04:	4613      	mov	r3, r2
 8011c06:	005b      	lsls	r3, r3, #1
 8011c08:	4413      	add	r3, r2
 8011c0a:	00db      	lsls	r3, r3, #3
 8011c0c:	440b      	add	r3, r1
 8011c0e:	3314      	adds	r3, #20
 8011c10:	781b      	ldrb	r3, [r3, #0]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d006      	beq.n	8011c24 <etharp_find_entry+0x27c>
 8011c16:	4b1a      	ldr	r3, [pc, #104]	; (8011c80 <etharp_find_entry+0x2d8>)
 8011c18:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011c1c:	491d      	ldr	r1, [pc, #116]	; (8011c94 <etharp_find_entry+0x2ec>)
 8011c1e:	481a      	ldr	r0, [pc, #104]	; (8011c88 <etharp_find_entry+0x2e0>)
 8011c20:	f002 f8f0 	bl	8013e04 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011c24:	68fb      	ldr	r3, [r7, #12]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d00b      	beq.n	8011c42 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011c2a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	6819      	ldr	r1, [r3, #0]
 8011c32:	4812      	ldr	r0, [pc, #72]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011c34:	4613      	mov	r3, r2
 8011c36:	005b      	lsls	r3, r3, #1
 8011c38:	4413      	add	r3, r2
 8011c3a:	00db      	lsls	r3, r3, #3
 8011c3c:	4403      	add	r3, r0
 8011c3e:	3304      	adds	r3, #4
 8011c40:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011c42:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c46:	490d      	ldr	r1, [pc, #52]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011c48:	4613      	mov	r3, r2
 8011c4a:	005b      	lsls	r3, r3, #1
 8011c4c:	4413      	add	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	440b      	add	r3, r1
 8011c52:	3312      	adds	r3, #18
 8011c54:	2200      	movs	r2, #0
 8011c56:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011c58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011c5c:	4907      	ldr	r1, [pc, #28]	; (8011c7c <etharp_find_entry+0x2d4>)
 8011c5e:	4613      	mov	r3, r2
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	4413      	add	r3, r2
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	440b      	add	r3, r1
 8011c68:	3308      	adds	r3, #8
 8011c6a:	687a      	ldr	r2, [r7, #4]
 8011c6c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011c6e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011c72:	4618      	mov	r0, r3
 8011c74:	3728      	adds	r7, #40	; 0x28
 8011c76:	46bd      	mov	sp, r7
 8011c78:	bd80      	pop	{r7, pc}
 8011c7a:	bf00      	nop
 8011c7c:	20000120 	.word	0x20000120
 8011c80:	0801716c 	.word	0x0801716c
 8011c84:	080171a4 	.word	0x080171a4
 8011c88:	080171e4 	.word	0x080171e4
 8011c8c:	0801720c 	.word	0x0801720c
 8011c90:	08017224 	.word	0x08017224
 8011c94:	08017238 	.word	0x08017238

08011c98 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b088      	sub	sp, #32
 8011c9c:	af02      	add	r7, sp, #8
 8011c9e:	60f8      	str	r0, [r7, #12]
 8011ca0:	60b9      	str	r1, [r7, #8]
 8011ca2:	607a      	str	r2, [r7, #4]
 8011ca4:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011cac:	2b06      	cmp	r3, #6
 8011cae:	d006      	beq.n	8011cbe <etharp_update_arp_entry+0x26>
 8011cb0:	4b48      	ldr	r3, [pc, #288]	; (8011dd4 <etharp_update_arp_entry+0x13c>)
 8011cb2:	f240 12a9 	movw	r2, #425	; 0x1a9
 8011cb6:	4948      	ldr	r1, [pc, #288]	; (8011dd8 <etharp_update_arp_entry+0x140>)
 8011cb8:	4848      	ldr	r0, [pc, #288]	; (8011ddc <etharp_update_arp_entry+0x144>)
 8011cba:	f002 f8a3 	bl	8013e04 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	d012      	beq.n	8011cea <etharp_update_arp_entry+0x52>
 8011cc4:	68bb      	ldr	r3, [r7, #8]
 8011cc6:	681b      	ldr	r3, [r3, #0]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d00e      	beq.n	8011cea <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ccc:	68bb      	ldr	r3, [r7, #8]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	68f9      	ldr	r1, [r7, #12]
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	f001 f8fe 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 8011cd8:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8011cda:	2b00      	cmp	r3, #0
 8011cdc:	d105      	bne.n	8011cea <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	681b      	ldr	r3, [r3, #0]
 8011ce2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8011ce6:	2be0      	cmp	r3, #224	; 0xe0
 8011ce8:	d102      	bne.n	8011cf0 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8011cea:	f06f 030f 	mvn.w	r3, #15
 8011cee:	e06c      	b.n	8011dca <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8011cf0:	78fb      	ldrb	r3, [r7, #3]
 8011cf2:	68fa      	ldr	r2, [r7, #12]
 8011cf4:	4619      	mov	r1, r3
 8011cf6:	68b8      	ldr	r0, [r7, #8]
 8011cf8:	f7ff fe56 	bl	80119a8 <etharp_find_entry>
 8011cfc:	4603      	mov	r3, r0
 8011cfe:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8011d00:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	da02      	bge.n	8011d0e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8011d08:	8afb      	ldrh	r3, [r7, #22]
 8011d0a:	b25b      	sxtb	r3, r3
 8011d0c:	e05d      	b.n	8011dca <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8011d0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d12:	4933      	ldr	r1, [pc, #204]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d14:	4613      	mov	r3, r2
 8011d16:	005b      	lsls	r3, r3, #1
 8011d18:	4413      	add	r3, r2
 8011d1a:	00db      	lsls	r3, r3, #3
 8011d1c:	440b      	add	r3, r1
 8011d1e:	3314      	adds	r3, #20
 8011d20:	2202      	movs	r2, #2
 8011d22:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8011d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d28:	492d      	ldr	r1, [pc, #180]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d2a:	4613      	mov	r3, r2
 8011d2c:	005b      	lsls	r3, r3, #1
 8011d2e:	4413      	add	r3, r2
 8011d30:	00db      	lsls	r3, r3, #3
 8011d32:	440b      	add	r3, r1
 8011d34:	3308      	adds	r3, #8
 8011d36:	68fa      	ldr	r2, [r7, #12]
 8011d38:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8011d3a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d3e:	4613      	mov	r3, r2
 8011d40:	005b      	lsls	r3, r3, #1
 8011d42:	4413      	add	r3, r2
 8011d44:	00db      	lsls	r3, r3, #3
 8011d46:	3308      	adds	r3, #8
 8011d48:	4a25      	ldr	r2, [pc, #148]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d4a:	4413      	add	r3, r2
 8011d4c:	3304      	adds	r3, #4
 8011d4e:	2206      	movs	r2, #6
 8011d50:	6879      	ldr	r1, [r7, #4]
 8011d52:	4618      	mov	r0, r3
 8011d54:	f002 f840 	bl	8013dd8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8011d58:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d5c:	4920      	ldr	r1, [pc, #128]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d5e:	4613      	mov	r3, r2
 8011d60:	005b      	lsls	r3, r3, #1
 8011d62:	4413      	add	r3, r2
 8011d64:	00db      	lsls	r3, r3, #3
 8011d66:	440b      	add	r3, r1
 8011d68:	3312      	adds	r3, #18
 8011d6a:	2200      	movs	r2, #0
 8011d6c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8011d6e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d72:	491b      	ldr	r1, [pc, #108]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d74:	4613      	mov	r3, r2
 8011d76:	005b      	lsls	r3, r3, #1
 8011d78:	4413      	add	r3, r2
 8011d7a:	00db      	lsls	r3, r3, #3
 8011d7c:	440b      	add	r3, r1
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	2b00      	cmp	r3, #0
 8011d82:	d021      	beq.n	8011dc8 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8011d84:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d88:	4915      	ldr	r1, [pc, #84]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d8a:	4613      	mov	r3, r2
 8011d8c:	005b      	lsls	r3, r3, #1
 8011d8e:	4413      	add	r3, r2
 8011d90:	00db      	lsls	r3, r3, #3
 8011d92:	440b      	add	r3, r1
 8011d94:	681b      	ldr	r3, [r3, #0]
 8011d96:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8011d98:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8011d9c:	4910      	ldr	r1, [pc, #64]	; (8011de0 <etharp_update_arp_entry+0x148>)
 8011d9e:	4613      	mov	r3, r2
 8011da0:	005b      	lsls	r3, r3, #1
 8011da2:	4413      	add	r3, r2
 8011da4:	00db      	lsls	r3, r3, #3
 8011da6:	440b      	add	r3, r1
 8011da8:	2200      	movs	r2, #0
 8011daa:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8011dac:	68fb      	ldr	r3, [r7, #12]
 8011dae:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8011db2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011db6:	9300      	str	r3, [sp, #0]
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	6939      	ldr	r1, [r7, #16]
 8011dbc:	68f8      	ldr	r0, [r7, #12]
 8011dbe:	f001 ff91 	bl	8013ce4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8011dc2:	6938      	ldr	r0, [r7, #16]
 8011dc4:	f7f9 faa4 	bl	800b310 <pbuf_free>
  }
  return ERR_OK;
 8011dc8:	2300      	movs	r3, #0
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	3718      	adds	r7, #24
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd80      	pop	{r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	0801716c 	.word	0x0801716c
 8011dd8:	08017264 	.word	0x08017264
 8011ddc:	080171e4 	.word	0x080171e4
 8011de0:	20000120 	.word	0x20000120

08011de4 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8011de4:	b580      	push	{r7, lr}
 8011de6:	b084      	sub	sp, #16
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011dec:	2300      	movs	r3, #0
 8011dee:	60fb      	str	r3, [r7, #12]
 8011df0:	e01e      	b.n	8011e30 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8011df2:	4913      	ldr	r1, [pc, #76]	; (8011e40 <etharp_cleanup_netif+0x5c>)
 8011df4:	68fa      	ldr	r2, [r7, #12]
 8011df6:	4613      	mov	r3, r2
 8011df8:	005b      	lsls	r3, r3, #1
 8011dfa:	4413      	add	r3, r2
 8011dfc:	00db      	lsls	r3, r3, #3
 8011dfe:	440b      	add	r3, r1
 8011e00:	3314      	adds	r3, #20
 8011e02:	781b      	ldrb	r3, [r3, #0]
 8011e04:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8011e06:	7afb      	ldrb	r3, [r7, #11]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d00e      	beq.n	8011e2a <etharp_cleanup_netif+0x46>
 8011e0c:	490c      	ldr	r1, [pc, #48]	; (8011e40 <etharp_cleanup_netif+0x5c>)
 8011e0e:	68fa      	ldr	r2, [r7, #12]
 8011e10:	4613      	mov	r3, r2
 8011e12:	005b      	lsls	r3, r3, #1
 8011e14:	4413      	add	r3, r2
 8011e16:	00db      	lsls	r3, r3, #3
 8011e18:	440b      	add	r3, r1
 8011e1a:	3308      	adds	r3, #8
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	687a      	ldr	r2, [r7, #4]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d102      	bne.n	8011e2a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8011e24:	68f8      	ldr	r0, [r7, #12]
 8011e26:	f7ff fce5 	bl	80117f4 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e2a:	68fb      	ldr	r3, [r7, #12]
 8011e2c:	3301      	adds	r3, #1
 8011e2e:	60fb      	str	r3, [r7, #12]
 8011e30:	68fb      	ldr	r3, [r7, #12]
 8011e32:	2b09      	cmp	r3, #9
 8011e34:	dddd      	ble.n	8011df2 <etharp_cleanup_netif+0xe>
    }
  }
}
 8011e36:	bf00      	nop
 8011e38:	bf00      	nop
 8011e3a:	3710      	adds	r7, #16
 8011e3c:	46bd      	mov	sp, r7
 8011e3e:	bd80      	pop	{r7, pc}
 8011e40:	20000120 	.word	0x20000120

08011e44 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8011e44:	b5b0      	push	{r4, r5, r7, lr}
 8011e46:	b08a      	sub	sp, #40	; 0x28
 8011e48:	af04      	add	r7, sp, #16
 8011e4a:	6078      	str	r0, [r7, #4]
 8011e4c:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8011e4e:	683b      	ldr	r3, [r7, #0]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d107      	bne.n	8011e64 <etharp_input+0x20>
 8011e54:	4b3d      	ldr	r3, [pc, #244]	; (8011f4c <etharp_input+0x108>)
 8011e56:	f240 228a 	movw	r2, #650	; 0x28a
 8011e5a:	493d      	ldr	r1, [pc, #244]	; (8011f50 <etharp_input+0x10c>)
 8011e5c:	483d      	ldr	r0, [pc, #244]	; (8011f54 <etharp_input+0x110>)
 8011e5e:	f001 ffd1 	bl	8013e04 <iprintf>
 8011e62:	e06f      	b.n	8011f44 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	685b      	ldr	r3, [r3, #4]
 8011e68:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e6a:	693b      	ldr	r3, [r7, #16]
 8011e6c:	881b      	ldrh	r3, [r3, #0]
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011e74:	d10c      	bne.n	8011e90 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e76:	693b      	ldr	r3, [r7, #16]
 8011e78:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8011e7a:	2b06      	cmp	r3, #6
 8011e7c:	d108      	bne.n	8011e90 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e7e:	693b      	ldr	r3, [r7, #16]
 8011e80:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8011e82:	2b04      	cmp	r3, #4
 8011e84:	d104      	bne.n	8011e90 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8011e86:	693b      	ldr	r3, [r7, #16]
 8011e88:	885b      	ldrh	r3, [r3, #2]
 8011e8a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8011e8c:	2b08      	cmp	r3, #8
 8011e8e:	d003      	beq.n	8011e98 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8011e90:	6878      	ldr	r0, [r7, #4]
 8011e92:	f7f9 fa3d 	bl	800b310 <pbuf_free>
    return;
 8011e96:	e055      	b.n	8011f44 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8011e98:	693b      	ldr	r3, [r7, #16]
 8011e9a:	330e      	adds	r3, #14
 8011e9c:	681b      	ldr	r3, [r3, #0]
 8011e9e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8011ea0:	693b      	ldr	r3, [r7, #16]
 8011ea2:	3318      	adds	r3, #24
 8011ea4:	681b      	ldr	r3, [r3, #0]
 8011ea6:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8011ea8:	683b      	ldr	r3, [r7, #0]
 8011eaa:	3304      	adds	r3, #4
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d102      	bne.n	8011eb8 <etharp_input+0x74>
    for_us = 0;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	75fb      	strb	r3, [r7, #23]
 8011eb6:	e009      	b.n	8011ecc <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8011eb8:	68ba      	ldr	r2, [r7, #8]
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	3304      	adds	r3, #4
 8011ebe:	681b      	ldr	r3, [r3, #0]
 8011ec0:	429a      	cmp	r2, r3
 8011ec2:	bf0c      	ite	eq
 8011ec4:	2301      	moveq	r3, #1
 8011ec6:	2300      	movne	r3, #0
 8011ec8:	b2db      	uxtb	r3, r3
 8011eca:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8011ecc:	693b      	ldr	r3, [r7, #16]
 8011ece:	f103 0208 	add.w	r2, r3, #8
 8011ed2:	7dfb      	ldrb	r3, [r7, #23]
 8011ed4:	2b00      	cmp	r3, #0
 8011ed6:	d001      	beq.n	8011edc <etharp_input+0x98>
 8011ed8:	2301      	movs	r3, #1
 8011eda:	e000      	b.n	8011ede <etharp_input+0x9a>
 8011edc:	2302      	movs	r3, #2
 8011ede:	f107 010c 	add.w	r1, r7, #12
 8011ee2:	6838      	ldr	r0, [r7, #0]
 8011ee4:	f7ff fed8 	bl	8011c98 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8011ee8:	693b      	ldr	r3, [r7, #16]
 8011eea:	88db      	ldrh	r3, [r3, #6]
 8011eec:	b29b      	uxth	r3, r3
 8011eee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ef2:	d003      	beq.n	8011efc <etharp_input+0xb8>
 8011ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011ef8:	d01e      	beq.n	8011f38 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8011efa:	e020      	b.n	8011f3e <etharp_input+0xfa>
      if (for_us) {
 8011efc:	7dfb      	ldrb	r3, [r7, #23]
 8011efe:	2b00      	cmp	r3, #0
 8011f00:	d01c      	beq.n	8011f3c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8011f02:	683b      	ldr	r3, [r7, #0]
 8011f04:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8011f08:	693b      	ldr	r3, [r7, #16]
 8011f0a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8011f0e:	683b      	ldr	r3, [r7, #0]
 8011f10:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8011f14:	683b      	ldr	r3, [r7, #0]
 8011f16:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8011f18:	693a      	ldr	r2, [r7, #16]
 8011f1a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8011f1c:	2102      	movs	r1, #2
 8011f1e:	9103      	str	r1, [sp, #12]
 8011f20:	f107 010c 	add.w	r1, r7, #12
 8011f24:	9102      	str	r1, [sp, #8]
 8011f26:	9201      	str	r2, [sp, #4]
 8011f28:	9300      	str	r3, [sp, #0]
 8011f2a:	462b      	mov	r3, r5
 8011f2c:	4622      	mov	r2, r4
 8011f2e:	4601      	mov	r1, r0
 8011f30:	6838      	ldr	r0, [r7, #0]
 8011f32:	f000 faeb 	bl	801250c <etharp_raw>
      break;
 8011f36:	e001      	b.n	8011f3c <etharp_input+0xf8>
      break;
 8011f38:	bf00      	nop
 8011f3a:	e000      	b.n	8011f3e <etharp_input+0xfa>
      break;
 8011f3c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8011f3e:	6878      	ldr	r0, [r7, #4]
 8011f40:	f7f9 f9e6 	bl	800b310 <pbuf_free>
}
 8011f44:	3718      	adds	r7, #24
 8011f46:	46bd      	mov	sp, r7
 8011f48:	bdb0      	pop	{r4, r5, r7, pc}
 8011f4a:	bf00      	nop
 8011f4c:	0801716c 	.word	0x0801716c
 8011f50:	080172bc 	.word	0x080172bc
 8011f54:	080171e4 	.word	0x080171e4

08011f58 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b086      	sub	sp, #24
 8011f5c:	af02      	add	r7, sp, #8
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	4613      	mov	r3, r2
 8011f64:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8011f66:	79fa      	ldrb	r2, [r7, #7]
 8011f68:	4944      	ldr	r1, [pc, #272]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011f6a:	4613      	mov	r3, r2
 8011f6c:	005b      	lsls	r3, r3, #1
 8011f6e:	4413      	add	r3, r2
 8011f70:	00db      	lsls	r3, r3, #3
 8011f72:	440b      	add	r3, r1
 8011f74:	3314      	adds	r3, #20
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	2b01      	cmp	r3, #1
 8011f7a:	d806      	bhi.n	8011f8a <etharp_output_to_arp_index+0x32>
 8011f7c:	4b40      	ldr	r3, [pc, #256]	; (8012080 <etharp_output_to_arp_index+0x128>)
 8011f7e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8011f82:	4940      	ldr	r1, [pc, #256]	; (8012084 <etharp_output_to_arp_index+0x12c>)
 8011f84:	4840      	ldr	r0, [pc, #256]	; (8012088 <etharp_output_to_arp_index+0x130>)
 8011f86:	f001 ff3d 	bl	8013e04 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8011f8a:	79fa      	ldrb	r2, [r7, #7]
 8011f8c:	493b      	ldr	r1, [pc, #236]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011f8e:	4613      	mov	r3, r2
 8011f90:	005b      	lsls	r3, r3, #1
 8011f92:	4413      	add	r3, r2
 8011f94:	00db      	lsls	r3, r3, #3
 8011f96:	440b      	add	r3, r1
 8011f98:	3314      	adds	r3, #20
 8011f9a:	781b      	ldrb	r3, [r3, #0]
 8011f9c:	2b02      	cmp	r3, #2
 8011f9e:	d153      	bne.n	8012048 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8011fa0:	79fa      	ldrb	r2, [r7, #7]
 8011fa2:	4936      	ldr	r1, [pc, #216]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011fa4:	4613      	mov	r3, r2
 8011fa6:	005b      	lsls	r3, r3, #1
 8011fa8:	4413      	add	r3, r2
 8011faa:	00db      	lsls	r3, r3, #3
 8011fac:	440b      	add	r3, r1
 8011fae:	3312      	adds	r3, #18
 8011fb0:	881b      	ldrh	r3, [r3, #0]
 8011fb2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8011fb6:	d919      	bls.n	8011fec <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8011fb8:	79fa      	ldrb	r2, [r7, #7]
 8011fba:	4613      	mov	r3, r2
 8011fbc:	005b      	lsls	r3, r3, #1
 8011fbe:	4413      	add	r3, r2
 8011fc0:	00db      	lsls	r3, r3, #3
 8011fc2:	4a2e      	ldr	r2, [pc, #184]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011fc4:	4413      	add	r3, r2
 8011fc6:	3304      	adds	r3, #4
 8011fc8:	4619      	mov	r1, r3
 8011fca:	68f8      	ldr	r0, [r7, #12]
 8011fcc:	f000 fb4c 	bl	8012668 <etharp_request>
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	2b00      	cmp	r3, #0
 8011fd4:	d138      	bne.n	8012048 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8011fd6:	79fa      	ldrb	r2, [r7, #7]
 8011fd8:	4928      	ldr	r1, [pc, #160]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011fda:	4613      	mov	r3, r2
 8011fdc:	005b      	lsls	r3, r3, #1
 8011fde:	4413      	add	r3, r2
 8011fe0:	00db      	lsls	r3, r3, #3
 8011fe2:	440b      	add	r3, r1
 8011fe4:	3314      	adds	r3, #20
 8011fe6:	2203      	movs	r2, #3
 8011fe8:	701a      	strb	r2, [r3, #0]
 8011fea:	e02d      	b.n	8012048 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8011fec:	79fa      	ldrb	r2, [r7, #7]
 8011fee:	4923      	ldr	r1, [pc, #140]	; (801207c <etharp_output_to_arp_index+0x124>)
 8011ff0:	4613      	mov	r3, r2
 8011ff2:	005b      	lsls	r3, r3, #1
 8011ff4:	4413      	add	r3, r2
 8011ff6:	00db      	lsls	r3, r3, #3
 8011ff8:	440b      	add	r3, r1
 8011ffa:	3312      	adds	r3, #18
 8011ffc:	881b      	ldrh	r3, [r3, #0]
 8011ffe:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012002:	d321      	bcc.n	8012048 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012004:	79fa      	ldrb	r2, [r7, #7]
 8012006:	4613      	mov	r3, r2
 8012008:	005b      	lsls	r3, r3, #1
 801200a:	4413      	add	r3, r2
 801200c:	00db      	lsls	r3, r3, #3
 801200e:	4a1b      	ldr	r2, [pc, #108]	; (801207c <etharp_output_to_arp_index+0x124>)
 8012010:	4413      	add	r3, r2
 8012012:	1d19      	adds	r1, r3, #4
 8012014:	79fa      	ldrb	r2, [r7, #7]
 8012016:	4613      	mov	r3, r2
 8012018:	005b      	lsls	r3, r3, #1
 801201a:	4413      	add	r3, r2
 801201c:	00db      	lsls	r3, r3, #3
 801201e:	3308      	adds	r3, #8
 8012020:	4a16      	ldr	r2, [pc, #88]	; (801207c <etharp_output_to_arp_index+0x124>)
 8012022:	4413      	add	r3, r2
 8012024:	3304      	adds	r3, #4
 8012026:	461a      	mov	r2, r3
 8012028:	68f8      	ldr	r0, [r7, #12]
 801202a:	f000 fafb 	bl	8012624 <etharp_request_dst>
 801202e:	4603      	mov	r3, r0
 8012030:	2b00      	cmp	r3, #0
 8012032:	d109      	bne.n	8012048 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012034:	79fa      	ldrb	r2, [r7, #7]
 8012036:	4911      	ldr	r1, [pc, #68]	; (801207c <etharp_output_to_arp_index+0x124>)
 8012038:	4613      	mov	r3, r2
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	4413      	add	r3, r2
 801203e:	00db      	lsls	r3, r3, #3
 8012040:	440b      	add	r3, r1
 8012042:	3314      	adds	r3, #20
 8012044:	2203      	movs	r2, #3
 8012046:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8012048:	68fb      	ldr	r3, [r7, #12]
 801204a:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801204e:	79fa      	ldrb	r2, [r7, #7]
 8012050:	4613      	mov	r3, r2
 8012052:	005b      	lsls	r3, r3, #1
 8012054:	4413      	add	r3, r2
 8012056:	00db      	lsls	r3, r3, #3
 8012058:	3308      	adds	r3, #8
 801205a:	4a08      	ldr	r2, [pc, #32]	; (801207c <etharp_output_to_arp_index+0x124>)
 801205c:	4413      	add	r3, r2
 801205e:	3304      	adds	r3, #4
 8012060:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8012064:	9200      	str	r2, [sp, #0]
 8012066:	460a      	mov	r2, r1
 8012068:	68b9      	ldr	r1, [r7, #8]
 801206a:	68f8      	ldr	r0, [r7, #12]
 801206c:	f001 fe3a 	bl	8013ce4 <ethernet_output>
 8012070:	4603      	mov	r3, r0
}
 8012072:	4618      	mov	r0, r3
 8012074:	3710      	adds	r7, #16
 8012076:	46bd      	mov	sp, r7
 8012078:	bd80      	pop	{r7, pc}
 801207a:	bf00      	nop
 801207c:	20000120 	.word	0x20000120
 8012080:	0801716c 	.word	0x0801716c
 8012084:	080172dc 	.word	0x080172dc
 8012088:	080171e4 	.word	0x080171e4

0801208c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801208c:	b580      	push	{r7, lr}
 801208e:	b08a      	sub	sp, #40	; 0x28
 8012090:	af02      	add	r7, sp, #8
 8012092:	60f8      	str	r0, [r7, #12]
 8012094:	60b9      	str	r1, [r7, #8]
 8012096:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801209c:	68fb      	ldr	r3, [r7, #12]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d106      	bne.n	80120b0 <etharp_output+0x24>
 80120a2:	4b73      	ldr	r3, [pc, #460]	; (8012270 <etharp_output+0x1e4>)
 80120a4:	f240 321e 	movw	r2, #798	; 0x31e
 80120a8:	4972      	ldr	r1, [pc, #456]	; (8012274 <etharp_output+0x1e8>)
 80120aa:	4873      	ldr	r0, [pc, #460]	; (8012278 <etharp_output+0x1ec>)
 80120ac:	f001 feaa 	bl	8013e04 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80120b0:	68bb      	ldr	r3, [r7, #8]
 80120b2:	2b00      	cmp	r3, #0
 80120b4:	d106      	bne.n	80120c4 <etharp_output+0x38>
 80120b6:	4b6e      	ldr	r3, [pc, #440]	; (8012270 <etharp_output+0x1e4>)
 80120b8:	f240 321f 	movw	r2, #799	; 0x31f
 80120bc:	496f      	ldr	r1, [pc, #444]	; (801227c <etharp_output+0x1f0>)
 80120be:	486e      	ldr	r0, [pc, #440]	; (8012278 <etharp_output+0x1ec>)
 80120c0:	f001 fea0 	bl	8013e04 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80120c4:	687b      	ldr	r3, [r7, #4]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d106      	bne.n	80120d8 <etharp_output+0x4c>
 80120ca:	4b69      	ldr	r3, [pc, #420]	; (8012270 <etharp_output+0x1e4>)
 80120cc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80120d0:	496b      	ldr	r1, [pc, #428]	; (8012280 <etharp_output+0x1f4>)
 80120d2:	4869      	ldr	r0, [pc, #420]	; (8012278 <etharp_output+0x1ec>)
 80120d4:	f001 fe96 	bl	8013e04 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	68f9      	ldr	r1, [r7, #12]
 80120de:	4618      	mov	r0, r3
 80120e0:	f000 fef8 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 80120e4:	4603      	mov	r3, r0
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d002      	beq.n	80120f0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80120ea:	4b66      	ldr	r3, [pc, #408]	; (8012284 <etharp_output+0x1f8>)
 80120ec:	61fb      	str	r3, [r7, #28]
 80120ee:	e0af      	b.n	8012250 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80120f8:	2be0      	cmp	r3, #224	; 0xe0
 80120fa:	d118      	bne.n	801212e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80120fc:	2301      	movs	r3, #1
 80120fe:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012100:	2300      	movs	r3, #0
 8012102:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012104:	235e      	movs	r3, #94	; 0x5e
 8012106:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	3301      	adds	r3, #1
 801210c:	781b      	ldrb	r3, [r3, #0]
 801210e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012112:	b2db      	uxtb	r3, r3
 8012114:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	3302      	adds	r3, #2
 801211a:	781b      	ldrb	r3, [r3, #0]
 801211c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	3303      	adds	r3, #3
 8012122:	781b      	ldrb	r3, [r3, #0]
 8012124:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8012126:	f107 0310 	add.w	r3, r7, #16
 801212a:	61fb      	str	r3, [r7, #28]
 801212c:	e090      	b.n	8012250 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	681a      	ldr	r2, [r3, #0]
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	3304      	adds	r3, #4
 8012136:	681b      	ldr	r3, [r3, #0]
 8012138:	405a      	eors	r2, r3
 801213a:	68fb      	ldr	r3, [r7, #12]
 801213c:	3308      	adds	r3, #8
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	4013      	ands	r3, r2
 8012142:	2b00      	cmp	r3, #0
 8012144:	d012      	beq.n	801216c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801214c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8012150:	4293      	cmp	r3, r2
 8012152:	d00b      	beq.n	801216c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	330c      	adds	r3, #12
 8012158:	681b      	ldr	r3, [r3, #0]
 801215a:	2b00      	cmp	r3, #0
 801215c:	d003      	beq.n	8012166 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	330c      	adds	r3, #12
 8012162:	61bb      	str	r3, [r7, #24]
 8012164:	e002      	b.n	801216c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8012166:	f06f 0303 	mvn.w	r3, #3
 801216a:	e07d      	b.n	8012268 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801216c:	4b46      	ldr	r3, [pc, #280]	; (8012288 <etharp_output+0x1fc>)
 801216e:	781b      	ldrb	r3, [r3, #0]
 8012170:	4619      	mov	r1, r3
 8012172:	4a46      	ldr	r2, [pc, #280]	; (801228c <etharp_output+0x200>)
 8012174:	460b      	mov	r3, r1
 8012176:	005b      	lsls	r3, r3, #1
 8012178:	440b      	add	r3, r1
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	4413      	add	r3, r2
 801217e:	3314      	adds	r3, #20
 8012180:	781b      	ldrb	r3, [r3, #0]
 8012182:	2b01      	cmp	r3, #1
 8012184:	d925      	bls.n	80121d2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012186:	4b40      	ldr	r3, [pc, #256]	; (8012288 <etharp_output+0x1fc>)
 8012188:	781b      	ldrb	r3, [r3, #0]
 801218a:	4619      	mov	r1, r3
 801218c:	4a3f      	ldr	r2, [pc, #252]	; (801228c <etharp_output+0x200>)
 801218e:	460b      	mov	r3, r1
 8012190:	005b      	lsls	r3, r3, #1
 8012192:	440b      	add	r3, r1
 8012194:	00db      	lsls	r3, r3, #3
 8012196:	4413      	add	r3, r2
 8012198:	3308      	adds	r3, #8
 801219a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801219c:	68fa      	ldr	r2, [r7, #12]
 801219e:	429a      	cmp	r2, r3
 80121a0:	d117      	bne.n	80121d2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80121a2:	69bb      	ldr	r3, [r7, #24]
 80121a4:	681a      	ldr	r2, [r3, #0]
 80121a6:	4b38      	ldr	r3, [pc, #224]	; (8012288 <etharp_output+0x1fc>)
 80121a8:	781b      	ldrb	r3, [r3, #0]
 80121aa:	4618      	mov	r0, r3
 80121ac:	4937      	ldr	r1, [pc, #220]	; (801228c <etharp_output+0x200>)
 80121ae:	4603      	mov	r3, r0
 80121b0:	005b      	lsls	r3, r3, #1
 80121b2:	4403      	add	r3, r0
 80121b4:	00db      	lsls	r3, r3, #3
 80121b6:	440b      	add	r3, r1
 80121b8:	3304      	adds	r3, #4
 80121ba:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80121bc:	429a      	cmp	r2, r3
 80121be:	d108      	bne.n	80121d2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80121c0:	4b31      	ldr	r3, [pc, #196]	; (8012288 <etharp_output+0x1fc>)
 80121c2:	781b      	ldrb	r3, [r3, #0]
 80121c4:	461a      	mov	r2, r3
 80121c6:	68b9      	ldr	r1, [r7, #8]
 80121c8:	68f8      	ldr	r0, [r7, #12]
 80121ca:	f7ff fec5 	bl	8011f58 <etharp_output_to_arp_index>
 80121ce:	4603      	mov	r3, r0
 80121d0:	e04a      	b.n	8012268 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80121d2:	2300      	movs	r3, #0
 80121d4:	75fb      	strb	r3, [r7, #23]
 80121d6:	e031      	b.n	801223c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80121d8:	7dfa      	ldrb	r2, [r7, #23]
 80121da:	492c      	ldr	r1, [pc, #176]	; (801228c <etharp_output+0x200>)
 80121dc:	4613      	mov	r3, r2
 80121de:	005b      	lsls	r3, r3, #1
 80121e0:	4413      	add	r3, r2
 80121e2:	00db      	lsls	r3, r3, #3
 80121e4:	440b      	add	r3, r1
 80121e6:	3314      	adds	r3, #20
 80121e8:	781b      	ldrb	r3, [r3, #0]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d923      	bls.n	8012236 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80121ee:	7dfa      	ldrb	r2, [r7, #23]
 80121f0:	4926      	ldr	r1, [pc, #152]	; (801228c <etharp_output+0x200>)
 80121f2:	4613      	mov	r3, r2
 80121f4:	005b      	lsls	r3, r3, #1
 80121f6:	4413      	add	r3, r2
 80121f8:	00db      	lsls	r3, r3, #3
 80121fa:	440b      	add	r3, r1
 80121fc:	3308      	adds	r3, #8
 80121fe:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012200:	68fa      	ldr	r2, [r7, #12]
 8012202:	429a      	cmp	r2, r3
 8012204:	d117      	bne.n	8012236 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8012206:	69bb      	ldr	r3, [r7, #24]
 8012208:	6819      	ldr	r1, [r3, #0]
 801220a:	7dfa      	ldrb	r2, [r7, #23]
 801220c:	481f      	ldr	r0, [pc, #124]	; (801228c <etharp_output+0x200>)
 801220e:	4613      	mov	r3, r2
 8012210:	005b      	lsls	r3, r3, #1
 8012212:	4413      	add	r3, r2
 8012214:	00db      	lsls	r3, r3, #3
 8012216:	4403      	add	r3, r0
 8012218:	3304      	adds	r3, #4
 801221a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801221c:	4299      	cmp	r1, r3
 801221e:	d10a      	bne.n	8012236 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012220:	4a19      	ldr	r2, [pc, #100]	; (8012288 <etharp_output+0x1fc>)
 8012222:	7dfb      	ldrb	r3, [r7, #23]
 8012224:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8012226:	7dfb      	ldrb	r3, [r7, #23]
 8012228:	461a      	mov	r2, r3
 801222a:	68b9      	ldr	r1, [r7, #8]
 801222c:	68f8      	ldr	r0, [r7, #12]
 801222e:	f7ff fe93 	bl	8011f58 <etharp_output_to_arp_index>
 8012232:	4603      	mov	r3, r0
 8012234:	e018      	b.n	8012268 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	3301      	adds	r3, #1
 801223a:	75fb      	strb	r3, [r7, #23]
 801223c:	7dfb      	ldrb	r3, [r7, #23]
 801223e:	2b09      	cmp	r3, #9
 8012240:	d9ca      	bls.n	80121d8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8012242:	68ba      	ldr	r2, [r7, #8]
 8012244:	69b9      	ldr	r1, [r7, #24]
 8012246:	68f8      	ldr	r0, [r7, #12]
 8012248:	f000 f822 	bl	8012290 <etharp_query>
 801224c:	4603      	mov	r3, r0
 801224e:	e00b      	b.n	8012268 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8012250:	68fb      	ldr	r3, [r7, #12]
 8012252:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012256:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801225a:	9300      	str	r3, [sp, #0]
 801225c:	69fb      	ldr	r3, [r7, #28]
 801225e:	68b9      	ldr	r1, [r7, #8]
 8012260:	68f8      	ldr	r0, [r7, #12]
 8012262:	f001 fd3f 	bl	8013ce4 <ethernet_output>
 8012266:	4603      	mov	r3, r0
}
 8012268:	4618      	mov	r0, r3
 801226a:	3720      	adds	r7, #32
 801226c:	46bd      	mov	sp, r7
 801226e:	bd80      	pop	{r7, pc}
 8012270:	0801716c 	.word	0x0801716c
 8012274:	080172bc 	.word	0x080172bc
 8012278:	080171e4 	.word	0x080171e4
 801227c:	0801730c 	.word	0x0801730c
 8012280:	080172ac 	.word	0x080172ac
 8012284:	08017938 	.word	0x08017938
 8012288:	20000210 	.word	0x20000210
 801228c:	20000120 	.word	0x20000120

08012290 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b08c      	sub	sp, #48	; 0x30
 8012294:	af02      	add	r7, sp, #8
 8012296:	60f8      	str	r0, [r7, #12]
 8012298:	60b9      	str	r1, [r7, #8]
 801229a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801229c:	68fb      	ldr	r3, [r7, #12]
 801229e:	3326      	adds	r3, #38	; 0x26
 80122a0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80122a2:	23ff      	movs	r3, #255	; 0xff
 80122a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80122a8:	2300      	movs	r3, #0
 80122aa:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122ac:	68bb      	ldr	r3, [r7, #8]
 80122ae:	681b      	ldr	r3, [r3, #0]
 80122b0:	68f9      	ldr	r1, [r7, #12]
 80122b2:	4618      	mov	r0, r3
 80122b4:	f000 fe0e 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 80122b8:	4603      	mov	r3, r0
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d10c      	bne.n	80122d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122be:	68bb      	ldr	r3, [r7, #8]
 80122c0:	681b      	ldr	r3, [r3, #0]
 80122c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80122c6:	2be0      	cmp	r3, #224	; 0xe0
 80122c8:	d006      	beq.n	80122d8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80122ca:	68bb      	ldr	r3, [r7, #8]
 80122cc:	2b00      	cmp	r3, #0
 80122ce:	d003      	beq.n	80122d8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80122d0:	68bb      	ldr	r3, [r7, #8]
 80122d2:	681b      	ldr	r3, [r3, #0]
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d102      	bne.n	80122de <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80122d8:	f06f 030f 	mvn.w	r3, #15
 80122dc:	e101      	b.n	80124e2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80122de:	68fa      	ldr	r2, [r7, #12]
 80122e0:	2101      	movs	r1, #1
 80122e2:	68b8      	ldr	r0, [r7, #8]
 80122e4:	f7ff fb60 	bl	80119a8 <etharp_find_entry>
 80122e8:	4603      	mov	r3, r0
 80122ea:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80122ec:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80122f0:	2b00      	cmp	r3, #0
 80122f2:	da02      	bge.n	80122fa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80122f4:	8a7b      	ldrh	r3, [r7, #18]
 80122f6:	b25b      	sxtb	r3, r3
 80122f8:	e0f3      	b.n	80124e2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80122fa:	8a7b      	ldrh	r3, [r7, #18]
 80122fc:	2b7e      	cmp	r3, #126	; 0x7e
 80122fe:	d906      	bls.n	801230e <etharp_query+0x7e>
 8012300:	4b7a      	ldr	r3, [pc, #488]	; (80124ec <etharp_query+0x25c>)
 8012302:	f240 32c1 	movw	r2, #961	; 0x3c1
 8012306:	497a      	ldr	r1, [pc, #488]	; (80124f0 <etharp_query+0x260>)
 8012308:	487a      	ldr	r0, [pc, #488]	; (80124f4 <etharp_query+0x264>)
 801230a:	f001 fd7b 	bl	8013e04 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801230e:	8a7b      	ldrh	r3, [r7, #18]
 8012310:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012312:	7c7a      	ldrb	r2, [r7, #17]
 8012314:	4978      	ldr	r1, [pc, #480]	; (80124f8 <etharp_query+0x268>)
 8012316:	4613      	mov	r3, r2
 8012318:	005b      	lsls	r3, r3, #1
 801231a:	4413      	add	r3, r2
 801231c:	00db      	lsls	r3, r3, #3
 801231e:	440b      	add	r3, r1
 8012320:	3314      	adds	r3, #20
 8012322:	781b      	ldrb	r3, [r3, #0]
 8012324:	2b00      	cmp	r3, #0
 8012326:	d115      	bne.n	8012354 <etharp_query+0xc4>
    is_new_entry = 1;
 8012328:	2301      	movs	r3, #1
 801232a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801232c:	7c7a      	ldrb	r2, [r7, #17]
 801232e:	4972      	ldr	r1, [pc, #456]	; (80124f8 <etharp_query+0x268>)
 8012330:	4613      	mov	r3, r2
 8012332:	005b      	lsls	r3, r3, #1
 8012334:	4413      	add	r3, r2
 8012336:	00db      	lsls	r3, r3, #3
 8012338:	440b      	add	r3, r1
 801233a:	3314      	adds	r3, #20
 801233c:	2201      	movs	r2, #1
 801233e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8012340:	7c7a      	ldrb	r2, [r7, #17]
 8012342:	496d      	ldr	r1, [pc, #436]	; (80124f8 <etharp_query+0x268>)
 8012344:	4613      	mov	r3, r2
 8012346:	005b      	lsls	r3, r3, #1
 8012348:	4413      	add	r3, r2
 801234a:	00db      	lsls	r3, r3, #3
 801234c:	440b      	add	r3, r1
 801234e:	3308      	adds	r3, #8
 8012350:	68fa      	ldr	r2, [r7, #12]
 8012352:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8012354:	7c7a      	ldrb	r2, [r7, #17]
 8012356:	4968      	ldr	r1, [pc, #416]	; (80124f8 <etharp_query+0x268>)
 8012358:	4613      	mov	r3, r2
 801235a:	005b      	lsls	r3, r3, #1
 801235c:	4413      	add	r3, r2
 801235e:	00db      	lsls	r3, r3, #3
 8012360:	440b      	add	r3, r1
 8012362:	3314      	adds	r3, #20
 8012364:	781b      	ldrb	r3, [r3, #0]
 8012366:	2b01      	cmp	r3, #1
 8012368:	d011      	beq.n	801238e <etharp_query+0xfe>
 801236a:	7c7a      	ldrb	r2, [r7, #17]
 801236c:	4962      	ldr	r1, [pc, #392]	; (80124f8 <etharp_query+0x268>)
 801236e:	4613      	mov	r3, r2
 8012370:	005b      	lsls	r3, r3, #1
 8012372:	4413      	add	r3, r2
 8012374:	00db      	lsls	r3, r3, #3
 8012376:	440b      	add	r3, r1
 8012378:	3314      	adds	r3, #20
 801237a:	781b      	ldrb	r3, [r3, #0]
 801237c:	2b01      	cmp	r3, #1
 801237e:	d806      	bhi.n	801238e <etharp_query+0xfe>
 8012380:	4b5a      	ldr	r3, [pc, #360]	; (80124ec <etharp_query+0x25c>)
 8012382:	f240 32cd 	movw	r2, #973	; 0x3cd
 8012386:	495d      	ldr	r1, [pc, #372]	; (80124fc <etharp_query+0x26c>)
 8012388:	485a      	ldr	r0, [pc, #360]	; (80124f4 <etharp_query+0x264>)
 801238a:	f001 fd3b 	bl	8013e04 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801238e:	6a3b      	ldr	r3, [r7, #32]
 8012390:	2b00      	cmp	r3, #0
 8012392:	d102      	bne.n	801239a <etharp_query+0x10a>
 8012394:	687b      	ldr	r3, [r7, #4]
 8012396:	2b00      	cmp	r3, #0
 8012398:	d10c      	bne.n	80123b4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801239a:	68b9      	ldr	r1, [r7, #8]
 801239c:	68f8      	ldr	r0, [r7, #12]
 801239e:	f000 f963 	bl	8012668 <etharp_request>
 80123a2:	4603      	mov	r3, r0
 80123a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d102      	bne.n	80123b4 <etharp_query+0x124>
      return result;
 80123ae:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80123b2:	e096      	b.n	80124e2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80123b4:	687b      	ldr	r3, [r7, #4]
 80123b6:	2b00      	cmp	r3, #0
 80123b8:	d106      	bne.n	80123c8 <etharp_query+0x138>
 80123ba:	4b4c      	ldr	r3, [pc, #304]	; (80124ec <etharp_query+0x25c>)
 80123bc:	f240 32e1 	movw	r2, #993	; 0x3e1
 80123c0:	494f      	ldr	r1, [pc, #316]	; (8012500 <etharp_query+0x270>)
 80123c2:	484c      	ldr	r0, [pc, #304]	; (80124f4 <etharp_query+0x264>)
 80123c4:	f001 fd1e 	bl	8013e04 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80123c8:	7c7a      	ldrb	r2, [r7, #17]
 80123ca:	494b      	ldr	r1, [pc, #300]	; (80124f8 <etharp_query+0x268>)
 80123cc:	4613      	mov	r3, r2
 80123ce:	005b      	lsls	r3, r3, #1
 80123d0:	4413      	add	r3, r2
 80123d2:	00db      	lsls	r3, r3, #3
 80123d4:	440b      	add	r3, r1
 80123d6:	3314      	adds	r3, #20
 80123d8:	781b      	ldrb	r3, [r3, #0]
 80123da:	2b01      	cmp	r3, #1
 80123dc:	d917      	bls.n	801240e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80123de:	4a49      	ldr	r2, [pc, #292]	; (8012504 <etharp_query+0x274>)
 80123e0:	7c7b      	ldrb	r3, [r7, #17]
 80123e2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80123e4:	7c7a      	ldrb	r2, [r7, #17]
 80123e6:	4613      	mov	r3, r2
 80123e8:	005b      	lsls	r3, r3, #1
 80123ea:	4413      	add	r3, r2
 80123ec:	00db      	lsls	r3, r3, #3
 80123ee:	3308      	adds	r3, #8
 80123f0:	4a41      	ldr	r2, [pc, #260]	; (80124f8 <etharp_query+0x268>)
 80123f2:	4413      	add	r3, r2
 80123f4:	3304      	adds	r3, #4
 80123f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123fa:	9200      	str	r2, [sp, #0]
 80123fc:	697a      	ldr	r2, [r7, #20]
 80123fe:	6879      	ldr	r1, [r7, #4]
 8012400:	68f8      	ldr	r0, [r7, #12]
 8012402:	f001 fc6f 	bl	8013ce4 <ethernet_output>
 8012406:	4603      	mov	r3, r0
 8012408:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801240c:	e067      	b.n	80124de <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801240e:	7c7a      	ldrb	r2, [r7, #17]
 8012410:	4939      	ldr	r1, [pc, #228]	; (80124f8 <etharp_query+0x268>)
 8012412:	4613      	mov	r3, r2
 8012414:	005b      	lsls	r3, r3, #1
 8012416:	4413      	add	r3, r2
 8012418:	00db      	lsls	r3, r3, #3
 801241a:	440b      	add	r3, r1
 801241c:	3314      	adds	r3, #20
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	2b01      	cmp	r3, #1
 8012422:	d15c      	bne.n	80124de <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012424:	2300      	movs	r3, #0
 8012426:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801242c:	e01c      	b.n	8012468 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801242e:	69fb      	ldr	r3, [r7, #28]
 8012430:	895a      	ldrh	r2, [r3, #10]
 8012432:	69fb      	ldr	r3, [r7, #28]
 8012434:	891b      	ldrh	r3, [r3, #8]
 8012436:	429a      	cmp	r2, r3
 8012438:	d10a      	bne.n	8012450 <etharp_query+0x1c0>
 801243a:	69fb      	ldr	r3, [r7, #28]
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	2b00      	cmp	r3, #0
 8012440:	d006      	beq.n	8012450 <etharp_query+0x1c0>
 8012442:	4b2a      	ldr	r3, [pc, #168]	; (80124ec <etharp_query+0x25c>)
 8012444:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8012448:	492f      	ldr	r1, [pc, #188]	; (8012508 <etharp_query+0x278>)
 801244a:	482a      	ldr	r0, [pc, #168]	; (80124f4 <etharp_query+0x264>)
 801244c:	f001 fcda 	bl	8013e04 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8012450:	69fb      	ldr	r3, [r7, #28]
 8012452:	7b1b      	ldrb	r3, [r3, #12]
 8012454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012458:	2b00      	cmp	r3, #0
 801245a:	d002      	beq.n	8012462 <etharp_query+0x1d2>
        copy_needed = 1;
 801245c:	2301      	movs	r3, #1
 801245e:	61bb      	str	r3, [r7, #24]
        break;
 8012460:	e005      	b.n	801246e <etharp_query+0x1de>
      }
      p = p->next;
 8012462:	69fb      	ldr	r3, [r7, #28]
 8012464:	681b      	ldr	r3, [r3, #0]
 8012466:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012468:	69fb      	ldr	r3, [r7, #28]
 801246a:	2b00      	cmp	r3, #0
 801246c:	d1df      	bne.n	801242e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801246e:	69bb      	ldr	r3, [r7, #24]
 8012470:	2b00      	cmp	r3, #0
 8012472:	d007      	beq.n	8012484 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8012474:	687a      	ldr	r2, [r7, #4]
 8012476:	f44f 7120 	mov.w	r1, #640	; 0x280
 801247a:	200e      	movs	r0, #14
 801247c:	f7f9 f9b4 	bl	800b7e8 <pbuf_clone>
 8012480:	61f8      	str	r0, [r7, #28]
 8012482:	e004      	b.n	801248e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8012488:	69f8      	ldr	r0, [r7, #28]
 801248a:	f7f8 ffe1 	bl	800b450 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801248e:	69fb      	ldr	r3, [r7, #28]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d021      	beq.n	80124d8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8012494:	7c7a      	ldrb	r2, [r7, #17]
 8012496:	4918      	ldr	r1, [pc, #96]	; (80124f8 <etharp_query+0x268>)
 8012498:	4613      	mov	r3, r2
 801249a:	005b      	lsls	r3, r3, #1
 801249c:	4413      	add	r3, r2
 801249e:	00db      	lsls	r3, r3, #3
 80124a0:	440b      	add	r3, r1
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d00a      	beq.n	80124be <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80124a8:	7c7a      	ldrb	r2, [r7, #17]
 80124aa:	4913      	ldr	r1, [pc, #76]	; (80124f8 <etharp_query+0x268>)
 80124ac:	4613      	mov	r3, r2
 80124ae:	005b      	lsls	r3, r3, #1
 80124b0:	4413      	add	r3, r2
 80124b2:	00db      	lsls	r3, r3, #3
 80124b4:	440b      	add	r3, r1
 80124b6:	681b      	ldr	r3, [r3, #0]
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7f8 ff29 	bl	800b310 <pbuf_free>
      }
      arp_table[i].q = p;
 80124be:	7c7a      	ldrb	r2, [r7, #17]
 80124c0:	490d      	ldr	r1, [pc, #52]	; (80124f8 <etharp_query+0x268>)
 80124c2:	4613      	mov	r3, r2
 80124c4:	005b      	lsls	r3, r3, #1
 80124c6:	4413      	add	r3, r2
 80124c8:	00db      	lsls	r3, r3, #3
 80124ca:	440b      	add	r3, r1
 80124cc:	69fa      	ldr	r2, [r7, #28]
 80124ce:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80124d0:	2300      	movs	r3, #0
 80124d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80124d6:	e002      	b.n	80124de <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80124d8:	23ff      	movs	r3, #255	; 0xff
 80124da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80124de:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80124e2:	4618      	mov	r0, r3
 80124e4:	3728      	adds	r7, #40	; 0x28
 80124e6:	46bd      	mov	sp, r7
 80124e8:	bd80      	pop	{r7, pc}
 80124ea:	bf00      	nop
 80124ec:	0801716c 	.word	0x0801716c
 80124f0:	08017318 	.word	0x08017318
 80124f4:	080171e4 	.word	0x080171e4
 80124f8:	20000120 	.word	0x20000120
 80124fc:	08017328 	.word	0x08017328
 8012500:	0801730c 	.word	0x0801730c
 8012504:	20000210 	.word	0x20000210
 8012508:	08017350 	.word	0x08017350

0801250c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b08a      	sub	sp, #40	; 0x28
 8012510:	af02      	add	r7, sp, #8
 8012512:	60f8      	str	r0, [r7, #12]
 8012514:	60b9      	str	r1, [r7, #8]
 8012516:	607a      	str	r2, [r7, #4]
 8012518:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801251a:	2300      	movs	r3, #0
 801251c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	2b00      	cmp	r3, #0
 8012522:	d106      	bne.n	8012532 <etharp_raw+0x26>
 8012524:	4b3a      	ldr	r3, [pc, #232]	; (8012610 <etharp_raw+0x104>)
 8012526:	f240 4257 	movw	r2, #1111	; 0x457
 801252a:	493a      	ldr	r1, [pc, #232]	; (8012614 <etharp_raw+0x108>)
 801252c:	483a      	ldr	r0, [pc, #232]	; (8012618 <etharp_raw+0x10c>)
 801252e:	f001 fc69 	bl	8013e04 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012532:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012536:	211c      	movs	r1, #28
 8012538:	200e      	movs	r0, #14
 801253a:	f7f8 fc05 	bl	800ad48 <pbuf_alloc>
 801253e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8012540:	69bb      	ldr	r3, [r7, #24]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d102      	bne.n	801254c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8012546:	f04f 33ff 	mov.w	r3, #4294967295
 801254a:	e05d      	b.n	8012608 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801254c:	69bb      	ldr	r3, [r7, #24]
 801254e:	895b      	ldrh	r3, [r3, #10]
 8012550:	2b1b      	cmp	r3, #27
 8012552:	d806      	bhi.n	8012562 <etharp_raw+0x56>
 8012554:	4b2e      	ldr	r3, [pc, #184]	; (8012610 <etharp_raw+0x104>)
 8012556:	f240 4262 	movw	r2, #1122	; 0x462
 801255a:	4930      	ldr	r1, [pc, #192]	; (801261c <etharp_raw+0x110>)
 801255c:	482e      	ldr	r0, [pc, #184]	; (8012618 <etharp_raw+0x10c>)
 801255e:	f001 fc51 	bl	8013e04 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8012562:	69bb      	ldr	r3, [r7, #24]
 8012564:	685b      	ldr	r3, [r3, #4]
 8012566:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8012568:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801256a:	4618      	mov	r0, r3
 801256c:	f7f7 fc1d 	bl	8009daa <lwip_htons>
 8012570:	4603      	mov	r3, r0
 8012572:	461a      	mov	r2, r3
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801257e:	2b06      	cmp	r3, #6
 8012580:	d006      	beq.n	8012590 <etharp_raw+0x84>
 8012582:	4b23      	ldr	r3, [pc, #140]	; (8012610 <etharp_raw+0x104>)
 8012584:	f240 4269 	movw	r2, #1129	; 0x469
 8012588:	4925      	ldr	r1, [pc, #148]	; (8012620 <etharp_raw+0x114>)
 801258a:	4823      	ldr	r0, [pc, #140]	; (8012618 <etharp_raw+0x10c>)
 801258c:	f001 fc3a 	bl	8013e04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8012590:	697b      	ldr	r3, [r7, #20]
 8012592:	3308      	adds	r3, #8
 8012594:	2206      	movs	r2, #6
 8012596:	6839      	ldr	r1, [r7, #0]
 8012598:	4618      	mov	r0, r3
 801259a:	f001 fc1d 	bl	8013dd8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801259e:	697b      	ldr	r3, [r7, #20]
 80125a0:	3312      	adds	r3, #18
 80125a2:	2206      	movs	r2, #6
 80125a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80125a6:	4618      	mov	r0, r3
 80125a8:	f001 fc16 	bl	8013dd8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	330e      	adds	r3, #14
 80125b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80125b2:	6812      	ldr	r2, [r2, #0]
 80125b4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80125b6:	697b      	ldr	r3, [r7, #20]
 80125b8:	3318      	adds	r3, #24
 80125ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80125bc:	6812      	ldr	r2, [r2, #0]
 80125be:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80125c0:	697b      	ldr	r3, [r7, #20]
 80125c2:	2200      	movs	r2, #0
 80125c4:	701a      	strb	r2, [r3, #0]
 80125c6:	2200      	movs	r2, #0
 80125c8:	f042 0201 	orr.w	r2, r2, #1
 80125cc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80125ce:	697b      	ldr	r3, [r7, #20]
 80125d0:	2200      	movs	r2, #0
 80125d2:	f042 0208 	orr.w	r2, r2, #8
 80125d6:	709a      	strb	r2, [r3, #2]
 80125d8:	2200      	movs	r2, #0
 80125da:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80125dc:	697b      	ldr	r3, [r7, #20]
 80125de:	2206      	movs	r2, #6
 80125e0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80125e2:	697b      	ldr	r3, [r7, #20]
 80125e4:	2204      	movs	r2, #4
 80125e6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80125e8:	f640 0306 	movw	r3, #2054	; 0x806
 80125ec:	9300      	str	r3, [sp, #0]
 80125ee:	687b      	ldr	r3, [r7, #4]
 80125f0:	68ba      	ldr	r2, [r7, #8]
 80125f2:	69b9      	ldr	r1, [r7, #24]
 80125f4:	68f8      	ldr	r0, [r7, #12]
 80125f6:	f001 fb75 	bl	8013ce4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 80125fa:	69b8      	ldr	r0, [r7, #24]
 80125fc:	f7f8 fe88 	bl	800b310 <pbuf_free>
  p = NULL;
 8012600:	2300      	movs	r3, #0
 8012602:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012604:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012608:	4618      	mov	r0, r3
 801260a:	3720      	adds	r7, #32
 801260c:	46bd      	mov	sp, r7
 801260e:	bd80      	pop	{r7, pc}
 8012610:	0801716c 	.word	0x0801716c
 8012614:	080172bc 	.word	0x080172bc
 8012618:	080171e4 	.word	0x080171e4
 801261c:	0801736c 	.word	0x0801736c
 8012620:	080173a0 	.word	0x080173a0

08012624 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012624:	b580      	push	{r7, lr}
 8012626:	b088      	sub	sp, #32
 8012628:	af04      	add	r7, sp, #16
 801262a:	60f8      	str	r0, [r7, #12]
 801262c:	60b9      	str	r1, [r7, #8]
 801262e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8012636:	68fb      	ldr	r3, [r7, #12]
 8012638:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801263c:	68fb      	ldr	r3, [r7, #12]
 801263e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012640:	2201      	movs	r2, #1
 8012642:	9203      	str	r2, [sp, #12]
 8012644:	68ba      	ldr	r2, [r7, #8]
 8012646:	9202      	str	r2, [sp, #8]
 8012648:	4a06      	ldr	r2, [pc, #24]	; (8012664 <etharp_request_dst+0x40>)
 801264a:	9201      	str	r2, [sp, #4]
 801264c:	9300      	str	r3, [sp, #0]
 801264e:	4603      	mov	r3, r0
 8012650:	687a      	ldr	r2, [r7, #4]
 8012652:	68f8      	ldr	r0, [r7, #12]
 8012654:	f7ff ff5a 	bl	801250c <etharp_raw>
 8012658:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801265a:	4618      	mov	r0, r3
 801265c:	3710      	adds	r7, #16
 801265e:	46bd      	mov	sp, r7
 8012660:	bd80      	pop	{r7, pc}
 8012662:	bf00      	nop
 8012664:	08017940 	.word	0x08017940

08012668 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8012668:	b580      	push	{r7, lr}
 801266a:	b082      	sub	sp, #8
 801266c:	af00      	add	r7, sp, #0
 801266e:	6078      	str	r0, [r7, #4]
 8012670:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8012672:	4a05      	ldr	r2, [pc, #20]	; (8012688 <etharp_request+0x20>)
 8012674:	6839      	ldr	r1, [r7, #0]
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff ffd4 	bl	8012624 <etharp_request_dst>
 801267c:	4603      	mov	r3, r0
}
 801267e:	4618      	mov	r0, r3
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	08017938 	.word	0x08017938

0801268c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801268c:	b580      	push	{r7, lr}
 801268e:	b08e      	sub	sp, #56	; 0x38
 8012690:	af04      	add	r7, sp, #16
 8012692:	6078      	str	r0, [r7, #4]
 8012694:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8012696:	4b79      	ldr	r3, [pc, #484]	; (801287c <icmp_input+0x1f0>)
 8012698:	689b      	ldr	r3, [r3, #8]
 801269a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801269c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801269e:	781b      	ldrb	r3, [r3, #0]
 80126a0:	f003 030f 	and.w	r3, r3, #15
 80126a4:	b2db      	uxtb	r3, r3
 80126a6:	009b      	lsls	r3, r3, #2
 80126a8:	b2db      	uxtb	r3, r3
 80126aa:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80126ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80126ae:	2b13      	cmp	r3, #19
 80126b0:	f240 80cd 	bls.w	801284e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	895b      	ldrh	r3, [r3, #10]
 80126b8:	2b03      	cmp	r3, #3
 80126ba:	f240 80ca 	bls.w	8012852 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80126be:	687b      	ldr	r3, [r7, #4]
 80126c0:	685b      	ldr	r3, [r3, #4]
 80126c2:	781b      	ldrb	r3, [r3, #0]
 80126c4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80126c8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	f000 80b7 	beq.w	8012840 <icmp_input+0x1b4>
 80126d2:	2b08      	cmp	r3, #8
 80126d4:	f040 80b7 	bne.w	8012846 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80126d8:	4b69      	ldr	r3, [pc, #420]	; (8012880 <icmp_input+0x1f4>)
 80126da:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80126dc:	4b67      	ldr	r3, [pc, #412]	; (801287c <icmp_input+0x1f0>)
 80126de:	695b      	ldr	r3, [r3, #20]
 80126e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80126e4:	2be0      	cmp	r3, #224	; 0xe0
 80126e6:	f000 80bb 	beq.w	8012860 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80126ea:	4b64      	ldr	r3, [pc, #400]	; (801287c <icmp_input+0x1f0>)
 80126ec:	695b      	ldr	r3, [r3, #20]
 80126ee:	4a63      	ldr	r2, [pc, #396]	; (801287c <icmp_input+0x1f0>)
 80126f0:	6812      	ldr	r2, [r2, #0]
 80126f2:	4611      	mov	r1, r2
 80126f4:	4618      	mov	r0, r3
 80126f6:	f000 fbed 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 80126fa:	4603      	mov	r3, r0
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	f040 80b1 	bne.w	8012864 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	891b      	ldrh	r3, [r3, #8]
 8012706:	2b07      	cmp	r3, #7
 8012708:	f240 80a5 	bls.w	8012856 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801270c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801270e:	330e      	adds	r3, #14
 8012710:	4619      	mov	r1, r3
 8012712:	6878      	ldr	r0, [r7, #4]
 8012714:	f7f8 fd66 	bl	800b1e4 <pbuf_add_header>
 8012718:	4603      	mov	r3, r0
 801271a:	2b00      	cmp	r3, #0
 801271c:	d04b      	beq.n	80127b6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	891a      	ldrh	r2, [r3, #8]
 8012722:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012724:	4413      	add	r3, r2
 8012726:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	891b      	ldrh	r3, [r3, #8]
 801272c:	8b7a      	ldrh	r2, [r7, #26]
 801272e:	429a      	cmp	r2, r3
 8012730:	f0c0 809a 	bcc.w	8012868 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012734:	8b7b      	ldrh	r3, [r7, #26]
 8012736:	f44f 7220 	mov.w	r2, #640	; 0x280
 801273a:	4619      	mov	r1, r3
 801273c:	200e      	movs	r0, #14
 801273e:	f7f8 fb03 	bl	800ad48 <pbuf_alloc>
 8012742:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012744:	697b      	ldr	r3, [r7, #20]
 8012746:	2b00      	cmp	r3, #0
 8012748:	f000 8090 	beq.w	801286c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	895b      	ldrh	r3, [r3, #10]
 8012750:	461a      	mov	r2, r3
 8012752:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012754:	3308      	adds	r3, #8
 8012756:	429a      	cmp	r2, r3
 8012758:	d203      	bcs.n	8012762 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801275a:	6978      	ldr	r0, [r7, #20]
 801275c:	f7f8 fdd8 	bl	800b310 <pbuf_free>
          goto icmperr;
 8012760:	e085      	b.n	801286e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012762:	697b      	ldr	r3, [r7, #20]
 8012764:	685b      	ldr	r3, [r3, #4]
 8012766:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801276a:	4618      	mov	r0, r3
 801276c:	f001 fb34 	bl	8013dd8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012770:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012772:	4619      	mov	r1, r3
 8012774:	6978      	ldr	r0, [r7, #20]
 8012776:	f7f8 fd45 	bl	800b204 <pbuf_remove_header>
 801277a:	4603      	mov	r3, r0
 801277c:	2b00      	cmp	r3, #0
 801277e:	d009      	beq.n	8012794 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012780:	4b40      	ldr	r3, [pc, #256]	; (8012884 <icmp_input+0x1f8>)
 8012782:	22b6      	movs	r2, #182	; 0xb6
 8012784:	4940      	ldr	r1, [pc, #256]	; (8012888 <icmp_input+0x1fc>)
 8012786:	4841      	ldr	r0, [pc, #260]	; (801288c <icmp_input+0x200>)
 8012788:	f001 fb3c 	bl	8013e04 <iprintf>
          pbuf_free(r);
 801278c:	6978      	ldr	r0, [r7, #20]
 801278e:	f7f8 fdbf 	bl	800b310 <pbuf_free>
          goto icmperr;
 8012792:	e06c      	b.n	801286e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012794:	6879      	ldr	r1, [r7, #4]
 8012796:	6978      	ldr	r0, [r7, #20]
 8012798:	f7f8 fee2 	bl	800b560 <pbuf_copy>
 801279c:	4603      	mov	r3, r0
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d003      	beq.n	80127aa <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80127a2:	6978      	ldr	r0, [r7, #20]
 80127a4:	f7f8 fdb4 	bl	800b310 <pbuf_free>
          goto icmperr;
 80127a8:	e061      	b.n	801286e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80127aa:	6878      	ldr	r0, [r7, #4]
 80127ac:	f7f8 fdb0 	bl	800b310 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80127b0:	697b      	ldr	r3, [r7, #20]
 80127b2:	607b      	str	r3, [r7, #4]
 80127b4:	e00f      	b.n	80127d6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80127b6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127b8:	330e      	adds	r3, #14
 80127ba:	4619      	mov	r1, r3
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7f8 fd21 	bl	800b204 <pbuf_remove_header>
 80127c2:	4603      	mov	r3, r0
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d006      	beq.n	80127d6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80127c8:	4b2e      	ldr	r3, [pc, #184]	; (8012884 <icmp_input+0x1f8>)
 80127ca:	22c7      	movs	r2, #199	; 0xc7
 80127cc:	4930      	ldr	r1, [pc, #192]	; (8012890 <icmp_input+0x204>)
 80127ce:	482f      	ldr	r0, [pc, #188]	; (801288c <icmp_input+0x200>)
 80127d0:	f001 fb18 	bl	8013e04 <iprintf>
          goto icmperr;
 80127d4:	e04b      	b.n	801286e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	685b      	ldr	r3, [r3, #4]
 80127da:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80127dc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80127de:	4619      	mov	r1, r3
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f7f8 fcff 	bl	800b1e4 <pbuf_add_header>
 80127e6:	4603      	mov	r3, r0
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d12b      	bne.n	8012844 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	685b      	ldr	r3, [r3, #4]
 80127f0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	681a      	ldr	r2, [r3, #0]
 80127f6:	68fb      	ldr	r3, [r7, #12]
 80127f8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 80127fa:	4b20      	ldr	r3, [pc, #128]	; (801287c <icmp_input+0x1f0>)
 80127fc:	691a      	ldr	r2, [r3, #16]
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012802:	693b      	ldr	r3, [r7, #16]
 8012804:	2200      	movs	r2, #0
 8012806:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012808:	693b      	ldr	r3, [r7, #16]
 801280a:	2200      	movs	r2, #0
 801280c:	709a      	strb	r2, [r3, #2]
 801280e:	2200      	movs	r2, #0
 8012810:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	22ff      	movs	r2, #255	; 0xff
 8012816:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	2200      	movs	r2, #0
 801281c:	729a      	strb	r2, [r3, #10]
 801281e:	2200      	movs	r2, #0
 8012820:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	9302      	str	r3, [sp, #8]
 8012826:	2301      	movs	r3, #1
 8012828:	9301      	str	r3, [sp, #4]
 801282a:	2300      	movs	r3, #0
 801282c:	9300      	str	r3, [sp, #0]
 801282e:	23ff      	movs	r3, #255	; 0xff
 8012830:	2200      	movs	r2, #0
 8012832:	69f9      	ldr	r1, [r7, #28]
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 fa75 	bl	8012d24 <ip4_output_if>
 801283a:	4603      	mov	r3, r0
 801283c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801283e:	e001      	b.n	8012844 <icmp_input+0x1b8>
      break;
 8012840:	bf00      	nop
 8012842:	e000      	b.n	8012846 <icmp_input+0x1ba>
      break;
 8012844:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012846:	6878      	ldr	r0, [r7, #4]
 8012848:	f7f8 fd62 	bl	800b310 <pbuf_free>
  return;
 801284c:	e013      	b.n	8012876 <icmp_input+0x1ea>
    goto lenerr;
 801284e:	bf00      	nop
 8012850:	e002      	b.n	8012858 <icmp_input+0x1cc>
    goto lenerr;
 8012852:	bf00      	nop
 8012854:	e000      	b.n	8012858 <icmp_input+0x1cc>
        goto lenerr;
 8012856:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012858:	6878      	ldr	r0, [r7, #4]
 801285a:	f7f8 fd59 	bl	800b310 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801285e:	e00a      	b.n	8012876 <icmp_input+0x1ea>
        goto icmperr;
 8012860:	bf00      	nop
 8012862:	e004      	b.n	801286e <icmp_input+0x1e2>
        goto icmperr;
 8012864:	bf00      	nop
 8012866:	e002      	b.n	801286e <icmp_input+0x1e2>
          goto icmperr;
 8012868:	bf00      	nop
 801286a:	e000      	b.n	801286e <icmp_input+0x1e2>
          goto icmperr;
 801286c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f7f8 fd4e 	bl	800b310 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012874:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012876:	3728      	adds	r7, #40	; 0x28
 8012878:	46bd      	mov	sp, r7
 801287a:	bd80      	pop	{r7, pc}
 801287c:	20003cbc 	.word	0x20003cbc
 8012880:	20003cd0 	.word	0x20003cd0
 8012884:	080173e4 	.word	0x080173e4
 8012888:	0801741c 	.word	0x0801741c
 801288c:	08017454 	.word	0x08017454
 8012890:	0801747c 	.word	0x0801747c

08012894 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012894:	b580      	push	{r7, lr}
 8012896:	b082      	sub	sp, #8
 8012898:	af00      	add	r7, sp, #0
 801289a:	6078      	str	r0, [r7, #4]
 801289c:	460b      	mov	r3, r1
 801289e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80128a0:	78fb      	ldrb	r3, [r7, #3]
 80128a2:	461a      	mov	r2, r3
 80128a4:	2103      	movs	r1, #3
 80128a6:	6878      	ldr	r0, [r7, #4]
 80128a8:	f000 f814 	bl	80128d4 <icmp_send_response>
}
 80128ac:	bf00      	nop
 80128ae:	3708      	adds	r7, #8
 80128b0:	46bd      	mov	sp, r7
 80128b2:	bd80      	pop	{r7, pc}

080128b4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80128b4:	b580      	push	{r7, lr}
 80128b6:	b082      	sub	sp, #8
 80128b8:	af00      	add	r7, sp, #0
 80128ba:	6078      	str	r0, [r7, #4]
 80128bc:	460b      	mov	r3, r1
 80128be:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80128c0:	78fb      	ldrb	r3, [r7, #3]
 80128c2:	461a      	mov	r2, r3
 80128c4:	210b      	movs	r1, #11
 80128c6:	6878      	ldr	r0, [r7, #4]
 80128c8:	f000 f804 	bl	80128d4 <icmp_send_response>
}
 80128cc:	bf00      	nop
 80128ce:	3708      	adds	r7, #8
 80128d0:	46bd      	mov	sp, r7
 80128d2:	bd80      	pop	{r7, pc}

080128d4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80128d4:	b580      	push	{r7, lr}
 80128d6:	b08c      	sub	sp, #48	; 0x30
 80128d8:	af04      	add	r7, sp, #16
 80128da:	6078      	str	r0, [r7, #4]
 80128dc:	460b      	mov	r3, r1
 80128de:	70fb      	strb	r3, [r7, #3]
 80128e0:	4613      	mov	r3, r2
 80128e2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 80128e4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128e8:	2124      	movs	r1, #36	; 0x24
 80128ea:	2022      	movs	r0, #34	; 0x22
 80128ec:	f7f8 fa2c 	bl	800ad48 <pbuf_alloc>
 80128f0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d04c      	beq.n	8012992 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	895b      	ldrh	r3, [r3, #10]
 80128fc:	2b23      	cmp	r3, #35	; 0x23
 80128fe:	d806      	bhi.n	801290e <icmp_send_response+0x3a>
 8012900:	4b26      	ldr	r3, [pc, #152]	; (801299c <icmp_send_response+0xc8>)
 8012902:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012906:	4926      	ldr	r1, [pc, #152]	; (80129a0 <icmp_send_response+0xcc>)
 8012908:	4826      	ldr	r0, [pc, #152]	; (80129a4 <icmp_send_response+0xd0>)
 801290a:	f001 fa7b 	bl	8013e04 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	685b      	ldr	r3, [r3, #4]
 8012912:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012914:	69fb      	ldr	r3, [r7, #28]
 8012916:	685b      	ldr	r3, [r3, #4]
 8012918:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	78fa      	ldrb	r2, [r7, #3]
 801291e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012920:	697b      	ldr	r3, [r7, #20]
 8012922:	78ba      	ldrb	r2, [r7, #2]
 8012924:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012926:	697b      	ldr	r3, [r7, #20]
 8012928:	2200      	movs	r2, #0
 801292a:	711a      	strb	r2, [r3, #4]
 801292c:	2200      	movs	r2, #0
 801292e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012930:	697b      	ldr	r3, [r7, #20]
 8012932:	2200      	movs	r2, #0
 8012934:	719a      	strb	r2, [r3, #6]
 8012936:	2200      	movs	r2, #0
 8012938:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801293a:	69fb      	ldr	r3, [r7, #28]
 801293c:	685b      	ldr	r3, [r3, #4]
 801293e:	f103 0008 	add.w	r0, r3, #8
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	685b      	ldr	r3, [r3, #4]
 8012946:	221c      	movs	r2, #28
 8012948:	4619      	mov	r1, r3
 801294a:	f001 fa45 	bl	8013dd8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801294e:	69bb      	ldr	r3, [r7, #24]
 8012950:	68db      	ldr	r3, [r3, #12]
 8012952:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012954:	f107 030c 	add.w	r3, r7, #12
 8012958:	4618      	mov	r0, r3
 801295a:	f000 f825 	bl	80129a8 <ip4_route>
 801295e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012960:	693b      	ldr	r3, [r7, #16]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d011      	beq.n	801298a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	2200      	movs	r2, #0
 801296a:	709a      	strb	r2, [r3, #2]
 801296c:	2200      	movs	r2, #0
 801296e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012970:	f107 020c 	add.w	r2, r7, #12
 8012974:	693b      	ldr	r3, [r7, #16]
 8012976:	9302      	str	r3, [sp, #8]
 8012978:	2301      	movs	r3, #1
 801297a:	9301      	str	r3, [sp, #4]
 801297c:	2300      	movs	r3, #0
 801297e:	9300      	str	r3, [sp, #0]
 8012980:	23ff      	movs	r3, #255	; 0xff
 8012982:	2100      	movs	r1, #0
 8012984:	69f8      	ldr	r0, [r7, #28]
 8012986:	f000 f9cd 	bl	8012d24 <ip4_output_if>
  }
  pbuf_free(q);
 801298a:	69f8      	ldr	r0, [r7, #28]
 801298c:	f7f8 fcc0 	bl	800b310 <pbuf_free>
 8012990:	e000      	b.n	8012994 <icmp_send_response+0xc0>
    return;
 8012992:	bf00      	nop
}
 8012994:	3720      	adds	r7, #32
 8012996:	46bd      	mov	sp, r7
 8012998:	bd80      	pop	{r7, pc}
 801299a:	bf00      	nop
 801299c:	080173e4 	.word	0x080173e4
 80129a0:	080174b0 	.word	0x080174b0
 80129a4:	08017454 	.word	0x08017454

080129a8 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80129a8:	b480      	push	{r7}
 80129aa:	b085      	sub	sp, #20
 80129ac:	af00      	add	r7, sp, #0
 80129ae:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80129b0:	4b33      	ldr	r3, [pc, #204]	; (8012a80 <ip4_route+0xd8>)
 80129b2:	681b      	ldr	r3, [r3, #0]
 80129b4:	60fb      	str	r3, [r7, #12]
 80129b6:	e036      	b.n	8012a26 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129be:	f003 0301 	and.w	r3, r3, #1
 80129c2:	b2db      	uxtb	r3, r3
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d02b      	beq.n	8012a20 <ip4_route+0x78>
 80129c8:	68fb      	ldr	r3, [r7, #12]
 80129ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80129ce:	089b      	lsrs	r3, r3, #2
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	b2db      	uxtb	r3, r3
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d022      	beq.n	8012a20 <ip4_route+0x78>
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	3304      	adds	r3, #4
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d01d      	beq.n	8012a20 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	3304      	adds	r3, #4
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	405a      	eors	r2, r3
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	3308      	adds	r3, #8
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	4013      	ands	r3, r2
 80129f8:	2b00      	cmp	r3, #0
 80129fa:	d101      	bne.n	8012a00 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80129fc:	68fb      	ldr	r3, [r7, #12]
 80129fe:	e038      	b.n	8012a72 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a06:	f003 0302 	and.w	r3, r3, #2
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d108      	bne.n	8012a20 <ip4_route+0x78>
 8012a0e:	687b      	ldr	r3, [r7, #4]
 8012a10:	681a      	ldr	r2, [r3, #0]
 8012a12:	68fb      	ldr	r3, [r7, #12]
 8012a14:	330c      	adds	r3, #12
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	429a      	cmp	r2, r3
 8012a1a:	d101      	bne.n	8012a20 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	e028      	b.n	8012a72 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012a20:	68fb      	ldr	r3, [r7, #12]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	60fb      	str	r3, [r7, #12]
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d1c5      	bne.n	80129b8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a2c:	4b15      	ldr	r3, [pc, #84]	; (8012a84 <ip4_route+0xdc>)
 8012a2e:	681b      	ldr	r3, [r3, #0]
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d01a      	beq.n	8012a6a <ip4_route+0xc2>
 8012a34:	4b13      	ldr	r3, [pc, #76]	; (8012a84 <ip4_route+0xdc>)
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a3c:	f003 0301 	and.w	r3, r3, #1
 8012a40:	2b00      	cmp	r3, #0
 8012a42:	d012      	beq.n	8012a6a <ip4_route+0xc2>
 8012a44:	4b0f      	ldr	r3, [pc, #60]	; (8012a84 <ip4_route+0xdc>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a4c:	f003 0304 	and.w	r3, r3, #4
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d00a      	beq.n	8012a6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a54:	4b0b      	ldr	r3, [pc, #44]	; (8012a84 <ip4_route+0xdc>)
 8012a56:	681b      	ldr	r3, [r3, #0]
 8012a58:	3304      	adds	r3, #4
 8012a5a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d004      	beq.n	8012a6a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	681b      	ldr	r3, [r3, #0]
 8012a64:	b2db      	uxtb	r3, r3
 8012a66:	2b7f      	cmp	r3, #127	; 0x7f
 8012a68:	d101      	bne.n	8012a6e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012a6a:	2300      	movs	r3, #0
 8012a6c:	e001      	b.n	8012a72 <ip4_route+0xca>
  }

  return netif_default;
 8012a6e:	4b05      	ldr	r3, [pc, #20]	; (8012a84 <ip4_route+0xdc>)
 8012a70:	681b      	ldr	r3, [r3, #0]
}
 8012a72:	4618      	mov	r0, r3
 8012a74:	3714      	adds	r7, #20
 8012a76:	46bd      	mov	sp, r7
 8012a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a7c:	4770      	bx	lr
 8012a7e:	bf00      	nop
 8012a80:	200071f0 	.word	0x200071f0
 8012a84:	200071f4 	.word	0x200071f4

08012a88 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012a88:	b580      	push	{r7, lr}
 8012a8a:	b082      	sub	sp, #8
 8012a8c:	af00      	add	r7, sp, #0
 8012a8e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012a96:	f003 0301 	and.w	r3, r3, #1
 8012a9a:	b2db      	uxtb	r3, r3
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d016      	beq.n	8012ace <ip4_input_accept+0x46>
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	3304      	adds	r3, #4
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	2b00      	cmp	r3, #0
 8012aa8:	d011      	beq.n	8012ace <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012aaa:	4b0b      	ldr	r3, [pc, #44]	; (8012ad8 <ip4_input_accept+0x50>)
 8012aac:	695a      	ldr	r2, [r3, #20]
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	429a      	cmp	r2, r3
 8012ab6:	d008      	beq.n	8012aca <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012ab8:	4b07      	ldr	r3, [pc, #28]	; (8012ad8 <ip4_input_accept+0x50>)
 8012aba:	695b      	ldr	r3, [r3, #20]
 8012abc:	6879      	ldr	r1, [r7, #4]
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f000 fa08 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 8012ac4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d001      	beq.n	8012ace <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012aca:	2301      	movs	r3, #1
 8012acc:	e000      	b.n	8012ad0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012ace:	2300      	movs	r3, #0
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3708      	adds	r7, #8
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}
 8012ad8:	20003cbc 	.word	0x20003cbc

08012adc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012adc:	b580      	push	{r7, lr}
 8012ade:	b086      	sub	sp, #24
 8012ae0:	af00      	add	r7, sp, #0
 8012ae2:	6078      	str	r0, [r7, #4]
 8012ae4:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	685b      	ldr	r3, [r3, #4]
 8012aea:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	781b      	ldrb	r3, [r3, #0]
 8012af0:	091b      	lsrs	r3, r3, #4
 8012af2:	b2db      	uxtb	r3, r3
 8012af4:	2b04      	cmp	r3, #4
 8012af6:	d004      	beq.n	8012b02 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012af8:	6878      	ldr	r0, [r7, #4]
 8012afa:	f7f8 fc09 	bl	800b310 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012afe:	2300      	movs	r3, #0
 8012b00:	e107      	b.n	8012d12 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012b02:	697b      	ldr	r3, [r7, #20]
 8012b04:	781b      	ldrb	r3, [r3, #0]
 8012b06:	f003 030f 	and.w	r3, r3, #15
 8012b0a:	b2db      	uxtb	r3, r3
 8012b0c:	009b      	lsls	r3, r3, #2
 8012b0e:	b2db      	uxtb	r3, r3
 8012b10:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012b12:	697b      	ldr	r3, [r7, #20]
 8012b14:	885b      	ldrh	r3, [r3, #2]
 8012b16:	b29b      	uxth	r3, r3
 8012b18:	4618      	mov	r0, r3
 8012b1a:	f7f7 f946 	bl	8009daa <lwip_htons>
 8012b1e:	4603      	mov	r3, r0
 8012b20:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	891b      	ldrh	r3, [r3, #8]
 8012b26:	89ba      	ldrh	r2, [r7, #12]
 8012b28:	429a      	cmp	r2, r3
 8012b2a:	d204      	bcs.n	8012b36 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012b2c:	89bb      	ldrh	r3, [r7, #12]
 8012b2e:	4619      	mov	r1, r3
 8012b30:	6878      	ldr	r0, [r7, #4]
 8012b32:	f7f8 fa67 	bl	800b004 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	895b      	ldrh	r3, [r3, #10]
 8012b3a:	89fa      	ldrh	r2, [r7, #14]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d807      	bhi.n	8012b50 <ip4_input+0x74>
 8012b40:	687b      	ldr	r3, [r7, #4]
 8012b42:	891b      	ldrh	r3, [r3, #8]
 8012b44:	89ba      	ldrh	r2, [r7, #12]
 8012b46:	429a      	cmp	r2, r3
 8012b48:	d802      	bhi.n	8012b50 <ip4_input+0x74>
 8012b4a:	89fb      	ldrh	r3, [r7, #14]
 8012b4c:	2b13      	cmp	r3, #19
 8012b4e:	d804      	bhi.n	8012b5a <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012b50:	6878      	ldr	r0, [r7, #4]
 8012b52:	f7f8 fbdd 	bl	800b310 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012b56:	2300      	movs	r3, #0
 8012b58:	e0db      	b.n	8012d12 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012b5a:	697b      	ldr	r3, [r7, #20]
 8012b5c:	691b      	ldr	r3, [r3, #16]
 8012b5e:	4a6f      	ldr	r2, [pc, #444]	; (8012d1c <ip4_input+0x240>)
 8012b60:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012b62:	697b      	ldr	r3, [r7, #20]
 8012b64:	68db      	ldr	r3, [r3, #12]
 8012b66:	4a6d      	ldr	r2, [pc, #436]	; (8012d1c <ip4_input+0x240>)
 8012b68:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012b6a:	4b6c      	ldr	r3, [pc, #432]	; (8012d1c <ip4_input+0x240>)
 8012b6c:	695b      	ldr	r3, [r3, #20]
 8012b6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012b72:	2be0      	cmp	r3, #224	; 0xe0
 8012b74:	d112      	bne.n	8012b9c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012b76:	683b      	ldr	r3, [r7, #0]
 8012b78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b7c:	f003 0301 	and.w	r3, r3, #1
 8012b80:	b2db      	uxtb	r3, r3
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d007      	beq.n	8012b96 <ip4_input+0xba>
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	3304      	adds	r3, #4
 8012b8a:	681b      	ldr	r3, [r3, #0]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d002      	beq.n	8012b96 <ip4_input+0xba>
      netif = inp;
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	613b      	str	r3, [r7, #16]
 8012b94:	e02a      	b.n	8012bec <ip4_input+0x110>
    } else {
      netif = NULL;
 8012b96:	2300      	movs	r3, #0
 8012b98:	613b      	str	r3, [r7, #16]
 8012b9a:	e027      	b.n	8012bec <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012b9c:	6838      	ldr	r0, [r7, #0]
 8012b9e:	f7ff ff73 	bl	8012a88 <ip4_input_accept>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d002      	beq.n	8012bae <ip4_input+0xd2>
      netif = inp;
 8012ba8:	683b      	ldr	r3, [r7, #0]
 8012baa:	613b      	str	r3, [r7, #16]
 8012bac:	e01e      	b.n	8012bec <ip4_input+0x110>
    } else {
      netif = NULL;
 8012bae:	2300      	movs	r3, #0
 8012bb0:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012bb2:	4b5a      	ldr	r3, [pc, #360]	; (8012d1c <ip4_input+0x240>)
 8012bb4:	695b      	ldr	r3, [r3, #20]
 8012bb6:	b2db      	uxtb	r3, r3
 8012bb8:	2b7f      	cmp	r3, #127	; 0x7f
 8012bba:	d017      	beq.n	8012bec <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012bbc:	4b58      	ldr	r3, [pc, #352]	; (8012d20 <ip4_input+0x244>)
 8012bbe:	681b      	ldr	r3, [r3, #0]
 8012bc0:	613b      	str	r3, [r7, #16]
 8012bc2:	e00e      	b.n	8012be2 <ip4_input+0x106>
          if (netif == inp) {
 8012bc4:	693a      	ldr	r2, [r7, #16]
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	429a      	cmp	r2, r3
 8012bca:	d006      	beq.n	8012bda <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012bcc:	6938      	ldr	r0, [r7, #16]
 8012bce:	f7ff ff5b 	bl	8012a88 <ip4_input_accept>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d108      	bne.n	8012bea <ip4_input+0x10e>
 8012bd8:	e000      	b.n	8012bdc <ip4_input+0x100>
            continue;
 8012bda:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012bdc:	693b      	ldr	r3, [r7, #16]
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	613b      	str	r3, [r7, #16]
 8012be2:	693b      	ldr	r3, [r7, #16]
 8012be4:	2b00      	cmp	r3, #0
 8012be6:	d1ed      	bne.n	8012bc4 <ip4_input+0xe8>
 8012be8:	e000      	b.n	8012bec <ip4_input+0x110>
            break;
 8012bea:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012bec:	4b4b      	ldr	r3, [pc, #300]	; (8012d1c <ip4_input+0x240>)
 8012bee:	691b      	ldr	r3, [r3, #16]
 8012bf0:	6839      	ldr	r1, [r7, #0]
 8012bf2:	4618      	mov	r0, r3
 8012bf4:	f000 f96e 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 8012bf8:	4603      	mov	r3, r0
 8012bfa:	2b00      	cmp	r3, #0
 8012bfc:	d105      	bne.n	8012c0a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012bfe:	4b47      	ldr	r3, [pc, #284]	; (8012d1c <ip4_input+0x240>)
 8012c00:	691b      	ldr	r3, [r3, #16]
 8012c02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012c06:	2be0      	cmp	r3, #224	; 0xe0
 8012c08:	d104      	bne.n	8012c14 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f7f8 fb80 	bl	800b310 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012c10:	2300      	movs	r3, #0
 8012c12:	e07e      	b.n	8012d12 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012c14:	693b      	ldr	r3, [r7, #16]
 8012c16:	2b00      	cmp	r3, #0
 8012c18:	d104      	bne.n	8012c24 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012c1a:	6878      	ldr	r0, [r7, #4]
 8012c1c:	f7f8 fb78 	bl	800b310 <pbuf_free>
    return ERR_OK;
 8012c20:	2300      	movs	r3, #0
 8012c22:	e076      	b.n	8012d12 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	88db      	ldrh	r3, [r3, #6]
 8012c28:	b29b      	uxth	r3, r3
 8012c2a:	461a      	mov	r2, r3
 8012c2c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012c30:	4013      	ands	r3, r2
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d00b      	beq.n	8012c4e <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fc92 	bl	8013560 <ip4_reass>
 8012c3c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012c3e:	687b      	ldr	r3, [r7, #4]
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	d101      	bne.n	8012c48 <ip4_input+0x16c>
      return ERR_OK;
 8012c44:	2300      	movs	r3, #0
 8012c46:	e064      	b.n	8012d12 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	685b      	ldr	r3, [r3, #4]
 8012c4c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012c4e:	4a33      	ldr	r2, [pc, #204]	; (8012d1c <ip4_input+0x240>)
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012c54:	4a31      	ldr	r2, [pc, #196]	; (8012d1c <ip4_input+0x240>)
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012c5a:	4a30      	ldr	r2, [pc, #192]	; (8012d1c <ip4_input+0x240>)
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012c60:	697b      	ldr	r3, [r7, #20]
 8012c62:	781b      	ldrb	r3, [r3, #0]
 8012c64:	f003 030f 	and.w	r3, r3, #15
 8012c68:	b2db      	uxtb	r3, r3
 8012c6a:	009b      	lsls	r3, r3, #2
 8012c6c:	b2db      	uxtb	r3, r3
 8012c6e:	b29a      	uxth	r2, r3
 8012c70:	4b2a      	ldr	r3, [pc, #168]	; (8012d1c <ip4_input+0x240>)
 8012c72:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012c74:	89fb      	ldrh	r3, [r7, #14]
 8012c76:	4619      	mov	r1, r3
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f7f8 fac3 	bl	800b204 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	7a5b      	ldrb	r3, [r3, #9]
 8012c82:	2b11      	cmp	r3, #17
 8012c84:	d006      	beq.n	8012c94 <ip4_input+0x1b8>
 8012c86:	2b11      	cmp	r3, #17
 8012c88:	dc13      	bgt.n	8012cb2 <ip4_input+0x1d6>
 8012c8a:	2b01      	cmp	r3, #1
 8012c8c:	d00c      	beq.n	8012ca8 <ip4_input+0x1cc>
 8012c8e:	2b06      	cmp	r3, #6
 8012c90:	d005      	beq.n	8012c9e <ip4_input+0x1c2>
 8012c92:	e00e      	b.n	8012cb2 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012c94:	6839      	ldr	r1, [r7, #0]
 8012c96:	6878      	ldr	r0, [r7, #4]
 8012c98:	f7fe f928 	bl	8010eec <udp_input>
        break;
 8012c9c:	e026      	b.n	8012cec <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8012c9e:	6839      	ldr	r1, [r7, #0]
 8012ca0:	6878      	ldr	r0, [r7, #4]
 8012ca2:	f7fa f96d 	bl	800cf80 <tcp_input>
        break;
 8012ca6:	e021      	b.n	8012cec <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8012ca8:	6839      	ldr	r1, [r7, #0]
 8012caa:	6878      	ldr	r0, [r7, #4]
 8012cac:	f7ff fcee 	bl	801268c <icmp_input>
        break;
 8012cb0:	e01c      	b.n	8012cec <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012cb2:	4b1a      	ldr	r3, [pc, #104]	; (8012d1c <ip4_input+0x240>)
 8012cb4:	695b      	ldr	r3, [r3, #20]
 8012cb6:	6939      	ldr	r1, [r7, #16]
 8012cb8:	4618      	mov	r0, r3
 8012cba:	f000 f90b 	bl	8012ed4 <ip4_addr_isbroadcast_u32>
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d10f      	bne.n	8012ce4 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012cc4:	4b15      	ldr	r3, [pc, #84]	; (8012d1c <ip4_input+0x240>)
 8012cc6:	695b      	ldr	r3, [r3, #20]
 8012cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8012ccc:	2be0      	cmp	r3, #224	; 0xe0
 8012cce:	d009      	beq.n	8012ce4 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8012cd0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012cd4:	4619      	mov	r1, r3
 8012cd6:	6878      	ldr	r0, [r7, #4]
 8012cd8:	f7f8 fb07 	bl	800b2ea <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8012cdc:	2102      	movs	r1, #2
 8012cde:	6878      	ldr	r0, [r7, #4]
 8012ce0:	f7ff fdd8 	bl	8012894 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7f8 fb13 	bl	800b310 <pbuf_free>
        break;
 8012cea:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8012cec:	4b0b      	ldr	r3, [pc, #44]	; (8012d1c <ip4_input+0x240>)
 8012cee:	2200      	movs	r2, #0
 8012cf0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8012cf2:	4b0a      	ldr	r3, [pc, #40]	; (8012d1c <ip4_input+0x240>)
 8012cf4:	2200      	movs	r2, #0
 8012cf6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8012cf8:	4b08      	ldr	r3, [pc, #32]	; (8012d1c <ip4_input+0x240>)
 8012cfa:	2200      	movs	r2, #0
 8012cfc:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8012cfe:	4b07      	ldr	r3, [pc, #28]	; (8012d1c <ip4_input+0x240>)
 8012d00:	2200      	movs	r2, #0
 8012d02:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8012d04:	4b05      	ldr	r3, [pc, #20]	; (8012d1c <ip4_input+0x240>)
 8012d06:	2200      	movs	r2, #0
 8012d08:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8012d0a:	4b04      	ldr	r3, [pc, #16]	; (8012d1c <ip4_input+0x240>)
 8012d0c:	2200      	movs	r2, #0
 8012d0e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8012d10:	2300      	movs	r3, #0
}
 8012d12:	4618      	mov	r0, r3
 8012d14:	3718      	adds	r7, #24
 8012d16:	46bd      	mov	sp, r7
 8012d18:	bd80      	pop	{r7, pc}
 8012d1a:	bf00      	nop
 8012d1c:	20003cbc 	.word	0x20003cbc
 8012d20:	200071f0 	.word	0x200071f0

08012d24 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8012d24:	b580      	push	{r7, lr}
 8012d26:	b08a      	sub	sp, #40	; 0x28
 8012d28:	af04      	add	r7, sp, #16
 8012d2a:	60f8      	str	r0, [r7, #12]
 8012d2c:	60b9      	str	r1, [r7, #8]
 8012d2e:	607a      	str	r2, [r7, #4]
 8012d30:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8012d32:	68bb      	ldr	r3, [r7, #8]
 8012d34:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	2b00      	cmp	r3, #0
 8012d3a:	d009      	beq.n	8012d50 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8012d3c:	68bb      	ldr	r3, [r7, #8]
 8012d3e:	2b00      	cmp	r3, #0
 8012d40:	d003      	beq.n	8012d4a <ip4_output_if+0x26>
 8012d42:	68bb      	ldr	r3, [r7, #8]
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	2b00      	cmp	r3, #0
 8012d48:	d102      	bne.n	8012d50 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8012d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d4c:	3304      	adds	r3, #4
 8012d4e:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8012d50:	78fa      	ldrb	r2, [r7, #3]
 8012d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d54:	9302      	str	r3, [sp, #8]
 8012d56:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8012d5a:	9301      	str	r3, [sp, #4]
 8012d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012d60:	9300      	str	r3, [sp, #0]
 8012d62:	4613      	mov	r3, r2
 8012d64:	687a      	ldr	r2, [r7, #4]
 8012d66:	6979      	ldr	r1, [r7, #20]
 8012d68:	68f8      	ldr	r0, [r7, #12]
 8012d6a:	f000 f805 	bl	8012d78 <ip4_output_if_src>
 8012d6e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8012d70:	4618      	mov	r0, r3
 8012d72:	3718      	adds	r7, #24
 8012d74:	46bd      	mov	sp, r7
 8012d76:	bd80      	pop	{r7, pc}

08012d78 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8012d78:	b580      	push	{r7, lr}
 8012d7a:	b088      	sub	sp, #32
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
 8012d84:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8012d86:	68fb      	ldr	r3, [r7, #12]
 8012d88:	7b9b      	ldrb	r3, [r3, #14]
 8012d8a:	2b01      	cmp	r3, #1
 8012d8c:	d006      	beq.n	8012d9c <ip4_output_if_src+0x24>
 8012d8e:	4b4b      	ldr	r3, [pc, #300]	; (8012ebc <ip4_output_if_src+0x144>)
 8012d90:	f44f 7255 	mov.w	r2, #852	; 0x354
 8012d94:	494a      	ldr	r1, [pc, #296]	; (8012ec0 <ip4_output_if_src+0x148>)
 8012d96:	484b      	ldr	r0, [pc, #300]	; (8012ec4 <ip4_output_if_src+0x14c>)
 8012d98:	f001 f834 	bl	8013e04 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	2b00      	cmp	r3, #0
 8012da0:	d060      	beq.n	8012e64 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8012da2:	2314      	movs	r3, #20
 8012da4:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8012da6:	2114      	movs	r1, #20
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7f8 fa1b 	bl	800b1e4 <pbuf_add_header>
 8012dae:	4603      	mov	r3, r0
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d002      	beq.n	8012dba <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012db4:	f06f 0301 	mvn.w	r3, #1
 8012db8:	e07c      	b.n	8012eb4 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	685b      	ldr	r3, [r3, #4]
 8012dbe:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	895b      	ldrh	r3, [r3, #10]
 8012dc4:	2b13      	cmp	r3, #19
 8012dc6:	d806      	bhi.n	8012dd6 <ip4_output_if_src+0x5e>
 8012dc8:	4b3c      	ldr	r3, [pc, #240]	; (8012ebc <ip4_output_if_src+0x144>)
 8012dca:	f44f 7262 	mov.w	r2, #904	; 0x388
 8012dce:	493e      	ldr	r1, [pc, #248]	; (8012ec8 <ip4_output_if_src+0x150>)
 8012dd0:	483c      	ldr	r0, [pc, #240]	; (8012ec4 <ip4_output_if_src+0x14c>)
 8012dd2:	f001 f817 	bl	8013e04 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8012dd6:	69fb      	ldr	r3, [r7, #28]
 8012dd8:	78fa      	ldrb	r2, [r7, #3]
 8012dda:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8012ddc:	69fb      	ldr	r3, [r7, #28]
 8012dde:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8012de2:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681a      	ldr	r2, [r3, #0]
 8012de8:	69fb      	ldr	r3, [r7, #28]
 8012dea:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8012dec:	8b7b      	ldrh	r3, [r7, #26]
 8012dee:	089b      	lsrs	r3, r3, #2
 8012df0:	b29b      	uxth	r3, r3
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012df8:	b2da      	uxtb	r2, r3
 8012dfa:	69fb      	ldr	r3, [r7, #28]
 8012dfc:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8012dfe:	69fb      	ldr	r3, [r7, #28]
 8012e00:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8012e04:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8012e06:	68fb      	ldr	r3, [r7, #12]
 8012e08:	891b      	ldrh	r3, [r3, #8]
 8012e0a:	4618      	mov	r0, r3
 8012e0c:	f7f6 ffcd 	bl	8009daa <lwip_htons>
 8012e10:	4603      	mov	r3, r0
 8012e12:	461a      	mov	r2, r3
 8012e14:	69fb      	ldr	r3, [r7, #28]
 8012e16:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8012e18:	69fb      	ldr	r3, [r7, #28]
 8012e1a:	2200      	movs	r2, #0
 8012e1c:	719a      	strb	r2, [r3, #6]
 8012e1e:	2200      	movs	r2, #0
 8012e20:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8012e22:	4b2a      	ldr	r3, [pc, #168]	; (8012ecc <ip4_output_if_src+0x154>)
 8012e24:	881b      	ldrh	r3, [r3, #0]
 8012e26:	4618      	mov	r0, r3
 8012e28:	f7f6 ffbf 	bl	8009daa <lwip_htons>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	461a      	mov	r2, r3
 8012e30:	69fb      	ldr	r3, [r7, #28]
 8012e32:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8012e34:	4b25      	ldr	r3, [pc, #148]	; (8012ecc <ip4_output_if_src+0x154>)
 8012e36:	881b      	ldrh	r3, [r3, #0]
 8012e38:	3301      	adds	r3, #1
 8012e3a:	b29a      	uxth	r2, r3
 8012e3c:	4b23      	ldr	r3, [pc, #140]	; (8012ecc <ip4_output_if_src+0x154>)
 8012e3e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	2b00      	cmp	r3, #0
 8012e44:	d104      	bne.n	8012e50 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8012e46:	4b22      	ldr	r3, [pc, #136]	; (8012ed0 <ip4_output_if_src+0x158>)
 8012e48:	681a      	ldr	r2, [r3, #0]
 8012e4a:	69fb      	ldr	r3, [r7, #28]
 8012e4c:	60da      	str	r2, [r3, #12]
 8012e4e:	e003      	b.n	8012e58 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8012e50:	68bb      	ldr	r3, [r7, #8]
 8012e52:	681a      	ldr	r2, [r3, #0]
 8012e54:	69fb      	ldr	r3, [r7, #28]
 8012e56:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8012e58:	69fb      	ldr	r3, [r7, #28]
 8012e5a:	2200      	movs	r2, #0
 8012e5c:	729a      	strb	r2, [r3, #10]
 8012e5e:	2200      	movs	r2, #0
 8012e60:	72da      	strb	r2, [r3, #11]
 8012e62:	e00f      	b.n	8012e84 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	895b      	ldrh	r3, [r3, #10]
 8012e68:	2b13      	cmp	r3, #19
 8012e6a:	d802      	bhi.n	8012e72 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8012e6c:	f06f 0301 	mvn.w	r3, #1
 8012e70:	e020      	b.n	8012eb4 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8012e72:	68fb      	ldr	r3, [r7, #12]
 8012e74:	685b      	ldr	r3, [r3, #4]
 8012e76:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8012e7e:	f107 0314 	add.w	r3, r7, #20
 8012e82:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8012e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e86:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e88:	2b00      	cmp	r3, #0
 8012e8a:	d00c      	beq.n	8012ea6 <ip4_output_if_src+0x12e>
 8012e8c:	68fb      	ldr	r3, [r7, #12]
 8012e8e:	891a      	ldrh	r2, [r3, #8]
 8012e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012e92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012e94:	429a      	cmp	r2, r3
 8012e96:	d906      	bls.n	8012ea6 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012e9c:	68f8      	ldr	r0, [r7, #12]
 8012e9e:	f000 fd4d 	bl	801393c <ip4_frag>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	e006      	b.n	8012eb4 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8012ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ea8:	695b      	ldr	r3, [r3, #20]
 8012eaa:	687a      	ldr	r2, [r7, #4]
 8012eac:	68f9      	ldr	r1, [r7, #12]
 8012eae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012eb0:	4798      	blx	r3
 8012eb2:	4603      	mov	r3, r0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3720      	adds	r7, #32
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}
 8012ebc:	080174dc 	.word	0x080174dc
 8012ec0:	08017510 	.word	0x08017510
 8012ec4:	0801751c 	.word	0x0801751c
 8012ec8:	08017544 	.word	0x08017544
 8012ecc:	20000212 	.word	0x20000212
 8012ed0:	08017934 	.word	0x08017934

08012ed4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b085      	sub	sp, #20
 8012ed8:	af00      	add	r7, sp, #0
 8012eda:	6078      	str	r0, [r7, #4]
 8012edc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012ee8:	d002      	beq.n	8012ef0 <ip4_addr_isbroadcast_u32+0x1c>
 8012eea:	687b      	ldr	r3, [r7, #4]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d101      	bne.n	8012ef4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8012ef0:	2301      	movs	r3, #1
 8012ef2:	e02a      	b.n	8012f4a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012efa:	f003 0302 	and.w	r3, r3, #2
 8012efe:	2b00      	cmp	r3, #0
 8012f00:	d101      	bne.n	8012f06 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8012f02:	2300      	movs	r3, #0
 8012f04:	e021      	b.n	8012f4a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8012f06:	683b      	ldr	r3, [r7, #0]
 8012f08:	3304      	adds	r3, #4
 8012f0a:	681b      	ldr	r3, [r3, #0]
 8012f0c:	687a      	ldr	r2, [r7, #4]
 8012f0e:	429a      	cmp	r2, r3
 8012f10:	d101      	bne.n	8012f16 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8012f12:	2300      	movs	r3, #0
 8012f14:	e019      	b.n	8012f4a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8012f16:	68fa      	ldr	r2, [r7, #12]
 8012f18:	683b      	ldr	r3, [r7, #0]
 8012f1a:	3304      	adds	r3, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	405a      	eors	r2, r3
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	3308      	adds	r3, #8
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4013      	ands	r3, r2
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d10d      	bne.n	8012f48 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	3308      	adds	r3, #8
 8012f30:	681b      	ldr	r3, [r3, #0]
 8012f32:	43da      	mvns	r2, r3
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8012f38:	683b      	ldr	r3, [r7, #0]
 8012f3a:	3308      	adds	r3, #8
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8012f40:	429a      	cmp	r2, r3
 8012f42:	d101      	bne.n	8012f48 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8012f44:	2301      	movs	r3, #1
 8012f46:	e000      	b.n	8012f4a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8012f48:	2300      	movs	r3, #0
  }
}
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	3714      	adds	r7, #20
 8012f4e:	46bd      	mov	sp, r7
 8012f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f54:	4770      	bx	lr
	...

08012f58 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8012f58:	b580      	push	{r7, lr}
 8012f5a:	b084      	sub	sp, #16
 8012f5c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8012f62:	4b12      	ldr	r3, [pc, #72]	; (8012fac <ip_reass_tmr+0x54>)
 8012f64:	681b      	ldr	r3, [r3, #0]
 8012f66:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8012f68:	e018      	b.n	8012f9c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8012f6a:	68fb      	ldr	r3, [r7, #12]
 8012f6c:	7fdb      	ldrb	r3, [r3, #31]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d00b      	beq.n	8012f8a <ip_reass_tmr+0x32>
      r->timer--;
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	7fdb      	ldrb	r3, [r3, #31]
 8012f76:	3b01      	subs	r3, #1
 8012f78:	b2da      	uxtb	r2, r3
 8012f7a:	68fb      	ldr	r3, [r7, #12]
 8012f7c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8012f82:	68fb      	ldr	r3, [r7, #12]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	60fb      	str	r3, [r7, #12]
 8012f88:	e008      	b.n	8012f9c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8012f8a:	68fb      	ldr	r3, [r7, #12]
 8012f8c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	681b      	ldr	r3, [r3, #0]
 8012f92:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8012f94:	68b9      	ldr	r1, [r7, #8]
 8012f96:	6878      	ldr	r0, [r7, #4]
 8012f98:	f000 f80a 	bl	8012fb0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d1e3      	bne.n	8012f6a <ip_reass_tmr+0x12>
    }
  }
}
 8012fa2:	bf00      	nop
 8012fa4:	bf00      	nop
 8012fa6:	3710      	adds	r7, #16
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	20000214 	.word	0x20000214

08012fb0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b088      	sub	sp, #32
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
 8012fb8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8012fba:	2300      	movs	r3, #0
 8012fbc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8012fbe:	683a      	ldr	r2, [r7, #0]
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	429a      	cmp	r2, r3
 8012fc4:	d105      	bne.n	8012fd2 <ip_reass_free_complete_datagram+0x22>
 8012fc6:	4b45      	ldr	r3, [pc, #276]	; (80130dc <ip_reass_free_complete_datagram+0x12c>)
 8012fc8:	22ab      	movs	r2, #171	; 0xab
 8012fca:	4945      	ldr	r1, [pc, #276]	; (80130e0 <ip_reass_free_complete_datagram+0x130>)
 8012fcc:	4845      	ldr	r0, [pc, #276]	; (80130e4 <ip_reass_free_complete_datagram+0x134>)
 8012fce:	f000 ff19 	bl	8013e04 <iprintf>
  if (prev != NULL) {
 8012fd2:	683b      	ldr	r3, [r7, #0]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	d00a      	beq.n	8012fee <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8012fd8:	683b      	ldr	r3, [r7, #0]
 8012fda:	681b      	ldr	r3, [r3, #0]
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	429a      	cmp	r2, r3
 8012fe0:	d005      	beq.n	8012fee <ip_reass_free_complete_datagram+0x3e>
 8012fe2:	4b3e      	ldr	r3, [pc, #248]	; (80130dc <ip_reass_free_complete_datagram+0x12c>)
 8012fe4:	22ad      	movs	r2, #173	; 0xad
 8012fe6:	4940      	ldr	r1, [pc, #256]	; (80130e8 <ip_reass_free_complete_datagram+0x138>)
 8012fe8:	483e      	ldr	r0, [pc, #248]	; (80130e4 <ip_reass_free_complete_datagram+0x134>)
 8012fea:	f000 ff0b 	bl	8013e04 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	685b      	ldr	r3, [r3, #4]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8012ff6:	697b      	ldr	r3, [r7, #20]
 8012ff8:	889b      	ldrh	r3, [r3, #4]
 8012ffa:	b29b      	uxth	r3, r3
 8012ffc:	2b00      	cmp	r3, #0
 8012ffe:	d12a      	bne.n	8013056 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013000:	687b      	ldr	r3, [r7, #4]
 8013002:	685b      	ldr	r3, [r3, #4]
 8013004:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	681a      	ldr	r2, [r3, #0]
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801300e:	69bb      	ldr	r3, [r7, #24]
 8013010:	6858      	ldr	r0, [r3, #4]
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	3308      	adds	r3, #8
 8013016:	2214      	movs	r2, #20
 8013018:	4619      	mov	r1, r3
 801301a:	f000 fedd 	bl	8013dd8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801301e:	2101      	movs	r1, #1
 8013020:	69b8      	ldr	r0, [r7, #24]
 8013022:	f7ff fc47 	bl	80128b4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8013026:	69b8      	ldr	r0, [r7, #24]
 8013028:	f7f8 f9fa 	bl	800b420 <pbuf_clen>
 801302c:	4603      	mov	r3, r0
 801302e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013030:	8bfa      	ldrh	r2, [r7, #30]
 8013032:	8a7b      	ldrh	r3, [r7, #18]
 8013034:	4413      	add	r3, r2
 8013036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801303a:	db05      	blt.n	8013048 <ip_reass_free_complete_datagram+0x98>
 801303c:	4b27      	ldr	r3, [pc, #156]	; (80130dc <ip_reass_free_complete_datagram+0x12c>)
 801303e:	22bc      	movs	r2, #188	; 0xbc
 8013040:	492a      	ldr	r1, [pc, #168]	; (80130ec <ip_reass_free_complete_datagram+0x13c>)
 8013042:	4828      	ldr	r0, [pc, #160]	; (80130e4 <ip_reass_free_complete_datagram+0x134>)
 8013044:	f000 fede 	bl	8013e04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013048:	8bfa      	ldrh	r2, [r7, #30]
 801304a:	8a7b      	ldrh	r3, [r7, #18]
 801304c:	4413      	add	r3, r2
 801304e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8013050:	69b8      	ldr	r0, [r7, #24]
 8013052:	f7f8 f95d 	bl	800b310 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801305c:	e01f      	b.n	801309e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801305e:	69bb      	ldr	r3, [r7, #24]
 8013060:	685b      	ldr	r3, [r3, #4]
 8013062:	617b      	str	r3, [r7, #20]
    pcur = p;
 8013064:	69bb      	ldr	r3, [r7, #24]
 8013066:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801306e:	68f8      	ldr	r0, [r7, #12]
 8013070:	f7f8 f9d6 	bl	800b420 <pbuf_clen>
 8013074:	4603      	mov	r3, r0
 8013076:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013078:	8bfa      	ldrh	r2, [r7, #30]
 801307a:	8a7b      	ldrh	r3, [r7, #18]
 801307c:	4413      	add	r3, r2
 801307e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013082:	db05      	blt.n	8013090 <ip_reass_free_complete_datagram+0xe0>
 8013084:	4b15      	ldr	r3, [pc, #84]	; (80130dc <ip_reass_free_complete_datagram+0x12c>)
 8013086:	22cc      	movs	r2, #204	; 0xcc
 8013088:	4918      	ldr	r1, [pc, #96]	; (80130ec <ip_reass_free_complete_datagram+0x13c>)
 801308a:	4816      	ldr	r0, [pc, #88]	; (80130e4 <ip_reass_free_complete_datagram+0x134>)
 801308c:	f000 feba 	bl	8013e04 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8013090:	8bfa      	ldrh	r2, [r7, #30]
 8013092:	8a7b      	ldrh	r3, [r7, #18]
 8013094:	4413      	add	r3, r2
 8013096:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f7f8 f939 	bl	800b310 <pbuf_free>
  while (p != NULL) {
 801309e:	69bb      	ldr	r3, [r7, #24]
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d1dc      	bne.n	801305e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80130a4:	6839      	ldr	r1, [r7, #0]
 80130a6:	6878      	ldr	r0, [r7, #4]
 80130a8:	f000 f8c2 	bl	8013230 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80130ac:	4b10      	ldr	r3, [pc, #64]	; (80130f0 <ip_reass_free_complete_datagram+0x140>)
 80130ae:	881b      	ldrh	r3, [r3, #0]
 80130b0:	8bfa      	ldrh	r2, [r7, #30]
 80130b2:	429a      	cmp	r2, r3
 80130b4:	d905      	bls.n	80130c2 <ip_reass_free_complete_datagram+0x112>
 80130b6:	4b09      	ldr	r3, [pc, #36]	; (80130dc <ip_reass_free_complete_datagram+0x12c>)
 80130b8:	22d2      	movs	r2, #210	; 0xd2
 80130ba:	490e      	ldr	r1, [pc, #56]	; (80130f4 <ip_reass_free_complete_datagram+0x144>)
 80130bc:	4809      	ldr	r0, [pc, #36]	; (80130e4 <ip_reass_free_complete_datagram+0x134>)
 80130be:	f000 fea1 	bl	8013e04 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80130c2:	4b0b      	ldr	r3, [pc, #44]	; (80130f0 <ip_reass_free_complete_datagram+0x140>)
 80130c4:	881a      	ldrh	r2, [r3, #0]
 80130c6:	8bfb      	ldrh	r3, [r7, #30]
 80130c8:	1ad3      	subs	r3, r2, r3
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	4b08      	ldr	r3, [pc, #32]	; (80130f0 <ip_reass_free_complete_datagram+0x140>)
 80130ce:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80130d0:	8bfb      	ldrh	r3, [r7, #30]
}
 80130d2:	4618      	mov	r0, r3
 80130d4:	3720      	adds	r7, #32
 80130d6:	46bd      	mov	sp, r7
 80130d8:	bd80      	pop	{r7, pc}
 80130da:	bf00      	nop
 80130dc:	08017574 	.word	0x08017574
 80130e0:	080175b0 	.word	0x080175b0
 80130e4:	080175bc 	.word	0x080175bc
 80130e8:	080175e4 	.word	0x080175e4
 80130ec:	080175f8 	.word	0x080175f8
 80130f0:	20000218 	.word	0x20000218
 80130f4:	08017618 	.word	0x08017618

080130f8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80130f8:	b580      	push	{r7, lr}
 80130fa:	b08a      	sub	sp, #40	; 0x28
 80130fc:	af00      	add	r7, sp, #0
 80130fe:	6078      	str	r0, [r7, #4]
 8013100:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013102:	2300      	movs	r3, #0
 8013104:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8013106:	2300      	movs	r3, #0
 8013108:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801310a:	2300      	movs	r3, #0
 801310c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801310e:	2300      	movs	r3, #0
 8013110:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013112:	2300      	movs	r3, #0
 8013114:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8013116:	4b28      	ldr	r3, [pc, #160]	; (80131b8 <ip_reass_remove_oldest_datagram+0xc0>)
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801311c:	e030      	b.n	8013180 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801311e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013120:	695a      	ldr	r2, [r3, #20]
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	68db      	ldr	r3, [r3, #12]
 8013126:	429a      	cmp	r2, r3
 8013128:	d10c      	bne.n	8013144 <ip_reass_remove_oldest_datagram+0x4c>
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	699a      	ldr	r2, [r3, #24]
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	691b      	ldr	r3, [r3, #16]
 8013132:	429a      	cmp	r2, r3
 8013134:	d106      	bne.n	8013144 <ip_reass_remove_oldest_datagram+0x4c>
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	899a      	ldrh	r2, [r3, #12]
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	889b      	ldrh	r3, [r3, #4]
 801313e:	b29b      	uxth	r3, r3
 8013140:	429a      	cmp	r2, r3
 8013142:	d014      	beq.n	801316e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8013144:	693b      	ldr	r3, [r7, #16]
 8013146:	3301      	adds	r3, #1
 8013148:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801314a:	6a3b      	ldr	r3, [r7, #32]
 801314c:	2b00      	cmp	r3, #0
 801314e:	d104      	bne.n	801315a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8013154:	69fb      	ldr	r3, [r7, #28]
 8013156:	61bb      	str	r3, [r7, #24]
 8013158:	e009      	b.n	801316e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	7fda      	ldrb	r2, [r3, #31]
 801315e:	6a3b      	ldr	r3, [r7, #32]
 8013160:	7fdb      	ldrb	r3, [r3, #31]
 8013162:	429a      	cmp	r2, r3
 8013164:	d803      	bhi.n	801316e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8013166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013168:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801316a:	69fb      	ldr	r3, [r7, #28]
 801316c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801316e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013170:	681b      	ldr	r3, [r3, #0]
 8013172:	2b00      	cmp	r3, #0
 8013174:	d001      	beq.n	801317a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8013176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013178:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801317a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801317c:	681b      	ldr	r3, [r3, #0]
 801317e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013182:	2b00      	cmp	r3, #0
 8013184:	d1cb      	bne.n	801311e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8013186:	6a3b      	ldr	r3, [r7, #32]
 8013188:	2b00      	cmp	r3, #0
 801318a:	d008      	beq.n	801319e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801318c:	69b9      	ldr	r1, [r7, #24]
 801318e:	6a38      	ldr	r0, [r7, #32]
 8013190:	f7ff ff0e 	bl	8012fb0 <ip_reass_free_complete_datagram>
 8013194:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8013196:	697a      	ldr	r2, [r7, #20]
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	4413      	add	r3, r2
 801319c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801319e:	697a      	ldr	r2, [r7, #20]
 80131a0:	683b      	ldr	r3, [r7, #0]
 80131a2:	429a      	cmp	r2, r3
 80131a4:	da02      	bge.n	80131ac <ip_reass_remove_oldest_datagram+0xb4>
 80131a6:	693b      	ldr	r3, [r7, #16]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	dcac      	bgt.n	8013106 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80131ac:	697b      	ldr	r3, [r7, #20]
}
 80131ae:	4618      	mov	r0, r3
 80131b0:	3728      	adds	r7, #40	; 0x28
 80131b2:	46bd      	mov	sp, r7
 80131b4:	bd80      	pop	{r7, pc}
 80131b6:	bf00      	nop
 80131b8:	20000214 	.word	0x20000214

080131bc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131c6:	2004      	movs	r0, #4
 80131c8:	f7f7 fa44 	bl	800a654 <memp_malloc>
 80131cc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d110      	bne.n	80131f6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80131d4:	6839      	ldr	r1, [r7, #0]
 80131d6:	6878      	ldr	r0, [r7, #4]
 80131d8:	f7ff ff8e 	bl	80130f8 <ip_reass_remove_oldest_datagram>
 80131dc:	4602      	mov	r2, r0
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	4293      	cmp	r3, r2
 80131e2:	dc03      	bgt.n	80131ec <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80131e4:	2004      	movs	r0, #4
 80131e6:	f7f7 fa35 	bl	800a654 <memp_malloc>
 80131ea:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d101      	bne.n	80131f6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	e016      	b.n	8013224 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80131f6:	2220      	movs	r2, #32
 80131f8:	2100      	movs	r1, #0
 80131fa:	68f8      	ldr	r0, [r7, #12]
 80131fc:	f000 fdfa 	bl	8013df4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013200:	68fb      	ldr	r3, [r7, #12]
 8013202:	220f      	movs	r2, #15
 8013204:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8013206:	4b09      	ldr	r3, [pc, #36]	; (801322c <ip_reass_enqueue_new_datagram+0x70>)
 8013208:	681a      	ldr	r2, [r3, #0]
 801320a:	68fb      	ldr	r3, [r7, #12]
 801320c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801320e:	4a07      	ldr	r2, [pc, #28]	; (801322c <ip_reass_enqueue_new_datagram+0x70>)
 8013210:	68fb      	ldr	r3, [r7, #12]
 8013212:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	3308      	adds	r3, #8
 8013218:	2214      	movs	r2, #20
 801321a:	6879      	ldr	r1, [r7, #4]
 801321c:	4618      	mov	r0, r3
 801321e:	f000 fddb 	bl	8013dd8 <memcpy>
  return ipr;
 8013222:	68fb      	ldr	r3, [r7, #12]
}
 8013224:	4618      	mov	r0, r3
 8013226:	3710      	adds	r7, #16
 8013228:	46bd      	mov	sp, r7
 801322a:	bd80      	pop	{r7, pc}
 801322c:	20000214 	.word	0x20000214

08013230 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013230:	b580      	push	{r7, lr}
 8013232:	b082      	sub	sp, #8
 8013234:	af00      	add	r7, sp, #0
 8013236:	6078      	str	r0, [r7, #4]
 8013238:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801323a:	4b10      	ldr	r3, [pc, #64]	; (801327c <ip_reass_dequeue_datagram+0x4c>)
 801323c:	681b      	ldr	r3, [r3, #0]
 801323e:	687a      	ldr	r2, [r7, #4]
 8013240:	429a      	cmp	r2, r3
 8013242:	d104      	bne.n	801324e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	4a0c      	ldr	r2, [pc, #48]	; (801327c <ip_reass_dequeue_datagram+0x4c>)
 801324a:	6013      	str	r3, [r2, #0]
 801324c:	e00d      	b.n	801326a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801324e:	683b      	ldr	r3, [r7, #0]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d106      	bne.n	8013262 <ip_reass_dequeue_datagram+0x32>
 8013254:	4b0a      	ldr	r3, [pc, #40]	; (8013280 <ip_reass_dequeue_datagram+0x50>)
 8013256:	f240 1245 	movw	r2, #325	; 0x145
 801325a:	490a      	ldr	r1, [pc, #40]	; (8013284 <ip_reass_dequeue_datagram+0x54>)
 801325c:	480a      	ldr	r0, [pc, #40]	; (8013288 <ip_reass_dequeue_datagram+0x58>)
 801325e:	f000 fdd1 	bl	8013e04 <iprintf>
    prev->next = ipr->next;
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	681a      	ldr	r2, [r3, #0]
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801326a:	6879      	ldr	r1, [r7, #4]
 801326c:	2004      	movs	r0, #4
 801326e:	f7f7 fa3d 	bl	800a6ec <memp_free>
}
 8013272:	bf00      	nop
 8013274:	3708      	adds	r7, #8
 8013276:	46bd      	mov	sp, r7
 8013278:	bd80      	pop	{r7, pc}
 801327a:	bf00      	nop
 801327c:	20000214 	.word	0x20000214
 8013280:	08017574 	.word	0x08017574
 8013284:	0801763c 	.word	0x0801763c
 8013288:	080175bc 	.word	0x080175bc

0801328c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801328c:	b580      	push	{r7, lr}
 801328e:	b08c      	sub	sp, #48	; 0x30
 8013290:	af00      	add	r7, sp, #0
 8013292:	60f8      	str	r0, [r7, #12]
 8013294:	60b9      	str	r1, [r7, #8]
 8013296:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8013298:	2300      	movs	r3, #0
 801329a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801329c:	2301      	movs	r3, #1
 801329e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	685b      	ldr	r3, [r3, #4]
 80132a4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80132a6:	69fb      	ldr	r3, [r7, #28]
 80132a8:	885b      	ldrh	r3, [r3, #2]
 80132aa:	b29b      	uxth	r3, r3
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7f6 fd7c 	bl	8009daa <lwip_htons>
 80132b2:	4603      	mov	r3, r0
 80132b4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80132b6:	69fb      	ldr	r3, [r7, #28]
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	f003 030f 	and.w	r3, r3, #15
 80132be:	b2db      	uxtb	r3, r3
 80132c0:	009b      	lsls	r3, r3, #2
 80132c2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80132c4:	7e7b      	ldrb	r3, [r7, #25]
 80132c6:	b29b      	uxth	r3, r3
 80132c8:	8b7a      	ldrh	r2, [r7, #26]
 80132ca:	429a      	cmp	r2, r3
 80132cc:	d202      	bcs.n	80132d4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80132ce:	f04f 33ff 	mov.w	r3, #4294967295
 80132d2:	e135      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80132d4:	7e7b      	ldrb	r3, [r7, #25]
 80132d6:	b29b      	uxth	r3, r3
 80132d8:	8b7a      	ldrh	r2, [r7, #26]
 80132da:	1ad3      	subs	r3, r2, r3
 80132dc:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	88db      	ldrh	r3, [r3, #6]
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	4618      	mov	r0, r3
 80132e6:	f7f6 fd60 	bl	8009daa <lwip_htons>
 80132ea:	4603      	mov	r3, r0
 80132ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	00db      	lsls	r3, r3, #3
 80132f4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	685b      	ldr	r3, [r3, #4]
 80132fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80132fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80132fe:	2200      	movs	r2, #0
 8013300:	701a      	strb	r2, [r3, #0]
 8013302:	2200      	movs	r2, #0
 8013304:	705a      	strb	r2, [r3, #1]
 8013306:	2200      	movs	r2, #0
 8013308:	709a      	strb	r2, [r3, #2]
 801330a:	2200      	movs	r2, #0
 801330c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013310:	8afa      	ldrh	r2, [r7, #22]
 8013312:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013314:	8afa      	ldrh	r2, [r7, #22]
 8013316:	8b7b      	ldrh	r3, [r7, #26]
 8013318:	4413      	add	r3, r2
 801331a:	b29a      	uxth	r2, r3
 801331c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801331e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013322:	88db      	ldrh	r3, [r3, #6]
 8013324:	b29b      	uxth	r3, r3
 8013326:	8afa      	ldrh	r2, [r7, #22]
 8013328:	429a      	cmp	r2, r3
 801332a:	d902      	bls.n	8013332 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801332c:	f04f 33ff 	mov.w	r3, #4294967295
 8013330:	e106      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	685b      	ldr	r3, [r3, #4]
 8013336:	627b      	str	r3, [r7, #36]	; 0x24
 8013338:	e068      	b.n	801340c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801333c:	685b      	ldr	r3, [r3, #4]
 801333e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8013340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013342:	889b      	ldrh	r3, [r3, #4]
 8013344:	b29a      	uxth	r2, r3
 8013346:	693b      	ldr	r3, [r7, #16]
 8013348:	889b      	ldrh	r3, [r3, #4]
 801334a:	b29b      	uxth	r3, r3
 801334c:	429a      	cmp	r2, r3
 801334e:	d235      	bcs.n	80133bc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8013350:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013352:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013354:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8013356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013358:	2b00      	cmp	r3, #0
 801335a:	d020      	beq.n	801339e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801335c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801335e:	889b      	ldrh	r3, [r3, #4]
 8013360:	b29a      	uxth	r2, r3
 8013362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013364:	88db      	ldrh	r3, [r3, #6]
 8013366:	b29b      	uxth	r3, r3
 8013368:	429a      	cmp	r2, r3
 801336a:	d307      	bcc.n	801337c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801336c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801336e:	88db      	ldrh	r3, [r3, #6]
 8013370:	b29a      	uxth	r2, r3
 8013372:	693b      	ldr	r3, [r7, #16]
 8013374:	889b      	ldrh	r3, [r3, #4]
 8013376:	b29b      	uxth	r3, r3
 8013378:	429a      	cmp	r2, r3
 801337a:	d902      	bls.n	8013382 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801337c:	f04f 33ff 	mov.w	r3, #4294967295
 8013380:	e0de      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8013382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013384:	68ba      	ldr	r2, [r7, #8]
 8013386:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8013388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801338a:	88db      	ldrh	r3, [r3, #6]
 801338c:	b29a      	uxth	r2, r3
 801338e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013390:	889b      	ldrh	r3, [r3, #4]
 8013392:	b29b      	uxth	r3, r3
 8013394:	429a      	cmp	r2, r3
 8013396:	d03d      	beq.n	8013414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013398:	2300      	movs	r3, #0
 801339a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801339c:	e03a      	b.n	8013414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801339e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133a0:	88db      	ldrh	r3, [r3, #6]
 80133a2:	b29a      	uxth	r2, r3
 80133a4:	693b      	ldr	r3, [r7, #16]
 80133a6:	889b      	ldrh	r3, [r3, #4]
 80133a8:	b29b      	uxth	r3, r3
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d902      	bls.n	80133b4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133ae:	f04f 33ff 	mov.w	r3, #4294967295
 80133b2:	e0c5      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	68ba      	ldr	r2, [r7, #8]
 80133b8:	605a      	str	r2, [r3, #4]
      break;
 80133ba:	e02b      	b.n	8013414 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80133bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133be:	889b      	ldrh	r3, [r3, #4]
 80133c0:	b29a      	uxth	r2, r3
 80133c2:	693b      	ldr	r3, [r7, #16]
 80133c4:	889b      	ldrh	r3, [r3, #4]
 80133c6:	b29b      	uxth	r3, r3
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d102      	bne.n	80133d2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133cc:	f04f 33ff 	mov.w	r3, #4294967295
 80133d0:	e0b6      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80133d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80133d4:	889b      	ldrh	r3, [r3, #4]
 80133d6:	b29a      	uxth	r2, r3
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	88db      	ldrh	r3, [r3, #6]
 80133dc:	b29b      	uxth	r3, r3
 80133de:	429a      	cmp	r2, r3
 80133e0:	d202      	bcs.n	80133e8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80133e2:	f04f 33ff 	mov.w	r3, #4294967295
 80133e6:	e0ab      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80133e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133ea:	2b00      	cmp	r3, #0
 80133ec:	d009      	beq.n	8013402 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80133ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80133f0:	88db      	ldrh	r3, [r3, #6]
 80133f2:	b29a      	uxth	r2, r3
 80133f4:	693b      	ldr	r3, [r7, #16]
 80133f6:	889b      	ldrh	r3, [r3, #4]
 80133f8:	b29b      	uxth	r3, r3
 80133fa:	429a      	cmp	r2, r3
 80133fc:	d001      	beq.n	8013402 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80133fe:	2300      	movs	r3, #0
 8013400:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013402:	693b      	ldr	r3, [r7, #16]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8013408:	693b      	ldr	r3, [r7, #16]
 801340a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801340c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801340e:	2b00      	cmp	r3, #0
 8013410:	d193      	bne.n	801333a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013412:	e000      	b.n	8013416 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013414:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8013416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013418:	2b00      	cmp	r3, #0
 801341a:	d12d      	bne.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801341c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801341e:	2b00      	cmp	r3, #0
 8013420:	d01c      	beq.n	801345c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013424:	88db      	ldrh	r3, [r3, #6]
 8013426:	b29a      	uxth	r2, r3
 8013428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801342a:	889b      	ldrh	r3, [r3, #4]
 801342c:	b29b      	uxth	r3, r3
 801342e:	429a      	cmp	r2, r3
 8013430:	d906      	bls.n	8013440 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013432:	4b45      	ldr	r3, [pc, #276]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013434:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8013438:	4944      	ldr	r1, [pc, #272]	; (801354c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801343a:	4845      	ldr	r0, [pc, #276]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801343c:	f000 fce2 	bl	8013e04 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8013440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013442:	68ba      	ldr	r2, [r7, #8]
 8013444:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8013446:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013448:	88db      	ldrh	r3, [r3, #6]
 801344a:	b29a      	uxth	r2, r3
 801344c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801344e:	889b      	ldrh	r3, [r3, #4]
 8013450:	b29b      	uxth	r3, r3
 8013452:	429a      	cmp	r2, r3
 8013454:	d010      	beq.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8013456:	2300      	movs	r3, #0
 8013458:	623b      	str	r3, [r7, #32]
 801345a:	e00d      	b.n	8013478 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	685b      	ldr	r3, [r3, #4]
 8013460:	2b00      	cmp	r3, #0
 8013462:	d006      	beq.n	8013472 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8013464:	4b38      	ldr	r3, [pc, #224]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013466:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801346a:	493a      	ldr	r1, [pc, #232]	; (8013554 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801346c:	4838      	ldr	r0, [pc, #224]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801346e:	f000 fcc9 	bl	8013e04 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	68ba      	ldr	r2, [r7, #8]
 8013476:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d105      	bne.n	801348a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801347e:	68fb      	ldr	r3, [r7, #12]
 8013480:	7f9b      	ldrb	r3, [r3, #30]
 8013482:	f003 0301 	and.w	r3, r3, #1
 8013486:	2b00      	cmp	r3, #0
 8013488:	d059      	beq.n	801353e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801348a:	6a3b      	ldr	r3, [r7, #32]
 801348c:	2b00      	cmp	r3, #0
 801348e:	d04f      	beq.n	8013530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8013490:	68fb      	ldr	r3, [r7, #12]
 8013492:	685b      	ldr	r3, [r3, #4]
 8013494:	2b00      	cmp	r3, #0
 8013496:	d006      	beq.n	80134a6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8013498:	68fb      	ldr	r3, [r7, #12]
 801349a:	685b      	ldr	r3, [r3, #4]
 801349c:	685b      	ldr	r3, [r3, #4]
 801349e:	889b      	ldrh	r3, [r3, #4]
 80134a0:	b29b      	uxth	r3, r3
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d002      	beq.n	80134ac <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80134a6:	2300      	movs	r3, #0
 80134a8:	623b      	str	r3, [r7, #32]
 80134aa:	e041      	b.n	8013530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80134ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134ae:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80134b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134b2:	681b      	ldr	r3, [r3, #0]
 80134b4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134b6:	e012      	b.n	80134de <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80134b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134ba:	685b      	ldr	r3, [r3, #4]
 80134bc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80134be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134c0:	88db      	ldrh	r3, [r3, #6]
 80134c2:	b29a      	uxth	r2, r3
 80134c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134c6:	889b      	ldrh	r3, [r3, #4]
 80134c8:	b29b      	uxth	r3, r3
 80134ca:	429a      	cmp	r2, r3
 80134cc:	d002      	beq.n	80134d4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80134ce:	2300      	movs	r3, #0
 80134d0:	623b      	str	r3, [r7, #32]
            break;
 80134d2:	e007      	b.n	80134e4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80134d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134d6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80134d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80134da:	681b      	ldr	r3, [r3, #0]
 80134dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80134de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d1e9      	bne.n	80134b8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80134e4:	6a3b      	ldr	r3, [r7, #32]
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d022      	beq.n	8013530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80134ea:	68fb      	ldr	r3, [r7, #12]
 80134ec:	685b      	ldr	r3, [r3, #4]
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d106      	bne.n	8013500 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80134f2:	4b15      	ldr	r3, [pc, #84]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80134f4:	f240 12df 	movw	r2, #479	; 0x1df
 80134f8:	4917      	ldr	r1, [pc, #92]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80134fa:	4815      	ldr	r0, [pc, #84]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80134fc:	f000 fc82 	bl	8013e04 <iprintf>
          LWIP_ASSERT("sanity check",
 8013500:	68fb      	ldr	r3, [r7, #12]
 8013502:	685b      	ldr	r3, [r3, #4]
 8013504:	685b      	ldr	r3, [r3, #4]
 8013506:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013508:	429a      	cmp	r2, r3
 801350a:	d106      	bne.n	801351a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801350c:	4b0e      	ldr	r3, [pc, #56]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801350e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013512:	4911      	ldr	r1, [pc, #68]	; (8013558 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013514:	480e      	ldr	r0, [pc, #56]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013516:	f000 fc75 	bl	8013e04 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	2b00      	cmp	r3, #0
 8013520:	d006      	beq.n	8013530 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013522:	4b09      	ldr	r3, [pc, #36]	; (8013548 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013524:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8013528:	490c      	ldr	r1, [pc, #48]	; (801355c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801352a:	4809      	ldr	r0, [pc, #36]	; (8013550 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801352c:	f000 fc6a 	bl	8013e04 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013530:	6a3b      	ldr	r3, [r7, #32]
 8013532:	2b00      	cmp	r3, #0
 8013534:	bf14      	ite	ne
 8013536:	2301      	movne	r3, #1
 8013538:	2300      	moveq	r3, #0
 801353a:	b2db      	uxtb	r3, r3
 801353c:	e000      	b.n	8013540 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801353e:	2300      	movs	r3, #0
}
 8013540:	4618      	mov	r0, r3
 8013542:	3730      	adds	r7, #48	; 0x30
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	08017574 	.word	0x08017574
 801354c:	08017658 	.word	0x08017658
 8013550:	080175bc 	.word	0x080175bc
 8013554:	08017678 	.word	0x08017678
 8013558:	080176b0 	.word	0x080176b0
 801355c:	080176c0 	.word	0x080176c0

08013560 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8013560:	b580      	push	{r7, lr}
 8013562:	b08e      	sub	sp, #56	; 0x38
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	685b      	ldr	r3, [r3, #4]
 801356c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801356e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013570:	781b      	ldrb	r3, [r3, #0]
 8013572:	f003 030f 	and.w	r3, r3, #15
 8013576:	b2db      	uxtb	r3, r3
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	b2db      	uxtb	r3, r3
 801357c:	2b14      	cmp	r3, #20
 801357e:	f040 8167 	bne.w	8013850 <ip4_reass+0x2f0>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8013582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013584:	88db      	ldrh	r3, [r3, #6]
 8013586:	b29b      	uxth	r3, r3
 8013588:	4618      	mov	r0, r3
 801358a:	f7f6 fc0e 	bl	8009daa <lwip_htons>
 801358e:	4603      	mov	r3, r0
 8013590:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013594:	b29b      	uxth	r3, r3
 8013596:	00db      	lsls	r3, r3, #3
 8013598:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359c:	885b      	ldrh	r3, [r3, #2]
 801359e:	b29b      	uxth	r3, r3
 80135a0:	4618      	mov	r0, r3
 80135a2:	f7f6 fc02 	bl	8009daa <lwip_htons>
 80135a6:	4603      	mov	r3, r0
 80135a8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80135aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	f003 030f 	and.w	r3, r3, #15
 80135b2:	b2db      	uxtb	r3, r3
 80135b4:	009b      	lsls	r3, r3, #2
 80135b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80135ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135be:	b29b      	uxth	r3, r3
 80135c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135c2:	429a      	cmp	r2, r3
 80135c4:	f0c0 8146 	bcc.w	8013854 <ip4_reass+0x2f4>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80135c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80135cc:	b29b      	uxth	r3, r3
 80135ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80135d0:	1ad3      	subs	r3, r2, r3
 80135d2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80135d4:	6878      	ldr	r0, [r7, #4]
 80135d6:	f7f7 ff23 	bl	800b420 <pbuf_clen>
 80135da:	4603      	mov	r3, r0
 80135dc:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80135de:	4b9f      	ldr	r3, [pc, #636]	; (801385c <ip4_reass+0x2fc>)
 80135e0:	881b      	ldrh	r3, [r3, #0]
 80135e2:	461a      	mov	r2, r3
 80135e4:	8c3b      	ldrh	r3, [r7, #32]
 80135e6:	4413      	add	r3, r2
 80135e8:	2b0a      	cmp	r3, #10
 80135ea:	dd10      	ble.n	801360e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80135ec:	8c3b      	ldrh	r3, [r7, #32]
 80135ee:	4619      	mov	r1, r3
 80135f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80135f2:	f7ff fd81 	bl	80130f8 <ip_reass_remove_oldest_datagram>
 80135f6:	4603      	mov	r3, r0
 80135f8:	2b00      	cmp	r3, #0
 80135fa:	f000 812d 	beq.w	8013858 <ip4_reass+0x2f8>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80135fe:	4b97      	ldr	r3, [pc, #604]	; (801385c <ip4_reass+0x2fc>)
 8013600:	881b      	ldrh	r3, [r3, #0]
 8013602:	461a      	mov	r2, r3
 8013604:	8c3b      	ldrh	r3, [r7, #32]
 8013606:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013608:	2b0a      	cmp	r3, #10
 801360a:	f300 8125 	bgt.w	8013858 <ip4_reass+0x2f8>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801360e:	4b94      	ldr	r3, [pc, #592]	; (8013860 <ip4_reass+0x300>)
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	633b      	str	r3, [r7, #48]	; 0x30
 8013614:	e015      	b.n	8013642 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8013616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013618:	695a      	ldr	r2, [r3, #20]
 801361a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	429a      	cmp	r2, r3
 8013620:	d10c      	bne.n	801363c <ip4_reass+0xdc>
 8013622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013624:	699a      	ldr	r2, [r3, #24]
 8013626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013628:	691b      	ldr	r3, [r3, #16]
 801362a:	429a      	cmp	r2, r3
 801362c:	d106      	bne.n	801363c <ip4_reass+0xdc>
 801362e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013630:	899a      	ldrh	r2, [r3, #12]
 8013632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013634:	889b      	ldrh	r3, [r3, #4]
 8013636:	b29b      	uxth	r3, r3
 8013638:	429a      	cmp	r2, r3
 801363a:	d006      	beq.n	801364a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801363c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	633b      	str	r3, [r7, #48]	; 0x30
 8013642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013644:	2b00      	cmp	r3, #0
 8013646:	d1e6      	bne.n	8013616 <ip4_reass+0xb6>
 8013648:	e000      	b.n	801364c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801364a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	2b00      	cmp	r3, #0
 8013650:	d109      	bne.n	8013666 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8013652:	8c3b      	ldrh	r3, [r7, #32]
 8013654:	4619      	mov	r1, r3
 8013656:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013658:	f7ff fdb0 	bl	80131bc <ip_reass_enqueue_new_datagram>
 801365c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801365e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013660:	2b00      	cmp	r3, #0
 8013662:	d11c      	bne.n	801369e <ip4_reass+0x13e>
      goto nullreturn;
 8013664:	e109      	b.n	801387a <ip4_reass+0x31a>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8013666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013668:	88db      	ldrh	r3, [r3, #6]
 801366a:	b29b      	uxth	r3, r3
 801366c:	4618      	mov	r0, r3
 801366e:	f7f6 fb9c 	bl	8009daa <lwip_htons>
 8013672:	4603      	mov	r3, r0
 8013674:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013678:	2b00      	cmp	r3, #0
 801367a:	d110      	bne.n	801369e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367e:	89db      	ldrh	r3, [r3, #14]
 8013680:	4618      	mov	r0, r3
 8013682:	f7f6 fb92 	bl	8009daa <lwip_htons>
 8013686:	4603      	mov	r3, r0
 8013688:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801368c:	2b00      	cmp	r3, #0
 801368e:	d006      	beq.n	801369e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8013690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013692:	3308      	adds	r3, #8
 8013694:	2214      	movs	r2, #20
 8013696:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013698:	4618      	mov	r0, r3
 801369a:	f000 fb9d 	bl	8013dd8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801369e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136a0:	88db      	ldrh	r3, [r3, #6]
 80136a2:	b29b      	uxth	r3, r3
 80136a4:	f003 0320 	and.w	r3, r3, #32
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	bf0c      	ite	eq
 80136ac:	2301      	moveq	r3, #1
 80136ae:	2300      	movne	r3, #0
 80136b0:	b2db      	uxtb	r3, r3
 80136b2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80136b4:	69fb      	ldr	r3, [r7, #28]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	d00e      	beq.n	80136d8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80136ba:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80136bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80136be:	4413      	add	r3, r2
 80136c0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80136c2:	8b7a      	ldrh	r2, [r7, #26]
 80136c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80136c6:	429a      	cmp	r2, r3
 80136c8:	f0c0 80a0 	bcc.w	801380c <ip4_reass+0x2ac>
 80136cc:	8b7b      	ldrh	r3, [r7, #26]
 80136ce:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80136d2:	4293      	cmp	r3, r2
 80136d4:	f200 809a 	bhi.w	801380c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80136d8:	69fa      	ldr	r2, [r7, #28]
 80136da:	6879      	ldr	r1, [r7, #4]
 80136dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80136de:	f7ff fdd5 	bl	801328c <ip_reass_chain_frag_into_datagram_and_validate>
 80136e2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80136e4:	697b      	ldr	r3, [r7, #20]
 80136e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ea:	f000 8091 	beq.w	8013810 <ip4_reass+0x2b0>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80136ee:	4b5b      	ldr	r3, [pc, #364]	; (801385c <ip4_reass+0x2fc>)
 80136f0:	881a      	ldrh	r2, [r3, #0]
 80136f2:	8c3b      	ldrh	r3, [r7, #32]
 80136f4:	4413      	add	r3, r2
 80136f6:	b29a      	uxth	r2, r3
 80136f8:	4b58      	ldr	r3, [pc, #352]	; (801385c <ip4_reass+0x2fc>)
 80136fa:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80136fc:	69fb      	ldr	r3, [r7, #28]
 80136fe:	2b00      	cmp	r3, #0
 8013700:	d00d      	beq.n	801371e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013702:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013704:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013706:	4413      	add	r3, r2
 8013708:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801370c:	8a7a      	ldrh	r2, [r7, #18]
 801370e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013712:	7f9b      	ldrb	r3, [r3, #30]
 8013714:	f043 0301 	orr.w	r3, r3, #1
 8013718:	b2da      	uxtb	r2, r3
 801371a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801371c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	2b01      	cmp	r3, #1
 8013722:	d171      	bne.n	8013808 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013726:	8b9b      	ldrh	r3, [r3, #28]
 8013728:	3314      	adds	r3, #20
 801372a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801372c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801372e:	685b      	ldr	r3, [r3, #4]
 8013730:	685b      	ldr	r3, [r3, #4]
 8013732:	681b      	ldr	r3, [r3, #0]
 8013734:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013738:	685b      	ldr	r3, [r3, #4]
 801373a:	685b      	ldr	r3, [r3, #4]
 801373c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013740:	3308      	adds	r3, #8
 8013742:	2214      	movs	r2, #20
 8013744:	4619      	mov	r1, r3
 8013746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013748:	f000 fb46 	bl	8013dd8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801374c:	8a3b      	ldrh	r3, [r7, #16]
 801374e:	4618      	mov	r0, r3
 8013750:	f7f6 fb2b 	bl	8009daa <lwip_htons>
 8013754:	4603      	mov	r3, r0
 8013756:	461a      	mov	r2, r3
 8013758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801375e:	2200      	movs	r2, #0
 8013760:	719a      	strb	r2, [r3, #6]
 8013762:	2200      	movs	r2, #0
 8013764:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013768:	2200      	movs	r2, #0
 801376a:	729a      	strb	r2, [r3, #10]
 801376c:	2200      	movs	r2, #0
 801376e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013770:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013772:	685b      	ldr	r3, [r3, #4]
 8013774:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013776:	e00d      	b.n	8013794 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801377a:	685b      	ldr	r3, [r3, #4]
 801377c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801377e:	2114      	movs	r1, #20
 8013780:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013782:	f7f7 fd3f 	bl	800b204 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013786:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013788:	6878      	ldr	r0, [r7, #4]
 801378a:	f7f7 fe83 	bl	800b494 <pbuf_cat>
      r = iprh->next_pbuf;
 801378e:	68fb      	ldr	r3, [r7, #12]
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013794:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013796:	2b00      	cmp	r3, #0
 8013798:	d1ee      	bne.n	8013778 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801379a:	4b31      	ldr	r3, [pc, #196]	; (8013860 <ip4_reass+0x300>)
 801379c:	681b      	ldr	r3, [r3, #0]
 801379e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d102      	bne.n	80137aa <ip4_reass+0x24a>
      ipr_prev = NULL;
 80137a4:	2300      	movs	r3, #0
 80137a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137a8:	e010      	b.n	80137cc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137aa:	4b2d      	ldr	r3, [pc, #180]	; (8013860 <ip4_reass+0x300>)
 80137ac:	681b      	ldr	r3, [r3, #0]
 80137ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137b0:	e007      	b.n	80137c2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80137b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b4:	681b      	ldr	r3, [r3, #0]
 80137b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80137b8:	429a      	cmp	r2, r3
 80137ba:	d006      	beq.n	80137ca <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80137bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80137c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d1f4      	bne.n	80137b2 <ip4_reass+0x252>
 80137c8:	e000      	b.n	80137cc <ip4_reass+0x26c>
          break;
 80137ca:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80137cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80137ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80137d0:	f7ff fd2e 	bl	8013230 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80137d4:	6878      	ldr	r0, [r7, #4]
 80137d6:	f7f7 fe23 	bl	800b420 <pbuf_clen>
 80137da:	4603      	mov	r3, r0
 80137dc:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80137de:	4b1f      	ldr	r3, [pc, #124]	; (801385c <ip4_reass+0x2fc>)
 80137e0:	881b      	ldrh	r3, [r3, #0]
 80137e2:	8c3a      	ldrh	r2, [r7, #32]
 80137e4:	429a      	cmp	r2, r3
 80137e6:	d906      	bls.n	80137f6 <ip4_reass+0x296>
 80137e8:	4b1e      	ldr	r3, [pc, #120]	; (8013864 <ip4_reass+0x304>)
 80137ea:	f240 229b 	movw	r2, #667	; 0x29b
 80137ee:	491e      	ldr	r1, [pc, #120]	; (8013868 <ip4_reass+0x308>)
 80137f0:	481e      	ldr	r0, [pc, #120]	; (801386c <ip4_reass+0x30c>)
 80137f2:	f000 fb07 	bl	8013e04 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80137f6:	4b19      	ldr	r3, [pc, #100]	; (801385c <ip4_reass+0x2fc>)
 80137f8:	881a      	ldrh	r2, [r3, #0]
 80137fa:	8c3b      	ldrh	r3, [r7, #32]
 80137fc:	1ad3      	subs	r3, r2, r3
 80137fe:	b29a      	uxth	r2, r3
 8013800:	4b16      	ldr	r3, [pc, #88]	; (801385c <ip4_reass+0x2fc>)
 8013802:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013804:	687b      	ldr	r3, [r7, #4]
 8013806:	e03c      	b.n	8013882 <ip4_reass+0x322>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013808:	2300      	movs	r3, #0
 801380a:	e03a      	b.n	8013882 <ip4_reass+0x322>
      goto nullreturn_ipr;
 801380c:	bf00      	nop
 801380e:	e000      	b.n	8013812 <ip4_reass+0x2b2>
    goto nullreturn_ipr;
 8013810:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013814:	2b00      	cmp	r3, #0
 8013816:	d106      	bne.n	8013826 <ip4_reass+0x2c6>
 8013818:	4b12      	ldr	r3, [pc, #72]	; (8013864 <ip4_reass+0x304>)
 801381a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801381e:	4914      	ldr	r1, [pc, #80]	; (8013870 <ip4_reass+0x310>)
 8013820:	4812      	ldr	r0, [pc, #72]	; (801386c <ip4_reass+0x30c>)
 8013822:	f000 faef 	bl	8013e04 <iprintf>
  if (ipr->p == NULL) {
 8013826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013828:	685b      	ldr	r3, [r3, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d124      	bne.n	8013878 <ip4_reass+0x318>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801382e:	4b0c      	ldr	r3, [pc, #48]	; (8013860 <ip4_reass+0x300>)
 8013830:	681b      	ldr	r3, [r3, #0]
 8013832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013834:	429a      	cmp	r2, r3
 8013836:	d006      	beq.n	8013846 <ip4_reass+0x2e6>
 8013838:	4b0a      	ldr	r3, [pc, #40]	; (8013864 <ip4_reass+0x304>)
 801383a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801383e:	490d      	ldr	r1, [pc, #52]	; (8013874 <ip4_reass+0x314>)
 8013840:	480a      	ldr	r0, [pc, #40]	; (801386c <ip4_reass+0x30c>)
 8013842:	f000 fadf 	bl	8013e04 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013846:	2100      	movs	r1, #0
 8013848:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801384a:	f7ff fcf1 	bl	8013230 <ip_reass_dequeue_datagram>
 801384e:	e014      	b.n	801387a <ip4_reass+0x31a>
    goto nullreturn;
 8013850:	bf00      	nop
 8013852:	e012      	b.n	801387a <ip4_reass+0x31a>
    goto nullreturn;
 8013854:	bf00      	nop
 8013856:	e010      	b.n	801387a <ip4_reass+0x31a>
      goto nullreturn;
 8013858:	bf00      	nop
 801385a:	e00e      	b.n	801387a <ip4_reass+0x31a>
 801385c:	20000218 	.word	0x20000218
 8013860:	20000214 	.word	0x20000214
 8013864:	08017574 	.word	0x08017574
 8013868:	080176e4 	.word	0x080176e4
 801386c:	080175bc 	.word	0x080175bc
 8013870:	08017700 	.word	0x08017700
 8013874:	0801770c 	.word	0x0801770c
  }

nullreturn:
 8013878:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f7f7 fd48 	bl	800b310 <pbuf_free>
  return NULL;
 8013880:	2300      	movs	r3, #0
}
 8013882:	4618      	mov	r0, r3
 8013884:	3738      	adds	r7, #56	; 0x38
 8013886:	46bd      	mov	sp, r7
 8013888:	bd80      	pop	{r7, pc}
 801388a:	bf00      	nop

0801388c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801388c:	b580      	push	{r7, lr}
 801388e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013890:	2005      	movs	r0, #5
 8013892:	f7f6 fedf 	bl	800a654 <memp_malloc>
 8013896:	4603      	mov	r3, r0
}
 8013898:	4618      	mov	r0, r3
 801389a:	bd80      	pop	{r7, pc}

0801389c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801389c:	b580      	push	{r7, lr}
 801389e:	b082      	sub	sp, #8
 80138a0:	af00      	add	r7, sp, #0
 80138a2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80138a4:	687b      	ldr	r3, [r7, #4]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d106      	bne.n	80138b8 <ip_frag_free_pbuf_custom_ref+0x1c>
 80138aa:	4b07      	ldr	r3, [pc, #28]	; (80138c8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80138ac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80138b0:	4906      	ldr	r1, [pc, #24]	; (80138cc <ip_frag_free_pbuf_custom_ref+0x30>)
 80138b2:	4807      	ldr	r0, [pc, #28]	; (80138d0 <ip_frag_free_pbuf_custom_ref+0x34>)
 80138b4:	f000 faa6 	bl	8013e04 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80138b8:	6879      	ldr	r1, [r7, #4]
 80138ba:	2005      	movs	r0, #5
 80138bc:	f7f6 ff16 	bl	800a6ec <memp_free>
}
 80138c0:	bf00      	nop
 80138c2:	3708      	adds	r7, #8
 80138c4:	46bd      	mov	sp, r7
 80138c6:	bd80      	pop	{r7, pc}
 80138c8:	08017574 	.word	0x08017574
 80138cc:	0801772c 	.word	0x0801772c
 80138d0:	080175bc 	.word	0x080175bc

080138d4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b084      	sub	sp, #16
 80138d8:	af00      	add	r7, sp, #0
 80138da:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	2b00      	cmp	r3, #0
 80138e4:	d106      	bne.n	80138f4 <ipfrag_free_pbuf_custom+0x20>
 80138e6:	4b11      	ldr	r3, [pc, #68]	; (801392c <ipfrag_free_pbuf_custom+0x58>)
 80138e8:	f240 22ce 	movw	r2, #718	; 0x2ce
 80138ec:	4910      	ldr	r1, [pc, #64]	; (8013930 <ipfrag_free_pbuf_custom+0x5c>)
 80138ee:	4811      	ldr	r0, [pc, #68]	; (8013934 <ipfrag_free_pbuf_custom+0x60>)
 80138f0:	f000 fa88 	bl	8013e04 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80138f4:	68fa      	ldr	r2, [r7, #12]
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	429a      	cmp	r2, r3
 80138fa:	d006      	beq.n	801390a <ipfrag_free_pbuf_custom+0x36>
 80138fc:	4b0b      	ldr	r3, [pc, #44]	; (801392c <ipfrag_free_pbuf_custom+0x58>)
 80138fe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013902:	490d      	ldr	r1, [pc, #52]	; (8013938 <ipfrag_free_pbuf_custom+0x64>)
 8013904:	480b      	ldr	r0, [pc, #44]	; (8013934 <ipfrag_free_pbuf_custom+0x60>)
 8013906:	f000 fa7d 	bl	8013e04 <iprintf>
  if (pcr->original != NULL) {
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	695b      	ldr	r3, [r3, #20]
 801390e:	2b00      	cmp	r3, #0
 8013910:	d004      	beq.n	801391c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013912:	68fb      	ldr	r3, [r7, #12]
 8013914:	695b      	ldr	r3, [r3, #20]
 8013916:	4618      	mov	r0, r3
 8013918:	f7f7 fcfa 	bl	800b310 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801391c:	68f8      	ldr	r0, [r7, #12]
 801391e:	f7ff ffbd 	bl	801389c <ip_frag_free_pbuf_custom_ref>
}
 8013922:	bf00      	nop
 8013924:	3710      	adds	r7, #16
 8013926:	46bd      	mov	sp, r7
 8013928:	bd80      	pop	{r7, pc}
 801392a:	bf00      	nop
 801392c:	08017574 	.word	0x08017574
 8013930:	08017738 	.word	0x08017738
 8013934:	080175bc 	.word	0x080175bc
 8013938:	08017744 	.word	0x08017744

0801393c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b094      	sub	sp, #80	; 0x50
 8013940:	af02      	add	r7, sp, #8
 8013942:	60f8      	str	r0, [r7, #12]
 8013944:	60b9      	str	r1, [r7, #8]
 8013946:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013948:	2300      	movs	r3, #0
 801394a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801394e:	68bb      	ldr	r3, [r7, #8]
 8013950:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013952:	3b14      	subs	r3, #20
 8013954:	2b00      	cmp	r3, #0
 8013956:	da00      	bge.n	801395a <ip4_frag+0x1e>
 8013958:	3307      	adds	r3, #7
 801395a:	10db      	asrs	r3, r3, #3
 801395c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801395e:	2314      	movs	r3, #20
 8013960:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	685b      	ldr	r3, [r3, #4]
 8013966:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801396a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801396c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801396e:	781b      	ldrb	r3, [r3, #0]
 8013970:	f003 030f 	and.w	r3, r3, #15
 8013974:	b2db      	uxtb	r3, r3
 8013976:	009b      	lsls	r3, r3, #2
 8013978:	b2db      	uxtb	r3, r3
 801397a:	2b14      	cmp	r3, #20
 801397c:	d002      	beq.n	8013984 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801397e:	f06f 0305 	mvn.w	r3, #5
 8013982:	e110      	b.n	8013ba6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	895b      	ldrh	r3, [r3, #10]
 8013988:	2b13      	cmp	r3, #19
 801398a:	d809      	bhi.n	80139a0 <ip4_frag+0x64>
 801398c:	4b88      	ldr	r3, [pc, #544]	; (8013bb0 <ip4_frag+0x274>)
 801398e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013992:	4988      	ldr	r1, [pc, #544]	; (8013bb4 <ip4_frag+0x278>)
 8013994:	4888      	ldr	r0, [pc, #544]	; (8013bb8 <ip4_frag+0x27c>)
 8013996:	f000 fa35 	bl	8013e04 <iprintf>
 801399a:	f06f 0305 	mvn.w	r3, #5
 801399e:	e102      	b.n	8013ba6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	88db      	ldrh	r3, [r3, #6]
 80139a4:	b29b      	uxth	r3, r3
 80139a6:	4618      	mov	r0, r3
 80139a8:	f7f6 f9ff 	bl	8009daa <lwip_htons>
 80139ac:	4603      	mov	r3, r0
 80139ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80139b0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139b2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139b6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80139ba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80139bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80139c0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80139c2:	68fb      	ldr	r3, [r7, #12]
 80139c4:	891b      	ldrh	r3, [r3, #8]
 80139c6:	3b14      	subs	r3, #20
 80139c8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80139cc:	e0e1      	b.n	8013b92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80139ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80139d0:	00db      	lsls	r3, r3, #3
 80139d2:	b29b      	uxth	r3, r3
 80139d4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80139d8:	4293      	cmp	r3, r2
 80139da:	bf28      	it	cs
 80139dc:	4613      	movcs	r3, r2
 80139de:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80139e0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80139e4:	2114      	movs	r1, #20
 80139e6:	200e      	movs	r0, #14
 80139e8:	f7f7 f9ae 	bl	800ad48 <pbuf_alloc>
 80139ec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80139ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	f000 80d5 	beq.w	8013ba0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80139f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139f8:	895b      	ldrh	r3, [r3, #10]
 80139fa:	2b13      	cmp	r3, #19
 80139fc:	d806      	bhi.n	8013a0c <ip4_frag+0xd0>
 80139fe:	4b6c      	ldr	r3, [pc, #432]	; (8013bb0 <ip4_frag+0x274>)
 8013a00:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013a04:	496d      	ldr	r1, [pc, #436]	; (8013bbc <ip4_frag+0x280>)
 8013a06:	486c      	ldr	r0, [pc, #432]	; (8013bb8 <ip4_frag+0x27c>)
 8013a08:	f000 f9fc 	bl	8013e04 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a0e:	685b      	ldr	r3, [r3, #4]
 8013a10:	2214      	movs	r2, #20
 8013a12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013a14:	4618      	mov	r0, r3
 8013a16:	f000 f9df 	bl	8013dd8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013a1c:	685b      	ldr	r3, [r3, #4]
 8013a1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013a20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013a22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013a26:	e064      	b.n	8013af2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	895a      	ldrh	r2, [r3, #10]
 8013a2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a2e:	1ad3      	subs	r3, r2, r3
 8013a30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	895b      	ldrh	r3, [r3, #10]
 8013a36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013a38:	429a      	cmp	r2, r3
 8013a3a:	d906      	bls.n	8013a4a <ip4_frag+0x10e>
 8013a3c:	4b5c      	ldr	r3, [pc, #368]	; (8013bb0 <ip4_frag+0x274>)
 8013a3e:	f240 322d 	movw	r2, #813	; 0x32d
 8013a42:	495f      	ldr	r1, [pc, #380]	; (8013bc0 <ip4_frag+0x284>)
 8013a44:	485c      	ldr	r0, [pc, #368]	; (8013bb8 <ip4_frag+0x27c>)
 8013a46:	f000 f9dd 	bl	8013e04 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013a4a:	8bfa      	ldrh	r2, [r7, #30]
 8013a4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013a50:	4293      	cmp	r3, r2
 8013a52:	bf28      	it	cs
 8013a54:	4613      	movcs	r3, r2
 8013a56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013a5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013a5e:	2b00      	cmp	r3, #0
 8013a60:	d105      	bne.n	8013a6e <ip4_frag+0x132>
        poff = 0;
 8013a62:	2300      	movs	r3, #0
 8013a64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013a66:	68fb      	ldr	r3, [r7, #12]
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	60fb      	str	r3, [r7, #12]
        continue;
 8013a6c:	e041      	b.n	8013af2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013a6e:	f7ff ff0d 	bl	801388c <ip_frag_alloc_pbuf_custom_ref>
 8013a72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013a74:	69bb      	ldr	r3, [r7, #24]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	d103      	bne.n	8013a82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013a7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013a7c:	f7f7 fc48 	bl	800b310 <pbuf_free>
        goto memerr;
 8013a80:	e08f      	b.n	8013ba2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013a88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013a8a:	4413      	add	r3, r2
 8013a8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013a90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013a94:	9201      	str	r2, [sp, #4]
 8013a96:	9300      	str	r3, [sp, #0]
 8013a98:	4603      	mov	r3, r0
 8013a9a:	2241      	movs	r2, #65	; 0x41
 8013a9c:	2000      	movs	r0, #0
 8013a9e:	f7f7 fa7d 	bl	800af9c <pbuf_alloced_custom>
 8013aa2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013aa4:	697b      	ldr	r3, [r7, #20]
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d106      	bne.n	8013ab8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013aaa:	69b8      	ldr	r0, [r7, #24]
 8013aac:	f7ff fef6 	bl	801389c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013ab0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ab2:	f7f7 fc2d 	bl	800b310 <pbuf_free>
        goto memerr;
 8013ab6:	e074      	b.n	8013ba2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013ab8:	68f8      	ldr	r0, [r7, #12]
 8013aba:	f7f7 fcc9 	bl	800b450 <pbuf_ref>
      pcr->original = p;
 8013abe:	69bb      	ldr	r3, [r7, #24]
 8013ac0:	68fa      	ldr	r2, [r7, #12]
 8013ac2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	4a3f      	ldr	r2, [pc, #252]	; (8013bc4 <ip4_frag+0x288>)
 8013ac8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013aca:	6979      	ldr	r1, [r7, #20]
 8013acc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ace:	f7f7 fce1 	bl	800b494 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013ad2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013ad6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013ada:	1ad3      	subs	r3, r2, r3
 8013adc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013ae0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013ae4:	2b00      	cmp	r3, #0
 8013ae6:	d004      	beq.n	8013af2 <ip4_frag+0x1b6>
        poff = 0;
 8013ae8:	2300      	movs	r3, #0
 8013aea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013aec:	68fb      	ldr	r3, [r7, #12]
 8013aee:	681b      	ldr	r3, [r3, #0]
 8013af0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013af2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d196      	bne.n	8013a28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013afa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013afc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013b00:	4413      	add	r3, r2
 8013b02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013b08:	f1a3 0213 	sub.w	r2, r3, #19
 8013b0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b10:	429a      	cmp	r2, r3
 8013b12:	bfcc      	ite	gt
 8013b14:	2301      	movgt	r3, #1
 8013b16:	2300      	movle	r3, #0
 8013b18:	b2db      	uxtb	r3, r3
 8013b1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013b1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013b20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013b24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013b26:	6a3b      	ldr	r3, [r7, #32]
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d002      	beq.n	8013b32 <ip4_frag+0x1f6>
 8013b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d003      	beq.n	8013b3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013b32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013b38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013b3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013b3c:	4618      	mov	r0, r3
 8013b3e:	f7f6 f934 	bl	8009daa <lwip_htons>
 8013b42:	4603      	mov	r3, r0
 8013b44:	461a      	mov	r2, r3
 8013b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013b4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b4c:	3314      	adds	r3, #20
 8013b4e:	b29b      	uxth	r3, r3
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f6 f92a 	bl	8009daa <lwip_htons>
 8013b56:	4603      	mov	r3, r0
 8013b58:	461a      	mov	r2, r3
 8013b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013b5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b60:	2200      	movs	r2, #0
 8013b62:	729a      	strb	r2, [r3, #10]
 8013b64:	2200      	movs	r2, #0
 8013b66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013b68:	68bb      	ldr	r3, [r7, #8]
 8013b6a:	695b      	ldr	r3, [r3, #20]
 8013b6c:	687a      	ldr	r2, [r7, #4]
 8013b6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013b70:	68b8      	ldr	r0, [r7, #8]
 8013b72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013b74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013b76:	f7f7 fbcb 	bl	800b310 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013b7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013b7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013b80:	1ad3      	subs	r3, r2, r3
 8013b82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013b86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013b8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013b8c:	4413      	add	r3, r2
 8013b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013b92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	f47f af19 	bne.w	80139ce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013b9c:	2300      	movs	r3, #0
 8013b9e:	e002      	b.n	8013ba6 <ip4_frag+0x26a>
      goto memerr;
 8013ba0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013ba2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013ba6:	4618      	mov	r0, r3
 8013ba8:	3748      	adds	r7, #72	; 0x48
 8013baa:	46bd      	mov	sp, r7
 8013bac:	bd80      	pop	{r7, pc}
 8013bae:	bf00      	nop
 8013bb0:	08017574 	.word	0x08017574
 8013bb4:	08017750 	.word	0x08017750
 8013bb8:	080175bc 	.word	0x080175bc
 8013bbc:	0801776c 	.word	0x0801776c
 8013bc0:	0801778c 	.word	0x0801778c
 8013bc4:	080138d5 	.word	0x080138d5

08013bc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b086      	sub	sp, #24
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013bd2:	230e      	movs	r3, #14
 8013bd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	895b      	ldrh	r3, [r3, #10]
 8013bda:	2b0e      	cmp	r3, #14
 8013bdc:	d96e      	bls.n	8013cbc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	7bdb      	ldrb	r3, [r3, #15]
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d106      	bne.n	8013bf4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013be6:	683b      	ldr	r3, [r7, #0]
 8013be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013bec:	3301      	adds	r3, #1
 8013bee:	b2da      	uxtb	r2, r3
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	685b      	ldr	r3, [r3, #4]
 8013bf8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013bfa:	693b      	ldr	r3, [r7, #16]
 8013bfc:	7b1a      	ldrb	r2, [r3, #12]
 8013bfe:	7b5b      	ldrb	r3, [r3, #13]
 8013c00:	021b      	lsls	r3, r3, #8
 8013c02:	4313      	orrs	r3, r2
 8013c04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	f003 0301 	and.w	r3, r3, #1
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d023      	beq.n	8013c5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013c12:	693b      	ldr	r3, [r7, #16]
 8013c14:	781b      	ldrb	r3, [r3, #0]
 8013c16:	2b01      	cmp	r3, #1
 8013c18:	d10f      	bne.n	8013c3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c1a:	693b      	ldr	r3, [r7, #16]
 8013c1c:	785b      	ldrb	r3, [r3, #1]
 8013c1e:	2b00      	cmp	r3, #0
 8013c20:	d11b      	bne.n	8013c5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013c22:	693b      	ldr	r3, [r7, #16]
 8013c24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013c26:	2b5e      	cmp	r3, #94	; 0x5e
 8013c28:	d117      	bne.n	8013c5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	7b5b      	ldrb	r3, [r3, #13]
 8013c2e:	f043 0310 	orr.w	r3, r3, #16
 8013c32:	b2da      	uxtb	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	735a      	strb	r2, [r3, #13]
 8013c38:	e00f      	b.n	8013c5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013c3a:	693b      	ldr	r3, [r7, #16]
 8013c3c:	2206      	movs	r2, #6
 8013c3e:	4928      	ldr	r1, [pc, #160]	; (8013ce0 <ethernet_input+0x118>)
 8013c40:	4618      	mov	r0, r3
 8013c42:	f000 f8bb 	bl	8013dbc <memcmp>
 8013c46:	4603      	mov	r3, r0
 8013c48:	2b00      	cmp	r3, #0
 8013c4a:	d106      	bne.n	8013c5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	7b5b      	ldrb	r3, [r3, #13]
 8013c50:	f043 0308 	orr.w	r3, r3, #8
 8013c54:	b2da      	uxtb	r2, r3
 8013c56:	687b      	ldr	r3, [r7, #4]
 8013c58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013c5a:	89fb      	ldrh	r3, [r7, #14]
 8013c5c:	2b08      	cmp	r3, #8
 8013c5e:	d003      	beq.n	8013c68 <ethernet_input+0xa0>
 8013c60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013c64:	d014      	beq.n	8013c90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013c66:	e032      	b.n	8013cce <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c6e:	f003 0308 	and.w	r3, r3, #8
 8013c72:	2b00      	cmp	r3, #0
 8013c74:	d024      	beq.n	8013cc0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c76:	8afb      	ldrh	r3, [r7, #22]
 8013c78:	4619      	mov	r1, r3
 8013c7a:	6878      	ldr	r0, [r7, #4]
 8013c7c:	f7f7 fac2 	bl	800b204 <pbuf_remove_header>
 8013c80:	4603      	mov	r3, r0
 8013c82:	2b00      	cmp	r3, #0
 8013c84:	d11e      	bne.n	8013cc4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013c86:	6839      	ldr	r1, [r7, #0]
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f7fe ff27 	bl	8012adc <ip4_input>
      break;
 8013c8e:	e013      	b.n	8013cb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013c96:	f003 0308 	and.w	r3, r3, #8
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d014      	beq.n	8013cc8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013c9e:	8afb      	ldrh	r3, [r7, #22]
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7f7 faae 	bl	800b204 <pbuf_remove_header>
 8013ca8:	4603      	mov	r3, r0
 8013caa:	2b00      	cmp	r3, #0
 8013cac:	d10e      	bne.n	8013ccc <ethernet_input+0x104>
        etharp_input(p, netif);
 8013cae:	6839      	ldr	r1, [r7, #0]
 8013cb0:	6878      	ldr	r0, [r7, #4]
 8013cb2:	f7fe f8c7 	bl	8011e44 <etharp_input>
      break;
 8013cb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	e00c      	b.n	8013cd6 <ethernet_input+0x10e>
    goto free_and_return;
 8013cbc:	bf00      	nop
 8013cbe:	e006      	b.n	8013cce <ethernet_input+0x106>
        goto free_and_return;
 8013cc0:	bf00      	nop
 8013cc2:	e004      	b.n	8013cce <ethernet_input+0x106>
        goto free_and_return;
 8013cc4:	bf00      	nop
 8013cc6:	e002      	b.n	8013cce <ethernet_input+0x106>
        goto free_and_return;
 8013cc8:	bf00      	nop
 8013cca:	e000      	b.n	8013cce <ethernet_input+0x106>
        goto free_and_return;
 8013ccc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8013cce:	6878      	ldr	r0, [r7, #4]
 8013cd0:	f7f7 fb1e 	bl	800b310 <pbuf_free>
  return ERR_OK;
 8013cd4:	2300      	movs	r3, #0
}
 8013cd6:	4618      	mov	r0, r3
 8013cd8:	3718      	adds	r7, #24
 8013cda:	46bd      	mov	sp, r7
 8013cdc:	bd80      	pop	{r7, pc}
 8013cde:	bf00      	nop
 8013ce0:	08017938 	.word	0x08017938

08013ce4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8013ce4:	b580      	push	{r7, lr}
 8013ce6:	b086      	sub	sp, #24
 8013ce8:	af00      	add	r7, sp, #0
 8013cea:	60f8      	str	r0, [r7, #12]
 8013cec:	60b9      	str	r1, [r7, #8]
 8013cee:	607a      	str	r2, [r7, #4]
 8013cf0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8013cf2:	8c3b      	ldrh	r3, [r7, #32]
 8013cf4:	4618      	mov	r0, r3
 8013cf6:	f7f6 f858 	bl	8009daa <lwip_htons>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8013cfe:	210e      	movs	r1, #14
 8013d00:	68b8      	ldr	r0, [r7, #8]
 8013d02:	f7f7 fa6f 	bl	800b1e4 <pbuf_add_header>
 8013d06:	4603      	mov	r3, r0
 8013d08:	2b00      	cmp	r3, #0
 8013d0a:	d125      	bne.n	8013d58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8013d0c:	68bb      	ldr	r3, [r7, #8]
 8013d0e:	685b      	ldr	r3, [r3, #4]
 8013d10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8013d12:	693b      	ldr	r3, [r7, #16]
 8013d14:	8afa      	ldrh	r2, [r7, #22]
 8013d16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8013d18:	693b      	ldr	r3, [r7, #16]
 8013d1a:	2206      	movs	r2, #6
 8013d1c:	6839      	ldr	r1, [r7, #0]
 8013d1e:	4618      	mov	r0, r3
 8013d20:	f000 f85a 	bl	8013dd8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	3306      	adds	r3, #6
 8013d28:	2206      	movs	r2, #6
 8013d2a:	6879      	ldr	r1, [r7, #4]
 8013d2c:	4618      	mov	r0, r3
 8013d2e:	f000 f853 	bl	8013dd8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013d38:	2b06      	cmp	r3, #6
 8013d3a:	d006      	beq.n	8013d4a <ethernet_output+0x66>
 8013d3c:	4b0a      	ldr	r3, [pc, #40]	; (8013d68 <ethernet_output+0x84>)
 8013d3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8013d42:	490a      	ldr	r1, [pc, #40]	; (8013d6c <ethernet_output+0x88>)
 8013d44:	480a      	ldr	r0, [pc, #40]	; (8013d70 <ethernet_output+0x8c>)
 8013d46:	f000 f85d 	bl	8013e04 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8013d4a:	68fb      	ldr	r3, [r7, #12]
 8013d4c:	699b      	ldr	r3, [r3, #24]
 8013d4e:	68b9      	ldr	r1, [r7, #8]
 8013d50:	68f8      	ldr	r0, [r7, #12]
 8013d52:	4798      	blx	r3
 8013d54:	4603      	mov	r3, r0
 8013d56:	e002      	b.n	8013d5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8013d58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8013d5a:	f06f 0301 	mvn.w	r3, #1
}
 8013d5e:	4618      	mov	r0, r3
 8013d60:	3718      	adds	r7, #24
 8013d62:	46bd      	mov	sp, r7
 8013d64:	bd80      	pop	{r7, pc}
 8013d66:	bf00      	nop
 8013d68:	0801779c 	.word	0x0801779c
 8013d6c:	080177d4 	.word	0x080177d4
 8013d70:	08017808 	.word	0x08017808

08013d74 <__libc_init_array>:
 8013d74:	b570      	push	{r4, r5, r6, lr}
 8013d76:	4d0d      	ldr	r5, [pc, #52]	; (8013dac <__libc_init_array+0x38>)
 8013d78:	4c0d      	ldr	r4, [pc, #52]	; (8013db0 <__libc_init_array+0x3c>)
 8013d7a:	1b64      	subs	r4, r4, r5
 8013d7c:	10a4      	asrs	r4, r4, #2
 8013d7e:	2600      	movs	r6, #0
 8013d80:	42a6      	cmp	r6, r4
 8013d82:	d109      	bne.n	8013d98 <__libc_init_array+0x24>
 8013d84:	4d0b      	ldr	r5, [pc, #44]	; (8013db4 <__libc_init_array+0x40>)
 8013d86:	4c0c      	ldr	r4, [pc, #48]	; (8013db8 <__libc_init_array+0x44>)
 8013d88:	f001 f856 	bl	8014e38 <_init>
 8013d8c:	1b64      	subs	r4, r4, r5
 8013d8e:	10a4      	asrs	r4, r4, #2
 8013d90:	2600      	movs	r6, #0
 8013d92:	42a6      	cmp	r6, r4
 8013d94:	d105      	bne.n	8013da2 <__libc_init_array+0x2e>
 8013d96:	bd70      	pop	{r4, r5, r6, pc}
 8013d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8013d9c:	4798      	blx	r3
 8013d9e:	3601      	adds	r6, #1
 8013da0:	e7ee      	b.n	8013d80 <__libc_init_array+0xc>
 8013da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8013da6:	4798      	blx	r3
 8013da8:	3601      	adds	r6, #1
 8013daa:	e7f2      	b.n	8013d92 <__libc_init_array+0x1e>
 8013dac:	08017a9c 	.word	0x08017a9c
 8013db0:	08017a9c 	.word	0x08017a9c
 8013db4:	08017a9c 	.word	0x08017a9c
 8013db8:	08017aa0 	.word	0x08017aa0

08013dbc <memcmp>:
 8013dbc:	b530      	push	{r4, r5, lr}
 8013dbe:	3901      	subs	r1, #1
 8013dc0:	2400      	movs	r4, #0
 8013dc2:	42a2      	cmp	r2, r4
 8013dc4:	d101      	bne.n	8013dca <memcmp+0xe>
 8013dc6:	2000      	movs	r0, #0
 8013dc8:	e005      	b.n	8013dd6 <memcmp+0x1a>
 8013dca:	5d03      	ldrb	r3, [r0, r4]
 8013dcc:	3401      	adds	r4, #1
 8013dce:	5d0d      	ldrb	r5, [r1, r4]
 8013dd0:	42ab      	cmp	r3, r5
 8013dd2:	d0f6      	beq.n	8013dc2 <memcmp+0x6>
 8013dd4:	1b58      	subs	r0, r3, r5
 8013dd6:	bd30      	pop	{r4, r5, pc}

08013dd8 <memcpy>:
 8013dd8:	440a      	add	r2, r1
 8013dda:	4291      	cmp	r1, r2
 8013ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8013de0:	d100      	bne.n	8013de4 <memcpy+0xc>
 8013de2:	4770      	bx	lr
 8013de4:	b510      	push	{r4, lr}
 8013de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013dee:	4291      	cmp	r1, r2
 8013df0:	d1f9      	bne.n	8013de6 <memcpy+0xe>
 8013df2:	bd10      	pop	{r4, pc}

08013df4 <memset>:
 8013df4:	4402      	add	r2, r0
 8013df6:	4603      	mov	r3, r0
 8013df8:	4293      	cmp	r3, r2
 8013dfa:	d100      	bne.n	8013dfe <memset+0xa>
 8013dfc:	4770      	bx	lr
 8013dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8013e02:	e7f9      	b.n	8013df8 <memset+0x4>

08013e04 <iprintf>:
 8013e04:	b40f      	push	{r0, r1, r2, r3}
 8013e06:	4b0a      	ldr	r3, [pc, #40]	; (8013e30 <iprintf+0x2c>)
 8013e08:	b513      	push	{r0, r1, r4, lr}
 8013e0a:	681c      	ldr	r4, [r3, #0]
 8013e0c:	b124      	cbz	r4, 8013e18 <iprintf+0x14>
 8013e0e:	69a3      	ldr	r3, [r4, #24]
 8013e10:	b913      	cbnz	r3, 8013e18 <iprintf+0x14>
 8013e12:	4620      	mov	r0, r4
 8013e14:	f000 f8c4 	bl	8013fa0 <__sinit>
 8013e18:	ab05      	add	r3, sp, #20
 8013e1a:	9a04      	ldr	r2, [sp, #16]
 8013e1c:	68a1      	ldr	r1, [r4, #8]
 8013e1e:	9301      	str	r3, [sp, #4]
 8013e20:	4620      	mov	r0, r4
 8013e22:	f000 fa4b 	bl	80142bc <_vfiprintf_r>
 8013e26:	b002      	add	sp, #8
 8013e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e2c:	b004      	add	sp, #16
 8013e2e:	4770      	bx	lr
 8013e30:	20000014 	.word	0x20000014

08013e34 <rand>:
 8013e34:	4b17      	ldr	r3, [pc, #92]	; (8013e94 <rand+0x60>)
 8013e36:	b510      	push	{r4, lr}
 8013e38:	681c      	ldr	r4, [r3, #0]
 8013e3a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8013e3c:	b9b3      	cbnz	r3, 8013e6c <rand+0x38>
 8013e3e:	2018      	movs	r0, #24
 8013e40:	f000 f960 	bl	8014104 <malloc>
 8013e44:	63a0      	str	r0, [r4, #56]	; 0x38
 8013e46:	b928      	cbnz	r0, 8013e54 <rand+0x20>
 8013e48:	4602      	mov	r2, r0
 8013e4a:	4b13      	ldr	r3, [pc, #76]	; (8013e98 <rand+0x64>)
 8013e4c:	4813      	ldr	r0, [pc, #76]	; (8013e9c <rand+0x68>)
 8013e4e:	214e      	movs	r1, #78	; 0x4e
 8013e50:	f000 f830 	bl	8013eb4 <__assert_func>
 8013e54:	4a12      	ldr	r2, [pc, #72]	; (8013ea0 <rand+0x6c>)
 8013e56:	4b13      	ldr	r3, [pc, #76]	; (8013ea4 <rand+0x70>)
 8013e58:	e9c0 2300 	strd	r2, r3, [r0]
 8013e5c:	4b12      	ldr	r3, [pc, #72]	; (8013ea8 <rand+0x74>)
 8013e5e:	6083      	str	r3, [r0, #8]
 8013e60:	230b      	movs	r3, #11
 8013e62:	8183      	strh	r3, [r0, #12]
 8013e64:	2201      	movs	r2, #1
 8013e66:	2300      	movs	r3, #0
 8013e68:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8013e6c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8013e6e:	480f      	ldr	r0, [pc, #60]	; (8013eac <rand+0x78>)
 8013e70:	690a      	ldr	r2, [r1, #16]
 8013e72:	694b      	ldr	r3, [r1, #20]
 8013e74:	4c0e      	ldr	r4, [pc, #56]	; (8013eb0 <rand+0x7c>)
 8013e76:	4350      	muls	r0, r2
 8013e78:	fb04 0003 	mla	r0, r4, r3, r0
 8013e7c:	fba2 3404 	umull	r3, r4, r2, r4
 8013e80:	1c5a      	adds	r2, r3, #1
 8013e82:	4404      	add	r4, r0
 8013e84:	f144 0000 	adc.w	r0, r4, #0
 8013e88:	e9c1 2004 	strd	r2, r0, [r1, #16]
 8013e8c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	bf00      	nop
 8013e94:	20000014 	.word	0x20000014
 8013e98:	0801794c 	.word	0x0801794c
 8013e9c:	08017963 	.word	0x08017963
 8013ea0:	abcd330e 	.word	0xabcd330e
 8013ea4:	e66d1234 	.word	0xe66d1234
 8013ea8:	0005deec 	.word	0x0005deec
 8013eac:	5851f42d 	.word	0x5851f42d
 8013eb0:	4c957f2d 	.word	0x4c957f2d

08013eb4 <__assert_func>:
 8013eb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013eb6:	4614      	mov	r4, r2
 8013eb8:	461a      	mov	r2, r3
 8013eba:	4b09      	ldr	r3, [pc, #36]	; (8013ee0 <__assert_func+0x2c>)
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4605      	mov	r5, r0
 8013ec0:	68d8      	ldr	r0, [r3, #12]
 8013ec2:	b14c      	cbz	r4, 8013ed8 <__assert_func+0x24>
 8013ec4:	4b07      	ldr	r3, [pc, #28]	; (8013ee4 <__assert_func+0x30>)
 8013ec6:	9100      	str	r1, [sp, #0]
 8013ec8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013ecc:	4906      	ldr	r1, [pc, #24]	; (8013ee8 <__assert_func+0x34>)
 8013ece:	462b      	mov	r3, r5
 8013ed0:	f000 f8e4 	bl	801409c <fiprintf>
 8013ed4:	f000 fddc 	bl	8014a90 <abort>
 8013ed8:	4b04      	ldr	r3, [pc, #16]	; (8013eec <__assert_func+0x38>)
 8013eda:	461c      	mov	r4, r3
 8013edc:	e7f3      	b.n	8013ec6 <__assert_func+0x12>
 8013ede:	bf00      	nop
 8013ee0:	20000014 	.word	0x20000014
 8013ee4:	080179c2 	.word	0x080179c2
 8013ee8:	080179cf 	.word	0x080179cf
 8013eec:	080179fd 	.word	0x080179fd

08013ef0 <std>:
 8013ef0:	2300      	movs	r3, #0
 8013ef2:	b510      	push	{r4, lr}
 8013ef4:	4604      	mov	r4, r0
 8013ef6:	e9c0 3300 	strd	r3, r3, [r0]
 8013efa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013efe:	6083      	str	r3, [r0, #8]
 8013f00:	8181      	strh	r1, [r0, #12]
 8013f02:	6643      	str	r3, [r0, #100]	; 0x64
 8013f04:	81c2      	strh	r2, [r0, #14]
 8013f06:	6183      	str	r3, [r0, #24]
 8013f08:	4619      	mov	r1, r3
 8013f0a:	2208      	movs	r2, #8
 8013f0c:	305c      	adds	r0, #92	; 0x5c
 8013f0e:	f7ff ff71 	bl	8013df4 <memset>
 8013f12:	4b05      	ldr	r3, [pc, #20]	; (8013f28 <std+0x38>)
 8013f14:	6263      	str	r3, [r4, #36]	; 0x24
 8013f16:	4b05      	ldr	r3, [pc, #20]	; (8013f2c <std+0x3c>)
 8013f18:	62a3      	str	r3, [r4, #40]	; 0x28
 8013f1a:	4b05      	ldr	r3, [pc, #20]	; (8013f30 <std+0x40>)
 8013f1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013f1e:	4b05      	ldr	r3, [pc, #20]	; (8013f34 <std+0x44>)
 8013f20:	6224      	str	r4, [r4, #32]
 8013f22:	6323      	str	r3, [r4, #48]	; 0x30
 8013f24:	bd10      	pop	{r4, pc}
 8013f26:	bf00      	nop
 8013f28:	08014865 	.word	0x08014865
 8013f2c:	08014887 	.word	0x08014887
 8013f30:	080148bf 	.word	0x080148bf
 8013f34:	080148e3 	.word	0x080148e3

08013f38 <_cleanup_r>:
 8013f38:	4901      	ldr	r1, [pc, #4]	; (8013f40 <_cleanup_r+0x8>)
 8013f3a:	f000 b8c1 	b.w	80140c0 <_fwalk_reent>
 8013f3e:	bf00      	nop
 8013f40:	08014bcd 	.word	0x08014bcd

08013f44 <__sfmoreglue>:
 8013f44:	b570      	push	{r4, r5, r6, lr}
 8013f46:	1e4a      	subs	r2, r1, #1
 8013f48:	2568      	movs	r5, #104	; 0x68
 8013f4a:	4355      	muls	r5, r2
 8013f4c:	460e      	mov	r6, r1
 8013f4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013f52:	f000 f92f 	bl	80141b4 <_malloc_r>
 8013f56:	4604      	mov	r4, r0
 8013f58:	b140      	cbz	r0, 8013f6c <__sfmoreglue+0x28>
 8013f5a:	2100      	movs	r1, #0
 8013f5c:	e9c0 1600 	strd	r1, r6, [r0]
 8013f60:	300c      	adds	r0, #12
 8013f62:	60a0      	str	r0, [r4, #8]
 8013f64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013f68:	f7ff ff44 	bl	8013df4 <memset>
 8013f6c:	4620      	mov	r0, r4
 8013f6e:	bd70      	pop	{r4, r5, r6, pc}

08013f70 <__sfp_lock_acquire>:
 8013f70:	4801      	ldr	r0, [pc, #4]	; (8013f78 <__sfp_lock_acquire+0x8>)
 8013f72:	f000 b8c5 	b.w	8014100 <__retarget_lock_acquire_recursive>
 8013f76:	bf00      	nop
 8013f78:	20007228 	.word	0x20007228

08013f7c <__sfp_lock_release>:
 8013f7c:	4801      	ldr	r0, [pc, #4]	; (8013f84 <__sfp_lock_release+0x8>)
 8013f7e:	f000 b8c0 	b.w	8014102 <__retarget_lock_release_recursive>
 8013f82:	bf00      	nop
 8013f84:	20007228 	.word	0x20007228

08013f88 <__sinit_lock_acquire>:
 8013f88:	4801      	ldr	r0, [pc, #4]	; (8013f90 <__sinit_lock_acquire+0x8>)
 8013f8a:	f000 b8b9 	b.w	8014100 <__retarget_lock_acquire_recursive>
 8013f8e:	bf00      	nop
 8013f90:	20007223 	.word	0x20007223

08013f94 <__sinit_lock_release>:
 8013f94:	4801      	ldr	r0, [pc, #4]	; (8013f9c <__sinit_lock_release+0x8>)
 8013f96:	f000 b8b4 	b.w	8014102 <__retarget_lock_release_recursive>
 8013f9a:	bf00      	nop
 8013f9c:	20007223 	.word	0x20007223

08013fa0 <__sinit>:
 8013fa0:	b510      	push	{r4, lr}
 8013fa2:	4604      	mov	r4, r0
 8013fa4:	f7ff fff0 	bl	8013f88 <__sinit_lock_acquire>
 8013fa8:	69a3      	ldr	r3, [r4, #24]
 8013faa:	b11b      	cbz	r3, 8013fb4 <__sinit+0x14>
 8013fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013fb0:	f7ff bff0 	b.w	8013f94 <__sinit_lock_release>
 8013fb4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013fb8:	6523      	str	r3, [r4, #80]	; 0x50
 8013fba:	4b13      	ldr	r3, [pc, #76]	; (8014008 <__sinit+0x68>)
 8013fbc:	4a13      	ldr	r2, [pc, #76]	; (801400c <__sinit+0x6c>)
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	62a2      	str	r2, [r4, #40]	; 0x28
 8013fc2:	42a3      	cmp	r3, r4
 8013fc4:	bf04      	itt	eq
 8013fc6:	2301      	moveq	r3, #1
 8013fc8:	61a3      	streq	r3, [r4, #24]
 8013fca:	4620      	mov	r0, r4
 8013fcc:	f000 f820 	bl	8014010 <__sfp>
 8013fd0:	6060      	str	r0, [r4, #4]
 8013fd2:	4620      	mov	r0, r4
 8013fd4:	f000 f81c 	bl	8014010 <__sfp>
 8013fd8:	60a0      	str	r0, [r4, #8]
 8013fda:	4620      	mov	r0, r4
 8013fdc:	f000 f818 	bl	8014010 <__sfp>
 8013fe0:	2200      	movs	r2, #0
 8013fe2:	60e0      	str	r0, [r4, #12]
 8013fe4:	2104      	movs	r1, #4
 8013fe6:	6860      	ldr	r0, [r4, #4]
 8013fe8:	f7ff ff82 	bl	8013ef0 <std>
 8013fec:	68a0      	ldr	r0, [r4, #8]
 8013fee:	2201      	movs	r2, #1
 8013ff0:	2109      	movs	r1, #9
 8013ff2:	f7ff ff7d 	bl	8013ef0 <std>
 8013ff6:	68e0      	ldr	r0, [r4, #12]
 8013ff8:	2202      	movs	r2, #2
 8013ffa:	2112      	movs	r1, #18
 8013ffc:	f7ff ff78 	bl	8013ef0 <std>
 8014000:	2301      	movs	r3, #1
 8014002:	61a3      	str	r3, [r4, #24]
 8014004:	e7d2      	b.n	8013fac <__sinit+0xc>
 8014006:	bf00      	nop
 8014008:	08017948 	.word	0x08017948
 801400c:	08013f39 	.word	0x08013f39

08014010 <__sfp>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	4607      	mov	r7, r0
 8014014:	f7ff ffac 	bl	8013f70 <__sfp_lock_acquire>
 8014018:	4b1e      	ldr	r3, [pc, #120]	; (8014094 <__sfp+0x84>)
 801401a:	681e      	ldr	r6, [r3, #0]
 801401c:	69b3      	ldr	r3, [r6, #24]
 801401e:	b913      	cbnz	r3, 8014026 <__sfp+0x16>
 8014020:	4630      	mov	r0, r6
 8014022:	f7ff ffbd 	bl	8013fa0 <__sinit>
 8014026:	3648      	adds	r6, #72	; 0x48
 8014028:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801402c:	3b01      	subs	r3, #1
 801402e:	d503      	bpl.n	8014038 <__sfp+0x28>
 8014030:	6833      	ldr	r3, [r6, #0]
 8014032:	b30b      	cbz	r3, 8014078 <__sfp+0x68>
 8014034:	6836      	ldr	r6, [r6, #0]
 8014036:	e7f7      	b.n	8014028 <__sfp+0x18>
 8014038:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801403c:	b9d5      	cbnz	r5, 8014074 <__sfp+0x64>
 801403e:	4b16      	ldr	r3, [pc, #88]	; (8014098 <__sfp+0x88>)
 8014040:	60e3      	str	r3, [r4, #12]
 8014042:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014046:	6665      	str	r5, [r4, #100]	; 0x64
 8014048:	f000 f859 	bl	80140fe <__retarget_lock_init_recursive>
 801404c:	f7ff ff96 	bl	8013f7c <__sfp_lock_release>
 8014050:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014054:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014058:	6025      	str	r5, [r4, #0]
 801405a:	61a5      	str	r5, [r4, #24]
 801405c:	2208      	movs	r2, #8
 801405e:	4629      	mov	r1, r5
 8014060:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014064:	f7ff fec6 	bl	8013df4 <memset>
 8014068:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801406c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014070:	4620      	mov	r0, r4
 8014072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014074:	3468      	adds	r4, #104	; 0x68
 8014076:	e7d9      	b.n	801402c <__sfp+0x1c>
 8014078:	2104      	movs	r1, #4
 801407a:	4638      	mov	r0, r7
 801407c:	f7ff ff62 	bl	8013f44 <__sfmoreglue>
 8014080:	4604      	mov	r4, r0
 8014082:	6030      	str	r0, [r6, #0]
 8014084:	2800      	cmp	r0, #0
 8014086:	d1d5      	bne.n	8014034 <__sfp+0x24>
 8014088:	f7ff ff78 	bl	8013f7c <__sfp_lock_release>
 801408c:	230c      	movs	r3, #12
 801408e:	603b      	str	r3, [r7, #0]
 8014090:	e7ee      	b.n	8014070 <__sfp+0x60>
 8014092:	bf00      	nop
 8014094:	08017948 	.word	0x08017948
 8014098:	ffff0001 	.word	0xffff0001

0801409c <fiprintf>:
 801409c:	b40e      	push	{r1, r2, r3}
 801409e:	b503      	push	{r0, r1, lr}
 80140a0:	4601      	mov	r1, r0
 80140a2:	ab03      	add	r3, sp, #12
 80140a4:	4805      	ldr	r0, [pc, #20]	; (80140bc <fiprintf+0x20>)
 80140a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80140aa:	6800      	ldr	r0, [r0, #0]
 80140ac:	9301      	str	r3, [sp, #4]
 80140ae:	f000 f905 	bl	80142bc <_vfiprintf_r>
 80140b2:	b002      	add	sp, #8
 80140b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80140b8:	b003      	add	sp, #12
 80140ba:	4770      	bx	lr
 80140bc:	20000014 	.word	0x20000014

080140c0 <_fwalk_reent>:
 80140c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80140c4:	4606      	mov	r6, r0
 80140c6:	4688      	mov	r8, r1
 80140c8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80140cc:	2700      	movs	r7, #0
 80140ce:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80140d2:	f1b9 0901 	subs.w	r9, r9, #1
 80140d6:	d505      	bpl.n	80140e4 <_fwalk_reent+0x24>
 80140d8:	6824      	ldr	r4, [r4, #0]
 80140da:	2c00      	cmp	r4, #0
 80140dc:	d1f7      	bne.n	80140ce <_fwalk_reent+0xe>
 80140de:	4638      	mov	r0, r7
 80140e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80140e4:	89ab      	ldrh	r3, [r5, #12]
 80140e6:	2b01      	cmp	r3, #1
 80140e8:	d907      	bls.n	80140fa <_fwalk_reent+0x3a>
 80140ea:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80140ee:	3301      	adds	r3, #1
 80140f0:	d003      	beq.n	80140fa <_fwalk_reent+0x3a>
 80140f2:	4629      	mov	r1, r5
 80140f4:	4630      	mov	r0, r6
 80140f6:	47c0      	blx	r8
 80140f8:	4307      	orrs	r7, r0
 80140fa:	3568      	adds	r5, #104	; 0x68
 80140fc:	e7e9      	b.n	80140d2 <_fwalk_reent+0x12>

080140fe <__retarget_lock_init_recursive>:
 80140fe:	4770      	bx	lr

08014100 <__retarget_lock_acquire_recursive>:
 8014100:	4770      	bx	lr

08014102 <__retarget_lock_release_recursive>:
 8014102:	4770      	bx	lr

08014104 <malloc>:
 8014104:	4b02      	ldr	r3, [pc, #8]	; (8014110 <malloc+0xc>)
 8014106:	4601      	mov	r1, r0
 8014108:	6818      	ldr	r0, [r3, #0]
 801410a:	f000 b853 	b.w	80141b4 <_malloc_r>
 801410e:	bf00      	nop
 8014110:	20000014 	.word	0x20000014

08014114 <_free_r>:
 8014114:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014116:	2900      	cmp	r1, #0
 8014118:	d048      	beq.n	80141ac <_free_r+0x98>
 801411a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801411e:	9001      	str	r0, [sp, #4]
 8014120:	2b00      	cmp	r3, #0
 8014122:	f1a1 0404 	sub.w	r4, r1, #4
 8014126:	bfb8      	it	lt
 8014128:	18e4      	addlt	r4, r4, r3
 801412a:	f000 fe01 	bl	8014d30 <__malloc_lock>
 801412e:	4a20      	ldr	r2, [pc, #128]	; (80141b0 <_free_r+0x9c>)
 8014130:	9801      	ldr	r0, [sp, #4]
 8014132:	6813      	ldr	r3, [r2, #0]
 8014134:	4615      	mov	r5, r2
 8014136:	b933      	cbnz	r3, 8014146 <_free_r+0x32>
 8014138:	6063      	str	r3, [r4, #4]
 801413a:	6014      	str	r4, [r2, #0]
 801413c:	b003      	add	sp, #12
 801413e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014142:	f000 bdfb 	b.w	8014d3c <__malloc_unlock>
 8014146:	42a3      	cmp	r3, r4
 8014148:	d90b      	bls.n	8014162 <_free_r+0x4e>
 801414a:	6821      	ldr	r1, [r4, #0]
 801414c:	1862      	adds	r2, r4, r1
 801414e:	4293      	cmp	r3, r2
 8014150:	bf04      	itt	eq
 8014152:	681a      	ldreq	r2, [r3, #0]
 8014154:	685b      	ldreq	r3, [r3, #4]
 8014156:	6063      	str	r3, [r4, #4]
 8014158:	bf04      	itt	eq
 801415a:	1852      	addeq	r2, r2, r1
 801415c:	6022      	streq	r2, [r4, #0]
 801415e:	602c      	str	r4, [r5, #0]
 8014160:	e7ec      	b.n	801413c <_free_r+0x28>
 8014162:	461a      	mov	r2, r3
 8014164:	685b      	ldr	r3, [r3, #4]
 8014166:	b10b      	cbz	r3, 801416c <_free_r+0x58>
 8014168:	42a3      	cmp	r3, r4
 801416a:	d9fa      	bls.n	8014162 <_free_r+0x4e>
 801416c:	6811      	ldr	r1, [r2, #0]
 801416e:	1855      	adds	r5, r2, r1
 8014170:	42a5      	cmp	r5, r4
 8014172:	d10b      	bne.n	801418c <_free_r+0x78>
 8014174:	6824      	ldr	r4, [r4, #0]
 8014176:	4421      	add	r1, r4
 8014178:	1854      	adds	r4, r2, r1
 801417a:	42a3      	cmp	r3, r4
 801417c:	6011      	str	r1, [r2, #0]
 801417e:	d1dd      	bne.n	801413c <_free_r+0x28>
 8014180:	681c      	ldr	r4, [r3, #0]
 8014182:	685b      	ldr	r3, [r3, #4]
 8014184:	6053      	str	r3, [r2, #4]
 8014186:	4421      	add	r1, r4
 8014188:	6011      	str	r1, [r2, #0]
 801418a:	e7d7      	b.n	801413c <_free_r+0x28>
 801418c:	d902      	bls.n	8014194 <_free_r+0x80>
 801418e:	230c      	movs	r3, #12
 8014190:	6003      	str	r3, [r0, #0]
 8014192:	e7d3      	b.n	801413c <_free_r+0x28>
 8014194:	6825      	ldr	r5, [r4, #0]
 8014196:	1961      	adds	r1, r4, r5
 8014198:	428b      	cmp	r3, r1
 801419a:	bf04      	itt	eq
 801419c:	6819      	ldreq	r1, [r3, #0]
 801419e:	685b      	ldreq	r3, [r3, #4]
 80141a0:	6063      	str	r3, [r4, #4]
 80141a2:	bf04      	itt	eq
 80141a4:	1949      	addeq	r1, r1, r5
 80141a6:	6021      	streq	r1, [r4, #0]
 80141a8:	6054      	str	r4, [r2, #4]
 80141aa:	e7c7      	b.n	801413c <_free_r+0x28>
 80141ac:	b003      	add	sp, #12
 80141ae:	bd30      	pop	{r4, r5, pc}
 80141b0:	2000021c 	.word	0x2000021c

080141b4 <_malloc_r>:
 80141b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80141b6:	1ccd      	adds	r5, r1, #3
 80141b8:	f025 0503 	bic.w	r5, r5, #3
 80141bc:	3508      	adds	r5, #8
 80141be:	2d0c      	cmp	r5, #12
 80141c0:	bf38      	it	cc
 80141c2:	250c      	movcc	r5, #12
 80141c4:	2d00      	cmp	r5, #0
 80141c6:	4606      	mov	r6, r0
 80141c8:	db01      	blt.n	80141ce <_malloc_r+0x1a>
 80141ca:	42a9      	cmp	r1, r5
 80141cc:	d903      	bls.n	80141d6 <_malloc_r+0x22>
 80141ce:	230c      	movs	r3, #12
 80141d0:	6033      	str	r3, [r6, #0]
 80141d2:	2000      	movs	r0, #0
 80141d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141d6:	f000 fdab 	bl	8014d30 <__malloc_lock>
 80141da:	4921      	ldr	r1, [pc, #132]	; (8014260 <_malloc_r+0xac>)
 80141dc:	680a      	ldr	r2, [r1, #0]
 80141de:	4614      	mov	r4, r2
 80141e0:	b99c      	cbnz	r4, 801420a <_malloc_r+0x56>
 80141e2:	4f20      	ldr	r7, [pc, #128]	; (8014264 <_malloc_r+0xb0>)
 80141e4:	683b      	ldr	r3, [r7, #0]
 80141e6:	b923      	cbnz	r3, 80141f2 <_malloc_r+0x3e>
 80141e8:	4621      	mov	r1, r4
 80141ea:	4630      	mov	r0, r6
 80141ec:	f000 fb2a 	bl	8014844 <_sbrk_r>
 80141f0:	6038      	str	r0, [r7, #0]
 80141f2:	4629      	mov	r1, r5
 80141f4:	4630      	mov	r0, r6
 80141f6:	f000 fb25 	bl	8014844 <_sbrk_r>
 80141fa:	1c43      	adds	r3, r0, #1
 80141fc:	d123      	bne.n	8014246 <_malloc_r+0x92>
 80141fe:	230c      	movs	r3, #12
 8014200:	6033      	str	r3, [r6, #0]
 8014202:	4630      	mov	r0, r6
 8014204:	f000 fd9a 	bl	8014d3c <__malloc_unlock>
 8014208:	e7e3      	b.n	80141d2 <_malloc_r+0x1e>
 801420a:	6823      	ldr	r3, [r4, #0]
 801420c:	1b5b      	subs	r3, r3, r5
 801420e:	d417      	bmi.n	8014240 <_malloc_r+0x8c>
 8014210:	2b0b      	cmp	r3, #11
 8014212:	d903      	bls.n	801421c <_malloc_r+0x68>
 8014214:	6023      	str	r3, [r4, #0]
 8014216:	441c      	add	r4, r3
 8014218:	6025      	str	r5, [r4, #0]
 801421a:	e004      	b.n	8014226 <_malloc_r+0x72>
 801421c:	6863      	ldr	r3, [r4, #4]
 801421e:	42a2      	cmp	r2, r4
 8014220:	bf0c      	ite	eq
 8014222:	600b      	streq	r3, [r1, #0]
 8014224:	6053      	strne	r3, [r2, #4]
 8014226:	4630      	mov	r0, r6
 8014228:	f000 fd88 	bl	8014d3c <__malloc_unlock>
 801422c:	f104 000b 	add.w	r0, r4, #11
 8014230:	1d23      	adds	r3, r4, #4
 8014232:	f020 0007 	bic.w	r0, r0, #7
 8014236:	1ac2      	subs	r2, r0, r3
 8014238:	d0cc      	beq.n	80141d4 <_malloc_r+0x20>
 801423a:	1a1b      	subs	r3, r3, r0
 801423c:	50a3      	str	r3, [r4, r2]
 801423e:	e7c9      	b.n	80141d4 <_malloc_r+0x20>
 8014240:	4622      	mov	r2, r4
 8014242:	6864      	ldr	r4, [r4, #4]
 8014244:	e7cc      	b.n	80141e0 <_malloc_r+0x2c>
 8014246:	1cc4      	adds	r4, r0, #3
 8014248:	f024 0403 	bic.w	r4, r4, #3
 801424c:	42a0      	cmp	r0, r4
 801424e:	d0e3      	beq.n	8014218 <_malloc_r+0x64>
 8014250:	1a21      	subs	r1, r4, r0
 8014252:	4630      	mov	r0, r6
 8014254:	f000 faf6 	bl	8014844 <_sbrk_r>
 8014258:	3001      	adds	r0, #1
 801425a:	d1dd      	bne.n	8014218 <_malloc_r+0x64>
 801425c:	e7cf      	b.n	80141fe <_malloc_r+0x4a>
 801425e:	bf00      	nop
 8014260:	2000021c 	.word	0x2000021c
 8014264:	20000220 	.word	0x20000220

08014268 <__sfputc_r>:
 8014268:	6893      	ldr	r3, [r2, #8]
 801426a:	3b01      	subs	r3, #1
 801426c:	2b00      	cmp	r3, #0
 801426e:	b410      	push	{r4}
 8014270:	6093      	str	r3, [r2, #8]
 8014272:	da08      	bge.n	8014286 <__sfputc_r+0x1e>
 8014274:	6994      	ldr	r4, [r2, #24]
 8014276:	42a3      	cmp	r3, r4
 8014278:	db01      	blt.n	801427e <__sfputc_r+0x16>
 801427a:	290a      	cmp	r1, #10
 801427c:	d103      	bne.n	8014286 <__sfputc_r+0x1e>
 801427e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014282:	f000 bb33 	b.w	80148ec <__swbuf_r>
 8014286:	6813      	ldr	r3, [r2, #0]
 8014288:	1c58      	adds	r0, r3, #1
 801428a:	6010      	str	r0, [r2, #0]
 801428c:	7019      	strb	r1, [r3, #0]
 801428e:	4608      	mov	r0, r1
 8014290:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014294:	4770      	bx	lr

08014296 <__sfputs_r>:
 8014296:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014298:	4606      	mov	r6, r0
 801429a:	460f      	mov	r7, r1
 801429c:	4614      	mov	r4, r2
 801429e:	18d5      	adds	r5, r2, r3
 80142a0:	42ac      	cmp	r4, r5
 80142a2:	d101      	bne.n	80142a8 <__sfputs_r+0x12>
 80142a4:	2000      	movs	r0, #0
 80142a6:	e007      	b.n	80142b8 <__sfputs_r+0x22>
 80142a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80142ac:	463a      	mov	r2, r7
 80142ae:	4630      	mov	r0, r6
 80142b0:	f7ff ffda 	bl	8014268 <__sfputc_r>
 80142b4:	1c43      	adds	r3, r0, #1
 80142b6:	d1f3      	bne.n	80142a0 <__sfputs_r+0xa>
 80142b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080142bc <_vfiprintf_r>:
 80142bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142c0:	460d      	mov	r5, r1
 80142c2:	b09d      	sub	sp, #116	; 0x74
 80142c4:	4614      	mov	r4, r2
 80142c6:	4698      	mov	r8, r3
 80142c8:	4606      	mov	r6, r0
 80142ca:	b118      	cbz	r0, 80142d4 <_vfiprintf_r+0x18>
 80142cc:	6983      	ldr	r3, [r0, #24]
 80142ce:	b90b      	cbnz	r3, 80142d4 <_vfiprintf_r+0x18>
 80142d0:	f7ff fe66 	bl	8013fa0 <__sinit>
 80142d4:	4b89      	ldr	r3, [pc, #548]	; (80144fc <_vfiprintf_r+0x240>)
 80142d6:	429d      	cmp	r5, r3
 80142d8:	d11b      	bne.n	8014312 <_vfiprintf_r+0x56>
 80142da:	6875      	ldr	r5, [r6, #4]
 80142dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80142de:	07d9      	lsls	r1, r3, #31
 80142e0:	d405      	bmi.n	80142ee <_vfiprintf_r+0x32>
 80142e2:	89ab      	ldrh	r3, [r5, #12]
 80142e4:	059a      	lsls	r2, r3, #22
 80142e6:	d402      	bmi.n	80142ee <_vfiprintf_r+0x32>
 80142e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80142ea:	f7ff ff09 	bl	8014100 <__retarget_lock_acquire_recursive>
 80142ee:	89ab      	ldrh	r3, [r5, #12]
 80142f0:	071b      	lsls	r3, r3, #28
 80142f2:	d501      	bpl.n	80142f8 <_vfiprintf_r+0x3c>
 80142f4:	692b      	ldr	r3, [r5, #16]
 80142f6:	b9eb      	cbnz	r3, 8014334 <_vfiprintf_r+0x78>
 80142f8:	4629      	mov	r1, r5
 80142fa:	4630      	mov	r0, r6
 80142fc:	f000 fb5a 	bl	80149b4 <__swsetup_r>
 8014300:	b1c0      	cbz	r0, 8014334 <_vfiprintf_r+0x78>
 8014302:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014304:	07dc      	lsls	r4, r3, #31
 8014306:	d50e      	bpl.n	8014326 <_vfiprintf_r+0x6a>
 8014308:	f04f 30ff 	mov.w	r0, #4294967295
 801430c:	b01d      	add	sp, #116	; 0x74
 801430e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014312:	4b7b      	ldr	r3, [pc, #492]	; (8014500 <_vfiprintf_r+0x244>)
 8014314:	429d      	cmp	r5, r3
 8014316:	d101      	bne.n	801431c <_vfiprintf_r+0x60>
 8014318:	68b5      	ldr	r5, [r6, #8]
 801431a:	e7df      	b.n	80142dc <_vfiprintf_r+0x20>
 801431c:	4b79      	ldr	r3, [pc, #484]	; (8014504 <_vfiprintf_r+0x248>)
 801431e:	429d      	cmp	r5, r3
 8014320:	bf08      	it	eq
 8014322:	68f5      	ldreq	r5, [r6, #12]
 8014324:	e7da      	b.n	80142dc <_vfiprintf_r+0x20>
 8014326:	89ab      	ldrh	r3, [r5, #12]
 8014328:	0598      	lsls	r0, r3, #22
 801432a:	d4ed      	bmi.n	8014308 <_vfiprintf_r+0x4c>
 801432c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801432e:	f7ff fee8 	bl	8014102 <__retarget_lock_release_recursive>
 8014332:	e7e9      	b.n	8014308 <_vfiprintf_r+0x4c>
 8014334:	2300      	movs	r3, #0
 8014336:	9309      	str	r3, [sp, #36]	; 0x24
 8014338:	2320      	movs	r3, #32
 801433a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801433e:	f8cd 800c 	str.w	r8, [sp, #12]
 8014342:	2330      	movs	r3, #48	; 0x30
 8014344:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014508 <_vfiprintf_r+0x24c>
 8014348:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801434c:	f04f 0901 	mov.w	r9, #1
 8014350:	4623      	mov	r3, r4
 8014352:	469a      	mov	sl, r3
 8014354:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014358:	b10a      	cbz	r2, 801435e <_vfiprintf_r+0xa2>
 801435a:	2a25      	cmp	r2, #37	; 0x25
 801435c:	d1f9      	bne.n	8014352 <_vfiprintf_r+0x96>
 801435e:	ebba 0b04 	subs.w	fp, sl, r4
 8014362:	d00b      	beq.n	801437c <_vfiprintf_r+0xc0>
 8014364:	465b      	mov	r3, fp
 8014366:	4622      	mov	r2, r4
 8014368:	4629      	mov	r1, r5
 801436a:	4630      	mov	r0, r6
 801436c:	f7ff ff93 	bl	8014296 <__sfputs_r>
 8014370:	3001      	adds	r0, #1
 8014372:	f000 80aa 	beq.w	80144ca <_vfiprintf_r+0x20e>
 8014376:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014378:	445a      	add	r2, fp
 801437a:	9209      	str	r2, [sp, #36]	; 0x24
 801437c:	f89a 3000 	ldrb.w	r3, [sl]
 8014380:	2b00      	cmp	r3, #0
 8014382:	f000 80a2 	beq.w	80144ca <_vfiprintf_r+0x20e>
 8014386:	2300      	movs	r3, #0
 8014388:	f04f 32ff 	mov.w	r2, #4294967295
 801438c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014390:	f10a 0a01 	add.w	sl, sl, #1
 8014394:	9304      	str	r3, [sp, #16]
 8014396:	9307      	str	r3, [sp, #28]
 8014398:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801439c:	931a      	str	r3, [sp, #104]	; 0x68
 801439e:	4654      	mov	r4, sl
 80143a0:	2205      	movs	r2, #5
 80143a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80143a6:	4858      	ldr	r0, [pc, #352]	; (8014508 <_vfiprintf_r+0x24c>)
 80143a8:	f7eb ff22 	bl	80001f0 <memchr>
 80143ac:	9a04      	ldr	r2, [sp, #16]
 80143ae:	b9d8      	cbnz	r0, 80143e8 <_vfiprintf_r+0x12c>
 80143b0:	06d1      	lsls	r1, r2, #27
 80143b2:	bf44      	itt	mi
 80143b4:	2320      	movmi	r3, #32
 80143b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143ba:	0713      	lsls	r3, r2, #28
 80143bc:	bf44      	itt	mi
 80143be:	232b      	movmi	r3, #43	; 0x2b
 80143c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80143c4:	f89a 3000 	ldrb.w	r3, [sl]
 80143c8:	2b2a      	cmp	r3, #42	; 0x2a
 80143ca:	d015      	beq.n	80143f8 <_vfiprintf_r+0x13c>
 80143cc:	9a07      	ldr	r2, [sp, #28]
 80143ce:	4654      	mov	r4, sl
 80143d0:	2000      	movs	r0, #0
 80143d2:	f04f 0c0a 	mov.w	ip, #10
 80143d6:	4621      	mov	r1, r4
 80143d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80143dc:	3b30      	subs	r3, #48	; 0x30
 80143de:	2b09      	cmp	r3, #9
 80143e0:	d94e      	bls.n	8014480 <_vfiprintf_r+0x1c4>
 80143e2:	b1b0      	cbz	r0, 8014412 <_vfiprintf_r+0x156>
 80143e4:	9207      	str	r2, [sp, #28]
 80143e6:	e014      	b.n	8014412 <_vfiprintf_r+0x156>
 80143e8:	eba0 0308 	sub.w	r3, r0, r8
 80143ec:	fa09 f303 	lsl.w	r3, r9, r3
 80143f0:	4313      	orrs	r3, r2
 80143f2:	9304      	str	r3, [sp, #16]
 80143f4:	46a2      	mov	sl, r4
 80143f6:	e7d2      	b.n	801439e <_vfiprintf_r+0xe2>
 80143f8:	9b03      	ldr	r3, [sp, #12]
 80143fa:	1d19      	adds	r1, r3, #4
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	9103      	str	r1, [sp, #12]
 8014400:	2b00      	cmp	r3, #0
 8014402:	bfbb      	ittet	lt
 8014404:	425b      	neglt	r3, r3
 8014406:	f042 0202 	orrlt.w	r2, r2, #2
 801440a:	9307      	strge	r3, [sp, #28]
 801440c:	9307      	strlt	r3, [sp, #28]
 801440e:	bfb8      	it	lt
 8014410:	9204      	strlt	r2, [sp, #16]
 8014412:	7823      	ldrb	r3, [r4, #0]
 8014414:	2b2e      	cmp	r3, #46	; 0x2e
 8014416:	d10c      	bne.n	8014432 <_vfiprintf_r+0x176>
 8014418:	7863      	ldrb	r3, [r4, #1]
 801441a:	2b2a      	cmp	r3, #42	; 0x2a
 801441c:	d135      	bne.n	801448a <_vfiprintf_r+0x1ce>
 801441e:	9b03      	ldr	r3, [sp, #12]
 8014420:	1d1a      	adds	r2, r3, #4
 8014422:	681b      	ldr	r3, [r3, #0]
 8014424:	9203      	str	r2, [sp, #12]
 8014426:	2b00      	cmp	r3, #0
 8014428:	bfb8      	it	lt
 801442a:	f04f 33ff 	movlt.w	r3, #4294967295
 801442e:	3402      	adds	r4, #2
 8014430:	9305      	str	r3, [sp, #20]
 8014432:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014518 <_vfiprintf_r+0x25c>
 8014436:	7821      	ldrb	r1, [r4, #0]
 8014438:	2203      	movs	r2, #3
 801443a:	4650      	mov	r0, sl
 801443c:	f7eb fed8 	bl	80001f0 <memchr>
 8014440:	b140      	cbz	r0, 8014454 <_vfiprintf_r+0x198>
 8014442:	2340      	movs	r3, #64	; 0x40
 8014444:	eba0 000a 	sub.w	r0, r0, sl
 8014448:	fa03 f000 	lsl.w	r0, r3, r0
 801444c:	9b04      	ldr	r3, [sp, #16]
 801444e:	4303      	orrs	r3, r0
 8014450:	3401      	adds	r4, #1
 8014452:	9304      	str	r3, [sp, #16]
 8014454:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014458:	482c      	ldr	r0, [pc, #176]	; (801450c <_vfiprintf_r+0x250>)
 801445a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801445e:	2206      	movs	r2, #6
 8014460:	f7eb fec6 	bl	80001f0 <memchr>
 8014464:	2800      	cmp	r0, #0
 8014466:	d03f      	beq.n	80144e8 <_vfiprintf_r+0x22c>
 8014468:	4b29      	ldr	r3, [pc, #164]	; (8014510 <_vfiprintf_r+0x254>)
 801446a:	bb1b      	cbnz	r3, 80144b4 <_vfiprintf_r+0x1f8>
 801446c:	9b03      	ldr	r3, [sp, #12]
 801446e:	3307      	adds	r3, #7
 8014470:	f023 0307 	bic.w	r3, r3, #7
 8014474:	3308      	adds	r3, #8
 8014476:	9303      	str	r3, [sp, #12]
 8014478:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801447a:	443b      	add	r3, r7
 801447c:	9309      	str	r3, [sp, #36]	; 0x24
 801447e:	e767      	b.n	8014350 <_vfiprintf_r+0x94>
 8014480:	fb0c 3202 	mla	r2, ip, r2, r3
 8014484:	460c      	mov	r4, r1
 8014486:	2001      	movs	r0, #1
 8014488:	e7a5      	b.n	80143d6 <_vfiprintf_r+0x11a>
 801448a:	2300      	movs	r3, #0
 801448c:	3401      	adds	r4, #1
 801448e:	9305      	str	r3, [sp, #20]
 8014490:	4619      	mov	r1, r3
 8014492:	f04f 0c0a 	mov.w	ip, #10
 8014496:	4620      	mov	r0, r4
 8014498:	f810 2b01 	ldrb.w	r2, [r0], #1
 801449c:	3a30      	subs	r2, #48	; 0x30
 801449e:	2a09      	cmp	r2, #9
 80144a0:	d903      	bls.n	80144aa <_vfiprintf_r+0x1ee>
 80144a2:	2b00      	cmp	r3, #0
 80144a4:	d0c5      	beq.n	8014432 <_vfiprintf_r+0x176>
 80144a6:	9105      	str	r1, [sp, #20]
 80144a8:	e7c3      	b.n	8014432 <_vfiprintf_r+0x176>
 80144aa:	fb0c 2101 	mla	r1, ip, r1, r2
 80144ae:	4604      	mov	r4, r0
 80144b0:	2301      	movs	r3, #1
 80144b2:	e7f0      	b.n	8014496 <_vfiprintf_r+0x1da>
 80144b4:	ab03      	add	r3, sp, #12
 80144b6:	9300      	str	r3, [sp, #0]
 80144b8:	462a      	mov	r2, r5
 80144ba:	4b16      	ldr	r3, [pc, #88]	; (8014514 <_vfiprintf_r+0x258>)
 80144bc:	a904      	add	r1, sp, #16
 80144be:	4630      	mov	r0, r6
 80144c0:	f3af 8000 	nop.w
 80144c4:	4607      	mov	r7, r0
 80144c6:	1c78      	adds	r0, r7, #1
 80144c8:	d1d6      	bne.n	8014478 <_vfiprintf_r+0x1bc>
 80144ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80144cc:	07d9      	lsls	r1, r3, #31
 80144ce:	d405      	bmi.n	80144dc <_vfiprintf_r+0x220>
 80144d0:	89ab      	ldrh	r3, [r5, #12]
 80144d2:	059a      	lsls	r2, r3, #22
 80144d4:	d402      	bmi.n	80144dc <_vfiprintf_r+0x220>
 80144d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80144d8:	f7ff fe13 	bl	8014102 <__retarget_lock_release_recursive>
 80144dc:	89ab      	ldrh	r3, [r5, #12]
 80144de:	065b      	lsls	r3, r3, #25
 80144e0:	f53f af12 	bmi.w	8014308 <_vfiprintf_r+0x4c>
 80144e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80144e6:	e711      	b.n	801430c <_vfiprintf_r+0x50>
 80144e8:	ab03      	add	r3, sp, #12
 80144ea:	9300      	str	r3, [sp, #0]
 80144ec:	462a      	mov	r2, r5
 80144ee:	4b09      	ldr	r3, [pc, #36]	; (8014514 <_vfiprintf_r+0x258>)
 80144f0:	a904      	add	r1, sp, #16
 80144f2:	4630      	mov	r0, r6
 80144f4:	f000 f880 	bl	80145f8 <_printf_i>
 80144f8:	e7e4      	b.n	80144c4 <_vfiprintf_r+0x208>
 80144fa:	bf00      	nop
 80144fc:	08017a20 	.word	0x08017a20
 8014500:	08017a40 	.word	0x08017a40
 8014504:	08017a00 	.word	0x08017a00
 8014508:	08017a60 	.word	0x08017a60
 801450c:	08017a6a 	.word	0x08017a6a
 8014510:	00000000 	.word	0x00000000
 8014514:	08014297 	.word	0x08014297
 8014518:	08017a66 	.word	0x08017a66

0801451c <_printf_common>:
 801451c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014520:	4616      	mov	r6, r2
 8014522:	4699      	mov	r9, r3
 8014524:	688a      	ldr	r2, [r1, #8]
 8014526:	690b      	ldr	r3, [r1, #16]
 8014528:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801452c:	4293      	cmp	r3, r2
 801452e:	bfb8      	it	lt
 8014530:	4613      	movlt	r3, r2
 8014532:	6033      	str	r3, [r6, #0]
 8014534:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014538:	4607      	mov	r7, r0
 801453a:	460c      	mov	r4, r1
 801453c:	b10a      	cbz	r2, 8014542 <_printf_common+0x26>
 801453e:	3301      	adds	r3, #1
 8014540:	6033      	str	r3, [r6, #0]
 8014542:	6823      	ldr	r3, [r4, #0]
 8014544:	0699      	lsls	r1, r3, #26
 8014546:	bf42      	ittt	mi
 8014548:	6833      	ldrmi	r3, [r6, #0]
 801454a:	3302      	addmi	r3, #2
 801454c:	6033      	strmi	r3, [r6, #0]
 801454e:	6825      	ldr	r5, [r4, #0]
 8014550:	f015 0506 	ands.w	r5, r5, #6
 8014554:	d106      	bne.n	8014564 <_printf_common+0x48>
 8014556:	f104 0a19 	add.w	sl, r4, #25
 801455a:	68e3      	ldr	r3, [r4, #12]
 801455c:	6832      	ldr	r2, [r6, #0]
 801455e:	1a9b      	subs	r3, r3, r2
 8014560:	42ab      	cmp	r3, r5
 8014562:	dc26      	bgt.n	80145b2 <_printf_common+0x96>
 8014564:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014568:	1e13      	subs	r3, r2, #0
 801456a:	6822      	ldr	r2, [r4, #0]
 801456c:	bf18      	it	ne
 801456e:	2301      	movne	r3, #1
 8014570:	0692      	lsls	r2, r2, #26
 8014572:	d42b      	bmi.n	80145cc <_printf_common+0xb0>
 8014574:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014578:	4649      	mov	r1, r9
 801457a:	4638      	mov	r0, r7
 801457c:	47c0      	blx	r8
 801457e:	3001      	adds	r0, #1
 8014580:	d01e      	beq.n	80145c0 <_printf_common+0xa4>
 8014582:	6823      	ldr	r3, [r4, #0]
 8014584:	68e5      	ldr	r5, [r4, #12]
 8014586:	6832      	ldr	r2, [r6, #0]
 8014588:	f003 0306 	and.w	r3, r3, #6
 801458c:	2b04      	cmp	r3, #4
 801458e:	bf08      	it	eq
 8014590:	1aad      	subeq	r5, r5, r2
 8014592:	68a3      	ldr	r3, [r4, #8]
 8014594:	6922      	ldr	r2, [r4, #16]
 8014596:	bf0c      	ite	eq
 8014598:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801459c:	2500      	movne	r5, #0
 801459e:	4293      	cmp	r3, r2
 80145a0:	bfc4      	itt	gt
 80145a2:	1a9b      	subgt	r3, r3, r2
 80145a4:	18ed      	addgt	r5, r5, r3
 80145a6:	2600      	movs	r6, #0
 80145a8:	341a      	adds	r4, #26
 80145aa:	42b5      	cmp	r5, r6
 80145ac:	d11a      	bne.n	80145e4 <_printf_common+0xc8>
 80145ae:	2000      	movs	r0, #0
 80145b0:	e008      	b.n	80145c4 <_printf_common+0xa8>
 80145b2:	2301      	movs	r3, #1
 80145b4:	4652      	mov	r2, sl
 80145b6:	4649      	mov	r1, r9
 80145b8:	4638      	mov	r0, r7
 80145ba:	47c0      	blx	r8
 80145bc:	3001      	adds	r0, #1
 80145be:	d103      	bne.n	80145c8 <_printf_common+0xac>
 80145c0:	f04f 30ff 	mov.w	r0, #4294967295
 80145c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80145c8:	3501      	adds	r5, #1
 80145ca:	e7c6      	b.n	801455a <_printf_common+0x3e>
 80145cc:	18e1      	adds	r1, r4, r3
 80145ce:	1c5a      	adds	r2, r3, #1
 80145d0:	2030      	movs	r0, #48	; 0x30
 80145d2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80145d6:	4422      	add	r2, r4
 80145d8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80145dc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80145e0:	3302      	adds	r3, #2
 80145e2:	e7c7      	b.n	8014574 <_printf_common+0x58>
 80145e4:	2301      	movs	r3, #1
 80145e6:	4622      	mov	r2, r4
 80145e8:	4649      	mov	r1, r9
 80145ea:	4638      	mov	r0, r7
 80145ec:	47c0      	blx	r8
 80145ee:	3001      	adds	r0, #1
 80145f0:	d0e6      	beq.n	80145c0 <_printf_common+0xa4>
 80145f2:	3601      	adds	r6, #1
 80145f4:	e7d9      	b.n	80145aa <_printf_common+0x8e>
	...

080145f8 <_printf_i>:
 80145f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80145fc:	460c      	mov	r4, r1
 80145fe:	4691      	mov	r9, r2
 8014600:	7e27      	ldrb	r7, [r4, #24]
 8014602:	990c      	ldr	r1, [sp, #48]	; 0x30
 8014604:	2f78      	cmp	r7, #120	; 0x78
 8014606:	4680      	mov	r8, r0
 8014608:	469a      	mov	sl, r3
 801460a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801460e:	d807      	bhi.n	8014620 <_printf_i+0x28>
 8014610:	2f62      	cmp	r7, #98	; 0x62
 8014612:	d80a      	bhi.n	801462a <_printf_i+0x32>
 8014614:	2f00      	cmp	r7, #0
 8014616:	f000 80d8 	beq.w	80147ca <_printf_i+0x1d2>
 801461a:	2f58      	cmp	r7, #88	; 0x58
 801461c:	f000 80a3 	beq.w	8014766 <_printf_i+0x16e>
 8014620:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8014624:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014628:	e03a      	b.n	80146a0 <_printf_i+0xa8>
 801462a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801462e:	2b15      	cmp	r3, #21
 8014630:	d8f6      	bhi.n	8014620 <_printf_i+0x28>
 8014632:	a001      	add	r0, pc, #4	; (adr r0, 8014638 <_printf_i+0x40>)
 8014634:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8014638:	08014691 	.word	0x08014691
 801463c:	080146a5 	.word	0x080146a5
 8014640:	08014621 	.word	0x08014621
 8014644:	08014621 	.word	0x08014621
 8014648:	08014621 	.word	0x08014621
 801464c:	08014621 	.word	0x08014621
 8014650:	080146a5 	.word	0x080146a5
 8014654:	08014621 	.word	0x08014621
 8014658:	08014621 	.word	0x08014621
 801465c:	08014621 	.word	0x08014621
 8014660:	08014621 	.word	0x08014621
 8014664:	080147b1 	.word	0x080147b1
 8014668:	080146d5 	.word	0x080146d5
 801466c:	08014793 	.word	0x08014793
 8014670:	08014621 	.word	0x08014621
 8014674:	08014621 	.word	0x08014621
 8014678:	080147d3 	.word	0x080147d3
 801467c:	08014621 	.word	0x08014621
 8014680:	080146d5 	.word	0x080146d5
 8014684:	08014621 	.word	0x08014621
 8014688:	08014621 	.word	0x08014621
 801468c:	0801479b 	.word	0x0801479b
 8014690:	680b      	ldr	r3, [r1, #0]
 8014692:	1d1a      	adds	r2, r3, #4
 8014694:	681b      	ldr	r3, [r3, #0]
 8014696:	600a      	str	r2, [r1, #0]
 8014698:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801469c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80146a0:	2301      	movs	r3, #1
 80146a2:	e0a3      	b.n	80147ec <_printf_i+0x1f4>
 80146a4:	6825      	ldr	r5, [r4, #0]
 80146a6:	6808      	ldr	r0, [r1, #0]
 80146a8:	062e      	lsls	r6, r5, #24
 80146aa:	f100 0304 	add.w	r3, r0, #4
 80146ae:	d50a      	bpl.n	80146c6 <_printf_i+0xce>
 80146b0:	6805      	ldr	r5, [r0, #0]
 80146b2:	600b      	str	r3, [r1, #0]
 80146b4:	2d00      	cmp	r5, #0
 80146b6:	da03      	bge.n	80146c0 <_printf_i+0xc8>
 80146b8:	232d      	movs	r3, #45	; 0x2d
 80146ba:	426d      	negs	r5, r5
 80146bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80146c0:	485e      	ldr	r0, [pc, #376]	; (801483c <_printf_i+0x244>)
 80146c2:	230a      	movs	r3, #10
 80146c4:	e019      	b.n	80146fa <_printf_i+0x102>
 80146c6:	f015 0f40 	tst.w	r5, #64	; 0x40
 80146ca:	6805      	ldr	r5, [r0, #0]
 80146cc:	600b      	str	r3, [r1, #0]
 80146ce:	bf18      	it	ne
 80146d0:	b22d      	sxthne	r5, r5
 80146d2:	e7ef      	b.n	80146b4 <_printf_i+0xbc>
 80146d4:	680b      	ldr	r3, [r1, #0]
 80146d6:	6825      	ldr	r5, [r4, #0]
 80146d8:	1d18      	adds	r0, r3, #4
 80146da:	6008      	str	r0, [r1, #0]
 80146dc:	0628      	lsls	r0, r5, #24
 80146de:	d501      	bpl.n	80146e4 <_printf_i+0xec>
 80146e0:	681d      	ldr	r5, [r3, #0]
 80146e2:	e002      	b.n	80146ea <_printf_i+0xf2>
 80146e4:	0669      	lsls	r1, r5, #25
 80146e6:	d5fb      	bpl.n	80146e0 <_printf_i+0xe8>
 80146e8:	881d      	ldrh	r5, [r3, #0]
 80146ea:	4854      	ldr	r0, [pc, #336]	; (801483c <_printf_i+0x244>)
 80146ec:	2f6f      	cmp	r7, #111	; 0x6f
 80146ee:	bf0c      	ite	eq
 80146f0:	2308      	moveq	r3, #8
 80146f2:	230a      	movne	r3, #10
 80146f4:	2100      	movs	r1, #0
 80146f6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80146fa:	6866      	ldr	r6, [r4, #4]
 80146fc:	60a6      	str	r6, [r4, #8]
 80146fe:	2e00      	cmp	r6, #0
 8014700:	bfa2      	ittt	ge
 8014702:	6821      	ldrge	r1, [r4, #0]
 8014704:	f021 0104 	bicge.w	r1, r1, #4
 8014708:	6021      	strge	r1, [r4, #0]
 801470a:	b90d      	cbnz	r5, 8014710 <_printf_i+0x118>
 801470c:	2e00      	cmp	r6, #0
 801470e:	d04d      	beq.n	80147ac <_printf_i+0x1b4>
 8014710:	4616      	mov	r6, r2
 8014712:	fbb5 f1f3 	udiv	r1, r5, r3
 8014716:	fb03 5711 	mls	r7, r3, r1, r5
 801471a:	5dc7      	ldrb	r7, [r0, r7]
 801471c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8014720:	462f      	mov	r7, r5
 8014722:	42bb      	cmp	r3, r7
 8014724:	460d      	mov	r5, r1
 8014726:	d9f4      	bls.n	8014712 <_printf_i+0x11a>
 8014728:	2b08      	cmp	r3, #8
 801472a:	d10b      	bne.n	8014744 <_printf_i+0x14c>
 801472c:	6823      	ldr	r3, [r4, #0]
 801472e:	07df      	lsls	r7, r3, #31
 8014730:	d508      	bpl.n	8014744 <_printf_i+0x14c>
 8014732:	6923      	ldr	r3, [r4, #16]
 8014734:	6861      	ldr	r1, [r4, #4]
 8014736:	4299      	cmp	r1, r3
 8014738:	bfde      	ittt	le
 801473a:	2330      	movle	r3, #48	; 0x30
 801473c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8014740:	f106 36ff 	addle.w	r6, r6, #4294967295
 8014744:	1b92      	subs	r2, r2, r6
 8014746:	6122      	str	r2, [r4, #16]
 8014748:	f8cd a000 	str.w	sl, [sp]
 801474c:	464b      	mov	r3, r9
 801474e:	aa03      	add	r2, sp, #12
 8014750:	4621      	mov	r1, r4
 8014752:	4640      	mov	r0, r8
 8014754:	f7ff fee2 	bl	801451c <_printf_common>
 8014758:	3001      	adds	r0, #1
 801475a:	d14c      	bne.n	80147f6 <_printf_i+0x1fe>
 801475c:	f04f 30ff 	mov.w	r0, #4294967295
 8014760:	b004      	add	sp, #16
 8014762:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014766:	4835      	ldr	r0, [pc, #212]	; (801483c <_printf_i+0x244>)
 8014768:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801476c:	6823      	ldr	r3, [r4, #0]
 801476e:	680e      	ldr	r6, [r1, #0]
 8014770:	061f      	lsls	r7, r3, #24
 8014772:	f856 5b04 	ldr.w	r5, [r6], #4
 8014776:	600e      	str	r6, [r1, #0]
 8014778:	d514      	bpl.n	80147a4 <_printf_i+0x1ac>
 801477a:	07d9      	lsls	r1, r3, #31
 801477c:	bf44      	itt	mi
 801477e:	f043 0320 	orrmi.w	r3, r3, #32
 8014782:	6023      	strmi	r3, [r4, #0]
 8014784:	b91d      	cbnz	r5, 801478e <_printf_i+0x196>
 8014786:	6823      	ldr	r3, [r4, #0]
 8014788:	f023 0320 	bic.w	r3, r3, #32
 801478c:	6023      	str	r3, [r4, #0]
 801478e:	2310      	movs	r3, #16
 8014790:	e7b0      	b.n	80146f4 <_printf_i+0xfc>
 8014792:	6823      	ldr	r3, [r4, #0]
 8014794:	f043 0320 	orr.w	r3, r3, #32
 8014798:	6023      	str	r3, [r4, #0]
 801479a:	2378      	movs	r3, #120	; 0x78
 801479c:	4828      	ldr	r0, [pc, #160]	; (8014840 <_printf_i+0x248>)
 801479e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80147a2:	e7e3      	b.n	801476c <_printf_i+0x174>
 80147a4:	065e      	lsls	r6, r3, #25
 80147a6:	bf48      	it	mi
 80147a8:	b2ad      	uxthmi	r5, r5
 80147aa:	e7e6      	b.n	801477a <_printf_i+0x182>
 80147ac:	4616      	mov	r6, r2
 80147ae:	e7bb      	b.n	8014728 <_printf_i+0x130>
 80147b0:	680b      	ldr	r3, [r1, #0]
 80147b2:	6826      	ldr	r6, [r4, #0]
 80147b4:	6960      	ldr	r0, [r4, #20]
 80147b6:	1d1d      	adds	r5, r3, #4
 80147b8:	600d      	str	r5, [r1, #0]
 80147ba:	0635      	lsls	r5, r6, #24
 80147bc:	681b      	ldr	r3, [r3, #0]
 80147be:	d501      	bpl.n	80147c4 <_printf_i+0x1cc>
 80147c0:	6018      	str	r0, [r3, #0]
 80147c2:	e002      	b.n	80147ca <_printf_i+0x1d2>
 80147c4:	0671      	lsls	r1, r6, #25
 80147c6:	d5fb      	bpl.n	80147c0 <_printf_i+0x1c8>
 80147c8:	8018      	strh	r0, [r3, #0]
 80147ca:	2300      	movs	r3, #0
 80147cc:	6123      	str	r3, [r4, #16]
 80147ce:	4616      	mov	r6, r2
 80147d0:	e7ba      	b.n	8014748 <_printf_i+0x150>
 80147d2:	680b      	ldr	r3, [r1, #0]
 80147d4:	1d1a      	adds	r2, r3, #4
 80147d6:	600a      	str	r2, [r1, #0]
 80147d8:	681e      	ldr	r6, [r3, #0]
 80147da:	6862      	ldr	r2, [r4, #4]
 80147dc:	2100      	movs	r1, #0
 80147de:	4630      	mov	r0, r6
 80147e0:	f7eb fd06 	bl	80001f0 <memchr>
 80147e4:	b108      	cbz	r0, 80147ea <_printf_i+0x1f2>
 80147e6:	1b80      	subs	r0, r0, r6
 80147e8:	6060      	str	r0, [r4, #4]
 80147ea:	6863      	ldr	r3, [r4, #4]
 80147ec:	6123      	str	r3, [r4, #16]
 80147ee:	2300      	movs	r3, #0
 80147f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80147f4:	e7a8      	b.n	8014748 <_printf_i+0x150>
 80147f6:	6923      	ldr	r3, [r4, #16]
 80147f8:	4632      	mov	r2, r6
 80147fa:	4649      	mov	r1, r9
 80147fc:	4640      	mov	r0, r8
 80147fe:	47d0      	blx	sl
 8014800:	3001      	adds	r0, #1
 8014802:	d0ab      	beq.n	801475c <_printf_i+0x164>
 8014804:	6823      	ldr	r3, [r4, #0]
 8014806:	079b      	lsls	r3, r3, #30
 8014808:	d413      	bmi.n	8014832 <_printf_i+0x23a>
 801480a:	68e0      	ldr	r0, [r4, #12]
 801480c:	9b03      	ldr	r3, [sp, #12]
 801480e:	4298      	cmp	r0, r3
 8014810:	bfb8      	it	lt
 8014812:	4618      	movlt	r0, r3
 8014814:	e7a4      	b.n	8014760 <_printf_i+0x168>
 8014816:	2301      	movs	r3, #1
 8014818:	4632      	mov	r2, r6
 801481a:	4649      	mov	r1, r9
 801481c:	4640      	mov	r0, r8
 801481e:	47d0      	blx	sl
 8014820:	3001      	adds	r0, #1
 8014822:	d09b      	beq.n	801475c <_printf_i+0x164>
 8014824:	3501      	adds	r5, #1
 8014826:	68e3      	ldr	r3, [r4, #12]
 8014828:	9903      	ldr	r1, [sp, #12]
 801482a:	1a5b      	subs	r3, r3, r1
 801482c:	42ab      	cmp	r3, r5
 801482e:	dcf2      	bgt.n	8014816 <_printf_i+0x21e>
 8014830:	e7eb      	b.n	801480a <_printf_i+0x212>
 8014832:	2500      	movs	r5, #0
 8014834:	f104 0619 	add.w	r6, r4, #25
 8014838:	e7f5      	b.n	8014826 <_printf_i+0x22e>
 801483a:	bf00      	nop
 801483c:	08017a71 	.word	0x08017a71
 8014840:	08017a82 	.word	0x08017a82

08014844 <_sbrk_r>:
 8014844:	b538      	push	{r3, r4, r5, lr}
 8014846:	4d06      	ldr	r5, [pc, #24]	; (8014860 <_sbrk_r+0x1c>)
 8014848:	2300      	movs	r3, #0
 801484a:	4604      	mov	r4, r0
 801484c:	4608      	mov	r0, r1
 801484e:	602b      	str	r3, [r5, #0]
 8014850:	f7ec fd62 	bl	8001318 <_sbrk>
 8014854:	1c43      	adds	r3, r0, #1
 8014856:	d102      	bne.n	801485e <_sbrk_r+0x1a>
 8014858:	682b      	ldr	r3, [r5, #0]
 801485a:	b103      	cbz	r3, 801485e <_sbrk_r+0x1a>
 801485c:	6023      	str	r3, [r4, #0]
 801485e:	bd38      	pop	{r3, r4, r5, pc}
 8014860:	2000721c 	.word	0x2000721c

08014864 <__sread>:
 8014864:	b510      	push	{r4, lr}
 8014866:	460c      	mov	r4, r1
 8014868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801486c:	f000 fa6c 	bl	8014d48 <_read_r>
 8014870:	2800      	cmp	r0, #0
 8014872:	bfab      	itete	ge
 8014874:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014876:	89a3      	ldrhlt	r3, [r4, #12]
 8014878:	181b      	addge	r3, r3, r0
 801487a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801487e:	bfac      	ite	ge
 8014880:	6563      	strge	r3, [r4, #84]	; 0x54
 8014882:	81a3      	strhlt	r3, [r4, #12]
 8014884:	bd10      	pop	{r4, pc}

08014886 <__swrite>:
 8014886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801488a:	461f      	mov	r7, r3
 801488c:	898b      	ldrh	r3, [r1, #12]
 801488e:	05db      	lsls	r3, r3, #23
 8014890:	4605      	mov	r5, r0
 8014892:	460c      	mov	r4, r1
 8014894:	4616      	mov	r6, r2
 8014896:	d505      	bpl.n	80148a4 <__swrite+0x1e>
 8014898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801489c:	2302      	movs	r3, #2
 801489e:	2200      	movs	r2, #0
 80148a0:	f000 f9d0 	bl	8014c44 <_lseek_r>
 80148a4:	89a3      	ldrh	r3, [r4, #12]
 80148a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80148aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80148ae:	81a3      	strh	r3, [r4, #12]
 80148b0:	4632      	mov	r2, r6
 80148b2:	463b      	mov	r3, r7
 80148b4:	4628      	mov	r0, r5
 80148b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148ba:	f000 b869 	b.w	8014990 <_write_r>

080148be <__sseek>:
 80148be:	b510      	push	{r4, lr}
 80148c0:	460c      	mov	r4, r1
 80148c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148c6:	f000 f9bd 	bl	8014c44 <_lseek_r>
 80148ca:	1c43      	adds	r3, r0, #1
 80148cc:	89a3      	ldrh	r3, [r4, #12]
 80148ce:	bf15      	itete	ne
 80148d0:	6560      	strne	r0, [r4, #84]	; 0x54
 80148d2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80148d6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80148da:	81a3      	strheq	r3, [r4, #12]
 80148dc:	bf18      	it	ne
 80148de:	81a3      	strhne	r3, [r4, #12]
 80148e0:	bd10      	pop	{r4, pc}

080148e2 <__sclose>:
 80148e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148e6:	f000 b8db 	b.w	8014aa0 <_close_r>
	...

080148ec <__swbuf_r>:
 80148ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80148ee:	460e      	mov	r6, r1
 80148f0:	4614      	mov	r4, r2
 80148f2:	4605      	mov	r5, r0
 80148f4:	b118      	cbz	r0, 80148fe <__swbuf_r+0x12>
 80148f6:	6983      	ldr	r3, [r0, #24]
 80148f8:	b90b      	cbnz	r3, 80148fe <__swbuf_r+0x12>
 80148fa:	f7ff fb51 	bl	8013fa0 <__sinit>
 80148fe:	4b21      	ldr	r3, [pc, #132]	; (8014984 <__swbuf_r+0x98>)
 8014900:	429c      	cmp	r4, r3
 8014902:	d12b      	bne.n	801495c <__swbuf_r+0x70>
 8014904:	686c      	ldr	r4, [r5, #4]
 8014906:	69a3      	ldr	r3, [r4, #24]
 8014908:	60a3      	str	r3, [r4, #8]
 801490a:	89a3      	ldrh	r3, [r4, #12]
 801490c:	071a      	lsls	r2, r3, #28
 801490e:	d52f      	bpl.n	8014970 <__swbuf_r+0x84>
 8014910:	6923      	ldr	r3, [r4, #16]
 8014912:	b36b      	cbz	r3, 8014970 <__swbuf_r+0x84>
 8014914:	6923      	ldr	r3, [r4, #16]
 8014916:	6820      	ldr	r0, [r4, #0]
 8014918:	1ac0      	subs	r0, r0, r3
 801491a:	6963      	ldr	r3, [r4, #20]
 801491c:	b2f6      	uxtb	r6, r6
 801491e:	4283      	cmp	r3, r0
 8014920:	4637      	mov	r7, r6
 8014922:	dc04      	bgt.n	801492e <__swbuf_r+0x42>
 8014924:	4621      	mov	r1, r4
 8014926:	4628      	mov	r0, r5
 8014928:	f000 f950 	bl	8014bcc <_fflush_r>
 801492c:	bb30      	cbnz	r0, 801497c <__swbuf_r+0x90>
 801492e:	68a3      	ldr	r3, [r4, #8]
 8014930:	3b01      	subs	r3, #1
 8014932:	60a3      	str	r3, [r4, #8]
 8014934:	6823      	ldr	r3, [r4, #0]
 8014936:	1c5a      	adds	r2, r3, #1
 8014938:	6022      	str	r2, [r4, #0]
 801493a:	701e      	strb	r6, [r3, #0]
 801493c:	6963      	ldr	r3, [r4, #20]
 801493e:	3001      	adds	r0, #1
 8014940:	4283      	cmp	r3, r0
 8014942:	d004      	beq.n	801494e <__swbuf_r+0x62>
 8014944:	89a3      	ldrh	r3, [r4, #12]
 8014946:	07db      	lsls	r3, r3, #31
 8014948:	d506      	bpl.n	8014958 <__swbuf_r+0x6c>
 801494a:	2e0a      	cmp	r6, #10
 801494c:	d104      	bne.n	8014958 <__swbuf_r+0x6c>
 801494e:	4621      	mov	r1, r4
 8014950:	4628      	mov	r0, r5
 8014952:	f000 f93b 	bl	8014bcc <_fflush_r>
 8014956:	b988      	cbnz	r0, 801497c <__swbuf_r+0x90>
 8014958:	4638      	mov	r0, r7
 801495a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801495c:	4b0a      	ldr	r3, [pc, #40]	; (8014988 <__swbuf_r+0x9c>)
 801495e:	429c      	cmp	r4, r3
 8014960:	d101      	bne.n	8014966 <__swbuf_r+0x7a>
 8014962:	68ac      	ldr	r4, [r5, #8]
 8014964:	e7cf      	b.n	8014906 <__swbuf_r+0x1a>
 8014966:	4b09      	ldr	r3, [pc, #36]	; (801498c <__swbuf_r+0xa0>)
 8014968:	429c      	cmp	r4, r3
 801496a:	bf08      	it	eq
 801496c:	68ec      	ldreq	r4, [r5, #12]
 801496e:	e7ca      	b.n	8014906 <__swbuf_r+0x1a>
 8014970:	4621      	mov	r1, r4
 8014972:	4628      	mov	r0, r5
 8014974:	f000 f81e 	bl	80149b4 <__swsetup_r>
 8014978:	2800      	cmp	r0, #0
 801497a:	d0cb      	beq.n	8014914 <__swbuf_r+0x28>
 801497c:	f04f 37ff 	mov.w	r7, #4294967295
 8014980:	e7ea      	b.n	8014958 <__swbuf_r+0x6c>
 8014982:	bf00      	nop
 8014984:	08017a20 	.word	0x08017a20
 8014988:	08017a40 	.word	0x08017a40
 801498c:	08017a00 	.word	0x08017a00

08014990 <_write_r>:
 8014990:	b538      	push	{r3, r4, r5, lr}
 8014992:	4d07      	ldr	r5, [pc, #28]	; (80149b0 <_write_r+0x20>)
 8014994:	4604      	mov	r4, r0
 8014996:	4608      	mov	r0, r1
 8014998:	4611      	mov	r1, r2
 801499a:	2200      	movs	r2, #0
 801499c:	602a      	str	r2, [r5, #0]
 801499e:	461a      	mov	r2, r3
 80149a0:	f7ec fc69 	bl	8001276 <_write>
 80149a4:	1c43      	adds	r3, r0, #1
 80149a6:	d102      	bne.n	80149ae <_write_r+0x1e>
 80149a8:	682b      	ldr	r3, [r5, #0]
 80149aa:	b103      	cbz	r3, 80149ae <_write_r+0x1e>
 80149ac:	6023      	str	r3, [r4, #0]
 80149ae:	bd38      	pop	{r3, r4, r5, pc}
 80149b0:	2000721c 	.word	0x2000721c

080149b4 <__swsetup_r>:
 80149b4:	4b32      	ldr	r3, [pc, #200]	; (8014a80 <__swsetup_r+0xcc>)
 80149b6:	b570      	push	{r4, r5, r6, lr}
 80149b8:	681d      	ldr	r5, [r3, #0]
 80149ba:	4606      	mov	r6, r0
 80149bc:	460c      	mov	r4, r1
 80149be:	b125      	cbz	r5, 80149ca <__swsetup_r+0x16>
 80149c0:	69ab      	ldr	r3, [r5, #24]
 80149c2:	b913      	cbnz	r3, 80149ca <__swsetup_r+0x16>
 80149c4:	4628      	mov	r0, r5
 80149c6:	f7ff faeb 	bl	8013fa0 <__sinit>
 80149ca:	4b2e      	ldr	r3, [pc, #184]	; (8014a84 <__swsetup_r+0xd0>)
 80149cc:	429c      	cmp	r4, r3
 80149ce:	d10f      	bne.n	80149f0 <__swsetup_r+0x3c>
 80149d0:	686c      	ldr	r4, [r5, #4]
 80149d2:	89a3      	ldrh	r3, [r4, #12]
 80149d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80149d8:	0719      	lsls	r1, r3, #28
 80149da:	d42c      	bmi.n	8014a36 <__swsetup_r+0x82>
 80149dc:	06dd      	lsls	r5, r3, #27
 80149de:	d411      	bmi.n	8014a04 <__swsetup_r+0x50>
 80149e0:	2309      	movs	r3, #9
 80149e2:	6033      	str	r3, [r6, #0]
 80149e4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80149e8:	81a3      	strh	r3, [r4, #12]
 80149ea:	f04f 30ff 	mov.w	r0, #4294967295
 80149ee:	e03e      	b.n	8014a6e <__swsetup_r+0xba>
 80149f0:	4b25      	ldr	r3, [pc, #148]	; (8014a88 <__swsetup_r+0xd4>)
 80149f2:	429c      	cmp	r4, r3
 80149f4:	d101      	bne.n	80149fa <__swsetup_r+0x46>
 80149f6:	68ac      	ldr	r4, [r5, #8]
 80149f8:	e7eb      	b.n	80149d2 <__swsetup_r+0x1e>
 80149fa:	4b24      	ldr	r3, [pc, #144]	; (8014a8c <__swsetup_r+0xd8>)
 80149fc:	429c      	cmp	r4, r3
 80149fe:	bf08      	it	eq
 8014a00:	68ec      	ldreq	r4, [r5, #12]
 8014a02:	e7e6      	b.n	80149d2 <__swsetup_r+0x1e>
 8014a04:	0758      	lsls	r0, r3, #29
 8014a06:	d512      	bpl.n	8014a2e <__swsetup_r+0x7a>
 8014a08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014a0a:	b141      	cbz	r1, 8014a1e <__swsetup_r+0x6a>
 8014a0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014a10:	4299      	cmp	r1, r3
 8014a12:	d002      	beq.n	8014a1a <__swsetup_r+0x66>
 8014a14:	4630      	mov	r0, r6
 8014a16:	f7ff fb7d 	bl	8014114 <_free_r>
 8014a1a:	2300      	movs	r3, #0
 8014a1c:	6363      	str	r3, [r4, #52]	; 0x34
 8014a1e:	89a3      	ldrh	r3, [r4, #12]
 8014a20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014a24:	81a3      	strh	r3, [r4, #12]
 8014a26:	2300      	movs	r3, #0
 8014a28:	6063      	str	r3, [r4, #4]
 8014a2a:	6923      	ldr	r3, [r4, #16]
 8014a2c:	6023      	str	r3, [r4, #0]
 8014a2e:	89a3      	ldrh	r3, [r4, #12]
 8014a30:	f043 0308 	orr.w	r3, r3, #8
 8014a34:	81a3      	strh	r3, [r4, #12]
 8014a36:	6923      	ldr	r3, [r4, #16]
 8014a38:	b94b      	cbnz	r3, 8014a4e <__swsetup_r+0x9a>
 8014a3a:	89a3      	ldrh	r3, [r4, #12]
 8014a3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014a40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a44:	d003      	beq.n	8014a4e <__swsetup_r+0x9a>
 8014a46:	4621      	mov	r1, r4
 8014a48:	4630      	mov	r0, r6
 8014a4a:	f000 f931 	bl	8014cb0 <__smakebuf_r>
 8014a4e:	89a0      	ldrh	r0, [r4, #12]
 8014a50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014a54:	f010 0301 	ands.w	r3, r0, #1
 8014a58:	d00a      	beq.n	8014a70 <__swsetup_r+0xbc>
 8014a5a:	2300      	movs	r3, #0
 8014a5c:	60a3      	str	r3, [r4, #8]
 8014a5e:	6963      	ldr	r3, [r4, #20]
 8014a60:	425b      	negs	r3, r3
 8014a62:	61a3      	str	r3, [r4, #24]
 8014a64:	6923      	ldr	r3, [r4, #16]
 8014a66:	b943      	cbnz	r3, 8014a7a <__swsetup_r+0xc6>
 8014a68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014a6c:	d1ba      	bne.n	80149e4 <__swsetup_r+0x30>
 8014a6e:	bd70      	pop	{r4, r5, r6, pc}
 8014a70:	0781      	lsls	r1, r0, #30
 8014a72:	bf58      	it	pl
 8014a74:	6963      	ldrpl	r3, [r4, #20]
 8014a76:	60a3      	str	r3, [r4, #8]
 8014a78:	e7f4      	b.n	8014a64 <__swsetup_r+0xb0>
 8014a7a:	2000      	movs	r0, #0
 8014a7c:	e7f7      	b.n	8014a6e <__swsetup_r+0xba>
 8014a7e:	bf00      	nop
 8014a80:	20000014 	.word	0x20000014
 8014a84:	08017a20 	.word	0x08017a20
 8014a88:	08017a40 	.word	0x08017a40
 8014a8c:	08017a00 	.word	0x08017a00

08014a90 <abort>:
 8014a90:	b508      	push	{r3, lr}
 8014a92:	2006      	movs	r0, #6
 8014a94:	f000 f992 	bl	8014dbc <raise>
 8014a98:	2001      	movs	r0, #1
 8014a9a:	f7ec fbc5 	bl	8001228 <_exit>
	...

08014aa0 <_close_r>:
 8014aa0:	b538      	push	{r3, r4, r5, lr}
 8014aa2:	4d06      	ldr	r5, [pc, #24]	; (8014abc <_close_r+0x1c>)
 8014aa4:	2300      	movs	r3, #0
 8014aa6:	4604      	mov	r4, r0
 8014aa8:	4608      	mov	r0, r1
 8014aaa:	602b      	str	r3, [r5, #0]
 8014aac:	f7ec fbff 	bl	80012ae <_close>
 8014ab0:	1c43      	adds	r3, r0, #1
 8014ab2:	d102      	bne.n	8014aba <_close_r+0x1a>
 8014ab4:	682b      	ldr	r3, [r5, #0]
 8014ab6:	b103      	cbz	r3, 8014aba <_close_r+0x1a>
 8014ab8:	6023      	str	r3, [r4, #0]
 8014aba:	bd38      	pop	{r3, r4, r5, pc}
 8014abc:	2000721c 	.word	0x2000721c

08014ac0 <__sflush_r>:
 8014ac0:	898a      	ldrh	r2, [r1, #12]
 8014ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ac6:	4605      	mov	r5, r0
 8014ac8:	0710      	lsls	r0, r2, #28
 8014aca:	460c      	mov	r4, r1
 8014acc:	d458      	bmi.n	8014b80 <__sflush_r+0xc0>
 8014ace:	684b      	ldr	r3, [r1, #4]
 8014ad0:	2b00      	cmp	r3, #0
 8014ad2:	dc05      	bgt.n	8014ae0 <__sflush_r+0x20>
 8014ad4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	dc02      	bgt.n	8014ae0 <__sflush_r+0x20>
 8014ada:	2000      	movs	r0, #0
 8014adc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ae0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ae2:	2e00      	cmp	r6, #0
 8014ae4:	d0f9      	beq.n	8014ada <__sflush_r+0x1a>
 8014ae6:	2300      	movs	r3, #0
 8014ae8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014aec:	682f      	ldr	r7, [r5, #0]
 8014aee:	602b      	str	r3, [r5, #0]
 8014af0:	d032      	beq.n	8014b58 <__sflush_r+0x98>
 8014af2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014af4:	89a3      	ldrh	r3, [r4, #12]
 8014af6:	075a      	lsls	r2, r3, #29
 8014af8:	d505      	bpl.n	8014b06 <__sflush_r+0x46>
 8014afa:	6863      	ldr	r3, [r4, #4]
 8014afc:	1ac0      	subs	r0, r0, r3
 8014afe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014b00:	b10b      	cbz	r3, 8014b06 <__sflush_r+0x46>
 8014b02:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014b04:	1ac0      	subs	r0, r0, r3
 8014b06:	2300      	movs	r3, #0
 8014b08:	4602      	mov	r2, r0
 8014b0a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014b0c:	6a21      	ldr	r1, [r4, #32]
 8014b0e:	4628      	mov	r0, r5
 8014b10:	47b0      	blx	r6
 8014b12:	1c43      	adds	r3, r0, #1
 8014b14:	89a3      	ldrh	r3, [r4, #12]
 8014b16:	d106      	bne.n	8014b26 <__sflush_r+0x66>
 8014b18:	6829      	ldr	r1, [r5, #0]
 8014b1a:	291d      	cmp	r1, #29
 8014b1c:	d82c      	bhi.n	8014b78 <__sflush_r+0xb8>
 8014b1e:	4a2a      	ldr	r2, [pc, #168]	; (8014bc8 <__sflush_r+0x108>)
 8014b20:	40ca      	lsrs	r2, r1
 8014b22:	07d6      	lsls	r6, r2, #31
 8014b24:	d528      	bpl.n	8014b78 <__sflush_r+0xb8>
 8014b26:	2200      	movs	r2, #0
 8014b28:	6062      	str	r2, [r4, #4]
 8014b2a:	04d9      	lsls	r1, r3, #19
 8014b2c:	6922      	ldr	r2, [r4, #16]
 8014b2e:	6022      	str	r2, [r4, #0]
 8014b30:	d504      	bpl.n	8014b3c <__sflush_r+0x7c>
 8014b32:	1c42      	adds	r2, r0, #1
 8014b34:	d101      	bne.n	8014b3a <__sflush_r+0x7a>
 8014b36:	682b      	ldr	r3, [r5, #0]
 8014b38:	b903      	cbnz	r3, 8014b3c <__sflush_r+0x7c>
 8014b3a:	6560      	str	r0, [r4, #84]	; 0x54
 8014b3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014b3e:	602f      	str	r7, [r5, #0]
 8014b40:	2900      	cmp	r1, #0
 8014b42:	d0ca      	beq.n	8014ada <__sflush_r+0x1a>
 8014b44:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014b48:	4299      	cmp	r1, r3
 8014b4a:	d002      	beq.n	8014b52 <__sflush_r+0x92>
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	f7ff fae1 	bl	8014114 <_free_r>
 8014b52:	2000      	movs	r0, #0
 8014b54:	6360      	str	r0, [r4, #52]	; 0x34
 8014b56:	e7c1      	b.n	8014adc <__sflush_r+0x1c>
 8014b58:	6a21      	ldr	r1, [r4, #32]
 8014b5a:	2301      	movs	r3, #1
 8014b5c:	4628      	mov	r0, r5
 8014b5e:	47b0      	blx	r6
 8014b60:	1c41      	adds	r1, r0, #1
 8014b62:	d1c7      	bne.n	8014af4 <__sflush_r+0x34>
 8014b64:	682b      	ldr	r3, [r5, #0]
 8014b66:	2b00      	cmp	r3, #0
 8014b68:	d0c4      	beq.n	8014af4 <__sflush_r+0x34>
 8014b6a:	2b1d      	cmp	r3, #29
 8014b6c:	d001      	beq.n	8014b72 <__sflush_r+0xb2>
 8014b6e:	2b16      	cmp	r3, #22
 8014b70:	d101      	bne.n	8014b76 <__sflush_r+0xb6>
 8014b72:	602f      	str	r7, [r5, #0]
 8014b74:	e7b1      	b.n	8014ada <__sflush_r+0x1a>
 8014b76:	89a3      	ldrh	r3, [r4, #12]
 8014b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014b7c:	81a3      	strh	r3, [r4, #12]
 8014b7e:	e7ad      	b.n	8014adc <__sflush_r+0x1c>
 8014b80:	690f      	ldr	r7, [r1, #16]
 8014b82:	2f00      	cmp	r7, #0
 8014b84:	d0a9      	beq.n	8014ada <__sflush_r+0x1a>
 8014b86:	0793      	lsls	r3, r2, #30
 8014b88:	680e      	ldr	r6, [r1, #0]
 8014b8a:	bf08      	it	eq
 8014b8c:	694b      	ldreq	r3, [r1, #20]
 8014b8e:	600f      	str	r7, [r1, #0]
 8014b90:	bf18      	it	ne
 8014b92:	2300      	movne	r3, #0
 8014b94:	eba6 0807 	sub.w	r8, r6, r7
 8014b98:	608b      	str	r3, [r1, #8]
 8014b9a:	f1b8 0f00 	cmp.w	r8, #0
 8014b9e:	dd9c      	ble.n	8014ada <__sflush_r+0x1a>
 8014ba0:	6a21      	ldr	r1, [r4, #32]
 8014ba2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014ba4:	4643      	mov	r3, r8
 8014ba6:	463a      	mov	r2, r7
 8014ba8:	4628      	mov	r0, r5
 8014baa:	47b0      	blx	r6
 8014bac:	2800      	cmp	r0, #0
 8014bae:	dc06      	bgt.n	8014bbe <__sflush_r+0xfe>
 8014bb0:	89a3      	ldrh	r3, [r4, #12]
 8014bb2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014bb6:	81a3      	strh	r3, [r4, #12]
 8014bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8014bbc:	e78e      	b.n	8014adc <__sflush_r+0x1c>
 8014bbe:	4407      	add	r7, r0
 8014bc0:	eba8 0800 	sub.w	r8, r8, r0
 8014bc4:	e7e9      	b.n	8014b9a <__sflush_r+0xda>
 8014bc6:	bf00      	nop
 8014bc8:	20400001 	.word	0x20400001

08014bcc <_fflush_r>:
 8014bcc:	b538      	push	{r3, r4, r5, lr}
 8014bce:	690b      	ldr	r3, [r1, #16]
 8014bd0:	4605      	mov	r5, r0
 8014bd2:	460c      	mov	r4, r1
 8014bd4:	b913      	cbnz	r3, 8014bdc <_fflush_r+0x10>
 8014bd6:	2500      	movs	r5, #0
 8014bd8:	4628      	mov	r0, r5
 8014bda:	bd38      	pop	{r3, r4, r5, pc}
 8014bdc:	b118      	cbz	r0, 8014be6 <_fflush_r+0x1a>
 8014bde:	6983      	ldr	r3, [r0, #24]
 8014be0:	b90b      	cbnz	r3, 8014be6 <_fflush_r+0x1a>
 8014be2:	f7ff f9dd 	bl	8013fa0 <__sinit>
 8014be6:	4b14      	ldr	r3, [pc, #80]	; (8014c38 <_fflush_r+0x6c>)
 8014be8:	429c      	cmp	r4, r3
 8014bea:	d11b      	bne.n	8014c24 <_fflush_r+0x58>
 8014bec:	686c      	ldr	r4, [r5, #4]
 8014bee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014bf2:	2b00      	cmp	r3, #0
 8014bf4:	d0ef      	beq.n	8014bd6 <_fflush_r+0xa>
 8014bf6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014bf8:	07d0      	lsls	r0, r2, #31
 8014bfa:	d404      	bmi.n	8014c06 <_fflush_r+0x3a>
 8014bfc:	0599      	lsls	r1, r3, #22
 8014bfe:	d402      	bmi.n	8014c06 <_fflush_r+0x3a>
 8014c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c02:	f7ff fa7d 	bl	8014100 <__retarget_lock_acquire_recursive>
 8014c06:	4628      	mov	r0, r5
 8014c08:	4621      	mov	r1, r4
 8014c0a:	f7ff ff59 	bl	8014ac0 <__sflush_r>
 8014c0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014c10:	07da      	lsls	r2, r3, #31
 8014c12:	4605      	mov	r5, r0
 8014c14:	d4e0      	bmi.n	8014bd8 <_fflush_r+0xc>
 8014c16:	89a3      	ldrh	r3, [r4, #12]
 8014c18:	059b      	lsls	r3, r3, #22
 8014c1a:	d4dd      	bmi.n	8014bd8 <_fflush_r+0xc>
 8014c1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014c1e:	f7ff fa70 	bl	8014102 <__retarget_lock_release_recursive>
 8014c22:	e7d9      	b.n	8014bd8 <_fflush_r+0xc>
 8014c24:	4b05      	ldr	r3, [pc, #20]	; (8014c3c <_fflush_r+0x70>)
 8014c26:	429c      	cmp	r4, r3
 8014c28:	d101      	bne.n	8014c2e <_fflush_r+0x62>
 8014c2a:	68ac      	ldr	r4, [r5, #8]
 8014c2c:	e7df      	b.n	8014bee <_fflush_r+0x22>
 8014c2e:	4b04      	ldr	r3, [pc, #16]	; (8014c40 <_fflush_r+0x74>)
 8014c30:	429c      	cmp	r4, r3
 8014c32:	bf08      	it	eq
 8014c34:	68ec      	ldreq	r4, [r5, #12]
 8014c36:	e7da      	b.n	8014bee <_fflush_r+0x22>
 8014c38:	08017a20 	.word	0x08017a20
 8014c3c:	08017a40 	.word	0x08017a40
 8014c40:	08017a00 	.word	0x08017a00

08014c44 <_lseek_r>:
 8014c44:	b538      	push	{r3, r4, r5, lr}
 8014c46:	4d07      	ldr	r5, [pc, #28]	; (8014c64 <_lseek_r+0x20>)
 8014c48:	4604      	mov	r4, r0
 8014c4a:	4608      	mov	r0, r1
 8014c4c:	4611      	mov	r1, r2
 8014c4e:	2200      	movs	r2, #0
 8014c50:	602a      	str	r2, [r5, #0]
 8014c52:	461a      	mov	r2, r3
 8014c54:	f7ec fb52 	bl	80012fc <_lseek>
 8014c58:	1c43      	adds	r3, r0, #1
 8014c5a:	d102      	bne.n	8014c62 <_lseek_r+0x1e>
 8014c5c:	682b      	ldr	r3, [r5, #0]
 8014c5e:	b103      	cbz	r3, 8014c62 <_lseek_r+0x1e>
 8014c60:	6023      	str	r3, [r4, #0]
 8014c62:	bd38      	pop	{r3, r4, r5, pc}
 8014c64:	2000721c 	.word	0x2000721c

08014c68 <__swhatbuf_r>:
 8014c68:	b570      	push	{r4, r5, r6, lr}
 8014c6a:	460e      	mov	r6, r1
 8014c6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c70:	2900      	cmp	r1, #0
 8014c72:	b096      	sub	sp, #88	; 0x58
 8014c74:	4614      	mov	r4, r2
 8014c76:	461d      	mov	r5, r3
 8014c78:	da07      	bge.n	8014c8a <__swhatbuf_r+0x22>
 8014c7a:	2300      	movs	r3, #0
 8014c7c:	602b      	str	r3, [r5, #0]
 8014c7e:	89b3      	ldrh	r3, [r6, #12]
 8014c80:	061a      	lsls	r2, r3, #24
 8014c82:	d410      	bmi.n	8014ca6 <__swhatbuf_r+0x3e>
 8014c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014c88:	e00e      	b.n	8014ca8 <__swhatbuf_r+0x40>
 8014c8a:	466a      	mov	r2, sp
 8014c8c:	f000 f8b2 	bl	8014df4 <_fstat_r>
 8014c90:	2800      	cmp	r0, #0
 8014c92:	dbf2      	blt.n	8014c7a <__swhatbuf_r+0x12>
 8014c94:	9a01      	ldr	r2, [sp, #4]
 8014c96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014c9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014c9e:	425a      	negs	r2, r3
 8014ca0:	415a      	adcs	r2, r3
 8014ca2:	602a      	str	r2, [r5, #0]
 8014ca4:	e7ee      	b.n	8014c84 <__swhatbuf_r+0x1c>
 8014ca6:	2340      	movs	r3, #64	; 0x40
 8014ca8:	2000      	movs	r0, #0
 8014caa:	6023      	str	r3, [r4, #0]
 8014cac:	b016      	add	sp, #88	; 0x58
 8014cae:	bd70      	pop	{r4, r5, r6, pc}

08014cb0 <__smakebuf_r>:
 8014cb0:	898b      	ldrh	r3, [r1, #12]
 8014cb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014cb4:	079d      	lsls	r5, r3, #30
 8014cb6:	4606      	mov	r6, r0
 8014cb8:	460c      	mov	r4, r1
 8014cba:	d507      	bpl.n	8014ccc <__smakebuf_r+0x1c>
 8014cbc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014cc0:	6023      	str	r3, [r4, #0]
 8014cc2:	6123      	str	r3, [r4, #16]
 8014cc4:	2301      	movs	r3, #1
 8014cc6:	6163      	str	r3, [r4, #20]
 8014cc8:	b002      	add	sp, #8
 8014cca:	bd70      	pop	{r4, r5, r6, pc}
 8014ccc:	ab01      	add	r3, sp, #4
 8014cce:	466a      	mov	r2, sp
 8014cd0:	f7ff ffca 	bl	8014c68 <__swhatbuf_r>
 8014cd4:	9900      	ldr	r1, [sp, #0]
 8014cd6:	4605      	mov	r5, r0
 8014cd8:	4630      	mov	r0, r6
 8014cda:	f7ff fa6b 	bl	80141b4 <_malloc_r>
 8014cde:	b948      	cbnz	r0, 8014cf4 <__smakebuf_r+0x44>
 8014ce0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014ce4:	059a      	lsls	r2, r3, #22
 8014ce6:	d4ef      	bmi.n	8014cc8 <__smakebuf_r+0x18>
 8014ce8:	f023 0303 	bic.w	r3, r3, #3
 8014cec:	f043 0302 	orr.w	r3, r3, #2
 8014cf0:	81a3      	strh	r3, [r4, #12]
 8014cf2:	e7e3      	b.n	8014cbc <__smakebuf_r+0xc>
 8014cf4:	4b0d      	ldr	r3, [pc, #52]	; (8014d2c <__smakebuf_r+0x7c>)
 8014cf6:	62b3      	str	r3, [r6, #40]	; 0x28
 8014cf8:	89a3      	ldrh	r3, [r4, #12]
 8014cfa:	6020      	str	r0, [r4, #0]
 8014cfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014d00:	81a3      	strh	r3, [r4, #12]
 8014d02:	9b00      	ldr	r3, [sp, #0]
 8014d04:	6163      	str	r3, [r4, #20]
 8014d06:	9b01      	ldr	r3, [sp, #4]
 8014d08:	6120      	str	r0, [r4, #16]
 8014d0a:	b15b      	cbz	r3, 8014d24 <__smakebuf_r+0x74>
 8014d0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014d10:	4630      	mov	r0, r6
 8014d12:	f000 f881 	bl	8014e18 <_isatty_r>
 8014d16:	b128      	cbz	r0, 8014d24 <__smakebuf_r+0x74>
 8014d18:	89a3      	ldrh	r3, [r4, #12]
 8014d1a:	f023 0303 	bic.w	r3, r3, #3
 8014d1e:	f043 0301 	orr.w	r3, r3, #1
 8014d22:	81a3      	strh	r3, [r4, #12]
 8014d24:	89a0      	ldrh	r0, [r4, #12]
 8014d26:	4305      	orrs	r5, r0
 8014d28:	81a5      	strh	r5, [r4, #12]
 8014d2a:	e7cd      	b.n	8014cc8 <__smakebuf_r+0x18>
 8014d2c:	08013f39 	.word	0x08013f39

08014d30 <__malloc_lock>:
 8014d30:	4801      	ldr	r0, [pc, #4]	; (8014d38 <__malloc_lock+0x8>)
 8014d32:	f7ff b9e5 	b.w	8014100 <__retarget_lock_acquire_recursive>
 8014d36:	bf00      	nop
 8014d38:	20007224 	.word	0x20007224

08014d3c <__malloc_unlock>:
 8014d3c:	4801      	ldr	r0, [pc, #4]	; (8014d44 <__malloc_unlock+0x8>)
 8014d3e:	f7ff b9e0 	b.w	8014102 <__retarget_lock_release_recursive>
 8014d42:	bf00      	nop
 8014d44:	20007224 	.word	0x20007224

08014d48 <_read_r>:
 8014d48:	b538      	push	{r3, r4, r5, lr}
 8014d4a:	4d07      	ldr	r5, [pc, #28]	; (8014d68 <_read_r+0x20>)
 8014d4c:	4604      	mov	r4, r0
 8014d4e:	4608      	mov	r0, r1
 8014d50:	4611      	mov	r1, r2
 8014d52:	2200      	movs	r2, #0
 8014d54:	602a      	str	r2, [r5, #0]
 8014d56:	461a      	mov	r2, r3
 8014d58:	f7ec fa70 	bl	800123c <_read>
 8014d5c:	1c43      	adds	r3, r0, #1
 8014d5e:	d102      	bne.n	8014d66 <_read_r+0x1e>
 8014d60:	682b      	ldr	r3, [r5, #0]
 8014d62:	b103      	cbz	r3, 8014d66 <_read_r+0x1e>
 8014d64:	6023      	str	r3, [r4, #0]
 8014d66:	bd38      	pop	{r3, r4, r5, pc}
 8014d68:	2000721c 	.word	0x2000721c

08014d6c <_raise_r>:
 8014d6c:	291f      	cmp	r1, #31
 8014d6e:	b538      	push	{r3, r4, r5, lr}
 8014d70:	4604      	mov	r4, r0
 8014d72:	460d      	mov	r5, r1
 8014d74:	d904      	bls.n	8014d80 <_raise_r+0x14>
 8014d76:	2316      	movs	r3, #22
 8014d78:	6003      	str	r3, [r0, #0]
 8014d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8014d7e:	bd38      	pop	{r3, r4, r5, pc}
 8014d80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014d82:	b112      	cbz	r2, 8014d8a <_raise_r+0x1e>
 8014d84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014d88:	b94b      	cbnz	r3, 8014d9e <_raise_r+0x32>
 8014d8a:	4620      	mov	r0, r4
 8014d8c:	f000 f830 	bl	8014df0 <_getpid_r>
 8014d90:	462a      	mov	r2, r5
 8014d92:	4601      	mov	r1, r0
 8014d94:	4620      	mov	r0, r4
 8014d96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014d9a:	f000 b817 	b.w	8014dcc <_kill_r>
 8014d9e:	2b01      	cmp	r3, #1
 8014da0:	d00a      	beq.n	8014db8 <_raise_r+0x4c>
 8014da2:	1c59      	adds	r1, r3, #1
 8014da4:	d103      	bne.n	8014dae <_raise_r+0x42>
 8014da6:	2316      	movs	r3, #22
 8014da8:	6003      	str	r3, [r0, #0]
 8014daa:	2001      	movs	r0, #1
 8014dac:	e7e7      	b.n	8014d7e <_raise_r+0x12>
 8014dae:	2400      	movs	r4, #0
 8014db0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014db4:	4628      	mov	r0, r5
 8014db6:	4798      	blx	r3
 8014db8:	2000      	movs	r0, #0
 8014dba:	e7e0      	b.n	8014d7e <_raise_r+0x12>

08014dbc <raise>:
 8014dbc:	4b02      	ldr	r3, [pc, #8]	; (8014dc8 <raise+0xc>)
 8014dbe:	4601      	mov	r1, r0
 8014dc0:	6818      	ldr	r0, [r3, #0]
 8014dc2:	f7ff bfd3 	b.w	8014d6c <_raise_r>
 8014dc6:	bf00      	nop
 8014dc8:	20000014 	.word	0x20000014

08014dcc <_kill_r>:
 8014dcc:	b538      	push	{r3, r4, r5, lr}
 8014dce:	4d07      	ldr	r5, [pc, #28]	; (8014dec <_kill_r+0x20>)
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	4604      	mov	r4, r0
 8014dd4:	4608      	mov	r0, r1
 8014dd6:	4611      	mov	r1, r2
 8014dd8:	602b      	str	r3, [r5, #0]
 8014dda:	f7ec fa13 	bl	8001204 <_kill>
 8014dde:	1c43      	adds	r3, r0, #1
 8014de0:	d102      	bne.n	8014de8 <_kill_r+0x1c>
 8014de2:	682b      	ldr	r3, [r5, #0]
 8014de4:	b103      	cbz	r3, 8014de8 <_kill_r+0x1c>
 8014de6:	6023      	str	r3, [r4, #0]
 8014de8:	bd38      	pop	{r3, r4, r5, pc}
 8014dea:	bf00      	nop
 8014dec:	2000721c 	.word	0x2000721c

08014df0 <_getpid_r>:
 8014df0:	f7ec ba00 	b.w	80011f4 <_getpid>

08014df4 <_fstat_r>:
 8014df4:	b538      	push	{r3, r4, r5, lr}
 8014df6:	4d07      	ldr	r5, [pc, #28]	; (8014e14 <_fstat_r+0x20>)
 8014df8:	2300      	movs	r3, #0
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	4608      	mov	r0, r1
 8014dfe:	4611      	mov	r1, r2
 8014e00:	602b      	str	r3, [r5, #0]
 8014e02:	f7ec fa60 	bl	80012c6 <_fstat>
 8014e06:	1c43      	adds	r3, r0, #1
 8014e08:	d102      	bne.n	8014e10 <_fstat_r+0x1c>
 8014e0a:	682b      	ldr	r3, [r5, #0]
 8014e0c:	b103      	cbz	r3, 8014e10 <_fstat_r+0x1c>
 8014e0e:	6023      	str	r3, [r4, #0]
 8014e10:	bd38      	pop	{r3, r4, r5, pc}
 8014e12:	bf00      	nop
 8014e14:	2000721c 	.word	0x2000721c

08014e18 <_isatty_r>:
 8014e18:	b538      	push	{r3, r4, r5, lr}
 8014e1a:	4d06      	ldr	r5, [pc, #24]	; (8014e34 <_isatty_r+0x1c>)
 8014e1c:	2300      	movs	r3, #0
 8014e1e:	4604      	mov	r4, r0
 8014e20:	4608      	mov	r0, r1
 8014e22:	602b      	str	r3, [r5, #0]
 8014e24:	f7ec fa5f 	bl	80012e6 <_isatty>
 8014e28:	1c43      	adds	r3, r0, #1
 8014e2a:	d102      	bne.n	8014e32 <_isatty_r+0x1a>
 8014e2c:	682b      	ldr	r3, [r5, #0]
 8014e2e:	b103      	cbz	r3, 8014e32 <_isatty_r+0x1a>
 8014e30:	6023      	str	r3, [r4, #0]
 8014e32:	bd38      	pop	{r3, r4, r5, pc}
 8014e34:	2000721c 	.word	0x2000721c

08014e38 <_init>:
 8014e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e3a:	bf00      	nop
 8014e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e3e:	bc08      	pop	{r3}
 8014e40:	469e      	mov	lr, r3
 8014e42:	4770      	bx	lr

08014e44 <_fini>:
 8014e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014e46:	bf00      	nop
 8014e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014e4a:	bc08      	pop	{r3}
 8014e4c:	469e      	mov	lr, r3
 8014e4e:	4770      	bx	lr
